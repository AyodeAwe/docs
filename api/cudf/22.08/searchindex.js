Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.applymap", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/series", "api_docs/string_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/index", "developer_guide/library_design", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.applymap.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/index.md", "developer_guide/library_design.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.applymap", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.from_dlpack", "cudf.get_dummies", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "Series", "String handling", "SubwordTokenizer", "Window", "Developer Guide", "Library Design", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 128, 169, 183, 202, 203, 204, 208, 247, 252, 253, 257, 270, 271, 303, 433, 446, 455, 636, 649, 663, 664, 665, 666, 674, 682, 687], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 135, 136, 137, 142, 146, 152, 153, 154, 155, 159, 163, 165, 166, 175, 177, 180, 182, 183, 184, 189, 196, 202, 204, 210, 216, 222, 224, 225, 226, 227, 228, 232, 233, 235, 240, 245, 252, 253, 254, 260, 271, 276, 282, 285, 291, 293, 302, 305, 308, 309, 310, 311, 317, 323, 324, 326, 327, 328, 329, 330, 331, 334, 336, 339, 352, 353, 356, 358, 359, 360, 363, 364, 366, 367, 370, 371, 382, 383, 384, 385, 386, 387, 388, 389, 391, 394, 396, 397, 398, 401, 402, 403, 404, 407, 410, 417, 418, 419, 420, 427, 429, 430, 437, 441, 443, 445, 446, 455, 474, 478, 480, 488, 515, 520, 543, 546, 547, 549, 550, 551, 552, 553, 554, 568, 572, 573, 574, 576, 577, 585, 591, 592, 593, 594, 598, 601, 605, 607, 613, 626, 646, 647, 648, 654, 655, 656, 659, 660, 661, 664, 673, 674, 683, 686, 687, 691, 692], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 152, 153, 154, 155, 160, 161, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 181, 182, 183, 198, 199, 202, 203, 204, 211, 214, 216, 218, 219, 223, 235, 239, 241, 243, 244, 246, 248, 249, 252, 253, 254, 255, 257, 261, 262, 263, 265, 269, 270, 271, 273, 276, 279, 280, 283, 284, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 302, 308, 309, 311, 312, 313, 316, 317, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 345, 346, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 409, 410, 411, 412, 414, 417, 418, 419, 420, 424, 425, 428, 430, 432, 433, 434, 437, 438, 441, 444, 445, 446, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 478, 480, 481, 485, 487, 488, 489, 490, 496, 497, 506, 517, 518, 521, 531, 532, 534, 535, 538, 539, 540, 542, 543, 544, 545, 550, 555, 561, 562, 568, 570, 571, 572, 573, 574, 575, 577, 581, 582, 590, 591, 592, 593, 594, 596, 598, 601, 605, 646, 648, 649, 653, 654, 655, 656, 657, 659, 660, 661, 662, 667, 668, 669, 684, 685, 690, 693], "categori": [0, 2, 21, 36, 93, 94, 225, 233, 285, 291, 302, 320, 326, 457, 458, 459, 462, 463, 464, 465, 493, 525, 646, 648, 663, 666, 682, 684, 687, 688, 692, 694], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 121, 140, 142, 149, 165, 170, 178, 183, 202, 235, 240, 243, 252, 284, 285, 310, 312, 320, 330, 365, 372, 375, 388, 406, 407, 413, 429, 441, 446, 455, 458, 459, 464, 465, 470, 472, 482, 549, 646, 647, 649, 656, 659, 663, 664, 665, 666, 667, 684, 689, 691], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 161, 167, 169, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 211, 214, 216, 217, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 238, 239, 241, 243, 244, 247, 248, 249, 252, 253, 254, 257, 259, 266, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 291, 292, 293, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 425, 428, 432, 433, 437, 438, 439, 441, 444, 445, 446, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 568, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 646, 648, 656, 659, 661, 663, 664, 665, 666, 667, 668, 669, 677, 682, 684, 685, 686, 688, 689, 690, 691, 694], "copi": [0, 5, 21, 44, 45, 46, 54, 123, 124, 161, 163, 167, 173, 174, 183, 202, 204, 243, 245, 252, 253, 254, 257, 270, 285, 311, 322, 390, 391, 425, 427, 432, 446, 455, 457, 458, 459, 463, 464, 465, 520, 531, 556, 647, 661, 682, 692, 694], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 117, 121, 123, 124, 126, 128, 132, 137, 140, 141, 143, 148, 149, 157, 159, 161, 165, 166, 169, 170, 177, 178, 182, 183, 202, 204, 211, 212, 216, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 238, 241, 243, 249, 252, 253, 254, 255, 257, 265, 270, 271, 279, 280, 281, 283, 285, 289, 292, 293, 302, 307, 310, 311, 312, 313, 316, 317, 318, 319, 322, 328, 329, 330, 331, 332, 339, 344, 345, 346, 353, 356, 358, 362, 365, 369, 371, 373, 374, 388, 393, 395, 399, 404, 406, 412, 413, 422, 425, 429, 430, 433, 439, 441, 445, 446, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 470, 477, 480, 485, 486, 487, 488, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 525, 531, 538, 543, 544, 554, 571, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 615, 616, 618, 619, 620, 621, 637, 646, 648, 649, 650, 656, 659, 661, 663, 664, 665, 666, 667, 684, 685, 686, 689, 690, 693], "name": [0, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 114, 117, 119, 120, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 146, 148, 149, 152, 153, 160, 165, 168, 170, 173, 175, 176, 177, 183, 198, 199, 202, 204, 217, 235, 238, 241, 243, 246, 248, 252, 253, 254, 257, 258, 259, 261, 262, 263, 266, 269, 270, 271, 276, 284, 285, 302, 308, 309, 311, 312, 317, 324, 329, 330, 331, 337, 344, 345, 346, 353, 355, 356, 359, 360, 363, 364, 366, 367, 371, 373, 374, 383, 386, 387, 389, 391, 395, 396, 397, 398, 400, 401, 402, 403, 404, 410, 412, 417, 418, 428, 429, 437, 446, 453, 454, 455, 456, 538, 557, 560, 579, 604, 622, 648, 649, 652, 653, 654, 656, 658, 663, 664, 665, 666, 669, 682, 684, 688, 689, 690, 691, 693], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 119, 123, 124, 125, 126, 127, 132, 133, 137, 139, 142, 160, 165, 166, 180, 182, 191, 208, 209, 216, 221, 239, 240, 257, 259, 277, 278, 281, 302, 303, 304, 307, 311, 314, 316, 322, 323, 326, 328, 330, 333, 335, 352, 358, 377, 382, 392, 393, 394, 399, 400, 404, 407, 429, 430, 438, 443, 445, 456, 473, 475, 480, 481, 485, 486, 497, 502, 518, 520, 531, 541, 542, 544, 546, 547, 551, 552, 553, 560, 579, 585, 597, 602, 604, 615, 637, 638, 646, 647, 649, 653, 656, 658, 668, 682, 684, 689, 690, 691, 693], "categor": [0, 1, 2, 21, 36, 93, 94, 224, 225, 226, 227, 228, 232, 233, 285, 291, 302, 326, 646, 648, 661, 663, 664, 665, 666, 682, 688, 689, 691, 694], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 165, 166, 167, 169, 170, 172, 175, 177, 178, 180, 181, 182, 199, 204, 211, 213, 214, 216, 217, 223, 229, 230, 231, 234, 243, 244, 248, 250, 255, 264, 271, 275, 276, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 425, 429, 430, 432, 433, 434, 437, 438, 439, 440, 441, 443, 444, 445, 454, 456, 463, 465, 466, 467, 470, 473, 475, 479, 480, 482, 488, 494, 495, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 522, 528, 530, 531, 537, 538, 542, 543, 552, 554, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 583, 584, 585, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 603, 605, 606, 637, 638, 646, 648, 653, 654, 656, 659, 661, 664, 665, 666, 668, 677, 678, 682, 684, 686, 688, 689, 690, 691, 692], "repres": [0, 23, 127, 144, 151, 160, 166, 181, 183, 271, 287, 289, 394, 408, 414, 430, 444, 446, 475, 494, 495, 512, 612, 643, 645, 646, 648, 682, 688, 693, 694], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 140, 157, 166, 177, 191, 195, 206, 243, 244, 265, 284, 293, 307, 313, 316, 320, 322, 332, 339, 344, 345, 346, 373, 374, 377, 382, 406, 422, 430, 456, 467, 471, 473, 480, 482, 485, 518, 528, 533, 537, 544, 597, 615, 616, 617, 618, 619, 620, 621, 625, 637, 646, 648, 656, 659, 673, 682, 685, 690], "anoth": [0, 40, 161, 165, 167, 177, 281, 306, 357, 425, 429, 432, 554, 682], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 146, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 192, 198, 245, 246, 261, 263, 269, 271, 276, 277, 278, 279, 280, 283, 284, 285, 291, 297, 298, 299, 300, 302, 308, 309, 311, 313, 316, 317, 318, 322, 324, 329, 330, 331, 333, 334, 337, 350, 351, 353, 355, 356, 359, 360, 363, 364, 366, 367, 371, 379, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 410, 412, 414, 417, 418, 419, 421, 423, 425, 427, 428, 429, 430, 432, 434, 437, 444, 453, 456, 560, 563, 569, 571, 572, 573, 574, 576, 577, 579, 583, 584, 585, 591, 592, 593, 594, 598, 600, 601, 603, 604, 605, 606, 622, 636, 637, 638, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 673, 674, 681, 684, 685, 686, 687, 689, 690, 691, 693], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 181, 182, 183, 184, 189, 196, 198, 199, 202, 204, 206, 208, 209, 211, 214, 216, 217, 219, 221, 223, 234, 235, 238, 239, 241, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 339, 344, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 375, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 411, 412, 413, 414, 417, 418, 419, 420, 422, 423, 425, 427, 428, 429, 430, 432, 433, 437, 439, 441, 444, 445, 446, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 470, 471, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 500, 501, 517, 519, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 554, 555, 557, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 613, 626, 628, 636, 637, 638, 643, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 692, 693], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 88, 94, 117, 118, 119, 121, 123, 125, 126, 137, 140, 157, 161, 166, 167, 182, 183, 202, 204, 211, 223, 234, 239, 243, 244, 249, 252, 253, 254, 255, 257, 262, 265, 271, 281, 284, 292, 301, 307, 320, 325, 326, 327, 330, 358, 386, 388, 392, 393, 404, 406, 422, 424, 425, 430, 432, 445, 446, 455, 479, 483, 517, 532, 576, 638, 646, 648, 659, 667, 682, 684, 685, 691], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 114, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 152, 153, 157, 165, 166, 175, 176, 178, 182, 183, 184, 189, 196, 202, 204, 211, 214, 223, 234, 244, 249, 252, 253, 254, 259, 261, 263, 271, 276, 281, 283, 289, 292, 302, 308, 309, 310, 311, 314, 317, 319, 322, 324, 326, 327, 329, 331, 344, 353, 356, 358, 364, 366, 367, 371, 383, 386, 387, 388, 389, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 417, 418, 422, 429, 430, 437, 445, 446, 455, 456, 457, 463, 464, 465, 471, 480, 483, 485, 500, 501, 505, 517, 525, 531, 532, 538, 544, 568, 576, 607, 613, 626, 646, 648, 655, 656, 659, 660, 661, 662, 663, 664, 666, 667, 669, 675, 677, 678, 682, 683, 684, 686, 687, 688, 689, 690, 693, 694], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 169, 170, 172, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 190, 193, 194, 197, 200, 202, 204, 206, 211, 214, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 238, 241, 243, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 270, 271, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 433, 434, 437, 438, 439, 441, 444, 445, 446, 450, 451, 452, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 568, 569, 571, 577, 579, 580, 583, 585, 597, 600, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 643, 645, 646, 648, 649, 652, 653, 654, 655, 656, 657, 660, 661, 664, 665, 666, 667, 668, 669, 684, 685, 686, 688, 689, 690, 693, 694], "dimension": [0, 144, 183, 202, 204, 252, 253, 254, 257, 271, 408, 446, 455, 538, 543, 646], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 107, 109, 110, 115, 116, 123, 125, 126, 127, 132, 141, 142, 148, 150, 151, 154, 158, 161, 166, 167, 170, 178, 179, 181, 185, 186, 187, 188, 190, 193, 194, 197, 199, 200, 201, 202, 204, 208, 209, 210, 221, 222, 226, 234, 239, 240, 241, 243, 244, 248, 252, 255, 256, 257, 261, 265, 271, 277, 278, 282, 283, 284, 286, 301, 302, 303, 304, 305, 310, 312, 318, 323, 326, 327, 334, 335, 336, 344, 352, 362, 372, 375, 378, 381, 384, 385, 392, 393, 394, 395, 399, 407, 412, 414, 419, 423, 425, 430, 432, 441, 442, 444, 454, 455, 456, 457, 460, 463, 464, 465, 472, 475, 477, 478, 480, 482, 483, 484, 486, 488, 489, 491, 493, 500, 501, 504, 505, 512, 515, 517, 522, 523, 524, 525, 528, 529, 531, 532, 537, 538, 541, 543, 548, 549, 554, 555, 572, 573, 574, 576, 577, 580, 585, 591, 592, 593, 594, 598, 600, 601, 603, 605, 607, 608, 609, 610, 611, 613, 614, 623, 624, 626, 627, 628, 629, 630, 637, 643, 645, 646, 653, 656, 658, 659, 660, 661, 662, 667, 668, 673, 681, 684, 685, 686, 687, 688, 690, 692, 693, 694], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 148, 149, 151, 152, 153, 154, 160, 165, 166, 168, 169, 170, 175, 176, 177, 181, 183, 199, 204, 216, 235, 241, 248, 253, 254, 255, 261, 262, 265, 271, 276, 279, 280, 281, 284, 292, 297, 298, 299, 300, 302, 308, 309, 310, 311, 312, 313, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 344, 352, 353, 356, 357, 359, 360, 363, 364, 366, 367, 371, 382, 383, 384, 385, 386, 387, 389, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 412, 413, 414, 417, 418, 419, 429, 430, 433, 437, 439, 441, 444, 446, 454, 464, 465, 466, 468, 470, 475, 480, 485, 486, 488, 491, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 516, 517, 521, 525, 528, 531, 537, 538, 539, 543, 544, 545, 563, 571, 572, 573, 574, 584, 591, 592, 593, 594, 598, 601, 605, 636, 637, 646, 647, 648, 649, 654, 655, 656, 657, 659, 660, 661, 664, 665, 667, 668, 669, 684, 685, 686, 687, 690, 692, 694], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 115, 116, 117, 119, 121, 123, 126, 127, 132, 133, 137, 140, 141, 142, 147, 151, 154, 165, 166, 170, 177, 178, 181, 182, 191, 195, 211, 212, 217, 223, 229, 230, 231, 234, 240, 249, 253, 254, 255, 257, 261, 271, 275, 277, 278, 279, 280, 282, 283, 284, 289, 293, 302, 311, 313, 316, 318, 322, 326, 327, 330, 340, 341, 342, 343, 344, 345, 346, 350, 351, 357, 358, 359, 361, 363, 372, 373, 374, 375, 382, 384, 385, 386, 388, 393, 394, 399, 400, 404, 406, 407, 411, 414, 419, 429, 430, 439, 444, 445, 456, 464, 465, 466, 475, 480, 483, 484, 485, 486, 488, 489, 491, 497, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 517, 521, 522, 525, 531, 532, 538, 539, 541, 543, 544, 545, 550, 552, 553, 554, 555, 556, 572, 573, 574, 585, 591, 592, 593, 594, 598, 601, 605, 615, 616, 617, 618, 619, 620, 621, 625, 628, 637, 646, 648, 649, 653, 654, 656, 658, 659, 660, 661, 663, 664, 665, 666, 673, 675, 676, 677, 680, 682, 686, 687, 688, 689, 690, 691, 692, 693, 694], "given": [0, 21, 44, 103, 112, 117, 118, 125, 126, 127, 128, 133, 137, 140, 170, 219, 239, 261, 285, 311, 327, 386, 392, 393, 394, 395, 400, 404, 406, 464, 465, 468, 471, 475, 480, 485, 488, 514, 528, 531, 538, 543, 544, 550, 554, 649, 654, 656, 660, 661, 667, 682, 692], "replac": [0, 46, 88, 137, 148, 182, 313, 358, 404, 412, 445, 488, 489, 497, 517, 532, 540, 542, 674, 684, 686, 691, 694], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 120, 121, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 148, 152, 153, 165, 166, 169, 175, 204, 216, 226, 232, 243, 271, 276, 284, 302, 308, 309, 317, 318, 324, 328, 329, 331, 339, 345, 346, 353, 356, 357, 364, 365, 366, 367, 369, 371, 373, 374, 379, 383, 387, 388, 389, 390, 396, 397, 398, 399, 401, 402, 403, 412, 417, 418, 429, 430, 433, 437, 439, 441, 466, 470, 472, 480, 531, 568, 639, 648, 656, 685, 690, 691, 694], "list": [0, 4, 8, 11, 14, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 114, 117, 120, 122, 124, 126, 128, 129, 130, 131, 134, 135, 136, 139, 141, 142, 143, 148, 149, 152, 153, 160, 165, 166, 170, 175, 176, 178, 182, 206, 208, 209, 210, 214, 221, 222, 234, 240, 241, 255, 259, 261, 262, 263, 266, 276, 281, 283, 284, 287, 289, 291, 302, 303, 304, 305, 308, 309, 310, 311, 317, 319, 324, 329, 330, 331, 335, 336, 337, 344, 353, 356, 358, 364, 366, 367, 371, 383, 386, 387, 389, 393, 395, 396, 397, 398, 401, 402, 403, 407, 412, 413, 417, 418, 429, 430, 437, 445, 456, 457, 463, 465, 475, 477, 480, 484, 485, 500, 501, 517, 531, 538, 543, 544, 548, 549, 560, 568, 577, 579, 604, 606, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 667, 669, 674, 682, 684, 686, 687, 689, 690, 691, 692, 693, 694], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 121, 123, 124, 127, 132, 133, 137, 140, 148, 160, 161, 165, 166, 167, 170, 172, 173, 178, 183, 199, 206, 241, 243, 248, 253, 254, 255, 257, 261, 262, 263, 270, 271, 283, 294, 302, 311, 313, 326, 327, 381, 382, 386, 388, 391, 394, 395, 399, 400, 404, 406, 412, 425, 429, 430, 432, 434, 441, 446, 454, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 487, 488, 489, 540, 542, 568, 577, 583, 585, 597, 637, 646, 648, 650, 653, 654, 656, 658, 660, 661, 690, 692], "item": [0, 36, 48, 106, 113, 137, 143, 271, 302, 316, 320, 404, 464, 465, 656, 658], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 159, 175, 271, 276, 283, 294, 308, 309, 316, 317, 318, 324, 329, 331, 353, 356, 364, 366, 367, 371, 377, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 464, 481, 646, 682, 684, 686, 688, 690, 694], "uniqu": [0, 36, 112, 124, 139, 178, 255, 257, 262, 265, 271, 302, 320, 343, 379, 441, 646, 648, 654, 659, 684, 685, 689, 694], "here": [0, 36, 302, 529, 655, 656, 660, 661, 682, 686, 690, 692], "also": [0, 15, 36, 54, 94, 123, 124, 126, 128, 132, 133, 243, 302, 322, 357, 391, 393, 395, 399, 400, 439, 480, 481, 483, 490, 492, 496, 497, 500, 501, 505, 512, 525, 528, 535, 537, 646, 649, 659, 660, 661, 682, 683, 684, 686, 688, 689, 690, 692, 693, 694], "thei": [0, 50, 94, 97, 121, 126, 170, 271, 318, 326, 327, 375, 388, 393, 475, 482, 549, 554, 649, 682, 683, 688, 689, 690, 694], "infer": [0, 4, 166, 183, 253, 254, 262, 271, 430, 449, 656, 659, 667, 684], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 113, 117, 123, 124, 127, 128, 137, 143, 148, 149, 150, 163, 165, 166, 170, 174, 177, 178, 182, 186, 188, 195, 208, 209, 211, 213, 216, 217, 245, 253, 254, 255, 259, 260, 261, 262, 263, 265, 271, 281, 282, 283, 302, 303, 304, 311, 313, 325, 326, 328, 330, 357, 358, 381, 390, 391, 394, 395, 404, 412, 413, 415, 427, 429, 430, 439, 445, 456, 468, 470, 471, 475, 477, 486, 487, 488, 489, 492, 521, 523, 524, 525, 526, 527, 531, 538, 539, 540, 542, 543, 545, 555, 568, 572, 573, 574, 580, 585, 591, 592, 593, 594, 595, 598, 601, 605, 609, 611, 625, 636, 637, 646, 647, 648, 653, 654, 655, 656, 657, 658, 660, 661, 667, 668, 682, 684, 685, 686, 687, 688, 690, 694], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 115, 116, 117, 121, 126, 128, 132, 137, 139, 140, 141, 147, 148, 149, 150, 151, 154, 159, 160, 161, 165, 166, 167, 170, 171, 178, 181, 182, 183, 202, 204, 207, 212, 216, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 241, 243, 249, 252, 253, 254, 257, 270, 271, 279, 280, 281, 282, 283, 284, 285, 289, 292, 293, 297, 298, 299, 300, 302, 307, 310, 311, 312, 313, 316, 317, 318, 319, 328, 329, 330, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 365, 371, 373, 374, 379, 384, 385, 388, 393, 395, 399, 404, 406, 411, 412, 413, 414, 419, 425, 429, 430, 432, 441, 444, 445, 446, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 470, 477, 480, 485, 486, 487, 488, 491, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 525, 528, 531, 537, 538, 543, 544, 563, 571, 572, 573, 574, 584, 591, 592, 593, 594, 598, 601, 605, 615, 616, 618, 619, 620, 621, 636, 637, 646, 649, 656, 658, 660, 663, 664, 665, 666, 667, 690, 692, 693], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 117, 121, 143, 150, 159, 161, 166, 167, 169, 171, 182, 205, 211, 213, 223, 224, 226, 227, 228, 232, 233, 234, 249, 253, 254, 279, 280, 289, 302, 307, 311, 316, 318, 332, 344, 345, 346, 358, 373, 374, 377, 386, 388, 425, 430, 432, 433, 445, 457, 458, 459, 462, 463, 464, 465, 467, 480, 485, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 544, 637, 646, 656, 661, 663, 664, 665, 666, 673, 686], "thi": [0, 1, 2, 7, 8, 14, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 152, 153, 154, 163, 167, 170, 172, 175, 181, 183, 198, 204, 208, 209, 211, 214, 217, 223, 229, 239, 240, 243, 245, 246, 265, 268, 269, 270, 271, 275, 276, 281, 282, 286, 289, 292, 293, 302, 303, 304, 307, 308, 309, 310, 317, 318, 323, 324, 326, 327, 329, 330, 331, 333, 334, 339, 340, 352, 353, 356, 364, 366, 367, 368, 371, 372, 375, 383, 384, 385, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 412, 413, 414, 415, 417, 418, 419, 427, 432, 434, 437, 438, 441, 444, 446, 449, 453, 457, 458, 459, 460, 463, 464, 465, 468, 474, 475, 479, 481, 483, 484, 487, 488, 489, 491, 496, 498, 499, 502, 503, 504, 505, 507, 509, 511, 512, 513, 516, 517, 520, 521, 523, 524, 525, 528, 532, 533, 535, 537, 538, 539, 543, 545, 546, 547, 550, 551, 554, 556, 571, 577, 585, 597, 636, 637, 646, 647, 648, 649, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 674, 676, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694], "treat": [0, 12, 13, 73, 94, 279, 280, 289, 339, 464, 465, 480, 523, 531, 538, 543, 555, 690, 692, 693], "an": [0, 3, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 68, 73, 75, 76, 93, 94, 104, 105, 115, 116, 117, 119, 123, 124, 125, 132, 133, 137, 142, 146, 148, 151, 154, 163, 165, 181, 191, 199, 208, 217, 229, 239, 240, 243, 245, 248, 249, 254, 262, 264, 265, 279, 280, 283, 292, 297, 298, 299, 300, 302, 303, 330, 337, 339, 340, 344, 345, 346, 362, 373, 374, 384, 385, 386, 390, 392, 399, 400, 404, 407, 410, 412, 414, 419, 427, 429, 444, 454, 462, 467, 468, 476, 478, 479, 480, 482, 485, 493, 498, 499, 502, 506, 510, 517, 519, 523, 524, 527, 536, 544, 555, 585, 602, 615, 637, 638, 646, 647, 655, 657, 658, 660, 667, 668, 673, 675, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 114, 115, 116, 117, 120, 122, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 143, 147, 150, 151, 152, 153, 154, 155, 160, 166, 169, 173, 175, 176, 178, 181, 199, 211, 223, 235, 248, 249, 255, 265, 271, 276, 279, 280, 282, 283, 286, 294, 297, 298, 299, 300, 302, 308, 309, 310, 317, 319, 322, 324, 329, 330, 331, 339, 344, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 406, 411, 414, 417, 418, 419, 420, 430, 433, 437, 441, 444, 454, 456, 465, 466, 470, 475, 476, 488, 517, 519, 527, 536, 555, 560, 568, 571, 572, 573, 574, 579, 580, 583, 585, 591, 592, 593, 594, 597, 598, 601, 602, 604, 605, 646, 653, 654, 659, 662, 668, 669, 682, 684, 685, 687, 688, 689, 690, 691, 693], "unord": [0, 94, 459, 646], "categoricaldtyp": [0, 21, 285, 682, 688], "cannot": [0, 54, 71, 137, 166, 214, 223, 283, 322, 372, 375, 404, 430, 525, 571, 649, 688, 689], "us": [0, 4, 11, 14, 16, 21, 29, 36, 44, 45, 47, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 106, 107, 110, 111, 112, 117, 118, 119, 123, 124, 126, 127, 128, 132, 133, 137, 139, 143, 148, 151, 160, 161, 165, 166, 167, 168, 169, 170, 172, 177, 178, 181, 184, 189, 196, 198, 199, 202, 214, 217, 246, 248, 252, 255, 261, 269, 270, 271, 281, 282, 283, 285, 294, 302, 311, 313, 322, 326, 330, 333, 334, 337, 339, 344, 350, 351, 355, 357, 359, 360, 362, 363, 381, 382, 386, 390, 393, 394, 395, 399, 400, 404, 412, 414, 425, 428, 429, 430, 432, 433, 434, 439, 444, 453, 454, 455, 465, 466, 475, 479, 480, 481, 483, 485, 487, 488, 489, 490, 496, 504, 514, 517, 523, 524, 525, 531, 532, 533, 534, 535, 538, 541, 543, 548, 549, 553, 554, 560, 571, 572, 573, 574, 576, 577, 579, 585, 591, 592, 593, 594, 598, 600, 601, 603, 604, 605, 607, 613, 626, 628, 636, 637, 643, 645, 646, 648, 649, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694], "togeth": [0, 111, 206, 382, 681, 686, 689, 690], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 165, 166, 167, 168, 169, 170, 174, 175, 177, 178, 181, 182, 183, 198, 199, 204, 211, 212, 213, 214, 216, 223, 235, 238, 241, 243, 246, 248, 249, 253, 254, 255, 257, 269, 270, 271, 276, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 293, 294, 297, 298, 299, 300, 302, 306, 308, 309, 310, 311, 312, 313, 317, 319, 322, 324, 328, 329, 330, 331, 333, 334, 339, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 371, 372, 375, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 411, 412, 413, 414, 417, 418, 419, 425, 428, 429, 430, 432, 433, 437, 441, 444, 445, 446, 453, 454, 456, 457, 458, 459, 463, 464, 465, 466, 468, 470, 475, 476, 477, 480, 481, 482, 486, 488, 489, 491, 497, 517, 519, 521, 522, 523, 524, 525, 527, 528, 531, 532, 536, 537, 538, 539, 541, 542, 543, 545, 548, 549, 561, 562, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 583, 585, 590, 591, 592, 593, 594, 596, 598, 601, 605, 636, 637, 643, 645, 646, 648, 649, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 684, 689, 690, 692, 693, 694], "make": [0, 28, 48, 183, 202, 204, 252, 261, 262, 263, 293, 316, 439, 446, 455, 488, 531, 538, 543, 550, 656, 660, 682, 684, 686, 690], "input": [0, 4, 8, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 114, 119, 120, 122, 129, 130, 131, 133, 134, 135, 136, 148, 152, 153, 158, 165, 175, 178, 183, 202, 204, 216, 252, 253, 254, 260, 276, 284, 292, 302, 308, 309, 317, 320, 324, 325, 328, 329, 330, 331, 353, 356, 357, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 400, 401, 402, 403, 412, 417, 418, 423, 429, 437, 446, 455, 493, 517, 530, 602, 636, 637, 638, 646, 647, 649, 656, 659, 661, 667, 668, 674, 682, 683, 686, 689, 690, 691], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 142, 143, 148, 152, 153, 157, 160, 163, 165, 166, 168, 169, 172, 175, 177, 183, 202, 204, 206, 208, 209, 210, 211, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 240, 241, 244, 245, 249, 252, 253, 254, 255, 257, 259, 265, 266, 270, 271, 276, 281, 282, 283, 285, 288, 290, 291, 293, 301, 302, 303, 304, 305, 308, 309, 310, 312, 313, 314, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 343, 345, 346, 349, 353, 356, 357, 362, 364, 366, 367, 368, 371, 373, 374, 380, 382, 383, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 407, 412, 417, 418, 422, 424, 427, 428, 429, 430, 434, 437, 438, 439, 441, 446, 455, 456, 474, 475, 476, 477, 478, 480, 482, 485, 486, 487, 488, 489, 492, 493, 496, 497, 515, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 571, 577, 597, 622, 628, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 673, 674, 680, 682, 683, 686, 687, 690, 691], "store": [0, 165, 168, 170, 183, 202, 204, 252, 253, 254, 270, 271, 283, 326, 429, 446, 455, 493, 646, 655, 656, 658, 660, 661, 682, 684, 688, 690, 694], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 163, 165, 166, 168, 170, 171, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 198, 199, 200, 201, 202, 252, 253, 254, 255, 257, 259, 262, 263, 264, 265, 267, 269, 270, 271, 276, 281, 283, 284, 287, 292, 293, 297, 298, 299, 300, 302, 308, 309, 311, 313, 314, 316, 317, 319, 320, 322, 323, 324, 325, 327, 329, 330, 331, 337, 339, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 362, 363, 364, 366, 367, 371, 373, 374, 375, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 419, 423, 424, 427, 428, 429, 430, 433, 437, 439, 444, 446, 453, 454, 455, 456, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 569, 571, 580, 607, 613, 626, 637, 646, 649, 653, 654, 656, 659, 660, 661, 664, 665, 666, 669, 674, 683, 685, 687, 690, 691, 693, 694], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 191, 192, 195, 196, 198, 199, 202, 204, 205, 206, 208, 209, 210, 211, 214, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 432, 433, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 564, 568, 569, 571, 572, 573, 574, 577, 578, 579, 580, 583, 585, 586, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 604, 605, 607, 612, 613, 615, 616, 618, 619, 620, 621, 622, 625, 626, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 667, 668, 669, 673, 677, 680, 682, 684, 685, 686, 689, 690], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 169, 172, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 204, 206, 211, 214, 216, 217, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 238, 239, 241, 243, 244, 247, 249, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 428, 433, 434, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 568, 571, 579, 580, 583, 585, 597, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 646, 648, 649, 652, 653, 654, 655, 656, 657, 660, 661, 664, 665, 666, 667, 668, 669, 682, 684, 685, 686, 688, 689, 690, 693, 694], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 115, 116, 117, 119, 124, 125, 126, 132, 137, 138, 141, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 160, 169, 172, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 200, 201, 204, 206, 211, 214, 216, 217, 223, 224, 225, 226, 227, 228, 232, 233, 235, 238, 241, 243, 247, 249, 254, 257, 258, 259, 260, 261, 265, 266, 270, 279, 280, 281, 283, 284, 285, 286, 287, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 310, 311, 313, 316, 318, 319, 320, 322, 325, 326, 327, 328, 332, 333, 337, 344, 345, 346, 349, 350, 351, 355, 358, 359, 360, 361, 363, 365, 369, 372, 373, 374, 375, 384, 385, 386, 390, 391, 392, 393, 399, 404, 405, 410, 411, 412, 413, 414, 419, 420, 421, 423, 424, 428, 433, 434, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 568, 579, 580, 583, 585, 597, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 648, 652, 653, 655, 656, 657, 660, 661, 664, 665, 666, 667, 668, 684, 685, 686, 688, 689, 690, 693, 694], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 117, 119, 124, 126, 132, 137, 148, 149, 160, 165, 169, 172, 174, 176, 185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 216, 223, 228, 247, 249, 254, 282, 302, 326, 328, 330, 345, 346, 362, 373, 374, 391, 393, 399, 404, 412, 413, 415, 429, 433, 434, 470, 554, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 623, 624, 627, 628, 629, 630, 638, 648, 653, 655, 658, 659, 661, 663, 664, 666, 668, 669, 676, 677, 682, 683, 686, 687, 688, 689, 690, 691, 693], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 132, 185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 216, 223, 228, 249, 254, 265, 326, 328, 345, 346, 373, 374, 399, 433, 512, 571, 580, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 655, 684, 685, 688, 690, 693, 694], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 124, 125, 126, 127, 128, 132, 133, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 169, 172, 176, 178, 181, 182, 183, 185, 186, 187, 188, 190, 193, 194, 195, 197, 200, 204, 206, 211, 214, 223, 224, 225, 226, 227, 232, 233, 234, 235, 238, 241, 243, 244, 249, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 310, 311, 312, 313, 316, 318, 319, 322, 323, 325, 326, 327, 328, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 355, 357, 358, 359, 360, 361, 363, 365, 369, 373, 374, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 399, 400, 402, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 429, 433, 434, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 560, 568, 571, 579, 580, 583, 585, 597, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 646, 648, 649, 652, 653, 654, 655, 656, 657, 660, 661, 664, 665, 666, 667, 668, 669, 682, 684, 685, 686, 687, 688, 689, 690, 693, 694], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 169, 172, 175, 176, 181, 182, 183, 185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 204, 211, 214, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 238, 241, 243, 244, 247, 249, 254, 255, 258, 259, 260, 261, 265, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 331, 332, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 383, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 433, 434, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 487, 489, 490, 494, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 555, 556, 557, 560, 568, 579, 580, 583, 585, 597, 602, 604, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 646, 648, 649, 653, 654, 656, 664, 665, 666, 667, 669, 684, 685, 686, 688, 689, 690, 693, 694], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 175, 178, 181, 182, 183, 186, 187, 188, 195, 200, 211, 214, 223, 226, 227, 232, 233, 234, 235, 241, 243, 244, 249, 260, 265, 275, 276, 277, 278, 279, 280, 281, 282, 283, 287, 289, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 317, 319, 322, 323, 324, 327, 329, 331, 332, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 477, 478, 479, 480, 481, 483, 488, 506, 507, 508, 509, 542, 543, 549, 552, 553, 556, 557, 560, 571, 579, 580, 583, 585, 597, 602, 604, 609, 610, 611, 612, 615, 616, 618, 619, 622, 625, 629, 631, 632, 633, 634, 635, 638, 646, 648, 649, 653, 654, 665, 666, 667, 684, 685, 686, 688, 689, 690, 692, 693], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 114, 115, 116, 120, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 151, 152, 153, 154, 169, 175, 176, 177, 178, 181, 182, 214, 216, 276, 279, 280, 282, 289, 291, 295, 297, 298, 299, 300, 302, 306, 308, 309, 313, 316, 317, 319, 322, 324, 325, 327, 328, 329, 331, 332, 345, 346, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 381, 383, 384, 385, 387, 389, 390, 393, 394, 396, 397, 398, 401, 402, 403, 410, 411, 414, 417, 418, 419, 428, 433, 437, 438, 439, 441, 444, 445, 456, 463, 465, 468, 469, 475, 476, 480, 481, 485, 486, 491, 517, 518, 521, 522, 531, 538, 539, 543, 544, 545, 555, 561, 562, 568, 570, 571, 572, 573, 574, 575, 581, 582, 583, 585, 590, 591, 592, 593, 594, 596, 598, 601, 605, 622, 648, 654, 656, 668, 669, 684, 685, 689, 690, 691, 694], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 144, 146, 179, 180, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 200, 201, 220, 229, 230, 231, 236, 237, 242, 251, 256, 258, 266, 267, 268, 272, 287, 291, 301, 314, 315, 316, 332, 337, 338, 340, 341, 342, 343, 354, 355, 368, 370, 376, 377, 378, 408, 410, 415, 416, 440, 442, 443, 447, 448, 449, 450, 451, 452, 460, 461, 462, 559, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 678, 684], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 142, 148, 152, 153, 166, 168, 170, 175, 177, 182, 206, 211, 212, 223, 235, 240, 249, 270, 276, 283, 285, 289, 294, 296, 308, 309, 310, 317, 318, 324, 329, 331, 353, 356, 358, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 407, 412, 417, 418, 430, 437, 439, 445, 456, 465, 475, 480, 512, 528, 531, 537, 543, 571, 649, 659, 682, 684, 687, 690, 693, 694], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 115, 116, 139, 147, 151, 154, 160, 162, 164, 165, 166, 168, 169, 170, 181, 204, 257, 279, 280, 282, 285, 295, 339, 350, 351, 359, 360, 361, 363, 382, 384, 385, 390, 393, 411, 412, 414, 419, 426, 429, 430, 433, 444, 554, 565, 566, 567, 572, 573, 574, 587, 588, 589, 591, 592, 593, 594, 597, 598, 601, 605, 628, 638, 640, 641, 642, 644, 649, 655, 656, 657, 658, 659, 660, 661, 662, 690], "determin": [3, 16, 45, 61, 139, 282, 330, 479, 522, 538, 543, 656, 668, 694], "two": [3, 14, 23, 50, 97, 112, 117, 118, 123, 124, 211, 223, 238, 249, 271, 294, 318, 386, 395, 456, 482, 528, 537, 576, 654, 656, 663, 664, 665, 666, 682, 686, 690], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 119, 124, 137, 142, 157, 158, 163, 165, 170, 177, 178, 196, 198, 208, 209, 210, 213, 221, 222, 236, 240, 244, 245, 246, 253, 264, 267, 269, 271, 287, 289, 302, 303, 304, 305, 307, 313, 314, 316, 318, 320, 326, 330, 332, 335, 336, 344, 395, 404, 407, 422, 423, 427, 429, 439, 441, 453, 464, 475, 478, 484, 490, 493, 496, 517, 528, 533, 534, 535, 537, 538, 543, 544, 549, 560, 579, 604, 636, 637, 647, 656, 658, 659, 661, 665, 674, 675, 682, 684, 689, 690, 692, 694], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 121, 123, 125, 126, 133, 137, 148, 165, 170, 177, 182, 184, 189, 239, 241, 253, 271, 283, 285, 302, 307, 313, 318, 339, 345, 346, 357, 358, 373, 374, 388, 392, 393, 400, 404, 412, 429, 445, 464, 468, 475, 491, 496, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 530, 535, 544, 602, 628, 637, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 656, 659, 664, 665, 667, 682, 684, 687, 689, 690, 692, 693, 694], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 114, 120, 121, 122, 125, 129, 130, 131, 133, 134, 135, 136, 140, 141, 142, 146, 151, 152, 153, 175, 178, 181, 205, 211, 212, 223, 239, 240, 262, 275, 276, 279, 280, 289, 292, 306, 308, 309, 310, 317, 318, 319, 324, 329, 331, 344, 345, 346, 353, 356, 364, 366, 367, 371, 372, 373, 374, 375, 381, 383, 387, 388, 389, 392, 396, 397, 398, 400, 401, 402, 403, 406, 407, 410, 414, 417, 418, 437, 441, 444, 448, 450, 451, 452, 466, 467, 468, 469, 471, 472, 475, 477, 480, 481, 484, 485, 492, 502, 503, 504, 505, 511, 512, 513, 516, 517, 518, 528, 533, 537, 538, 540, 543, 544, 643, 645, 656, 665, 682, 684, 687, 690], "out": [3, 48, 92, 157, 160, 165, 166, 169, 244, 301, 316, 332, 422, 429, 430, 433, 468, 538, 543, 580, 646, 653, 660, 661, 682, 686, 690, 691], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 115, 116, 117, 121, 123, 124, 126, 128, 132, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 157, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 174, 177, 178, 181, 182, 183, 198, 204, 205, 207, 212, 216, 224, 225, 226, 227, 228, 232, 233, 234, 241, 243, 244, 246, 255, 257, 265, 269, 271, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 292, 293, 297, 298, 299, 300, 310, 312, 313, 316, 317, 318, 319, 321, 322, 328, 329, 330, 331, 332, 344, 345, 346, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 365, 371, 373, 374, 379, 380, 384, 385, 386, 388, 390, 391, 393, 395, 399, 404, 406, 411, 412, 413, 414, 419, 422, 425, 429, 430, 432, 433, 441, 444, 445, 453, 456, 457, 458, 459, 463, 465, 466, 467, 470, 477, 480, 485, 486, 487, 488, 491, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 525, 528, 531, 537, 538, 543, 544, 554, 563, 571, 584, 615, 616, 618, 619, 620, 621, 636, 637, 646, 648, 649, 656, 659, 660, 661, 663, 664, 665, 666, 667, 684, 685, 687, 689, 690, 691, 693], "ha": [3, 19, 57, 58, 64, 70, 97, 176, 191, 216, 249, 262, 284, 325, 328, 332, 334, 481, 486, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 516, 555, 615, 661, 669, 682, 684, 687, 689, 690, 692, 693], "call": [3, 11, 17, 28, 61, 123, 124, 137, 166, 177, 217, 282, 283, 293, 330, 404, 430, 457, 496, 535, 649, 673, 675, 680, 682, 684, 689, 690, 692], "otherwis": [3, 19, 44, 50, 51, 133, 140, 160, 166, 241, 255, 265, 282, 284, 311, 318, 327, 386, 400, 406, 415, 430, 470, 475, 656, 659, 668, 683, 684], "nan_as_nul": [4, 58, 59, 71, 100, 204, 216, 226, 271, 328, 369, 439, 648, 693], "gpu": [4, 16, 17, 94, 119, 271, 283, 301, 378, 637, 656, 662, 676, 682, 683, 684, 686, 690, 691, 692, 694], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 261, 262, 263, 271, 382, 597, 658, 659, 674, 689, 690, 691], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 119, 124, 126, 133, 142, 166, 208, 209, 210, 214, 221, 222, 240, 271, 285, 303, 304, 305, 322, 330, 335, 336, 357, 393, 400, 407, 430, 488, 550, 560, 571, 579, 604, 648, 656, 659, 661, 667, 682, 690, 693], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 119, 123, 126, 128, 132, 133, 137, 142, 151, 165, 169, 181, 208, 240, 265, 289, 292, 302, 303, 311, 312, 322, 323, 327, 330, 339, 352, 365, 382, 390, 393, 395, 399, 400, 404, 407, 414, 429, 433, 439, 441, 444, 465, 468, 475, 488, 490, 496, 512, 514, 517, 523, 532, 535, 538, 543, 554, 560, 577, 579, 585, 597, 604, 628, 636, 637, 649, 653, 656, 658, 659, 661, 665, 667, 677, 678, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 173, 175, 176, 177, 178, 182, 199, 225, 243, 245, 248, 257, 266, 270, 454, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 568, 569, 571, 572, 573, 574, 577, 579, 585, 591, 592, 593, 594, 597, 598, 601, 602, 604, 605, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 659, 662, 666, 667, 668, 669, 673, 674, 675, 678, 680, 682, 683, 685, 687, 688, 689, 691, 693, 694], "constant": [4, 283, 637, 648], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 140, 141, 148, 149, 152, 153, 157, 158, 161, 167, 169, 175, 208, 209, 210, 221, 222, 260, 276, 303, 304, 305, 308, 309, 310, 317, 324, 329, 331, 334, 335, 336, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 406, 412, 417, 418, 422, 423, 425, 432, 437, 653, 659, 681, 693], "Will": [4, 166, 170, 271, 430, 649], "rangeindex": [4, 23, 70, 143, 146, 148, 170, 271, 287, 349, 410, 412, 649, 665, 682], "inform": [4, 15, 19, 43, 61, 70, 165, 282, 284, 310, 330, 429, 464, 465, 637, 659, 667, 682, 684, 690, 692, 693], "part": [4, 170, 528, 537, 580, 685], "provid": [4, 16, 21, 22, 36, 54, 67, 124, 132, 133, 137, 160, 167, 176, 204, 217, 257, 261, 262, 265, 270, 271, 285, 302, 322, 399, 400, 404, 432, 456, 468, 489, 532, 548, 549, 568, 646, 648, 659, 669, 674, 677, 682, 683, 684, 685, 686, 688, 689, 690, 693, 694], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 123, 124, 127, 137, 143, 148, 176, 177, 179, 180, 202, 203, 204, 219, 238, 241, 252, 255, 256, 257, 262, 264, 265, 271, 277, 278, 285, 311, 318, 319, 320, 330, 338, 355, 390, 394, 404, 412, 442, 443, 455, 470, 559, 646, 656, 659, 664, 669, 674, 682, 689, 691], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 165, 169, 172, 175, 176, 178, 181, 182, 187, 190, 193, 197, 200, 216, 217, 225, 226, 227, 228, 232, 233, 239, 241, 243, 244, 249, 254, 257, 258, 259, 260, 261, 262, 266, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 344, 345, 346, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 429, 433, 434, 437, 438, 439, 441, 444, 445, 446, 450, 451, 452, 456, 457, 458, 459, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580, 583, 585, 591, 592, 593, 594, 597, 598, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 646, 648, 649, 652, 653, 655, 656, 657, 660, 661, 664, 665, 666, 667, 668, 669, 682, 684, 685, 686, 687, 688, 689, 690, 693, 694], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 121, 137, 151, 156, 160, 181, 184, 189, 196, 257, 271, 286, 296, 319, 320, 334, 350, 351, 372, 375, 388, 404, 414, 421, 444, 470, 477, 478, 484, 493, 507, 513, 518, 521, 523, 524, 525, 531, 538, 539, 540, 543, 545, 585, 595, 600, 603, 607, 613, 626, 634, 643, 645, 656, 684], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 115, 116, 117, 121, 125, 126, 128, 133, 137, 154, 155, 166, 169, 172, 182, 184, 189, 199, 216, 224, 225, 226, 227, 228, 232, 233, 235, 239, 241, 247, 248, 260, 265, 270, 271, 282, 285, 293, 302, 307, 318, 325, 328, 334, 339, 345, 346, 357, 358, 373, 374, 382, 384, 385, 388, 392, 393, 400, 404, 419, 420, 430, 433, 434, 439, 445, 446, 454, 456, 475, 517, 538, 541, 543, 568, 577, 597, 637, 639, 640, 641, 642, 643, 644, 645, 646, 656, 658, 659, 667, 668, 673, 677, 683, 684, 685, 689, 690, 691, 693], "forc": [4, 166, 430, 659, 684], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 135, 136, 148, 149, 152, 153, 160, 165, 166, 174, 175, 177, 179, 180, 182, 213, 217, 224, 225, 226, 227, 228, 232, 233, 255, 256, 275, 276, 283, 284, 292, 293, 302, 308, 309, 311, 313, 316, 317, 324, 329, 330, 331, 339, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 383, 387, 388, 389, 391, 395, 396, 397, 398, 399, 401, 402, 403, 412, 413, 417, 418, 429, 430, 437, 438, 442, 443, 445, 456, 474, 480, 481, 486, 487, 491, 517, 522, 525, 538, 543, 546, 547, 551, 568, 569, 572, 573, 574, 577, 583, 591, 592, 593, 594, 598, 601, 605, 637, 646, 649, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 673, 677, 682, 684, 687, 690, 692, 693], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 166, 175, 176, 265, 276, 308, 309, 311, 317, 324, 329, 330, 331, 337, 344, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 430, 437, 475, 483, 530, 532, 577, 656, 658, 660, 661, 662, 669, 682, 684, 686, 687, 689, 690], "allow": [4, 15, 21, 50, 51, 70, 94, 124, 137, 165, 166, 271, 282, 285, 318, 404, 429, 430, 646, 659, 660, 661, 663, 664, 665, 666, 682, 684, 688, 690, 692, 694], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 123, 127, 132, 142, 143, 159, 161, 163, 166, 167, 169, 170, 171, 172, 204, 216, 240, 245, 247, 260, 261, 262, 263, 265, 271, 285, 325, 328, 357, 369, 390, 394, 399, 407, 424, 425, 427, 428, 430, 432, 433, 434, 474, 498, 499, 514, 520, 546, 547, 551, 553, 555, 628, 647, 658, 659, 667, 668, 682, 687, 691, 693], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 119, 128, 132, 167, 169, 204, 216, 226, 232, 271, 302, 307, 328, 345, 346, 357, 369, 373, 374, 399, 432, 433, 439, 480, 646, 648, 656, 668, 688, 690, 693], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 61, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 115, 116, 119, 127, 132, 140, 147, 149, 151, 154, 160, 166, 169, 172, 181, 204, 212, 213, 214, 216, 271, 279, 280, 282, 295, 297, 298, 299, 300, 311, 313, 316, 322, 327, 328, 332, 345, 346, 350, 351, 359, 360, 361, 363, 369, 373, 374, 376, 377, 378, 384, 385, 394, 399, 406, 411, 413, 414, 415, 419, 424, 430, 433, 434, 440, 444, 456, 463, 465, 466, 470, 475, 484, 517, 563, 577, 583, 584, 585, 648, 656, 668, 682, 691], "leav": [4, 58, 71, 92, 204, 216, 271, 328, 653, 668, 690], "build": [4, 253, 690], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 169, 172, 175, 176, 178, 181, 182, 258, 261, 266, 276, 277, 278, 279, 280, 284, 285, 292, 297, 298, 299, 300, 302, 308, 309, 310, 311, 316, 317, 318, 322, 324, 329, 331, 333, 334, 337, 345, 346, 350, 351, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 373, 374, 382, 383, 384, 385, 387, 389, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 423, 434, 437, 444, 445, 571, 580, 597, 602, 648, 651, 652, 653, 657, 660, 661, 667, 669, 684, 685, 686, 687, 689, 690, 693, 694], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 133, 143, 148, 156, 165, 172, 177, 199, 203, 218, 235, 243, 248, 255, 265, 271, 330, 334, 400, 412, 421, 429, 434, 454, 488, 557, 559, 564, 580, 586, 658, 661, 667, 682, 684, 685, 689, 690], "val": [4, 23, 64, 156, 172, 334, 421, 434, 580, 684], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 114, 117, 118, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 152, 153, 156, 166, 172, 175, 202, 224, 225, 226, 227, 228, 232, 233, 255, 276, 286, 296, 308, 309, 317, 324, 329, 331, 334, 345, 346, 353, 356, 359, 360, 363, 364, 366, 367, 371, 373, 374, 383, 386, 387, 389, 390, 396, 397, 398, 401, 402, 403, 404, 417, 418, 421, 430, 434, 437, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 572, 573, 574, 576, 591, 592, 593, 594, 598, 601, 605, 656, 663, 664, 665, 666, 667, 668, 682, 684, 685, 688, 690, 691], "i": [4, 14, 16, 17, 51, 55, 64, 84, 94, 117, 118, 121, 132, 156, 172, 323, 334, 352, 386, 388, 399, 421, 434, 468, 484, 485, 492, 540, 544, 638, 652, 682, 684, 686, 690, 691], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 115, 116, 117, 119, 124, 125, 126, 127, 137, 138, 140, 143, 146, 147, 151, 154, 155, 156, 166, 172, 181, 182, 206, 216, 228, 239, 243, 247, 258, 266, 270, 275, 279, 280, 283, 285, 297, 298, 299, 300, 302, 307, 310, 311, 318, 327, 328, 333, 334, 337, 349, 350, 351, 355, 358, 359, 360, 361, 363, 369, 384, 385, 390, 391, 392, 393, 394, 395, 404, 405, 406, 410, 411, 414, 419, 420, 421, 428, 430, 433, 434, 444, 445, 458, 459, 463, 464, 465, 478, 492, 498, 499, 504, 509, 519, 527, 580, 612, 615, 618, 619, 631, 632, 633, 635, 646, 649, 655, 667, 683, 686, 690, 691, 693, 694], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 127, 156, 170, 172, 270, 311, 334, 337, 394, 395, 421, 434, 456, 488, 646, 652, 656, 659, 684, 686, 690, 693, 694], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 117, 118, 119, 120, 124, 126, 127, 128, 132, 137, 138, 140, 141, 143, 146, 147, 156, 158, 159, 176, 182, 186, 187, 188, 192, 200, 211, 223, 225, 228, 239, 243, 249, 260, 265, 276, 277, 278, 281, 282, 283, 286, 291, 294, 295, 297, 298, 299, 300, 302, 306, 307, 310, 311, 312, 318, 319, 322, 327, 334, 337, 344, 345, 346, 349, 355, 358, 360, 361, 365, 372, 373, 374, 375, 386, 387, 393, 394, 399, 404, 405, 406, 410, 411, 413, 421, 423, 438, 439, 441, 445, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 471, 473, 476, 477, 478, 479, 481, 489, 490, 496, 502, 507, 534, 535, 540, 541, 549, 552, 553, 560, 576, 579, 580, 583, 585, 602, 604, 609, 610, 611, 612, 615, 616, 618, 619, 622, 629, 638, 646, 649, 653, 663, 664, 665, 666, 667, 669, 682, 684, 685, 686, 688, 689, 690, 693, 694], "insert": [4, 64, 128, 140, 156, 334, 395, 406, 421, 542, 674, 682, 691], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 127, 132, 138, 140, 143, 146, 172, 243, 258, 266, 311, 323, 327, 334, 349, 352, 355, 394, 395, 399, 405, 406, 410, 428, 434, 473, 478, 514, 612, 615, 652, 656, 657, 660, 661, 667, 684, 686, 689, 692, 693], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 127, 138, 140, 143, 146, 172, 184, 186, 187, 188, 189, 192, 194, 195, 200, 201, 258, 266, 294, 296, 297, 298, 299, 300, 302, 311, 314, 327, 349, 355, 394, 395, 405, 406, 410, 428, 434, 478, 487, 493, 498, 499, 554, 580, 585, 609, 610, 611, 612, 615, 620, 621, 624, 625, 629, 630, 631, 632, 633, 634, 635, 667, 682, 684, 686, 690], "13": [4, 44, 55, 84, 94, 127, 140, 143, 156, 294, 296, 311, 314, 323, 327, 349, 352, 394, 395, 406, 421, 428, 478, 631, 632, 633, 635, 684, 686], "14": [4, 15, 70, 94, 100, 127, 140, 143, 156, 314, 327, 349, 369, 394, 406, 421, 478, 631, 632, 633, 635, 684, 686, 690], "via": [4, 36, 137, 165, 302, 404, 429, 465, 676, 682, 684, 686, 689], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 119, 132, 137, 161, 167, 171, 180, 202, 204, 216, 252, 270, 271, 283, 284, 285, 302, 328, 345, 346, 369, 373, 374, 399, 404, 425, 432, 443, 446, 455, 646, 648, 659, 667, 690, 691, 693, 694], "datetim": [4, 36, 47, 117, 119, 127, 132, 166, 183, 185, 190, 193, 196, 197, 201, 302, 314, 394, 399, 430, 446, 608, 614, 623, 627, 630, 652, 656, 657, 660, 661, 663, 664, 666, 667, 682, 684, 688, 689, 690, 691, 694], "timedelta": [4, 117, 132, 399, 447, 631, 688, 690], "t0": 4, "strptime": [4, 119, 667, 684], "2018": [4, 47, 55, 84, 119, 127, 241, 323, 352, 394, 620, 621, 652, 656, 657, 660, 661, 684], "07": [4, 119, 123, 127, 132, 186, 187, 188, 200, 394, 399, 609, 610, 611, 612, 622, 629, 684], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 123, 127, 132, 183, 184, 189, 190, 192, 193, 195, 196, 197, 275, 302, 314, 333, 345, 346, 373, 374, 394, 399, 446, 560, 579, 604, 607, 613, 614, 623, 625, 626, 627, 631, 632, 633, 634, 635, 652, 656, 657, 660, 661, 684, 693, 694], "y": [4, 15, 16, 17, 44, 119, 126, 146, 160, 201, 243, 311, 390, 393, 410, 478, 514, 528, 537, 556, 628, 630, 667, 682, 684, 687, 690], "m": [4, 119, 127, 194, 394, 488, 514, 624, 628, 667, 684], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 119, 120, 122, 126, 129, 130, 131, 134, 135, 136, 137, 140, 143, 148, 152, 153, 157, 160, 175, 176, 184, 185, 186, 187, 188, 189, 196, 200, 244, 265, 276, 291, 292, 302, 307, 308, 309, 311, 317, 324, 329, 331, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 390, 393, 395, 396, 397, 398, 401, 402, 403, 404, 406, 412, 417, 418, 422, 428, 437, 439, 456, 473, 475, 476, 478, 480, 486, 492, 514, 517, 533, 552, 553, 607, 608, 609, 610, 611, 613, 626, 628, 629, 646, 667, 669, 682, 684, 686, 690, 693], "h": [4, 111, 184, 189, 190, 196, 382, 478, 517, 607, 613, 614, 626, 682], "s": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 117, 118, 125, 126, 133, 137, 140, 141, 148, 150, 157, 166, 170, 177, 184, 189, 196, 197, 225, 238, 241, 275, 277, 278, 283, 284, 285, 286, 289, 291, 292, 293, 297, 298, 299, 300, 302, 307, 310, 311, 312, 314, 316, 318, 319, 320, 328, 330, 337, 344, 350, 351, 357, 365, 375, 386, 392, 393, 400, 404, 406, 412, 413, 415, 422, 430, 439, 446, 457, 458, 459, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 568, 579, 580, 585, 597, 604, 607, 612, 613, 615, 616, 618, 619, 621, 625, 626, 627, 631, 632, 633, 634, 635, 638, 646, 648, 649, 652, 653, 654, 656, 659, 667, 668, 682, 684, 685, 686, 688, 690, 692, 693, 694], "id": [4, 16, 583, 585, 636, 637, 684, 687], "arang": [4, 17, 684, 690], "second": [4, 44, 97, 111, 127, 142, 166, 184, 189, 195, 196, 240, 259, 311, 314, 382, 394, 407, 430, 447, 450, 607, 613, 625, 626, 631, 633, 656, 659, 667, 682, 684], "x": [4, 5, 15, 16, 17, 44, 73, 146, 160, 174, 243, 265, 282, 283, 311, 339, 357, 410, 456, 528, 537, 540, 542, 556, 560, 579, 580, 597, 604, 628, 646, 656, 660, 661, 684, 685, 687, 689, 690], "01": [4, 36, 127, 132, 133, 183, 185, 186, 187, 188, 190, 193, 194, 196, 197, 200, 201, 302, 394, 399, 400, 446, 514, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 634, 652, 656, 657, 660, 661, 687, 688, 693], "02": [4, 123, 127, 132, 185, 186, 187, 188, 190, 193, 194, 197, 200, 314, 394, 399, 446, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 623, 624, 627, 629, 652, 656, 657, 660, 661, 667, 687], "03": [4, 47, 127, 133, 185, 186, 187, 188, 194, 200, 314, 394, 400, 446, 608, 609, 610, 611, 612, 616, 618, 619, 624, 628, 629, 634, 667], "04": [4, 46, 55, 75, 76, 84, 104, 105, 123, 127, 132, 186, 187, 188, 196, 200, 323, 345, 346, 352, 373, 374, 394, 399, 446, 607, 609, 610, 611, 612, 613, 626, 629, 667], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 123, 127, 137, 139, 148, 150, 151, 156, 157, 158, 160, 165, 168, 170, 178, 181, 202, 204, 212, 213, 244, 252, 263, 277, 278, 279, 280, 287, 297, 298, 299, 300, 306, 311, 312, 313, 319, 323, 330, 334, 337, 338, 352, 355, 390, 394, 404, 412, 414, 421, 422, 423, 429, 444, 455, 456, 466, 467, 471, 475, 480, 482, 484, 486, 493, 517, 538, 543, 559, 569, 577, 580, 595, 637, 647, 652, 655, 656, 658, 659, 660, 661, 662, 664, 684, 685, 686, 687, 689, 690, 693], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 128, 142, 144, 206, 236, 240, 261, 262, 263, 265, 267, 281, 282, 330, 382, 395, 407, 408, 597, 638, 653, 656, 659, 660, 661, 667, 682, 684], "cat": [4, 133, 178, 320, 357, 400, 456, 457, 458, 459, 463, 464, 465, 481, 485, 493, 521, 539, 544, 545, 648, 674, 677, 684], "jump": [4, 128], "dog": [4, 74, 133, 178, 357, 400, 456, 480, 518, 684], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 115, 116, 117, 126, 127, 132, 133, 140, 147, 151, 154, 155, 158, 176, 181, 186, 188, 192, 225, 228, 279, 280, 297, 298, 299, 300, 302, 310, 311, 334, 337, 350, 351, 355, 359, 360, 363, 365, 384, 385, 393, 394, 399, 400, 406, 411, 414, 419, 420, 423, 439, 441, 444, 466, 477, 478, 534, 583, 585, 609, 610, 611, 612, 615, 616, 618, 619, 622, 629, 646, 649, 669, 684, 686, 688, 690, 693, 694], "cow": [4, 44, 311, 312, 344], "moo": 4, "occasion": 4, "pdf": [4, 58, 169, 684, 688], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 169, 175, 176, 181, 182, 204, 217, 235, 244, 255, 258, 259, 260, 261, 265, 266, 276, 277, 278, 279, 280, 285, 291, 292, 293, 297, 298, 299, 300, 302, 308, 309, 311, 317, 322, 324, 325, 326, 327, 329, 331, 333, 337, 349, 350, 351, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 382, 383, 384, 385, 387, 389, 390, 392, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 410, 411, 412, 414, 417, 418, 419, 420, 422, 424, 428, 437, 438, 439, 444, 445, 456, 475, 476, 478, 481, 486, 490, 491, 496, 502, 517, 530, 535, 544, 552, 553, 556, 557, 560, 579, 580, 583, 585, 597, 602, 604, 646, 648, 649, 653, 654, 656, 664, 665, 666, 669, 684, 685, 686, 688, 689, 690, 693, 694], "from_panda": [4, 223, 228, 249, 265, 571, 580, 684, 685, 687, 688, 694], "attribut": [4, 36, 142, 177, 204, 240, 253, 262, 271, 302, 391, 407, 459, 664, 665, 666, 674, 682, 684], "method": [4, 14, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 117, 118, 121, 123, 126, 127, 132, 137, 142, 148, 177, 203, 204, 208, 209, 218, 240, 253, 255, 265, 271, 283, 286, 288, 290, 291, 294, 303, 304, 312, 321, 322, 330, 333, 339, 354, 380, 386, 388, 390, 393, 394, 399, 404, 407, 412, 415, 416, 465, 468, 479, 502, 503, 504, 505, 511, 512, 513, 516, 528, 537, 554, 571, 576, 583, 585, 602, 636, 649, 655, 656, 659, 660, 661, 662, 667, 668, 673, 674, 675, 678, 682, 685, 687, 689, 690, 691, 693, 694], "iterrow": 4, "itertupl": 4, "to_dict": [4, 271], "transpos": [5, 272, 647, 674, 686, 691], "new": [5, 8, 9, 10, 14, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 156, 157, 158, 165, 174, 175, 208, 209, 211, 221, 223, 235, 238, 239, 241, 244, 276, 277, 278, 281, 285, 291, 293, 303, 304, 307, 308, 309, 317, 324, 329, 331, 335, 353, 356, 364, 366, 367, 371, 372, 375, 383, 387, 389, 390, 392, 395, 396, 397, 398, 401, 402, 403, 404, 417, 418, 421, 422, 423, 429, 437, 456, 457, 464, 465, 493, 497, 533, 542, 682, 684, 687, 690, 692], "ncol": [5, 174], "nrow": [5, 174, 656, 684, 690], "self": [5, 14, 61, 88, 111, 117, 140, 158, 165, 174, 182, 223, 249, 272, 281, 286, 330, 358, 382, 395, 406, 423, 429, 436, 445, 485, 544, 682], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 115, 116, 117, 124, 126, 127, 137, 147, 148, 149, 151, 154, 160, 161, 166, 168, 173, 174, 178, 181, 217, 279, 280, 282, 283, 285, 289, 293, 295, 296, 302, 307, 312, 316, 330, 350, 351, 357, 359, 361, 363, 384, 385, 391, 393, 394, 404, 411, 412, 413, 414, 419, 425, 430, 444, 449, 470, 480, 481, 485, 486, 491, 502, 522, 528, 531, 537, 538, 543, 554, 555, 556, 572, 573, 574, 577, 585, 591, 592, 593, 594, 598, 601, 602, 605, 628, 638, 646, 647, 648, 655, 656, 659, 660, 661, 664, 667, 668, 682, 683, 684, 689, 690, 691, 692, 693, 694], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 117, 123, 124, 126, 148, 149, 165, 170, 174, 204, 265, 306, 311, 318, 322, 330, 390, 391, 393, 412, 413, 429, 470, 500, 501, 528, 530, 538, 555, 569, 571, 572, 573, 574, 585, 591, 592, 593, 594, 597, 598, 601, 605, 637, 648, 653, 659, 663, 664, 665, 666, 668, 673, 682, 685, 690, 693, 694], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 114, 120, 122, 123, 124, 129, 130, 131, 134, 135, 136, 148, 149, 152, 153, 165, 166, 174, 175, 257, 276, 282, 308, 309, 313, 317, 324, 329, 331, 353, 356, 360, 364, 366, 367, 371, 381, 383, 387, 389, 390, 391, 396, 397, 398, 401, 402, 403, 412, 413, 417, 418, 429, 430, 437, 470, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 663, 664, 665, 666, 692], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 143, 147, 148, 149, 151, 152, 153, 154, 160, 165, 166, 168, 172, 174, 175, 177, 181, 182, 183, 204, 257, 271, 276, 279, 280, 281, 282, 283, 284, 292, 295, 296, 308, 309, 317, 322, 324, 329, 331, 339, 350, 351, 353, 356, 357, 358, 359, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 390, 391, 393, 394, 396, 397, 398, 401, 402, 403, 404, 411, 412, 413, 414, 417, 418, 419, 429, 430, 434, 437, 441, 444, 445, 446, 449, 470, 480, 481, 485, 486, 491, 497, 522, 528, 531, 537, 538, 554, 560, 569, 571, 572, 573, 574, 577, 579, 583, 591, 592, 593, 594, 598, 601, 602, 604, 605, 628, 637, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 682, 683, 684, 685, 686, 687, 690, 691, 693], "becaus": [5, 12, 13, 97, 174, 279, 280, 282, 585, 653, 684, 687, 688, 690, 693, 694], "behavior": [5, 126, 170, 174, 243, 265, 312, 393, 554, 637, 648, 656, 659, 667, 668, 682, 684, 689, 690, 692, 694], "absolut": [7, 204, 275, 585, 663, 664, 665, 666, 684, 694], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 117, 121, 126, 224, 225, 226, 227, 228, 232, 233, 247, 275, 302, 357, 359, 360, 363, 388, 393, 441, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 568, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 659, 668, 674, 682, 684, 688, 689, 690, 691, 694], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 125, 127, 132, 133, 139, 168, 170, 234, 239, 254, 257, 262, 263, 265, 275, 277, 278, 289, 302, 307, 312, 318, 319, 330, 344, 345, 346, 357, 373, 374, 392, 394, 399, 400, 448, 450, 451, 452, 456, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 529, 530, 532, 534, 535, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 560, 563, 564, 565, 566, 567, 569, 572, 573, 574, 576, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 637, 646, 656, 659, 660, 661, 668, 682, 684, 686, 688, 689, 690, 692, 694], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 115, 116, 117, 124, 132, 137, 148, 151, 154, 163, 170, 176, 181, 214, 243, 245, 265, 275, 281, 282, 283, 289, 297, 298, 299, 300, 318, 323, 330, 333, 334, 350, 351, 352, 357, 359, 360, 363, 382, 384, 385, 399, 404, 412, 414, 415, 419, 427, 444, 475, 479, 481, 488, 517, 523, 525, 550, 554, 560, 571, 579, 580, 597, 602, 604, 636, 638, 646, 647, 648, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 674, 678, 682, 683, 684, 685, 686, 689, 691, 693], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 115, 116, 124, 132, 148, 151, 154, 165, 181, 275, 283, 286, 297, 298, 299, 300, 330, 350, 351, 359, 360, 363, 382, 384, 385, 399, 412, 414, 419, 429, 444, 474, 493, 546, 547, 551, 560, 579, 597, 602, 604, 646, 648, 656, 659, 677, 678, 684, 685, 691], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 115, 116, 127, 128, 142, 154, 160, 165, 166, 170, 176, 202, 204, 212, 213, 240, 241, 252, 275, 284, 285, 291, 292, 302, 311, 312, 318, 323, 334, 339, 352, 372, 375, 384, 385, 394, 395, 407, 419, 429, 430, 441, 455, 464, 475, 483, 487, 491, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 520, 521, 530, 531, 538, 539, 543, 545, 546, 547, 550, 551, 552, 553, 568, 577, 607, 613, 626, 648, 650, 653, 654, 656, 659, 667, 668, 669, 674, 681, 684, 687, 688, 690, 692, 693, 694], "33": [7, 30, 52, 239, 275], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 117, 122, 132, 133, 136, 138, 141, 146, 147, 151, 169, 175, 181, 202, 216, 275, 282, 283, 302, 308, 309, 316, 328, 330, 345, 346, 350, 351, 360, 369, 373, 374, 386, 389, 399, 400, 403, 405, 410, 411, 414, 433, 437, 441, 444, 656, 668, 684, 688, 690, 692, 693], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 145, 147, 148, 149, 151, 152, 153, 154, 157, 175, 181, 239, 244, 276, 279, 280, 284, 288, 290, 292, 297, 298, 299, 300, 308, 309, 311, 313, 317, 321, 322, 324, 329, 330, 331, 339, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 380, 383, 384, 385, 387, 388, 389, 392, 394, 396, 397, 398, 399, 401, 402, 403, 404, 409, 411, 412, 413, 414, 417, 418, 419, 422, 437, 444, 456, 470, 569, 571, 577, 673, 684, 686, 690, 691], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 114, 115, 116, 120, 122, 123, 124, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 148, 150, 151, 152, 153, 154, 165, 170, 175, 176, 178, 181, 203, 217, 235, 237, 241, 243, 257, 259, 262, 263, 264, 265, 268, 276, 279, 280, 295, 308, 309, 311, 317, 324, 329, 330, 331, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 410, 411, 412, 414, 417, 418, 419, 429, 437, 444, 466, 649, 669, 674, 682], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 145, 152, 153, 175, 176, 244, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 390, 396, 397, 398, 401, 402, 403, 409, 417, 418, 437, 577, 669], "get": [8, 41, 42, 43, 49, 56, 60, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 103, 104, 105, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 217, 243, 255, 265, 276, 308, 309, 310, 317, 324, 329, 331, 338, 345, 346, 353, 356, 364, 366, 367, 368, 371, 373, 374, 383, 387, 389, 396, 397, 398, 401, 402, 403, 408, 417, 418, 437, 540, 569, 597, 606, 612, 648, 674, 686, 690, 691], "addit": [8, 15, 51, 90, 120, 165, 276, 360, 387, 429, 476, 502, 519, 527, 536, 656, 658, 663, 664, 665, 666, 694], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 292, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 456, 475, 569, 576, 577, 600, 603, 684, 686, 687], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 165, 170, 175, 276, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 429, 437, 650, 655, 660, 661, 674, 690, 694], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 114, 115, 116, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 154, 165, 175, 182, 184, 189, 196, 271, 276, 282, 291, 308, 309, 310, 311, 312, 313, 317, 322, 324, 329, 330, 331, 353, 356, 358, 364, 366, 367, 371, 383, 384, 385, 387, 389, 396, 397, 398, 401, 402, 403, 412, 417, 418, 419, 429, 437, 445, 540, 560, 572, 573, 574, 579, 591, 592, 593, 594, 598, 601, 602, 604, 605, 607, 613, 626, 674, 682, 686, 687, 690, 691, 692, 693], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 142, 152, 153, 175, 208, 209, 221, 240, 276, 289, 303, 304, 308, 309, 311, 317, 324, 327, 329, 331, 334, 335, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 407, 417, 418, 437, 502, 503, 504, 505, 511, 512, 513, 515, 516, 517, 519, 520, 521, 527, 530, 531, 534, 536, 539, 540, 544, 545, 546, 547, 550, 551, 554, 682, 684, 689, 693], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 357, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 665], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 150, 152, 153, 161, 167, 175, 271, 276, 288, 290, 294, 296, 308, 309, 311, 317, 320, 321, 324, 329, 331, 345, 346, 353, 356, 364, 366, 367, 371, 373, 374, 380, 383, 387, 389, 390, 396, 397, 398, 401, 402, 403, 417, 418, 425, 432, 437, 475, 577, 585, 654, 656, 674, 683, 691], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 152, 153, 175, 176, 177, 178, 213, 217, 219, 238, 259, 263, 265, 276, 283, 285, 308, 309, 313, 317, 324, 329, 331, 332, 344, 353, 356, 364, 365, 366, 367, 371, 383, 387, 389, 395, 396, 397, 398, 401, 402, 403, 417, 418, 437, 465, 466, 480, 482, 486, 491, 502, 503, 512, 517, 585, 597, 648, 654, 656, 659, 660, 661, 669, 682, 684, 686, 689, 690, 693], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 152, 153, 175, 181, 182, 214, 271, 276, 282, 283, 289, 292, 308, 309, 310, 317, 322, 324, 329, 331, 350, 351, 353, 356, 358, 361, 364, 366, 367, 371, 383, 387, 389, 391, 393, 396, 397, 398, 401, 402, 403, 417, 418, 437, 444, 445, 467, 468, 517, 571, 577, 646, 653, 656, 667, 693], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 183, 202, 252, 257, 261, 262, 263, 271, 276, 308, 309, 310, 317, 324, 329, 330, 331, 344, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 446, 455, 468, 478, 480, 483, 522, 530, 531, 532, 544, 548, 549, 637, 646, 648, 668, 682, 684], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 114, 119, 120, 122, 123, 126, 129, 130, 131, 133, 134, 135, 136, 142, 152, 153, 161, 167, 172, 175, 178, 211, 213, 240, 276, 282, 289, 293, 302, 308, 309, 310, 311, 316, 317, 324, 329, 331, 353, 356, 364, 366, 367, 369, 371, 383, 387, 389, 390, 393, 396, 397, 398, 400, 401, 402, 403, 407, 417, 418, 425, 432, 434, 437, 457, 463, 464, 465, 467, 468, 471, 475, 480, 498, 499, 502, 517, 522, 554, 560, 579, 604, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 682, 684, 687, 689, 690, 692, 693, 694], "multipl": [8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 149, 152, 153, 175, 176, 191, 217, 259, 262, 276, 283, 302, 308, 309, 310, 317, 324, 329, 331, 337, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 413, 417, 418, 437, 486, 491, 577, 615, 659, 660, 661, 667, 669, 682, 684, 686, 687, 689, 690, 692], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 163, 165, 175, 235, 245, 276, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 427, 429, 437, 647, 649, 682, 684, 686, 690, 694], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 148, 151, 152, 153, 154, 157, 160, 166, 175, 181, 217, 219, 239, 241, 244, 255, 257, 264, 265, 270, 276, 286, 294, 295, 306, 308, 309, 311, 317, 324, 327, 329, 330, 331, 334, 339, 353, 356, 359, 360, 363, 364, 366, 367, 371, 372, 375, 379, 381, 383, 384, 385, 387, 389, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 414, 417, 418, 419, 422, 430, 437, 441, 444, 468, 473, 476, 477, 480, 481, 486, 489, 490, 491, 492, 496, 497, 500, 501, 518, 519, 522, 523, 524, 527, 530, 531, 534, 535, 536, 538, 540, 542, 543, 554, 555, 557, 561, 562, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 585, 590, 591, 592, 593, 594, 596, 598, 600, 601, 603, 605, 637, 643, 645, 646, 649, 655, 656, 658, 660, 661, 663, 665, 666, 667, 682, 684, 690], "string": [8, 9, 10, 11, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 114, 120, 122, 127, 129, 130, 131, 134, 135, 136, 152, 153, 160, 166, 170, 172, 175, 276, 277, 278, 283, 302, 308, 309, 313, 317, 324, 329, 331, 344, 345, 346, 353, 355, 356, 364, 366, 367, 371, 373, 374, 382, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 415, 417, 418, 430, 434, 437, 560, 579, 597, 604, 628, 636, 637, 648, 652, 656, 657, 658, 659, 661, 662, 667, 674, 682, 683, 687, 688, 689, 690, 691, 694], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 602, 689], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 585, 682, 684, 686, 687], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 62, 74, 85, 87, 94, 96, 98, 99, 102, 114, 120, 122, 123, 126, 129, 130, 131, 134, 135, 136, 137, 149, 152, 153, 175, 177, 234, 255, 276, 293, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 390, 393, 396, 397, 398, 401, 402, 403, 404, 413, 417, 418, 437, 475, 480, 485, 486, 491, 531, 538, 543, 544, 554, 577, 659, 660, 661, 664, 674, 682, 684, 685, 689, 690, 693, 694], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 114, 120, 122, 123, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 152, 153, 161, 167, 170, 175, 177, 234, 276, 282, 285, 308, 309, 317, 324, 329, 330, 331, 344, 353, 356, 357, 360, 364, 365, 366, 367, 371, 382, 383, 387, 389, 393, 396, 397, 398, 399, 401, 402, 403, 404, 417, 418, 425, 432, 437, 439, 441, 456, 475, 480, 481, 486, 491, 497, 517, 522, 538, 543, 597, 646, 647, 649, 656, 658, 659, 660, 661, 664, 665, 666, 668, 684, 686, 690, 693, 694], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 114, 119, 120, 122, 124, 127, 128, 129, 130, 131, 134, 135, 136, 143, 146, 148, 152, 153, 175, 178, 204, 217, 223, 235, 241, 243, 249, 276, 292, 308, 309, 311, 317, 324, 329, 330, 331, 339, 353, 356, 359, 360, 363, 364, 366, 367, 371, 383, 387, 389, 394, 395, 396, 397, 398, 401, 402, 403, 410, 412, 417, 418, 437, 528, 537, 538, 543, 674, 682, 685, 689, 691], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 124, 127, 129, 130, 131, 134, 135, 136, 148, 152, 153, 175, 177, 183, 204, 257, 276, 296, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 381, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 412, 417, 418, 437, 441, 446, 480, 485, 528, 531, 537, 538, 554, 628, 663, 665, 666, 684, 687, 690, 693], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 114, 120, 122, 123, 127, 129, 130, 131, 134, 135, 136, 152, 153, 175, 214, 255, 276, 288, 290, 308, 309, 317, 321, 322, 324, 329, 331, 353, 356, 364, 366, 367, 371, 380, 381, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 417, 418, 437, 456, 476, 479, 519, 527, 536, 555, 561, 562, 570, 571, 575, 577, 581, 582, 590, 596, 690, 691], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 143, 152, 153, 165, 175, 276, 308, 309, 311, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 393, 396, 397, 398, 401, 402, 403, 417, 418, 429, 437, 456, 684, 688, 694], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 152, 153, 175, 177, 271, 276, 308, 309, 317, 324, 329, 330, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 417, 418, 437, 439, 456, 693], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 175, 276, 277, 286, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 381, 383, 387, 389, 396, 397, 398, 401, 402, 403, 412, 417, 418, 437, 475, 528, 537, 542, 636, 647, 656, 659, 675, 682, 684, 686], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 114, 115, 116, 117, 118, 120, 121, 122, 129, 130, 131, 134, 135, 136, 147, 152, 153, 154, 175, 234, 235, 276, 286, 294, 296, 308, 309, 317, 324, 327, 329, 330, 331, 333, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 381, 383, 384, 385, 386, 387, 388, 389, 396, 397, 398, 401, 402, 403, 411, 417, 418, 419, 437, 469, 473, 483, 484, 518, 529, 563, 572, 573, 574, 576, 583, 584, 585, 591, 592, 593, 594, 598, 600, 601, 603, 605, 646, 648, 674, 684, 687, 690, 691], "both": [8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 141, 152, 153, 175, 177, 199, 248, 253, 254, 271, 276, 289, 293, 302, 308, 309, 317, 318, 324, 329, 331, 337, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 454, 527, 555, 585, 649, 664, 665, 666, 673, 682, 687, 688, 689, 690, 694], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 169, 175, 182, 219, 276, 289, 308, 309, 311, 317, 320, 322, 324, 329, 331, 353, 356, 357, 358, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 417, 418, 433, 437, 439, 445, 475, 480, 482, 517, 530, 532, 577, 656, 659, 682, 690], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 140, 152, 153, 175, 255, 257, 265, 276, 308, 309, 311, 317, 318, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 406, 417, 418, 437, 489, 524, 532, 548, 549, 655, 656, 659, 660, 661, 662, 693], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 690, 693, 694], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 151, 152, 153, 175, 181, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 414, 417, 418, 437, 444, 477, 523, 524, 585, 600, 603, 643, 645], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 175, 276, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "361": [8, 120, 276, 387], "181": [8, 120, 276, 387], "c": [8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 114, 120, 122, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 143, 146, 148, 152, 153, 157, 160, 175, 176, 217, 244, 265, 276, 291, 292, 302, 308, 309, 311, 317, 320, 322, 324, 326, 329, 331, 337, 349, 353, 355, 356, 364, 366, 367, 371, 382, 383, 387, 389, 390, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 410, 412, 417, 418, 422, 428, 437, 438, 439, 456, 475, 481, 517, 522, 530, 552, 553, 560, 579, 580, 583, 585, 604, 628, 646, 653, 654, 656, 664, 669, 682, 684, 685, 686, 689, 690, 693], "e": [8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 120, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 143, 152, 153, 157, 175, 176, 244, 265, 276, 291, 302, 308, 309, 317, 324, 329, 331, 353, 355, 356, 364, 366, 367, 371, 383, 387, 388, 389, 393, 396, 397, 398, 399, 401, 402, 403, 417, 418, 422, 437, 439, 465, 478, 480, 481, 486, 491, 492, 517, 522, 525, 550, 552, 553, 628, 646, 656, 669, 682, 684, 690], "int64": [8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 114, 115, 116, 120, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 150, 152, 153, 154, 155, 159, 169, 176, 178, 182, 183, 206, 211, 214, 223, 234, 235, 238, 239, 241, 243, 247, 249, 252, 259, 266, 276, 277, 278, 281, 282, 283, 284, 285, 291, 292, 293, 301, 302, 306, 310, 311, 313, 316, 319, 322, 324, 327, 332, 333, 337, 349, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 372, 375, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 410, 411, 413, 417, 418, 419, 420, 433, 439, 445, 446, 457, 458, 459, 463, 464, 465, 468, 481, 484, 494, 495, 498, 499, 557, 632, 633, 634, 635, 638, 648, 669, 684, 686, 688, 690, 692, 693, 694], "prefix": [9, 10, 277, 278, 648, 649, 656], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 121, 126, 127, 132, 133, 148, 165, 166, 217, 265, 277, 278, 282, 302, 311, 318, 323, 330, 334, 352, 382, 388, 393, 394, 395, 399, 400, 412, 429, 430, 466, 486, 491, 538, 571, 580, 585, 637, 646, 656, 659, 668, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 117, 119, 126, 127, 128, 133, 139, 140, 141, 143, 149, 160, 161, 164, 165, 167, 168, 170, 183, 184, 189, 196, 198, 199, 217, 246, 248, 262, 263, 269, 271, 277, 278, 284, 313, 323, 339, 352, 381, 386, 393, 394, 395, 400, 406, 425, 428, 429, 432, 446, 453, 454, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 560, 577, 579, 602, 604, 607, 613, 626, 628, 636, 637, 646, 648, 649, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 677, 678, 684, 686, 690, 692], "add": [9, 10, 43, 71, 80, 165, 277, 278, 310, 429, 457, 458, 648, 656, 682, 684, 690], "updat": [9, 10, 28, 73, 277, 278, 293, 339], "add_suffix": [9, 277], "suffix": [9, 10, 94, 277, 278], "item_": [9, 277], "item_0": [9, 277], "item_1": [9, 277], "item_2": [9, 277], "item_3": [9, 277], "6": [9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 124, 126, 127, 140, 146, 147, 159, 176, 178, 186, 187, 188, 200, 211, 223, 249, 260, 277, 278, 281, 283, 297, 298, 299, 300, 302, 306, 307, 310, 311, 322, 334, 337, 345, 346, 349, 355, 361, 365, 373, 374, 393, 394, 406, 410, 411, 438, 439, 441, 458, 459, 463, 464, 466, 467, 468, 476, 477, 478, 479, 481, 488, 552, 553, 580, 583, 585, 609, 610, 611, 612, 615, 616, 618, 619, 629, 631, 638, 646, 649, 653, 669, 684, 686, 688, 689, 690, 693, 694], "col_": [9, 277], "col_a": [9, 277], "col_b": [9, 277], "after": [10, 126, 278, 282, 393, 415, 457, 528, 537, 542, 547, 656, 659, 684, 690], "add_prefix": [10, 278], "_item": [10, 278], "0_item": [10, 278], "1_item": [10, 278], "2_item": [10, 278], "3_item": [10, 278], "_col": [10, 278], "a_col": [10, 278], "b_col": [10, 278], "aggreg": [11, 61, 127, 330, 394, 579, 602, 683, 684, 687, 691], "more": [11, 14, 15, 19, 21, 36, 43, 68, 70, 137, 165, 176, 184, 189, 196, 259, 282, 284, 285, 302, 310, 337, 404, 429, 465, 484, 491, 538, 585, 607, 613, 626, 659, 660, 661, 667, 669, 682, 684, 689, 690, 692, 693], "over": [11, 16, 17, 40, 77, 97, 137, 244, 404, 569, 580, 682, 689, 690, 694], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 107, 112, 117, 118, 123, 124, 126, 127, 132, 133, 137, 148, 149, 157, 165, 166, 170, 176, 184, 189, 196, 213, 214, 244, 259, 271, 292, 311, 322, 360, 386, 390, 393, 394, 399, 400, 404, 412, 413, 422, 429, 430, 446, 463, 464, 465, 467, 468, 471, 475, 492, 497, 521, 530, 538, 539, 541, 542, 543, 545, 555, 557, 560, 571, 577, 579, 604, 607, 613, 626, 628, 637, 646, 649, 654, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 682, 684, 688, 689, 690, 693], "set": [11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 117, 121, 132, 143, 160, 170, 172, 177, 198, 211, 234, 238, 241, 246, 269, 281, 285, 289, 292, 302, 312, 337, 344, 345, 346, 355, 373, 374, 388, 399, 433, 434, 441, 453, 456, 458, 459, 463, 465, 477, 480, 487, 521, 523, 525, 528, 531, 537, 538, 539, 543, 545, 554, 577, 585, 602, 636, 646, 653, 656, 659, 661, 667, 668, 682, 684, 689, 692, 693], "accept": [11, 18, 19, 40, 80, 137, 206, 270, 284, 306, 357, 404, 480, 485, 492, 544, 560, 569, 579, 585, 604, 668, 682, 688, 689, 690, 694], "g": [11, 36, 111, 302, 382, 465, 478, 480, 481, 486, 491, 517, 522, 525, 552, 553, 628, 656, 682, 690], "sum": [11, 35, 115, 116, 127, 132, 137, 155, 300, 384, 385, 394, 399, 404, 420, 441, 560, 567, 579, 589, 604, 682, 684, 686, 687, 689, 691, 694], "min": [11, 33, 36, 121, 184, 189, 196, 243, 298, 302, 388, 560, 566, 568, 579, 588, 597, 604, 607, 613, 626, 689, 693], "max": [11, 32, 36, 61, 121, 132, 297, 302, 330, 388, 399, 560, 565, 568, 579, 587, 597, 602, 604, 684, 687, 689, 690], "per": [11, 16, 29, 70, 148, 178, 291, 412, 486, 500, 501, 530, 560, 579, 583, 585, 602, 604, 659, 684, 686, 689, 692], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 115, 116, 117, 118, 137, 147, 154, 166, 170, 177, 178, 204, 223, 249, 270, 285, 293, 302, 310, 311, 323, 350, 351, 352, 359, 360, 361, 363, 372, 375, 382, 384, 385, 386, 395, 404, 411, 419, 430, 480, 481, 491, 496, 497, 517, 531, 535, 538, 543, 576, 646, 648, 649, 656, 658, 659, 660, 663, 664, 665, 666, 668, 682, 687, 688, 689, 690, 691, 692, 693, 694], "sever": [11, 677, 678, 692], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 162, 164, 165, 166, 168, 170, 282, 357, 382, 390, 393, 412, 426, 429, 430, 565, 566, 567, 572, 573, 574, 580, 587, 588, 589, 591, 592, 593, 594, 597, 598, 601, 605, 628, 638, 640, 641, 642, 644, 657, 658, 659, 661, 667, 668, 690], "bool_onli": [12, 13, 279, 280], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 115, 116, 147, 151, 154, 181, 279, 280, 297, 298, 299, 300, 350, 351, 359, 360, 361, 363, 384, 385, 411, 414, 419, 444, 693], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 115, 116, 141, 147, 151, 154, 181, 271, 279, 280, 289, 294, 296, 297, 298, 299, 300, 302, 350, 351, 359, 360, 361, 363, 384, 385, 411, 414, 419, 441, 444, 568, 583, 585, 693], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 151, 181, 279, 280, 285, 297, 298, 299, 300, 316, 414, 444, 661, 686, 690], "empti": [12, 13, 75, 76, 81, 104, 105, 115, 116, 125, 141, 146, 154, 239, 279, 280, 313, 345, 346, 373, 374, 384, 385, 392, 410, 419, 475, 506, 517, 528, 537, 648, 656, 690, 693], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 121, 126, 132, 137, 199, 212, 223, 248, 249, 279, 280, 317, 329, 339, 353, 371, 388, 393, 399, 404, 454, 517, 555, 646, 663, 664, 665, 666, 668, 693, 694], "zero": [12, 13, 23, 279, 280, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 516, 555, 656, 659, 690], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 115, 116, 123, 125, 126, 137, 143, 147, 151, 154, 160, 168, 181, 214, 239, 271, 279, 280, 281, 292, 295, 339, 350, 351, 357, 359, 361, 363, 384, 385, 392, 393, 404, 411, 414, 419, 444, 449, 480, 481, 486, 491, 522, 554, 583, 602, 637, 662, 663, 664, 666, 676, 682, 684, 687, 690], "ignore_index": [14, 45, 52, 137, 148, 149, 281, 312, 319, 404, 412, 413, 456, 470], "verify_integr": [14, 143, 257, 281], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 103, 106, 140, 148, 149, 178, 211, 223, 235, 243, 249, 265, 271, 284, 312, 323, 330, 352, 365, 372, 375, 406, 412, 413, 441, 456, 470, 646, 674, 684, 685, 687, 689, 694], "end": [14, 19, 148, 149, 184, 189, 196, 243, 284, 314, 412, 413, 470, 485, 490, 491, 496, 497, 526, 534, 535, 538, 541, 542, 544, 607, 612, 613, 615, 616, 618, 619, 622, 626, 656, 659, 690], "caller": [14, 28, 55, 64, 73, 84, 88, 121, 125, 137, 182, 239, 241, 293, 323, 334, 339, 352, 357, 358, 388, 392, 404, 445, 475, 538, 543], "ad": [14, 457, 458, 465, 525, 555, 684], "do": [14, 44, 46, 50, 61, 123, 128, 143, 211, 223, 249, 265, 281, 311, 313, 318, 390, 395, 464, 465, 597, 656, 660, 661, 682, 684, 685, 686, 687, 690, 693, 694], "concat": [14, 281, 475, 652, 691], "gener": [14, 15, 36, 37, 51, 70, 137, 142, 208, 240, 281, 283, 302, 303, 404, 407, 477, 523, 524, 568, 585, 637, 649, 674, 682, 683, 687, 690, 691], "concaten": [14, 281, 456, 466, 475, 482, 517, 660, 684, 689, 694], "unchang": [14, 28, 293, 555], "computation": 14, "intens": [14, 686], "than": [14, 15, 46, 60, 62, 70, 85, 87, 115, 116, 123, 137, 154, 178, 289, 329, 331, 353, 356, 384, 385, 390, 404, 419, 441, 450, 451, 452, 465, 480, 484, 489, 491, 500, 501, 528, 531, 537, 554, 555, 572, 573, 574, 585, 591, 592, 593, 594, 598, 601, 605, 633, 635, 649, 682, 684, 685, 688, 690, 693, 694], "better": [14, 61, 137, 330, 404, 689], "solut": [14, 142, 240, 407, 687], "those": [14, 15, 36, 121, 282, 302, 388, 456, 517, 560, 579, 604, 659, 675, 682, 690], "origin": [14, 21, 28, 51, 88, 93, 124, 127, 139, 177, 182, 198, 199, 246, 248, 269, 285, 293, 314, 358, 394, 395, 439, 445, 453, 454, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 540, 636, 637, 639, 640, 641, 642, 643, 644, 645, 667, 687], "onc": [14, 137, 404, 491, 659, 682, 684], "ab": [14, 255, 477, 486, 496, 519, 535, 536, 542, 690, 693], "df2": [14, 456, 649, 664, 684, 690, 693], "8": [14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 115, 116, 126, 127, 132, 147, 151, 154, 158, 160, 176, 181, 182, 186, 188, 289, 297, 298, 299, 300, 302, 306, 310, 311, 327, 334, 337, 350, 351, 355, 358, 359, 360, 363, 384, 385, 393, 394, 399, 411, 414, 419, 423, 439, 444, 445, 466, 470, 478, 479, 493, 552, 553, 580, 583, 585, 609, 610, 611, 612, 615, 616, 629, 637, 638, 646, 649, 659, 663, 664, 665, 666, 669, 682, 684, 686, 688, 690, 693], "With": [14, 28, 70, 133, 195, 281, 289, 293, 312, 400, 441, 625, 659, 682, 684, 686, 687, 690], "follow": [14, 70, 106, 127, 160, 306, 394, 395, 480, 517, 528, 537, 554, 560, 579, 604, 628, 637, 656, 661, 668, 673, 682, 687, 689, 690, 692, 694], "while": [14, 97, 160, 170, 291, 580, 649, 682, 685, 690, 693], "recommend": [14, 123, 124], "show": [14, 70, 74, 75, 76, 104, 105, 127, 345, 346, 373, 374, 394, 663, 664, 665, 666, 682, 684], "wai": [14, 126, 283, 393, 667, 682, 686, 688, 690, 693, 694], "sourc": [14, 16, 17, 163, 245, 283, 427, 647, 655, 656, 660, 661, 685], "less": [14, 46, 85, 87, 289, 353, 356, 450, 451, 452, 465, 554, 555, 633, 635, 659], "effici": [14, 16, 93, 172, 434, 682, 693], "abov": [14, 143, 682, 687, 690, 693], "func": [15, 16, 17, 18, 111, 282, 382, 560, 579, 580, 597, 604, 638, 684], "raw": [15, 636, 655, 660, 661], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 121, 148, 149, 339, 359, 360, 363, 388, 412, 413, 456, 693], "reli": [15, 282, 682, 684, 694], "numba": [15, 16, 119, 282, 283, 691, 694], "jit": [15, 16, 282, 283, 690, 694], "compil": [15, 119, 282, 283, 481, 522, 531, 533, 690, 694], "thu": [15, 282, 468, 682, 688, 690], "within": [15, 55, 61, 84, 132, 282, 323, 330, 352, 399, 480, 489, 500, 501, 523, 524, 532, 572, 573, 574, 577, 591, 592, 593, 594, 598, 601, 605, 656, 659, 677, 690], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 123, 126, 282, 288, 290, 302, 321, 322, 339, 380, 381, 390, 393, 538, 543, 561, 562, 570, 571, 575, 580, 581, 582, 590, 596, 685, 691], "cuda": [15, 16, 17, 282, 283, 636, 637, 682, 683, 684, 686, 690, 692], "python": [15, 18, 21, 43, 119, 241, 282, 283, 285, 310, 415, 475, 485, 502, 503, 504, 505, 511, 512, 513, 516, 538, 543, 580, 628, 655, 660, 661, 667, 682, 683, 684, 688, 690, 693, 694], "target": [15, 123, 282, 483, 532], "see": [15, 16, 19, 28, 43, 48, 50, 61, 119, 165, 184, 189, 196, 282, 284, 293, 310, 316, 318, 330, 429, 538, 543, 560, 579, 585, 604, 607, 613, 626, 638, 655, 656, 658, 659, 660, 661, 667, 684, 687, 689, 690, 692, 694], "guid": [15, 165, 282, 429, 560, 579, 604, 682, 683, 690], "user": [15, 16, 17, 51, 165, 270, 282, 283, 429, 560, 579, 604, 638, 668, 682, 683, 684, 687, 692, 694], "defin": [15, 17, 37, 46, 132, 142, 208, 240, 282, 283, 303, 326, 399, 407, 527, 580, 637, 638, 646, 682, 683, 684, 686, 691, 694], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 127, 133, 141, 148, 157, 163, 165, 166, 170, 172, 191, 195, 216, 244, 245, 253, 257, 272, 283, 294, 296, 302, 307, 311, 313, 325, 328, 345, 346, 373, 374, 382, 394, 400, 412, 422, 427, 429, 430, 434, 436, 463, 465, 480, 482, 483, 525, 527, 528, 537, 555, 585, 615, 625, 628, 637, 646, 647, 648, 649, 661, 663, 664, 666, 667, 682, 684, 686, 687, 689, 690, 692, 693, 694], "expand": [15, 486, 491, 528, 537, 538, 543], "reduc": 15, "posit": [15, 64, 68, 111, 140, 145, 157, 217, 219, 244, 282, 334, 337, 382, 406, 409, 422, 468, 492, 497, 500, 501, 517, 540, 541, 542, 557, 577, 585, 597, 691], "argument": [15, 16, 17, 19, 20, 21, 31, 90, 111, 123, 124, 143, 148, 151, 160, 165, 166, 176, 181, 243, 282, 283, 284, 285, 360, 382, 395, 412, 414, 429, 430, 444, 456, 560, 579, 597, 604, 637, 648, 656, 658, 661, 667, 668, 669, 673, 682, 686], "simpl": [15, 283, 465, 682, 684, 690], "variabl": [15, 46, 92, 94, 119, 132, 133, 283, 313, 399, 400, 646, 653, 684, 692], "could": [15, 585, 682, 686, 690], "def": [15, 16, 17, 132, 282, 283, 399, 517, 523, 580, 638, 656, 684, 686, 688, 690], "f": [15, 36, 111, 265, 282, 302, 382, 492, 517, 531, 540, 552, 553, 667, 690], "els": [15, 75, 76, 282, 283, 345, 346, 684, 686, 690], "awar": [15, 291, 690], "manner": [15, 16], "mai": [15, 16, 17, 21, 61, 137, 140, 165, 168, 226, 265, 282, 285, 330, 357, 404, 406, 429, 480, 483, 500, 501, 571, 585, 656, 659, 660, 661, 673, 676, 682, 684, 685, 686, 689, 690], "condition": [15, 282, 690], "mix": [15, 36, 117, 165, 226, 302, 429, 502, 668, 690], "common": [15, 36, 94, 142, 223, 240, 282, 302, 407, 667, 682, 690], "rather": [15, 123, 161, 178, 390, 425, 441, 682, 685, 690, 694], "howev": [15, 170, 480, 525, 585, 682, 684, 688, 690, 693], "promot": [15, 690], "safe": [15, 684, 690], "regardless": [15, 36, 119, 302, 668, 687, 690], "op": [15, 690], "against": [15, 16, 17, 50, 318, 483, 502], "v": [15, 533, 571, 685], "w": [15, 127, 165, 394, 429, 478, 656], "z": [15, 16, 17, 44, 54, 126, 160, 311, 322, 390, 393, 488, 556, 687], "incol": [16, 17, 690], "outcol": [16, 17, 690], "pessimistic_nul": [16, 17], "chunk": [16, 170, 580, 662], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 124, 283, 319, 525, 580, 638, 684, 686, 690, 691], "execut": [16, 17, 684, 690, 694], "Or": [16, 17, 123, 688, 690], "dictionari": [16, 17, 21, 111, 142, 240, 285, 382, 407, 559, 597, 648, 661, 682, 688, 690], "map": [16, 17, 61, 75, 76, 104, 105, 111, 124, 199, 248, 330, 345, 346, 373, 374, 382, 454, 488, 550, 559, 560, 579, 597, 604, 648, 656, 682, 684, 689, 690, 693], "col1": [16, 17, 690], "arg1": [16, 17, 111, 382, 690], "output": [16, 17, 36, 51, 61, 70, 109, 119, 137, 139, 160, 163, 166, 168, 170, 171, 172, 245, 271, 283, 302, 330, 404, 427, 430, 434, 446, 466, 482, 489, 538, 543, 580, 637, 648, 649, 659, 663, 664, 665, 666, 674, 682, 683, 687, 689, 690, 691, 694], "extra": [16, 17, 21, 124, 285, 526], "These": [16, 17, 94, 283, 676, 677, 678, 682, 688, 690, 693], "directli": [16, 17, 44, 177, 241, 311, 457, 675, 682, 684, 686, 690], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 121, 125, 126, 133, 137, 140, 148, 166, 170, 177, 204, 208, 209, 210, 217, 221, 222, 239, 243, 302, 303, 304, 305, 335, 336, 388, 390, 392, 393, 400, 404, 406, 412, 430, 463, 465, 484, 515, 533, 577, 637, 646, 649, 661, 662, 675, 682, 684, 690, 694], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 115, 116, 117, 125, 132, 154, 158, 176, 177, 186, 188, 214, 239, 243, 271, 295, 313, 316, 322, 373, 374, 384, 385, 392, 399, 419, 423, 439, 440, 441, 456, 487, 491, 517, 572, 573, 574, 585, 591, 592, 593, 594, 598, 601, 605, 609, 611, 637, 639, 646, 648, 656, 659, 668, 669, 682, 693, 694], "underli": [16, 17, 124, 146, 180, 258, 370, 391, 410, 443, 674, 682, 684, 693], "garbag": [16, 17, 327], "chunksiz": [16, 160, 658, 659], "integ": [16, 19, 51, 56, 68, 123, 125, 128, 129, 133, 168, 170, 176, 195, 217, 224, 225, 226, 227, 228, 232, 233, 239, 252, 255, 257, 259, 265, 268, 270, 271, 284, 320, 324, 337, 344, 390, 392, 395, 396, 400, 455, 468, 473, 479, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 518, 548, 612, 625, 646, 656, 659, 667, 668, 669, 682, 684, 685, 688, 693], "offset": [16, 55, 84, 127, 132, 170, 323, 352, 394, 399, 656, 659, 682], "start": [16, 23, 94, 119, 127, 146, 270, 287, 314, 349, 394, 410, 490, 496, 497, 522, 525, 531, 534, 535, 540, 541, 542, 543, 544, 552, 553, 612, 615, 616, 618, 619, 622, 655, 656, 658, 659, 660, 661, 667, 682], "span": 16, "th": [16, 320, 468, 484], "size": [16, 26, 75, 76, 93, 104, 105, 132, 168, 170, 204, 292, 345, 346, 373, 374, 399, 475, 479, 484, 540, 602, 646, 649, 656, 659, 682, 689, 690, 692], "len": [16, 170, 479, 637, 674, 684, 690], "thread": [16, 17, 690], "block": [16, 525], "kernel": [16, 17, 119, 691], "foral": [16, 690], "built": [16, 525, 682, 683, 684, 686], "queri": [16, 165, 429, 684, 687], "driver": [16, 684], "api": [16, 110, 381, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694], "optim": [16, 70, 661, 692, 694], "launch": [16, 690], "configur": [16, 655, 656, 660, 661, 662, 690], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 208, 209, 210, 221, 222, 303, 304, 305, 335, 336, 674], "It": [16, 64, 97, 137, 148, 204, 217, 334, 357, 404, 412, 649, 681, 690, 693, 694], "good": [16, 637, 646, 682, 684], "point": [16, 73, 117, 118, 140, 166, 339, 386, 406, 430, 479, 524, 548, 549, 576, 656, 682, 688, 690, 691, 693], "ineffici": 16, "Its": [16, 682], "maximum": [16, 26, 89, 168, 170, 255, 292, 359, 488, 554, 597, 637, 646, 656, 688, 692], "possibl": [16, 73, 165, 204, 339, 429, 659, 668, 682, 690, 692, 693, 694], "avail": [16, 165, 429, 481, 528, 537, 655, 656, 660, 661, 673, 675, 677, 684, 689, 692, 693], "resourc": [16, 70], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 115, 116, 123, 124, 125, 132, 133, 137, 146, 151, 154, 158, 166, 168, 170, 181, 237, 239, 259, 262, 263, 268, 283, 286, 294, 295, 302, 320, 327, 334, 370, 376, 379, 381, 384, 385, 392, 399, 400, 404, 410, 414, 419, 423, 430, 440, 441, 444, 448, 450, 451, 452, 456, 473, 475, 477, 481, 484, 489, 492, 504, 523, 524, 527, 531, 538, 543, 548, 563, 572, 573, 574, 577, 583, 584, 585, 591, 592, 593, 594, 598, 601, 605, 612, 632, 633, 634, 635, 636, 637, 643, 645, 646, 648, 652, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 682, 684, 688, 689, 690, 692], "concurr": [16, 17], "To": [16, 36, 45, 126, 170, 302, 393, 441, 528, 597, 656, 660, 661, 682, 686, 689, 690, 693, 694], "access": [16, 36, 165, 302, 429, 674, 677, 678, 682, 684, 690, 692], "count": [16, 36, 70, 89, 90, 95, 97, 107, 132, 158, 178, 302, 359, 360, 363, 365, 379, 399, 423, 441, 564, 568, 586, 638, 674, 684, 687, 689], "threadidx": [16, 690], "blockdim": [16, 690], "respect": [16, 94, 126, 166, 393, 430, 465, 538, 543, 557, 646, 659, 664, 686, 688], "document": [16, 538, 667, 682, 684, 690, 694], "In": [16, 26, 106, 124, 165, 282, 292, 395, 429, 517, 538, 543, 580, 667, 682, 685, 686, 688, 690, 691, 693, 694], "below": [16, 26, 28, 36, 48, 292, 293, 302, 316, 585, 684, 690, 694], "invok": [16, 17, 682], "By": [16, 36, 45, 70, 97, 121, 133, 165, 166, 178, 211, 283, 302, 388, 400, 429, 430, 475, 649, 656, 661, 682, 684, 686, 690, 693, 694], "loop": [16, 17, 682, 686, 690], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 282, 527, 555, 660, 661, 682, 688, 689, 690, 693, 694], "so": [17, 132, 170, 178, 265, 375, 399, 441, 682, 683, 686, 687, 690, 693, 694], "must": [17, 37, 50, 51, 74, 80, 94, 109, 124, 126, 127, 132, 133, 139, 140, 142, 149, 158, 165, 167, 177, 184, 189, 196, 204, 208, 240, 241, 255, 271, 303, 318, 327, 393, 394, 399, 400, 406, 407, 413, 423, 429, 432, 463, 468, 475, 481, 607, 613, 626, 646, 656, 659, 660, 661, 664, 665, 682, 684, 690, 693, 694], "independ": [17, 690], "stride": [17, 168, 637], "improv": [17, 656, 660], "parallel": [17, 684, 687, 690, 692, 694], "resembl": 17, "code": [17, 44, 146, 243, 257, 311, 320, 326, 410, 479, 682, 684, 690], "nelem": [17, 686], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 690], "zip": [17, 166, 430, 656, 659, 684, 690], "callabl": [18, 88, 111, 148, 166, 182, 283, 358, 382, 412, 430, 445, 560, 579, 583, 597, 602, 604, 689], "na_act": [18, 357], "elementwis": [18, 283, 638], "everi": [18, 46, 74, 531, 560, 579, 604, 682, 684, 690], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 124, 126, 133, 177, 285, 302, 311, 339, 357, 362, 393, 395, 400, 456, 466, 475, 568, 648, 656, 658, 660, 663, 664, 666, 667, 668, 690, 693], "propag": [18, 21, 54, 285, 322, 357, 538, 543, 571, 690, 692, 693], "without": [18, 28, 36, 44, 70, 124, 241, 250, 293, 302, 311, 357, 475, 525, 538, 542, 543, 656, 664, 665, 666, 683, 686, 690], "them": [18, 283, 357, 441, 482, 487, 489, 667, 682, 688, 689, 690, 694], "kind": [19, 94, 127, 148, 149, 219, 241, 284, 394, 412, 413, 470, 688], "quicksort": [19, 149, 284, 413, 470], "ascend": [19, 121, 140, 148, 149, 178, 243, 284, 375, 388, 406, 412, 413, 441, 470], "na_posit": [19, 140, 148, 149, 243, 284, 406, 412, 413, 470], "last": [19, 36, 45, 54, 64, 103, 106, 124, 140, 148, 149, 156, 212, 243, 284, 302, 312, 322, 334, 372, 375, 406, 412, 413, 421, 457, 470, 496, 528, 535, 537, 571, 616, 618, 620, 637, 656, 667, 690], "would": [19, 140, 165, 243, 282, 284, 406, 429, 532, 555, 667, 684, 690, 693], "effect": [19, 61, 123, 284, 330, 390, 685, 687], "compat": [19, 22, 67, 93, 176, 217, 284, 313, 362, 659, 669, 682, 683, 688, 691, 692], "mergesort": [19, 284], "heapsort": [19, 284], "stabl": [19, 284, 692], "choic": [19, 70, 284, 667, 686], "algorithm": [19, 117, 284, 386, 483, 484, 529, 682, 684], "descend": [19, 103, 140, 148, 149, 178, 243, 284, 372, 406, 412, 413, 441, 470], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 121, 127, 140, 142, 148, 149, 166, 178, 183, 195, 212, 240, 243, 259, 282, 284, 302, 306, 312, 318, 330, 334, 372, 375, 388, 394, 395, 406, 407, 412, 413, 430, 441, 470, 486, 515, 520, 528, 538, 543, 546, 547, 551, 569, 617, 619, 621, 625, 637, 646, 656, 659, 667, 682, 684, 690], "put": [19, 148, 149, 243, 284, 412, 413, 470, 681], "begin": [19, 148, 149, 243, 284, 412, 413, 470, 497, 526, 541, 542, 543, 619, 656, 659, 684], "cupi": [19, 31, 61, 117, 137, 140, 161, 179, 234, 243, 256, 284, 320, 330, 404, 406, 425, 442, 637, 682, 683, 684, 691, 693, 694], "ndarrai": [19, 59, 92, 137, 161, 167, 179, 180, 183, 191, 243, 256, 271, 284, 320, 404, 425, 432, 442, 443, 637, 646, 653, 668, 684, 686, 690], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 127, 132, 141, 199, 248, 271, 282, 284, 292, 311, 323, 334, 352, 375, 394, 399, 454, 471, 480, 484, 494, 495, 504, 637, 654, 658, 659, 667, 682, 684, 688, 690], "int32": [19, 21, 63, 140, 243, 284, 285, 307, 333, 406, 441, 469, 473, 479, 481, 483, 490, 496, 518, 529, 534, 535, 548, 637, 646, 656, 682, 684, 688, 690, 692], "foo": [19, 47, 160, 284, 395, 531, 656, 684], "idx": [19, 75, 76, 104, 105, 206, 217, 224, 225, 226, 227, 228, 232, 233, 234, 241, 243, 244, 247, 259, 284, 327, 345, 346, 373, 374, 480, 528, 537, 684], "keyword": [20, 31, 90, 111, 123, 124, 235, 360, 382, 390, 456, 538, 543, 597, 658, 684, 690], "error": [21, 44, 124, 160, 165, 177, 282, 285, 311, 344, 429, 646, 658, 667, 668, 688, 692], "rais": [21, 44, 55, 57, 58, 84, 124, 126, 141, 177, 183, 216, 260, 282, 285, 311, 314, 323, 325, 328, 344, 352, 393, 464, 468, 480, 496, 517, 528, 531, 535, 537, 554, 646, 667, 668, 682, 686, 687, 688, 690], "cast": [21, 51, 115, 116, 123, 154, 155, 285, 384, 385, 390, 419, 420, 685, 693], "altern": [21, 44, 46, 111, 285, 311, 382, 532, 597, 656], "col": [21, 72, 285, 686], "where": [21, 38, 44, 46, 51, 70, 75, 76, 88, 103, 104, 105, 106, 111, 117, 123, 125, 140, 151, 168, 181, 209, 234, 239, 285, 304, 311, 345, 346, 358, 373, 374, 375, 382, 386, 390, 392, 406, 414, 444, 477, 484, 490, 493, 496, 500, 501, 534, 535, 597, 634, 643, 645, 658, 682, 684, 685, 689, 692], "specif": [21, 45, 51, 94, 133, 285, 400, 673, 677, 682, 684, 693], "deep": [21, 28, 70, 93, 163, 207, 245, 285, 293, 362, 427, 647], "henc": [21, 285, 693], "chang": [21, 28, 110, 123, 151, 177, 181, 285, 293, 312, 381, 390, 391, 414, 441, 444, 464, 465, 525, 546, 693], "warn": [21, 124, 285, 667, 693], "control": [21, 36, 124, 169, 285, 302, 433, 525, 637, 656, 692], "except": [21, 45, 64, 124, 127, 191, 212, 223, 249, 283, 285, 312, 334, 394, 496, 535, 553, 615, 656, 667, 682, 689, 692], "invalid": [21, 57, 58, 124, 216, 260, 285, 325, 328, 667, 668], "suppress": [21, 44, 124, 285, 311], "On": [21, 124, 285, 465, 684, 687], "constructor": [21, 285, 674, 682, 684, 686, 693], "20": [21, 40, 44, 50, 61, 68, 124, 125, 165, 216, 247, 285, 311, 318, 328, 330, 337, 390, 391, 392, 429, 433, 478, 536, 655, 684, 686, 687, 690], "30": [21, 43, 44, 61, 63, 68, 124, 125, 127, 184, 216, 285, 310, 311, 328, 330, 333, 337, 390, 391, 392, 394, 433, 568, 612, 616, 618, 619, 620, 621, 622, 628, 655, 667, 684], "float32": [21, 285, 441, 668, 688, 692], "custom": [21, 132, 285, 399, 653, 661, 682, 687, 694], "cat_dtyp": [21, 285], "enabl": [21, 168, 285, 656, 659, 682, 688, 692], "s1": [21, 281, 285, 456, 466, 480, 502, 503, 512], "s2": [21, 281, 285, 395, 456, 466, 480, 502, 512], "alia": [22, 67, 229, 340, 349], "loc": [22, 44, 71, 219, 255, 265, 311, 684, 687, 690], "cdf1": 23, "k2": 23, "temp": [23, 261, 487, 684], "stop": [23, 110, 146, 270, 287, 349, 381, 410, 540, 541, 542, 658], "step": [23, 270, 287, 349, 465, 540], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 124, 126, 128, 143, 148, 149, 182, 238, 241, 288, 290, 291, 292, 311, 312, 313, 321, 322, 339, 358, 380, 391, 393, 395, 412, 413, 445, 457, 458, 459, 463, 464, 465, 470, 571, 693], "synonym": [24, 25, 53, 108, 288, 290, 321, 380], "fillna": [24, 25, 46, 53, 108, 126, 288, 290, 313, 321, 380, 393, 684, 685, 687, 691], "bfill": [24, 54, 127, 255, 288, 322, 394, 571], "lower": [26, 36, 117, 118, 292, 302, 386, 474, 525, 546, 547, 550, 551, 576, 674, 682, 684], "upper": [26, 36, 292, 302, 520, 525, 546, 547, 674], "trim": [26, 292, 526], "threshold": [26, 292, 585], "assign": [26, 51, 121, 124, 139, 291, 292, 388, 433, 684, 687, 693], "outsid": [26, 165, 292, 429, 456, 690], "boundari": [26, 132, 289, 292, 399, 690], "singular": [26, 292], "latter": [26, 292, 686], "case": [26, 51, 64, 94, 117, 124, 148, 202, 223, 249, 252, 292, 334, 395, 412, 455, 480, 483, 517, 522, 525, 531, 538, 637, 667, 682, 686, 689, 690, 693, 694], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 115, 116, 137, 148, 154, 165, 182, 184, 189, 196, 209, 221, 271, 286, 292, 304, 312, 330, 335, 358, 384, 385, 404, 412, 419, 429, 433, 445, 465, 525, 552, 553, 560, 572, 573, 574, 579, 591, 592, 593, 594, 598, 601, 604, 605, 607, 613, 626, 656, 660, 663, 664, 665, 666, 682, 686, 689, 690, 691, 692, 693, 694], "array_lik": [26, 292], "minimum": [26, 29, 95, 132, 292, 294, 363, 399, 476, 488, 489, 519, 527, 536, 555, 583, 585, 597, 646], "expect": [26, 88, 111, 117, 148, 166, 182, 283, 292, 358, 382, 412, 430, 445, 480, 552, 597, 637, 659, 682, 686, 687, 690], "sr": [26, 127, 137, 282, 292, 349, 394, 404, 424, 441, 483, 489, 532, 690], "t": [28, 43, 93, 97, 107, 117, 124, 137, 170, 178, 184, 189, 193, 196, 293, 310, 365, 379, 404, 441, 478, 485, 507, 513, 517, 521, 525, 526, 539, 545, 563, 584, 607, 613, 623, 626, 659, 684, 686, 687, 690, 693], "creat": [28, 123, 125, 127, 128, 143, 165, 198, 199, 204, 239, 241, 246, 248, 269, 293, 325, 326, 327, 392, 394, 395, 429, 453, 454, 528, 533, 537, 585, 636, 656, 684, 686, 687, 688, 689, 690], "modif": [28, 293], "reflect": [28, 43, 293, 310], "refer": [28, 36, 43, 119, 283, 293, 302, 310, 493, 533, 683, 688, 690, 693], "shallow": [28, 293], "vice": [28, 293, 546], "versa": [28, 293, 546], "includ": [28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 117, 133, 141, 166, 170, 171, 178, 191, 271, 289, 293, 302, 345, 346, 359, 360, 362, 363, 365, 373, 374, 379, 386, 400, 430, 441, 457, 463, 464, 465, 505, 512, 521, 525, 539, 542, 545, 563, 568, 572, 573, 574, 584, 591, 592, 593, 594, 598, 601, 605, 615, 646, 649, 655, 656, 658, 659, 660, 661, 662, 682, 684, 688, 690, 692, 693, 694], "neither": [28, 253, 254, 265, 289, 293, 685], "nor": [28, 165, 265, 293, 429, 685, 694], "s_copi": [28, 293], "versu": [28, 293, 693], "share": [28, 293, 456, 682], "remain": [28, 112, 259, 293, 475, 520, 546, 547, 551, 555, 654], "pearson": [29, 147, 286, 294, 411, 583, 689], "min_period": [29, 132, 294, 296, 399, 583, 585, 638, 690], "correl": [29, 286, 294, 583, 585], "matrix": [29, 31, 484, 583, 585, 691], "spearman": [29, 294, 583], "standard": [29, 151, 160, 192, 294, 414, 534, 538, 543, 550, 600, 622, 628, 643, 656, 682, 684, 687, 690], "coeffici": [29, 294, 583], "rank": [29, 294], "observ": [29, 61, 132, 261, 294, 295, 330, 399, 571, 583, 585, 639, 684], "requir": [29, 37, 38, 39, 65, 66, 115, 116, 132, 137, 142, 154, 170, 208, 209, 210, 221, 222, 240, 282, 303, 304, 305, 335, 336, 384, 385, 399, 404, 407, 419, 572, 573, 574, 583, 585, 591, 592, 593, 594, 598, 601, 605, 636, 661, 682, 689, 690], "pair": [29, 77, 126, 393, 583, 585, 661], "have": [29, 36, 48, 50, 55, 74, 84, 94, 97, 106, 109, 111, 121, 123, 127, 137, 141, 169, 170, 177, 178, 271, 283, 294, 302, 316, 318, 323, 352, 382, 388, 394, 404, 433, 462, 475, 484, 494, 495, 517, 555, 583, 585, 653, 682, 684, 686, 689, 690, 693], "valid": [29, 46, 115, 116, 132, 133, 154, 257, 294, 313, 327, 384, 385, 399, 400, 419, 481, 493, 517, 571, 572, 573, 574, 583, 585, 591, 592, 593, 594, 598, 601, 605, 659, 682, 692], "request": [29, 90, 91, 170, 217, 255, 264, 360, 361], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 115, 116, 117, 121, 147, 151, 154, 181, 350, 351, 359, 360, 361, 363, 384, 385, 388, 411, 414, 419, 444, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605], "cell": [30, 686, 690], "nat": [30, 46, 75, 76, 97, 104, 105, 183, 345, 346, 365, 373, 374, 622, 667, 693], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 160, 212, 283, 311, 313, 316, 318, 345, 346, 365, 373, 374, 465, 517, 656, 682, 690, 693], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 160, 182, 312, 313, 345, 346, 358, 373, 374, 445, 517, 656, 659, 665], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 345, 346, 373, 374], "24": [30, 32, 33, 34, 35, 61, 91, 93, 115, 116, 127, 128, 132, 297, 298, 299, 300, 361, 384, 385, 394, 399, 478, 568, 684, 693], "21": [30, 127, 132, 133, 394, 399, 400, 478, 684, 689], "26": [30, 43, 61, 294, 296, 310, 478, 568, 616, 618, 619, 684, 686], "covari": [31, 296, 585], "cumul": [32, 33, 34, 35, 297, 298, 299, 300, 564, 565, 566, 567, 586, 587, 588, 589, 693], "indexedfram": [32, 33, 34, 35, 682], "ser": [32, 33, 34, 35, 54, 64, 75, 76, 88, 91, 104, 105, 156, 182, 289, 295, 297, 298, 299, 300, 313, 322, 330, 334, 345, 346, 358, 361, 373, 374, 421, 433, 445, 478, 500, 501, 517, 524, 525, 526, 529, 548, 549, 622, 690], "cumsum": [32, 33, 34, 297, 298, 299, 682, 693], "15": [32, 33, 34, 35, 45, 55, 84, 127, 132, 140, 143, 247, 283, 297, 298, 299, 300, 323, 349, 352, 394, 399, 406, 428, 478, 508, 509, 684, 686, 690], "9": [32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 115, 116, 126, 127, 132, 133, 151, 154, 165, 176, 181, 294, 296, 297, 298, 299, 300, 302, 337, 350, 351, 355, 357, 359, 360, 363, 384, 385, 393, 394, 399, 400, 414, 419, 429, 439, 444, 466, 470, 478, 507, 583, 585, 612, 615, 649, 669, 682, 684, 686, 688, 689, 690, 693, 694], "34": [32, 33, 34, 35, 154, 297, 298, 299, 300, 419, 487, 686, 693], "product": [34, 43, 115, 154, 261, 262, 263, 299, 310, 384, 419, 691, 692], "percentil": [36, 121, 302, 388], "datetime_is_numer": [36, 302], "descript": [36, 70, 302, 568, 674, 684], "statist": [36, 70, 132, 168, 170, 271, 302, 399, 568, 649, 660, 661, 684], "summar": [36, 302, 568, 689], "central": [36, 302, 568], "tendenc": [36, 302, 568], "dispers": [36, 302, 568], "shape": [36, 50, 93, 140, 148, 302, 318, 406, 412, 568, 682, 686, 690, 693], "dataset": [36, 168, 170, 302, 365, 568, 649, 651, 655, 656, 659, 660, 661, 690], "distribut": [36, 137, 302, 404, 568, 684], "analyz": [36, 302, 568, 684], "well": [36, 117, 142, 217, 240, 302, 407, 461, 525, 665, 682, 686], "vari": [36, 302, 637, 663, 664, 665, 666, 684], "depend": [36, 51, 94, 124, 161, 166, 167, 169, 204, 235, 259, 302, 425, 430, 432, 433, 538, 543, 646, 647, 658, 659, 667, 668, 682, 684, 686, 692], "what": [36, 302, 471, 682, 690, 691, 694], "detail": [36, 184, 189, 196, 282, 302, 585, 607, 613, 626, 628, 655, 656, 660, 661, 683, 684, 689, 690, 694], "fall": [36, 302, 612, 682, 692], "between": [36, 51, 73, 110, 117, 118, 121, 271, 286, 294, 296, 302, 339, 381, 386, 388, 482, 484, 490, 496, 517, 523, 524, 526, 534, 535, 569, 576, 585, 597, 682, 683, 687, 689, 690, 691, 692, 693, 694], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 132, 286, 302, 330, 333, 345, 346, 361, 373, 374, 386, 399, 478, 568, 622, 665, 666, 684, 690], "75": [36, 70, 302, 386, 560, 568, 579, 604, 694], "25th": [36, 302], "50th": [36, 302], "75th": [36, 302], "submit": [36, 302], "instead": [36, 70, 111, 119, 127, 132, 170, 191, 204, 241, 261, 302, 326, 344, 382, 394, 399, 456, 466, 485, 487, 496, 535, 597, 615, 682, 684, 692, 693], "style": [36, 45, 61, 94, 123, 302, 330, 684, 690], "select_dtyp": [36, 302], "o": [36, 302, 478, 682, 691], "select": [36, 44, 55, 64, 68, 84, 86, 97, 106, 124, 165, 244, 302, 311, 312, 323, 334, 337, 352, 355, 429, 658, 659, 660, 661, 674, 682, 687, 691], "omit": [36, 44, 178, 302, 311, 475, 568, 658], "noth": [36, 170, 302, 497], "output_fram": [36, 302], "summari": [36, 70, 302, 568, 691], "mean": [36, 48, 61, 115, 116, 127, 154, 282, 302, 316, 330, 384, 385, 394, 419, 481, 542, 560, 568, 579, 604, 684, 686, 687, 689, 690, 693, 694], "std": [36, 302, 568, 686, 687, 689], "50": [36, 44, 63, 70, 126, 127, 206, 302, 311, 333, 386, 393, 394, 568, 664, 686, 688, 690], "median": [36, 302, 689], "top": [36, 121, 302, 388, 466, 674, 684], "freq": [36, 55, 84, 110, 127, 145, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 200, 201, 203, 302, 314, 323, 352, 381, 394, 409, 446, 577, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 623, 624, 626, 627, 628, 629, 630, 684], "most": [36, 97, 178, 283, 302, 441, 496, 535, 661, 675, 682, 684, 687], "frequenc": [36, 97, 127, 178, 184, 189, 196, 302, 394, 441, 449, 607, 613, 626], "timestamp": [36, 47, 75, 76, 104, 105, 132, 166, 170, 302, 345, 346, 373, 374, 399, 430, 514, 607, 613, 626, 659, 667, 684, 687, 693, 694], "highest": [36, 97, 121, 302, 388, 457, 534, 535], "arbitrarili": [36, 302], "chosen": [36, 137, 302, 404], "among": [36, 43, 302, 310, 585, 694], "analysi": [36, 302, 585], "consist": [36, 140, 224, 225, 226, 227, 228, 232, 233, 257, 302, 406, 682, 690], "union": [36, 94, 161, 167, 271, 302, 425, 432, 466, 467, 468, 469, 470, 471, 472, 475, 480, 530, 531, 544, 637, 665], "00000": [36, 147, 302, 411], "50000": [36, 302], "02765": [36, 302], "25000": [36, 302], "75000": [36, 302], "datetime64": [36, 46, 47, 75, 76, 104, 105, 119, 127, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 200, 201, 302, 345, 346, 373, 374, 394, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 667, 688, 692, 693], "2000": [36, 127, 185, 190, 193, 194, 197, 201, 302, 394, 608, 612, 614, 615, 616, 618, 619, 623, 624, 627, 628, 630], "2010": [36, 302, 615, 622, 686], "2006": [36, 302, 615], "09": [36, 55, 84, 127, 132, 302, 323, 352, 394, 399, 612, 616, 618, 619, 628, 684], "08": [36, 119, 123, 127, 132, 184, 186, 187, 188, 189, 192, 195, 200, 302, 394, 399, 609, 610, 611, 612, 616, 625, 629, 663, 664, 665, 666], "2004": [36, 302, 615], "31": [36, 127, 184, 186, 187, 188, 189, 192, 194, 195, 200, 201, 302, 394, 609, 610, 611, 612, 615, 616, 620, 621, 624, 625, 628, 629, 630, 631, 632, 633, 635], "field": [36, 170, 302, 556, 637, 656, 682], "classmethod": [37, 38, 57, 58, 59, 65, 208, 209, 215, 216, 221, 260, 261, 262, 263, 303, 304, 325, 326, 327, 328, 335], "header": [37, 38, 39, 50, 65, 66, 160, 208, 209, 210, 221, 222, 303, 304, 305, 318, 335, 336, 656, 682], "represent": [37, 70, 142, 179, 180, 208, 240, 256, 261, 303, 407, 442, 443, 475, 688, 691], "subclass": [37, 38, 65, 132, 142, 204, 208, 209, 221, 240, 303, 304, 335, 357, 399, 407, 682], "implement": [37, 90, 110, 142, 177, 208, 240, 270, 303, 360, 381, 407, 554, 658, 682, 684, 687, 690, 692], "how": [37, 46, 57, 80, 94, 110, 121, 133, 142, 165, 177, 208, 213, 235, 240, 303, 313, 381, 388, 400, 407, 429, 456, 658, 684, 686, 690, 691, 692], "construct": [37, 112, 142, 183, 208, 240, 254, 303, 407, 446, 654, 682], "metadata": [37, 38, 39, 65, 66, 142, 170, 208, 209, 210, 221, 222, 240, 303, 304, 305, 335, 336, 407, 637, 650, 652, 660, 661], "reconstruct": [37, 38, 39, 65, 66, 142, 208, 209, 210, 221, 222, 240, 303, 304, 305, 335, 336, 407], "buffer": [37, 38, 39, 65, 66, 70, 142, 208, 209, 210, 221, 222, 240, 301, 303, 304, 305, 335, 336, 378, 407, 658, 692], "memoryview": [37, 38, 39, 65, 66, 142, 208, 209, 210, 221, 222, 240, 303, 304, 305, 335, 336, 407], "serializ": [37, 38, 65, 142, 166, 208, 209, 221, 240, 303, 304, 335, 407, 430], "instanc": [37, 38, 55, 65, 84, 143, 208, 209, 221, 270, 303, 304, 323, 335, 352, 475, 483, 491, 523, 532, 656, 682, 684], "cl": [37, 38, 65, 208, 209, 221, 303, 304, 335], "wa": [37, 38, 65, 208, 209, 221, 243, 303, 304, 335, 687], "produc": [37, 38, 65, 112, 123, 137, 208, 209, 221, 303, 304, 335, 404, 466, 654, 659, 684, 689, 690, 694], "meta": [37, 38, 39, 65, 66, 142, 159, 208, 209, 210, 221, 222, 240, 303, 304, 305, 335, 336, 407], "privat": [37, 38, 39, 65, 66, 142, 208, 209, 210, 221, 222, 240, 303, 304, 305, 335, 336, 407], "devic": [38, 39, 65, 142, 167, 209, 210, 221, 240, 282, 283, 304, 305, 335, 407, 432, 637, 682], "side": [38, 65, 94, 123, 127, 140, 209, 219, 221, 253, 254, 304, 335, 390, 394, 406, 476, 519, 521, 527, 536, 539, 545, 555, 646, 685], "deseri": [38, 65, 142, 209, 221, 240, 304, 335, 407], "task": [38, 65, 209, 221, 304, 335, 682, 684, 690, 694], "primari": [38, 209, 304, 682], "purpos": [38, 209, 304, 682], "creation": [38, 209, 304, 691], "memori": [38, 39, 66, 70, 93, 160, 163, 167, 209, 210, 222, 245, 282, 304, 305, 336, 362, 427, 432, 636, 637, 647, 659, 661, 682, 683, 684, 686, 692], "host": [38, 66, 167, 180, 209, 222, 271, 304, 336, 432, 443, 661, 682], "necessari": [38, 43, 161, 209, 304, 310, 425, 682, 684, 690], "associ": [39, 66, 210, 222, 271, 305, 336, 688, 694], "period": [40, 55, 84, 110, 127, 132, 145, 185, 190, 193, 194, 197, 201, 306, 323, 352, 381, 394, 399, 409, 569, 577, 608, 614, 620, 621, 623, 624, 627, 628, 630, 684], "discret": [40, 306, 646], "calcul": [40, 70, 110, 132, 151, 181, 192, 219, 294, 306, 327, 381, 399, 414, 444, 569, 585, 622, 639, 640, 641, 642, 643, 644, 645, 667, 684, 686, 691], "compar": [40, 50, 211, 223, 306, 318, 344, 580, 663, 664, 665, 666, 674, 685, 689, 693, 694], "previou": [40, 123, 255, 306], "shift": [40, 110, 286, 306, 381, 569], "neg": [40, 64, 125, 158, 239, 306, 334, 392, 423, 492, 497, 569], "take": [40, 106, 111, 163, 245, 283, 382, 427, 475, 517, 560, 569, 579, 604, 638, 647, 686, 690], "gdf": [40, 568, 571, 580, 583, 585, 684, 685, 688], "16": [40, 132, 140, 357, 399, 406, 478, 494, 495, 667, 684, 686, 690, 692], "36": [40, 132, 399, 684, 690], "divis": [41, 42, 56, 122, 129, 136, 175, 191, 308, 309, 324, 389, 396, 403, 437, 615], "truediv": [41, 42, 308, 309], "inf": [41, 42, 75, 76, 104, 105, 122, 136, 175, 308, 309, 345, 346, 373, 374, 389, 403, 437], "flexibl": [43, 165, 310, 429, 682, 684, 686, 690, 693], "wrapper": [43, 310, 682, 690], "sub": [43, 153, 310, 418, 479, 490, 496, 531, 534, 535], "mul": [43, 99, 310, 367], "div": [43, 310], "mod": [43, 310], "pow": [43, 310], "swap": [43, 310], "operand": [43, 310], "http": [43, 283, 310, 483, 538, 543, 552, 553, 585, 655, 656, 659, 660, 661, 662, 667, 692], "doc": [43, 283, 310, 538, 543, 628, 659, 667, 686, 694], "org": [43, 283, 310, 538, 543, 585, 667], "datamodel": [43, 310], "html": [43, 283, 310, 538, 543, 552, 553, 667], "__ror__": [43, 310], "70": [43, 310], "174": [43, 310], "remov": [44, 45, 128, 179, 180, 256, 259, 311, 312, 313, 395, 442, 443, 463, 465, 487, 488, 489, 521, 525, 526, 539, 545, 682, 690], "multi": [44, 51, 80, 257, 311, 653, 683, 684, 691], "keyerror": [44, 311], "found": [44, 94, 140, 234, 265, 271, 311, 357, 406, 491, 496, 528, 532, 533, 535, 537, 538, 543, 549, 628, 656, 682, 685], "dropna": [44, 48, 61, 97, 107, 150, 165, 178, 311, 316, 330, 332, 365, 379, 429, 441, 466, 563, 584, 691], "drop_dupl": [44, 311], "duplic": [44, 45, 103, 106, 124, 143, 212, 250, 311, 312, 372, 375, 530, 646, 656, 694], "certain": [44, 45, 94, 311, 525, 538, 543, 690], "reindex": [44, 311, 571, 674, 685], "midx": [44, 146, 243, 258, 266, 311, 410], "from_product": [44, 241, 261, 263, 311], "40": [44, 127, 184, 192, 195, 311, 390, 394, 480, 625, 684], "lama": [44, 311, 312, 344], "falcon": [44, 61, 64, 74, 128, 178, 311, 330, 334], "speed": [44, 61, 128, 311, 330, 568, 656, 667, 686], "weight": [44, 137, 311, 404], "length": [44, 48, 55, 84, 88, 94, 126, 137, 139, 149, 182, 234, 249, 271, 311, 316, 323, 352, 358, 393, 404, 413, 445, 468, 469, 484, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 538, 543, 554, 555, 577, 637, 646, 648, 690], "big": [44, 70, 311], "small": [44, 311, 656, 660, 682, 686, 687, 689, 690], "45": [44, 196, 311, 607, 613, 626, 667, 690], "200": [44, 123, 206, 283, 311, 686], "100": [44, 117, 126, 127, 191, 206, 243, 283, 311, 330, 393, 394, 507, 509, 615, 664, 684, 686, 690, 693], "250": [44, 311], "150": [44, 311], "320": [44, 311], "subset": [45, 46, 55, 84, 141, 157, 165, 178, 244, 323, 352, 422, 429, 656, 687, 689], "keep": [45, 46, 88, 103, 106, 109, 121, 177, 182, 212, 312, 313, 358, 372, 375, 388, 445, 487, 488], "identifi": [45, 75, 76, 92, 104, 105, 148, 165, 345, 346, 373, 374, 412, 429, 482, 489, 532, 533, 628, 653, 658], "drop": [45, 46, 48, 109, 113, 128, 143, 150, 212, 213, 259, 312, 313, 316, 395, 466, 646, 691, 694], "occurr": [45, 103, 106, 212, 312, 372, 375, 481, 491, 517, 528, 531, 537, 684], "place": [45, 73, 88, 123, 126, 128, 133, 142, 143, 148, 166, 177, 182, 240, 339, 358, 393, 395, 400, 407, 412, 430, 439, 445, 457, 459, 465, 475, 487, 488, 489, 517, 656, 660, 661, 692, 693], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 115, 116, 154, 170, 195, 312, 384, 385, 419, 467, 490, 496, 534, 535, 540, 625, 663, 664, 665, 666, 684, 690], "guarante": [45, 137, 312, 404, 472, 585, 656, 689, 694], "thresh": 46, "decid": [46, 213], "least": [46, 109, 177, 213, 332, 466, 517, 688, 690], "isna": [46, 313, 693], "notna": [46, 313, 693], "alfr": [46, 75, 76, 104, 105, 345, 346, 373, 374], "batman": [46, 75, 76, 104, 105, 345, 346, 373, 374], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 345, 346, 373, 374, 500, 501, 690], "batmobil": [46, 75, 76, 104, 105, 345, 346, 373, 374], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 345, 346, 373, 374], "1940": [46, 75, 76, 104, 105, 345, 346, 373, 374], "look": [46, 682, 686, 687, 690], "20180310": 47, "ax": [48, 112, 165, 179, 180, 256, 316, 429, 442, 443, 456, 542, 654, 659, 670, 677], "still": [48, 316], "we": [48, 74, 106, 123, 124, 127, 204, 316, 365, 394, 517, 658, 682, 684, 686, 687, 688, 690, 693, 694], "our": [48, 316, 682, 684, 686, 690, 694], "test": [50, 64, 318, 334, 344, 480, 485, 526, 544, 656, 674, 684, 687, 694], "exactly_equ": [50, 318], "different_column_typ": [50, 318], "expr": [51, 119], "evalu": [51, 485, 502, 544, 684], "describ": [51, 70, 165, 166, 429, 430, 529, 660, 661, 689], "express": [51, 119, 480, 481, 485, 486, 491, 522, 531, 533, 538, 543, 544, 660, 661, 691], "mutat": 51, "typic": [51, 682, 694], "statement": [51, 684, 690], "bitwis": [51, 690], "logic": [51, 94, 282, 660, 661, 682, 684, 690], "boolean": [51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 117, 119, 123, 124, 143, 168, 169, 191, 198, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 255, 265, 269, 281, 283, 289, 340, 341, 342, 343, 344, 345, 346, 355, 359, 360, 363, 373, 374, 377, 386, 390, 391, 433, 453, 467, 480, 485, 488, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 522, 544, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 615, 616, 617, 618, 619, 620, 621, 648, 656, 659, 660, 661, 690, 691], "automat": [51, 57, 271, 327, 585, 659, 684, 689, 693], "respons": 51, "suitabl": [51, 140, 166, 406, 430, 682], "later": 51, "condit": [51, 88, 119, 182, 358, 445, 684, 690], "upon": [51, 142, 240, 407], "earlier": 51, "though": [51, 684, 690], "modifi": [51, 128, 143, 177, 241, 395, 439, 571, 659], "line": [51, 64, 166, 334, 430, 496, 535, 554, 656, 659, 686], "replic": [52, 319], "22": [52, 127, 192, 239, 394, 478, 684, 693], "44": [52, 189, 690], "ffill": [54, 108, 110, 255, 322, 380, 381, 571], "forward": [54, 322, 570, 571, 575, 590, 596], "next": [54, 255, 322, 491, 571, 682, 684, 686, 690], "backward": [54, 322, 561, 562, 581, 582], "initi": [55, 323, 682, 684], "time": [55, 84, 110, 125, 127, 132, 158, 160, 166, 239, 271, 283, 323, 352, 381, 392, 394, 399, 423, 430, 474, 481, 546, 547, 551, 585, 656, 660, 661, 667, 674, 682, 686, 687, 690, 691, 693], "date": [55, 84, 166, 183, 191, 195, 323, 352, 430, 612, 615, 616, 617, 618, 619, 620, 621, 625, 628, 656, 659, 667, 684, 687], "few": [55, 84, 323, 352, 682, 690, 693, 694], "1m": [55, 323, 612], "displai": [55, 70, 84, 121, 323, 352, 388, 646], "month": [55, 184, 189, 196, 323, 607, 612, 613, 616, 617, 626, 667], "typeerror": [55, 57, 58, 84, 126, 211, 216, 260, 314, 323, 325, 328, 344, 352, 393, 517, 668, 690], "datetimeindex": [55, 84, 323, 352, 667, 674], "date_rang": [55, 84, 127, 185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 314, 323, 352, 394, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 684], "2d": [55, 84, 323, 352, 647], "ts": [55, 84, 323, 352], "3d": [55, 84, 323, 352], "9223372036854775807": [56, 129, 324, 396, 684], "tabl": [57, 72, 112, 158, 159, 165, 166, 168, 260, 423, 429, 430, 488, 550, 654, 659, 682, 684, 689, 692], "pyarrow": [57, 159, 260, 325, 424, 660, 661, 684], "doe": [57, 61, 74, 124, 161, 165, 282, 283, 314, 330, 425, 429, 465, 538, 580, 653, 668, 682, 685, 688, 689, 690, 694], "similar": [57, 94, 148, 165, 282, 412, 429, 538, 543, 663, 664, 666, 687, 689, 690, 693, 694], "to_panda": [57, 684, 687, 689, 690, 693, 694], "work": [57, 132, 399, 441, 636, 637, 682, 683, 684, 688, 689, 690, 691], "pa": [57, 260, 325], "record": [59, 94, 121, 166, 388, 430, 523, 659], "recarrai": [59, 171], "ndim": 59, "greater": [60, 62, 71, 289, 329, 331, 555, 585, 668, 688], "as_index": [61, 330], "group_kei": [61, 330], "squeez": [61, 330], "group": [61, 121, 165, 168, 330, 388, 429, 441, 486, 533, 560, 564, 565, 566, 567, 569, 572, 573, 574, 576, 577, 578, 579, 580, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 652, 658, 660, 661, 682, 685, 687, 690, 691, 693, 694], "mapper": [61, 124, 330], "involv": [61, 271, 330, 682], "some": [61, 73, 123, 265, 330, 339, 415, 470, 481, 531, 580, 667, 682, 684, 685, 689, 690, 692, 694], "combin": [61, 143, 178, 330, 456, 482, 521, 538, 539, 545, 560, 579, 604, 660, 661, 674, 684, 692], "split": [61, 166, 254, 330, 430, 478, 524, 528, 537, 538, 548, 549, 659, 662, 674, 684, 692], "larg": [61, 137, 330, 404, 682, 687, 689], "amount": [61, 70, 330, 682, 690], "notic": [61, 265, 330, 688, 690], "interpret": [61, 165, 330, 429, 494, 495, 538, 543, 656, 660, 661], "hierarch": [61, 89, 90, 95, 165, 176, 257, 330, 359, 360, 363, 429, 669, 682, 684], "particular": [61, 89, 90, 95, 330, 359, 360, 363, 415, 481, 656, 682, 689, 694], "relev": [61, 330], "sql": [61, 94, 330, 684], "influenc": [61, 330, 692], "preserv": [61, 126, 283, 330, 393, 607, 613, 626, 656, 693], "dataframegroupbi": [61, 673], "about": [61, 70, 330, 585, 636, 637, 682, 684, 692], "anim": [61, 74, 312, 344, 456], "parrot": [61, 64, 128, 330, 334, 480], "380": [61, 568], "370": [61, 330, 568], "375": 61, "captiv": 61, "wild": 61, "from_arrai": [61, 223, 249], "390": [61, 330, 686], "350": [61, 330], "185": 61, "210": 61, "murmur3": [63, 333], "hash": [63, 109, 333, 636], "md5": [63, 333], "murmurhash3": [63, 333], "120": [63, 333, 479], "1930516747": [63, 333], "422619251": [63, 333], "941520876": [63, 333], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 333], "947ca8d2c5f0f27437f156cfbfab0969": [63, 333], "d0580ef52d27c043c8e341fd5039b166": [63, 333], "330519225": [63, 333], "397962448": [63, 333], "1345834934": [63, 333], "57ce879751b5169c525907d5c563fae1": [63, 333], "948d6221a7c4963d4be411bcead7e32b": [63, 333], "fe061786ea286a515b772d91b0dfcd70": [63, 333], "quickli": [64, 334, 686], "your": [64, 123, 124, 334, 684, 686, 690], "right": [64, 80, 94, 127, 132, 140, 219, 228, 235, 253, 254, 289, 307, 334, 394, 399, 406, 476, 490, 496, 519, 527, 534, 535, 539, 543, 545, 555, 646, 648, 663, 664, 665, 666, 687, 688], "tail": [64, 334], "allig": [64, 334], "bee": [64, 334, 521, 539, 545], "lion": [64, 128, 334, 491], "monkei": [64, 128, 334, 456, 491], "shark": [64, 334], "whale": [64, 334], "zebra": [64, 334], "view": [64, 161, 167, 334, 425, 432, 571, 682, 691], "three": [64, 106, 112, 334, 482, 646, 654, 682, 686, 690, 692], "iloc": [67, 580, 684, 685, 690, 693], "18": [68, 127, 132, 133, 184, 189, 192, 195, 337, 394, 399, 400, 478, 625, 634, 684, 688], "slice": [68, 219, 255, 265, 337, 542, 674, 682, 684, 685], "verbos": 70, "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 327], "print": [70, 124, 132, 172, 399, 434, 580, 667, 686], "concis": 70, "usag": [70, 93, 362, 659, 684], "full": [70, 94, 165, 429, 597, 658, 684, 686, 687, 694], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 128, 204, 382, 395, 478, 488, 523, 597, 646, 682, 684, 686, 688, 689, 690, 693, 694], "further": 70, "process": [70, 172, 434, 684, 686, 689, 690], "switch": [70, 667], "truncat": [70, 637], "total": [70, 93, 362, 555, 612, 652, 655, 660, 661, 688, 690], "alwai": [70, 101, 121, 137, 244, 282, 365, 388, 404, 517, 656, 682, 689, 690, 692, 694], "never": [70, 468, 682, 690], "introspect": 70, "shown": [70, 491], "human": 70, "readabl": 70, "unit": [70, 166, 430, 446, 659, 667], "estim": [70, 296, 585], "made": [70, 161, 173, 265, 425, 556, 685, 693], "assum": [70, 307, 480, 484, 531, 538, 543, 585, 647, 682, 690], "consum": [70, 690], "real": 70, "cost": 70, "smaller": [70, 93, 489], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 283], "delta": [70, 151, 181, 414, 444, 446, 585, 600, 603, 643, 645], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 169, 247, 260, 301, 433, 674, 682, 684, 690, 693], "130": 70, "byte": [70, 93, 362, 473, 553, 636, 649, 655, 656, 659, 660, 661, 682, 692], "its": [70, 111, 159, 177, 286, 382, 667, 682, 684, 692], "pipe": [70, 689], "content": [70, 165, 429, 517, 682, 690], "io": [70, 656, 660, 661, 674, 691], "stringio": [70, 656, 659, 662], "getvalu": 70, "mode": [70, 165, 429, 658, 692], "special": [70, 202, 252, 455, 481, 505, 517, 555, 637, 682, 688, 694], "fine": 70, "tune": [70, 692], "random_strings_arrai": 70, "random": [70, 137, 170, 404, 585, 684, 686, 693, 694], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 168, 170, 283], "999999": 70, "mb": [70, 649, 684], "num": [71, 684], "interleav": [72, 158, 423], "major": [72, 647, 694], "a1": [72, 486, 686], "a2": [72, 686], "a3": [72, 686], "b1": 72, "b2": [72, 486], "b3": 72, "linear": [73, 117, 339, 386, 576, 682, 686, 687], "limit_direct": [73, 339], "limit_area": [73, 339], "downcast": [73, 214, 339, 571, 668], "techniqu": [73, 339], "space": [73, 170, 339, 482, 517, 524, 525, 528, 538, 547, 656], "linearli": [73, 339], "unsort": [73, 339, 687], "lead": [73, 160, 339, 521, 539, 545, 585, 686, 687, 690], "erron": [73, 339], "num_leg": [74, 178], "num_w": [74, 178], "check": [74, 143, 224, 225, 226, 227, 228, 232, 233, 234, 257, 307, 344, 465, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 522, 552, 553, 663, 664, 665, 666, 686, 694], "present": [74, 115, 116, 154, 384, 385, 419, 466, 517, 538, 543, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 637], "leg": [74, 97], "wing": [74, 97], "separ": [74, 475, 482, 523, 524, 528, 537, 538, 543, 648, 662, 677, 682], "spider": 74, "everyth": [75, 76, 89, 90, 95, 345, 346, 359, 360, 363, 456, 542, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605], "mask": [75, 76, 86, 104, 105, 126, 255, 265, 283, 327, 345, 346, 355, 373, 374, 377, 378, 393, 682, 693], "timedelta64": [75, 76, 104, 105, 345, 346, 373, 374, 446, 631, 632, 633, 634, 635, 692, 693], "charact": [75, 76, 104, 105, 345, 346, 373, 374, 474, 475, 476, 477, 478, 479, 480, 481, 487, 488, 489, 494, 495, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 520, 521, 522, 524, 525, 527, 531, 532, 536, 539, 543, 545, 546, 547, 548, 550, 551, 552, 553, 555, 636, 656, 682], "incas": [75, 76, 104, 105, 345, 346, 373, 374], "1939": [75, 76, 104, 105, 345, 346, 373, 374], "05": [75, 76, 104, 105, 127, 184, 186, 187, 188, 189, 192, 195, 196, 200, 286, 345, 346, 373, 374, 394, 607, 609, 610, 611, 612, 613, 625, 626, 629, 663, 664, 665, 666, 667, 684], "27": [75, 76, 104, 105, 345, 346, 373, 374, 478, 616, 618, 619, 684], "joker": [75, 76, 104, 105, 345, 346, 373, 374], "000000": [75, 76, 104, 105, 127, 138, 345, 346, 373, 374, 394, 405, 583, 585, 686, 689, 693], "isnul": [75, 345], "32": [75, 76, 104, 105, 133, 345, 346, 373, 374, 400], "float64index": [75, 76, 104, 105, 146, 216, 345, 346, 373, 374, 410], "genericindex": [75, 76, 104, 105, 345, 346, 373, 374, 466, 467, 468, 469, 470, 471, 472, 480, 682], "left": [80, 94, 124, 127, 133, 140, 177, 219, 228, 235, 253, 254, 289, 307, 394, 400, 406, 476, 490, 496, 521, 527, 531, 534, 535, 536, 545, 550, 555, 646, 663, 664, 665, 666, 684, 687], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 235, 456, 660, 661], "outer": [80, 94, 235, 456, 661], "suffic": [80, 690], "avoid": [80, 282, 682, 692, 694], "conflict": 80, "ensur": [80, 161, 167, 425, 432, 480, 661, 684], "now": [80, 648, 682, 684, 686, 690], "due": [80, 580, 656, 684, 685, 687, 690], "lack": 80, "five": [81, 283], "int64index": [81, 146, 206, 211, 214, 223, 234, 235, 238, 239, 241, 243, 247, 249, 259, 291, 410, 481, 665, 682], "fisher": [82, 83, 147, 350, 351, 411], "unbias": [82, 83, 147, 181, 296, 350, 351, 411, 444, 585], "kurtosi": [82, 350], "sampl": [82, 83, 147, 151, 294, 350, 351, 411, 414, 428, 684], "obtain": [82, 83, 283, 350, 351, 554, 694], "definit": [82, 83, 272, 350, 351, 370, 436, 585], "normal": [82, 83, 137, 151, 178, 181, 183, 296, 350, 351, 404, 414, 441, 444, 525, 585, 600, 603, 660, 661, 686], "1999999999999904": [82, 83, 350, 351], "kurt": [83, 351], "final": [84, 352, 660, 661, 682, 690], "dai": [84, 170, 183, 186, 187, 188, 191, 192, 200, 314, 352, 446, 447, 452, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 629, 631, 633, 635, 667, 690, 693], "cond": [88, 182, 358, 445], "dimens": [88, 101, 182, 358, 370, 445], "collaps": [89, 90, 95, 359, 360, 363], "attempt": [89, 90, 95, 204, 211, 265, 359, 360, 363, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605, 648, 656, 667, 685, 690], "17": [91, 127, 132, 140, 286, 361, 394, 399, 406, 478, 684, 693], "unpivot": [92, 653], "wide": [92, 653, 690], "format": [92, 160, 164, 165, 166, 168, 170, 172, 429, 430, 434, 514, 515, 552, 553, 554, 571, 628, 653, 656, 659, 667, 682, 683, 684, 685, 686, 687, 688, 692], "long": [92, 554, 653, 659], "id_var": [92, 653], "value_var": [92, 653], "var_nam": [92, 653], "value_nam": [92, 653], "whose": [93, 112, 556, 648, 654, 682], "ones": [93, 464], "5000": 93, "astyp": [93, 225, 233, 684], "head": [93, 684, 686, 690, 694], "40000": [93, 283], "storag": [93, 691], "mani": [93, 372, 375, 585, 675, 682, 684, 687, 688, 690, 692, 694], "repeat": [93, 158, 423, 481, 674], "5008": 93, "43": [93, 634, 686, 690], "give": [93, 271, 682, 686, 689], "rest": [93, 515, 542, 547], "necessarili": [93, 176, 669], "left_on": 94, "right_on": 94, "left_index": [94, 687], "right_index": [94, 687], "_x": 94, "_y": 94, "databas": 94, "join": [94, 177, 456, 656, 674, 683, 687, 691, 694], "intersect": [94, 456], "leftsemi": 94, "leftanti": 94, "exact": [94, 117, 137, 255, 386, 404, 646, 665, 667], "opposit": 94, "were": [94, 463, 549, 684, 690], "overlap": [94, 141, 177, 456, 488, 491, 637, 646], "determinist": [94, 694], "df_a": [94, 684], "vals_a": [94, 684], "df_b": [94, 684], "vals_b": [94, 684], "df_merg": 94, "sort_valu": [94, 684], "typecast": 94, "ambigu": [94, 183], "exactli": [94, 663, 664, 665, 666, 689], "extend": [94, 646, 684], "semi": [94, 585], "anti": 94, "modulo": [96, 130, 364, 397], "4294967295": [96, 130, 364, 397], "appear": [97, 121, 327, 372, 375, 388, 482], "often": [97, 673, 687, 690, 693], "search": [97, 165, 265, 429, 467, 480, 490, 491, 496, 532, 534, 535, 683, 693, 694], "don": [97, 107, 124, 178, 365, 379, 441, 563, 584, 659, 687, 690, 693], "value_count": [97, 684], "speci": [97, 241], "bird": [97, 128, 456], "mammal": [97, 128], "arthropod": 97, "multipli": [98, 366, 690], "largest": [103, 372], "priorit": [103, 690], "popul": [103, 106, 686, 690], "59000000": [103, 106, 372, 375], "65000000": [103, 106, 372, 375], "434000": [103, 106, 372, 375], "337000": [103, 106, 372, 375], "11300": [103, 106, 372, 375], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 155, 420, 688], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "IS": [103, 106, 546, 551], "nr": [103, 106], "tv": [103, 106], "ai": [103, 106, 146, 410, 519, 522, 534, 536, 552, 553, 655], "itali": [103, 106, 372, 375], "franc": [103, 106, 372, 375], "malta": [103, 106, 372, 375], "maldiv": [103, 106, 372, 375], "brunei": [103, 106, 372, 375], "iceland": [103, 106, 372, 375], "nauru": [103, 106, 372, 375], "tuvalu": [103, 106, 372, 375], "anguilla": [103, 106, 372, 375], "notnul": [104, 373], "smallest": [106, 121, 375, 388, 668], "retriev": [106, 493, 658], "ti": [106, 121, 255, 388], "resolv": 106, "revers": [106, 372, 375, 684], "distinct": [107, 344, 682], "npart": 109, "keep_index": [109, 139], "partit": [109, 170, 649, 661, 674, 684], "fill_method": [110, 381], "percent": [110, 381], "sequenti": [110, 381, 689, 690, 694], "form": [110, 112, 121, 158, 223, 249, 381, 388, 423, 504, 507, 508, 509, 510, 649, 654, 660, 661, 682, 687], "handl": [110, 160, 165, 166, 177, 312, 381, 415, 429, 430, 456, 538, 543, 555, 658, 668, 674, 682, 683, 692], "consecut": [110, 125, 239, 381, 392, 477, 523, 524, 656], "increment": [110, 381, 649], "data_keyword": [111, 382, 597], "chain": [111, 382], "groupbi": [111, 382, 674, 682, 683, 684, 685, 687, 691, 694], "write": [111, 160, 164, 165, 166, 168, 170, 382, 429, 430, 649, 651, 656, 658, 684, 686, 690, 692], "arg2": [111, 382], "arg3": [111, 382], "sai": [111, 382, 493, 690], "suppos": [111, 382], "reshap": [112, 150, 654, 674, 686], "organ": [112, 654], "rearrang": [112, 654], "exponenti": [114, 134, 383, 401], "min_count": [115, 116, 154, 384, 385, 419, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605], "fewer": [115, 116, 154, 384, 385, 419, 572, 573, 574, 591, 592, 593, 594, 598, 601, 605], "5040": [115, 116, 384, 385], "q": [117, 118, 386, 576, 628], "interpol": [117, 118, 386, 576], "higher": [117, 118, 386, 576, 659, 682, 692], "midpoint": [117, 386, 576], "nearest": [117, 118, 255, 386, 576], "desir": [117, 118, 157, 244, 386, 422, 576, 656, 659, 690, 694], "li": [117, 118, 386, 576], "j": [117, 118, 386, 484, 690], "approxim": [117, 386], "One": [117, 123, 165, 166, 184, 189, 196, 271, 390, 429, 430, 607, 613, 626, 685, 686, 688, 693], "notabl": [117, 148, 412], "doesn": [117, 137, 170, 404, 517, 684, 693], "under": [117, 661, 677, 682, 684], "cp": [117, 637, 684, 686, 690, 693, 694], "55": [117, 239, 690], "local_dict": [119, 684], "local": [119, 649, 655, 656, 658, 659, 660, 661, 662, 684], "filter": [119, 488, 660, 661, 683, 684, 694], "search_dat": [119, 684], "search_date2": 119, "averag": [121, 388, 690], "na_opt": [121, 388], "pct": [121, 388], "through": [121, 388, 480, 481, 486, 491, 522, 550, 674, 682, 690, 692, 693], "direct": [121, 388, 577, 659, 684, 692], "dens": [121, 388, 686], "lowest": [121, 388, 490, 496, 534, 682], "increas": [121, 231, 307, 340, 342, 375, 388, 656, 667], "bottom": [121, 388, 656], "rtruediv": [122, 389], "002778": [122, 136, 389, 403], "333333": [122, 127, 136, 389, 394, 403, 441, 585], "005556": [122, 136, 389, 403], "250000": [122, 136, 389, 403], "toler": [123, 218, 255, 265, 390, 663, 664, 665, 666], "conform": [123, 235, 390], "unless": [123, 415, 538, 543], "either": [123, 133, 137, 149, 169, 177, 217, 283, 395, 400, 404, 413, 433, 475, 480, 648, 655, 656, 659, 660, 661, 662, 684, 686, 690, 692], "even": [123, 161, 282, 365, 425, 656, 659, 690, 693], "convent": [123, 124, 127, 394], "index_label": 123, "column_label": 123, "_highly_": 123, "clarifi": [123, 124], "intent": [123, 124], "fiction": [123, 493], "firefox": 123, "chrome": 123, "safari": 123, "ie10": 123, "konqueror": 123, "http_statu": [123, 685], "404": [123, 686], "301": 123, "response_tim": 123, "new_index": 123, "iceweasel": 123, "comodo": 123, "dragon": 123, "retain": [123, 390, 489, 685, 693], "user_ag": 123, "alter": [124, 170, 238, 391], "throw": [124, 166, 430, 690, 692], "index_mapp": 124, "columns_mapp": 124, "highli": [124, 661, 694], "overwrit": [124, 177, 261], "postfix": 124, "repetit": [125, 239, 392], "newli": [125, 239, 392, 395, 577, 682], "to_replac": [126, 393], "regex": [126, 393, 480, 481, 486, 491, 522, 531, 533, 538, 543], "valueerror": [126, 141, 165, 166, 177, 393, 429, 430, 464, 496, 517, 535, 646, 686, 689], "mismatch": [126, 393, 665, 666], "actual": [126, 393, 517, 682, 684, 690, 693], "exhibit": [126, 393], "silent": [126, 393], "rule": [127, 394], "close": [127, 183, 203, 253, 254, 289, 394, 446, 649, 658, 682, 694], "loffset": [127, 394], "start_dai": [127, 394], "dateoffset": [127, 394], "bin": [127, 307, 394, 441, 646], "interv": [127, 224, 225, 226, 227, 228, 232, 233, 253, 254, 307, 394, 646, 682, 689], "edg": [127, 132, 307, 394, 399, 490, 496, 534, 535, 646], "bucket": [127, 394], "closest": [127, 394], "nanosecond": [127, 166, 170, 394, 430, 447, 631, 659, 667], "millisecond": [127, 166, 394, 430, 447, 631, 659, 667], "ms": [127, 166, 170, 184, 189, 196, 394, 430, 607, 613, 625, 626, 631, 632, 633, 635, 659, 667, 686, 688, 692], "minut": [127, 394, 447, 631, 667, 683, 691], "2001": [127, 196, 201, 314, 394, 607, 612, 613, 615, 626, 630, 687], "1t": [127, 394], "06": [127, 184, 186, 187, 188, 200, 394, 607, 609, 610, 611, 612, 628, 629, 631, 632, 633, 635, 684], "downsampl": [127, 394], "3t": [127, 394], "23": [127, 394, 478, 480, 504, 505, 512, 684, 688, 693], "57": [127, 394, 690], "upsampl": [127, 394], "asfreq": [127, 394], "price": [127, 394, 493, 690], "19": [127, 394, 478, 585, 682, 684, 686], "volum": [127, 394], "60": [127, 394, 684], "week_start": [127, 394], "7d": [127, 394], "29": [127, 194, 394, 478, 616, 618, 619, 622, 624, 684, 694], "28": [127, 394, 478, 612, 616, 618, 619, 684], "63": [127, 394, 689], "col_level": [128, 653], "col_fil": 128, "reset": [128, 281, 395, 456], "try": [128, 395, 659, 668], "389": 128, "80": [128, 568], "max_spe": 128, "from_tupl": [128, 261, 262, 265, 395, 684, 685], "fly": [128, 656, 659], "run": [128, 502, 503, 504, 505, 511, 512, 513, 516, 636, 637, 684, 686, 690, 694], "window": [132, 399, 674, 683, 691, 694], "center": [132, 399, 527, 555, 674, 690], "win_typ": [132, 399], "baseindex": [132, 204, 207, 399, 460, 682], "As": [132, 165, 399, 429, 682, 687, 690], "oppos": [132, 399, 684], "fix": [132, 165, 184, 189, 196, 357, 399, 429, 607, 613, 626, 682, 687, 688], "accommod": [132, 399], "get_window_bound": [132, 399], "20190101": [132, 399], "2s": [132, 399], "2019": [132, 241, 399], "01t09": [132, 399], "000": [132, 399, 502, 652, 656, 657, 660, 661], "math": [132, 283, 399, 690], "49": [132, 399, 690], "64": [132, 399, 682, 690], "81": [132, 399, 690], "some_func": [132, 399], "sqrt": [132, 399, 690], "And": [132, 399, 690], "decim": [133, 166, 400, 430, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 656, 689, 691, 694], "half_even": [133, 400], "half_up": [133, 400], "affect": [133, 400, 692], "67": [133, 400], "66": [133, 400], "subtract": [135, 152, 402, 417], "359": [135, 152, 153, 402, 417, 418], "179": [135, 152, 153, 402, 417, 418], "frac": [137, 404], "random_st": [137, 404], "reproduc": [137, 404], "ident": [137, 172, 404, 434, 456, 538, 543, 602, 663, 664, 665, 666, 694], "fraction": [137, 404, 512], "disallow": [137, 404], "state": [137, 261, 404], "uniform": [137, 404, 646], "probabl": [137, 404], "unlik": [137, 404, 689, 692, 694], "randomst": [137, 404], "seed": [137, 404, 684, 690], "stat": [137, 404, 674, 691], "randomli": [137, 404, 684], "slow": [137, 404, 689], "achiev": [137, 404, 554, 689], "especi": [137, 404, 689], "advis": [137, 404], "826087": [138, 405], "913043": [138, 405], "043478": [138, 405], "map_index": 139, "map_siz": 139, "scatter": 139, "destin": [139, 690], "conserv": 139, "find": [140, 204, 255, 406, 481, 491, 496, 534, 674], "maintain": [140, 406, 684], "hypothet": [140, 406], "monoton": [140, 230, 231, 255, 265, 270, 307, 340, 341, 342, 406], "wrong": [140, 406], "correct": [140, 406, 659, 690], "values_df": [140, 406], "reinterpret": [142, 240, 407], "lightweight": [142, 240, 407], "append": [143, 165, 429, 475, 538, 543, 648], "becom": [143, 686], "too": [143, 491, 690], "hello": [146, 410, 473, 474, 478, 482, 492, 519, 525, 526, 529, 534, 536, 541, 548, 549, 655], "rapid": [146, 410, 492, 519, 522, 534, 536, 552, 553, 648, 655, 684, 686, 690, 693], "37037": [147, 411], "sort_remain": [148, 412], "vs": [148, 149, 412, 413], "quick": [148, 412], "builtin": [148, 412, 655, 656, 659, 660, 661, 662], "vector": [148, 289, 412, 415], "prescrib": 150, "ddof": [151, 181, 414, 444, 585, 600, 603, 643, 645], "deviat": [151, 265, 414, 600, 643, 685, 687], "freedom": [151, 181, 414, 444, 585, 600, 603, 643, 645], "divisor": [151, 181, 414, 444, 600, 603, 643, 645], "290994": [151, 414], "squar": [155, 420], "249": [155, 420], "unsupport": [157, 244, 422, 561, 562, 570, 571, 575, 577, 581, 582, 590, 596, 638, 689], "preserve_index": 159, "save": [159, 170, 649, 682], "path_or_buf": [160, 165, 166, 429, 430, 658, 659], "sep": [160, 475, 517, 524, 528, 537, 656], "na_rep": [160, 475], "line_termin": 160, "encod": [160, 165, 166, 320, 429, 430, 552, 553, 636, 637, 648, 658, 659, 682], "compress": [160, 165, 166, 168, 170, 429, 430, 649, 656, 659, 692], "csv": [160, 656, 674, 691, 692], "file": [160, 164, 165, 166, 168, 170, 429, 430, 496, 535, 636, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 682, 684, 688, 692], "path": [160, 164, 165, 166, 168, 170, 429, 430, 636, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 684, 692], "char": [160, 527, 656], "delimit": [160, 166, 430, 489, 517, 524, 532, 538, 543, 548, 549, 656, 659, 662], "utf": [160, 479, 552, 553, 659, 682], "scheme": 160, "read_csv": [160, 684, 687], "quote_nonnumer": [160, 656], "filenam": [160, 166, 430, 649, 652, 656, 657, 660, 661], "set_index": [160, 176, 235, 669, 689], "na_valu": [161, 167, 425, 432, 656], "asarrai": [161, 167, 425, 432, 686, 690], "strictli": [161, 425, 682], "dlpack": [163, 245, 427, 647, 686, 692], "tensor": [163, 245, 427, 637, 647], "open": [163, 165, 245, 289, 427, 429, 441, 647, 650, 655, 656, 658, 659, 660, 661, 662], "dmlc": [163, 245, 427, 647], "pycapsul": [163, 245, 427, 647], "pointer": [163, 245, 427, 647], "cudf_obj": [163, 245, 427], "pycapsule_obj": [163, 245, 427, 647], "encapsul": [163, 245, 427, 647, 682], "feather": [164, 165, 429, 657, 674, 692], "read_feath": 164, "hdf5": [165, 429, 674], "hdfstore": [165, 429, 658, 674], "hdf": [165, 429, 658, 676, 692], "applic": [165, 429, 585, 674, 682], "hold": [165, 224, 225, 226, 227, 228, 232, 233, 429], "relat": [165, 429, 674, 692], "individu": [165, 217, 429, 465, 478, 480, 682, 693], "pleas": [165, 357, 429, 684, 690], "r": [165, 415, 429, 478, 486, 513, 525, 550, 554, 658], "delet": [165, 429], "read": [165, 429, 652, 655, 656, 657, 658, 659, 660, 661, 662, 682, 684, 688, 692], "alreadi": [165, 283, 429, 456, 525, 682, 686, 687], "fast": [165, 429, 659, 682, 684, 687, 694], "searchabl": [165, 429], "pytabl": [165, 429, 674], "wors": [165, 429], "data_column": [165, 429], "disk": [165, 429, 656, 659, 688], "complevel": [165, 429], "disabl": [165, 429, 656, 692], "complib": [165, 429], "zlib": [165, 168, 429], "lzo": [165, 429], "bzip2": [165, 429], "blosc": [165, 429], "librari": [165, 429, 538, 543, 554, 628, 667, 681, 683, 686, 687, 691, 692, 694], "v0": [165, 429], "compressor": [165, 429], "blosclz": [165, 429], "lz4": [165, 429], "lz4hc": [165, 429], "snappi": [165, 168, 170, 429, 649, 692], "zstd": [165, 429, 692], "issu": [165, 429, 687, 690], "fletcher32": [165, 429], "checksum": [165, 429], "written": [165, 170, 429, 649, 690], "strict": [165, 429, 658, 663, 664, 665, 666, 667], "decod": [165, 429, 552, 658, 659], "read_hdf": [165, 429], "to_parquet": [165, 429, 661, 684, 688, 692], "parquet": [165, 170, 429, 660, 661, 674, 687, 691, 692], "to_feath": [165, 429, 657], "json": [166, 430, 493, 659, 674, 692], "unix": [166, 430, 667], "orient": [166, 430, 659], "just": [166, 430, 542, 659, 682, 686, 688, 690], "schema": [166, 430, 652, 659, 661], "compon": [166, 430, 492, 682], "date_format": [166, 430, 628], "epoch": [166, 430, 667], "iso": [166, 192, 430, 622], "convers": [166, 430, 433, 674, 682, 686], "iso8601": [166, 430], "double_precis": [166, 430], "force_ascii": [166, 430], "ascii": [166, 430, 474, 525, 546, 547, 551, 553], "date_unit": [166, 430, 659], "govern": [166, 430], "precis": [166, 430, 646, 659, 688, 694], "ns": [166, 170, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 196, 197, 200, 201, 430, 446, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 630, 634, 659, 667, 686, 688, 692, 693], "microsecond": [166, 430, 447, 451, 631, 634, 635, 659], "default_handl": [166, 430], "handler": [166, 430, 655, 656, 659, 660, 661, 662], "receiv": [166, 430, 668], "incorrect": [166, 430], "sinc": [166, 167, 170, 217, 283, 375, 430, 432, 682, 690, 693], "gzip": [166, 430, 656, 659], "bz2": [166, 430, 659], "xz": [166, 430, 659], "read_json": [166, 430], "fname": [168, 652], "orc": [168, 660, 674, 691, 692], "enable_statist": 168, "stripe_size_byt": 168, "stripe": [168, 170, 660], "67108864": 168, "64mb": 168, "stripe_size_row": 168, "row_index_strid": 168, "10000": [168, 283, 686], "read_orc": [168, 661, 684, 692], "struct": [168, 173, 682, 689, 691, 692, 694], "experiment": [168, 692], "reliabl": 168, "datatyp": [168, 668], "nullabl": [169, 433, 682, 688, 694], "root": [170, 649], "directori": [170, 649, 661, 684], "partition_offset": 170, "es": [170, 649], "engin": [170, 480, 481, 486, 491, 522, 655, 659, 660, 661, 683], "much": [170, 682, 684], "faster": [170, 465, 660, 667, 690], "partition_col": [170, 649], "partition_file_nam": 170, "uuid4": 170, "hex": [170, 494, 495, 508, 552, 553], "rowgroup": [170, 649], "page": [170, 649, 674, 683, 692, 694], "metadata_file_path": 170, "blob": [170, 650], "footer": [170, 650], "file_path": [170, 684], "int96_timestamp": 170, "int96": 170, "julian": 170, "midnight": 170, "row_group_size_byt": 170, "134217728": 170, "128mb": 170, "row_group_size_row": 170, "return_metadata": [170, 650], "read_parquet": [170, 652, 684, 688, 692], "intern": [172, 183, 204, 434, 446, 663, 664, 665, 666, 682, 692], "transpar": [172, 434], "dure": [172, 434, 538, 543, 668], "n0": [172, 434], "n1": [172, 434], "n2": [172, 434], "compos": [173, 682, 688, 690], "pivot": [176, 669], "innermost": [176, 660, 661, 669], "filter_func": 177, "There": [177, 195, 313, 625, 686, 692, 694], "coercibl": [177, 439], "notimplementederror": [177, 480, 528, 531, 537, 554, 682], "proport": 178, "frequent": [178, 441, 682], "occur": [178, 441, 480, 684], "ant": [178, 521, 539, 545], "varianc": [181, 444, 585, 603, 645], "666667": [181, 444], "tz": 183, "dayfirst": [183, 656, 667], "yearfirst": [183, 667], "immut": [183, 202, 252, 253, 270, 446, 455], "sliceabl": [183, 202, 252, 446, 455], "pytz": 183, "timezon": 183, "dateutil": [183, 667], "tzfile": 183, "pars": [183, 656, 659, 667, 668, 684, 686], "year": [183, 186, 188, 191, 192, 195, 241, 609, 611, 615, 620, 621, 622, 625, 667, 690], "1970": 183, "000000001": 183, "000000002": 183, "000000003": 183, "000000004": 183, "l": [184, 189, 196, 478, 488, 607, 613, 626], "u": [184, 189, 196, 478, 492, 607, 613, 626, 682], "me": [184, 189, 196, 489, 532, 607, 613, 626], "alias": [184, 189, 196, 607, 613, 626], "gindex": [184, 189, 192, 195], "2020": [184, 189, 192, 195, 625], "42": [184, 282, 689, 690], "1999": [184, 189, 192, 195, 625], "41": [184, 480], "datetime_index": [185, 186, 187, 188, 190, 193, 194, 197, 200, 201], "int16index": [185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 665], "int16": [185, 186, 187, 188, 190, 193, 194, 197, 200, 201, 314, 608, 609, 610, 611, 612, 614, 623, 624, 627, 629, 630, 668, 688, 692], "365": [186, 188, 191, 609, 611, 615], "leap": [186, 188, 191, 609, 611, 615], "366": [186, 188, 191, 609, 611, 615], "2016": [186, 187, 188, 200, 609, 610, 611, 629, 667], "2017": [186, 187, 188, 200, 609, 610, 611, 620, 621, 629, 667], "week": [187, 192, 200, 610, 622, 629], "mondai": [187, 200, 610, 629], "sundai": [187, 200, 610, 629], "59": [189, 283, 652, 656, 657, 660, 661, 690], "belong": [191, 195, 307, 615, 625], "29th": [191, 615], "februari": [191, 615], "intercalari": [191, 615], "four": [191, 615, 692], "400": [191, 206, 615, 686], "datafram": [192, 198, 204, 235, 243, 245, 246, 256, 257, 258, 259, 261, 262, 263, 266, 269, 270, 271, 275, 276, 277, 278, 279, 280, 281, 284, 285, 292, 293, 297, 298, 299, 300, 302, 308, 309, 310, 311, 313, 316, 317, 318, 322, 323, 324, 329, 330, 331, 333, 334, 337, 339, 345, 346, 350, 351, 352, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 373, 374, 382, 383, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 437, 441, 442, 443, 444, 445, 447, 453, 456, 486, 491, 528, 537, 538, 543, 556, 560, 568, 569, 571, 572, 573, 574, 577, 579, 580, 583, 585, 591, 592, 593, 594, 597, 598, 601, 602, 604, 605, 622, 631, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 669, 673, 674, 675, 680, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 694], "accord": [192, 357, 622, 682], "8601": [192, 622], "52": 192, "januari": [194, 195, 624, 625], "decemb": [194, 195, 624, 625], "march": [195, 625], "april": [195, 625], "june": [195, 625], "third": [195, 259, 625], "juli": [195, 625], "septemb": [195, 625], "fourth": [195, 625], "octob": [195, 625], "int8index": [195, 665], "int8": [195, 320, 625, 668, 688, 692], "dt_idx": 196, "58": [196, 607, 613, 626, 686, 690], "dame": [199, 248, 454], "2002": [201, 615, 630], "basic": [202, 204, 252, 282, 455, 560, 579, 604, 684, 689, 690], "pure": [202, 252, 455, 682], "__init__": [203, 253], "tupleize_col": 204, "best": [204, 265, 524, 637, 684, 685, 694], "fit": [204, 372, 375, 684], "design": [204, 257, 681, 683, 687], "factori": [204, 682], "re": [204, 283, 480, 481, 486, 491, 522, 531, 541, 684, 686, 690], "intim": 204, "familiar": [204, 682, 683], "uint64": [204, 455, 688, 692], "uint64index": 204, "has_dupl": 204, "from_arrow": [204, 694], "get_loc": [204, 685], "collect": [206, 357, 471, 684, 689, 694], "incompar": 211, "caught": 211, "catch": 211, "idx1": [211, 223, 249], "idx2": [211, 223, 249], "nulls_are_equ": 212, "obj": [215, 456, 663, 664, 665, 666], "pdi": 216, "primarili": 217, "stringindex": [217, 244, 320, 325, 349, 480, 528, 537, 684], "bound": [219, 254, 289, 468, 690], "leftmost": 219, "past": [219, 690], "rightmost": [219, 646], "ix": 219, "getitem": 219, "red": [223, 249, 257, 263], "blue": [223, 249, 257, 263], "is_integ": [224, 225, 226, 228, 232, 233], "is_float": [224, 225, 227, 228, 232, 233], "is_numer": [224, 225, 226, 227, 228, 233], "is_object": [224, 225, 226, 227, 228, 232], "is_categor": [224, 226, 227, 228, 232, 233], "is_interv": [224, 225, 226, 227, 232, 233], "categoricalindex": [225, 291, 646, 674], "is_boolean": [225, 226, 227, 228, 232, 233], "watermelon": [225, 227, 233], "orang": [225, 233], "appl": [225, 227, 232, 233, 668], "peter": 225, "victor": 225, "elisabeth": 225, "mar": 225, "mango": [227, 233], "intervalindex": [228, 646, 674], "monotonic_increas": 229, "is_monotonic_increas": [229, 340], "decreas": [230, 341, 372], "cold": 232, "sought": 234, "is_contain": 234, "return_index": [235, 243], "join_index": 235, "lexicograph": [235, 265, 685], "lh": 235, "rh": 235, "renamed_index": 238, "abl": [241, 686, 687], "partial": 241, "renam": [241, 465], "quarter": [241, 618, 619], "cobra": 241, "frozenlist": 241, "itself": [243, 528, 537, 682], "sorted_index": 243, "1000": [243, 283, 555, 682, 686, 690, 694], "allow_fil": 244, "green": [249, 262], "break": 254, "pad": [255, 525, 538, 543, 555, 571, 637, 674, 682], "backfil": [255, 571], "distanc": [255, 483, 484], "broken": 255, "prefer": [255, 660, 661, 667], "larger": [255, 500, 501, 637, 656, 660, 684, 692], "inexact": 255, "satisfi": 255, "equat": 255, "unique_index": 255, "abc": [255, 313, 357, 473, 477, 479, 484, 490, 496, 498, 499, 506, 508, 509, 517, 523, 534, 535, 542, 656, 688, 693], "monotonic_index": 255, "abbc": 255, "non_monotonic_index": 255, "abcb": 255, "numeric_unique_index": 255, "sortord": 257, "from_fram": [258, 259, 262, 263, 266], "cartesian": [261, 262, 263], "hi": [261, 684], "precip": 261, "nj": 261, "explicit": [261, 270, 690], "explicitli": [262, 283, 656, 684, 686, 693, 694], "color": [262, 263], "purpl": 262, "effort": [265, 685], "fail": [265, 692], "situat": [265, 580, 685, 694], "mi": 265, "non_monotonic_non_unique_idx": 265, "coerc": [265, 667, 668, 685, 686, 694], "unus": [270, 457, 465], "homogen": 270, "hashabl": 271, "been": [271, 682, 687, 692], "overridden": 271, "1d": [271, 327, 616, 618, 619, 638, 647, 682], "overrid": [271, 682], "extensiondtyp": [271, 694], "iteritem": 271, "to_list": 271, "tolist": 271, "to_append": 281, "s3": [281, 504, 649, 655, 656, 659, 660, 661, 662], "convert_dtyp": 282, "udf": [282, 283, 686, 691, 694], "cach": [282, 667], "recompil": 282, "incur": 282, "overhead": 282, "nest": [282, 466, 691], "decor": [282, 283], "someth": [282, 528, 684, 690], "upcast": 282, "deriv": [282, 357], "out_dtyp": 283, "global": 283, "featur": 283, "pydata": [283, 690, 691], "dev": [283, 686], "cudapysupport": 283, "cmath": 283, "libcudf": [283, 682], "complex": [283, 538, 682, 690], "ptx": 283, "sin": 283, "co": 283, "tan": 283, "lgamma": 283, "insid": [283, 532, 656, 689, 690], "known": [283, 667], "liter": [283, 480, 481, 531, 538, 543], "pattern": [283, 415, 480, 481, 485, 486, 491, 531, 538, 543, 544, 682], "lambda": [283, 357, 560, 579, 580, 597, 604, 685, 687, 689, 690], "105": 283, "95": [283, 493], "40100": 283, "10050": 283, "cube_funct": 283, "8000000": [283, 684], "custom_udf": 283, "205": [283, 686], "lag": 286, "autocorrel": 286, "1438853844": 286, "9647548490": 286, "csf1": 287, "inclus": [289, 488, 646], "wherev": [289, 682], "gt": [289, 684, 690, 693], "lt": [289, 684, 690, 693], "alic": [289, 690], "bob": [289, 690], "carol": 289, "ev": 289, "anna": 289, "daniel": 289, "accessor": [291, 314, 674, 687], "Be": 291, "parent": [291, 682, 684], "reorder_categori": 291, "remove_categori": 291, "set_categori": 291, "abcd": [291, 477, 542], "as_ord": [291, 459], "as_unord": 291, "ser1": [294, 296], "62": [294, 296], "ser2": [294, 296], "51": [294, 296], "20454263717316112": 294, "015750000000000004": 296, "0x": 301, "to_host_arrai": 301, "uint8": [301, 648, 668, 684, 692], "3rd": 306, "ind": [307, 424, 656], "beetl": [312, 344], "hippo": [312, 344], "discard": [312, 656], "kept": [313, 375], "datetimelik": [314, 674], "1h": 314, "hour": [314, 447, 631], "na_sentinel": 320, "chunkedarrai": 325, "singlecolumnfram": [325, 682], "pd_categor": 326, "set_mask": 327, "skip": [327, 655, 656, 660, 661, 668], "mark": 327, "bit": [327, 682], "_column": 327, "seriesgroupbi": [330, 673], "turn": [344, 682], "therefor": [344, 465, 555, 682], "width": [357, 476, 519, 527, 536, 554, 555, 646, 682], "rabbit": [357, 491], "kitten": [357, 483], "puppi": [357, 483], "countries_popul": [372, 375], "montserrat": [372, 375], "5200": [372, 375], "quant_index": 386, "renamed_seri": 391, "numeric_seri": 391, "come": 395, "bar": 395, "baz": [395, 531], "mimic": 415, "interfac": [415, 682, 686, 690], "stai": 415, "inspir": 415, "stringr": [415, 554], "packag": [415, 684, 686, 687, 693], "lib": [424, 684, 693], "stringarrai": 424, "0x7f796b0e7600": 424, "0x7f796b0e7750": 424, "rel": [441, 663, 664, 665, 666], "half": 441, "divid": 441, "500000": [441, 583, 585], "166667": 441, "1132223": 446, "2023232": 446, "342234324": 446, "4234324": 446, "001132223": 446, "002023232": 446, "004234324": 446, "clear": [456, 682], "df1": [456, 649, 664, 684, 693], "letter": [456, 515, 547, 553], "df3": 456, "horizont": 456, "df4": 456, "polli": 456, "georg": [456, 528, 537, 690], "new_categori": [457, 464, 465], "seriesorindex": [457, 458, 459, 463, 464, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "relationship": [462, 585, 682], "old": [463, 464, 465], "reorder": [464, 465], "action": 465, "simultan": 465, "specialis": 465, "hand": 465, "surpris": 465, "search_kei": 467, "extract": [468, 492, 533, 541, 557, 674], "indexerror": 468, "criterion": 470, "lists_indic": 471, "ef": [473, 477], "bye": [473, 684], "thank": [473, 478, 690], "sentenc": [474, 520, 538, 543, 546, 547, 550, 551], "swapcas": [474, 520, 547, 550, 551, 674], "friend": 474, "goodby": [474, 478, 548, 549], "stringcolumn": [475, 682], "again": [475, 690], "aa": [475, 530], "bb": [475, 530], "dd": 475, "fillchar": [476, 519, 527, 536], "whitespac": [476, 489, 502, 503, 504, 505, 507, 509, 511, 512, 513, 516, 519, 521, 525, 526, 527, 528, 532, 536, 537, 538, 539, 543, 545, 548, 549, 656], "as_list": 477, "gram": [477, 523, 524], "bigram": [477, 523], "ngram": [477, 524, 674], "str_seri": [477, 523, 637], "efgh": 477, "xyz": [477, 479, 523], "bc": [477, 484], "cd": 477, "fg": 477, "gh": 477, "xy": 477, "yz": 477, "bcd": 477, "efg": 477, "fgh": 477, "world": [478, 482, 492, 519, 525, 526, 534, 536, 548, 549], "k": [478, 517, 571, 685], "\u00e9ee": 479, "97": 479, "121": 479, "122": 479, "50089": 479, "101": [479, 637, 684], "98": 479, "99": [479, 493, 525], "pat": [480, 481, 485, 486, 491, 522, 531, 533, 538, 543, 544], "flag": [480, 481, 486, 491, 522, 531, 686], "regular": [480, 481, 485, 486, 491, 522, 531, 538, 543, 544, 555, 691], "multilin": [480, 481, 486, 491, 522], "anyth": [480, 528, 531, 537], "dotal": [480, 481, 486, 491, 522], "mous": 480, "hous": 480, "og": 480, "digit": [480, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 516, 553, 688], "might": [480, 686, 690], "35": [480, 631, 632, 633, 635, 652, 656, 657, 660, 661], "escap": 481, "aaba": [481, 684], "baca": [481, 684], "caba": [481, 684], "dollar": 481, "sign": [481, 555, 668, 688], "aab": 481, "ca": 481, "token": [482, 489, 523, 524, 525, 526, 532, 548, 636, 637, 674], "measur": [483, 484, 529, 585], "levenshtein": [483, 484], "edit": [483, 484], "www": 483, "cuelog": 483, "com": [483, 552, 553, 692], "blog": 483, "doggi": 483, "kitti": 483, "pup": 483, "dogi": 483, "listdtyp": [484, 682, 688], "tell": 484, "symmetr": 484, "diagon": [484, 686], "cba": 484, "nativ": 485, "bat": [485, 544], "bear": [485, 544], "captur": 486, "subject": 486, "c3": 486, "repl": [487, 488, 497, 531, 533, 542], "alphanumer": [487, 502, 503, 504, 505, 507, 509, 511, 512, 513, 516], "pear": 487, "plum": 487, "72": [487, 684], "100k": 487, "unicod": [488, 505, 512, 525, 550], "ordin": [488, 550], "maketran": [488, 550], "helper": [488, 550, 682, 686], "caus": 488, "undefin": [488, 637, 690], "aeiou": 488, "0123456789": [488, 497], "aei": 488, "ou": 488, "456": [488, 510, 652, 656, 657, 660, 661], "_": [488, 489, 497, 517, 519, 523, 524, 532, 536, 553, 648], "___ou": 488, "aei__": 488, "0123___789": 488, "min_token_length": 489, "theme": [489, 532], "music": [489, 532], "substr": [490, 496, 534, 535, 540, 541], "fulli": [490, 496, 534, 535, 684, 688, 690], "failur": [490, 534], "ddb": [490, 496, 535], "word": [491, 515, 520, 546, 551, 636, 637], "json_path": 493, "jsonpath": 493, "book": [493, 523, 524, 637], "author": 493, "nigel": 493, "ree": 493, "titl": [493, 515, 520, 546, 551, 674], "centuri": 493, "evelyn": 493, "waugh": 493, "sword": 493, "honour": 493, "1234": [494, 495], "abcdef": [494, 495], "1a2": [494, 495], "cafe": [494, 495], "htoi": [494, 674], "4660": [494, 495], "11259375": [494, 495], "418": [494, 495], "51966": [494, 495], "traceback": [496, 535], "recent": [496, 535], "stdin": [496, 535], "modul": [496, 535, 674, 684, 694], "abb": [496, 535], "abcdefghij": 497, "ab_cdefghij": 497, "01_23456789": 497, "abcdefghij_": 497, "0123456789_": 497, "ip": [498, 499], "168": [498, 499], "212336897": [498, 499], "167772161": [498, 499], "ip2int": [499, 674], "conson": [500, 501], "troubl": [500, 501, 682], "vowel": 501, "isalpha": [502, 504, 505, 507, 509, 511, 512, 513, 516, 674], "isdigit": [502, 503, 504, 507, 508, 509, 511, 512, 513, 516, 674], "isnumer": [502, 503, 504, 505, 507, 508, 509, 511, 513, 516, 674], "isdecim": [502, 503, 505, 507, 508, 509, 511, 512, 513, 516, 674], "alphabet": [502, 503, 504, 505, 507, 509, 511, 512, 513, 516], "isinteg": [502, 503, 504, 505, 507, 511, 512, 513, 516, 674], "isfloat": [502, 503, 504, 505, 508, 509, 511, 512, 513, 516, 674], "islow": [502, 503, 504, 505, 507, 509, 512, 513, 516, 674], "lowercas": [502, 503, 504, 505, 507, 509, 511, 512, 513, 515, 516, 520, 546, 547, 551, 636], "isspac": [502, 503, 504, 505, 507, 509, 511, 512, 516, 674], "isupp": [502, 503, 504, 505, 507, 509, 511, 512, 513, 674], "uppercas": [502, 503, 504, 505, 507, 509, 511, 512, 513, 515, 516, 520, 546, 547, 551], "one1": [502, 503, 512], "punctuat": [502, 525], "isalnum": [503, 504, 505, 507, 509, 511, 512, 513, 516, 674], "\u00b3": [504, 505, 512], "\u2155": [504, 505, 512], "superscript": 505, "subscript": 505, "123213": 507, "123": [507, 510, 521, 528, 537, 545, 631, 632, 633, 634, 635, 652, 656, 657, 660, 661], "0001": 507, "234": [507, 631, 632, 633, 634, 635, 688], "plain": 507, "text": [507, 509, 636, 637, 652, 655, 656, 657, 660, 661, 662, 674], "123def": 508, "0x2d3": 508, "plan": [509, 690], "ipv4": 510, "address": [510, 682], "127": 510, "255": 510, "leopard": [511, 515, 516], "golden": [511, 515, 516], "eagl": [511, 515, 516], "snake": [511, 515, 516], "quantiti": 512, "20201101": 514, "192011": 514, "18200111": 514, "2120": 514, "string_na_rep": 517, "sep_na_rep": 517, "themselv": 517, "interven": 517, "suppli": [517, 648, 690], "ghi": [517, 656, 688], "a_b_c": 517, "d_e_f": 517, "g_h_i": 517, "a_b_k": 517, "c_d": 517, "ai_": 519, "__": [519, 536], "capit": [520, 546, 547, 550, 551, 674], "to_strip": [521, 539, 545], "trail": [521, 539, 545], "strip": [521, 539, 674], "newlin": [521, 539, 545], "rstrip": [521, 545, 674], "ac": 522, "my": 523, "favorit": 523, "my_favorit": 523, "hhh": 523, "abc_def": 523, "def_xyz": 523, "xyz_hhh": 523, "white": 524, "this_i": 524, "is_th": 524, "best_book": 524, "do_low": [525, 636], "subword_token": 525, "around": [525, 528, 538, 543, 682, 690], "p": 525, "symbol": 525, "cjk": 525, "cc": [525, 530], "cf": 525, "do_lower_cas": [525, 636, 637], "accent": 525, "h\u00e9llo": 525, "tworld": 525, "\u0103\u0107c\u0117\u00f1ted": 525, "up": [527, 538, 543, 607, 613, 667, 684, 690, 694], "rjust": [527, 555, 674], "ljust": [527, 555, 674], "zfill": [527, 674], "prepend": [527, 555], "carib": 527, "tiger": 527, "rpartit": [528, 674], "linda": [528, 537], "van": [528, 537], "der": [528, 537], "berg": [528, 537], "pitt": [528, 537], "river": [528, 537], "999": [528, 537, 684, 686], "porter": 529, "stemmer": 529, "super": 529, "ccc": 530, "fuz": 531, "ba": 531, "bao": 531, "back": [533, 656, 660, 661, 682, 684, 692, 694], "ref": [533, 560, 579, 604], "templat": 533, "section": [533, 542, 684, 689, 690, 693, 694], "a543": 533, "z756": 533, "av453": 533, "zv576": 533, "rfind": [535, 674], "_________hello": 536, "___________rapid": 536, "version": [538, 543, 673, 684, 686, 693], "tutori": [538, 684], "throughout": [538, 543], "slightli": [538, 673], "url": [538, 552, 553, 649, 655, 656, 659, 660, 661, 662], "lstrip": [539, 545, 674], "slice_replac": [540, 674], "koala": 540, "fox": 540, "chameleon": 540, "oala": 540, "ox": 540, "hameleon": 540, "ko": 540, "fo": 540, "ch": 540, "kaa": 540, "fx": 540, "caeen": 540, "kl": 540, "cm": 540, "ello": 541, "abdc": 542, "until": [542, 684], "xc": 542, "xdc": 542, "xcde": 542, "axc": 542, "axd": 542, "rsplit": [543, 674], "endswith": [544, 674], "Is": 547, "unmap": 550, "untouch": 550, "swapc1s": 550, "low": [550, 690], "nt": 550, "nc": 550, "swapc1": 550, "No": [552, 553, 637, 646, 682, 691], "2fb": [552, 553], "2fd": [552, 553], "20f": [552, 553], "2c6": [552, 553], "3a": [552, 553], "2f": [552, 553], "2frapid": [552, 553], "2fstart": [552, 553], "2fmedium": [552, 553], "medium": [552, 553, 646], "paragraph": 554, "expand_tabsbool": 554, "replace_whitespac": 554, "drop_whitespac": 554, "break_long_word": 554, "break_on_hyphen": 554, "str_wrap": 554, "expand_tab": 554, "nwrap": 554, "nto": 554, "reach": [555, 682], "minu": 555, "move": [555, 686, 690], "longer": 555, "001": 555, "children": [557, 682], "agg": [560, 602, 604, 684, 687, 689], "f1": [560, 579, 604], "quantil": [560, 579, 604, 689], "__name__": [560, 579, 604], "q0": [560, 579, 604], "f2": [560, 579, 604], "score": 568, "90": [568, 684], "hole": 571, "gap": [571, 682], "introduc": 577, "indetermin": 577, "mult": 580, "redund": [580, 685], "pairwis": [583, 585], "kendal": 583, "val1": [583, 585], "val2": [583, 585], "val3": [583, 585], "385727": 583, "714575": 583, "bia": 585, "comparison": [585, 683, 691, 693], "understand": 585, "member": 585, "invert": 585, "matric": [585, 686], "en": 585, "wikipedia": 585, "wiki": 585, "estimation_of_covariance_matric": 585, "833333": 585, "round": [607, 613], "dt": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 677, 684, 687], "datetime_seri": [608, 609, 610, 611, 614, 623, 624, 627, 629, 630, 693], "2013": 615, "1y": 615, "2003": [615, 690], "2005": [615, 687], "2007": 615, "2008": 615, "2009": [615, 622], "2011": 615, "2012": [615, 667, 693], "2021": 622, "serindex": 622, "to_datetim": 622, "53": 622, "dt_sr": 626, "weekday_seri": 628, "12231312123": [631, 632, 633, 634, 635], "1231231231": [631, 632, 633, 634, 635], "1123236768712": [631, 632, 633, 634, 635], "2135656": [631, 632, 633, 634, 635], "3244334234": [631, 632, 633, 634, 635], "141": [631, 632, 633, 635], "231": [631, 632, 633, 634, 635], "13000": [631, 632, 633, 635], "48": [631, 632, 633, 635, 694], "712": [631, 632, 633, 634, 635], "656": [631, 632, 633, 634, 635], "37": [631, 632, 633, 635, 693], "123000": [633, 635], "231000": [633, 635], "712000": [633, 635], "656000": [633, 635], "234000": [633, 635], "231312123": 634, "231231231": 634, "236768712": 634, "002135656": 634, "244334234": 634, "48912": 635, "21631": 635, "36768": 635, "2135": 635, "47534": 635, "hash_fil": 636, "bert": [636, 637], "subword": [636, 637], "vocabulari": [636, 637], "pretrain": [636, 637], "21x": 636, "util": [636, 637, 674, 683, 684], "hash_vocab_util": [636, 637], "hash_vocab": [636, 637], "max_length": 637, "max_num_row": 637, "add_special_token": 637, "return_tensor": 637, "return_token_type_id": 637, "batch": 637, "alloc": [637, 682, 690], "temporari": 637, "twice": 637, "classif": 637, "model": [637, 682, 684], "do_not_trunc": 637, "huggingfac": 637, "pt": 637, "tf": 637, "tensorflow": 637, "pytorch": 637, "torch": 637, "input_id": 637, "fed": 637, "attention_mask": 637, "attend": 637, "vocab": 637, "txt": 637, "voc_hash": 637, "cudf_token": 637, "tokenizer_output": 637, "1142": 637, "1110": 637, "1103": 637, "102": [637, 684], "1436": 637, "1520": 637, "counterpart": 638, "applymap": [638, 691], "count_if_gt_3": 638, "retbin": 646, "include_lowest": 646, "segment": 646, "go": [646, 682, 683, 686, 690], "continu": [646, 686], "criteria": [646, 658], "extens": [646, 656], "done": [646, 684], "994": [646, 686], "bad": 646, "fortran": [647, 686], "prefix_sep": 648, "dummy_na": 648, "spars": [648, 691], "drop_first": 648, "hot": 648, "dummi": 648, "value1": 648, "value2": 648, "a_value1": 648, "a_value2": 648, "a_non": 648, "a_1": 648, "a_2": 648, "a_nan": 648, "a_nul": 648, "max_file_s": 649, "file_name_prefix": 649, "exceed": 649, "writer": [649, 676, 692], "gb": 649, "etc": [649, 673, 680, 688, 689], "mandatori": 649, "context": 649, "cw": 649, "write_t": 649, "manual": 649, "num_row": [652, 655, 660, 661], "num_row_group": 652, "row_group": [652, 661], "num1": [652, 656, 657, 660, 661], "13t12": [652, 656, 657, 660, 661], "5451": [652, 656, 657, 660, 661], "14t12": [652, 656, 657, 660, 661], "5784": [652, 656, 657, 660, 661], "789": [652, 656, 657, 660, 661], "15t18": [652, 656, 657, 660, 661], "6117": [652, 656, 657, 660, 661], "myvarnam": 653, "myvalnam": 653, "filepath_or_buff": [655, 656, 660, 661, 662], "skiprow": [655, 656, 660, 661], "load": [655, 656, 657, 659, 660, 661, 683, 684], "avro": [655, 674, 692], "pathlib": [655, 656, 658, 659, 660, 661, 662, 684], "py": [655, 656, 658, 659, 660, 661, 662, 684, 693], "_path": [655, 656, 658, 659, 660, 661, 662], "localpath": [655, 656, 658, 659, 660, 661, 662], "ftp": [655, 656, 659, 660, 661, 662], "bytesio": [655, 660, 661], "parser": [655, 659, 660, 661], "remot": [655, 656, 660, 661], "pandavro": 655, "pandas_df": 655, "to_avro": 655, "linetermin": 656, "quotechar": 656, "quot": 656, "doublequot": 656, "mangle_dupe_col": 656, "usecol": 656, "delim_whitespac": 656, "skipinitialspac": 656, "skipfoot": 656, "thousand": [656, 686], "true_valu": 656, "false_valu": 656, "byte_rang": [656, 659, 662], "skip_blank_lin": 656, "parse_d": 656, "comment": 656, "keep_default_na": 656, "na_filt": 656, "index_col": 656, "use_python_file_object": [656, 660, 661], "comma": 656, "seper": 656, "quote_minim": 656, "quote_al": 656, "quote_non": 656, "decompress": [656, 659, 692], "detect": [656, 659, 691], "gz": [656, 659], "recogn": 656, "unusu": 656, "altogeth": [656, 682], "qnan": 656, "arrow": [656, 660, 661, 682, 683, 691], "pythonfil": [656, 660, 661], "fsspec": [656, 660, 661], "abstractbufferedfil": [656, 660, 661], "to_csv": [656, 684, 692], "fp": 656, "__fspath__": 658, "protocol": 658, "term": [658, 659, 690, 694], "to_hdf": 658, "auto": 659, "to_json": 659, "typ": 659, "recov": 659, "convert_ax": 659, "proper": 659, "convert_d": 659, "datelik": 659, "_at": 659, "_time": 659, "keep_default_d": 659, "precise_float": 659, "strtod": 659, "doubl": 659, "py3": 659, "jsonread": 659, "use_index": 660, "timestamp_typ": 660, "predic": [660, 661], "disjunct": [660, 661], "dnf": [660, 661], "conjunct": [660, 661, 690], "AND": [660, 661], "outermost": 660, "OR": [660, 661], "notat": [660, 661], "seek": 660, "to_orc": [660, 692], "strings_to_categor": 661, "use_pandas_metadata": 661, "categorical_partit": 661, "open_file_opt": 661, "gdf_categori": 661, "gdf_string": 661, "discourag": 661, "open_parquet_fil": 661, "deactiv": 661, "precach": 661, "precache_opt": 661, "open_file_func": 661, "read_parquet_metadata": 661, "datasourc": 662, "check_dtyp": [663, 664, 666], "check_column_typ": [663, 664], "equiv": [663, 664, 665, 666], "check_less_precis": [663, 665, 666], "check_exact": [663, 664, 665, 666], "check_datetimelike_compat": [663, 664, 666], "check_categor": [663, 664, 665, 666], "check_category_ord": [663, 666], "rtol": [663, 664, 665, 666], "1e": [663, 664, 665, 666], "atol": [663, 664, 665, 666], "columnbas": [663, 664, 665, 666, 682], "intend": [663, 664, 665, 666, 682, 690], "inferred_typ": [663, 664, 665, 666], "idl": [663, 664, 666], "check_datetime_like_compat": [663, 664, 666], "appropri": [663, 664, 665, 666, 682], "assert": [663, 664, 665, 666], "messag": [663, 664, 665, 666], "check_index_typ": [664, 666], "check_frame_typ": 664, "check_nam": [664, 665, 666], "by_block": 664, "check_lik": 664, "assertionerror": [664, 665, 666], "hitch": [664, 665, 666], "check_ord": 665, "int32index": 665, "id1": 665, "id2": 665, "check_series_typ": 666, "sr1": 666, "sr2": 666, "utc": 667, "infer_datetime_format": 667, "eg": 667, "bug": 667, "strftime": 667, "denot": 667, "off": [667, 684, 692], "10x": 667, "succeed": 667, "assembl": 667, "abbrevi": 667, "plural": 667, "2015": 667, "1490195805": 667, "22t15": 667, "000000000": 667, "1490195805433502912": 667, "1780": 667, "20t01": 667, "494253056": 667, "polici": 668, "notifi": 668, "encount": 668, "unsign": [668, 688], "down": 668, "decoupl": 668, "3e3": 668, "3000": 668, "cudf": [673, 674, 680, 682, 685, 688, 689, 691, 692], "usual": 673, "permit": 673, "restrict": 673, "publicli": 674, "namespac": [674, 677], "manipul": [674, 683, 684], "merg": [674, 682, 684, 687, 694], "timedeltaindex": 674, "deal": 674, "roll": [674, 682, 687, 691], "subwordtoken": [674, 683], "stringmethod": 674, "byte_count": 674, "character_ngram": 674, "character_token": 674, "code_point": 674, "detoken": 674, "edit_dist": 674, "edit_distance_matrix": 674, "filter_alphanum": 674, "filter_charact": 674, "filter_token": 674, "findal": 674, "get_json_object": 674, "hex_to_int": 674, "ip_to_int": 674, "is_conson": 674, "is_vowel": 674, "isempti": 674, "ishex": 674, "isipv4": 674, "istimestamp": 674, "istitl": 674, "ngrams_token": 674, "normalize_charact": 674, "normalize_spac": 674, "porter_stemmer_measur": 674, "replace_token": 674, "replace_with_backref": 674, "rindex": 674, "slice_from": 674, "startswith": 674, "token_count": 674, "translat": [674, 682], "url_decod": 674, "url_encod": 674, "wrap": [674, 684, 690], "variant": 675, "thereof": 675, "reader": [676, 684, 692], "acceler": [676, 682, 683, 684, 690, 692], "cpu": [676, 684, 687, 692, 694], "futur": [676, 684, 690, 693], "variou": [677, 682], "layer": 681, "cython": 681, "hood": [682, 684], "robustli": 682, "develop": [682, 683, 686, 690, 691], "At": [682, 690], "high": 682, "serv": 682, "face": 682, "bridg": 682, "review": 682, "role": 682, "requisit": 682, "tradeoff": 682, "tie": 682, "piec": 682, "holist": 682, "project": [682, 687], "diagram": 682, "princip": 682, "inherit": 682, "eponym": 682, "tabular": [682, 684, 690], "columnar": [682, 683, 684], "meanwhil": 682, "essenti": [682, 690], "abstract": 682, "materi": 682, "preliminari": 682, "let": [682, 686, 690], "dive": 682, "littl": 682, "deeper": 682, "expos": [682, 686, 690, 692], "addition": [682, 687], "mention": [682, 687, 690], "surmis": 682, "diamond": 682, "simpler": [682, 690], "flatten": 682, "ve": [682, 684, 690], "highlight": [682, 690], "simpli": [682, 686], "practic": [682, 684], "concret": [682, 690], "eventu": 682, "almost": 682, "hierarchi": 682, "rewrit": 682, "main": [682, 690], "alon": 682, "infeas": 682, "reimplement": 682, "behav": 682, "instanti": 682, "unfortun": 682, "mimick": 682, "__new__": 682, "tree": 682, "cumbersom": 682, "manag": [682, 690], "masquerad": 682, "stack": 682, "glue": 682, "layout": 682, "own": [682, 692], "semant": 682, "wildcard": [682, 684], "apach": [682, 683, 684], "conduc": 682, "interchang": 682, "concept": [682, 684], "extent": 682, "facilit": 682, "interoper": [682, 683, 691], "simplifi": 682, "debug": 682, "sens": 682, "numericalcolumn": 682, "datetimecolumn": 682, "decis": 682, "4000": 682, "sizeof": 682, "128": 682, "chees": 682, "preexist": 682, "knowledg": [682, 690], "structdtyp": [682, 688], "analog": 682, "decimaldtyp": 682, "intervaldtyp": 682, "contigu": [682, 686], "rmm": 682, "devicebuff": 682, "interact": [682, 684, 690], "bind": 682, "pxd": 682, "declar": 682, "explanatori": 682, "column_view": 682, "table_view": 682, "question": [682, 690], "trivial": 682, "discuss": [682, 684, 693], "descent": 682, "approach": [682, 690], "whole": 682, "fact": [682, 693], "act": 682, "reduct": [682, 687], "scan": 682, "bypass": 682, "straight": 682, "resampl": 682, "composit": 682, "reason": [682, 692], "scientist": 683, "easili": 683, "workflow": [683, 684, 691], "program": 683, "dask": [683, 691], "overview": [683, 691], "short": 684, "introduct": 684, "gear": 684, "mainli": 684, "scale": [684, 687, 688], "smooth": [684, 691], "dask_cudf": [684, 687], "cluster": [684, 687], "enough": [684, 687, 690], "comfort": [684, 690], "want": [684, 686, 690, 693], "spread": [684, 687], "os": 684, "portion": [684, 690], "borrow": 684, "adapt": [684, 690], "cheatsheet": 684, "ds": 684, "from_cudf": 684, "npartit": [684, 687], "ddf": 684, "dask_gdf": 684, "yield": [684, 694], "met": 684, "cudf_compar": 684, "dask_cudf_compar": 684, "isin": 684, "gdf1": 684, "rand": [684, 693], "082654": 684, "967955": 684, "399417": 684, "441425": 684, "784297": 684, "793582": 684, "070303": 684, "271711": 684, "gdf2": 684, "opt": [684, 693], "conda": [684, 693], "env": [684, 693], "python3": [684, 693], "site": [684, 693], "798": [684, 686], "futurewarn": [684, 693], "343382": 684, "003700": 684, "20043": 684, "581614": 684, "907812": 684, "101512": 684, "24179": 684, "224180": 684, "var": [684, 689], "666666666666666": 684, "6666666666666667": 684, "map_partit": [684, 687], "add_ten": 684, "progress": 684, "ds2": 684, "restor": 684, "post": [684, 689], "ddf_a": 684, "ddf_b": 684, "paradigm": 684, "agg_col1": 684, "agg_col2": 684, "54": 684, "73": 684, "date_df": 684, "986051": 684, "232034": 684, "397617": 684, "103839": 684, "date_ddf": 684, "grade": 684, "dgdf": 684, "to_numpi": 684, "to_arrow": [684, 694], "example_output": 684, "mkdir": 684, "foo_dask": 684, "star": 684, "temp_parquet": 684, "example_fil": 684, "cudf_root": 684, "orc_fil": 684, "testorcfil": 684, "test1": 684, "boolean1": 684, "byte1": 684, "short1": 684, "int1": 684, "long1": 684, "float1": 684, "double1": 684, "bytes1": 684, "string1": 684, "middl": 684, "1024": 684, "65536": 684, "2048": 684, "100000000": 684, "chani": 684, "spark": 684, "lazi": 684, "moment": 684, "graph": 684, "delai": 684, "sometim": [684, 686, 690], "activ": 684, "background": [684, 690], "system": 684, "finish": 684, "downstream": [684, 686], "enforc": 684, "contract": 684, "upstream": 684, "snippet": 684, "localcudaclust": 684, "worker": 684, "machin": [684, 687], "beyond": 684, "scope": [684, 690], "client": 684, "dask_cuda": 684, "2022": 684, "571": 684, "preload": 684, "info": 684, "10000000": 684, "ddf2": 684, "2000000": 684, "9999999": 684, "nvidia": 684, "smi": 684, "wed": 684, "jul": 684, "495": 684, "bu": 684, "disp": 684, "volatil": 684, "uncorr": 684, "ecc": 684, "fan": 684, "perf": 684, "pwr": 684, "cap": 684, "mig": 684, "tesla": 684, "v100": 684, "pcie": 684, "00000000": 684, "85": 684, "27c": 684, "p0": 684, "33w": 684, "250w": 684, "1541mib": 684, "32510mib": 684, "gi": 684, "ci": 684, "pid": 684, "twenti": 684, "800": [684, 686], "baselin": 684, "sleep": 684, "2121mib": 684, "setup": 684, "proceed": 684, "ll": [684, 686, 690], "ddf1": 684, "randint": [684, 694], "spent": 684, "results_ddf": 684, "sooner": 684, "had": 684, "complet": [684, 692], "doneandnotdonefutur": 684, "dbedb741a3ae53acbdc2040133f53fc0": 684, "not_don": 684, "proce": [684, 686], "notebook": 686, "introductori": 686, "advantag": 686, "advanc": [686, 687, 690], "algebra": 686, "timeit": 686, "__version__": 686, "cupy_from_dlpack": 686, "from_dlpack": 686, "fromdlpack": 686, "as_gpu_matrix": 686, "500": 686, "arr_cupi": 686, "to_dlpack": 686, "to_cupi": 686, "187": 686, "\u00b5s": 686, "341": 686, "558": 686, "756": 686, "560": 686, "501": 686, "1001": 686, "502": 686, "1002": 686, "9997": 686, "10497": 686, "10997": 686, "9998": 686, "10498": 686, "10998": 686, "9999": 686, "10499": 686, "10999": 686, "__cuda_array_interface__": [686, 690], "leverag": [686, 690, 694], "cola_cupi": 686, "87": 686, "156": 686, "204": 686, "415": 686, "188": 686, "616": 686, "norm": 686, "reshaped_arr": 686, "197": 686, "198": 686, "199": 686, "201": 686, "202": 686, "397": 686, "398": 686, "399": 686, "401": 686, "402": 686, "597": 686, "598": 686, "599": 686, "9400": 686, "9401": 686, "9402": 686, "9597": 686, "9598": 686, "9599": 686, "9600": 686, "9601": 686, "9602": 686, "9797": 686, "9798": 686, "9799": 686, "9800": 686, "9801": 686, "9802": 686, "603": 686, "804": 686, "1005": [686, 690], "1206": 686, "1407": 686, "1608": 686, "1809": 686, "2211": 686, "2412": 686, "2613": 686, "2814": 686, "3015": 686, "3216": 686, "3417": 686, "3618": 686, "3819": 686, "4020": 686, "4221": 686, "4422": 686, "4623": 686, "4824": 686, "5025": 686, "5226": 686, "5427": 686, "5628": 686, "5829": 686, "6030": 686, "6231": 686, "6432": 686, "6633": 686, "6834": 686, "7035": 686, "7236": 686, "7437": 686, "7638": 686, "7839": 686, "8040": 686, "8241": 686, "8442": 686, "8643": 686, "8844": 686, "9045": 686, "9246": 686, "9447": 686, "9648": 686, "9849": 686, "linalg": 686, "577306": 686, "967739": 686, "easiest": [686, 690], "sure": [686, 690], "beforehand": 686, "reshaped_df": 686, "190": 686, "191": 686, "192": 686, "193": 686, "194": 686, "195": 686, "196": 686, "203": 686, "206": 686, "207": 686, "208": 686, "209": 686, "391": 686, "392": 686, "393": 686, "394": 686, "395": 686, "396": 686, "403": 686, "405": 686, "406": 686, "407": 686, "408": 686, "409": 686, "590": 686, "591": 686, "592": 686, "593": 686, "594": 686, "595": 686, "596": 686, "600": 686, "601": 686, "602": 686, "604": 686, "605": 686, "606": 686, "607": 686, "608": 686, "609": 686, "790": 686, "791": 686, "792": 686, "793": 686, "794": 686, "795": 686, "796": 686, "797": 686, "799": 686, "801": 686, "802": 686, "803": 686, "805": 686, "806": 686, "807": 686, "808": 686, "809": 686, "990": 686, "991": 686, "992": 686, "993": 686, "995": 686, "996": 686, "997": [686, 690], "998": 686, "isfortran": 686, "fortran_arr": 686, "asfortranarrai": 686, "47": 686, "todlpack": 686, "ecosystem": [686, 690], "isn": 686, "matur": 686, "hundr": 686, "wouldn": 686, "veri": [686, 689, 690], "easi": [686, 687], "previous": 686, "new_arr": 686, "19900": 686, "59900": 686, "99900": 686, "139900": 686, "179900": 686, "219900": 686, "259900": 686, "299900": 686, "339900": 686, "379900": 686, "419900": 686, "459900": 686, "499900": 686, "539900": 686, "579900": 686, "619900": 686, "659900": 686, "699900": 686, "739900": 686, "779900": 686, "819900": 686, "859900": 686, "899900": 686, "939900": 686, "979900": 686, "1019900": 686, "1059900": 686, "1099900": 686, "1139900": 686, "1179900": 686, "1219900": 686, "1259900": 686, "1299900": 686, "1339900": 686, "1379900": 686, "1419900": 686, "1459900": 686, "1499900": 686, "1539900": 686, "1579900": 686, "1619900": 686, "1659900": 686, "1699900": 686, "1739900": 686, "1779900": 686, "1819900": 686, "1859900": 686, "1899900": 686, "1939900": 686, "1979900": 686, "seamlessli": 686, "enorm": 686, "sacrif": 686, "cleanli": 686, "cudf_to_cupy_sparse_matrix": 686, "sparseformat": 686, "focu": 686, "_sparse_constructor": 686, "csc_matrix": 686, "csr_matrix": 686, "illustr": 686, "nonzero": 686, "arr": [686, 690], "a0": 686, "a4": 686, "a5": 686, "a6": 686, "a7": 686, "a8": 686, "a9": 686, "a10": 686, "a11": 686, "a12": 686, "a13": 686, "a14": 686, "a15": 686, "a16": 686, "a17": 686, "a18": 686, "a19": 686, "418515": 686, "371245": 686, "388595": 686, "122418": 686, "441652": 686, "860304": 686, "080479": 686, "748689": 686, "379437": 686, "965942": 686, "sparse_data": 686, "4185153735535483": 686, "897": 686, "990853596935146": 686, "642": 686, "577003689049771": 686, "1026": [686, 690], "997064766207588": 686, "1538": 686, "372272067771766": 686, "1412": 686, "14228084664998": 686, "262": 686, "8584736060407061": 686, "1286": 686, "8137476843599406": 686, "647": 686, "7918146235618517": 686, "648": 686, "15150700744889": 686, "55788399239529": 686, "651": 686, "135389254161393": 686, "779": 686, "08545086099681187": 686, "781": 686, "7143866234031844": 686, "3134153284668155": 686, "270": 686, "621494601453489": 686, "1294": 686, "711465676945666": 686, "41471485492286797": 686, "271": 686, "825319658293674": 686, "528": 686, "6325782019252477": 686, "1170": 686, "13410169736998379": 686, "787": 686, "400359323034286": 686, "915": 686, "862473558764831": 686, "916": 686, "5158681755649919": 686, "661": 686, "733680503737014": 686, "9575": 686, "212319609863418": 686, "9449": 686, "694766205069658": 686, "8683": 686, "358779947711972": 686, "9451": 686, "045045150816719": 686, "9964": 686, "159896713835809": 686, "9198": 686, "6339769768030654": 686, "9326": 686, "313739449042319": 686, "9967": 686, "2609499548709": 686, "8816": 686, "5599628213034844": 686, "9200": 686, "024855403963691": 686, "8946": 686, "156462368666903": 686, "9586": 686, "479614301931789": 686, "9842": 686, "4769744981119006": 686, "9077": 686, "18508150467324": 686, "9334": 686, "004238226945453": 686, "8695": 686, "208407869424944": 686, "9080": 686, "41281952268586386": 686, "9081": 686, "536380557457765": 686, "8954": 686, "6567131484431687": 686, "9978": 686, "2299465377900145": 686, "8699": 686, "53886230229338": 686, "9213": 686, "161629764344444": 686, "9725": 686, "132755906241034": 686, "9342": 686, "337502076405018": 686, "9215": 686, "210545545671466": 686, "encourag": [686, 687], "orchestr": 687, "cohes": 687, "ingest": 687, "decent": 687, "dayofweek": 687, "expens": 687, "cudf_df": 687, "persist": 687, "visual": 687, "difficult": [687, 690], "comprehens": 687, "track": 687, "thing": [687, 690], "certainli": 687, "slight": 687, "inconsist": 687, "tracker": 687, "report": [687, 694], "reus": 687, "newer": 687, "mislead": [687, 688], "frustrat": 687, "advertis": 687, "apolog": 687, "uint32": [688, 692], "durat": 688, "decimal32dtyp": 688, "decimal64dtyp": 688, "decimal128dtyp": 688, "023": 688, "max_precis": 688, "decimal128": [688, 692], "psr": 688, "gsr": 688, "pq": 688, "exclus": 689, "nuisanc": 689, "gb1": 689, "gb2": 689, "gb3": 689, "extern": 689, "penalti": 689, "disambigu": 689, "ok": 689, "corr": 689, "866025": 689, "idxmin": 689, "idxmax": 689, "nuniqu": 689, "nth": 689, "cov": 689, "randomdata": 690, "box": 690, "broader": 690, "varieti": 690, "cover": 690, "devicendarrai": 690, "demonstr": 690, "syntax": 690, "offer": 690, "const": 690, "unari": [690, 694], "redefin": 690, "capabl": 690, "singleton": 690, "f_null_sensit": 690, "grid": 690, "in_col": 690, "out_col": 690, "guard": 690, "runtim": 690, "pre": 690, "cuda_array_interfac": 690, "963": 690, "9630": 690, "977": 690, "980": 690, "9770": 690, "1048": 690, "1019": 690, "10480": 690, "1078": 690, "960": 690, "985": 690, "10780": 690, "979": 690, "982": 690, "1011": 690, "9790": 690, "theoret": 690, "potenti": 690, "experi": 690, "spot": 690, "problem": 690, "area": 690, "pipelin": 690, "job": 690, "thin": 690, "entrypoint": 690, "onto": 690, "fulfil": 690, "ultim": 690, "happen": [690, 693], "428571429": 690, "did": 690, "fairli": 690, "streamlin": 690, "walk": 690, "conditional_add": 690, "heart": 690, "readi": 690, "successfulli": 690, "pessimist": 690, "explor": 690, "gpu_add": 690, "matter": 690, "1968": 690, "1961": 690, "propog": 690, "slide": 690, "answer": 690, "stock": 690, "mathemat": 690, "example_func": 690, "65": 690, "56": 690, "549834435": 690, "615773106": 690, "681145748": 690, "745966692": 690, "810249676": 690, "874007874": 690, "937253933": 690, "apply_group": 690, "drawn": 690, "691674": 690, "dan": 690, "958380": 690, "480099": 690, "729580": 690, "473370": 690, "xavier": 690, "767454": 690, "067479": 690, "380205": 690, "970850": 690, "sarah": 690, "342905": 690, "rolling_avg_": 690, "rolling_avg": 690, "win_siz": 690, "801430": 690, "632337": 690, "081887": 690, "933157": 690, "quinn": 690, "420826": 690, "184805": 690, "702013": 690, "837494": 690, "wendi": 690, "057540": 690, "401733": 690, "913899": 690, "ursula": 690, "466252": 690, "009502": 690, "725581": 690, "405245": 690, "271319": 690, "multiply_by_5": 690, "empty_lik": 690, "nondecim": 690, "releas": 690, "github": [690, 692], "properli": 690, "lot": 690, "hopefulli": 690, "feel": 690, "histogram": 691, "tip": 691, "magnum": 691, "gpudirect": 691, "integr": 691, "nvcomp": 691, "caveat": 691, "interweav": 691, "navig": 691, "writer\u00b9": 692, "reader\u00b9": 692, "uint16": 692, "decimal32": 692, "decimal64": 692, "\u00b9": 692, "gd": 692, "dma": 692, "transfer": 692, "bounc": 692, "sdk": 692, "download": 692, "toolkit": 692, "environ": 692, "libcudf_cufile_polici": 692, "kvikio": 692, "rapidsai": 692, "read_avro": 692, "libcudf_cufile_thread_count": 692, "libcudf_cufile_slice_s": 692, "4mb": 692, "libcudf_nvcomp_polici": 692, "deem": 692, "whenev": 692, "deflat": 692, "referenc": 693, "mind": 693, "20120101": 693, "natur": 693, "cumprod": 693, "prod": 693, "wish": 693, "dff": 693, "randn": 693, "224864": 693, "292148": 693, "315469": 693, "050641": 693, "663300": 693, "147616": 693, "908826": 693, "352884": 693, "136348": 693, "588652": 693, "171729": 693, "905424": 693, "181145": 693, "100463": 693, "438795": 693, "091922": 693, "939318": 693, "458675": 693, "758305": 693, "114220": 693, "934707": 693, "831885": 693, "133196": 693, "062502": 693, "286723": 693, "182124": 693, "1183": 693, "silenc": 693, "dot": 693, "519683968": 693, "058392338": 693, "394571136": 693, "725722655": 693, "353103044": 693, "854939849": 693, "054427235": 693, "714516138": 693, "df00": 693, "058392": 693, "394571": 693, "725723": 693, "353103": 693, "854940": 693, "054427": 693, "714516": 693, "behaviour": 694, "commonli": 694, "resid": 694, "extrem": 694, "poor": 694, "vast": 694, "accomplish": 694, "742": 694, "694": 694, "840": 694, "459": 694, "525": 694, "442": 694, "363": 694, "666": 694, "643": 694, "631": 694, "906": 694, "640": 694, "impact": 694, "compatibilti": 694, "impos": 694}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [183, 0, 1, "", "DatetimeIndex"], [202, 0, 1, "", "Float64Index"], [203, 0, 1, "", "Grouper"], [204, 0, 1, "", "Index"], [252, 0, 1, "", "Int64Index"], [253, 0, 1, "", "IntervalIndex"], [257, 0, 1, "", "MultiIndex"], [270, 0, 1, "", "RangeIndex"], [271, 0, 1, "", "Series"], [446, 0, 1, "", "TimedeltaIndex"], [455, 0, 1, "", "UInt64Index"], [456, 3, 1, "", "concat"], [646, 3, 1, "", "cut"], [647, 3, 1, "", "from_dlpack"], [648, 3, 1, "", "get_dummies"], [653, 3, 1, "", "melt"], [654, 3, 1, "", "pivot"], [655, 3, 1, "", "read_avro"], [656, 3, 1, "", "read_csv"], [657, 3, 1, "", "read_feather"], [658, 3, 1, "", "read_hdf"], [659, 3, 1, "", "read_json"], [660, 3, 1, "", "read_orc"], [661, 3, 1, "", "read_parquet"], [662, 3, 1, "", "read_text"], [667, 3, 1, "", "to_datetime"], [668, 3, 1, "", "to_numeric"], [669, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pop"], [114, 2, 1, "", "pow"], [115, 2, 1, "", "prod"], [116, 2, 1, "", "product"], [117, 2, 1, "", "quantile"], [118, 2, 1, "", "quantiles"], [119, 2, 1, "", "query"], [120, 2, 1, "", "radd"], [121, 2, 1, "", "rank"], [122, 2, 1, "", "rdiv"], [123, 2, 1, "", "reindex"], [124, 2, 1, "", "rename"], [125, 2, 1, "", "repeat"], [126, 2, 1, "", "replace"], [127, 2, 1, "", "resample"], [128, 2, 1, "", "reset_index"], [129, 2, 1, "", "rfloordiv"], [130, 2, 1, "", "rmod"], [131, 2, 1, "", "rmul"], [132, 2, 1, "", "rolling"], [133, 2, 1, "", "round"], [134, 2, 1, "", "rpow"], [135, 2, 1, "", "rsub"], [136, 2, 1, "", "rtruediv"], [137, 2, 1, "", "sample"], [138, 2, 1, "", "scale"], [139, 2, 1, "", "scatter_by_map"], [140, 2, 1, "", "searchsorted"], [141, 2, 1, "", "select_dtypes"], [142, 2, 1, "", "serialize"], [143, 2, 1, "", "set_index"], [144, 1, 1, "", "shape"], [145, 2, 1, "", "shift"], [146, 1, 1, "", "size"], [147, 2, 1, "", "skew"], [148, 2, 1, "", "sort_index"], [149, 2, 1, "", "sort_values"], [150, 2, 1, "", "stack"], [151, 2, 1, "", "std"], [152, 2, 1, "", "sub"], [153, 2, 1, "", "subtract"], [154, 2, 1, "", "sum"], [155, 2, 1, "", "sum_of_squares"], [156, 2, 1, "", "tail"], [157, 2, 1, "", "take"], [158, 2, 1, "", "tile"], [159, 2, 1, "", "to_arrow"], [160, 2, 1, "", "to_csv"], [161, 2, 1, "", "to_cupy"], [162, 2, 1, "", "to_dict"], [163, 2, 1, "", "to_dlpack"], [164, 2, 1, "", "to_feather"], [165, 2, 1, "", "to_hdf"], [166, 2, 1, "", "to_json"], [167, 2, 1, "", "to_numpy"], [168, 2, 1, "", "to_orc"], [169, 2, 1, "", "to_pandas"], [170, 2, 1, "", "to_parquet"], [171, 2, 1, "", "to_records"], [172, 2, 1, "", "to_string"], [173, 2, 1, "", "to_struct"], [174, 2, 1, "", "transpose"], [175, 2, 1, "", "truediv"], [176, 2, 1, "", "unstack"], [177, 2, 1, "", "update"], [178, 2, 1, "", "value_counts"], [179, 1, 1, "", "values"], [180, 1, 1, "", "values_host"], [181, 2, 1, "", "var"], [182, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[184, 2, 1, "", "ceil"], [185, 1, 1, "", "day"], [186, 1, 1, "", "day_of_year"], [187, 1, 1, "", "dayofweek"], [188, 1, 1, "", "dayofyear"], [189, 2, 1, "", "floor"], [190, 1, 1, "", "hour"], [191, 1, 1, "", "is_leap_year"], [192, 2, 1, "", "isocalendar"], [193, 1, 1, "", "minute"], [194, 1, 1, "", "month"], [195, 1, 1, "", "quarter"], [196, 2, 1, "", "round"], [197, 1, 1, "", "second"], [198, 2, 1, "", "to_frame"], [199, 2, 1, "", "to_series"], [200, 1, 1, "", "weekday"], [201, 1, 1, "", "year"]], "cudf.Grouper": [[203, 2, 1, "", "__init__"]], "cudf.Index": [[205, 2, 1, "", "any"], [206, 2, 1, "", "append"], [207, 2, 1, "", "copy"], [208, 2, 1, "", "deserialize"], [209, 2, 1, "", "device_deserialize"], [210, 2, 1, "", "device_serialize"], [211, 2, 1, "", "difference"], [212, 2, 1, "", "drop_duplicates"], [213, 2, 1, "", "dropna"], [214, 2, 1, "", "fillna"], [215, 2, 1, "", "from_arrow"], [216, 2, 1, "", "from_pandas"], [217, 2, 1, "", "get_level_values"], [218, 2, 1, "", "get_loc"], [219, 2, 1, "", "get_slice_bound"], [220, 1, 1, "", "has_duplicates"], [221, 2, 1, "", "host_deserialize"], [222, 2, 1, "", "host_serialize"], [223, 2, 1, "", "intersection"], [224, 2, 1, "", "is_boolean"], [225, 2, 1, "", "is_categorical"], [226, 2, 1, "", "is_floating"], [227, 2, 1, "", "is_integer"], [228, 2, 1, "", "is_interval"], [229, 1, 1, "", "is_monotonic"], [230, 1, 1, "", "is_monotonic_decreasing"], [231, 1, 1, "", "is_monotonic_increasing"], [232, 2, 1, "", "is_numeric"], [233, 2, 1, "", "is_object"], [234, 2, 1, "", "isin"], [235, 2, 1, "", "join"], [236, 1, 1, "", "names"], [237, 1, 1, "", "nlevels"], [238, 2, 1, "", "rename"], [239, 2, 1, "", "repeat"], [240, 2, 1, "", "serialize"], [241, 2, 1, "", "set_names"], [242, 1, 1, "", "size"], [243, 2, 1, "", "sort_values"], [244, 2, 1, "", "take"], [245, 2, 1, "", "to_dlpack"], [246, 2, 1, "", "to_frame"], [247, 2, 1, "", "to_pandas"], [248, 2, 1, "", "to_series"], [249, 2, 1, "", "union"], [250, 2, 1, "", "unique"], [251, 1, 1, "", "values"]], "cudf.IntervalIndex": [[253, 2, 1, "", "__init__"], [254, 2, 1, "", "from_breaks"], [255, 2, 1, "", "get_loc"], [256, 1, 1, "", "values"]], "cudf.MultiIndex": [[258, 1, 1, "", "codes"], [259, 2, 1, "", "droplevel"], [260, 2, 1, "", "from_arrow"], [261, 2, 1, "", "from_frame"], [262, 2, 1, "", "from_product"], [263, 2, 1, "", "from_tuples"], [264, 2, 1, "", "get_level_values"], [265, 2, 1, "", "get_loc"], [266, 1, 1, "", "levels"], [267, 1, 1, "", "names"], [268, 1, 1, "", "nlevels"], [269, 2, 1, "", "to_frame"]], "cudf.Series": [[272, 1, 1, "", "T"], [273, 2, 1, "", "__array__"], [274, 2, 1, "", "__iter__"], [275, 2, 1, "", "abs"], [276, 2, 1, "", "add"], [277, 2, 1, "", "add_prefix"], [278, 2, 1, "", "add_suffix"], [279, 2, 1, "", "all"], [280, 2, 1, "", "any"], [281, 2, 1, "", "append"], [282, 2, 1, "", "apply"], [283, 2, 1, "", "applymap"], [284, 2, 1, "", "argsort"], [285, 2, 1, "", "astype"], [286, 2, 1, "", "autocorr"], [287, 1, 1, "", "axes"], [288, 2, 1, "", "backfill"], [289, 2, 1, "", "between"], [290, 2, 1, "", "bfill"], [291, 1, 1, "", "cat"], [292, 2, 1, "", "clip"], [293, 2, 1, "", "copy"], [294, 2, 1, "", "corr"], [295, 2, 1, "", "count"], [296, 2, 1, "", "cov"], [297, 2, 1, "", "cummax"], [298, 2, 1, "", "cummin"], [299, 2, 1, "", "cumprod"], [300, 2, 1, "", "cumsum"], [301, 1, 1, "", "data"], [302, 2, 1, "", "describe"], [303, 2, 1, "", "deserialize"], [304, 2, 1, "", "device_deserialize"], [305, 2, 1, "", "device_serialize"], [306, 2, 1, "", "diff"], [307, 2, 1, "", "digitize"], [308, 2, 1, "", "div"], [309, 2, 1, "", "divide"], [310, 2, 1, "", "dot"], [311, 2, 1, "", "drop"], [312, 2, 1, "", "drop_duplicates"], [313, 2, 1, "", "dropna"], [314, 1, 1, "", "dt"], [315, 1, 1, "", "dtype"], [316, 1, 1, "", "empty"], [317, 2, 1, "", "eq"], [318, 2, 1, "", "equals"], [319, 2, 1, "", "explode"], [320, 2, 1, "", "factorize"], [321, 2, 1, "", "ffill"], [322, 2, 1, "", "fillna"], [323, 2, 1, "", "first"], [324, 2, 1, "", "floordiv"], [325, 2, 1, "", "from_arrow"], [326, 2, 1, "", "from_categorical"], [327, 2, 1, "", "from_masked_array"], [328, 2, 1, "", "from_pandas"], [329, 2, 1, "", "ge"], [330, 2, 1, "", "groupby"], [331, 2, 1, "", "gt"], [332, 1, 1, "", "has_nulls"], [333, 2, 1, "", "hash_values"], [334, 2, 1, "", "head"], [335, 2, 1, "", "host_deserialize"], [336, 2, 1, "", "host_serialize"], [337, 1, 1, "", "iloc"], [338, 1, 1, "", "index"], [339, 2, 1, "", "interpolate"], [340, 1, 1, "", "is_monotonic"], [341, 1, 1, "", "is_monotonic_decreasing"], [342, 1, 1, "", "is_monotonic_increasing"], [343, 1, 1, "", "is_unique"], [344, 2, 1, "", "isin"], [345, 2, 1, "", "isna"], [346, 2, 1, "", "isnull"], [347, 2, 1, "", "items"], [348, 2, 1, "", "iteritems"], [349, 2, 1, "", "keys"], [350, 2, 1, "", "kurt"], [351, 2, 1, "", "kurtosis"], [352, 2, 1, "", "last"], [353, 2, 1, "", "le"], [354, 1, 1, "", "list"], [355, 1, 1, "", "loc"], [356, 2, 1, "", "lt"], [357, 2, 1, "", "map"], [358, 2, 1, "", "mask"], [359, 2, 1, "", "max"], [360, 2, 1, "", "mean"], [361, 2, 1, "", "median"], [362, 2, 1, "", "memory_usage"], [363, 2, 1, "", "min"], [364, 2, 1, "", "mod"], [365, 2, 1, "", "mode"], [366, 2, 1, "", "mul"], [367, 2, 1, "", "multiply"], [368, 1, 1, "", "name"], [369, 2, 1, "", "nans_to_nulls"], [370, 1, 1, "", "ndim"], [371, 2, 1, "", "ne"], [372, 2, 1, "", "nlargest"], [373, 2, 1, "", "notna"], [374, 2, 1, "", "notnull"], [375, 2, 1, "", "nsmallest"], [376, 1, 1, "", "null_count"], [377, 1, 1, "", "nullable"], [378, 1, 1, "", "nullmask"], [379, 2, 1, "", "nunique"], [380, 2, 1, "", "pad"], [381, 2, 1, "", "pct_change"], [382, 2, 1, "", "pipe"], [383, 2, 1, "", "pow"], [384, 2, 1, "", "prod"], [385, 2, 1, "", "product"], [386, 2, 1, "", "quantile"], [387, 2, 1, "", "radd"], [388, 2, 1, "", "rank"], [389, 2, 1, "", "rdiv"], [390, 2, 1, "", "reindex"], [391, 2, 1, "", "rename"], [392, 2, 1, "", "repeat"], [393, 2, 1, "", "replace"], [394, 2, 1, "", "resample"], [395, 2, 1, "", "reset_index"], [396, 2, 1, "", "rfloordiv"], [397, 2, 1, "", "rmod"], [398, 2, 1, "", "rmul"], [399, 2, 1, "", "rolling"], [400, 2, 1, "", "round"], [401, 2, 1, "", "rpow"], [402, 2, 1, "", "rsub"], [403, 2, 1, "", "rtruediv"], [404, 2, 1, "", "sample"], [405, 2, 1, "", "scale"], [406, 2, 1, "", "searchsorted"], [407, 2, 1, "", "serialize"], [408, 1, 1, "", "shape"], [409, 2, 1, "", "shift"], [410, 1, 1, "", "size"], [411, 2, 1, "", "skew"], [412, 2, 1, "", "sort_index"], [413, 2, 1, "", "sort_values"], [414, 2, 1, "", "std"], [415, 1, 1, "", "str"], [416, 1, 1, "", "struct"], [417, 2, 1, "", "sub"], [418, 2, 1, "", "subtract"], [419, 2, 1, "", "sum"], [420, 2, 1, "", "sum_of_squares"], [421, 2, 1, "", "tail"], [422, 2, 1, "", "take"], [423, 2, 1, "", "tile"], [424, 2, 1, "", "to_arrow"], [425, 2, 1, "", "to_cupy"], [426, 2, 1, "", "to_dict"], [427, 2, 1, "", "to_dlpack"], [428, 2, 1, "", "to_frame"], [429, 2, 1, "", "to_hdf"], [430, 2, 1, "", "to_json"], [431, 2, 1, "", "to_list"], [432, 2, 1, "", "to_numpy"], [433, 2, 1, "", "to_pandas"], [434, 2, 1, "", "to_string"], [435, 2, 1, "", "tolist"], [436, 2, 1, "", "transpose"], [437, 2, 1, "", "truediv"], [438, 2, 1, "", "unique"], [439, 2, 1, "", "update"], [440, 1, 1, "", "valid_count"], [441, 2, 1, "", "value_counts"], [442, 1, 1, "", "values"], [443, 1, 1, "", "values_host"], [444, 2, 1, "", "var"], [445, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[447, 1, 1, "", "components"], [448, 1, 1, "", "days"], [449, 1, 1, "", "inferred_freq"], [450, 1, 1, "", "microseconds"], [451, 1, 1, "", "nanoseconds"], [452, 1, 1, "", "seconds"], [453, 2, 1, "", "to_frame"], [454, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[457, 2, 1, "", "add_categories"], [458, 2, 1, "", "as_ordered"], [459, 2, 1, "", "as_unordered"], [460, 1, 1, "", "categories"], [461, 1, 1, "", "codes"], [462, 1, 1, "", "ordered"], [463, 2, 1, "", "remove_categories"], [464, 2, 1, "", "reorder_categories"], [465, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[466, 2, 1, "", "concat"], [467, 2, 1, "", "contains"], [468, 2, 1, "", "get"], [469, 2, 1, "", "len"], [470, 2, 1, "", "sort_values"], [471, 2, 1, "", "take"], [472, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[473, 2, 1, "", "byte_count"], [474, 2, 1, "", "capitalize"], [475, 2, 1, "", "cat"], [476, 2, 1, "", "center"], [477, 2, 1, "", "character_ngrams"], [478, 2, 1, "", "character_tokenize"], [479, 2, 1, "", "code_points"], [480, 2, 1, "", "contains"], [481, 2, 1, "", "count"], [482, 2, 1, "", "detokenize"], [483, 2, 1, "", "edit_distance"], [484, 2, 1, "", "edit_distance_matrix"], [485, 2, 1, "", "endswith"], [486, 2, 1, "", "extract"], [487, 2, 1, "", "filter_alphanum"], [488, 2, 1, "", "filter_characters"], [489, 2, 1, "", "filter_tokens"], [490, 2, 1, "", "find"], [491, 2, 1, "", "findall"], [492, 2, 1, "", "get"], [493, 2, 1, "", "get_json_object"], [494, 2, 1, "", "hex_to_int"], [495, 2, 1, "", "htoi"], [496, 2, 1, "", "index"], [497, 2, 1, "", "insert"], [498, 2, 1, "", "ip2int"], [499, 2, 1, "", "ip_to_int"], [500, 2, 1, "", "is_consonant"], [501, 2, 1, "", "is_vowel"], [502, 2, 1, "", "isalnum"], [503, 2, 1, "", "isalpha"], [504, 2, 1, "", "isdecimal"], [505, 2, 1, "", "isdigit"], [506, 2, 1, "", "isempty"], [507, 2, 1, "", "isfloat"], [508, 2, 1, "", "ishex"], [509, 2, 1, "", "isinteger"], [510, 2, 1, "", "isipv4"], [511, 2, 1, "", "islower"], [512, 2, 1, "", "isnumeric"], [513, 2, 1, "", "isspace"], [514, 2, 1, "", "istimestamp"], [515, 2, 1, "", "istitle"], [516, 2, 1, "", "isupper"], [517, 2, 1, "", "join"], [518, 2, 1, "", "len"], [519, 2, 1, "", "ljust"], [520, 2, 1, "", "lower"], [521, 2, 1, "", "lstrip"], [522, 2, 1, "", "match"], [523, 2, 1, "", "ngrams"], [524, 2, 1, "", "ngrams_tokenize"], [525, 2, 1, "", "normalize_characters"], [526, 2, 1, "", "normalize_spaces"], [527, 2, 1, "", "pad"], [528, 2, 1, "", "partition"], [529, 2, 1, "", "porter_stemmer_measure"], [530, 2, 1, "", "repeat"], [531, 2, 1, "", "replace"], [532, 2, 1, "", "replace_tokens"], [533, 2, 1, "", "replace_with_backrefs"], [534, 2, 1, "", "rfind"], [535, 2, 1, "", "rindex"], [536, 2, 1, "", "rjust"], [537, 2, 1, "", "rpartition"], [538, 2, 1, "", "rsplit"], [539, 2, 1, "", "rstrip"], [540, 2, 1, "", "slice"], [541, 2, 1, "", "slice_from"], [542, 2, 1, "", "slice_replace"], [543, 2, 1, "", "split"], [544, 2, 1, "", "startswith"], [545, 2, 1, "", "strip"], [546, 2, 1, "", "swapcase"], [547, 2, 1, "", "title"], [548, 2, 1, "", "token_count"], [549, 2, 1, "", "tokenize"], [550, 2, 1, "", "translate"], [551, 2, 1, "", "upper"], [552, 2, 1, "", "url_decode"], [553, 2, 1, "", "url_encode"], [554, 2, 1, "", "wrap"], [555, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[556, 2, 1, "", "explode"], [557, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[558, 2, 1, "", "__iter__"], [559, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[560, 2, 1, "", "aggregate"], [561, 2, 1, "", "backfill"], [562, 2, 1, "", "bfill"], [563, 2, 1, "", "count"], [564, 2, 1, "", "cumcount"], [565, 2, 1, "", "cummax"], [566, 2, 1, "", "cummin"], [567, 2, 1, "", "cumsum"], [568, 2, 1, "", "describe"], [569, 2, 1, "", "diff"], [570, 2, 1, "", "ffill"], [571, 2, 1, "", "fillna"], [572, 2, 1, "", "idxmax"], [573, 2, 1, "", "idxmin"], [574, 2, 1, "", "nunique"], [575, 2, 1, "", "pad"], [576, 2, 1, "", "quantile"], [577, 2, 1, "", "shift"], [578, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[579, 2, 1, "", "agg"], [580, 2, 1, "", "apply"], [581, 2, 1, "", "backfill"], [582, 2, 1, "", "bfill"], [583, 2, 1, "", "corr"], [584, 2, 1, "", "count"], [585, 2, 1, "", "cov"], [586, 2, 1, "", "cumcount"], [587, 2, 1, "", "cummax"], [588, 2, 1, "", "cummin"], [589, 2, 1, "", "cumsum"], [590, 2, 1, "", "ffill"], [591, 2, 1, "", "max"], [592, 2, 1, "", "mean"], [593, 2, 1, "", "median"], [594, 2, 1, "", "min"], [595, 2, 1, "", "nth"], [596, 2, 1, "", "pad"], [597, 2, 1, "", "pipe"], [598, 2, 1, "", "prod"], [599, 2, 1, "", "size"], [600, 2, 1, "", "std"], [601, 2, 1, "", "sum"], [602, 2, 1, "", "transform"], [603, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[604, 2, 1, "", "aggregate"], [605, 2, 1, "", "nunique"], [606, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[607, 2, 1, "", "ceil"], [608, 1, 1, "", "day"], [609, 1, 1, "", "day_of_year"], [610, 1, 1, "", "dayofweek"], [611, 1, 1, "", "dayofyear"], [612, 1, 1, "", "days_in_month"], [613, 2, 1, "", "floor"], [614, 1, 1, "", "hour"], [615, 1, 1, "", "is_leap_year"], [616, 1, 1, "", "is_month_end"], [617, 1, 1, "", "is_month_start"], [618, 1, 1, "", "is_quarter_end"], [619, 1, 1, "", "is_quarter_start"], [620, 1, 1, "", "is_year_end"], [621, 1, 1, "", "is_year_start"], [622, 2, 1, "", "isocalendar"], [623, 1, 1, "", "minute"], [624, 1, 1, "", "month"], [625, 1, 1, "", "quarter"], [626, 2, 1, "", "round"], [627, 1, 1, "", "second"], [628, 2, 1, "", "strftime"], [629, 1, 1, "", "weekday"], [630, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[631, 1, 1, "", "components"], [632, 1, 1, "", "days"], [633, 1, 1, "", "microseconds"], [634, 1, 1, "", "nanoseconds"], [635, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[636, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[637, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[638, 2, 1, "", "apply"], [639, 2, 1, "", "count"], [640, 2, 1, "", "max"], [641, 2, 1, "", "mean"], [642, 2, 1, "", "min"], [643, 2, 1, "", "std"], [644, 2, 1, "", "sum"], [645, 2, 1, "", "var"]], "cudf.io.parquet": [[649, 0, 1, "", "ParquetDatasetWriter"], [652, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[650, 2, 1, "", "close"], [651, 2, 1, "", "write_table"]], "cudf.testing.testing": [[663, 3, 1, "", "assert_column_equal"], [664, 3, 1, "", "assert_frame_equal"], [665, 3, 1, "", "assert_index_equal"], [666, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 683, 684, 686, 687, 690, 693, 694], "categoricalindex": [0, 1, 2, 3, 675], "categori": [1, 460], "code": [2, 258, 461], "equal": [3, 50, 318], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 670, 686, 690], "t": [5, 272], "__iter__": [6, 274, 558], "ab": [7, 275], "add": [8, 276], "add_prefix": [9, 277], "add_suffix": [10, 278], "agg": [11, 579], "all": [12, 279, 682], "ani": [13, 205, 280], "append": [14, 206, 281], "appli": [15, 282, 580, 638, 689, 690, 694], "apply_chunk": [16, 690], "apply_row": [17, 690], "applymap": [18, 283, 684], "argsort": [19, 284], "assign": 20, "astyp": [21, 285], "ax": [23, 287], "backfil": [24, 288, 561, 581], "bfill": [25, 290, 562, 582], "clip": [26, 292], "column": [27, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 682, 694], "copi": [28, 207, 293], "corr": [29, 294, 583], "count": [30, 295, 481, 563, 584, 639], "cov": [31, 296, 585], "cummax": [32, 297, 565, 587], "cummin": [33, 298, 566, 588], "cumprod": [34, 299], "cumsum": [35, 300, 567, 589], "describ": [36, 302, 568], "deseri": [37, 208, 303], "device_deseri": [38, 209, 304], "device_seri": [39, 210, 305], "diff": [40, 306, 569], "div": [41, 308], "divid": [42, 309], "dot": [43, 310], "drop": [44, 311, 693], "drop_dupl": [45, 212, 312], "dropna": [46, 213, 313, 693], "dtype": [47, 315, 692, 693], "empti": [48, 316], "eq": [49, 317], "eval": 51, "explod": [52, 319, 556], "ffill": [53, 321, 570, 590], "fillna": [54, 214, 322, 571, 693], "first": [55, 323], "floordiv": [56, 324], "from_arrow": [57, 215, 260, 325], "from_panda": [58, 216, 328], "from_record": 59, "ge": [60, 329], "groupbi": [61, 330, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 670, 673, 677, 689, 690, 693], "gt": [62, 331], "hash_valu": [63, 333], "head": [64, 334], "host_deseri": [65, 221, 335], "host_seri": [66, 222, 336], "iat": 67, "iloc": [68, 337], "index": [69, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 338, 496, 670, 673, 675, 677, 682, 684, 689], "info": 70, "insert": [71, 497, 693], "interleave_column": 72, "interpol": [73, 339], "isin": [74, 234, 344], "isna": [75, 345], "isnul": [76, 346], "item": [77, 347], "iterrow": 78, "itertupl": 79, "join": [80, 235, 517, 670, 675, 677, 684], "kei": [81, 349], "kurt": [82, 350], "kurtosi": [83, 351], "last": [84, 352], "le": [85, 353], "loc": [86, 355], "lt": [87, 356], "mask": [88, 358], "max": [89, 359, 591, 640], "mean": [90, 360, 592, 641], "median": [91, 361, 593], "melt": [92, 653], "memory_usag": [93, 362], "merg": [94, 670, 677], "min": [95, 363, 594, 642], "mod": [96, 364], "mode": [97, 365], "mul": [98, 366], "multipli": [99, 367], "nans_to_nul": [100, 369], "ndim": [101, 370], "ne": [102, 371], "nlargest": [103, 372], "notna": [104, 373], "notnul": [105, 374], "nsmallest": [106, 375], "nuniqu": [107, 379, 574, 605], "pad": [108, 380, 527, 575, 596], "partition_by_hash": 109, "pct_chang": [110, 381], "pipe": [111, 382, 597], "pivot": [112, 654], "pop": 113, "pow": [114, 383], "prod": [115, 384, 598], "product": [116, 385, 693], "quantil": [117, 118, 386, 576], "queri": 119, "radd": [120, 387], "rank": [121, 388], "rdiv": [122, 389], "reindex": [123, 390, 670, 677], "panda": [123, 265, 390, 571, 580, 684, 685, 694], "compat": [123, 265, 390, 571, 580, 675, 685], "note": [123, 265, 390, 571, 580, 685, 688], "renam": [124, 238, 391], "repeat": [125, 239, 392, 530], "replac": [126, 393, 531, 693], "resampl": [127, 394], "reset_index": [128, 395], "rfloordiv": [129, 396], "rmod": [130, 397], "rmul": [131, 398], "roll": [132, 399, 638, 639, 640, 641, 642, 643, 644, 645, 680, 689, 690], "round": [133, 196, 400, 626], "rpow": [134, 401], "rsub": [135, 402], "rtruediv": [136, 403], "sampl": [137, 404], "scale": [138, 405], "scatter_by_map": 139, "searchsort": [140, 406], "select_dtyp": 141, "serial": [142, 240, 407, 670, 677], "set_index": 143, "shape": [144, 408], "shift": [145, 409, 577], "size": [146, 242, 410, 578, 599], "skew": [147, 411], "sort_index": [148, 412], "sort_valu": [149, 243, 413, 470], "stack": 150, "std": [151, 414, 600, 643], "sub": [152, 417], "subtract": [153, 418], "sum": [154, 419, 601, 644, 693], "sum_of_squar": [155, 420], "tail": [156, 421], "take": [157, 244, 422, 471], "tile": [158, 423], "to_arrow": [159, 424], "to_csv": 160, "to_cupi": [161, 425], "to_dict": [162, 426], "to_dlpack": [163, 245, 427], "to_feath": 164, "to_hdf": [165, 429], "to_json": [166, 430], "to_numpi": [167, 432], "to_orc": 168, "to_panda": [169, 247, 433], "to_parquet": 170, "to_record": 171, "to_str": [172, 434], "to_struct": 173, "transpos": [174, 436, 670, 684], "truediv": [175, 437], "unstack": [176, 669], "updat": [177, 439], "value_count": [178, 441], "valu": [179, 251, 256, 442, 675, 693, 694], "values_host": [180, 443], "var": [181, 444, 603, 645], "where": [182, 445], "datetimeindex": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 675], "ceil": [184, 607], "dai": [185, 448, 608, 632], "day_of_year": [186, 609], "dayofweek": [187, 610], "dayofyear": [188, 611], "floor": [189, 613], "hour": [190, 614], "is_leap_year": [191, 615], "isocalendar": [192, 622], "minut": [193, 623, 684], "month": [194, 624], "quarter": [195, 625], "second": [197, 452, 627, 635], "to_fram": [198, 246, 269, 428, 453], "to_seri": [199, 248, 454], "weekdai": [200, 629], "year": [201, 630], "float64index": 202, "grouper": [203, 689], "differ": [211, 692], "get_level_valu": [217, 264], "get_loc": [218, 255, 265], "get_slice_bound": 219, "has_dupl": 220, "intersect": 223, "is_boolean": 224, "is_categor": 225, "is_float": 226, "is_integ": 227, "is_interv": 228, "is_monoton": [229, 340], "is_monotonic_decreas": [230, 341], "is_monotonic_increas": [231, 342], "is_numer": 232, "is_object": 233, "name": [236, 267, 368, 694], "nlevel": [237, 268], "set_nam": 241, "union": 249, "uniqu": [250, 438, 472, 606], "int64index": 252, "intervalindex": [253, 254, 255, 256, 675], "from_break": 254, "multiindex": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 675, 684], "droplevel": 259, "from_fram": 261, "from_product": 262, "from_tupl": 263, "level": [266, 671, 689, 690], "rangeindex": 270, "seri": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 670, 677, 684, 686, 690], "__array__": 273, "autocorr": 286, "between": [289, 686], "cat": [291, 475], "data": [301, 670, 671, 677, 682, 684, 688, 690, 693, 694], "digit": 307, "dt": 314, "factor": 320, "from_categor": 326, "from_masked_arrai": 327, "has_nul": 332, "is_uniqu": 343, "iteritem": 348, "list": [354, 466, 467, 468, 469, 470, 471, 472, 677, 688], "map": 357, "null_count": 376, "nullabl": [377, 690], "nullmask": 378, "str": 415, "struct": [416, 556, 557, 677, 688], "to_list": 431, "tolist": 435, "valid_count": 440, "timedeltaindex": [446, 447, 448, 449, 450, 451, 452, 453, 454, 675], "compon": [447, 631, 675], "inferred_freq": 449, "microsecond": [450, 633], "nanosecond": [451, 634], "uint64index": 455, "concat": [456, 466, 684], "core": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "categor": [457, 458, 459, 460, 461, 462, 463, 464, 465, 675, 677, 684], "categoricalaccessor": [457, 458, 459, 460, 461, 462, 463, 464, 465], "add_categori": 457, "as_ord": 458, "as_unord": 459, "order": [462, 694], "remove_categori": 463, "reorder_categori": 464, "set_categori": 465, "listmethod": [466, 467, 468, 469, 470, 471, 472], "contain": [467, 480], "get": [468, 492, 684], "len": [469, 518], "string": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 677, 678, 684, 693], "stringmethod": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "byte_count": 473, "capit": 474, "center": 476, "character_ngram": 477, "character_token": 478, "code_point": 479, "detoken": 482, "edit_dist": 483, "edit_distance_matrix": 484, "endswith": 485, "extract": 486, "filter_alphanum": 487, "filter_charact": 488, "filter_token": 489, "find": 490, "findal": 491, "get_json_object": 493, "hex_to_int": 494, "htoi": 495, "ip2int": 498, "ip_to_int": 499, "is_conson": 500, "is_vowel": 501, "isalnum": 502, "isalpha": 503, "isdecim": 504, "isdigit": 505, "isempti": 506, "isfloat": 507, "ishex": 508, "isinteg": 509, "isipv4": 510, "islow": 511, "isnumer": 512, "isspac": 513, "istimestamp": 514, "istitl": 515, "isupp": 516, "ljust": 519, "lower": [520, 690], "lstrip": 521, "match": 522, "ngram": 523, "ngrams_token": 524, "normalize_charact": 525, "normalize_spac": 526, "partit": 528, "porter_stemmer_measur": 529, "replace_token": 532, "replace_with_backref": 533, "rfind": 534, "rindex": 535, "rjust": 536, "rpartit": 537, "rsplit": 538, "rstrip": 539, "slice": 540, "slice_from": 541, "slice_replac": 542, "split": 543, "startswith": 544, "strip": 545, "swapcas": 546, "titl": 547, "token_count": 548, "token": 549, "translat": 550, "upper": 551, "url_decod": 552, "url_encod": 553, "wrap": 554, "zfill": 555, "structmethod": [556, 557], "field": 557, "group": [559, 684, 689], "dataframegroupbi": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "aggreg": [560, 604, 689], "cumcount": [564, 586], "idxmax": 572, "idxmin": 573, "nth": 595, "transform": [602, 689], "seriesgroupbi": [604, 605, 606], "datetimeproperti": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "days_in_month": 612, "is_month_end": 616, "is_month_start": 617, "is_quarter_end": 618, "is_quarter_start": 619, "is_year_end": 620, "is_year_start": 621, "strftime": 628, "timedeltaproperti": [631, 632, 633, 634, 635], "subword_token": [636, 637], "subwordtoken": [636, 637, 679], "__call__": 637, "window": [638, 639, 640, 641, 642, 643, 644, 645, 670, 677, 680, 689, 690], "cut": 646, "from_dlpack": 647, "get_dummi": 648, "io": [649, 650, 651, 652, 670, 677, 692], "parquet": [649, 650, 651, 652, 676, 684], "parquetdatasetwrit": [649, 650, 651], "close": 650, "write_t": 651, "read_parquet_metadata": 652, "read_avro": 655, "read_csv": 656, "read_feath": 657, "read_hdf": 658, "read_json": 659, "read_orc": 660, "read_parquet": 661, "read_text": 662, "test": [663, 664, 665, 666, 672], "assert_column_equ": 663, "assert_frame_equ": 664, "assert_index_equ": 665, "assert_series_equ": 666, "to_datetim": 667, "to_numer": 668, "constructor": [670, 675, 677, 679], "attribut": [670, 677], "underli": 670, "convers": [670, 671, 675, 677], "iter": [670, 673, 677, 694], "binari": [670, 677], "oper": [670, 675, 677, 684, 689, 694], "function": [670, 671, 672, 673, 677, 680, 690, 694], "applic": [670, 673, 677], "comput": [670, 673, 675, 677, 694], "descript": [670, 673, 677], "stat": [670, 673, 677, 684], "select": [670, 675, 677, 684], "label": [670, 677, 684, 693], "manipul": [670, 671, 677], "miss": [670, 675, 677, 684, 693, 694], "handl": [670, 677, 678, 690], "reshap": [670, 677], "sort": [670, 675, 677], "combin": [670, 675, 677], "compar": [670, 677], "time": [670, 675, 677, 684], "relat": [670, 677], "gener": [671, 672, 693], "top": 671, "deal": 671, "datetimelik": [671, 677], "util": 672, "api": [674, 687], "refer": 674, "document": [674, 683], "object": [675, 684, 688, 689, 693, 694], "properti": [675, 677], "modifi": 675, "memori": 675, "usag": 675, "specif": 675, "set": 675, "numer": [675, 693], "date": 675, "input": [676, 692], "output": [676, 692], "csv": [676, 684], "text": 676, "json": 676, "orc": [676, 684], "hdfstore": 676, "pytabl": 676, "hdf5": 676, "feather": 676, "avro": 676, "accessor": 677, "datetim": [677, 693], "method": [677, 684], "timedelta": 677, "develop": [681, 687], "guid": [681, 691], "librari": [682, 684], "design": 682, "The": [682, 689], "frame": 682, "layer": 682, "columnaccessor": 682, "type": [682, 688, 692, 694], "buffer": 682, "cython": 682, "put": 682, "It": 682, "togeth": 682, "welcom": 683, "s": 683, "content": 683, "indic": 683, "tabl": 683, "10": 684, "dask": [684, 687], "what": [684, 687], "ar": 684, "when": 684, "us": [684, 692], "creation": 684, "view": 684, "posit": 684, "boolean": 684, "histogram": 684, "convert": [684, 686], "represent": 684, "numpi": [684, 688], "arrow": 684, "In": 684, "out": 684, "perform": 684, "tip": 684, "persist": 684, "wait": 684, "interoper": 686, "cupi": [686, 690], "arrai": [686, 690], "interweav": 686, "smooth": 686, "pydata": 686, "workflow": 686, "spars": 686, "matrix": 686, "multi": 687, "gpu": 687, "work": [687, 693], "navig": 687, "support": [688, 689, 692, 694], "A": 688, "decim": 688, "nest": 688, "summari": [689, 690], "limit": [689, 694], "calcul": [689, 693], "overview": 690, "user": [690, 691], "defin": 690, "udf": 690, "addit": 690, "scalar": 690, "argument": 690, "control": 690, "custom": 690, "numba": 690, "kernel": 690, "null": [690, 693, 694], "caveat": 690, "i": 692, "o": 692, "magnum": 692, "gpudirect": 692, "storag": 692, "integr": 692, "nvcomp": 692, "current": 692, "polici": 692, "how": 693, "detect": 693, "float": [693, 694], "nan": 693, "na": 693, "fill": 693, "axi": 693, "regular": 693, "express": 693, "comparison": 694, "result": 694, "point": 694, "No": 694, "true": 694}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}})