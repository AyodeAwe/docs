Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.applymap", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/series", "api_docs/string_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/index", "developer_guide/library_design", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.applymap.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/index.md", "developer_guide/library_design.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.applymap", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.between", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.from_dlpack", "cudf.get_dummies", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "Series", "String handling", "SubwordTokenizer", "Window", "Developer Guide", "Library Design", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 34, 66, 123, 164, 178, 197, 198, 199, 203, 242, 247, 248, 252, 265, 266, 295, 423, 436, 445, 626, 639, 653, 654, 655, 656, 664, 672, 677], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 25, 33, 36, 38, 39, 40, 41, 44, 46, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 66, 69, 80, 81, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 125, 126, 129, 130, 131, 132, 137, 141, 147, 148, 149, 150, 154, 158, 160, 161, 170, 172, 175, 177, 178, 179, 184, 191, 197, 199, 205, 211, 217, 219, 220, 221, 222, 223, 227, 228, 230, 235, 240, 247, 248, 249, 255, 266, 271, 277, 280, 283, 285, 294, 297, 300, 301, 302, 303, 309, 314, 315, 317, 318, 319, 320, 321, 322, 325, 327, 330, 343, 344, 347, 349, 350, 351, 354, 355, 357, 358, 361, 362, 372, 373, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 388, 391, 392, 393, 394, 397, 400, 407, 408, 409, 410, 417, 419, 420, 427, 431, 433, 435, 436, 445, 464, 468, 470, 478, 505, 510, 533, 536, 537, 539, 540, 541, 542, 543, 544, 558, 562, 563, 564, 566, 567, 575, 581, 582, 583, 584, 588, 591, 595, 597, 603, 616, 636, 637, 638, 644, 645, 646, 649, 650, 651, 654, 663, 664, 673, 676, 677, 681, 682], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 23, 26, 27, 29, 30, 31, 32, 33, 38, 39, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 66, 67, 69, 71, 72, 76, 78, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 136, 140, 141, 142, 143, 146, 147, 148, 149, 150, 155, 156, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 176, 177, 178, 193, 194, 197, 198, 199, 206, 209, 211, 213, 214, 218, 230, 234, 236, 238, 239, 241, 243, 244, 247, 248, 249, 250, 252, 256, 257, 258, 260, 264, 265, 266, 268, 271, 274, 275, 278, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 294, 300, 301, 303, 304, 305, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 330, 336, 337, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 399, 400, 401, 402, 404, 407, 408, 409, 410, 414, 415, 418, 420, 422, 423, 424, 427, 428, 431, 434, 435, 436, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 466, 468, 470, 471, 475, 477, 478, 479, 480, 486, 487, 496, 507, 508, 511, 521, 522, 524, 525, 528, 529, 530, 532, 533, 534, 535, 540, 545, 551, 552, 558, 560, 561, 562, 563, 564, 565, 567, 571, 572, 580, 581, 582, 583, 584, 586, 588, 591, 595, 636, 638, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 657, 658, 659, 674, 675, 680, 683], "categori": [0, 2, 21, 33, 89, 90, 220, 228, 280, 283, 294, 312, 317, 447, 448, 449, 452, 453, 454, 455, 483, 515, 636, 638, 653, 656, 672, 674, 677, 678, 682, 684], "order": [0, 14, 17, 19, 21, 40, 42, 57, 76, 90, 99, 102, 116, 135, 137, 144, 160, 165, 173, 178, 197, 230, 235, 238, 247, 279, 280, 302, 304, 312, 321, 356, 363, 366, 378, 396, 397, 403, 419, 431, 436, 445, 448, 449, 454, 455, 460, 462, 472, 539, 636, 637, 639, 646, 649, 653, 654, 655, 656, 657, 674, 679, 681], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 25, 27, 33, 37, 38, 39, 40, 41, 45, 46, 48, 50, 52, 54, 55, 56, 58, 59, 60, 64, 66, 68, 71, 72, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 103, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 156, 162, 164, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 201, 206, 209, 211, 212, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 233, 234, 236, 238, 239, 242, 243, 244, 247, 248, 249, 252, 254, 261, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 335, 336, 337, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 407, 408, 409, 410, 412, 415, 418, 422, 423, 427, 428, 429, 431, 434, 435, 436, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 636, 638, 646, 649, 651, 653, 654, 655, 656, 657, 658, 659, 667, 672, 674, 675, 676, 678, 679, 680, 681, 684], "copi": [0, 5, 21, 41, 42, 43, 50, 118, 119, 156, 158, 162, 168, 169, 178, 197, 199, 238, 240, 247, 248, 249, 252, 265, 280, 303, 313, 380, 381, 415, 417, 422, 436, 445, 447, 448, 449, 453, 454, 455, 510, 521, 546, 637, 651, 672, 682, 684], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 23, 25, 27, 33, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 66, 67, 69, 70, 71, 72, 76, 81, 83, 84, 89, 90, 93, 96, 98, 100, 101, 112, 116, 118, 119, 121, 123, 127, 132, 135, 136, 138, 143, 144, 152, 154, 156, 160, 161, 164, 165, 172, 173, 177, 178, 197, 199, 206, 207, 211, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 233, 236, 238, 244, 247, 248, 249, 250, 252, 260, 265, 266, 274, 275, 276, 278, 280, 282, 284, 285, 294, 299, 302, 303, 304, 305, 308, 309, 310, 311, 313, 319, 320, 321, 322, 323, 330, 335, 336, 337, 344, 347, 349, 353, 356, 360, 362, 364, 365, 378, 383, 385, 389, 394, 396, 402, 403, 412, 415, 419, 420, 423, 429, 431, 435, 436, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 460, 467, 470, 475, 476, 477, 478, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 515, 521, 528, 533, 534, 544, 561, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 605, 606, 608, 609, 610, 611, 627, 636, 638, 639, 640, 646, 649, 651, 653, 654, 655, 656, 657, 674, 675, 676, 679, 680, 683], "name": [0, 8, 11, 16, 17, 19, 21, 33, 38, 39, 41, 43, 46, 48, 52, 55, 56, 57, 58, 64, 67, 70, 71, 72, 73, 75, 76, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 98, 100, 101, 102, 104, 107, 109, 112, 114, 115, 117, 118, 119, 123, 124, 125, 126, 128, 129, 130, 131, 132, 141, 143, 144, 147, 148, 155, 160, 163, 165, 168, 170, 171, 172, 178, 193, 194, 197, 199, 212, 230, 233, 236, 238, 241, 243, 247, 248, 249, 252, 253, 254, 256, 257, 258, 261, 264, 265, 266, 271, 279, 280, 294, 300, 301, 303, 304, 309, 315, 320, 321, 322, 328, 335, 336, 337, 344, 346, 347, 350, 351, 354, 355, 357, 358, 362, 364, 365, 373, 376, 377, 379, 381, 385, 386, 387, 388, 390, 391, 392, 393, 394, 400, 402, 407, 408, 418, 419, 427, 436, 443, 444, 445, 446, 528, 547, 550, 569, 594, 612, 638, 639, 642, 643, 644, 646, 648, 653, 654, 655, 656, 659, 672, 674, 678, 679, 680, 681, 683], "A": [0, 4, 9, 10, 14, 16, 17, 33, 34, 35, 41, 45, 48, 50, 51, 54, 57, 59, 61, 66, 80, 84, 103, 106, 114, 118, 119, 120, 121, 122, 127, 128, 132, 134, 137, 155, 160, 161, 175, 177, 186, 203, 204, 211, 216, 234, 235, 252, 254, 272, 273, 276, 294, 295, 296, 299, 303, 306, 308, 313, 314, 317, 319, 321, 324, 326, 343, 349, 368, 372, 382, 383, 384, 389, 390, 394, 397, 419, 420, 428, 433, 435, 446, 463, 465, 470, 471, 475, 476, 487, 492, 508, 510, 521, 531, 532, 534, 536, 537, 541, 542, 543, 550, 569, 575, 587, 592, 594, 605, 627, 628, 636, 637, 639, 643, 646, 648, 658, 672, 674, 679, 680, 681, 683], "categor": [0, 1, 2, 21, 33, 89, 90, 219, 220, 221, 222, 223, 227, 228, 280, 283, 294, 317, 636, 638, 651, 653, 654, 655, 656, 672, 678, 679, 681, 684], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 23, 27, 29, 30, 31, 32, 33, 37, 38, 39, 41, 43, 45, 46, 47, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 66, 67, 69, 70, 71, 72, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 160, 161, 162, 164, 165, 167, 170, 172, 173, 175, 176, 177, 194, 199, 206, 208, 209, 211, 212, 218, 224, 225, 226, 229, 238, 239, 243, 245, 250, 259, 266, 270, 271, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 415, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 433, 434, 435, 444, 446, 453, 455, 456, 457, 460, 463, 465, 469, 470, 472, 478, 484, 485, 487, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 512, 518, 520, 521, 527, 528, 532, 533, 542, 544, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 573, 574, 575, 580, 581, 582, 583, 584, 586, 587, 588, 590, 591, 593, 595, 596, 627, 628, 636, 638, 643, 644, 646, 649, 651, 654, 655, 656, 658, 667, 668, 672, 674, 676, 678, 679, 680, 681, 682], "repres": [0, 122, 139, 146, 155, 161, 176, 178, 266, 282, 384, 398, 404, 420, 434, 436, 465, 484, 485, 502, 602, 633, 635, 636, 638, 672, 678, 683, 684], "indic": [0, 19, 25, 43, 45, 50, 69, 71, 72, 90, 100, 101, 106, 135, 152, 161, 172, 186, 190, 201, 238, 239, 260, 279, 285, 299, 305, 308, 312, 313, 323, 330, 335, 336, 337, 364, 365, 368, 372, 396, 412, 420, 446, 457, 461, 463, 470, 472, 475, 508, 518, 523, 527, 534, 587, 605, 606, 607, 608, 609, 610, 611, 615, 627, 636, 638, 646, 649, 663, 672, 675, 680], "anoth": [0, 37, 156, 160, 162, 172, 276, 298, 348, 415, 419, 422, 544, 672], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 27, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 66, 67, 68, 70, 73, 76, 77, 78, 79, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 136, 138, 141, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 187, 193, 240, 241, 256, 258, 264, 266, 271, 272, 273, 274, 275, 278, 279, 280, 283, 289, 290, 291, 292, 294, 300, 301, 303, 305, 308, 309, 310, 313, 315, 320, 321, 322, 324, 325, 328, 341, 342, 344, 346, 347, 350, 351, 354, 355, 357, 358, 362, 370, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 400, 402, 404, 407, 408, 409, 411, 413, 415, 417, 418, 419, 420, 422, 424, 427, 434, 443, 446, 550, 553, 559, 561, 562, 563, 564, 566, 567, 569, 573, 574, 575, 581, 582, 583, 584, 588, 590, 591, 593, 594, 595, 596, 612, 626, 627, 628, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 663, 664, 671, 674, 675, 676, 677, 679, 680, 681, 683], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 68, 69, 70, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 176, 177, 178, 179, 184, 191, 193, 194, 197, 199, 201, 203, 204, 206, 209, 211, 212, 214, 216, 218, 229, 230, 233, 234, 236, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 330, 335, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 401, 402, 403, 404, 407, 408, 409, 410, 412, 413, 415, 417, 418, 419, 420, 422, 423, 427, 429, 431, 434, 435, 436, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 460, 461, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 490, 491, 507, 509, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 544, 545, 547, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 580, 581, 582, 583, 584, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 603, 616, 618, 626, 627, 628, 633, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 682, 683], "arrai": [0, 4, 16, 17, 19, 23, 55, 57, 67, 84, 90, 112, 113, 114, 116, 118, 120, 121, 132, 135, 152, 156, 161, 162, 177, 178, 197, 199, 206, 218, 229, 234, 238, 239, 244, 247, 248, 249, 250, 252, 257, 260, 266, 276, 279, 284, 293, 299, 312, 316, 317, 318, 321, 349, 376, 378, 382, 383, 394, 396, 412, 414, 415, 420, 422, 435, 436, 445, 469, 473, 507, 522, 566, 628, 636, 638, 649, 657, 672, 674, 675, 681], "like": [0, 4, 8, 14, 16, 23, 33, 38, 39, 40, 41, 46, 49, 50, 52, 55, 56, 58, 67, 81, 83, 84, 90, 92, 93, 94, 95, 98, 109, 112, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 134, 138, 147, 148, 152, 160, 161, 170, 171, 173, 177, 178, 179, 184, 191, 197, 199, 206, 209, 218, 229, 239, 244, 247, 248, 249, 254, 256, 258, 266, 271, 276, 278, 282, 284, 294, 300, 301, 302, 303, 306, 309, 311, 313, 315, 317, 318, 320, 322, 335, 344, 347, 349, 355, 357, 358, 362, 373, 376, 377, 378, 379, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 407, 408, 412, 419, 420, 427, 435, 436, 445, 446, 447, 453, 454, 455, 461, 470, 473, 475, 490, 491, 495, 507, 515, 521, 522, 528, 534, 558, 566, 597, 603, 616, 636, 638, 645, 646, 649, 650, 651, 652, 653, 654, 656, 657, 659, 665, 667, 668, 672, 673, 674, 676, 677, 678, 679, 680, 683, 684], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 25, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 64, 66, 67, 68, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 164, 165, 167, 170, 171, 173, 176, 177, 178, 180, 181, 182, 183, 185, 188, 189, 192, 195, 197, 199, 201, 206, 209, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 233, 236, 238, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 265, 266, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 423, 424, 427, 428, 429, 431, 434, 435, 436, 440, 441, 442, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 559, 561, 567, 569, 570, 573, 575, 587, 590, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 633, 635, 636, 638, 639, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 674, 675, 676, 678, 679, 680, 683, 684], "dimension": [0, 139, 178, 197, 199, 247, 248, 249, 252, 266, 398, 436, 445, 528, 533, 636], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 26, 27, 33, 34, 35, 36, 40, 44, 47, 48, 51, 55, 60, 61, 62, 66, 68, 70, 76, 80, 89, 93, 99, 103, 104, 105, 110, 111, 118, 120, 121, 122, 127, 136, 137, 143, 145, 146, 149, 153, 156, 161, 162, 165, 173, 174, 176, 180, 181, 182, 183, 185, 188, 189, 192, 194, 195, 196, 197, 199, 203, 204, 205, 216, 217, 221, 229, 234, 235, 236, 238, 239, 243, 247, 250, 251, 252, 256, 260, 266, 272, 273, 277, 278, 279, 281, 293, 294, 295, 296, 297, 302, 304, 310, 314, 317, 318, 325, 326, 327, 335, 343, 353, 363, 366, 369, 371, 374, 375, 382, 383, 384, 385, 389, 397, 402, 404, 409, 413, 415, 420, 422, 431, 432, 434, 444, 445, 446, 447, 450, 453, 454, 455, 462, 465, 467, 468, 470, 472, 473, 474, 476, 478, 479, 481, 483, 490, 491, 494, 495, 502, 505, 507, 512, 513, 514, 515, 518, 519, 521, 522, 527, 528, 531, 533, 538, 539, 544, 545, 562, 563, 564, 566, 567, 570, 575, 581, 582, 583, 584, 588, 590, 591, 593, 595, 597, 598, 599, 600, 601, 603, 604, 613, 614, 616, 617, 618, 619, 620, 627, 633, 635, 636, 643, 646, 648, 649, 650, 651, 652, 657, 658, 663, 671, 674, 675, 676, 677, 678, 680, 682, 683, 684], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 23, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 66, 67, 70, 80, 81, 83, 85, 86, 90, 91, 92, 93, 94, 95, 98, 106, 107, 109, 110, 111, 112, 115, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 143, 144, 146, 147, 148, 149, 155, 160, 161, 163, 164, 165, 170, 171, 172, 176, 178, 194, 199, 211, 230, 236, 243, 248, 249, 250, 256, 257, 260, 266, 271, 274, 275, 276, 279, 284, 289, 290, 291, 292, 294, 300, 301, 302, 303, 304, 305, 308, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 335, 343, 344, 347, 348, 350, 351, 354, 355, 357, 358, 362, 372, 373, 374, 375, 376, 377, 379, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 402, 403, 404, 407, 408, 409, 419, 420, 423, 427, 429, 431, 434, 436, 444, 454, 455, 456, 458, 460, 465, 470, 475, 476, 478, 481, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 506, 507, 511, 515, 518, 521, 527, 528, 529, 533, 534, 535, 553, 561, 562, 563, 564, 574, 581, 582, 583, 584, 588, 591, 595, 626, 627, 636, 637, 638, 639, 644, 645, 646, 647, 649, 650, 651, 654, 655, 657, 658, 659, 674, 675, 676, 677, 680, 682, 684], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 25, 27, 33, 41, 43, 45, 47, 48, 50, 57, 71, 72, 78, 79, 84, 85, 87, 88, 90, 91, 93, 99, 100, 101, 102, 106, 107, 110, 111, 112, 114, 116, 118, 121, 122, 127, 128, 132, 135, 136, 137, 142, 146, 149, 160, 161, 165, 172, 173, 176, 177, 186, 190, 206, 207, 212, 218, 224, 225, 226, 229, 235, 244, 248, 249, 250, 252, 256, 266, 270, 272, 273, 274, 275, 277, 278, 279, 282, 285, 294, 303, 305, 308, 310, 313, 317, 318, 321, 331, 332, 333, 334, 335, 336, 337, 341, 342, 348, 349, 350, 352, 354, 363, 364, 365, 366, 372, 374, 375, 376, 378, 383, 384, 389, 390, 394, 396, 397, 401, 404, 409, 419, 420, 429, 434, 435, 446, 454, 455, 456, 465, 470, 473, 474, 475, 476, 478, 479, 481, 487, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 507, 511, 512, 515, 521, 522, 528, 529, 531, 533, 534, 535, 540, 542, 543, 544, 545, 546, 562, 563, 564, 575, 581, 582, 583, 584, 588, 591, 595, 605, 606, 607, 608, 609, 610, 611, 615, 618, 627, 636, 638, 639, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 663, 665, 666, 667, 670, 672, 676, 677, 678, 679, 680, 681, 682, 683, 684], "given": [0, 21, 41, 99, 107, 112, 113, 120, 121, 122, 123, 128, 132, 135, 165, 214, 234, 256, 280, 303, 318, 376, 382, 383, 384, 385, 390, 394, 396, 454, 455, 458, 461, 465, 470, 475, 478, 504, 518, 521, 528, 533, 534, 540, 544, 639, 644, 646, 650, 651, 657, 672, 682], "replac": [0, 43, 84, 132, 143, 177, 305, 349, 394, 402, 435, 478, 479, 487, 507, 522, 530, 532, 664, 674, 676, 681, 684], "nan": [0, 4, 8, 18, 19, 27, 33, 38, 39, 46, 47, 52, 54, 56, 58, 67, 69, 71, 72, 81, 83, 92, 93, 94, 95, 96, 98, 100, 101, 103, 109, 115, 116, 117, 118, 123, 124, 125, 126, 127, 129, 130, 131, 143, 147, 148, 160, 161, 164, 170, 199, 211, 221, 227, 238, 266, 271, 279, 294, 300, 301, 309, 310, 315, 319, 320, 322, 330, 336, 337, 344, 347, 348, 355, 356, 357, 358, 360, 362, 364, 365, 370, 373, 377, 378, 379, 380, 386, 387, 388, 389, 391, 392, 393, 402, 407, 408, 419, 420, 423, 427, 429, 431, 456, 460, 462, 470, 521, 558, 629, 638, 646, 675, 680, 681, 684], "list": [0, 4, 8, 11, 14, 16, 17, 19, 33, 34, 35, 36, 38, 39, 40, 41, 43, 46, 49, 52, 55, 56, 57, 58, 61, 62, 64, 70, 81, 83, 84, 88, 90, 92, 94, 95, 98, 99, 102, 104, 107, 109, 112, 115, 117, 119, 121, 123, 124, 125, 126, 129, 130, 131, 134, 136, 137, 138, 143, 144, 147, 148, 155, 160, 161, 165, 170, 171, 173, 177, 201, 203, 204, 205, 209, 216, 217, 229, 235, 236, 250, 254, 256, 257, 258, 261, 271, 276, 278, 279, 282, 283, 294, 295, 296, 297, 300, 301, 302, 303, 309, 311, 315, 320, 321, 322, 326, 327, 328, 335, 344, 347, 349, 355, 357, 358, 362, 373, 376, 377, 379, 383, 385, 386, 387, 388, 391, 392, 393, 397, 402, 403, 407, 408, 419, 420, 427, 435, 446, 447, 453, 455, 465, 467, 470, 474, 475, 490, 491, 507, 521, 528, 533, 534, 538, 539, 550, 558, 567, 569, 594, 596, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 657, 659, 664, 672, 674, 676, 677, 679, 680, 681, 682, 683, 684], "option": [0, 16, 17, 18, 26, 33, 41, 42, 43, 57, 66, 88, 105, 106, 107, 116, 118, 119, 122, 127, 128, 132, 135, 143, 155, 156, 160, 161, 162, 165, 167, 168, 173, 178, 194, 201, 236, 238, 243, 248, 249, 250, 252, 256, 257, 258, 265, 266, 278, 286, 294, 303, 305, 317, 318, 371, 372, 376, 378, 381, 384, 385, 389, 390, 394, 396, 402, 415, 419, 420, 422, 424, 431, 436, 444, 446, 447, 448, 449, 452, 453, 454, 455, 456, 458, 477, 478, 479, 530, 532, 558, 567, 573, 575, 587, 627, 636, 638, 640, 643, 644, 646, 648, 650, 651, 680, 682], "item": [0, 33, 45, 102, 108, 132, 138, 266, 294, 308, 312, 394, 454, 455, 646, 648], "need": [0, 8, 38, 39, 45, 46, 47, 52, 56, 58, 66, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 154, 170, 266, 271, 278, 286, 300, 301, 308, 309, 310, 315, 320, 322, 344, 347, 355, 357, 358, 362, 368, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 454, 471, 636, 672, 674, 676, 678, 680, 684], "uniqu": [0, 33, 107, 119, 134, 173, 250, 252, 257, 260, 266, 294, 312, 334, 370, 431, 636, 638, 644, 649, 674, 675, 679, 684], "here": [0, 33, 294, 519, 645, 646, 650, 651, 672, 676, 680, 682], "also": [0, 15, 33, 50, 90, 118, 119, 121, 123, 127, 128, 238, 294, 313, 348, 381, 383, 385, 389, 390, 429, 470, 471, 473, 480, 482, 486, 487, 490, 491, 495, 502, 515, 518, 525, 527, 636, 639, 649, 650, 651, 672, 673, 674, 676, 678, 679, 680, 682, 683, 684], "thei": [0, 47, 90, 93, 116, 121, 165, 266, 310, 317, 318, 366, 378, 383, 465, 472, 539, 544, 639, 672, 673, 678, 679, 680, 684], "infer": [0, 4, 161, 178, 248, 249, 257, 266, 420, 439, 646, 649, 657, 674], "from": [0, 4, 5, 11, 14, 16, 18, 20, 33, 34, 35, 41, 43, 48, 53, 54, 57, 66, 76, 84, 88, 90, 99, 102, 105, 107, 108, 112, 118, 119, 122, 123, 132, 138, 143, 144, 145, 158, 160, 161, 165, 169, 172, 173, 177, 181, 183, 190, 203, 204, 206, 208, 211, 212, 240, 248, 249, 250, 254, 255, 256, 257, 258, 260, 266, 276, 277, 278, 294, 295, 296, 303, 305, 316, 317, 319, 321, 348, 349, 371, 380, 381, 384, 385, 394, 402, 403, 405, 417, 419, 420, 429, 435, 446, 458, 460, 461, 465, 467, 476, 477, 478, 479, 482, 511, 513, 514, 515, 516, 517, 521, 528, 529, 530, 532, 533, 535, 545, 558, 562, 563, 564, 570, 575, 581, 582, 583, 584, 585, 588, 591, 595, 599, 601, 615, 626, 627, 636, 637, 638, 643, 644, 645, 646, 647, 648, 650, 651, 657, 658, 672, 674, 675, 676, 677, 678, 680, 684], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 23, 25, 29, 30, 31, 32, 33, 40, 41, 42, 43, 45, 46, 47, 48, 49, 54, 56, 57, 58, 66, 67, 69, 71, 72, 76, 78, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 93, 98, 100, 101, 103, 110, 111, 112, 116, 121, 123, 127, 132, 134, 135, 136, 142, 143, 144, 145, 146, 149, 154, 155, 156, 160, 161, 162, 165, 166, 173, 176, 177, 178, 197, 199, 202, 207, 211, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 236, 238, 244, 247, 248, 249, 252, 265, 266, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 289, 290, 291, 292, 294, 299, 302, 303, 304, 305, 308, 309, 310, 311, 319, 320, 321, 322, 323, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 344, 347, 349, 350, 351, 352, 353, 354, 356, 362, 364, 365, 370, 374, 375, 378, 383, 385, 389, 394, 396, 401, 402, 403, 404, 409, 415, 419, 420, 422, 431, 434, 435, 436, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 460, 467, 470, 475, 476, 477, 478, 481, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 515, 518, 521, 527, 528, 533, 534, 553, 561, 562, 563, 564, 574, 581, 582, 583, 584, 588, 591, 595, 605, 606, 608, 609, 610, 611, 626, 627, 636, 639, 646, 648, 650, 653, 654, 655, 656, 657, 680, 682, 683], "whether": [0, 12, 13, 16, 17, 33, 41, 42, 43, 45, 47, 48, 66, 70, 71, 72, 84, 89, 100, 101, 104, 112, 116, 138, 145, 154, 156, 161, 162, 164, 166, 177, 200, 206, 208, 218, 219, 221, 222, 223, 227, 228, 229, 244, 248, 249, 274, 275, 282, 294, 299, 303, 308, 310, 323, 335, 336, 337, 349, 364, 365, 368, 376, 378, 415, 420, 422, 423, 435, 447, 448, 449, 452, 453, 454, 455, 457, 470, 475, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 534, 627, 636, 646, 651, 653, 654, 655, 656, 663, 676], "thi": [0, 1, 2, 7, 8, 14, 18, 23, 25, 33, 34, 35, 38, 39, 40, 44, 46, 47, 51, 52, 56, 57, 58, 59, 60, 66, 69, 77, 80, 81, 83, 90, 92, 94, 95, 98, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 143, 144, 146, 147, 148, 149, 158, 162, 165, 167, 170, 176, 178, 193, 199, 203, 204, 206, 209, 212, 218, 224, 234, 235, 238, 240, 241, 260, 263, 264, 265, 266, 270, 271, 276, 277, 281, 282, 284, 285, 294, 295, 296, 299, 300, 301, 302, 309, 310, 314, 315, 317, 318, 320, 321, 322, 324, 325, 330, 331, 343, 344, 347, 355, 357, 358, 359, 362, 363, 366, 373, 374, 375, 376, 377, 379, 380, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 402, 403, 404, 405, 407, 408, 409, 417, 422, 424, 427, 428, 431, 434, 436, 439, 443, 447, 448, 449, 450, 453, 454, 455, 458, 464, 465, 469, 471, 473, 474, 477, 478, 479, 481, 486, 488, 489, 492, 493, 494, 495, 497, 499, 501, 502, 503, 506, 507, 510, 511, 513, 514, 515, 518, 522, 523, 525, 527, 528, 529, 533, 535, 536, 537, 540, 541, 544, 546, 561, 567, 575, 587, 626, 627, 636, 637, 638, 639, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 664, 666, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684], "treat": [0, 12, 13, 69, 90, 274, 275, 282, 330, 454, 455, 470, 513, 521, 528, 533, 545, 680, 682, 683], "an": [0, 3, 12, 13, 15, 16, 23, 29, 30, 31, 32, 33, 34, 48, 64, 69, 71, 72, 89, 90, 100, 101, 110, 111, 112, 114, 118, 119, 120, 127, 128, 132, 137, 141, 143, 146, 149, 158, 160, 176, 186, 194, 203, 212, 224, 234, 235, 238, 240, 243, 244, 249, 257, 259, 260, 274, 275, 278, 284, 289, 290, 291, 292, 294, 295, 321, 328, 330, 331, 335, 336, 337, 353, 364, 365, 374, 375, 376, 380, 382, 389, 390, 394, 397, 400, 402, 404, 409, 417, 419, 434, 444, 452, 457, 458, 466, 468, 469, 470, 472, 475, 483, 488, 489, 492, 496, 500, 507, 509, 513, 514, 517, 526, 534, 545, 575, 592, 605, 627, 628, 636, 637, 645, 647, 648, 650, 657, 658, 663, 665, 672, 674, 675, 676, 678, 679, 680, 682, 683, 684], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 26, 29, 30, 31, 32, 33, 38, 39, 40, 42, 46, 49, 50, 52, 56, 57, 58, 69, 70, 78, 79, 81, 83, 85, 86, 87, 88, 90, 91, 92, 94, 95, 98, 107, 109, 110, 111, 112, 115, 117, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 135, 138, 142, 145, 146, 147, 148, 149, 150, 155, 161, 164, 168, 170, 171, 173, 176, 194, 206, 218, 230, 243, 244, 250, 260, 266, 271, 274, 275, 277, 278, 281, 286, 289, 290, 291, 292, 294, 300, 301, 302, 309, 311, 313, 315, 320, 321, 322, 330, 335, 341, 342, 344, 347, 350, 351, 352, 354, 355, 357, 358, 362, 373, 374, 375, 377, 379, 383, 384, 386, 387, 388, 389, 391, 392, 393, 394, 396, 401, 404, 407, 408, 409, 410, 420, 423, 427, 431, 434, 444, 446, 455, 456, 460, 465, 466, 478, 507, 509, 517, 526, 545, 550, 558, 561, 562, 563, 564, 569, 570, 573, 575, 581, 582, 583, 584, 587, 588, 591, 592, 594, 595, 636, 643, 644, 649, 652, 658, 659, 672, 674, 675, 677, 678, 679, 680, 681, 683], "unord": [0, 90, 449, 636], "categoricaldtyp": [0, 21, 280, 672, 678], "cannot": [0, 50, 67, 132, 161, 209, 218, 278, 313, 363, 366, 394, 420, 515, 561, 639, 678, 679], "us": [0, 4, 11, 14, 16, 21, 26, 33, 41, 42, 44, 48, 50, 55, 57, 59, 60, 64, 66, 69, 78, 79, 82, 85, 86, 88, 89, 90, 91, 102, 103, 105, 106, 107, 112, 113, 114, 118, 119, 121, 122, 123, 127, 128, 132, 134, 138, 143, 146, 155, 156, 160, 161, 162, 163, 164, 165, 167, 172, 173, 176, 179, 184, 191, 193, 194, 197, 209, 212, 241, 243, 247, 250, 256, 264, 265, 266, 276, 277, 278, 280, 286, 294, 303, 305, 313, 317, 321, 324, 325, 328, 330, 335, 341, 342, 346, 348, 350, 351, 353, 354, 371, 372, 376, 380, 383, 384, 385, 389, 390, 394, 402, 404, 415, 418, 419, 420, 422, 423, 424, 429, 434, 443, 444, 445, 455, 456, 465, 469, 470, 471, 473, 475, 477, 478, 479, 480, 486, 494, 504, 507, 513, 514, 515, 521, 522, 523, 524, 525, 528, 531, 533, 538, 539, 543, 544, 550, 561, 562, 563, 564, 566, 567, 569, 575, 581, 582, 583, 584, 588, 590, 591, 593, 594, 595, 597, 603, 616, 618, 626, 627, 633, 635, 636, 638, 639, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684], "togeth": [0, 106, 201, 372, 671, 676, 679, 680], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 23, 25, 26, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 66, 67, 69, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 105, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 160, 161, 162, 163, 164, 165, 169, 170, 172, 173, 176, 177, 178, 193, 194, 199, 206, 207, 208, 209, 211, 218, 230, 233, 236, 238, 241, 243, 244, 248, 249, 250, 252, 264, 265, 266, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 294, 298, 300, 301, 302, 303, 304, 305, 309, 311, 313, 315, 319, 320, 321, 322, 324, 325, 330, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 401, 402, 403, 404, 407, 408, 409, 415, 418, 419, 420, 422, 423, 427, 431, 434, 435, 436, 443, 444, 446, 447, 448, 449, 453, 454, 455, 456, 458, 460, 465, 466, 467, 470, 471, 472, 476, 478, 479, 481, 487, 507, 509, 511, 512, 513, 514, 515, 517, 518, 521, 522, 526, 527, 528, 529, 531, 532, 533, 535, 538, 539, 551, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 573, 575, 580, 581, 582, 583, 584, 586, 588, 591, 595, 626, 627, 633, 635, 636, 638, 639, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 674, 679, 680, 682, 683, 684], "make": [0, 25, 45, 178, 197, 199, 247, 256, 257, 258, 285, 308, 429, 436, 445, 478, 521, 528, 533, 540, 646, 650, 672, 674, 676, 680], "input": [0, 4, 8, 16, 17, 19, 23, 33, 38, 39, 46, 52, 53, 54, 56, 57, 58, 68, 81, 83, 92, 94, 95, 98, 109, 114, 115, 117, 124, 125, 126, 128, 129, 130, 131, 143, 147, 148, 153, 160, 170, 173, 178, 197, 199, 211, 247, 248, 249, 255, 271, 279, 284, 294, 300, 301, 309, 312, 315, 316, 319, 320, 321, 322, 344, 347, 348, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 390, 391, 392, 393, 402, 407, 408, 413, 419, 427, 436, 445, 483, 507, 520, 592, 626, 627, 628, 636, 637, 639, 646, 649, 651, 657, 658, 664, 672, 673, 676, 679, 680, 681], "object": [0, 3, 4, 8, 14, 15, 21, 25, 33, 34, 35, 36, 38, 39, 40, 44, 46, 47, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 71, 72, 77, 81, 83, 89, 90, 92, 94, 95, 98, 100, 101, 106, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 137, 138, 143, 147, 148, 152, 155, 158, 160, 161, 163, 164, 167, 170, 172, 178, 197, 199, 201, 203, 204, 205, 206, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 234, 235, 236, 239, 240, 244, 247, 248, 249, 250, 252, 254, 260, 261, 265, 266, 271, 276, 277, 278, 280, 283, 285, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 309, 310, 312, 313, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 334, 336, 337, 340, 344, 347, 348, 353, 355, 357, 358, 359, 362, 364, 365, 372, 373, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 397, 402, 407, 408, 412, 414, 417, 418, 419, 420, 424, 427, 428, 429, 431, 436, 445, 446, 464, 465, 466, 467, 468, 470, 472, 475, 476, 477, 478, 479, 482, 483, 486, 487, 505, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 561, 567, 587, 612, 618, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 664, 670, 672, 673, 676, 677, 680, 681], "store": [0, 160, 163, 165, 178, 197, 199, 247, 248, 249, 265, 266, 278, 317, 419, 436, 445, 483, 636, 645, 646, 648, 650, 651, 672, 674, 678, 680, 684], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 25, 29, 30, 31, 32, 33, 37, 38, 39, 41, 43, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 141, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 158, 160, 161, 163, 165, 166, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 197, 247, 248, 249, 250, 252, 254, 257, 258, 259, 260, 262, 264, 265, 266, 271, 276, 278, 279, 284, 285, 289, 290, 291, 292, 294, 300, 301, 303, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 328, 330, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 362, 364, 365, 366, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 400, 402, 403, 404, 405, 407, 408, 409, 413, 414, 417, 418, 419, 420, 423, 427, 429, 434, 436, 443, 444, 445, 446, 451, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 559, 561, 570, 597, 603, 616, 627, 636, 639, 643, 644, 646, 649, 650, 651, 654, 655, 656, 659, 664, 673, 675, 677, 680, 681, 683, 684], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 190, 191, 193, 194, 197, 199, 200, 201, 203, 204, 205, 206, 209, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 422, 423, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 554, 558, 559, 561, 562, 563, 564, 567, 568, 569, 570, 573, 575, 576, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 594, 595, 597, 602, 603, 605, 606, 608, 609, 610, 611, 612, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 657, 658, 659, 663, 667, 670, 672, 674, 675, 676, 679, 680], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 25, 27, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 64, 66, 68, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 167, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 199, 201, 206, 209, 211, 212, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 233, 234, 236, 238, 239, 242, 244, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 418, 423, 424, 427, 428, 429, 431, 434, 435, 436, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 561, 569, 570, 573, 575, 587, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 636, 638, 639, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 672, 674, 675, 676, 678, 679, 680, 683, 684], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 27, 29, 30, 31, 32, 33, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 57, 59, 64, 66, 68, 70, 71, 72, 77, 78, 79, 82, 84, 85, 86, 87, 90, 91, 93, 96, 99, 100, 101, 102, 103, 110, 111, 112, 114, 119, 120, 121, 127, 132, 133, 136, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 164, 167, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 195, 196, 199, 201, 206, 209, 211, 212, 218, 219, 220, 221, 222, 223, 227, 228, 230, 233, 236, 238, 242, 244, 249, 252, 253, 254, 255, 256, 260, 261, 265, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 302, 303, 305, 308, 310, 311, 312, 313, 316, 317, 318, 319, 323, 324, 328, 335, 336, 337, 340, 341, 342, 346, 349, 350, 351, 352, 354, 356, 360, 363, 364, 365, 366, 374, 375, 376, 380, 381, 382, 383, 389, 394, 395, 400, 401, 402, 403, 404, 409, 410, 411, 413, 414, 418, 423, 424, 428, 429, 431, 434, 435, 436, 446, 447, 448, 449, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 558, 569, 570, 573, 575, 587, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 638, 642, 643, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 674, 675, 676, 678, 679, 680, 683, 684], "panda": [0, 4, 5, 11, 15, 22, 33, 44, 48, 54, 57, 63, 66, 71, 72, 75, 76, 89, 99, 100, 101, 102, 112, 114, 119, 121, 127, 132, 143, 144, 155, 160, 164, 167, 169, 171, 180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 211, 218, 223, 242, 244, 249, 277, 294, 317, 319, 321, 336, 337, 353, 364, 365, 381, 383, 389, 394, 402, 403, 405, 419, 423, 424, 460, 544, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 613, 614, 617, 618, 619, 620, 628, 638, 643, 645, 648, 649, 651, 653, 654, 656, 658, 659, 666, 667, 672, 673, 676, 677, 678, 679, 680, 681, 683], "pd": [0, 4, 44, 54, 57, 71, 72, 100, 101, 127, 180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 211, 218, 223, 244, 249, 260, 317, 319, 336, 337, 364, 365, 389, 423, 502, 561, 570, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 645, 674, 675, 678, 680, 683, 684], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 25, 29, 30, 31, 32, 33, 37, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 64, 66, 68, 70, 71, 72, 77, 78, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 114, 115, 119, 120, 121, 122, 123, 127, 128, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 164, 167, 171, 173, 176, 177, 178, 180, 181, 182, 183, 185, 188, 189, 190, 192, 195, 199, 201, 206, 209, 218, 219, 220, 221, 222, 227, 228, 229, 230, 233, 236, 238, 239, 244, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 298, 299, 302, 303, 304, 305, 308, 310, 311, 313, 314, 316, 317, 318, 319, 323, 324, 325, 328, 335, 336, 337, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 354, 356, 360, 364, 365, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 389, 390, 392, 394, 395, 396, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 419, 423, 424, 428, 429, 431, 434, 435, 436, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 550, 558, 561, 569, 570, 573, 575, 587, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 636, 638, 639, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 672, 674, 675, 676, 677, 678, 679, 680, 683, 684], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 25, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 64, 66, 68, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 164, 167, 170, 171, 176, 177, 178, 180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 199, 206, 209, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 233, 236, 238, 239, 242, 244, 249, 250, 253, 254, 255, 256, 260, 261, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 306, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 322, 323, 325, 328, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 366, 373, 374, 375, 376, 377, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 423, 424, 427, 428, 429, 431, 434, 435, 436, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 477, 479, 480, 484, 485, 486, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 518, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 545, 546, 547, 550, 558, 569, 570, 573, 575, 587, 592, 594, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 636, 638, 639, 643, 644, 646, 654, 655, 656, 657, 659, 674, 675, 676, 678, 679, 680, 683, 684], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 25, 27, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 64, 66, 68, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 107, 109, 110, 111, 112, 114, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 170, 173, 176, 177, 178, 181, 182, 183, 190, 195, 206, 209, 218, 221, 222, 227, 228, 229, 230, 236, 238, 239, 244, 255, 260, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 284, 285, 287, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 309, 311, 313, 314, 315, 318, 320, 322, 323, 325, 328, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 373, 374, 375, 376, 377, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 427, 428, 429, 431, 434, 435, 436, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 471, 473, 478, 496, 497, 498, 499, 532, 533, 539, 542, 543, 546, 547, 550, 561, 569, 570, 573, 575, 587, 592, 594, 599, 600, 601, 602, 605, 606, 608, 609, 612, 615, 619, 621, 622, 623, 624, 625, 628, 636, 638, 639, 643, 644, 655, 656, 657, 674, 675, 676, 678, 679, 680, 682, 683], "na": [0, 4, 8, 12, 13, 15, 27, 29, 30, 31, 32, 33, 37, 38, 39, 43, 45, 46, 49, 50, 52, 56, 58, 71, 72, 78, 79, 81, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 98, 100, 101, 105, 107, 109, 110, 111, 115, 117, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 141, 142, 146, 147, 148, 149, 164, 170, 171, 172, 173, 176, 177, 209, 211, 271, 274, 275, 277, 282, 283, 287, 289, 290, 291, 292, 294, 298, 300, 301, 305, 308, 309, 311, 313, 315, 316, 318, 319, 320, 322, 323, 336, 337, 341, 342, 344, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 371, 373, 374, 375, 377, 379, 380, 383, 384, 386, 387, 388, 391, 392, 393, 400, 401, 404, 407, 408, 409, 418, 423, 427, 428, 429, 431, 434, 435, 446, 453, 455, 458, 459, 465, 466, 470, 471, 475, 476, 481, 507, 508, 511, 512, 521, 528, 529, 533, 534, 535, 545, 551, 552, 558, 560, 561, 562, 563, 564, 565, 571, 572, 573, 575, 580, 581, 582, 583, 584, 586, 588, 591, 595, 612, 638, 644, 646, 658, 659, 674, 675, 679, 680, 681, 684], "properti": [1, 2, 5, 22, 24, 44, 45, 63, 64, 65, 82, 97, 139, 141, 174, 175, 180, 181, 182, 183, 185, 186, 188, 189, 190, 192, 195, 196, 215, 224, 225, 226, 231, 232, 237, 246, 251, 253, 261, 262, 263, 267, 283, 293, 306, 307, 308, 323, 328, 329, 331, 332, 333, 334, 345, 346, 359, 361, 367, 368, 369, 398, 400, 405, 406, 430, 432, 433, 437, 438, 439, 440, 441, 442, 450, 451, 452, 549, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 619, 620, 621, 622, 623, 624, 625, 668, 674], "other": [3, 8, 14, 17, 21, 38, 39, 40, 46, 47, 52, 56, 58, 70, 76, 81, 83, 84, 92, 93, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 137, 143, 147, 148, 161, 163, 165, 170, 172, 177, 201, 206, 207, 218, 230, 235, 244, 265, 271, 278, 280, 282, 286, 288, 300, 301, 302, 309, 310, 315, 320, 322, 344, 347, 349, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 397, 402, 407, 408, 420, 427, 429, 435, 446, 455, 465, 470, 502, 518, 521, 527, 533, 561, 639, 649, 672, 674, 677, 680, 683, 684], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 29, 30, 31, 32, 47, 48, 69, 78, 79, 85, 86, 87, 88, 91, 106, 110, 111, 134, 142, 146, 149, 155, 157, 159, 160, 161, 163, 164, 165, 176, 199, 252, 274, 275, 277, 280, 287, 330, 341, 342, 350, 351, 352, 354, 372, 374, 375, 380, 383, 401, 402, 404, 409, 416, 419, 420, 423, 434, 544, 555, 556, 557, 562, 563, 564, 577, 578, 579, 581, 582, 583, 584, 587, 588, 591, 595, 618, 628, 630, 631, 632, 634, 639, 645, 646, 647, 648, 649, 650, 651, 652, 680], "determin": [3, 16, 42, 57, 134, 277, 321, 469, 512, 528, 533, 646, 658, 684], "two": [3, 14, 47, 93, 107, 112, 113, 118, 119, 206, 218, 233, 244, 266, 286, 310, 376, 385, 446, 472, 518, 527, 566, 644, 646, 653, 654, 655, 656, 672, 676, 680], "contain": [3, 4, 14, 16, 33, 34, 35, 36, 43, 45, 47, 48, 57, 61, 62, 68, 70, 93, 114, 119, 132, 137, 152, 153, 158, 160, 165, 172, 173, 191, 193, 203, 204, 205, 208, 216, 217, 231, 235, 239, 240, 241, 248, 259, 262, 264, 266, 282, 294, 295, 296, 297, 299, 305, 306, 308, 310, 312, 317, 321, 323, 326, 327, 335, 385, 394, 397, 412, 413, 417, 419, 429, 431, 443, 454, 465, 468, 474, 480, 483, 486, 507, 518, 523, 524, 525, 527, 528, 533, 534, 539, 550, 569, 594, 626, 627, 637, 646, 648, 649, 651, 655, 664, 665, 672, 674, 679, 680, 682, 684], "same": [3, 21, 33, 43, 47, 48, 66, 69, 71, 72, 84, 100, 101, 116, 118, 120, 121, 128, 132, 143, 160, 165, 172, 177, 179, 184, 234, 236, 248, 266, 278, 280, 294, 299, 305, 310, 330, 336, 337, 348, 349, 364, 365, 378, 382, 383, 390, 394, 402, 419, 435, 454, 458, 465, 481, 486, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 520, 525, 534, 592, 618, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 646, 649, 654, 655, 657, 672, 674, 677, 679, 680, 682, 683, 684], "element": [3, 7, 8, 12, 13, 18, 23, 37, 38, 39, 40, 43, 46, 47, 48, 49, 52, 56, 58, 66, 70, 71, 72, 81, 83, 92, 93, 94, 95, 98, 100, 101, 103, 105, 109, 115, 116, 117, 120, 124, 125, 126, 128, 129, 130, 131, 135, 136, 137, 141, 146, 147, 148, 170, 173, 176, 200, 206, 207, 218, 234, 235, 257, 270, 271, 274, 275, 282, 284, 298, 300, 301, 302, 309, 310, 311, 315, 320, 322, 335, 336, 337, 344, 347, 355, 357, 358, 362, 363, 364, 365, 366, 371, 373, 377, 378, 379, 382, 386, 387, 388, 390, 391, 392, 393, 396, 397, 400, 404, 407, 408, 427, 431, 434, 438, 440, 441, 442, 456, 457, 458, 459, 461, 462, 465, 467, 470, 471, 474, 475, 482, 492, 493, 494, 495, 501, 502, 503, 506, 507, 508, 518, 523, 527, 528, 530, 533, 534, 633, 635, 646, 655, 672, 674, 677, 680], "out": [3, 45, 88, 152, 155, 160, 161, 164, 239, 293, 308, 323, 412, 419, 420, 423, 458, 528, 533, 570, 636, 643, 650, 651, 672, 676, 680, 681], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 23, 25, 27, 29, 30, 31, 32, 40, 42, 43, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 66, 67, 70, 71, 72, 75, 76, 78, 79, 81, 83, 84, 85, 86, 87, 89, 91, 93, 98, 100, 101, 103, 104, 110, 111, 112, 116, 118, 119, 121, 123, 127, 132, 134, 135, 136, 138, 142, 143, 144, 145, 146, 149, 152, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 176, 177, 178, 193, 199, 200, 202, 207, 211, 219, 220, 221, 222, 223, 227, 228, 229, 236, 238, 239, 241, 250, 252, 260, 264, 266, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 289, 290, 291, 292, 302, 304, 305, 308, 309, 310, 311, 313, 319, 320, 321, 322, 323, 335, 336, 337, 341, 342, 344, 347, 349, 350, 351, 352, 353, 354, 356, 362, 364, 365, 370, 374, 375, 376, 378, 380, 381, 383, 385, 389, 394, 396, 401, 402, 403, 404, 409, 412, 415, 419, 420, 422, 423, 431, 434, 435, 443, 446, 447, 448, 449, 453, 455, 456, 457, 460, 467, 470, 475, 476, 477, 478, 481, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 515, 518, 521, 527, 528, 533, 534, 544, 553, 561, 574, 605, 606, 608, 609, 610, 611, 626, 627, 636, 638, 639, 646, 649, 650, 651, 653, 654, 655, 656, 657, 674, 675, 677, 679, 680, 681, 683], "ha": [3, 19, 53, 54, 60, 66, 93, 171, 186, 211, 244, 257, 279, 316, 319, 323, 325, 471, 476, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 506, 545, 605, 651, 659, 672, 674, 677, 679, 680, 682, 683], "call": [3, 11, 17, 25, 57, 118, 119, 132, 161, 172, 212, 277, 278, 285, 321, 394, 420, 447, 486, 525, 639, 663, 665, 670, 672, 674, 679, 680, 682], "otherwis": [3, 19, 41, 47, 48, 128, 135, 155, 161, 236, 250, 260, 277, 279, 303, 310, 318, 376, 390, 396, 405, 420, 460, 465, 646, 649, 658, 673, 674], "nan_as_nul": [4, 54, 55, 67, 96, 199, 211, 221, 266, 319, 360, 429, 638, 683], "gpu": [4, 16, 17, 90, 114, 266, 278, 293, 369, 627, 646, 652, 666, 672, 673, 674, 676, 680, 681, 682, 684], "iter": [4, 11, 14, 17, 70, 73, 93, 106, 256, 257, 258, 266, 372, 587, 648, 649, 664, 679, 680, 681], "dict": [4, 11, 14, 16, 17, 21, 34, 35, 36, 50, 57, 61, 62, 70, 89, 114, 119, 121, 128, 137, 161, 203, 204, 205, 209, 216, 217, 235, 266, 280, 295, 296, 297, 313, 321, 326, 327, 348, 383, 390, 397, 420, 478, 540, 550, 561, 569, 594, 638, 646, 649, 651, 657, 672, 680, 683], "can": [4, 14, 16, 23, 33, 34, 41, 48, 50, 51, 57, 69, 70, 80, 90, 93, 103, 106, 114, 118, 121, 123, 127, 128, 132, 137, 146, 160, 164, 176, 203, 235, 260, 282, 284, 294, 295, 303, 304, 313, 314, 318, 321, 330, 343, 356, 372, 380, 383, 385, 389, 390, 394, 397, 404, 419, 423, 429, 431, 434, 455, 458, 465, 478, 480, 486, 502, 504, 507, 513, 522, 525, 528, 533, 544, 550, 567, 569, 575, 587, 594, 618, 626, 627, 639, 643, 646, 648, 649, 651, 655, 657, 667, 668, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 23, 25, 27, 29, 30, 31, 32, 33, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 59, 60, 64, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 105, 106, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 168, 170, 171, 172, 173, 177, 194, 220, 238, 240, 243, 252, 261, 265, 444, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 559, 561, 562, 563, 564, 567, 569, 575, 581, 582, 583, 584, 587, 588, 591, 592, 594, 595, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 649, 652, 656, 657, 658, 659, 663, 664, 665, 668, 670, 672, 673, 675, 677, 678, 679, 681, 683, 684], "constant": [4, 278, 627, 638], "frame": [4, 8, 34, 35, 36, 38, 39, 40, 46, 52, 56, 58, 60, 61, 62, 66, 81, 83, 88, 90, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 135, 136, 143, 144, 147, 148, 152, 153, 156, 162, 164, 170, 203, 204, 205, 216, 217, 255, 271, 295, 296, 297, 300, 301, 302, 309, 315, 320, 322, 325, 326, 327, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 396, 402, 407, 408, 412, 413, 415, 422, 427, 643, 649, 671, 683], "Will": [4, 161, 165, 266, 420, 639], "rangeindex": [4, 66, 138, 141, 143, 165, 266, 340, 400, 402, 639, 655, 672], "inform": [4, 15, 19, 40, 57, 66, 160, 277, 279, 302, 321, 419, 454, 455, 627, 649, 657, 672, 674, 680, 682, 683], "part": [4, 165, 518, 527, 570, 675], "provid": [4, 16, 21, 22, 33, 50, 63, 119, 127, 128, 132, 155, 162, 171, 199, 212, 252, 256, 257, 260, 265, 266, 280, 294, 313, 389, 390, 394, 422, 446, 458, 479, 522, 538, 539, 558, 636, 638, 649, 659, 664, 667, 672, 673, 674, 675, 676, 678, 679, 680, 683, 684], "label": [4, 9, 10, 11, 14, 21, 41, 42, 47, 49, 57, 65, 67, 70, 82, 90, 99, 118, 119, 122, 132, 138, 143, 171, 172, 174, 175, 197, 198, 199, 214, 233, 236, 247, 250, 251, 252, 257, 259, 260, 266, 272, 273, 280, 303, 310, 311, 312, 321, 329, 346, 380, 384, 394, 402, 432, 433, 445, 460, 549, 636, 646, 649, 654, 659, 664, 672, 679, 681], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 27, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 64, 66, 68, 69, 70, 71, 72, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 160, 164, 167, 170, 171, 173, 176, 177, 182, 185, 188, 192, 195, 211, 212, 220, 221, 222, 223, 227, 228, 234, 236, 238, 239, 244, 249, 252, 253, 254, 255, 256, 257, 261, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 330, 335, 336, 337, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362, 364, 365, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 419, 423, 424, 427, 428, 429, 431, 434, 435, 436, 440, 441, 442, 446, 447, 448, 449, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 559, 561, 562, 563, 564, 566, 567, 569, 570, 573, 575, 581, 582, 583, 584, 587, 588, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 636, 638, 639, 642, 643, 645, 646, 647, 650, 651, 654, 655, 656, 657, 658, 659, 672, 674, 675, 676, 677, 678, 679, 680, 683, 684], "n": [4, 15, 42, 49, 60, 78, 79, 99, 102, 116, 132, 146, 151, 155, 176, 179, 184, 191, 252, 266, 281, 288, 311, 312, 325, 341, 342, 363, 366, 378, 394, 404, 411, 434, 460, 467, 468, 474, 483, 497, 503, 508, 511, 513, 514, 515, 521, 528, 529, 530, 533, 535, 575, 585, 590, 593, 597, 603, 616, 624, 633, 635, 646, 674], "type": [4, 11, 15, 21, 25, 33, 44, 47, 48, 53, 54, 57, 60, 69, 71, 72, 84, 90, 93, 100, 101, 106, 110, 111, 112, 116, 120, 121, 123, 128, 132, 149, 150, 161, 164, 167, 177, 179, 184, 194, 211, 219, 220, 221, 222, 223, 227, 228, 230, 234, 236, 242, 243, 255, 260, 265, 266, 277, 280, 285, 294, 299, 310, 316, 319, 325, 330, 336, 337, 348, 349, 364, 365, 372, 374, 375, 378, 382, 383, 390, 394, 409, 410, 420, 423, 424, 429, 435, 436, 444, 446, 465, 507, 528, 531, 533, 558, 567, 587, 627, 629, 630, 631, 632, 633, 634, 635, 636, 646, 648, 649, 657, 658, 663, 667, 673, 674, 675, 679, 680, 681, 683], "forc": [4, 161, 420, 649, 674], "onli": [4, 5, 7, 8, 19, 23, 25, 33, 37, 38, 39, 41, 42, 43, 45, 46, 48, 52, 56, 57, 58, 66, 69, 70, 76, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 109, 115, 116, 117, 119, 123, 124, 125, 126, 127, 129, 130, 131, 143, 144, 147, 148, 155, 160, 161, 169, 170, 172, 174, 175, 177, 208, 212, 219, 220, 221, 222, 223, 227, 228, 250, 251, 270, 271, 278, 279, 284, 285, 294, 300, 301, 303, 305, 308, 309, 315, 320, 321, 322, 330, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 362, 373, 377, 378, 379, 381, 385, 386, 387, 388, 389, 391, 392, 393, 402, 403, 407, 408, 419, 420, 427, 428, 432, 433, 435, 446, 464, 470, 471, 476, 477, 481, 507, 512, 515, 528, 533, 536, 537, 541, 558, 559, 562, 563, 564, 567, 573, 581, 582, 583, 584, 588, 591, 595, 627, 636, 639, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 663, 667, 672, 674, 677, 680, 682, 683], "singl": [4, 8, 11, 14, 15, 18, 27, 38, 39, 41, 46, 48, 52, 56, 57, 58, 64, 68, 76, 81, 82, 83, 92, 94, 95, 98, 99, 102, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 161, 170, 171, 260, 271, 300, 301, 303, 309, 315, 320, 321, 322, 328, 335, 344, 346, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 420, 427, 465, 473, 520, 522, 567, 646, 648, 650, 651, 652, 659, 672, 674, 676, 677, 679, 680], "allow": [4, 15, 21, 47, 48, 66, 90, 119, 132, 160, 161, 266, 277, 280, 310, 394, 419, 420, 636, 649, 650, 651, 653, 654, 655, 656, 672, 674, 678, 680, 682, 684], "convert": [4, 21, 53, 54, 55, 67, 68, 96, 118, 122, 127, 137, 138, 154, 156, 158, 161, 162, 164, 165, 166, 167, 199, 211, 235, 240, 242, 255, 256, 257, 258, 260, 266, 280, 316, 319, 348, 360, 380, 384, 389, 397, 414, 415, 417, 418, 420, 422, 423, 424, 464, 488, 489, 504, 510, 536, 537, 541, 543, 545, 618, 637, 648, 649, 657, 658, 672, 677, 681, 683], "np": [4, 17, 27, 33, 43, 54, 66, 67, 71, 72, 89, 96, 100, 101, 114, 123, 127, 162, 164, 199, 211, 221, 227, 266, 294, 299, 319, 336, 337, 348, 360, 364, 365, 389, 422, 423, 429, 470, 636, 638, 646, 658, 678, 680, 683], "null": [4, 12, 13, 15, 16, 17, 27, 29, 30, 31, 32, 41, 43, 45, 50, 54, 57, 66, 67, 71, 72, 78, 79, 85, 86, 87, 91, 96, 100, 101, 110, 111, 114, 122, 127, 135, 142, 144, 146, 149, 155, 161, 164, 167, 176, 199, 207, 208, 209, 211, 266, 274, 275, 277, 287, 289, 290, 291, 292, 303, 305, 308, 313, 318, 319, 323, 336, 337, 341, 342, 350, 351, 352, 354, 360, 364, 365, 367, 368, 369, 374, 375, 384, 389, 396, 401, 403, 404, 405, 409, 414, 420, 423, 424, 430, 434, 446, 453, 455, 456, 460, 465, 474, 507, 553, 567, 573, 574, 575, 638, 646, 658, 672, 681], "leav": [4, 54, 67, 88, 199, 211, 266, 319, 643, 658, 680], "build": [4, 248, 680], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 27, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 64, 66, 68, 70, 71, 72, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 164, 167, 170, 171, 173, 176, 177, 253, 256, 261, 271, 272, 273, 274, 275, 279, 280, 284, 289, 290, 291, 292, 294, 300, 301, 302, 303, 308, 309, 310, 313, 315, 320, 322, 324, 325, 328, 336, 337, 341, 342, 344, 346, 347, 349, 350, 351, 354, 355, 357, 358, 360, 362, 364, 365, 372, 373, 374, 375, 377, 379, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 396, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 413, 424, 427, 434, 435, 561, 570, 587, 592, 638, 641, 642, 643, 647, 650, 651, 657, 659, 674, 675, 676, 677, 679, 680, 683, 684], "kei": [4, 14, 57, 60, 70, 76, 90, 128, 138, 143, 151, 160, 167, 172, 194, 198, 213, 230, 238, 243, 250, 260, 266, 321, 325, 390, 402, 411, 419, 424, 444, 478, 547, 549, 554, 570, 576, 648, 651, 657, 672, 674, 675, 679, 680], "val": [4, 60, 151, 167, 325, 411, 424, 570, 674], "float": [4, 8, 38, 39, 44, 46, 52, 56, 58, 60, 71, 72, 81, 83, 85, 86, 90, 91, 92, 94, 95, 98, 100, 101, 109, 112, 113, 115, 117, 118, 124, 125, 126, 129, 130, 131, 132, 147, 148, 151, 161, 167, 170, 197, 219, 220, 221, 222, 223, 227, 228, 250, 271, 281, 288, 300, 301, 309, 315, 320, 322, 325, 336, 337, 344, 347, 350, 351, 354, 355, 357, 358, 362, 364, 365, 373, 376, 377, 379, 380, 386, 387, 388, 391, 392, 393, 394, 407, 408, 411, 420, 424, 427, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 562, 563, 564, 566, 581, 582, 583, 584, 588, 591, 595, 646, 653, 654, 655, 656, 657, 658, 672, 674, 675, 678, 680, 681], "i": [4, 14, 16, 17, 48, 51, 60, 80, 90, 112, 113, 116, 127, 151, 167, 314, 325, 343, 376, 378, 389, 411, 424, 458, 474, 475, 482, 530, 534, 628, 642, 672, 674, 676, 680, 681], "10": [4, 7, 12, 13, 21, 29, 30, 31, 32, 33, 40, 41, 44, 47, 48, 59, 60, 64, 66, 78, 79, 82, 84, 85, 86, 87, 90, 91, 96, 110, 111, 112, 114, 119, 120, 121, 122, 132, 133, 135, 138, 141, 142, 146, 149, 150, 151, 161, 167, 176, 177, 201, 211, 223, 234, 238, 242, 253, 261, 265, 270, 274, 275, 278, 280, 289, 290, 291, 292, 294, 299, 302, 303, 310, 318, 319, 324, 325, 328, 340, 341, 342, 346, 349, 350, 351, 352, 354, 360, 374, 375, 380, 381, 382, 383, 384, 385, 394, 395, 396, 400, 401, 404, 409, 410, 411, 418, 420, 423, 424, 434, 435, 448, 449, 453, 454, 455, 468, 482, 488, 489, 494, 499, 509, 517, 570, 602, 605, 608, 609, 621, 622, 623, 625, 636, 639, 645, 657, 673, 676, 680, 681, 683, 684], "rang": [4, 14, 16, 41, 48, 60, 64, 89, 90, 122, 151, 165, 167, 265, 303, 325, 328, 384, 385, 411, 424, 446, 478, 636, 642, 646, 649, 674, 676, 680, 683, 684], "5": [4, 8, 9, 10, 14, 15, 20, 27, 29, 30, 31, 32, 33, 37, 40, 41, 42, 47, 48, 49, 50, 53, 60, 64, 66, 68, 71, 72, 82, 84, 86, 87, 90, 100, 101, 103, 112, 113, 114, 115, 119, 121, 122, 123, 127, 132, 133, 135, 136, 138, 141, 142, 151, 153, 154, 171, 177, 181, 182, 183, 187, 195, 206, 218, 220, 223, 234, 238, 244, 255, 260, 271, 272, 273, 276, 277, 278, 281, 283, 286, 287, 289, 290, 291, 292, 294, 298, 299, 302, 303, 304, 310, 311, 313, 318, 325, 328, 335, 336, 337, 340, 346, 349, 351, 352, 356, 363, 364, 365, 366, 376, 377, 383, 384, 389, 394, 395, 396, 400, 401, 403, 411, 413, 428, 429, 431, 435, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 461, 463, 466, 467, 468, 469, 471, 479, 480, 486, 492, 497, 524, 525, 530, 531, 539, 542, 543, 550, 566, 569, 570, 573, 575, 592, 594, 599, 600, 601, 602, 605, 606, 608, 609, 612, 619, 628, 636, 639, 643, 653, 654, 655, 656, 657, 659, 672, 674, 675, 676, 678, 679, 680, 683, 684], "insert": [4, 60, 123, 135, 151, 325, 385, 396, 411, 532, 664, 672, 681], "11": [4, 41, 48, 49, 51, 60, 80, 82, 90, 122, 127, 133, 135, 138, 141, 167, 238, 253, 261, 303, 314, 318, 325, 340, 343, 346, 384, 385, 389, 395, 396, 400, 418, 424, 463, 468, 504, 602, 605, 642, 646, 647, 650, 651, 657, 674, 676, 679, 682, 683], "12": [4, 29, 30, 31, 32, 33, 37, 41, 82, 90, 122, 133, 135, 138, 141, 167, 179, 181, 182, 183, 184, 187, 189, 190, 195, 196, 253, 261, 286, 288, 289, 290, 291, 292, 294, 303, 306, 318, 340, 346, 384, 385, 395, 396, 400, 418, 424, 468, 477, 483, 488, 489, 544, 570, 575, 599, 600, 601, 602, 605, 610, 611, 614, 615, 619, 620, 621, 622, 623, 624, 625, 657, 672, 674, 680], "13": [4, 41, 51, 80, 90, 122, 135, 138, 151, 286, 288, 303, 306, 314, 318, 340, 343, 384, 385, 396, 411, 418, 468, 621, 622, 623, 625, 674, 676], "14": [4, 15, 66, 90, 96, 122, 135, 138, 151, 306, 318, 340, 360, 384, 396, 411, 468, 621, 622, 623, 625, 674, 680], "via": [4, 33, 132, 160, 294, 394, 419, 455, 666, 672, 674, 676, 679], "numpi": [4, 17, 19, 21, 27, 33, 55, 66, 71, 72, 96, 100, 101, 114, 127, 132, 156, 162, 166, 175, 197, 199, 211, 247, 265, 266, 278, 279, 280, 294, 319, 336, 337, 360, 364, 365, 389, 394, 415, 422, 433, 436, 445, 636, 638, 649, 657, 680, 681, 683, 684], "datetim": [4, 33, 44, 112, 114, 122, 127, 161, 178, 180, 185, 188, 191, 192, 196, 294, 306, 384, 389, 420, 436, 598, 604, 613, 617, 620, 642, 646, 647, 650, 651, 653, 654, 656, 657, 672, 674, 678, 679, 680, 681, 684], "timedelta": [4, 112, 127, 389, 437, 621, 678, 680], "t0": 4, "strptime": [4, 114, 657, 674], "2018": [4, 44, 51, 80, 114, 122, 236, 314, 343, 384, 610, 611, 642, 646, 647, 650, 651, 674], "07": [4, 114, 118, 122, 127, 181, 182, 183, 195, 384, 389, 599, 600, 601, 602, 612, 619], "00": [4, 7, 33, 43, 59, 66, 71, 72, 100, 101, 118, 122, 127, 178, 179, 184, 185, 187, 188, 190, 191, 192, 270, 294, 306, 324, 336, 337, 364, 365, 384, 389, 436, 550, 569, 594, 597, 603, 604, 613, 615, 616, 617, 621, 622, 623, 624, 625, 642, 646, 647, 650, 651, 674, 683, 684], "y": [4, 15, 16, 17, 41, 114, 121, 141, 155, 196, 238, 303, 380, 383, 400, 468, 504, 518, 527, 546, 618, 620, 657, 672, 674, 677, 680], "m": [4, 114, 122, 189, 384, 478, 504, 614, 618, 657, 674], "d": [4, 8, 15, 23, 33, 38, 39, 41, 46, 48, 52, 56, 58, 81, 82, 83, 92, 94, 95, 98, 109, 114, 115, 117, 121, 124, 125, 126, 129, 130, 131, 132, 135, 138, 143, 147, 148, 152, 155, 170, 171, 179, 180, 181, 182, 183, 184, 191, 195, 239, 260, 271, 283, 284, 294, 299, 300, 301, 303, 309, 315, 320, 322, 344, 346, 347, 355, 357, 358, 362, 373, 377, 379, 380, 383, 385, 386, 387, 388, 391, 392, 393, 394, 396, 402, 407, 408, 412, 418, 427, 429, 446, 463, 465, 466, 468, 470, 476, 482, 504, 507, 523, 542, 543, 597, 598, 599, 600, 601, 603, 616, 618, 619, 636, 657, 659, 672, 674, 676, 680, 683], "h": [4, 106, 179, 184, 185, 191, 372, 468, 507, 597, 603, 604, 616, 672], "s": [4, 7, 9, 10, 14, 19, 21, 23, 25, 29, 30, 31, 32, 33, 40, 41, 42, 45, 47, 53, 57, 64, 70, 78, 79, 88, 89, 90, 93, 99, 107, 112, 113, 120, 121, 128, 132, 135, 136, 143, 145, 152, 161, 165, 172, 179, 184, 191, 192, 220, 233, 236, 270, 272, 273, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 294, 299, 302, 303, 304, 306, 308, 310, 311, 312, 319, 321, 328, 335, 341, 342, 348, 356, 366, 376, 382, 383, 390, 394, 396, 402, 403, 405, 412, 420, 429, 436, 447, 448, 449, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 569, 570, 575, 587, 594, 597, 602, 603, 605, 606, 608, 609, 611, 615, 616, 617, 621, 622, 623, 624, 625, 628, 636, 638, 639, 642, 643, 644, 646, 649, 657, 658, 672, 674, 675, 676, 678, 680, 682, 683, 684], "id": [4, 16, 573, 575, 626, 627, 674, 677], "arang": [4, 17, 674, 680], "second": [4, 41, 93, 106, 122, 137, 161, 179, 184, 190, 191, 235, 254, 303, 306, 372, 384, 397, 420, 437, 440, 597, 603, 615, 616, 621, 623, 646, 649, 657, 672, 674], "x": [4, 5, 15, 16, 17, 41, 69, 141, 155, 169, 238, 260, 277, 278, 303, 330, 348, 400, 446, 518, 527, 530, 532, 546, 550, 569, 570, 587, 594, 618, 636, 646, 650, 651, 674, 675, 677, 679, 680], "01": [4, 33, 122, 127, 128, 178, 180, 181, 182, 183, 185, 188, 189, 191, 192, 195, 196, 294, 384, 389, 390, 436, 504, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 624, 642, 646, 647, 650, 651, 677, 678, 683], "02": [4, 118, 122, 127, 180, 181, 182, 183, 185, 188, 189, 192, 195, 306, 384, 389, 436, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 613, 614, 617, 619, 642, 646, 647, 650, 651, 657, 677], "03": [4, 44, 122, 128, 180, 181, 182, 183, 189, 195, 306, 384, 390, 436, 598, 599, 600, 601, 602, 606, 608, 609, 614, 618, 619, 624, 657], "04": [4, 43, 51, 71, 72, 80, 100, 101, 118, 122, 127, 181, 182, 183, 191, 195, 314, 336, 337, 343, 364, 365, 384, 389, 436, 597, 599, 600, 601, 602, 603, 616, 619, 657], "row": [4, 9, 10, 12, 13, 14, 15, 17, 27, 29, 30, 31, 32, 37, 41, 42, 43, 48, 49, 51, 57, 60, 64, 65, 66, 68, 80, 82, 90, 93, 99, 102, 103, 118, 122, 132, 134, 143, 145, 146, 151, 152, 153, 155, 160, 163, 165, 173, 176, 197, 199, 207, 208, 239, 247, 258, 272, 273, 274, 275, 289, 290, 291, 292, 298, 303, 304, 305, 311, 314, 321, 325, 328, 329, 343, 346, 380, 384, 394, 402, 404, 411, 412, 413, 419, 434, 445, 446, 456, 457, 461, 465, 470, 472, 474, 476, 483, 507, 528, 533, 549, 559, 567, 570, 585, 627, 637, 642, 645, 646, 648, 649, 650, 651, 652, 654, 674, 675, 676, 677, 679, 680, 683], "tupl": [4, 11, 15, 24, 57, 88, 90, 106, 123, 137, 139, 201, 231, 235, 256, 257, 258, 260, 262, 276, 277, 321, 372, 385, 397, 398, 587, 628, 643, 646, 649, 650, 651, 657, 672, 674], "cat": [4, 128, 173, 312, 348, 390, 446, 447, 448, 449, 453, 454, 455, 471, 475, 483, 511, 529, 534, 535, 638, 664, 667, 674], "jump": [4, 123], "dog": [4, 70, 128, 173, 348, 390, 446, 470, 508, 674], "dig": 4, "7": [4, 12, 13, 14, 15, 29, 30, 31, 32, 33, 40, 41, 48, 60, 64, 78, 79, 82, 85, 86, 91, 110, 111, 112, 121, 122, 127, 128, 135, 142, 146, 149, 150, 153, 171, 176, 181, 183, 187, 220, 223, 274, 275, 289, 290, 291, 292, 294, 302, 303, 325, 328, 341, 342, 346, 350, 351, 354, 356, 374, 375, 383, 384, 389, 390, 396, 401, 404, 409, 410, 413, 429, 431, 434, 456, 467, 468, 524, 573, 575, 599, 600, 601, 602, 605, 606, 608, 609, 612, 619, 636, 639, 659, 674, 676, 678, 680, 683, 684], "cow": [4, 41, 303, 304, 335], "moo": 4, "occasion": 4, "pdf": [4, 54, 164, 674, 678], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 23, 25, 29, 30, 31, 32, 33, 37, 38, 39, 41, 46, 48, 49, 50, 52, 53, 54, 56, 58, 59, 64, 66, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 96, 98, 103, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 120, 121, 124, 125, 126, 127, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 164, 170, 171, 176, 177, 199, 212, 230, 239, 250, 253, 254, 255, 256, 260, 261, 271, 272, 273, 274, 275, 280, 283, 284, 285, 289, 290, 291, 292, 294, 300, 301, 303, 309, 313, 315, 316, 317, 318, 320, 322, 324, 328, 340, 341, 342, 344, 346, 347, 349, 350, 351, 354, 355, 357, 358, 360, 362, 372, 373, 374, 375, 377, 379, 380, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 396, 400, 401, 402, 404, 407, 408, 409, 410, 412, 414, 418, 427, 428, 429, 434, 435, 446, 465, 466, 468, 471, 476, 480, 481, 486, 492, 507, 520, 525, 534, 542, 543, 546, 547, 550, 569, 570, 573, 575, 587, 592, 594, 636, 638, 639, 643, 644, 646, 654, 655, 656, 659, 674, 675, 676, 678, 679, 680, 683, 684], "from_panda": [4, 218, 223, 244, 260, 561, 570, 674, 675, 677, 678, 684], "attribut": [4, 33, 137, 172, 199, 235, 248, 257, 266, 294, 381, 397, 449, 654, 655, 656, 664, 672, 674], "method": [4, 14, 18, 26, 34, 35, 50, 57, 59, 66, 69, 112, 113, 116, 118, 121, 122, 127, 132, 137, 143, 172, 198, 199, 203, 204, 213, 235, 248, 250, 260, 266, 278, 281, 283, 286, 295, 296, 304, 313, 321, 324, 330, 345, 376, 378, 380, 383, 384, 389, 394, 397, 402, 405, 406, 455, 458, 469, 492, 493, 494, 495, 501, 502, 503, 506, 518, 527, 544, 561, 566, 573, 575, 592, 626, 639, 645, 646, 649, 650, 651, 652, 657, 658, 663, 664, 665, 668, 672, 675, 677, 679, 680, 681, 683, 684], "iterrow": 4, "itertupl": 4, "to_dict": [4, 266], "transpos": [5, 267, 637, 664, 676, 681], "new": [5, 8, 9, 10, 14, 21, 25, 34, 35, 38, 39, 46, 48, 52, 56, 58, 61, 81, 83, 92, 94, 95, 98, 109, 115, 117, 118, 119, 120, 123, 124, 125, 126, 129, 130, 131, 132, 138, 147, 148, 151, 152, 153, 160, 169, 170, 203, 204, 206, 216, 218, 230, 233, 234, 236, 239, 271, 272, 273, 276, 280, 283, 285, 295, 296, 299, 300, 301, 309, 315, 320, 322, 326, 344, 347, 355, 357, 358, 362, 363, 366, 373, 377, 379, 380, 382, 385, 386, 387, 388, 391, 392, 393, 394, 407, 408, 411, 412, 413, 419, 427, 446, 447, 454, 455, 483, 487, 523, 532, 672, 674, 677, 680, 682], "ncol": [5, 169], "nrow": [5, 169, 646, 674, 680], "self": [5, 14, 57, 84, 106, 112, 135, 153, 160, 169, 177, 218, 244, 267, 276, 281, 321, 349, 372, 385, 396, 413, 419, 426, 435, 475, 534, 672], "note": [5, 11, 12, 13, 14, 15, 21, 25, 27, 33, 37, 42, 45, 48, 53, 57, 70, 76, 78, 79, 85, 87, 90, 91, 93, 99, 102, 110, 111, 112, 119, 121, 122, 132, 142, 143, 144, 146, 149, 155, 156, 161, 163, 168, 169, 173, 176, 212, 274, 275, 277, 278, 280, 282, 285, 287, 288, 294, 299, 304, 308, 321, 341, 342, 348, 350, 352, 354, 374, 375, 381, 383, 384, 394, 401, 402, 403, 404, 409, 415, 420, 434, 439, 460, 470, 471, 475, 476, 481, 492, 512, 518, 521, 527, 528, 533, 544, 545, 546, 562, 563, 564, 567, 575, 581, 582, 583, 584, 588, 591, 592, 595, 618, 628, 636, 637, 638, 645, 646, 649, 650, 651, 654, 657, 658, 672, 673, 674, 679, 680, 681, 682, 683, 684], "differ": [5, 11, 37, 41, 47, 48, 50, 57, 76, 99, 102, 112, 118, 119, 121, 143, 144, 160, 165, 169, 199, 260, 298, 303, 310, 313, 321, 380, 381, 383, 402, 403, 419, 460, 490, 491, 518, 520, 528, 545, 559, 561, 562, 563, 564, 575, 581, 582, 583, 584, 587, 588, 591, 595, 627, 638, 643, 649, 653, 654, 655, 656, 658, 663, 672, 675, 680, 683, 684], "Not": [5, 8, 11, 15, 38, 39, 46, 48, 52, 56, 58, 81, 83, 86, 89, 92, 94, 95, 98, 105, 109, 115, 117, 118, 119, 124, 125, 126, 129, 130, 131, 143, 144, 147, 148, 160, 161, 169, 170, 252, 271, 277, 300, 301, 305, 309, 315, 320, 322, 344, 347, 351, 355, 357, 358, 362, 371, 373, 377, 379, 380, 381, 386, 387, 388, 391, 392, 393, 402, 403, 407, 408, 419, 420, 427, 460, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 653, 654, 655, 656, 682], "support": [5, 8, 11, 12, 13, 14, 15, 19, 23, 27, 37, 38, 39, 46, 48, 50, 52, 53, 56, 58, 69, 76, 78, 79, 81, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 98, 99, 102, 109, 110, 111, 112, 114, 115, 117, 118, 119, 121, 122, 124, 125, 126, 129, 130, 131, 132, 138, 142, 143, 144, 146, 147, 148, 149, 155, 160, 161, 163, 167, 169, 170, 172, 176, 177, 178, 199, 252, 266, 271, 274, 275, 276, 277, 278, 279, 284, 287, 288, 300, 301, 309, 313, 315, 320, 322, 330, 341, 342, 344, 347, 348, 349, 350, 352, 354, 355, 357, 358, 362, 373, 374, 375, 377, 379, 380, 381, 383, 384, 386, 387, 388, 391, 392, 393, 394, 401, 402, 403, 404, 407, 408, 409, 419, 420, 424, 427, 431, 434, 435, 436, 439, 460, 470, 471, 475, 476, 481, 487, 512, 518, 521, 527, 528, 544, 550, 559, 561, 562, 563, 564, 567, 569, 573, 581, 582, 583, 584, 588, 591, 592, 594, 595, 618, 627, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 672, 673, 674, 675, 676, 677, 680, 681, 683], "becaus": [5, 12, 13, 93, 169, 274, 275, 277, 575, 643, 674, 677, 678, 680, 683, 684], "behavior": [5, 121, 165, 169, 238, 260, 304, 383, 544, 627, 638, 646, 649, 657, 658, 672, 674, 679, 680, 682, 684], "absolut": [7, 199, 270, 575, 653, 654, 655, 656, 674, 684], "numer": [7, 33, 37, 48, 85, 86, 91, 93, 112, 116, 121, 219, 220, 221, 222, 223, 227, 228, 242, 270, 294, 348, 350, 351, 354, 378, 383, 431, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 558, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 649, 658, 664, 672, 674, 678, 679, 680, 681, 684], "each": [7, 9, 10, 15, 16, 17, 27, 33, 44, 47, 49, 57, 70, 71, 72, 89, 93, 100, 101, 120, 122, 127, 128, 134, 163, 165, 229, 234, 249, 252, 257, 258, 260, 270, 272, 273, 282, 294, 299, 304, 310, 311, 321, 335, 336, 337, 348, 364, 365, 382, 384, 389, 390, 438, 440, 441, 442, 446, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 519, 520, 522, 524, 525, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 543, 550, 553, 554, 555, 556, 557, 559, 562, 563, 564, 566, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 627, 636, 646, 649, 650, 651, 658, 672, 674, 676, 678, 679, 680, 682, 684], "function": [7, 11, 14, 15, 16, 17, 18, 29, 30, 31, 32, 47, 48, 51, 57, 59, 60, 78, 79, 80, 85, 86, 91, 106, 110, 111, 112, 119, 127, 132, 143, 146, 149, 158, 165, 171, 176, 209, 238, 240, 260, 270, 276, 277, 278, 282, 289, 290, 291, 292, 310, 314, 321, 324, 325, 341, 342, 343, 348, 350, 351, 354, 372, 374, 375, 389, 394, 402, 404, 405, 409, 417, 434, 465, 469, 471, 478, 507, 513, 515, 540, 544, 550, 561, 569, 570, 587, 592, 594, 626, 628, 636, 637, 638, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 664, 668, 672, 673, 674, 675, 676, 679, 681, 683], "appli": [7, 16, 17, 18, 29, 30, 31, 32, 57, 78, 79, 85, 86, 90, 91, 93, 106, 110, 111, 119, 127, 143, 146, 149, 160, 176, 270, 278, 281, 289, 290, 291, 292, 321, 341, 342, 350, 351, 354, 372, 374, 375, 389, 402, 404, 409, 419, 434, 464, 483, 536, 537, 541, 550, 569, 587, 592, 594, 636, 638, 646, 649, 667, 668, 674, 675, 681], "all": [7, 14, 16, 17, 19, 21, 23, 33, 41, 42, 43, 47, 51, 60, 66, 69, 70, 80, 88, 90, 107, 110, 111, 122, 123, 137, 149, 155, 160, 161, 165, 171, 197, 199, 207, 208, 235, 236, 247, 270, 279, 280, 283, 284, 294, 303, 304, 310, 314, 325, 330, 343, 363, 366, 374, 375, 384, 385, 397, 409, 419, 420, 431, 445, 454, 465, 473, 477, 481, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 510, 511, 520, 521, 528, 529, 533, 535, 536, 537, 540, 541, 542, 543, 558, 567, 597, 603, 616, 638, 640, 643, 644, 646, 649, 657, 658, 659, 664, 671, 674, 677, 678, 680, 682, 683, 684], "33": [7, 27, 49, 234, 270], "float64": [7, 15, 17, 33, 38, 39, 44, 45, 66, 71, 72, 78, 79, 86, 89, 96, 100, 101, 112, 117, 127, 128, 131, 133, 136, 141, 142, 146, 164, 170, 176, 197, 211, 270, 277, 278, 294, 300, 301, 308, 319, 321, 336, 337, 341, 342, 351, 360, 364, 365, 376, 379, 389, 390, 393, 395, 400, 401, 404, 423, 427, 431, 434, 646, 658, 674, 678, 680, 682, 683], "axi": [8, 11, 12, 13, 15, 19, 23, 27, 29, 30, 31, 32, 37, 38, 39, 41, 42, 43, 46, 50, 52, 56, 57, 58, 69, 78, 79, 81, 83, 85, 86, 87, 91, 92, 93, 94, 95, 98, 103, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 140, 142, 143, 144, 146, 147, 148, 149, 152, 170, 176, 234, 239, 271, 274, 275, 279, 284, 289, 290, 291, 292, 300, 301, 303, 305, 309, 313, 315, 320, 321, 322, 330, 341, 342, 344, 347, 350, 351, 352, 354, 355, 357, 358, 362, 373, 374, 375, 377, 378, 379, 382, 384, 386, 387, 388, 389, 391, 392, 393, 394, 399, 401, 402, 403, 404, 407, 408, 409, 412, 427, 434, 446, 460, 559, 561, 567, 663, 674, 676, 680, 681], "level": [8, 12, 13, 27, 38, 39, 41, 46, 52, 56, 57, 58, 78, 79, 81, 83, 85, 86, 87, 90, 91, 92, 94, 95, 98, 109, 110, 111, 115, 117, 118, 119, 122, 123, 124, 125, 126, 129, 130, 131, 141, 142, 143, 145, 146, 147, 148, 149, 160, 165, 170, 171, 173, 176, 198, 212, 230, 232, 236, 238, 252, 254, 257, 258, 259, 260, 263, 271, 274, 275, 287, 300, 301, 303, 309, 315, 320, 321, 322, 341, 342, 344, 347, 350, 351, 352, 354, 355, 357, 358, 362, 373, 374, 375, 377, 379, 380, 381, 384, 385, 386, 387, 388, 391, 392, 393, 400, 401, 402, 404, 407, 408, 409, 419, 427, 434, 456, 639, 659, 664, 672], "fill_valu": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 118, 124, 125, 126, 129, 130, 131, 140, 147, 148, 170, 171, 239, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 380, 386, 387, 388, 391, 392, 393, 399, 407, 408, 427, 567, 659], "get": [8, 38, 39, 40, 46, 52, 56, 58, 65, 71, 72, 77, 81, 83, 92, 93, 94, 95, 98, 99, 100, 101, 102, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 212, 238, 250, 260, 271, 300, 301, 302, 309, 315, 320, 322, 329, 336, 337, 344, 347, 355, 357, 358, 359, 362, 364, 365, 373, 377, 379, 386, 387, 388, 391, 392, 393, 398, 407, 408, 427, 530, 559, 587, 596, 602, 638, 664, 676, 680, 681], "addit": [8, 15, 48, 86, 115, 160, 271, 351, 377, 419, 466, 492, 509, 517, 526, 646, 648, 653, 654, 655, 656, 684], "wise": [8, 17, 23, 37, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 103, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 284, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 446, 465, 559, 566, 567, 590, 593, 674, 676, 677], "binari": [8, 38, 39, 40, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 160, 165, 170, 271, 300, 301, 302, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 419, 427, 640, 645, 650, 651, 664, 680, 684], "oper": [8, 11, 15, 38, 39, 40, 41, 43, 46, 48, 50, 52, 56, 57, 58, 81, 83, 84, 90, 92, 94, 95, 98, 109, 110, 111, 115, 117, 124, 125, 126, 129, 130, 131, 143, 147, 148, 149, 160, 170, 177, 179, 184, 191, 266, 271, 277, 283, 300, 301, 302, 303, 304, 305, 309, 313, 315, 320, 321, 322, 344, 347, 349, 355, 357, 358, 362, 373, 374, 375, 377, 379, 386, 387, 388, 391, 392, 393, 402, 407, 408, 409, 419, 427, 435, 530, 550, 562, 563, 564, 569, 581, 582, 583, 584, 588, 591, 592, 594, 595, 597, 603, 616, 664, 672, 676, 677, 680, 681, 682, 683], "equival": [8, 34, 35, 38, 39, 41, 46, 52, 56, 58, 60, 61, 66, 81, 83, 92, 94, 95, 98, 109, 115, 117, 118, 124, 125, 126, 129, 130, 131, 132, 137, 147, 148, 170, 203, 204, 216, 235, 271, 282, 295, 296, 300, 301, 303, 309, 315, 318, 320, 322, 325, 326, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 394, 397, 407, 408, 427, 492, 493, 494, 495, 501, 502, 503, 505, 506, 507, 509, 510, 511, 517, 520, 521, 524, 526, 529, 530, 534, 535, 536, 537, 540, 541, 544, 672, 674, 679, 683], "substitut": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 348, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 655], "miss": [8, 38, 39, 41, 46, 52, 56, 58, 71, 72, 81, 83, 92, 93, 94, 95, 98, 100, 101, 107, 109, 115, 117, 118, 124, 125, 126, 129, 130, 131, 145, 147, 148, 156, 162, 170, 266, 271, 286, 288, 300, 301, 303, 309, 312, 315, 320, 322, 336, 337, 344, 347, 355, 357, 358, 362, 364, 365, 373, 377, 379, 380, 386, 387, 388, 391, 392, 393, 407, 408, 415, 422, 427, 465, 567, 575, 644, 646, 664, 673, 681], "one": [8, 11, 21, 38, 39, 43, 46, 52, 56, 58, 77, 81, 83, 90, 92, 93, 94, 95, 98, 104, 107, 109, 115, 117, 118, 124, 125, 126, 129, 130, 131, 147, 148, 170, 171, 172, 173, 208, 212, 214, 233, 254, 258, 260, 271, 278, 280, 300, 301, 305, 309, 315, 320, 322, 323, 335, 344, 347, 355, 356, 357, 358, 362, 373, 377, 379, 385, 386, 387, 388, 391, 392, 393, 407, 408, 427, 455, 456, 470, 472, 476, 481, 492, 493, 502, 507, 575, 587, 638, 644, 646, 649, 650, 651, 659, 672, 674, 676, 679, 680, 683], "scalar": [8, 15, 18, 23, 38, 39, 40, 46, 50, 52, 56, 58, 78, 79, 81, 83, 84, 87, 88, 89, 92, 94, 95, 98, 109, 115, 117, 121, 124, 125, 126, 129, 130, 131, 147, 148, 170, 176, 177, 209, 266, 271, 277, 278, 282, 284, 300, 301, 302, 309, 313, 315, 320, 322, 341, 342, 344, 347, 349, 352, 355, 357, 358, 362, 373, 377, 379, 381, 383, 386, 387, 388, 391, 392, 393, 407, 408, 427, 434, 435, 457, 458, 507, 561, 567, 636, 643, 646, 657, 683], "sequenc": [8, 38, 39, 40, 42, 46, 48, 52, 56, 57, 58, 81, 83, 92, 94, 95, 98, 104, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 178, 197, 247, 252, 256, 257, 258, 266, 271, 300, 301, 302, 309, 315, 320, 321, 322, 335, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 436, 445, 458, 468, 470, 473, 512, 520, 521, 522, 534, 538, 539, 627, 636, 638, 658, 672, 674], "ani": [8, 16, 17, 18, 25, 33, 38, 39, 40, 41, 42, 43, 45, 46, 48, 52, 56, 58, 81, 83, 92, 94, 95, 96, 98, 109, 114, 115, 117, 118, 121, 124, 125, 126, 128, 129, 130, 131, 137, 147, 148, 156, 162, 167, 170, 173, 206, 208, 235, 271, 277, 282, 285, 294, 300, 301, 302, 303, 308, 309, 315, 320, 322, 344, 347, 355, 357, 358, 360, 362, 373, 377, 379, 380, 383, 386, 387, 388, 390, 391, 392, 393, 397, 407, 408, 415, 422, 424, 427, 447, 453, 454, 455, 457, 458, 461, 465, 470, 488, 489, 492, 507, 512, 544, 550, 569, 594, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 672, 674, 677, 679, 680, 682, 683, 684], "multipl": [8, 14, 15, 17, 33, 38, 39, 40, 46, 48, 52, 56, 58, 64, 81, 82, 83, 92, 93, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 144, 147, 148, 170, 171, 186, 212, 254, 257, 271, 278, 294, 300, 301, 302, 309, 315, 320, 322, 328, 344, 346, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 403, 407, 408, 427, 476, 481, 567, 605, 649, 650, 651, 657, 659, 672, 674, 676, 677, 679, 680, 682], "structur": [8, 38, 39, 40, 46, 52, 55, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 158, 160, 170, 230, 240, 271, 300, 301, 302, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 417, 419, 427, 637, 639, 672, 674, 676, 680, 684], "int": [8, 16, 26, 37, 38, 39, 41, 43, 44, 46, 52, 54, 56, 57, 58, 60, 66, 67, 69, 81, 83, 85, 86, 91, 92, 94, 95, 98, 99, 102, 104, 105, 109, 110, 111, 112, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 143, 146, 147, 148, 149, 152, 155, 161, 170, 176, 212, 214, 234, 236, 239, 250, 252, 259, 260, 265, 271, 281, 286, 287, 298, 300, 301, 303, 309, 315, 318, 320, 321, 322, 325, 330, 344, 347, 350, 351, 354, 355, 357, 358, 362, 363, 366, 370, 371, 373, 374, 375, 377, 379, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 402, 404, 407, 408, 409, 412, 420, 427, 431, 434, 458, 463, 466, 467, 470, 471, 476, 479, 480, 481, 482, 486, 487, 490, 491, 508, 509, 512, 513, 514, 517, 520, 521, 524, 525, 526, 528, 530, 532, 533, 544, 545, 547, 551, 552, 559, 560, 561, 562, 563, 564, 565, 567, 571, 572, 573, 575, 580, 581, 582, 583, 584, 586, 588, 590, 591, 593, 595, 627, 633, 635, 636, 639, 645, 646, 648, 650, 651, 653, 655, 656, 657, 672, 674, 680], "string": [8, 9, 10, 11, 33, 38, 39, 44, 46, 48, 52, 56, 58, 67, 71, 72, 81, 82, 83, 92, 94, 95, 98, 100, 101, 106, 109, 115, 117, 122, 124, 125, 126, 129, 130, 131, 147, 148, 155, 161, 165, 167, 170, 271, 272, 273, 278, 294, 300, 301, 305, 309, 315, 320, 322, 335, 336, 337, 344, 346, 347, 355, 357, 358, 362, 364, 365, 372, 373, 377, 379, 384, 386, 387, 388, 391, 392, 393, 405, 407, 408, 420, 424, 427, 550, 569, 587, 594, 618, 626, 627, 638, 642, 646, 647, 648, 649, 651, 652, 657, 664, 672, 673, 677, 678, 679, 680, 681, 684], "broadcast": [8, 15, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 592, 679], "across": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 575, 672, 674, 676, 677], "match": [8, 16, 17, 25, 38, 39, 46, 52, 56, 58, 70, 81, 83, 90, 92, 94, 95, 98, 109, 115, 117, 118, 121, 124, 125, 126, 129, 130, 131, 132, 144, 147, 148, 170, 172, 229, 250, 271, 285, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 380, 383, 386, 387, 388, 391, 392, 393, 394, 403, 407, 408, 427, 465, 470, 475, 476, 481, 521, 528, 533, 534, 544, 567, 649, 650, 651, 654, 664, 672, 674, 675, 679, 680, 683, 684], "pass": [8, 14, 15, 16, 17, 18, 21, 28, 38, 39, 46, 52, 56, 57, 58, 66, 70, 81, 83, 86, 92, 94, 95, 98, 106, 109, 115, 117, 118, 119, 121, 124, 125, 126, 127, 129, 130, 131, 132, 147, 148, 156, 162, 165, 170, 172, 229, 271, 277, 280, 300, 301, 309, 315, 320, 321, 322, 335, 344, 347, 348, 351, 355, 356, 357, 358, 362, 372, 373, 377, 379, 383, 386, 387, 388, 389, 391, 392, 393, 394, 407, 408, 415, 422, 427, 429, 431, 446, 465, 470, 471, 476, 481, 487, 507, 512, 528, 533, 587, 636, 637, 639, 646, 648, 649, 650, 651, 654, 655, 656, 658, 674, 676, 680, 683, 684], "multiindex": [8, 23, 38, 39, 41, 46, 52, 56, 57, 58, 69, 81, 83, 85, 86, 91, 92, 94, 95, 98, 109, 114, 115, 117, 119, 122, 123, 124, 125, 126, 129, 130, 131, 138, 141, 143, 147, 148, 170, 173, 199, 212, 218, 230, 236, 238, 244, 271, 284, 300, 301, 303, 309, 315, 320, 321, 322, 330, 344, 347, 350, 351, 354, 355, 357, 358, 362, 373, 377, 379, 384, 385, 386, 387, 388, 391, 392, 393, 400, 402, 407, 408, 427, 518, 527, 528, 533, 664, 672, 675, 679, 681], "yet": [8, 11, 14, 15, 38, 39, 46, 52, 56, 58, 76, 81, 83, 92, 94, 95, 98, 105, 109, 115, 117, 119, 122, 124, 125, 126, 129, 130, 131, 143, 147, 148, 170, 172, 178, 199, 252, 271, 288, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 371, 373, 377, 379, 384, 386, 387, 388, 391, 392, 393, 402, 407, 408, 427, 431, 436, 470, 475, 518, 521, 527, 528, 544, 618, 653, 655, 656, 674, 677, 680, 683], "fill": [8, 38, 39, 46, 50, 52, 56, 58, 81, 83, 92, 94, 95, 98, 105, 109, 115, 117, 118, 122, 124, 125, 126, 129, 130, 131, 147, 148, 170, 209, 250, 271, 300, 301, 309, 313, 315, 320, 322, 344, 347, 355, 357, 358, 362, 371, 373, 377, 379, 384, 386, 387, 388, 391, 392, 393, 407, 408, 427, 446, 466, 469, 509, 517, 526, 545, 551, 552, 560, 561, 565, 567, 571, 572, 580, 586, 680, 681], "exist": [8, 38, 39, 41, 46, 48, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 121, 124, 125, 126, 129, 130, 131, 138, 147, 148, 160, 170, 271, 300, 301, 303, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 383, 386, 387, 388, 391, 392, 393, 407, 408, 419, 427, 446, 674, 678, 684], "success": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "align": [8, 14, 38, 39, 46, 52, 56, 57, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 132, 147, 148, 170, 172, 266, 271, 300, 301, 309, 315, 320, 321, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 394, 407, 408, 427, 429, 446, 683], "befor": [8, 9, 38, 39, 46, 48, 52, 56, 58, 81, 83, 92, 94, 95, 98, 105, 109, 115, 117, 124, 125, 126, 129, 130, 131, 143, 147, 148, 170, 271, 272, 281, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 371, 373, 377, 379, 386, 387, 388, 391, 392, 393, 402, 407, 408, 427, 465, 518, 527, 532, 626, 637, 646, 649, 665, 672, 674, 676], "comput": [8, 16, 26, 28, 38, 39, 46, 52, 56, 57, 58, 59, 66, 78, 79, 81, 83, 85, 86, 87, 91, 92, 93, 94, 95, 98, 105, 109, 110, 111, 112, 113, 115, 116, 117, 124, 125, 126, 129, 130, 131, 142, 147, 148, 149, 170, 229, 230, 271, 281, 286, 288, 300, 301, 309, 315, 318, 320, 321, 322, 324, 341, 342, 344, 347, 350, 351, 352, 354, 355, 357, 358, 362, 371, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 391, 392, 393, 401, 407, 408, 409, 427, 459, 463, 473, 474, 508, 519, 553, 562, 563, 564, 566, 573, 574, 575, 581, 582, 583, 584, 588, 590, 591, 593, 595, 636, 638, 664, 674, 677, 680, 681], "both": [8, 25, 33, 38, 39, 46, 47, 52, 56, 58, 64, 70, 81, 83, 90, 92, 93, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 136, 147, 148, 170, 172, 194, 243, 248, 249, 266, 271, 282, 285, 294, 300, 301, 309, 310, 315, 320, 322, 328, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 444, 517, 545, 575, 639, 654, 655, 656, 663, 672, 677, 678, 679, 680, 684], "correspond": [8, 16, 17, 38, 39, 41, 46, 50, 52, 56, 58, 66, 81, 83, 84, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 132, 138, 147, 148, 164, 170, 177, 214, 271, 282, 300, 301, 303, 309, 312, 313, 315, 320, 322, 344, 347, 348, 349, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 394, 407, 408, 423, 427, 429, 435, 465, 470, 472, 507, 520, 522, 567, 646, 649, 672, 680], "locat": [8, 38, 39, 41, 46, 47, 52, 56, 58, 67, 70, 81, 83, 92, 94, 95, 98, 109, 115, 117, 118, 124, 125, 126, 129, 130, 131, 135, 147, 148, 170, 250, 252, 260, 271, 300, 301, 303, 309, 310, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 396, 407, 408, 427, 479, 514, 522, 538, 539, 645, 646, 649, 650, 651, 652, 683], "arithmet": [8, 38, 39, 40, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 302, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427, 680, 683, 684], "angl": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "degre": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 146, 147, 148, 170, 176, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 404, 407, 408, 427, 434, 467, 513, 514, 575, 590, 593, 633, 635], "360": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "180": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "circl": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "triangl": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "rectangl": [8, 38, 39, 46, 52, 56, 58, 81, 83, 92, 94, 95, 98, 109, 115, 117, 124, 125, 126, 129, 130, 131, 147, 148, 170, 271, 300, 301, 309, 315, 320, 322, 344, 347, 355, 357, 358, 362, 373, 377, 379, 386, 387, 388, 391, 392, 393, 407, 408, 427], "361": [8, 115, 271, 377], "181": [8, 115, 271, 377], "c": [8, 15, 23, 33, 37, 38, 39, 41, 46, 48, 50, 52, 56, 58, 64, 66, 77, 81, 82, 83, 89, 92, 94, 95, 98, 106, 107, 109, 115, 117, 119, 121, 124, 125, 126, 127, 129, 130, 131, 132, 136, 138, 141, 143, 147, 148, 152, 155, 170, 171, 212, 239, 260, 271, 283, 284, 294, 300, 301, 303, 309, 312, 313, 315, 317, 320, 322, 328, 340, 344, 346, 347, 355, 357, 358, 362, 372, 373, 377, 379, 380, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 400, 402, 407, 408, 412, 418, 427, 428, 429, 446, 465, 471, 507, 512, 520, 542, 543, 550, 569, 570, 573, 575, 594, 618, 636, 643, 644, 646, 654, 659, 672, 674, 675, 676, 679, 680, 683], "e": [8, 11, 15, 33, 38, 39, 46, 48, 52, 56, 58, 81, 82, 83, 92, 94, 95, 98, 109, 115, 116, 117, 121, 124, 125, 126, 127, 129, 130, 131, 138, 147, 148, 152, 170, 171, 239, 260, 271, 283, 294, 300, 301, 309, 315, 320, 322, 344, 346, 347, 355, 357, 358, 362, 373, 377, 378, 379, 383, 386, 387, 388, 389, 391, 392, 393, 407, 408, 412, 427, 429, 455, 468, 470, 471, 476, 481, 482, 507, 512, 515, 540, 542, 543, 618, 636, 646, 659, 672, 674, 680], "int64": [8, 9, 10, 15, 19, 21, 23, 25, 27, 33, 40, 41, 44, 45, 48, 50, 52, 59, 64, 66, 77, 82, 84, 85, 87, 89, 91, 92, 94, 95, 103, 109, 110, 111, 115, 120, 121, 122, 124, 125, 126, 127, 129, 130, 132, 141, 142, 145, 147, 148, 149, 150, 154, 164, 171, 173, 177, 178, 201, 206, 209, 218, 229, 230, 233, 234, 236, 238, 242, 244, 247, 254, 261, 271, 272, 273, 276, 277, 278, 279, 280, 283, 284, 285, 293, 294, 298, 302, 303, 305, 308, 311, 313, 315, 318, 323, 324, 328, 340, 346, 348, 349, 350, 352, 354, 355, 356, 357, 358, 363, 366, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 400, 401, 403, 407, 408, 409, 410, 423, 429, 435, 436, 447, 448, 449, 453, 454, 455, 458, 471, 474, 484, 485, 488, 489, 547, 622, 623, 624, 625, 628, 638, 659, 674, 676, 678, 680, 682, 683, 684], "prefix": [9, 10, 272, 273, 638, 639, 646], "For": [9, 10, 15, 16, 27, 33, 41, 47, 51, 57, 60, 80, 89, 90, 106, 116, 121, 122, 127, 128, 143, 160, 161, 212, 260, 272, 273, 277, 294, 303, 310, 314, 321, 325, 343, 372, 378, 383, 384, 385, 389, 390, 402, 419, 420, 456, 476, 481, 528, 561, 570, 575, 627, 636, 646, 649, 658, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684], "str": [9, 10, 18, 19, 48, 49, 51, 55, 66, 69, 76, 80, 88, 90, 102, 104, 105, 112, 114, 121, 122, 123, 128, 134, 135, 136, 138, 144, 155, 156, 159, 160, 162, 163, 165, 178, 179, 184, 191, 193, 194, 212, 241, 243, 257, 258, 264, 266, 272, 273, 279, 305, 314, 330, 343, 371, 376, 383, 384, 385, 390, 396, 415, 418, 419, 422, 436, 443, 444, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 567, 569, 592, 594, 597, 603, 616, 618, 626, 627, 636, 638, 639, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 667, 668, 674, 676, 680, 682], "add": [9, 10, 40, 67, 76, 160, 272, 273, 302, 419, 447, 448, 638, 646, 672, 674, 680], "updat": [9, 10, 25, 69, 272, 273, 285, 330], "add_suffix": [9, 272], "suffix": [9, 10, 90, 272, 273], "item_": [9, 272], "item_0": [9, 272], "item_1": [9, 272], "item_2": [9, 272], "item_3": [9, 272], "6": [9, 10, 14, 15, 29, 30, 31, 32, 33, 37, 40, 41, 48, 50, 53, 60, 64, 66, 71, 72, 82, 87, 100, 101, 103, 119, 121, 122, 135, 141, 142, 154, 171, 173, 181, 182, 183, 195, 206, 218, 244, 255, 272, 273, 276, 278, 289, 290, 291, 292, 294, 298, 299, 302, 303, 313, 325, 328, 336, 337, 340, 346, 352, 356, 364, 365, 383, 384, 396, 400, 401, 428, 429, 431, 448, 449, 453, 454, 456, 457, 458, 466, 467, 468, 469, 471, 478, 542, 543, 570, 573, 575, 599, 600, 601, 602, 605, 606, 608, 609, 619, 621, 628, 636, 639, 643, 659, 674, 676, 678, 679, 680, 683, 684], "col_": [9, 272], "col_a": [9, 272], "col_b": [9, 272], "after": [10, 121, 273, 277, 383, 405, 447, 518, 527, 532, 537, 646, 649, 674, 680], "add_prefix": [10, 273], "_item": [10, 273], "0_item": [10, 273], "1_item": [10, 273], "2_item": [10, 273], "3_item": [10, 273], "_col": [10, 273], "a_col": [10, 273], "b_col": [10, 273], "aggreg": [11, 57, 122, 321, 384, 569, 592, 673, 674, 677, 681], "more": [11, 14, 15, 19, 21, 33, 40, 64, 66, 132, 160, 171, 179, 184, 191, 254, 277, 279, 280, 294, 302, 328, 394, 419, 455, 474, 481, 528, 575, 597, 603, 616, 649, 650, 651, 657, 659, 672, 674, 679, 680, 682, 683], "over": [11, 16, 17, 37, 73, 93, 132, 239, 394, 559, 570, 672, 679, 680, 684], "specifi": [11, 16, 23, 41, 43, 50, 66, 67, 86, 89, 103, 107, 112, 113, 118, 119, 121, 122, 127, 128, 132, 143, 144, 152, 160, 161, 165, 171, 179, 184, 191, 208, 209, 239, 254, 266, 284, 303, 313, 351, 376, 380, 383, 384, 389, 390, 394, 402, 403, 412, 419, 420, 436, 453, 454, 455, 457, 458, 461, 465, 482, 487, 511, 520, 528, 529, 531, 532, 533, 535, 545, 547, 550, 561, 567, 569, 594, 597, 603, 616, 618, 627, 636, 639, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 672, 674, 678, 679, 680, 683], "set": [11, 14, 17, 21, 23, 33, 53, 64, 66, 71, 72, 76, 82, 88, 93, 100, 101, 112, 116, 127, 138, 155, 165, 167, 172, 193, 206, 229, 233, 236, 241, 264, 276, 280, 282, 284, 294, 304, 328, 335, 336, 337, 346, 364, 365, 378, 389, 423, 424, 431, 443, 446, 448, 449, 453, 455, 467, 470, 477, 511, 513, 515, 518, 521, 527, 528, 529, 533, 535, 544, 567, 575, 592, 626, 636, 643, 646, 649, 651, 657, 658, 672, 674, 679, 682, 683], "accept": [11, 18, 19, 37, 76, 132, 201, 265, 279, 298, 348, 394, 470, 475, 482, 534, 550, 559, 569, 575, 594, 658, 672, 678, 679, 680, 684], "g": [11, 33, 106, 294, 372, 455, 468, 470, 471, 476, 481, 507, 512, 515, 542, 543, 618, 646, 672, 680], "sum": [11, 32, 110, 111, 122, 127, 132, 150, 292, 374, 375, 384, 389, 394, 410, 431, 550, 557, 569, 579, 594, 672, 674, 676, 677, 679, 681, 684], "min": [11, 30, 33, 116, 179, 184, 191, 238, 290, 294, 378, 550, 556, 558, 569, 578, 587, 594, 597, 603, 616, 679, 683], "max": [11, 29, 33, 57, 116, 127, 289, 294, 321, 378, 389, 550, 555, 558, 569, 577, 587, 592, 594, 674, 677, 679, 680], "per": [11, 16, 26, 66, 143, 173, 283, 402, 476, 490, 491, 520, 550, 569, 573, 575, 592, 594, 649, 674, 676, 679, 682], "when": [11, 16, 17, 21, 25, 33, 40, 41, 43, 51, 66, 70, 76, 78, 79, 80, 85, 86, 87, 90, 91, 102, 106, 110, 111, 112, 113, 132, 142, 149, 161, 165, 172, 173, 199, 218, 244, 265, 280, 285, 294, 302, 303, 314, 341, 342, 343, 350, 351, 352, 354, 363, 366, 372, 374, 375, 376, 385, 394, 401, 409, 420, 470, 471, 481, 486, 487, 507, 521, 525, 528, 533, 566, 636, 638, 639, 646, 648, 649, 650, 653, 654, 655, 656, 658, 672, 677, 678, 679, 680, 681, 682, 683, 684], "sever": [11, 667, 668, 682], "arg": [11, 15, 17, 29, 30, 31, 32, 106, 157, 159, 160, 161, 163, 165, 277, 348, 372, 380, 383, 402, 416, 419, 420, 555, 556, 557, 562, 563, 564, 570, 577, 578, 579, 581, 582, 583, 584, 587, 588, 591, 595, 618, 628, 630, 631, 632, 634, 647, 648, 649, 651, 657, 658, 680], "bool_onli": [12, 13, 274, 275], "skipna": [12, 13, 29, 30, 31, 32, 78, 79, 85, 86, 87, 91, 110, 111, 142, 146, 149, 176, 274, 275, 289, 290, 291, 292, 341, 342, 350, 351, 352, 354, 374, 375, 401, 404, 409, 434, 683], "exclud": [12, 13, 29, 30, 31, 32, 33, 78, 79, 85, 86, 87, 91, 110, 111, 136, 142, 146, 149, 176, 266, 274, 275, 282, 286, 288, 289, 290, 291, 292, 294, 341, 342, 350, 351, 352, 354, 374, 375, 401, 404, 409, 431, 434, 558, 573, 575, 683], "entir": [12, 13, 21, 29, 30, 31, 32, 45, 146, 176, 274, 275, 280, 289, 290, 291, 292, 308, 404, 434, 651, 676, 680], "empti": [12, 13, 71, 72, 77, 100, 101, 110, 111, 120, 136, 141, 149, 234, 274, 275, 305, 336, 337, 364, 365, 374, 375, 382, 400, 409, 465, 496, 507, 518, 527, 638, 646, 680, 683], "equal": [12, 13, 46, 56, 69, 81, 90, 98, 116, 121, 127, 132, 194, 207, 218, 243, 244, 274, 275, 309, 320, 330, 344, 362, 378, 383, 389, 394, 444, 507, 545, 636, 653, 654, 655, 656, 658, 683, 684], "zero": [12, 13, 274, 275, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 506, 545, 646, 649, 680], "current": [12, 13, 14, 23, 27, 37, 48, 69, 78, 79, 85, 87, 91, 93, 110, 111, 118, 120, 121, 132, 138, 142, 146, 149, 155, 163, 176, 209, 234, 266, 274, 275, 276, 284, 287, 330, 341, 342, 348, 350, 352, 354, 374, 375, 382, 383, 394, 401, 404, 409, 434, 439, 470, 471, 476, 481, 512, 544, 573, 592, 627, 652, 653, 654, 656, 666, 672, 674, 677, 680], "ignore_index": [14, 42, 49, 132, 143, 144, 276, 304, 311, 394, 402, 403, 446, 460], "verify_integr": [14, 138, 252, 276], "sort": [14, 19, 42, 51, 57, 76, 80, 90, 99, 102, 135, 143, 144, 173, 206, 218, 230, 238, 244, 260, 266, 279, 304, 314, 321, 343, 356, 363, 366, 396, 402, 403, 431, 446, 460, 636, 664, 674, 675, 677, 679, 684], "end": [14, 19, 143, 144, 179, 184, 191, 238, 279, 306, 402, 403, 460, 475, 480, 481, 486, 487, 516, 524, 525, 528, 531, 532, 534, 597, 602, 603, 605, 606, 608, 609, 612, 616, 646, 649, 680], "caller": [14, 25, 51, 60, 69, 80, 84, 116, 120, 132, 177, 234, 236, 285, 314, 325, 330, 343, 348, 349, 378, 382, 394, 435, 465, 528, 533], "ad": [14, 447, 448, 455, 515, 545, 674], "do": [14, 41, 43, 47, 57, 118, 123, 138, 206, 218, 244, 260, 276, 303, 305, 310, 380, 385, 454, 455, 587, 646, 650, 651, 672, 674, 675, 676, 677, 680, 683, 684], "concat": [14, 276, 465, 642, 681], "gener": [14, 15, 33, 34, 48, 66, 132, 137, 203, 235, 276, 278, 294, 295, 394, 397, 467, 513, 514, 558, 575, 627, 639, 664, 672, 673, 677, 680, 681], "concaten": [14, 276, 446, 456, 465, 472, 507, 650, 674, 679, 684], "unchang": [14, 25, 285, 545], "computation": 14, "intens": [14, 676], "than": [14, 15, 43, 56, 58, 66, 81, 83, 110, 111, 118, 132, 149, 173, 282, 320, 322, 344, 347, 374, 375, 380, 394, 409, 431, 440, 441, 442, 455, 470, 474, 479, 481, 490, 491, 518, 521, 527, 544, 545, 562, 563, 564, 575, 581, 582, 583, 584, 588, 591, 595, 623, 625, 639, 672, 674, 675, 678, 680, 683, 684], "better": [14, 57, 132, 321, 394, 679], "solut": [14, 137, 235, 397, 677], "those": [14, 15, 33, 116, 277, 294, 378, 446, 507, 550, 569, 594, 649, 665, 672, 680], "origin": [14, 21, 25, 48, 84, 89, 119, 122, 134, 172, 177, 193, 194, 241, 243, 264, 280, 285, 306, 349, 384, 385, 429, 435, 443, 444, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 530, 626, 627, 629, 630, 631, 632, 633, 634, 635, 657, 677], "onc": [14, 132, 394, 481, 649, 672, 674], "ab": [14, 250, 467, 476, 486, 509, 525, 526, 532, 680, 683], "df2": [14, 446, 639, 654, 674, 680, 683], "8": [14, 15, 29, 30, 31, 32, 33, 37, 40, 41, 48, 60, 64, 70, 78, 79, 82, 84, 85, 86, 91, 93, 110, 111, 121, 122, 127, 142, 146, 149, 153, 155, 171, 176, 177, 181, 183, 282, 289, 290, 291, 292, 294, 298, 302, 303, 318, 325, 328, 341, 342, 346, 349, 350, 351, 354, 374, 375, 383, 384, 389, 401, 404, 409, 413, 429, 434, 435, 456, 460, 468, 469, 483, 542, 543, 570, 573, 575, 599, 600, 601, 602, 605, 606, 619, 627, 628, 636, 639, 649, 653, 654, 655, 656, 659, 672, 674, 676, 678, 680, 683], "With": [14, 25, 66, 128, 190, 276, 282, 285, 304, 390, 431, 615, 649, 672, 674, 676, 677, 680], "follow": [14, 66, 102, 122, 155, 298, 384, 385, 470, 507, 518, 527, 544, 550, 569, 594, 618, 627, 646, 651, 658, 663, 672, 677, 679, 680, 682, 684], "while": [14, 93, 155, 165, 283, 570, 639, 672, 675, 680, 683], "recommend": [14, 118, 119], "show": [14, 66, 70, 71, 72, 100, 101, 122, 336, 337, 364, 365, 384, 653, 654, 655, 656, 672, 674], "wai": [14, 121, 278, 383, 657, 672, 676, 678, 680, 683, 684], "sourc": [14, 16, 17, 158, 240, 278, 417, 637, 645, 646, 650, 651, 675], "less": [14, 43, 81, 83, 282, 344, 347, 440, 441, 442, 455, 544, 545, 623, 625, 649], "effici": [14, 16, 89, 167, 424, 672, 683], "abov": [14, 138, 672, 677, 680, 683], "func": [15, 16, 17, 18, 106, 277, 372, 550, 569, 570, 587, 594, 628, 674], "raw": [15, 626, 645, 650, 651], "result_typ": 15, "along": [15, 69, 85, 86, 91, 93, 116, 143, 144, 330, 350, 351, 354, 378, 402, 403, 446, 683], "reli": [15, 277, 672, 674, 684], "numba": [15, 16, 114, 277, 278, 681, 684], "jit": [15, 16, 277, 278, 680, 684], "compil": [15, 114, 277, 278, 471, 512, 521, 523, 680, 684], "thu": [15, 277, 458, 672, 674, 678, 680], "within": [15, 51, 57, 80, 127, 277, 314, 321, 343, 389, 470, 479, 490, 491, 513, 514, 522, 562, 563, 564, 567, 581, 582, 583, 584, 588, 591, 595, 646, 649, 667, 680], "limit": [15, 16, 33, 50, 69, 105, 118, 121, 277, 294, 313, 330, 371, 380, 383, 528, 533, 551, 552, 560, 561, 565, 570, 571, 572, 580, 586, 675, 681], "cuda": [15, 16, 17, 277, 278, 626, 627, 672, 673, 674, 676, 680, 682], "python": [15, 18, 21, 40, 114, 236, 277, 278, 280, 302, 405, 465, 475, 492, 493, 494, 495, 501, 502, 503, 506, 528, 533, 570, 618, 645, 650, 651, 657, 672, 673, 674, 678, 680, 683, 684], "target": [15, 118, 277, 473, 522], "see": [15, 16, 19, 25, 40, 45, 47, 57, 114, 160, 179, 184, 191, 277, 279, 285, 302, 308, 310, 321, 419, 528, 533, 550, 569, 575, 594, 597, 603, 616, 628, 645, 646, 648, 649, 650, 651, 657, 674, 677, 679, 680, 682, 684], "guid": [15, 160, 277, 419, 550, 569, 594, 672, 673, 680], "user": [15, 16, 17, 48, 160, 265, 277, 278, 419, 550, 569, 594, 628, 658, 672, 673, 674, 677, 682, 684], "defin": [15, 17, 34, 43, 127, 137, 203, 235, 277, 278, 295, 317, 389, 397, 517, 570, 627, 628, 636, 672, 673, 674, 676, 681, 684], "which": [15, 16, 17, 33, 41, 42, 43, 48, 53, 54, 70, 71, 72, 89, 100, 101, 106, 122, 128, 136, 143, 152, 158, 160, 161, 165, 167, 186, 190, 211, 239, 240, 248, 252, 267, 278, 286, 288, 294, 299, 303, 305, 316, 319, 336, 337, 364, 365, 372, 384, 390, 402, 412, 417, 419, 420, 424, 426, 453, 455, 470, 472, 473, 515, 517, 518, 527, 545, 575, 605, 615, 618, 627, 636, 637, 638, 639, 651, 653, 654, 656, 657, 672, 674, 676, 677, 679, 680, 682, 683, 684], "expand": [15, 476, 481, 518, 527, 528, 533], "reduc": 15, "posit": [15, 60, 64, 106, 135, 140, 152, 212, 214, 239, 277, 325, 328, 372, 396, 399, 412, 458, 482, 487, 490, 491, 507, 530, 531, 532, 547, 567, 575, 587, 681], "argument": [15, 16, 17, 19, 20, 21, 28, 86, 106, 118, 119, 138, 143, 146, 155, 160, 161, 171, 176, 238, 277, 278, 279, 280, 351, 372, 385, 402, 404, 419, 420, 434, 446, 550, 569, 587, 594, 627, 638, 646, 648, 651, 657, 658, 659, 663, 672, 676], "simpl": [15, 278, 455, 672, 674, 680], "variabl": [15, 43, 88, 90, 114, 127, 128, 278, 305, 389, 390, 636, 643, 674, 682], "could": [15, 575, 672, 676, 680], "def": [15, 16, 17, 127, 277, 278, 389, 507, 513, 570, 628, 646, 674, 676, 678, 680], "f": [15, 33, 106, 260, 277, 294, 372, 482, 507, 521, 530, 542, 543, 657, 680], "els": [15, 71, 72, 277, 278, 336, 337, 674, 676, 680], "awar": [15, 283, 680], "manner": [15, 16], "mai": [15, 16, 17, 21, 57, 132, 135, 160, 163, 221, 260, 277, 280, 321, 348, 394, 396, 419, 470, 473, 490, 491, 561, 575, 646, 649, 650, 651, 663, 666, 672, 674, 675, 676, 679, 680], "condition": [15, 277, 680], "mix": [15, 33, 112, 160, 221, 294, 419, 492, 658, 680], "common": [15, 33, 90, 137, 218, 235, 277, 294, 397, 657, 672, 680], "rather": [15, 118, 156, 173, 380, 415, 431, 672, 675, 680, 684], "howev": [15, 165, 470, 515, 575, 672, 674, 678, 680, 683], "promot": [15, 680], "safe": [15, 674, 680], "regardless": [15, 33, 114, 294, 658, 677, 680], "op": [15, 680], "against": [15, 16, 17, 47, 310, 473, 492], "v": [15, 523, 561, 675], "w": [15, 122, 160, 384, 419, 468, 646], "z": [15, 16, 17, 41, 50, 121, 155, 303, 313, 380, 383, 478, 546, 677], "incol": [16, 17, 680], "outcol": [16, 17, 680], "pessimistic_nul": [16, 17], "chunk": [16, 165, 570, 652], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 49, 119, 278, 311, 515, 570, 628, 674, 676, 680, 681], "execut": [16, 17, 674, 680, 684], "Or": [16, 17, 118, 678, 680], "dictionari": [16, 17, 21, 106, 137, 235, 280, 372, 397, 549, 587, 638, 651, 672, 678, 680], "map": [16, 17, 57, 71, 72, 100, 101, 106, 119, 194, 243, 321, 336, 337, 364, 365, 372, 444, 478, 540, 549, 550, 569, 587, 594, 638, 646, 672, 674, 679, 680, 683], "col1": [16, 17, 680], "arg1": [16, 17, 106, 372, 680], "output": [16, 17, 33, 48, 57, 66, 104, 114, 132, 134, 155, 158, 161, 163, 165, 166, 167, 240, 266, 278, 294, 321, 394, 417, 420, 424, 436, 456, 472, 479, 528, 533, 570, 627, 638, 639, 649, 653, 654, 655, 656, 664, 672, 673, 677, 679, 680, 681, 684], "extra": [16, 17, 21, 119, 280, 516], "These": [16, 17, 90, 278, 666, 667, 668, 672, 678, 680, 683], "directli": [16, 17, 41, 172, 236, 303, 447, 665, 672, 674, 676, 680], "apply_row": 16, "should": [16, 17, 33, 34, 35, 36, 61, 62, 66, 116, 120, 121, 128, 132, 135, 143, 161, 165, 172, 199, 203, 204, 205, 212, 216, 217, 234, 238, 294, 295, 296, 297, 326, 327, 378, 380, 382, 383, 390, 394, 396, 402, 420, 453, 455, 474, 505, 523, 567, 627, 636, 639, 651, 652, 665, 672, 674, 680, 684], "non": [16, 17, 27, 43, 45, 50, 66, 90, 100, 101, 110, 111, 112, 120, 127, 149, 153, 171, 172, 181, 183, 209, 234, 238, 266, 287, 305, 308, 313, 364, 365, 374, 375, 382, 389, 409, 413, 429, 430, 431, 446, 477, 481, 507, 562, 563, 564, 575, 581, 582, 583, 584, 588, 591, 595, 599, 601, 627, 629, 636, 638, 646, 649, 658, 659, 672, 683, 684], "underli": [16, 17, 119, 141, 175, 253, 361, 381, 400, 433, 664, 672, 674, 683], "garbag": [16, 17, 318], "chunksiz": [16, 155, 648, 649], "integ": [16, 19, 48, 52, 64, 118, 120, 123, 124, 128, 163, 165, 171, 190, 212, 219, 220, 221, 222, 223, 227, 228, 234, 247, 250, 252, 254, 260, 263, 265, 266, 279, 312, 315, 328, 335, 380, 382, 385, 386, 390, 445, 458, 463, 469, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 508, 538, 602, 615, 636, 646, 649, 657, 658, 659, 672, 674, 675, 678, 683], "offset": [16, 51, 80, 122, 127, 165, 314, 343, 384, 389, 646, 649, 672], "start": [16, 90, 114, 122, 141, 265, 306, 340, 384, 400, 480, 486, 487, 512, 515, 521, 524, 525, 530, 531, 532, 533, 534, 542, 543, 602, 605, 606, 608, 609, 612, 645, 646, 648, 649, 650, 651, 657, 672], "span": 16, "th": [16, 312, 458, 474], "size": [16, 23, 71, 72, 89, 100, 101, 127, 163, 165, 199, 284, 336, 337, 364, 365, 389, 465, 469, 474, 530, 592, 636, 639, 646, 649, 672, 679, 680, 682], "len": [16, 165, 469, 627, 664, 674, 680], "thread": [16, 17, 680], "block": [16, 515], "kernel": [16, 17, 114, 681], "foral": [16, 680], "built": [16, 515, 672, 673, 674, 676], "queri": [16, 160, 419, 674, 677], "driver": [16, 674], "api": [16, 105, 371, 672, 673, 674, 676, 679, 680, 681, 682, 683, 684], "optim": [16, 66, 651, 682, 684], "launch": [16, 680], "configur": [16, 645, 646, 650, 651, 652, 680], "emul": 16, "serial": [16, 17, 34, 35, 36, 61, 62, 203, 204, 205, 216, 217, 295, 296, 297, 326, 327, 664], "It": [16, 60, 93, 132, 143, 199, 212, 325, 348, 394, 402, 639, 671, 680, 683, 684], "good": [16, 627, 636, 672, 674], "point": [16, 69, 112, 113, 135, 161, 330, 376, 396, 420, 469, 514, 538, 539, 566, 646, 672, 678, 680, 681, 683], "ineffici": 16, "Its": [16, 672], "maximum": [16, 23, 85, 163, 165, 250, 284, 350, 478, 544, 587, 627, 636, 646, 678, 682], "possibl": [16, 69, 160, 199, 330, 419, 649, 658, 672, 680, 682, 683, 684], "avail": [16, 160, 419, 471, 518, 527, 645, 646, 650, 651, 663, 665, 667, 674, 679, 682, 683], "resourc": [16, 66], "number": [16, 26, 27, 33, 60, 66, 67, 70, 99, 102, 103, 104, 105, 110, 111, 118, 119, 120, 127, 128, 132, 141, 146, 149, 153, 161, 163, 165, 176, 232, 234, 254, 257, 258, 263, 278, 281, 286, 287, 294, 312, 318, 325, 361, 367, 370, 371, 374, 375, 382, 389, 390, 394, 400, 404, 409, 413, 420, 430, 431, 434, 438, 440, 441, 442, 446, 463, 465, 467, 471, 474, 479, 482, 494, 513, 514, 517, 521, 528, 533, 538, 553, 562, 563, 564, 567, 573, 574, 575, 581, 582, 583, 584, 588, 591, 595, 602, 622, 623, 624, 625, 626, 627, 633, 635, 636, 638, 642, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 672, 674, 678, 679, 680, 682], "concurr": [16, 17], "To": [16, 33, 42, 121, 165, 294, 383, 431, 518, 587, 646, 650, 651, 672, 676, 679, 680, 683, 684], "access": [16, 33, 160, 294, 419, 664, 667, 668, 672, 674, 680, 682], "count": [16, 33, 66, 85, 86, 91, 93, 103, 127, 153, 173, 294, 350, 351, 354, 356, 370, 389, 413, 431, 554, 558, 576, 628, 664, 674, 677, 679], "threadidx": [16, 680], "blockdim": [16, 680], "respect": [16, 90, 121, 161, 383, 420, 455, 528, 533, 547, 636, 649, 654, 676, 678], "document": [16, 528, 657, 672, 674, 680, 684], "In": [16, 23, 102, 119, 160, 277, 284, 385, 419, 507, 528, 533, 570, 657, 672, 675, 676, 678, 680, 681, 683, 684], "below": [16, 23, 25, 33, 45, 284, 285, 294, 308, 575, 674, 680, 684], "invok": [16, 17, 672], "By": [16, 33, 42, 66, 93, 116, 128, 160, 161, 173, 206, 278, 294, 378, 390, 419, 420, 465, 639, 646, 651, 672, 674, 676, 680, 683, 684], "loop": [16, 17, 672, 676, 680], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 277, 517, 545, 650, 651, 672, 678, 679, 680, 683, 684], "so": [17, 127, 165, 173, 260, 366, 389, 431, 672, 673, 676, 677, 680, 683, 684], "must": [17, 34, 47, 48, 70, 76, 90, 104, 119, 121, 122, 127, 128, 134, 135, 137, 144, 153, 160, 162, 172, 179, 184, 191, 199, 203, 235, 236, 250, 266, 295, 310, 318, 383, 384, 389, 390, 396, 397, 403, 413, 419, 422, 453, 458, 465, 471, 597, 603, 616, 636, 646, 649, 650, 651, 654, 655, 672, 674, 680, 683, 684], "independ": [17, 680], "stride": [17, 163, 627], "improv": [17, 646, 650], "parallel": [17, 674, 677, 680, 682, 684], "resembl": 17, "code": [17, 41, 141, 238, 252, 303, 312, 317, 400, 469, 672, 674, 680], "nelem": [17, 676], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 680], "zip": [17, 161, 420, 646, 649, 674, 680], "callabl": [18, 84, 106, 143, 161, 177, 278, 349, 372, 402, 420, 435, 550, 569, 573, 587, 592, 594, 679], "na_act": [18, 348], "elementwis": [18, 278, 628], "everi": [18, 43, 70, 521, 550, 569, 594, 672, 674, 680], "ignor": [18, 21, 33, 41, 69, 89, 90, 93, 103, 119, 121, 128, 172, 280, 294, 303, 330, 348, 353, 383, 385, 390, 446, 456, 465, 558, 638, 646, 648, 650, 653, 654, 656, 657, 658, 680, 683], "propag": [18, 21, 50, 280, 313, 348, 528, 533, 561, 680, 682, 683], "without": [18, 25, 33, 41, 66, 119, 236, 245, 285, 294, 303, 348, 465, 515, 528, 532, 533, 646, 654, 655, 656, 673, 676, 680], "them": [18, 278, 348, 431, 472, 477, 479, 657, 672, 678, 679, 680, 684], "kind": [19, 90, 122, 143, 144, 214, 236, 279, 384, 402, 403, 460, 678], "quicksort": [19, 144, 279, 403, 460], "ascend": [19, 116, 135, 143, 144, 173, 238, 279, 366, 378, 396, 402, 403, 431, 460], "na_posit": [19, 135, 143, 144, 238, 279, 396, 402, 403, 460], "last": [19, 33, 42, 50, 60, 99, 102, 119, 135, 143, 144, 151, 207, 238, 279, 294, 304, 313, 325, 363, 366, 396, 402, 403, 411, 447, 460, 486, 518, 525, 527, 561, 606, 608, 610, 627, 646, 657, 680], "would": [19, 135, 160, 238, 277, 279, 396, 419, 522, 545, 657, 674, 680, 683], "effect": [19, 57, 118, 279, 321, 380, 675, 677], "compat": [19, 22, 63, 89, 171, 212, 279, 305, 353, 649, 659, 672, 673, 678, 681, 682], "mergesort": [19, 279], "heapsort": [19, 279], "stabl": [19, 279, 682], "choic": [19, 66, 279, 657, 676], "algorithm": [19, 112, 279, 376, 473, 474, 519, 672, 674], "descend": [19, 99, 135, 143, 144, 173, 238, 279, 363, 396, 402, 403, 431, 460], "first": [19, 33, 37, 42, 47, 57, 60, 99, 102, 116, 122, 135, 137, 143, 144, 161, 173, 178, 190, 207, 235, 238, 254, 277, 279, 294, 298, 304, 310, 321, 325, 363, 366, 378, 384, 385, 396, 397, 402, 403, 420, 431, 460, 476, 505, 510, 518, 528, 533, 536, 537, 541, 559, 607, 609, 611, 615, 627, 636, 646, 649, 657, 672, 674, 680], "put": [19, 143, 144, 238, 279, 402, 403, 460, 671], "begin": [19, 143, 144, 238, 279, 402, 403, 460, 487, 516, 531, 532, 533, 609, 646, 649, 674], "cupi": [19, 28, 57, 112, 132, 135, 156, 174, 229, 238, 251, 279, 312, 321, 394, 396, 415, 432, 627, 672, 673, 674, 681, 683, 684], "ndarrai": [19, 55, 88, 132, 156, 162, 174, 175, 178, 186, 238, 251, 266, 279, 312, 394, 415, 422, 432, 433, 627, 636, 643, 658, 674, 676, 680], "base": [19, 23, 41, 42, 51, 60, 66, 70, 80, 107, 122, 127, 136, 194, 243, 266, 277, 279, 284, 303, 314, 325, 343, 366, 384, 389, 444, 461, 470, 474, 484, 485, 494, 627, 644, 648, 649, 657, 672, 674, 678, 680], "int32": [19, 21, 59, 135, 238, 279, 280, 299, 324, 396, 431, 459, 463, 469, 471, 473, 480, 486, 508, 519, 524, 525, 538, 627, 636, 646, 672, 674, 678, 680, 682], "foo": [19, 44, 155, 279, 385, 521, 646, 674], "idx": [19, 71, 72, 100, 101, 201, 212, 219, 220, 221, 222, 223, 227, 228, 229, 236, 238, 239, 242, 254, 279, 318, 336, 337, 364, 365, 470, 518, 527, 674], "keyword": [20, 28, 86, 106, 118, 119, 230, 351, 372, 380, 446, 528, 533, 587, 648, 674, 680], "error": [21, 41, 119, 155, 160, 172, 277, 280, 303, 335, 419, 636, 648, 657, 658, 678, 682], "rais": [21, 41, 51, 53, 54, 80, 119, 121, 136, 172, 178, 211, 255, 277, 280, 303, 306, 314, 316, 319, 335, 343, 383, 454, 458, 470, 486, 507, 518, 521, 525, 527, 544, 636, 657, 658, 672, 676, 677, 678, 680], "cast": [21, 48, 110, 111, 118, 149, 150, 280, 374, 375, 380, 409, 410, 675, 683], "altern": [21, 41, 43, 106, 280, 303, 372, 522, 587, 646], "col": [21, 68, 280, 676], "where": [21, 35, 41, 43, 48, 66, 71, 72, 84, 99, 100, 101, 102, 106, 112, 118, 120, 135, 146, 163, 176, 204, 229, 234, 280, 296, 303, 336, 337, 349, 364, 365, 366, 372, 376, 380, 382, 396, 404, 434, 467, 474, 480, 483, 486, 490, 491, 524, 525, 587, 624, 633, 635, 648, 672, 674, 675, 679, 682], "specif": [21, 42, 48, 90, 128, 280, 390, 663, 667, 672, 674, 683], "deep": [21, 25, 66, 89, 158, 202, 240, 280, 285, 353, 417, 637], "henc": [21, 280, 683], "chang": [21, 25, 105, 118, 146, 172, 176, 280, 285, 304, 371, 380, 381, 404, 431, 434, 454, 455, 515, 536, 683], "warn": [21, 119, 280, 657, 683], "control": [21, 33, 119, 164, 280, 294, 423, 515, 627, 646, 682], "except": [21, 42, 60, 119, 122, 186, 207, 218, 244, 278, 280, 304, 325, 384, 486, 525, 543, 605, 646, 657, 672, 679, 682], "invalid": [21, 53, 54, 119, 211, 255, 280, 316, 319, 657, 658], "suppress": [21, 41, 119, 280, 303], "On": [21, 119, 280, 455, 674, 677], "constructor": [21, 280, 664, 672, 674, 676, 683], "20": [21, 37, 41, 47, 57, 64, 119, 120, 160, 211, 242, 280, 303, 310, 319, 321, 328, 380, 381, 382, 419, 423, 468, 526, 645, 674, 676, 677, 680], "30": [21, 40, 41, 57, 59, 64, 119, 120, 122, 179, 211, 280, 302, 303, 319, 321, 324, 328, 380, 381, 382, 384, 423, 558, 602, 606, 608, 609, 610, 611, 612, 618, 645, 657, 674], "float32": [21, 280, 431, 658, 678, 682], "custom": [21, 127, 280, 389, 643, 651, 672, 677, 684], "cat_dtyp": [21, 280], "enabl": [21, 163, 280, 646, 649, 672, 678, 682], "s1": [21, 276, 280, 446, 456, 470, 492, 493, 502], "s2": [21, 276, 280, 385, 446, 456, 470, 492, 502], "alia": [22, 63, 224, 331, 340], "loc": [22, 41, 67, 214, 250, 260, 303, 674, 677, 680], "lower": [23, 33, 112, 113, 284, 294, 376, 464, 515, 536, 537, 540, 541, 566, 664, 672, 674], "upper": [23, 33, 284, 294, 510, 515, 536, 537, 664], "inplac": [23, 41, 42, 43, 48, 50, 69, 84, 119, 121, 123, 138, 143, 144, 177, 233, 236, 283, 284, 303, 304, 305, 313, 330, 349, 381, 383, 385, 402, 403, 435, 447, 448, 449, 453, 454, 455, 460, 561, 683], "trim": [23, 284, 516], "threshold": [23, 284, 575], "assign": [23, 48, 116, 119, 134, 283, 284, 378, 423, 674, 677, 683], "outsid": [23, 160, 284, 419, 446, 680], "boundari": [23, 127, 282, 284, 389, 680], "singular": [23, 284], "latter": [23, 284, 676], "case": [23, 48, 60, 90, 112, 119, 143, 197, 218, 244, 247, 284, 325, 385, 402, 445, 470, 473, 507, 512, 515, 521, 528, 627, 657, 672, 676, 679, 680, 683, 684], "perform": [23, 35, 48, 57, 61, 66, 84, 90, 110, 111, 132, 143, 149, 160, 177, 179, 184, 191, 204, 216, 266, 281, 284, 296, 304, 321, 326, 349, 374, 375, 394, 402, 409, 419, 423, 435, 455, 515, 542, 543, 550, 562, 563, 564, 569, 581, 582, 583, 584, 588, 591, 594, 595, 597, 603, 616, 646, 650, 653, 654, 655, 656, 672, 676, 679, 680, 681, 682, 683, 684], "array_lik": [23, 284], "minimum": [23, 26, 91, 127, 284, 286, 354, 389, 466, 478, 479, 509, 517, 526, 545, 573, 575, 587, 636], "expect": [23, 84, 106, 112, 143, 161, 177, 278, 284, 349, 372, 402, 420, 435, 470, 542, 587, 627, 649, 672, 676, 677, 680], "sr": [23, 122, 132, 277, 284, 340, 384, 394, 414, 431, 473, 479, 522, 680], "t": [25, 40, 89, 93, 103, 112, 119, 132, 165, 173, 179, 184, 188, 191, 285, 302, 356, 370, 394, 431, 468, 475, 497, 503, 507, 511, 515, 516, 529, 535, 553, 574, 597, 603, 613, 616, 649, 674, 676, 677, 680, 683], "creat": [25, 118, 120, 122, 123, 138, 160, 193, 194, 199, 234, 236, 241, 243, 264, 285, 316, 317, 318, 382, 384, 385, 419, 443, 444, 518, 523, 527, 575, 626, 646, 674, 676, 677, 678, 679, 680], "modif": [25, 285], "reflect": [25, 40, 285, 302], "refer": [25, 33, 40, 114, 278, 285, 294, 302, 483, 523, 673, 678, 680, 683], "shallow": [25, 285], "vice": [25, 285, 536], "versa": [25, 285, 536], "includ": [25, 33, 48, 55, 57, 66, 71, 72, 85, 86, 89, 91, 100, 101, 103, 112, 128, 136, 161, 165, 166, 173, 186, 266, 282, 285, 294, 336, 337, 350, 351, 353, 354, 356, 364, 365, 370, 376, 390, 420, 431, 447, 453, 454, 455, 495, 502, 511, 515, 529, 532, 535, 553, 558, 562, 563, 564, 574, 581, 582, 583, 584, 588, 591, 595, 605, 636, 639, 645, 646, 648, 649, 650, 651, 652, 672, 674, 678, 680, 682, 683, 684], "neither": [25, 248, 249, 260, 282, 285, 675], "nor": [25, 160, 260, 285, 419, 675, 684], "s_copi": [25, 285], "versu": [25, 285, 683], "share": [25, 285, 446, 672], "remain": [25, 107, 254, 285, 465, 510, 536, 537, 541, 545, 644], "pearson": [26, 142, 281, 286, 401, 573, 679], "min_period": [26, 127, 286, 288, 389, 573, 575, 628, 680], "correl": [26, 281, 286, 573, 575], "matrix": [26, 28, 474, 573, 575, 681], "spearman": [26, 286, 573], "standard": [26, 146, 155, 187, 286, 404, 524, 528, 533, 540, 590, 612, 618, 633, 646, 672, 674, 677, 680], "coeffici": [26, 286, 573], "rank": [26, 286], "observ": [26, 57, 127, 256, 286, 287, 321, 389, 561, 573, 575, 629, 674], "requir": [26, 34, 35, 36, 61, 62, 110, 111, 127, 132, 137, 149, 165, 203, 204, 205, 216, 217, 235, 277, 295, 296, 297, 326, 327, 374, 375, 389, 394, 397, 409, 562, 563, 564, 573, 575, 581, 582, 583, 584, 588, 591, 595, 626, 651, 672, 679, 680], "pair": [26, 73, 121, 383, 573, 575, 651], "have": [26, 33, 45, 47, 51, 70, 80, 90, 93, 102, 104, 106, 116, 118, 122, 132, 136, 164, 165, 172, 173, 266, 278, 286, 294, 308, 310, 314, 343, 372, 378, 384, 394, 423, 452, 465, 474, 484, 485, 507, 545, 573, 575, 643, 672, 674, 676, 679, 680, 683], "valid": [26, 43, 110, 111, 127, 128, 149, 252, 286, 305, 318, 374, 375, 389, 390, 409, 471, 483, 507, 561, 562, 563, 564, 573, 575, 581, 582, 583, 584, 588, 591, 595, 649, 672, 682], "request": [26, 86, 87, 165, 212, 250, 259, 351, 352], "numeric_onli": [27, 78, 79, 85, 86, 87, 91, 93, 110, 111, 112, 116, 142, 146, 149, 176, 341, 342, 350, 351, 352, 354, 374, 375, 378, 401, 404, 409, 434, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595], "cell": [27, 676, 680], "nat": [27, 43, 71, 72, 93, 100, 101, 178, 336, 337, 356, 364, 365, 612, 657, 683], "consid": [27, 41, 42, 43, 45, 47, 71, 72, 93, 100, 101, 155, 207, 278, 303, 305, 308, 310, 336, 337, 356, 364, 365, 455, 507, 646, 672, 680, 683], "entri": [27, 43, 66, 71, 72, 84, 100, 101, 155, 177, 304, 305, 336, 337, 349, 364, 365, 435, 507, 646, 649, 655], "person": 27, "john": 27, "myla": 27, "lewi": 27, "ag": [27, 71, 72, 100, 101, 336, 337, 364, 365], "24": [27, 29, 30, 31, 32, 57, 87, 89, 110, 111, 122, 123, 127, 289, 290, 291, 292, 352, 374, 375, 384, 389, 468, 558, 674, 683], "21": [27, 122, 127, 128, 384, 389, 390, 468, 674, 679], "26": [27, 40, 57, 286, 288, 302, 468, 558, 606, 608, 609, 674, 676], "covari": [28, 288, 575], "cumul": [29, 30, 31, 32, 289, 290, 291, 292, 554, 555, 556, 557, 576, 577, 578, 579, 683], "indexedfram": [29, 30, 31, 32, 672], "ser": [29, 30, 31, 32, 50, 60, 71, 72, 84, 87, 100, 101, 151, 177, 282, 287, 289, 290, 291, 292, 305, 313, 321, 325, 336, 337, 349, 352, 364, 365, 411, 423, 435, 468, 490, 491, 507, 514, 515, 516, 519, 538, 539, 612, 680], "cumsum": [29, 30, 31, 289, 290, 291, 672, 683], "15": [29, 30, 31, 32, 42, 51, 80, 122, 127, 135, 138, 242, 278, 289, 290, 291, 292, 314, 340, 343, 384, 389, 396, 418, 468, 498, 499, 674, 676, 680], "9": [29, 30, 31, 32, 33, 37, 48, 64, 78, 79, 82, 85, 86, 91, 110, 111, 121, 122, 127, 128, 146, 149, 160, 171, 176, 286, 288, 289, 290, 291, 292, 294, 328, 341, 342, 346, 348, 350, 351, 354, 374, 375, 383, 384, 389, 390, 404, 409, 419, 429, 434, 456, 460, 468, 497, 573, 575, 602, 605, 639, 659, 672, 674, 676, 678, 679, 680, 683, 684], "34": [29, 30, 31, 32, 149, 289, 290, 291, 292, 409, 477, 683], "product": [31, 40, 110, 149, 256, 257, 258, 291, 302, 374, 409, 681, 682], "percentil": [33, 116, 294, 378], "datetime_is_numer": [33, 294], "descript": [33, 66, 294, 558, 664, 674], "statist": [33, 66, 127, 163, 165, 266, 294, 389, 558, 639, 650, 651, 674], "summar": [33, 294, 558, 679], "central": [33, 294, 558], "tendenc": [33, 294, 558], "dispers": [33, 294, 558], "shape": [33, 47, 89, 135, 143, 294, 310, 396, 402, 558, 672, 676, 680, 683], "dataset": [33, 163, 165, 294, 356, 558, 639, 641, 645, 646, 649, 650, 651, 680], "distribut": [33, 132, 294, 394, 558, 674], "analyz": [33, 294, 558, 674], "well": [33, 112, 137, 212, 235, 294, 397, 451, 515, 655, 672, 676], "vari": [33, 294, 627, 653, 654, 655, 656, 674], "depend": [33, 48, 90, 119, 156, 161, 162, 164, 199, 230, 254, 294, 415, 420, 422, 423, 528, 533, 636, 637, 648, 649, 657, 658, 672, 674, 676, 682], "what": [33, 294, 461, 672, 680, 681, 684], "detail": [33, 179, 184, 191, 277, 294, 575, 597, 603, 616, 618, 645, 646, 650, 651, 673, 674, 679, 680, 684], "fall": [33, 294, 602, 672, 682], "between": [33, 48, 69, 105, 112, 113, 116, 266, 281, 286, 288, 294, 330, 371, 376, 378, 472, 474, 480, 486, 507, 513, 514, 516, 524, 525, 559, 566, 575, 587, 672, 673, 677, 679, 680, 681, 682, 683, 684], "25": [33, 37, 43, 57, 59, 66, 71, 72, 87, 100, 101, 127, 281, 294, 321, 324, 336, 337, 352, 364, 365, 376, 389, 468, 558, 612, 655, 656, 674, 680], "75": [33, 66, 294, 376, 550, 558, 569, 594, 684], "25th": [33, 294], "50th": [33, 294], "75th": [33, 294], "submit": [33, 294], "instead": [33, 66, 106, 114, 122, 127, 165, 186, 199, 236, 256, 294, 317, 335, 372, 384, 389, 446, 456, 475, 477, 486, 525, 587, 605, 672, 674, 682, 683], "style": [33, 42, 57, 90, 118, 294, 321, 674, 680], "select_dtyp": [33, 294], "o": [33, 294, 468, 672, 681], "select": [33, 41, 51, 60, 64, 80, 82, 93, 102, 119, 160, 239, 294, 303, 304, 314, 325, 328, 343, 346, 419, 648, 649, 650, 651, 664, 672, 677, 681], "omit": [33, 41, 173, 294, 303, 465, 558, 648], "noth": [33, 165, 294, 487], "output_fram": [33, 294], "summari": [33, 66, 294, 558, 681], "mean": [33, 45, 57, 110, 111, 122, 149, 277, 294, 308, 321, 374, 375, 384, 409, 471, 532, 550, 558, 569, 594, 674, 676, 677, 679, 680, 683, 684], "std": [33, 294, 558, 676, 677, 679], "50": [33, 41, 59, 66, 121, 122, 201, 294, 303, 324, 376, 383, 384, 558, 654, 676, 678, 680], "median": [33, 294, 679], "top": [33, 116, 294, 378, 456, 664, 674], "freq": [33, 51, 80, 105, 122, 140, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 191, 192, 195, 196, 198, 294, 306, 314, 343, 371, 384, 399, 436, 567, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 613, 614, 616, 617, 618, 619, 620, 674], "most": [33, 93, 173, 278, 294, 431, 486, 525, 651, 665, 672, 674, 677], "frequenc": [33, 93, 122, 173, 179, 184, 191, 294, 384, 431, 439, 597, 603, 616], "timestamp": [33, 44, 71, 72, 100, 101, 127, 161, 165, 294, 336, 337, 364, 365, 389, 420, 504, 597, 603, 616, 649, 657, 674, 677, 683, 684], "highest": [33, 93, 116, 294, 378, 447, 524, 525], "arbitrarili": [33, 294], "chosen": [33, 132, 294, 394], "among": [33, 40, 294, 302, 575, 684], "analysi": [33, 294, 575], "consist": [33, 135, 219, 220, 221, 222, 223, 227, 228, 252, 294, 396, 672, 680], "union": [33, 90, 156, 162, 266, 294, 415, 422, 456, 457, 458, 459, 460, 461, 462, 465, 470, 520, 521, 534, 627, 655], "00000": [33, 142, 294, 401], "50000": [33, 294], "02765": [33, 294], "25000": [33, 294], "75000": [33, 294], "datetime64": [33, 43, 44, 71, 72, 100, 101, 114, 122, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 191, 192, 195, 196, 294, 336, 337, 364, 365, 384, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 657, 678, 682, 683], "2000": [33, 122, 180, 185, 188, 189, 192, 196, 294, 384, 598, 602, 604, 605, 606, 608, 609, 613, 614, 617, 618, 620], "2010": [33, 294, 605, 612, 676], "2006": [33, 294, 605], "09": [33, 51, 80, 122, 127, 294, 314, 343, 384, 389, 602, 606, 608, 609, 618, 674], "08": [33, 114, 118, 122, 127, 179, 181, 182, 183, 184, 187, 190, 195, 294, 384, 389, 599, 600, 601, 602, 606, 615, 619, 653, 654, 655, 656], "2004": [33, 294, 605], "31": [33, 122, 179, 181, 182, 183, 184, 187, 189, 190, 195, 196, 294, 384, 599, 600, 601, 602, 605, 606, 610, 611, 614, 615, 618, 619, 620, 621, 622, 623, 625], "field": [33, 165, 294, 546, 627, 646, 672], "classmethod": [34, 35, 53, 54, 55, 61, 203, 204, 210, 211, 216, 255, 256, 257, 258, 295, 296, 316, 317, 318, 319, 326], "header": [34, 35, 36, 47, 61, 62, 155, 203, 204, 205, 216, 217, 295, 296, 297, 310, 326, 327, 646, 672], "represent": [34, 66, 137, 174, 175, 203, 235, 251, 256, 295, 397, 432, 433, 465, 678, 681], "subclass": [34, 35, 61, 127, 137, 199, 203, 204, 216, 235, 295, 296, 326, 348, 389, 397, 672], "implement": [34, 86, 105, 137, 172, 203, 235, 265, 295, 351, 371, 397, 544, 648, 672, 674, 677, 680, 682], "how": [34, 43, 53, 76, 90, 105, 116, 128, 137, 160, 172, 203, 208, 230, 235, 295, 305, 371, 378, 390, 397, 419, 446, 648, 674, 676, 680, 681, 682], "construct": [34, 107, 137, 178, 203, 235, 249, 295, 397, 436, 644, 672], "metadata": [34, 35, 36, 61, 62, 137, 165, 203, 204, 205, 216, 217, 235, 295, 296, 297, 326, 327, 397, 627, 640, 642, 650, 651], "reconstruct": [34, 35, 36, 61, 62, 137, 203, 204, 205, 216, 217, 235, 295, 296, 297, 326, 327, 397], "buffer": [34, 35, 36, 61, 62, 66, 137, 203, 204, 205, 216, 217, 235, 293, 295, 296, 297, 326, 327, 369, 397, 648, 682], "memoryview": [34, 35, 36, 61, 62, 137, 203, 204, 205, 216, 217, 235, 295, 296, 297, 326, 327, 397], "serializ": [34, 35, 61, 137, 161, 203, 204, 216, 235, 295, 296, 326, 397, 420], "instanc": [34, 35, 51, 61, 80, 138, 203, 204, 216, 265, 295, 296, 314, 326, 343, 465, 473, 481, 513, 522, 646, 672, 674], "cl": [34, 35, 61, 203, 204, 216, 295, 296, 326], "wa": [34, 35, 61, 203, 204, 216, 238, 295, 296, 326, 677], "produc": [34, 35, 61, 107, 118, 132, 203, 204, 216, 295, 296, 326, 394, 456, 644, 649, 674, 679, 680, 684], "meta": [34, 35, 36, 61, 62, 137, 154, 203, 204, 205, 216, 217, 235, 295, 296, 297, 326, 327, 397], "privat": [34, 35, 36, 61, 62, 137, 203, 204, 205, 216, 217, 235, 295, 296, 297, 326, 327, 397], "devic": [35, 36, 61, 137, 162, 204, 205, 216, 235, 277, 278, 296, 297, 326, 397, 422, 627, 672], "side": [35, 61, 90, 118, 122, 135, 204, 214, 216, 248, 249, 296, 326, 380, 384, 396, 466, 509, 511, 517, 526, 529, 535, 545, 636, 675], "deseri": [35, 61, 137, 204, 216, 235, 296, 326, 397], "task": [35, 61, 204, 216, 296, 326, 672, 674, 680, 684], "primari": [35, 204, 296, 672], "purpos": [35, 204, 296, 672], "creation": [35, 204, 296, 681], "memori": [35, 36, 62, 66, 89, 155, 158, 162, 204, 205, 217, 240, 277, 296, 297, 327, 353, 417, 422, 626, 627, 637, 649, 651, 672, 673, 674, 676, 682], "host": [35, 62, 162, 175, 204, 217, 266, 296, 327, 422, 433, 651, 672], "necessari": [35, 40, 156, 204, 296, 302, 415, 672, 674, 680], "associ": [36, 62, 205, 217, 266, 297, 327, 678, 684], "period": [37, 51, 80, 105, 122, 127, 140, 180, 185, 188, 189, 192, 196, 298, 314, 343, 371, 384, 389, 399, 559, 567, 598, 604, 610, 611, 613, 614, 617, 618, 620, 674], "discret": [37, 298, 636], "calcul": [37, 66, 105, 127, 146, 176, 187, 214, 286, 298, 318, 371, 389, 404, 434, 559, 575, 612, 629, 630, 631, 632, 633, 634, 635, 657, 674, 676, 681], "compar": [37, 47, 206, 218, 298, 310, 335, 570, 653, 654, 655, 656, 664, 675, 679, 683, 684], "previou": [37, 118, 250, 298], "shift": [37, 105, 281, 298, 371, 559], "neg": [37, 60, 120, 153, 234, 298, 325, 382, 413, 482, 487, 559], "take": [37, 102, 106, 158, 240, 278, 372, 417, 465, 507, 550, 559, 569, 594, 628, 637, 676, 680], "gdf": [37, 558, 561, 570, 573, 575, 674, 675, 678], "16": [37, 127, 135, 348, 389, 396, 468, 484, 485, 657, 674, 680, 682], "36": [37, 127, 389, 674, 680], "divis": [38, 39, 52, 117, 124, 131, 170, 186, 300, 301, 315, 379, 386, 393, 427, 605], "truediv": [38, 39, 300, 301], "inf": [38, 39, 71, 72, 100, 101, 117, 131, 170, 300, 301, 336, 337, 364, 365, 379, 393, 427], "flexibl": [40, 160, 302, 419, 672, 674, 676, 680, 683], "wrapper": [40, 302, 672, 680], "sub": [40, 148, 302, 408, 469, 480, 486, 521, 524, 525], "mul": [40, 95, 302, 358], "div": [40, 302], "mod": [40, 302], "pow": [40, 302], "swap": [40, 302], "operand": [40, 302], "http": [40, 278, 302, 473, 528, 533, 542, 543, 575, 645, 646, 649, 650, 651, 652, 657, 682], "doc": [40, 278, 302, 528, 533, 618, 649, 657, 676, 684], "org": [40, 278, 302, 528, 533, 575, 657], "datamodel": [40, 302], "html": [40, 278, 302, 528, 533, 542, 543, 657], "__ror__": [40, 302], "70": [40, 302], "174": [40, 302], "remov": [41, 42, 123, 174, 175, 251, 254, 303, 304, 305, 385, 432, 433, 453, 455, 477, 478, 479, 511, 515, 516, 529, 535, 672, 680], "multi": [41, 48, 76, 252, 303, 643, 673, 674, 681], "keyerror": [41, 303], "found": [41, 90, 135, 229, 260, 266, 303, 348, 396, 481, 486, 518, 522, 523, 525, 527, 528, 533, 539, 618, 646, 672, 675], "dropna": [41, 45, 57, 93, 103, 145, 160, 173, 303, 308, 321, 323, 356, 370, 419, 431, 456, 553, 574, 681], "drop_dupl": [41, 303], "duplic": [41, 42, 99, 102, 119, 138, 207, 245, 303, 304, 363, 366, 520, 636, 646, 684], "certain": [41, 42, 90, 303, 515, 528, 533, 680], "reindex": [41, 303, 561, 664, 675], "midx": [41, 141, 238, 253, 261, 303, 400], "from_product": [41, 236, 256, 258, 303], "40": [41, 122, 179, 187, 190, 303, 380, 384, 470, 615, 674], "lama": [41, 303, 304, 335], "falcon": [41, 57, 60, 70, 123, 173, 303, 321, 325], "speed": [41, 57, 123, 303, 321, 558, 646, 657, 676], "weight": [41, 132, 303, 394], "length": [41, 45, 51, 80, 84, 90, 121, 132, 134, 144, 177, 229, 244, 266, 303, 308, 314, 343, 349, 383, 394, 403, 435, 458, 459, 474, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 528, 533, 544, 545, 567, 627, 636, 638, 680], "big": [41, 66, 303], "small": [41, 303, 646, 650, 672, 676, 677, 679, 680], "45": [41, 191, 303, 597, 603, 616, 657, 680], "200": [41, 118, 201, 278, 303, 676], "100": [41, 112, 121, 122, 186, 201, 238, 278, 303, 321, 383, 384, 497, 499, 605, 654, 674, 676, 680, 683], "250": [41, 303], "150": [41, 303], "320": [41, 303], "subset": [42, 43, 51, 80, 136, 152, 160, 173, 239, 314, 343, 412, 419, 646, 677, 679], "keep": [42, 43, 84, 99, 102, 104, 116, 172, 177, 207, 304, 305, 349, 363, 366, 378, 435, 477, 478], "identifi": [42, 71, 72, 88, 100, 101, 143, 160, 336, 337, 364, 365, 402, 419, 472, 479, 522, 523, 618, 643, 648], "drop": [42, 43, 45, 104, 108, 123, 138, 145, 207, 208, 254, 304, 305, 308, 385, 456, 636, 681, 684], "occurr": [42, 99, 102, 207, 304, 363, 366, 471, 481, 507, 518, 521, 527, 674], "place": [42, 69, 84, 118, 121, 123, 128, 137, 138, 143, 161, 172, 177, 235, 330, 349, 383, 385, 390, 397, 402, 420, 429, 435, 447, 449, 455, 465, 477, 478, 479, 507, 646, 650, 651, 682, 683], "brand": 42, "yum": 42, "indomi": 42, "cup": 42, "pack": 42, "rate": 42, "being": [42, 110, 111, 149, 165, 190, 304, 374, 375, 409, 457, 480, 486, 524, 525, 530, 615, 653, 654, 655, 656, 674, 680], "guarante": [42, 132, 304, 394, 462, 575, 646, 679, 684], "thresh": 43, "decid": [43, 208], "least": [43, 104, 172, 208, 323, 456, 507, 678, 680], "isna": [43, 305, 683], "notna": [43, 305, 683], "fillna": [43, 121, 305, 383, 674, 675, 677, 681], "alfr": [43, 71, 72, 100, 101, 336, 337, 364, 365], "batman": [43, 71, 72, 100, 101, 336, 337, 364, 365], "catwoman": 43, "toi": [43, 71, 72, 100, 101, 336, 337, 364, 365, 490, 491, 680], "batmobil": [43, 71, 72, 100, 101, 336, 337, 364, 365], "bullwhip": 43, "born": [43, 71, 72, 100, 101, 336, 337, 364, 365], "1940": [43, 71, 72, 100, 101, 336, 337, 364, 365], "look": [43, 672, 676, 677, 680], "20180310": 44, "ax": [45, 107, 160, 174, 175, 251, 308, 419, 432, 433, 446, 532, 644, 649, 660, 667], "still": [45, 308], "we": [45, 70, 102, 118, 119, 122, 199, 308, 356, 384, 507, 648, 672, 674, 676, 677, 678, 680, 683, 684], "our": [45, 308, 672, 674, 676, 680, 684], "test": [47, 60, 310, 325, 335, 470, 475, 516, 534, 646, 664, 674, 677, 684], "exactly_equ": [47, 310], "different_column_typ": [47, 310], "expr": [48, 114], "evalu": [48, 475, 492, 534, 674], "describ": [48, 66, 160, 161, 419, 420, 519, 650, 651, 679], "express": [48, 114, 470, 471, 475, 476, 481, 512, 521, 523, 528, 533, 534, 650, 651, 681], "mutat": 48, "typic": [48, 672, 684], "statement": [48, 674, 680], "bitwis": [48, 680], "logic": [48, 90, 277, 650, 651, 672, 674, 680], "boolean": [48, 70, 71, 72, 82, 85, 86, 91, 100, 101, 104, 112, 114, 118, 119, 138, 163, 164, 186, 193, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 241, 250, 260, 264, 276, 278, 282, 331, 332, 333, 334, 335, 336, 337, 346, 350, 351, 354, 364, 365, 368, 376, 380, 381, 423, 443, 457, 470, 475, 478, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 512, 534, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 605, 606, 607, 608, 609, 610, 611, 638, 646, 649, 650, 651, 680, 681], "automat": [48, 53, 266, 318, 575, 649, 674, 679, 683], "respons": 48, "suitabl": [48, 135, 161, 396, 420, 672], "later": 48, "condit": [48, 84, 114, 177, 349, 435, 674, 680], "upon": [48, 137, 235, 397], "earlier": 48, "though": [48, 674, 680], "modifi": [48, 123, 138, 172, 236, 385, 429, 561, 649], "line": [48, 60, 161, 325, 420, 486, 525, 544, 646, 649, 676], "replic": [49, 311], "22": [49, 122, 187, 234, 384, 468, 674, 683], "44": [49, 184, 680], "ffill": [50, 105, 250, 313, 371, 561], "bfill": [50, 122, 250, 313, 384, 561], "forward": [50, 313, 560, 561, 565, 580, 586], "next": [50, 250, 313, 481, 561, 672, 674, 676, 680], "backward": [50, 313, 551, 552, 571, 572], "initi": [51, 314, 672, 674], "time": [51, 80, 105, 120, 122, 127, 153, 155, 161, 234, 266, 278, 314, 343, 371, 382, 384, 389, 413, 420, 464, 471, 536, 537, 541, 575, 646, 650, 651, 657, 664, 672, 676, 677, 680, 681, 683], "date": [51, 80, 161, 178, 186, 190, 314, 343, 420, 602, 605, 606, 607, 608, 609, 610, 611, 615, 618, 646, 649, 657, 674, 677], "few": [51, 80, 314, 343, 672, 680, 683, 684], "1m": [51, 314, 602], "displai": [51, 66, 80, 116, 314, 343, 378, 636], "month": [51, 179, 184, 191, 314, 597, 602, 603, 606, 607, 616, 657], "typeerror": [51, 53, 54, 80, 121, 206, 211, 255, 306, 314, 316, 319, 335, 343, 383, 507, 658, 680], "datetimeindex": [51, 80, 314, 343, 657, 664], "date_rang": [51, 80, 122, 180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 306, 314, 343, 384, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 674], "2d": [51, 80, 314, 343, 637], "ts": [51, 80, 314, 343], "3d": [51, 80, 314, 343], "9223372036854775807": [52, 124, 315, 386, 674], "tabl": [53, 68, 107, 153, 154, 160, 161, 163, 255, 413, 419, 420, 478, 540, 644, 649, 672, 674, 679, 682], "pyarrow": [53, 154, 255, 316, 414, 650, 651, 674], "doe": [53, 57, 70, 119, 156, 160, 277, 278, 306, 321, 415, 419, 455, 528, 570, 643, 658, 672, 675, 678, 679, 680, 684], "similar": [53, 90, 143, 160, 277, 402, 419, 528, 533, 653, 654, 656, 677, 679, 680, 683, 684], "to_panda": [53, 674, 677, 679, 680, 683, 684], "work": [53, 127, 389, 431, 626, 627, 672, 673, 674, 678, 679, 680, 681], "pa": [53, 255, 316], "record": [55, 90, 116, 161, 378, 420, 513, 649], "recarrai": [55, 166], "ndim": 55, "greater": [56, 58, 67, 282, 320, 322, 545, 575, 658, 678], "as_index": [57, 321], "group_kei": [57, 321], "squeez": [57, 321], "group": [57, 116, 160, 163, 321, 378, 419, 431, 476, 523, 550, 554, 555, 556, 557, 559, 562, 563, 564, 566, 567, 568, 569, 570, 576, 577, 578, 579, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 642, 648, 650, 651, 672, 675, 677, 680, 681, 683, 684], "mapper": [57, 119, 321], "involv": [57, 266, 321, 672], "some": [57, 69, 118, 260, 321, 330, 405, 460, 471, 521, 570, 657, 672, 674, 675, 679, 680, 682, 684], "combin": [57, 138, 173, 321, 446, 472, 511, 528, 529, 535, 550, 569, 594, 650, 651, 664, 674, 682], "split": [57, 161, 249, 321, 420, 468, 514, 518, 527, 528, 538, 539, 649, 652, 664, 674, 682], "larg": [57, 132, 321, 394, 672, 677, 679], "amount": [57, 66, 321, 672, 680], "notic": [57, 260, 321, 678, 680], "interpret": [57, 160, 321, 419, 484, 485, 528, 533, 646, 650, 651], "hierarch": [57, 85, 86, 91, 160, 171, 252, 321, 350, 351, 354, 419, 659, 672, 674], "particular": [57, 85, 86, 91, 321, 350, 351, 354, 405, 471, 646, 672, 679, 684], "relev": [57, 321], "sql": [57, 90, 321, 674], "influenc": [57, 321, 682], "preserv": [57, 121, 278, 321, 383, 597, 603, 616, 646, 683], "dataframegroupbi": [57, 663], "about": [57, 66, 321, 575, 626, 627, 672, 674, 682], "anim": [57, 70, 304, 335, 446], "parrot": [57, 60, 123, 321, 325, 470], "380": [57, 558], "370": [57, 321, 558], "375": 57, "captiv": 57, "wild": 57, "from_arrai": [57, 218, 244], "390": [57, 321, 676], "350": [57, 321], "185": 57, "210": 57, "murmur3": [59, 324], "hash": [59, 104, 324, 626], "md5": [59, 324], "murmurhash3": [59, 324], "120": [59, 324, 469], "1930516747": [59, 324], "422619251": [59, 324], "941520876": [59, 324], "7be4bbacbfdb05fb3044e36c22b41e8b": [59, 324], "947ca8d2c5f0f27437f156cfbfab0969": [59, 324], "d0580ef52d27c043c8e341fd5039b166": [59, 324], "330519225": [59, 324], "397962448": [59, 324], "1345834934": [59, 324], "57ce879751b5169c525907d5c563fae1": [59, 324], "948d6221a7c4963d4be411bcead7e32b": [59, 324], "fe061786ea286a515b772d91b0dfcd70": [59, 324], "quickli": [60, 325, 676], "your": [60, 118, 119, 325, 674, 676, 680], "right": [60, 76, 90, 122, 127, 135, 214, 223, 230, 248, 249, 282, 299, 325, 384, 389, 396, 466, 480, 486, 509, 517, 524, 525, 529, 533, 535, 545, 636, 638, 653, 654, 655, 656, 677, 678], "tail": [60, 325], "allig": [60, 325], "bee": [60, 325, 511, 529, 535], "lion": [60, 123, 325, 481], "monkei": [60, 123, 325, 446, 481], "shark": [60, 325], "whale": [60, 325], "zebra": [60, 325], "view": [60, 156, 162, 325, 415, 422, 561, 672, 681], "three": [60, 102, 107, 325, 472, 636, 644, 672, 676, 680, 682], "iloc": [63, 570, 674, 675, 680, 683], "18": [64, 122, 127, 128, 179, 184, 187, 190, 328, 384, 389, 390, 468, 615, 624, 674, 678], "slice": [64, 214, 250, 260, 328, 532, 664, 672, 674, 675], "verbos": 66, "buf": 66, "max_col": 66, "memory_usag": 66, "null_count": [66, 318], "print": [66, 119, 127, 167, 389, 424, 570, 657, 676], "concis": 66, "usag": [66, 89, 353, 649, 674], "full": [66, 90, 160, 419, 587, 648, 674, 676, 677, 684], "max_info_column": 66, "writabl": 66, "sy": 66, "stdout": 66, "send": 66, "you": [66, 106, 123, 199, 372, 385, 468, 478, 513, 587, 636, 672, 674, 676, 678, 679, 680, 683, 684], "further": 66, "process": [66, 167, 424, 674, 676, 679, 680], "switch": [66, 657], "truncat": [66, 627], "total": [66, 89, 353, 545, 602, 642, 645, 650, 651, 678, 680], "alwai": [66, 97, 116, 132, 239, 277, 356, 378, 394, 507, 646, 672, 679, 680, 682, 684], "never": [66, 458, 672, 680], "introspect": 66, "shown": [66, 481], "human": 66, "readabl": 66, "unit": [66, 161, 420, 436, 649, 657], "estim": [66, 288, 575], "made": [66, 156, 168, 260, 415, 546, 675, 683], "assum": [66, 299, 470, 474, 521, 528, 533, 575, 637, 672, 680], "consum": [66, 680], "real": 66, "cost": 66, "smaller": [66, 89, 479], "max_info_row": 66, "int_valu": 66, "text_valu": 66, "alpha": [66, 99, 102], "beta": 66, "gamma": [66, 278], "delta": [66, 146, 176, 404, 434, 436, 575, 590, 593, 633, 635], "epsilon": 66, "float_valu": 66, "int_col": 66, "text_col": 66, "float_col": 66, "core": [66, 164, 242, 255, 293, 423, 664, 672, 674, 680, 683], "130": 66, "byte": [66, 89, 353, 463, 543, 626, 639, 645, 646, 649, 650, 651, 672, 682], "its": [66, 106, 154, 172, 281, 372, 657, 672, 674, 682], "pipe": [66, 679], "content": [66, 160, 419, 507, 672, 680], "io": [66, 646, 650, 651, 664, 681], "stringio": [66, 646, 649, 652], "getvalu": 66, "mode": [66, 160, 419, 648, 682], "special": [66, 197, 247, 445, 471, 495, 507, 545, 627, 672, 678, 684], "fine": 66, "tune": [66, 682], "random_strings_arrai": 66, "random": [66, 132, 165, 394, 575, 674, 676, 683, 684], "column_1": 66, "column_2": 66, "column_3": 66, "1000000": [66, 163, 165, 278], "999999": 66, "mb": [66, 639, 674], "num": [67, 674], "interleav": [68, 153, 413], "major": [68, 637, 684], "a1": [68, 476, 676], "a2": [68, 676], "a3": [68, 676], "b1": 68, "b2": [68, 476], "b3": 68, "linear": [69, 112, 330, 376, 566, 672, 676, 677], "limit_direct": [69, 330], "limit_area": [69, 330], "downcast": [69, 209, 330, 561, 658], "techniqu": [69, 330], "space": [69, 165, 330, 472, 507, 514, 515, 518, 528, 537, 646], "linearli": [69, 330], "unsort": [69, 330, 677], "lead": [69, 155, 330, 511, 529, 535, 575, 676, 677, 680], "erron": [69, 330], "num_leg": [70, 173], "num_w": [70, 173], "check": [70, 138, 219, 220, 221, 222, 223, 227, 228, 229, 252, 299, 335, 455, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 542, 543, 653, 654, 655, 656, 676, 684], "present": [70, 110, 111, 149, 374, 375, 409, 456, 507, 528, 533, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 627], "leg": [70, 93], "wing": [70, 93], "separ": [70, 465, 472, 513, 514, 518, 527, 528, 533, 638, 652, 667, 672], "spider": 70, "everyth": [71, 72, 85, 86, 91, 336, 337, 350, 351, 354, 446, 532, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595], "mask": [71, 72, 82, 100, 101, 121, 250, 260, 278, 318, 336, 337, 346, 364, 365, 368, 369, 383, 672, 683], "timedelta64": [71, 72, 100, 101, 336, 337, 364, 365, 436, 621, 622, 623, 624, 625, 682, 683], "charact": [71, 72, 100, 101, 336, 337, 364, 365, 464, 465, 466, 467, 468, 469, 470, 471, 477, 478, 479, 484, 485, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 514, 515, 517, 521, 522, 526, 529, 533, 535, 536, 537, 538, 540, 541, 542, 543, 545, 626, 646, 672], "incas": [71, 72, 100, 101, 336, 337, 364, 365], "1939": [71, 72, 100, 101, 336, 337, 364, 365], "05": [71, 72, 100, 101, 122, 179, 181, 182, 183, 184, 187, 190, 191, 195, 281, 336, 337, 364, 365, 384, 597, 599, 600, 601, 602, 603, 615, 616, 619, 653, 654, 655, 656, 657, 674], "27": [71, 72, 100, 101, 336, 337, 364, 365, 468, 606, 608, 609, 674, 676], "joker": [71, 72, 100, 101, 336, 337, 364, 365], "000000": [71, 72, 100, 101, 122, 133, 336, 337, 364, 365, 384, 395, 573, 575, 676, 679, 683], "isnul": [71, 336], "32": [71, 72, 100, 101, 128, 336, 337, 364, 365, 390, 674], "float64index": [71, 72, 100, 101, 141, 211, 336, 337, 364, 365, 400], "genericindex": [71, 72, 100, 101, 336, 337, 364, 365, 456, 457, 458, 459, 460, 461, 462, 470, 672], "left": [76, 90, 119, 122, 128, 135, 172, 214, 223, 230, 248, 249, 282, 299, 384, 390, 396, 466, 480, 486, 511, 517, 521, 524, 525, 526, 535, 540, 545, 636, 653, 654, 655, 656, 674, 677], "lsuffix": [76, 90], "rsuffix": [76, 90], "inner": [76, 90, 230, 446, 650, 651], "outer": [76, 90, 230, 446, 651], "suffic": [76, 680], "avoid": [76, 277, 672, 682, 684], "conflict": 76, "ensur": [76, 156, 162, 415, 422, 470, 651, 674], "now": [76, 638, 672, 674, 676, 680], "due": [76, 570, 646, 674, 675, 677, 680], "lack": 76, "five": [77, 278], "int64index": [77, 141, 201, 206, 209, 218, 229, 230, 233, 234, 236, 238, 242, 244, 254, 283, 400, 471, 655, 672], "fisher": [78, 79, 142, 341, 342, 401], "unbias": [78, 79, 142, 176, 288, 341, 342, 401, 434, 575], "kurtosi": [78, 341], "sampl": [78, 79, 142, 146, 286, 341, 342, 401, 404, 418, 674], "obtain": [78, 79, 278, 341, 342, 544, 684], "definit": [78, 79, 267, 341, 342, 361, 426, 575], "normal": [78, 79, 132, 146, 173, 176, 178, 288, 341, 342, 394, 404, 431, 434, 515, 575, 590, 593, 650, 651, 676], "1999999999999904": [78, 79, 341, 342], "kurt": [79, 342], "final": [80, 343, 650, 651, 672, 680], "dai": [80, 165, 178, 181, 182, 183, 186, 187, 195, 306, 343, 436, 437, 442, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 619, 621, 623, 625, 657, 680, 683], "cond": [84, 177, 349, 435], "dimens": [84, 97, 177, 349, 361, 435], "collaps": [85, 86, 91, 350, 351, 354], "attempt": [85, 86, 91, 199, 206, 260, 350, 351, 354, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595, 638, 646, 657, 675, 680], "17": [87, 122, 127, 135, 281, 352, 384, 389, 396, 468, 674, 683], "unpivot": [88, 643], "wide": [88, 643, 680], "format": [88, 155, 159, 160, 161, 163, 165, 167, 419, 420, 424, 504, 505, 542, 543, 544, 561, 618, 643, 646, 649, 657, 672, 673, 674, 675, 676, 677, 678, 682], "long": [88, 544, 643, 649], "id_var": [88, 643], "value_var": [88, 643], "var_nam": [88, 643], "value_nam": [88, 643], "whose": [89, 107, 546, 638, 644, 672], "ones": [89, 454], "5000": 89, "astyp": [89, 220, 228, 674], "head": [89, 674, 676, 680, 684], "40000": [89, 278], "storag": [89, 681], "mani": [89, 363, 366, 575, 665, 672, 674, 677, 678, 680, 682, 684], "repeat": [89, 153, 413, 471, 664], "5008": 89, "43": [89, 624, 680], "give": [89, 266, 672, 676, 679], "rest": [89, 505, 532, 537], "necessarili": [89, 171, 659], "left_on": 90, "right_on": 90, "left_index": [90, 677], "right_index": [90, 677], "_x": 90, "_y": 90, "databas": 90, "join": [90, 172, 446, 646, 664, 673, 677, 681, 684], "intersect": [90, 446], "leftsemi": 90, "leftanti": 90, "exact": [90, 112, 132, 250, 376, 394, 636, 655, 657], "opposit": 90, "were": [90, 453, 539, 674, 680], "overlap": [90, 136, 172, 446, 478, 481, 627, 636], "determinist": [90, 684], "df_a": [90, 674], "vals_a": [90, 674], "df_b": [90, 674], "vals_b": [90, 674], "df_merg": 90, "sort_valu": [90, 674], "typecast": 90, "ambigu": [90, 178], "exactli": [90, 653, 654, 655, 656, 679], "extend": [90, 636, 674], "semi": [90, 575], "anti": 90, "modulo": [92, 125, 355, 387], "4294967295": [92, 125, 355, 387], "appear": [93, 116, 318, 363, 366, 378, 472], "often": [93, 663, 677, 680, 683], "search": [93, 160, 260, 419, 457, 470, 480, 481, 486, 522, 524, 525, 673, 683, 684], "don": [93, 103, 119, 173, 356, 370, 431, 553, 574, 649, 677, 680, 683], "value_count": [93, 674], "speci": [93, 236], "bird": [93, 123, 446], "mammal": [93, 123], "arthropod": 93, "multipli": [94, 357, 680], "largest": [99, 363], "priorit": [99, 680], "popul": [99, 102, 676, 680], "59000000": [99, 102, 363, 366], "65000000": [99, 102, 363, 366], "434000": [99, 102, 363, 366], "337000": [99, 102, 363, 366], "11300": [99, 102, 363, 366], "gdp": [99, 102], "1937894": [99, 102], "2583560": [99, 102], "12011": [99, 102], "4520": [99, 102], "12128": [99, 102], "17036": [99, 102], "182": [99, 102], "38": [99, 102, 150, 410, 678], "311": [99, 102], "IT": [99, 102], "fr": [99, 102], "mt": [99, 102], "mv": [99, 102], "bn": [99, 102], "IS": [99, 102, 536, 541], "nr": [99, 102], "tv": [99, 102], "ai": [99, 102, 141, 400, 509, 512, 524, 526, 542, 543, 645], "itali": [99, 102, 363, 366], "franc": [99, 102, 363, 366], "malta": [99, 102, 363, 366], "maldiv": [99, 102, 363, 366], "brunei": [99, 102, 363, 366], "iceland": [99, 102, 363, 366], "nauru": [99, 102, 363, 366], "tuvalu": [99, 102, 363, 366], "anguilla": [99, 102, 363, 366], "notnul": [100, 364], "smallest": [102, 116, 366, 378, 658], "retriev": [102, 483, 648], "ti": [102, 116, 250, 378], "resolv": 102, "revers": [102, 363, 366, 674], "distinct": [103, 335, 672], "npart": 104, "keep_index": [104, 134], "partit": [104, 165, 639, 651, 664, 674], "fill_method": [105, 371], "percent": [105, 371], "sequenti": [105, 371, 679, 680, 684], "form": [105, 107, 116, 153, 218, 244, 371, 378, 413, 494, 497, 498, 499, 500, 639, 644, 650, 651, 672, 677], "handl": [105, 155, 160, 161, 172, 304, 371, 405, 419, 420, 446, 528, 533, 545, 648, 658, 664, 672, 673, 682], "consecut": [105, 120, 234, 371, 382, 467, 513, 514, 646], "stop": [105, 141, 265, 340, 371, 400, 530, 531, 532, 648], "increment": [105, 371, 639], "data_keyword": [106, 372, 587], "chain": [106, 372], "groupbi": [106, 372, 664, 672, 673, 674, 675, 677, 681, 684], "write": [106, 155, 159, 160, 161, 163, 165, 372, 419, 420, 639, 641, 646, 648, 674, 676, 680, 682], "arg2": [106, 372], "arg3": [106, 372], "sai": [106, 372, 483, 680], "suppos": [106, 372], "reshap": [107, 145, 644, 664, 676], "organ": [107, 644], "rearrang": [107, 644], "exponenti": [109, 129, 373, 391], "min_count": [110, 111, 149, 374, 375, 409, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595], "fewer": [110, 111, 149, 374, 375, 409, 562, 563, 564, 581, 582, 583, 584, 588, 591, 595], "5040": [110, 111, 374, 375], "q": [112, 113, 376, 566, 618], "interpol": [112, 113, 376, 566], "higher": [112, 113, 376, 566, 649, 672, 682], "midpoint": [112, 376, 566], "nearest": [112, 113, 250, 376, 566], "desir": [112, 113, 152, 239, 376, 412, 566, 646, 649, 680, 684], "li": [112, 113, 376, 566], "j": [112, 113, 376, 474, 680], "approxim": [112, 376], "One": [112, 118, 160, 161, 179, 184, 191, 266, 380, 419, 420, 597, 603, 616, 675, 676, 678, 683], "notabl": [112, 143, 402], "doesn": [112, 132, 165, 394, 507, 674, 683], "under": [112, 651, 667, 672, 674], "cp": [112, 627, 674, 676, 680, 683, 684], "55": [112, 234, 680], "local_dict": [114, 674], "local": [114, 639, 645, 646, 648, 649, 650, 651, 652, 674], "filter": [114, 478, 650, 651, 673, 674, 684], "search_dat": [114, 674], "search_date2": 114, "averag": [116, 378, 680], "na_opt": [116, 378], "pct": [116, 378], "through": [116, 378, 470, 471, 476, 481, 512, 540, 664, 672, 680, 682, 683], "direct": [116, 378, 567, 649, 674, 682], "dens": [116, 378, 676], "lowest": [116, 378, 480, 486, 524, 672], "increas": [116, 226, 299, 331, 333, 366, 378, 646, 657], "bottom": [116, 378, 646], "rtruediv": [117, 379], "002778": [117, 131, 379, 393], "333333": [117, 122, 131, 379, 384, 393, 431, 575], "005556": [117, 131, 379, 393], "250000": [117, 131, 379, 393], "toler": [118, 213, 250, 260, 380, 653, 654, 655, 656], "conform": [118, 230, 380], "unless": [118, 405, 528, 533], "either": [118, 128, 132, 144, 164, 172, 212, 278, 385, 390, 394, 403, 423, 465, 470, 638, 645, 646, 649, 650, 651, 652, 674, 676, 680, 682], "even": [118, 156, 277, 356, 415, 646, 649, 680, 683], "convent": [118, 119, 122, 384], "index_label": 118, "column_label": 118, "_highly_": 118, "clarifi": [118, 119], "intent": [118, 119], "fiction": [118, 483], "firefox": 118, "chrome": 118, "safari": 118, "ie10": 118, "konqueror": 118, "http_statu": [118, 675], "404": [118, 676], "301": 118, "response_tim": 118, "new_index": 118, "iceweasel": 118, "comodo": 118, "dragon": 118, "retain": [118, 380, 479, 675, 683], "user_ag": 118, "alter": [119, 165, 233, 381], "throw": [119, 161, 420, 680, 682], "index_mapp": 119, "columns_mapp": 119, "highli": [119, 651, 684], "overwrit": [119, 172, 256], "postfix": 119, "repetit": [120, 234, 382], "newli": [120, 234, 382, 385, 567, 672], "to_replac": [121, 383], "regex": [121, 383, 470, 471, 476, 481, 512, 521, 523, 528, 533], "valueerror": [121, 136, 160, 161, 172, 383, 419, 420, 454, 486, 507, 525, 636, 676, 679], "mismatch": [121, 383, 655, 656], "actual": [121, 383, 507, 672, 674, 680, 683], "exhibit": [121, 383], "silent": [121, 383], "rule": [122, 384], "close": [122, 178, 198, 248, 249, 282, 384, 436, 639, 648, 672, 684], "loffset": [122, 384], "start_dai": [122, 384], "dateoffset": [122, 384], "bin": [122, 299, 384, 431, 636], "interv": [122, 219, 220, 221, 222, 223, 227, 228, 248, 249, 299, 384, 636, 672, 679], "edg": [122, 127, 299, 384, 389, 480, 486, 524, 525, 636], "bucket": [122, 384], "closest": [122, 384], "nanosecond": [122, 161, 165, 384, 420, 437, 621, 649, 657], "millisecond": [122, 161, 384, 420, 437, 621, 649, 657], "ms": [122, 161, 165, 179, 184, 191, 384, 420, 597, 603, 615, 616, 621, 622, 623, 625, 649, 657, 676, 678, 682], "minut": [122, 384, 437, 621, 657, 673, 681], "2001": [122, 191, 196, 306, 384, 597, 602, 603, 605, 616, 620, 677], "1t": [122, 384], "06": [122, 179, 181, 182, 183, 195, 384, 597, 599, 600, 601, 602, 618, 619, 621, 622, 623, 625, 674], "downsampl": [122, 384], "3t": [122, 384], "23": [122, 384, 468, 470, 494, 495, 502, 674, 676, 678, 683], "57": [122, 384, 680], "upsampl": [122, 384], "asfreq": [122, 384], "price": [122, 384, 483, 680], "19": [122, 384, 468, 575, 672, 674, 676], "volum": [122, 384], "60": [122, 384, 674], "week_start": [122, 384], "7d": [122, 384], "29": [122, 189, 384, 468, 606, 608, 609, 612, 614, 674, 684], "28": [122, 384, 468, 602, 606, 608, 609, 674, 676], "63": [122, 384, 679], "col_level": [123, 643], "col_fil": 123, "reset": [123, 276, 385, 446], "try": [123, 385, 649, 658], "389": 123, "80": [123, 558], "max_spe": 123, "from_tupl": [123, 256, 257, 260, 385, 674, 675], "fly": [123, 646, 649], "run": [123, 492, 493, 494, 495, 501, 502, 503, 506, 626, 627, 674, 676, 680, 684], "window": [127, 389, 664, 673, 681, 684], "center": [127, 389, 517, 545, 664, 680], "win_typ": [127, 389], "baseindex": [127, 199, 202, 389, 450, 672], "As": [127, 160, 389, 419, 672, 677, 680], "oppos": [127, 389, 674], "fix": [127, 160, 179, 184, 191, 348, 389, 419, 597, 603, 616, 672, 677, 678], "accommod": [127, 389], "get_window_bound": [127, 389], "20190101": [127, 389], "2s": [127, 389], "2019": [127, 236, 389], "01t09": [127, 389], "000": [127, 389, 492, 642, 646, 647, 650, 651], "math": [127, 278, 389, 680], "49": [127, 389, 680], "64": [127, 389, 672, 680], "81": [127, 389, 680], "some_func": [127, 389], "sqrt": [127, 389, 680], "And": [127, 389, 680], "decim": [128, 161, 390, 420, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 646, 679, 681, 684], "half_even": [128, 390], "half_up": [128, 390], "affect": [128, 390, 682], "67": [128, 390], "66": [128, 390], "subtract": [130, 147, 392, 407], "359": [130, 147, 148, 392, 407, 408], "179": [130, 147, 148, 392, 407, 408], "frac": [132, 394], "random_st": [132, 394], "reproduc": [132, 394], "ident": [132, 167, 394, 424, 446, 528, 533, 592, 653, 654, 655, 656, 684], "fraction": [132, 394, 502], "disallow": [132, 394], "state": [132, 256, 394], "uniform": [132, 394, 636], "probabl": [132, 394], "unlik": [132, 394, 679, 682, 684], "randomst": [132, 394], "seed": [132, 394, 674, 680], "stat": [132, 394, 664, 681], "randomli": [132, 394, 674], "slow": [132, 394, 679], "achiev": [132, 394, 544, 679], "especi": [132, 394, 679], "advis": [132, 394], "826087": [133, 395], "913043": [133, 395], "043478": [133, 395], "map_index": 134, "map_siz": 134, "scatter": 134, "destin": [134, 680], "conserv": 134, "find": [135, 199, 250, 396, 471, 481, 486, 524, 664], "maintain": [135, 396, 674], "hypothet": [135, 396], "monoton": [135, 225, 226, 250, 260, 265, 299, 331, 332, 333, 396], "wrong": [135, 396], "correct": [135, 396, 649, 680], "values_df": [135, 396], "reinterpret": [137, 235, 397], "lightweight": [137, 235, 397], "append": [138, 160, 419, 465, 528, 533, 638], "becom": [138, 676], "too": [138, 481, 680], "hello": [141, 400, 463, 464, 468, 472, 482, 509, 515, 516, 519, 524, 526, 531, 538, 539, 645], "rapid": [141, 400, 482, 509, 512, 524, 526, 542, 543, 638, 645, 674, 676, 680, 683], "37037": [142, 401], "sort_remain": [143, 402], "vs": [143, 144, 402, 403], "quick": [143, 402], "builtin": [143, 402, 645, 646, 649, 650, 651, 652], "vector": [143, 282, 402, 405], "prescrib": 145, "ddof": [146, 176, 404, 434, 575, 590, 593, 633, 635], "deviat": [146, 260, 404, 590, 633, 675, 677], "freedom": [146, 176, 404, 434, 575, 590, 593, 633, 635], "divisor": [146, 176, 404, 434, 590, 593, 633, 635], "290994": [146, 404], "squar": [150, 410], "249": [150, 410], "unsupport": [152, 239, 412, 551, 552, 560, 561, 565, 567, 571, 572, 580, 586, 628, 679], "preserve_index": 154, "save": [154, 165, 639, 672], "path_or_buf": [155, 160, 161, 419, 420, 648, 649], "sep": [155, 465, 507, 514, 518, 527, 646], "na_rep": [155, 465], "line_termin": 155, "encod": [155, 160, 161, 312, 419, 420, 542, 543, 626, 627, 638, 648, 649, 672], "compress": [155, 160, 161, 163, 165, 419, 420, 639, 646, 649, 682], "csv": [155, 646, 664, 681, 682], "file": [155, 159, 160, 161, 163, 165, 419, 420, 486, 525, 626, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 672, 674, 678, 682], "path": [155, 159, 160, 161, 163, 165, 419, 420, 626, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 674, 682], "char": [155, 517, 646], "delimit": [155, 161, 420, 479, 507, 514, 522, 528, 533, 538, 539, 646, 649, 652], "utf": [155, 469, 542, 543, 649, 672], "scheme": 155, "read_csv": [155, 674, 677], "quote_nonnumer": [155, 646], "filenam": [155, 161, 420, 639, 642, 646, 647, 650, 651], "set_index": [155, 171, 230, 659, 679], "na_valu": [156, 162, 415, 422, 646], "asarrai": [156, 162, 415, 422, 676, 680], "strictli": [156, 415, 672], "dlpack": [158, 240, 417, 637, 676, 682], "tensor": [158, 240, 417, 627, 637], "open": [158, 160, 240, 282, 417, 419, 431, 637, 640, 645, 646, 648, 649, 650, 651, 652], "dmlc": [158, 240, 417, 637], "pycapsul": [158, 240, 417, 637], "pointer": [158, 240, 417, 637], "cudf_obj": [158, 240, 417], "pycapsule_obj": [158, 240, 417, 637], "encapsul": [158, 240, 417, 637, 672], "feather": [159, 160, 419, 647, 664, 682], "read_feath": 159, "hdf5": [160, 419, 664], "hdfstore": [160, 419, 648, 664], "hdf": [160, 419, 648, 666, 682], "applic": [160, 419, 575, 664, 672], "hold": [160, 219, 220, 221, 222, 223, 227, 228, 419], "relat": [160, 419, 664, 682], "individu": [160, 212, 419, 455, 468, 470, 672, 683], "pleas": [160, 348, 419, 674, 680], "r": [160, 405, 419, 468, 476, 503, 515, 540, 544, 648], "delet": [160, 419], "read": [160, 419, 642, 645, 646, 647, 648, 649, 650, 651, 652, 672, 674, 678, 682], "alreadi": [160, 278, 419, 446, 515, 672, 676, 677], "fast": [160, 419, 649, 672, 674, 677, 684], "searchabl": [160, 419], "pytabl": [160, 419, 664], "wors": [160, 419], "data_column": [160, 419], "disk": [160, 419, 646, 649, 678], "complevel": [160, 419], "disabl": [160, 419, 646, 682], "complib": [160, 419], "zlib": [160, 163, 419], "lzo": [160, 419], "bzip2": [160, 419], "blosc": [160, 419], "librari": [160, 419, 528, 533, 544, 618, 657, 671, 673, 676, 677, 681, 682, 684], "v0": [160, 419], "compressor": [160, 419], "blosclz": [160, 419], "lz4": [160, 419], "lz4hc": [160, 419], "snappi": [160, 163, 165, 419, 639, 682], "zstd": [160, 419], "issu": [160, 419, 677, 680], "fletcher32": [160, 419], "checksum": [160, 419], "written": [160, 165, 419, 639, 680], "strict": [160, 419, 648, 653, 654, 655, 656, 657], "decod": [160, 419, 542, 648, 649], "read_hdf": [160, 419], "to_parquet": [160, 419, 651, 674, 678, 682], "parquet": [160, 165, 419, 650, 651, 664, 677, 681, 682], "to_feath": [160, 419, 647], "json": [161, 420, 483, 649, 664, 682], "unix": [161, 420, 657], "orient": [161, 420, 649], "just": [161, 420, 532, 649, 672, 676, 678, 680], "schema": [161, 420, 642, 649, 651], "compon": [161, 420, 482, 672], "date_format": [161, 420, 618], "epoch": [161, 420, 657], "iso": [161, 187, 420, 612], "convers": [161, 420, 423, 664, 672, 676], "iso8601": [161, 420], "double_precis": [161, 420], "force_ascii": [161, 420], "ascii": [161, 420, 464, 515, 536, 537, 541, 543], "date_unit": [161, 420, 649], "govern": [161, 420], "precis": [161, 420, 636, 649, 678, 684], "ns": [161, 165, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 191, 192, 195, 196, 420, 436, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 624, 649, 657, 676, 678, 682, 683], "microsecond": [161, 420, 437, 441, 621, 624, 625, 649], "default_handl": [161, 420], "handler": [161, 420, 645, 646, 649, 650, 651, 652], "receiv": [161, 420, 658], "incorrect": [161, 420], "sinc": [161, 162, 165, 212, 278, 366, 420, 422, 672, 680, 683], "gzip": [161, 420, 646, 649], "bz2": [161, 420, 649], "xz": [161, 420, 649], "read_json": [161, 420], "fname": [163, 642], "orc": [163, 650, 664, 681, 682], "enable_statist": 163, "stripe_size_byt": 163, "stripe": [163, 165, 650], "67108864": 163, "64mb": 163, "stripe_size_row": 163, "row_index_strid": 163, "10000": [163, 278, 676], "read_orc": [163, 651, 674, 682], "struct": [163, 168, 672, 679, 681, 682, 684], "experiment": [163, 682], "reliabl": 163, "datatyp": [163, 658], "nullabl": [164, 423, 672, 678, 684], "root": [165, 639], "directori": [165, 639, 651, 674], "partition_offset": 165, "es": [165, 639], "engin": [165, 470, 471, 476, 481, 512, 645, 649, 650, 651, 673], "much": [165, 672, 674], "faster": [165, 455, 650, 657, 680], "partition_col": [165, 639], "partition_file_nam": 165, "uuid4": 165, "hex": [165, 484, 485, 498, 542, 543], "rowgroup": [165, 639], "page": [165, 639, 664, 673, 682, 684], "metadata_file_path": 165, "blob": [165, 640], "footer": [165, 640], "file_path": [165, 674], "int96_timestamp": 165, "int96": 165, "julian": 165, "midnight": 165, "row_group_size_byt": 165, "134217728": 165, "128mb": 165, "row_group_size_row": 165, "return_metadata": [165, 640], "read_parquet": [165, 642, 674, 678, 682], "intern": [167, 178, 199, 424, 436, 653, 654, 655, 656, 672, 682], "transpar": [167, 424], "dure": [167, 424, 528, 533, 658], "n0": [167, 424], "n1": [167, 424], "n2": [167, 424], "compos": [168, 672, 678, 680], "pivot": [171, 659], "innermost": [171, 650, 651, 659], "filter_func": 172, "There": [172, 190, 305, 615, 676, 682, 684], "coercibl": [172, 429], "notimplementederror": [172, 470, 518, 521, 527, 544, 672], "proport": 173, "frequent": [173, 431, 672], "occur": [173, 431, 470, 674], "ant": [173, 511, 529, 535], "varianc": [176, 434, 575, 593, 635], "666667": [176, 434], "tz": 178, "dayfirst": [178, 646, 657], "yearfirst": [178, 657], "immut": [178, 197, 247, 248, 265, 436, 445], "sliceabl": [178, 197, 247, 436, 445], "pytz": 178, "timezon": 178, "dateutil": [178, 657], "tzfile": 178, "pars": [178, 646, 649, 657, 658, 674, 676], "year": [178, 181, 183, 186, 187, 190, 236, 599, 601, 605, 610, 611, 612, 615, 657, 680], "1970": 178, "000000001": 178, "000000002": 178, "000000003": 178, "000000004": 178, "l": [179, 184, 191, 468, 478, 597, 603, 616], "u": [179, 184, 191, 468, 482, 597, 603, 616, 672], "me": [179, 184, 191, 479, 522, 597, 603, 616], "alias": [179, 184, 191, 597, 603, 616], "gindex": [179, 184, 187, 190], "2020": [179, 184, 187, 190, 615], "42": [179, 277, 679, 680], "1999": [179, 184, 187, 190, 615], "41": [179, 470], "datetime_index": [180, 181, 182, 183, 185, 188, 189, 192, 195, 196], "int16index": [180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 655], "int16": [180, 181, 182, 183, 185, 188, 189, 192, 195, 196, 306, 598, 599, 600, 601, 602, 604, 613, 614, 617, 619, 620, 658, 678, 682], "365": [181, 183, 186, 599, 601, 605], "leap": [181, 183, 186, 599, 601, 605], "366": [181, 183, 186, 599, 601, 605], "2016": [181, 182, 183, 195, 599, 600, 601, 619, 657], "2017": [181, 182, 183, 195, 599, 600, 601, 610, 611, 619, 657], "week": [182, 187, 195, 600, 612, 619], "mondai": [182, 195, 600, 619], "sundai": [182, 195, 600, 619], "59": [184, 278, 642, 646, 647, 650, 651, 680], "belong": [186, 190, 299, 605, 615], "29th": [186, 605], "februari": [186, 605], "intercalari": [186, 605], "four": [186, 605, 682], "400": [186, 201, 605, 676], "datafram": [187, 193, 199, 230, 238, 240, 241, 251, 252, 253, 254, 256, 257, 258, 261, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 279, 280, 284, 285, 289, 290, 291, 292, 294, 300, 301, 302, 303, 305, 308, 309, 310, 313, 314, 315, 320, 321, 322, 324, 325, 328, 330, 336, 337, 341, 342, 343, 344, 346, 347, 349, 350, 351, 354, 355, 357, 358, 360, 362, 364, 365, 372, 373, 374, 375, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 400, 401, 402, 404, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 422, 424, 427, 431, 432, 433, 434, 435, 437, 443, 446, 476, 481, 518, 527, 528, 533, 546, 550, 558, 559, 561, 562, 563, 564, 567, 569, 570, 573, 575, 581, 582, 583, 584, 587, 588, 591, 592, 594, 595, 612, 621, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 657, 659, 663, 664, 665, 670, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684], "accord": [187, 348, 612, 672], "8601": [187, 612], "52": 187, "januari": [189, 190, 614, 615], "decemb": [189, 190, 614, 615], "march": [190, 615], "april": [190, 615], "june": [190, 615], "third": [190, 254, 615], "juli": [190, 615], "septemb": [190, 615], "fourth": [190, 615], "octob": [190, 615], "int8index": [190, 655], "int8": [190, 312, 615, 658, 678, 682], "dt_idx": 191, "58": [191, 597, 603, 616, 680], "dame": [194, 243, 444], "2002": [196, 605, 620], "basic": [197, 199, 247, 277, 445, 550, 569, 594, 674, 679, 680], "pure": [197, 247, 445, 672], "__init__": [198, 248], "tupleize_col": 199, "best": [199, 260, 514, 627, 674, 675, 684], "fit": [199, 363, 366, 674], "design": [199, 252, 671, 673, 677], "factori": [199, 672], "re": [199, 278, 470, 471, 476, 481, 512, 521, 531, 674, 676, 680], "intim": 199, "familiar": [199, 672, 673], "uint64": [199, 445, 678, 682], "uint64index": 199, "has_dupl": 199, "from_arrow": [199, 684], "get_loc": [199, 675], "collect": [201, 348, 461, 674, 679, 684], "incompar": 206, "caught": 206, "catch": 206, "idx1": [206, 218, 244], "idx2": [206, 218, 244], "nulls_are_equ": 207, "obj": [210, 446, 653, 654, 655, 656], "pdi": 211, "primarili": 212, "stringindex": [212, 239, 312, 316, 340, 470, 518, 527, 674], "bound": [214, 249, 282, 458, 680], "leftmost": 214, "past": [214, 680], "rightmost": [214, 636], "ix": 214, "getitem": 214, "red": [218, 244, 252, 258], "blue": [218, 244, 252, 258], "is_integ": [219, 220, 221, 223, 227, 228], "is_float": [219, 220, 222, 223, 227, 228], "is_numer": [219, 220, 221, 222, 223, 228], "is_object": [219, 220, 221, 222, 223, 227], "is_categor": [219, 221, 222, 223, 227, 228], "is_interv": [219, 220, 221, 222, 227, 228], "categoricalindex": [220, 283, 636, 664], "is_boolean": [220, 221, 222, 223, 227, 228], "watermelon": [220, 222, 228], "orang": [220, 228], "appl": [220, 222, 227, 228, 658], "peter": 220, "victor": 220, "elisabeth": 220, "mar": 220, "mango": [222, 228], "intervalindex": [223, 636, 664], "monotonic_increas": 224, "is_monotonic_increas": [224, 331], "decreas": [225, 332, 363], "cold": 227, "sought": 229, "is_contain": 229, "return_index": [230, 238], "join_index": 230, "lexicograph": [230, 260, 675], "lh": 230, "rh": 230, "renamed_index": 233, "abl": [236, 676, 677], "partial": 236, "renam": [236, 455], "quarter": [236, 608, 609], "cobra": 236, "frozenlist": 236, "itself": [238, 518, 527, 672], "sorted_index": 238, "1000": [238, 278, 545, 672, 676, 680, 684], "allow_fil": 239, "green": [244, 257], "break": 249, "pad": [250, 515, 528, 533, 545, 561, 627, 664, 672], "backfil": [250, 561], "distanc": [250, 473, 474], "broken": 250, "prefer": [250, 650, 651, 657], "larger": [250, 490, 491, 627, 646, 650, 674, 682], "inexact": 250, "satisfi": 250, "equat": 250, "unique_index": 250, "abc": [250, 305, 348, 463, 467, 469, 474, 480, 486, 488, 489, 496, 498, 499, 507, 513, 524, 525, 532, 646, 678, 683], "monotonic_index": 250, "abbc": 250, "non_monotonic_index": 250, "abcb": 250, "numeric_unique_index": 250, "sortord": 252, "from_fram": [253, 254, 257, 258, 261], "cartesian": [256, 257, 258], "hi": [256, 674], "temp": [256, 477, 674], "precip": 256, "nj": 256, "explicit": [256, 265, 680], "explicitli": [257, 278, 646, 674, 676, 683, 684], "color": [257, 258], "purpl": 257, "effort": [260, 675], "fail": [260, 682], "situat": [260, 570, 675, 684], "mi": 260, "non_monotonic_non_unique_idx": 260, "coerc": [260, 657, 658, 675, 676, 684], "step": [265, 340, 455, 530], "unus": [265, 447, 455], "homogen": 265, "hashabl": 266, "been": [266, 672, 677, 682], "overridden": 266, "1d": [266, 318, 606, 608, 609, 628, 637, 672], "overrid": [266, 672], "extensiondtyp": [266, 684], "iteritem": 266, "to_list": 266, "tolist": 266, "to_append": 276, "s3": [276, 494, 639, 645, 646, 649, 650, 651, 652], "convert_dtyp": 277, "udf": [277, 278, 676, 681, 684], "cach": [277, 657], "recompil": 277, "incur": 277, "overhead": 277, "nest": [277, 456, 681], "decor": [277, 278], "someth": [277, 518, 674, 680], "upcast": 277, "deriv": [277, 348], "out_dtyp": 278, "global": 278, "featur": 278, "pydata": [278, 680, 681], "dev": [278, 676], "cudapysupport": 278, "cmath": 278, "libcudf": [278, 672], "complex": [278, 528, 672, 680], "ptx": 278, "sin": 278, "co": 278, "tan": 278, "lgamma": 278, "insid": [278, 522, 646, 679, 680], "known": [278, 657], "liter": [278, 470, 471, 521, 528, 533], "pattern": [278, 405, 470, 471, 475, 476, 481, 521, 528, 533, 534, 672], "lambda": [278, 348, 550, 569, 570, 587, 594, 675, 677, 679, 680], "105": 278, "95": [278, 483], "40100": 278, "10050": 278, "cube_funct": 278, "8000000": [278, 674], "custom_udf": 278, "205": [278, 676], "lag": 281, "autocorrel": 281, "1438853844": 281, "9647548490": 281, "inclus": [282, 478, 636], "wherev": [282, 672], "gt": [282, 674, 680, 683], "lt": [282, 674, 680, 683], "alic": [282, 680], "bob": [282, 680], "carol": 282, "ev": 282, "anna": 282, "daniel": 282, "accessor": [283, 306, 664, 677], "Be": 283, "parent": [283, 672, 674], "reorder_categori": 283, "remove_categori": 283, "set_categori": 283, "abcd": [283, 467, 532], "as_ord": [283, 449], "as_unord": 283, "ser1": [286, 288], "62": [286, 288], "ser2": [286, 288], "51": [286, 288], "20454263717316112": 286, "015750000000000004": 288, "0x": 293, "to_host_arrai": 293, "uint8": [293, 638, 658, 674, 682], "3rd": 298, "ind": [299, 414, 646], "beetl": [304, 335], "hippo": [304, 335], "discard": [304, 646], "kept": [305, 366], "datetimelik": [306, 664], "1h": 306, "hour": [306, 437, 621], "na_sentinel": 312, "chunkedarrai": 316, "singlecolumnfram": [316, 672], "pd_categor": 317, "set_mask": 318, "skip": [318, 645, 646, 650, 651, 658], "mark": 318, "bit": [318, 672], "_column": 318, "seriesgroupbi": [321, 663], "turn": [335, 672], "therefor": [335, 455, 545, 672], "width": [348, 466, 509, 517, 526, 544, 545, 636, 672], "rabbit": [348, 481], "kitten": [348, 473], "puppi": [348, 473], "countries_popul": [363, 366], "montserrat": [363, 366], "5200": [363, 366], "quant_index": 376, "renamed_seri": 381, "numeric_seri": 381, "come": 385, "bar": 385, "baz": [385, 521], "mimic": 405, "interfac": [405, 672, 676, 680], "stai": 405, "inspir": 405, "stringr": [405, 544], "packag": [405, 674, 676, 677, 683], "lib": [414, 674, 683], "stringarrai": 414, "0x7f796b0e7600": 414, "0x7f796b0e7750": 414, "rel": [431, 653, 654, 655, 656], "half": 431, "divid": 431, "500000": [431, 573, 575], "166667": 431, "1132223": 436, "2023232": 436, "342234324": 436, "4234324": 436, "001132223": 436, "002023232": 436, "004234324": 436, "clear": [446, 672], "df1": [446, 639, 654, 674, 683], "letter": [446, 505, 537, 543], "df3": 446, "horizont": 446, "df4": 446, "polli": 446, "georg": [446, 518, 527, 680], "new_categori": [447, 454, 455], "seriesorindex": [447, 448, 449, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "relationship": [452, 575, 672], "old": [453, 454, 455], "reorder": [454, 455], "action": 455, "simultan": 455, "specialis": 455, "hand": 455, "surpris": 455, "search_kei": 457, "extract": [458, 482, 523, 531, 547, 664], "indexerror": 458, "criterion": 460, "lists_indic": 461, "ef": [463, 467], "bye": [463, 674], "thank": [463, 468, 680], "sentenc": [464, 510, 528, 533, 536, 537, 540, 541], "swapcas": [464, 510, 537, 540, 541, 664], "friend": 464, "goodby": [464, 468, 538, 539], "stringcolumn": [465, 672], "again": [465, 680], "aa": [465, 520], "bb": [465, 520], "dd": 465, "fillchar": [466, 509, 517, 526], "whitespac": [466, 479, 492, 493, 494, 495, 497, 499, 501, 502, 503, 506, 509, 511, 515, 516, 517, 518, 522, 526, 527, 528, 529, 533, 535, 538, 539, 646], "as_list": 467, "gram": [467, 513, 514], "bigram": [467, 513], "ngram": [467, 514, 664], "str_seri": [467, 513, 627], "efgh": 467, "xyz": [467, 469, 513], "bc": [467, 474], "cd": 467, "fg": 467, "gh": 467, "xy": 467, "yz": 467, "bcd": 467, "efg": 467, "fgh": 467, "world": [468, 472, 482, 509, 515, 516, 524, 526, 538, 539], "k": [468, 507, 561, 675], "\u00e9ee": 469, "97": 469, "121": 469, "122": 469, "50089": 469, "101": [469, 627, 674], "98": 469, "99": [469, 483, 515], "pat": [470, 471, 475, 476, 481, 512, 521, 523, 528, 533, 534], "flag": [470, 471, 476, 481, 512, 521, 676], "regular": [470, 471, 475, 476, 481, 512, 521, 528, 533, 534, 545, 681], "multilin": [470, 471, 476, 481, 512], "anyth": [470, 518, 521, 527], "dotal": [470, 471, 476, 481, 512], "mous": 470, "hous": 470, "og": 470, "digit": [470, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 506, 543, 678], "might": [470, 676, 680], "35": [470, 621, 622, 623, 625, 642, 646, 647, 650, 651], "escap": 471, "aaba": [471, 674], "baca": [471, 674], "caba": [471, 674], "dollar": 471, "sign": [471, 545, 658, 678], "aab": 471, "ca": 471, "token": [472, 479, 513, 514, 515, 516, 522, 538, 626, 627, 664], "measur": [473, 474, 519, 575], "levenshtein": [473, 474], "edit": [473, 474], "www": 473, "cuelog": 473, "com": [473, 542, 543, 682], "blog": 473, "doggi": 473, "kitti": 473, "pup": 473, "dogi": 473, "listdtyp": [474, 672, 678], "tell": 474, "symmetr": 474, "diagon": [474, 676], "cba": 474, "nativ": 475, "bat": [475, 534], "bear": [475, 534], "captur": 476, "subject": 476, "c3": 476, "repl": [477, 478, 487, 521, 523, 532], "alphanumer": [477, 492, 493, 494, 495, 497, 499, 501, 502, 503, 506], "pear": 477, "plum": 477, "72": [477, 674, 676], "100k": 477, "unicod": [478, 495, 502, 515, 540], "ordin": [478, 540], "maketran": [478, 540], "helper": [478, 540, 672, 676], "caus": 478, "undefin": [478, 627, 680], "aeiou": 478, "0123456789": [478, 487], "aei": 478, "ou": 478, "456": [478, 500, 642, 646, 647, 650, 651], "_": [478, 479, 487, 507, 509, 513, 514, 522, 526, 543, 638], "___ou": 478, "aei__": 478, "0123___789": 478, "min_token_length": 479, "theme": [479, 522], "music": [479, 522], "substr": [480, 486, 524, 525, 530, 531], "fulli": [480, 486, 524, 525, 674, 678, 680], "failur": [480, 524], "ddb": [480, 486, 525], "word": [481, 505, 510, 536, 541, 626, 627], "json_path": 483, "jsonpath": 483, "book": [483, 513, 514, 627], "author": 483, "nigel": 483, "ree": 483, "titl": [483, 505, 510, 536, 541, 664], "centuri": 483, "evelyn": 483, "waugh": 483, "sword": 483, "honour": 483, "1234": [484, 485], "abcdef": [484, 485], "1a2": [484, 485], "cafe": [484, 485], "htoi": [484, 664], "4660": [484, 485], "11259375": [484, 485], "418": [484, 485], "51966": [484, 485], "traceback": [486, 525], "recent": [486, 525], "stdin": [486, 525], "modul": [486, 525, 664, 674, 684], "abb": [486, 525], "abcdefghij": 487, "ab_cdefghij": 487, "01_23456789": 487, "abcdefghij_": 487, "0123456789_": 487, "ip": [488, 489], "168": [488, 489], "212336897": [488, 489], "167772161": [488, 489], "ip2int": [489, 664], "conson": [490, 491], "troubl": [490, 491, 672], "vowel": 491, "isalpha": [492, 494, 495, 497, 499, 501, 502, 503, 506, 664], "isdigit": [492, 493, 494, 497, 498, 499, 501, 502, 503, 506, 664], "isnumer": [492, 493, 494, 495, 497, 498, 499, 501, 503, 506, 664], "isdecim": [492, 493, 495, 497, 498, 499, 501, 502, 503, 506, 664], "alphabet": [492, 493, 494, 495, 497, 499, 501, 502, 503, 506], "isinteg": [492, 493, 494, 495, 497, 501, 502, 503, 506, 664], "isfloat": [492, 493, 494, 495, 498, 499, 501, 502, 503, 506, 664], "islow": [492, 493, 494, 495, 497, 499, 502, 503, 506, 664], "lowercas": [492, 493, 494, 495, 497, 499, 501, 502, 503, 505, 506, 510, 536, 537, 541, 626], "isspac": [492, 493, 494, 495, 497, 499, 501, 502, 506, 664], "isupp": [492, 493, 494, 495, 497, 499, 501, 502, 503, 664], "uppercas": [492, 493, 494, 495, 497, 499, 501, 502, 503, 505, 506, 510, 536, 537, 541], "one1": [492, 493, 502], "punctuat": [492, 515], "isalnum": [493, 494, 495, 497, 499, 501, 502, 503, 506, 664], "\u00b3": [494, 495, 502], "\u2155": [494, 495, 502], "superscript": 495, "subscript": 495, "123213": 497, "123": [497, 500, 511, 518, 527, 535, 621, 622, 623, 624, 625, 642, 646, 647, 650, 651], "0001": 497, "234": [497, 621, 622, 623, 624, 625, 678], "plain": 497, "text": [497, 499, 626, 627, 642, 645, 646, 647, 650, 651, 652, 664], "123def": 498, "0x2d3": 498, "plan": [499, 680], "ipv4": 500, "address": [500, 672], "127": 500, "255": 500, "leopard": [501, 505, 506], "golden": [501, 505, 506], "eagl": [501, 505, 506], "snake": [501, 505, 506], "quantiti": 502, "20201101": 504, "192011": 504, "18200111": 504, "2120": 504, "string_na_rep": 507, "sep_na_rep": 507, "themselv": 507, "interven": 507, "suppli": [507, 638, 680], "ghi": [507, 646, 678], "a_b_c": 507, "d_e_f": 507, "g_h_i": 507, "a_b_k": 507, "c_d": 507, "ai_": 509, "__": [509, 526], "capit": [510, 536, 537, 540, 541, 664], "to_strip": [511, 529, 535], "trail": [511, 529, 535], "strip": [511, 529, 664], "newlin": [511, 529, 535], "rstrip": [511, 535, 664], "ac": 512, "my": 513, "favorit": 513, "my_favorit": 513, "hhh": 513, "abc_def": 513, "def_xyz": 513, "xyz_hhh": 513, "white": 514, "this_i": 514, "is_th": 514, "best_book": 514, "do_low": [515, 626], "subword_token": 515, "around": [515, 518, 528, 533, 672, 680], "p": 515, "symbol": 515, "cjk": 515, "cc": [515, 520], "cf": 515, "do_lower_cas": [515, 626, 627], "accent": 515, "h\u00e9llo": 515, "tworld": 515, "\u0103\u0107c\u0117\u00f1ted": 515, "up": [517, 528, 533, 597, 603, 657, 674, 680, 684], "rjust": [517, 545, 664], "ljust": [517, 545, 664], "zfill": [517, 664], "prepend": [517, 545], "carib": 517, "tiger": 517, "rpartit": [518, 664], "linda": [518, 527], "van": [518, 527], "der": [518, 527], "berg": [518, 527], "pitt": [518, 527], "river": [518, 527], "999": [518, 527, 674, 676], "porter": 519, "stemmer": 519, "super": 519, "ccc": 520, "fuz": 521, "ba": 521, "bao": 521, "back": [523, 646, 650, 651, 672, 674, 682, 684], "ref": [523, 550, 569, 594], "templat": 523, "section": [523, 532, 674, 679, 680, 683, 684], "a543": 523, "z756": 523, "av453": 523, "zv576": 523, "rfind": [525, 664], "_________hello": 526, "___________rapid": 526, "version": [528, 533, 663, 674, 676, 683], "tutori": [528, 674], "throughout": [528, 533], "slightli": [528, 663], "url": [528, 542, 543, 639, 645, 646, 649, 650, 651, 652], "lstrip": [529, 535, 664], "slice_replac": [530, 664], "koala": 530, "fox": 530, "chameleon": 530, "oala": 530, "ox": 530, "hameleon": 530, "ko": 530, "fo": 530, "ch": 530, "kaa": 530, "fx": 530, "caeen": 530, "kl": 530, "cm": 530, "ello": 531, "abdc": 532, "until": [532, 674], "xc": 532, "xdc": 532, "xcde": 532, "axc": 532, "axd": 532, "rsplit": [533, 664], "endswith": [534, 664], "Is": 537, "unmap": 540, "untouch": 540, "swapc1s": 540, "low": [540, 680], "nt": 540, "nc": 540, "swapc1": 540, "No": [542, 543, 627, 636, 672, 681], "2fb": [542, 543], "2fd": [542, 543], "20f": [542, 543], "2c6": [542, 543], "3a": [542, 543], "2f": [542, 543], "2frapid": [542, 543], "2fstart": [542, 543], "2fmedium": [542, 543], "medium": [542, 543, 636], "paragraph": 544, "expand_tabsbool": 544, "replace_whitespac": 544, "drop_whitespac": 544, "break_long_word": 544, "break_on_hyphen": 544, "str_wrap": 544, "expand_tab": 544, "nwrap": 544, "nto": 544, "reach": [545, 672], "minu": 545, "move": [545, 676, 680], "longer": 545, "001": 545, "children": [547, 672], "agg": [550, 592, 594, 674, 677, 679], "f1": [550, 569, 594], "quantil": [550, 569, 594, 679], "__name__": [550, 569, 594], "q0": [550, 569, 594], "f2": [550, 569, 594], "score": 558, "90": [558, 674], "hole": 561, "gap": [561, 672], "introduc": 567, "indetermin": 567, "mult": 570, "redund": [570, 675], "pairwis": [573, 575], "kendal": 573, "val1": [573, 575], "val2": [573, 575], "val3": [573, 575], "385727": 573, "714575": 573, "bia": 575, "comparison": [575, 673, 681, 683], "understand": 575, "member": 575, "invert": 575, "matric": [575, 676], "en": 575, "wikipedia": 575, "wiki": 575, "estimation_of_covariance_matric": 575, "833333": 575, "round": [597, 603], "dt": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 667, 674, 677], "datetime_seri": [598, 599, 600, 601, 604, 613, 614, 617, 619, 620, 683], "2013": 605, "1y": 605, "2003": [605, 680], "2005": [605, 677], "2007": 605, "2008": 605, "2009": [605, 612], "2011": 605, "2012": [605, 657, 683], "2021": 612, "serindex": 612, "to_datetim": 612, "53": 612, "dt_sr": 616, "weekday_seri": 618, "12231312123": [621, 622, 623, 624, 625], "1231231231": [621, 622, 623, 624, 625], "1123236768712": [621, 622, 623, 624, 625], "2135656": [621, 622, 623, 624, 625], "3244334234": [621, 622, 623, 624, 625], "141": [621, 622, 623, 625, 676], "231": [621, 622, 623, 624, 625], "13000": [621, 622, 623, 625], "48": [621, 622, 623, 625, 684], "712": [621, 622, 623, 624, 625], "656": [621, 622, 623, 624, 625], "37": [621, 622, 623, 625, 683], "123000": [623, 625], "231000": [623, 625], "712000": [623, 625], "656000": [623, 625], "234000": [623, 625], "231312123": 624, "231231231": 624, "236768712": 624, "002135656": 624, "244334234": 624, "48912": 625, "21631": 625, "36768": 625, "2135": 625, "47534": 625, "hash_fil": 626, "bert": [626, 627], "subword": [626, 627], "vocabulari": [626, 627], "pretrain": [626, 627], "21x": 626, "util": [626, 627, 664, 673, 674], "hash_vocab_util": [626, 627], "hash_vocab": [626, 627], "max_length": 627, "max_num_row": 627, "add_special_token": 627, "return_tensor": 627, "return_token_type_id": 627, "batch": 627, "alloc": [627, 672, 680], "temporari": 627, "twice": 627, "classif": 627, "model": [627, 672, 674], "do_not_trunc": 627, "huggingfac": 627, "pt": 627, "tf": 627, "tensorflow": 627, "pytorch": 627, "torch": 627, "input_id": 627, "fed": 627, "attention_mask": 627, "attend": 627, "vocab": 627, "txt": 627, "voc_hash": 627, "cudf_token": 627, "tokenizer_output": 627, "1142": 627, "1110": 627, "1103": 627, "102": [627, 674], "1436": 627, "1520": 627, "counterpart": 628, "applymap": [628, 681], "count_if_gt_3": 628, "retbin": 636, "include_lowest": 636, "segment": 636, "go": [636, 672, 673, 676, 680], "continu": [636, 676], "criteria": [636, 648], "extens": [636, 646], "done": [636, 674], "994": [636, 676], "bad": 636, "fortran": [637, 676], "prefix_sep": 638, "dummy_na": 638, "spars": [638, 681], "drop_first": 638, "hot": 638, "dummi": 638, "value1": 638, "value2": 638, "a_value1": 638, "a_value2": 638, "a_non": 638, "a_1": 638, "a_2": 638, "a_nan": 638, "a_nul": 638, "max_file_s": 639, "file_name_prefix": 639, "exceed": 639, "writer": [639, 666, 682], "gb": 639, "etc": [639, 663, 670, 678, 679], "mandatori": 639, "context": 639, "cw": 639, "write_t": 639, "manual": 639, "num_row": [642, 645, 650, 651], "num_row_group": 642, "row_group": [642, 651], "num1": [642, 646, 647, 650, 651], "13t12": [642, 646, 647, 650, 651], "5451": [642, 646, 647, 650, 651], "14t12": [642, 646, 647, 650, 651], "5784": [642, 646, 647, 650, 651], "789": [642, 646, 647, 650, 651], "15t18": [642, 646, 647, 650, 651], "6117": [642, 646, 647, 650, 651], "myvarnam": 643, "myvalnam": 643, "filepath_or_buff": [645, 646, 650, 651, 652], "skiprow": [645, 646, 650, 651], "load": [645, 646, 647, 649, 650, 651, 673, 674], "avro": [645, 664, 682], "pathlib": [645, 646, 648, 649, 650, 651, 652, 674], "py": [645, 646, 648, 649, 650, 651, 652, 674, 683], "_path": [645, 646, 648, 649, 650, 651, 652], "localpath": [645, 646, 648, 649, 650, 651, 652], "ftp": [645, 646, 649, 650, 651, 652], "bytesio": [645, 650, 651], "parser": [645, 649, 650, 651], "remot": [645, 646, 650, 651], "pandavro": 645, "pandas_df": 645, "to_avro": 645, "linetermin": 646, "quotechar": 646, "quot": 646, "doublequot": 646, "mangle_dupe_col": 646, "usecol": 646, "delim_whitespac": 646, "skipinitialspac": 646, "skipfoot": 646, "thousand": [646, 676], "true_valu": 646, "false_valu": 646, "byte_rang": [646, 649, 652], "skip_blank_lin": 646, "parse_d": 646, "comment": 646, "keep_default_na": 646, "na_filt": 646, "index_col": 646, "use_python_file_object": [646, 650, 651], "comma": 646, "seper": 646, "quote_minim": 646, "quote_al": 646, "quote_non": 646, "decompress": [646, 649, 682], "detect": [646, 649, 681], "gz": [646, 649], "recogn": 646, "unusu": 646, "altogeth": [646, 672], "qnan": 646, "arrow": [646, 650, 651, 672, 673, 681], "pythonfil": [646, 650, 651], "fsspec": [646, 650, 651], "abstractbufferedfil": [646, 650, 651], "to_csv": [646, 674, 682], "fp": 646, "__fspath__": 648, "protocol": 648, "term": [648, 649, 680, 684], "to_hdf": 648, "auto": 649, "to_json": 649, "typ": 649, "recov": 649, "convert_ax": 649, "proper": 649, "convert_d": 649, "datelik": 649, "_at": 649, "_time": 649, "keep_default_d": 649, "precise_float": 649, "strtod": 649, "doubl": 649, "py3": 649, "jsonread": 649, "use_index": 650, "timestamp_typ": 650, "predic": [650, 651], "disjunct": [650, 651], "dnf": [650, 651], "conjunct": [650, 651, 680], "AND": [650, 651], "outermost": 650, "OR": [650, 651], "notat": [650, 651], "seek": 650, "to_orc": [650, 682], "strings_to_categor": 651, "use_pandas_metadata": 651, "categorical_partit": 651, "open_file_opt": 651, "gdf_categori": 651, "gdf_string": 651, "discourag": 651, "open_parquet_fil": 651, "deactiv": 651, "precach": 651, "precache_opt": 651, "open_file_func": 651, "read_parquet_metadata": 651, "datasourc": 652, "check_dtyp": [653, 654, 656], "check_column_typ": [653, 654], "equiv": [653, 654, 655, 656], "check_less_precis": [653, 655, 656], "check_exact": [653, 654, 655, 656], "check_datetimelike_compat": [653, 654, 656], "check_categor": [653, 654, 655, 656], "check_category_ord": [653, 656], "rtol": [653, 654, 655, 656], "1e": [653, 654, 655, 656], "atol": [653, 654, 655, 656], "columnbas": [653, 654, 655, 656, 672], "intend": [653, 654, 655, 656, 672, 680], "inferred_typ": [653, 654, 655, 656], "idl": [653, 654, 656], "check_datetime_like_compat": [653, 654, 656], "appropri": [653, 654, 655, 656, 672], "assert": [653, 654, 655, 656], "messag": [653, 654, 655, 656], "check_index_typ": [654, 656], "check_frame_typ": 654, "check_nam": [654, 655, 656], "by_block": 654, "check_lik": 654, "assertionerror": [654, 655, 656], "hitch": [654, 655, 656], "check_ord": 655, "int32index": 655, "id1": 655, "id2": 655, "check_series_typ": 656, "sr1": 656, "sr2": 656, "utc": 657, "infer_datetime_format": 657, "eg": 657, "bug": 657, "strftime": 657, "denot": 657, "off": [657, 674, 682], "10x": 657, "succeed": 657, "assembl": 657, "abbrevi": 657, "plural": 657, "2015": 657, "1490195805": 657, "22t15": 657, "000000000": 657, "1490195805433502912": 657, "1780": 657, "20t01": 657, "494253056": 657, "polici": 658, "notifi": 658, "encount": 658, "unsign": [658, 678], "down": 658, "decoupl": 658, "3e3": 658, "3000": 658, "cudf": [663, 664, 670, 672, 675, 678, 679, 681, 682], "usual": 663, "permit": 663, "restrict": 663, "publicli": 664, "namespac": [664, 667], "manipul": [664, 673, 674], "merg": [664, 672, 674, 677, 684], "timedeltaindex": 664, "deal": 664, "roll": [664, 672, 677, 681], "subwordtoken": [664, 673], "stringmethod": 664, "byte_count": 664, "character_ngram": 664, "character_token": 664, "code_point": 664, "detoken": 664, "edit_dist": 664, "edit_distance_matrix": 664, "filter_alphanum": 664, "filter_charact": 664, "filter_token": 664, "findal": 664, "get_json_object": 664, "hex_to_int": 664, "ip_to_int": 664, "is_conson": 664, "is_vowel": 664, "isempti": 664, "ishex": 664, "isipv4": 664, "istimestamp": 664, "istitl": 664, "ngrams_token": 664, "normalize_charact": 664, "normalize_spac": 664, "porter_stemmer_measur": 664, "replace_token": 664, "replace_with_backref": 664, "rindex": 664, "slice_from": 664, "startswith": 664, "token_count": 664, "translat": [664, 672], "url_decod": 664, "url_encod": 664, "wrap": [664, 674, 680], "variant": 665, "thereof": 665, "reader": [666, 674, 682], "acceler": [666, 672, 673, 674, 680, 682], "cpu": [666, 674, 677, 682, 684], "futur": [666, 674, 680, 683], "variou": [667, 672], "layer": 671, "cython": 671, "hood": [672, 674], "robustli": 672, "develop": [672, 673, 676, 680, 681], "At": [672, 680], "high": 672, "serv": 672, "face": 672, "bridg": 672, "review": 672, "role": 672, "requisit": 672, "tradeoff": 672, "tie": 672, "piec": 672, "holist": 672, "project": [672, 677], "diagram": 672, "princip": 672, "inherit": 672, "eponym": 672, "tabular": [672, 674, 680], "columnar": [672, 673, 674], "meanwhil": 672, "essenti": [672, 680], "abstract": 672, "materi": 672, "preliminari": 672, "let": [672, 676, 680], "dive": 672, "littl": 672, "deeper": 672, "expos": [672, 676, 680, 682], "addition": [672, 677], "mention": [672, 677, 680], "surmis": 672, "diamond": 672, "simpler": [672, 680], "flatten": 672, "ve": [672, 674, 680], "highlight": [672, 680], "simpli": [672, 676], "practic": [672, 674], "concret": [672, 680], "eventu": 672, "almost": 672, "hierarchi": 672, "rewrit": 672, "main": [672, 680], "alon": 672, "infeas": 672, "reimplement": 672, "behav": 672, "instanti": 672, "unfortun": 672, "mimick": 672, "__new__": 672, "tree": 672, "cumbersom": 672, "manag": [672, 680], "masquerad": 672, "stack": 672, "glue": 672, "layout": 672, "own": [672, 682], "semant": 672, "wildcard": [672, 674], "apach": [672, 673, 674], "conduc": 672, "interchang": 672, "concept": [672, 674], "extent": 672, "facilit": 672, "interoper": [672, 673, 681], "simplifi": 672, "debug": 672, "sens": 672, "numericalcolumn": 672, "datetimecolumn": 672, "decis": 672, "4000": 672, "sizeof": 672, "128": 672, "chees": 672, "preexist": 672, "knowledg": [672, 680], "structdtyp": [672, 678], "analog": 672, "decimaldtyp": 672, "intervaldtyp": 672, "contigu": [672, 676], "rmm": 672, "devicebuff": 672, "interact": [672, 674, 680], "bind": 672, "pxd": 672, "declar": 672, "explanatori": 672, "column_view": 672, "table_view": 672, "question": [672, 680], "trivial": 672, "discuss": [672, 674, 683], "descent": 672, "approach": [672, 680], "whole": 672, "fact": [672, 683], "act": 672, "reduct": [672, 677], "scan": 672, "bypass": 672, "straight": 672, "resampl": 672, "composit": 672, "reason": [672, 682], "scientist": 673, "easili": 673, "workflow": [673, 674, 681], "program": 673, "dask": [673, 681], "overview": [673, 681], "short": 674, "introduct": 674, "gear": 674, "mainli": 674, "scale": [674, 677, 678], "smooth": [674, 681], "dask_cudf": [674, 677], "cluster": [674, 677], "enough": [674, 677, 680], "comfort": [674, 680], "want": [674, 676, 680, 683], "spread": [674, 677], "os": 674, "portion": [674, 680], "borrow": 674, "adapt": [674, 680], "cheatsheet": 674, "ds": 674, "from_cudf": 674, "npartit": [674, 677], "ddf": 674, "dask_gdf": 674, "yield": [674, 684], "met": 674, "cudf_compar": 674, "dask_cudf_compar": 674, "isin": 674, "gdf1": 674, "rand": [674, 683], "082654": 674, "967955": 674, "399417": 674, "441425": 674, "784297": 674, "793582": 674, "070303": 674, "271711": 674, "gdf2": 674, "opt": [674, 683], "conda": [674, 683], "env": [674, 683], "python3": [674, 683], "site": [674, 683], "798": [674, 676], "futurewarn": [674, 683], "343382": 674, "003700": 674, "20043": 674, "581614": 674, "907812": 674, "101512": 674, "24179": 674, "224180": 674, "var": [674, 679], "666666666666666": 674, "6666666666666667": 674, "map_partit": [674, 677], "add_ten": 674, "progress": 674, "ds2": 674, "restor": 674, "post": [674, 679], "ddf_a": 674, "ddf_b": 674, "paradigm": 674, "agg_col1": 674, "agg_col2": 674, "54": 674, "73": 674, "date_df": 674, "986051": 674, "232034": 674, "397617": 674, "103839": 674, "date_ddf": 674, "grade": 674, "dgdf": 674, "to_numpi": 674, "to_arrow": [674, 684], "example_output": 674, "mkdir": 674, "foo_dask": 674, "star": 674, "temp_parquet": 674, "example_fil": 674, "cudf_root": 674, "orc_fil": 674, "testorcfil": 674, "test1": 674, "boolean1": 674, "byte1": 674, "short1": 674, "int1": 674, "long1": 674, "float1": 674, "double1": 674, "bytes1": 674, "string1": 674, "middl": 674, "1024": 674, "65536": 674, "2048": 674, "100000000": 674, "chani": 674, "spark": 674, "lazi": 674, "moment": 674, "graph": 674, "delai": 674, "sometim": [674, 676, 680], "activ": 674, "background": [674, 680], "system": 674, "finish": 674, "downstream": [674, 676], "enforc": 674, "contract": 674, "upstream": 674, "snippet": 674, "localcudaclust": 674, "worker": 674, "machin": [674, 677], "beyond": 674, "scope": [674, 680], "client": 674, "dask_cuda": 674, "2022": 674, "665": 674, "preload": 674, "info": 674, "666": [674, 684], "10000000": 674, "ddf2": 674, "2000000": 674, "9999999": 674, "nvidia": 674, "smi": 674, "jun": 674, "495": 674, "bu": 674, "disp": 674, "volatil": 674, "uncorr": 674, "ecc": 674, "fan": 674, "perf": 674, "pwr": 674, "cap": 674, "mig": 674, "tesla": 674, "v100": 674, "pcie": 674, "00000000": 674, "85": 674, "27c": 674, "p0": 674, "34w": 674, "250w": 674, "1543mib": 674, "32510mib": 674, "gi": 674, "ci": 674, "pid": 674, "twenti": 674, "800": [674, 676], "baselin": 674, "sleep": 674, "2127mib": 674, "setup": 674, "proceed": 674, "ll": [674, 676, 680], "ddf1": 674, "randint": [674, 684], "spent": 674, "results_ddf": 674, "sooner": 674, "had": 674, "complet": [674, 682], "doneandnotdonefutur": 674, "3cb74d08d3df8af29aa1128b71ddaf24": 674, "not_don": 674, "proce": [674, 676], "notebook": 676, "introductori": 676, "advantag": 676, "advanc": [676, 677, 680], "algebra": 676, "timeit": 676, "__version__": 676, "cupy_from_dlpack": 676, "from_dlpack": 676, "fromdlpack": 676, "as_gpu_matrix": 676, "500": 676, "arr_cupi": 676, "to_dlpack": 676, "to_cupi": 676, "199": 676, "\u00b5s": 676, "611": 676, "74": 676, "613": 676, "501": 676, "1001": 676, "502": 676, "1002": 676, "9997": 676, "10497": 676, "10997": 676, "9998": 676, "10498": 676, "10998": 676, "9999": 676, "10499": 676, "10999": 676, "__cuda_array_interface__": [676, 680], "leverag": [676, 680, 684], "cola_cupi": 676, "91": 676, "710": 676, "220": 676, "202": 676, "56": [676, 680], "norm": 676, "reshaped_arr": 676, "197": 676, "198": 676, "201": 676, "397": 676, "398": 676, "399": 676, "401": 676, "402": 676, "597": 676, "598": 676, "599": 676, "9400": 676, "9401": 676, "9402": 676, "9597": 676, "9598": 676, "9599": 676, "9600": 676, "9601": 676, "9602": 676, "9797": 676, "9798": 676, "9799": 676, "9800": 676, "9801": 676, "9802": 676, "603": 676, "804": 676, "1005": [676, 680], "1206": 676, "1407": 676, "1608": 676, "1809": 676, "2211": 676, "2412": 676, "2613": 676, "2814": 676, "3015": 676, "3216": 676, "3417": 676, "3618": 676, "3819": 676, "4020": 676, "4221": 676, "4422": 676, "4623": 676, "4824": 676, "5025": 676, "5226": 676, "5427": 676, "5628": 676, "5829": 676, "6030": 676, "6231": 676, "6432": 676, "6633": 676, "6834": 676, "7035": 676, "7236": 676, "7437": 676, "7638": 676, "7839": 676, "8040": 676, "8241": 676, "8442": 676, "8643": 676, "8844": 676, "9045": 676, "9246": 676, "9447": 676, "9648": 676, "9849": 676, "linalg": 676, "577306": 676, "967739": 676, "easiest": [676, 680], "sure": [676, 680], "beforehand": 676, "reshaped_df": 676, "241": 676, "190": 676, "191": 676, "192": 676, "193": 676, "194": 676, "195": 676, "196": 676, "203": 676, "204": 676, "206": 676, "207": 676, "208": 676, "209": 676, "391": 676, "392": 676, "393": 676, "394": 676, "395": 676, "396": 676, "403": 676, "405": 676, "406": 676, "407": 676, "408": 676, "409": 676, "590": 676, "591": 676, "592": 676, "593": 676, "594": 676, "595": 676, "596": 676, "600": 676, "601": 676, "602": 676, "604": 676, "605": 676, "606": 676, "607": 676, "608": 676, "609": 676, "790": 676, "791": 676, "792": 676, "793": 676, "794": 676, "795": 676, "796": 676, "797": 676, "799": 676, "801": 676, "802": 676, "803": 676, "805": 676, "806": 676, "807": 676, "808": 676, "809": 676, "990": 676, "991": 676, "992": 676, "993": 676, "995": 676, "996": 676, "997": [676, 680], "998": 676, "isfortran": 676, "fortran_arr": 676, "asfortranarrai": 676, "todlpack": 676, "94": 676, "ecosystem": [676, 680], "isn": 676, "matur": 676, "hundr": 676, "wouldn": 676, "veri": [676, 679, 680], "easi": [676, 677], "previous": 676, "new_arr": 676, "19900": 676, "59900": 676, "99900": 676, "139900": 676, "179900": 676, "219900": 676, "259900": 676, "299900": 676, "339900": 676, "379900": 676, "419900": 676, "459900": 676, "499900": 676, "539900": 676, "579900": 676, "619900": 676, "659900": 676, "699900": 676, "739900": 676, "779900": 676, "819900": 676, "859900": 676, "899900": 676, "939900": 676, "979900": 676, "1019900": 676, "1059900": 676, "1099900": 676, "1139900": 676, "1179900": 676, "1219900": 676, "1259900": 676, "1299900": 676, "1339900": 676, "1379900": 676, "1419900": 676, "1459900": 676, "1499900": 676, "1539900": 676, "1579900": 676, "1619900": 676, "1659900": 676, "1699900": 676, "1739900": 676, "1779900": 676, "1819900": 676, "1859900": 676, "1899900": 676, "1939900": 676, "1979900": 676, "seamlessli": 676, "enorm": 676, "sacrif": 676, "cleanli": 676, "cudf_to_cupy_sparse_matrix": 676, "sparseformat": 676, "focu": 676, "_sparse_constructor": 676, "csc_matrix": 676, "csr_matrix": 676, "illustr": 676, "nonzero": 676, "arr": [676, 680], "a0": 676, "a4": 676, "a5": 676, "a6": 676, "a7": 676, "a8": 676, "a9": 676, "a10": 676, "a11": 676, "a12": 676, "a13": 676, "a14": 676, "a15": 676, "a16": 676, "a17": 676, "a18": 676, "a19": 676, "630908": 676, "606810": 676, "454082": 676, "348107": 676, "415202": 676, "355941": 676, "631266": 676, "800073": 676, "sparse_data": 676, "512": 676, "224022770482332": 676, "1152": 676, "808890991680774": 676, "1154": 676, "709967646689568": 676, "1282": 676, "660091081978692": 676, "1410": 676, "429565971325376": 676, "515": 676, "46348951307301267": 676, "771": 676, "345771530228465": 676, "631265649052613": 676, "132": 676, "437877526479628": 676, "516": 676, "975487909413916": 676, "901": 676, "398657898281176": 676, "134": 676, "6319808351310408": 676, "2398407997106253": 676, "1158": 676, "284423624583185": 676, "881445565341714": 676, "293830510650068": 676, "137": 676, "298105462330197": 676, "777": 676, "096506111685755": 676, "1033": 676, "743256082732744": 676, "142857137261402": 676, "1163": 676, "483675378609756": 676, "052272207794655": 676, "908": 676, "729858474986905": 676, "1548": 676, "578281781081545": 676, "0412743493009975": 676, "9829": 676, "824860218264941": 676, "9958": 676, "610340346485215": 676, "9191": 676, "006284855785232": 676, "9833": 676, "356992772850597": 676, "9324": 676, "9281196367773328": 676, "9966": 676, "986287154450057": 676, "9456": 676, "5418564419752467": 676, "9584": 676, "733277409225857": 676, "9968": 676, "028301218767247": 676, "9329": 676, "1767743651866964": 676, "9585": 676, "18924274371798": 676, "9202": 676, "72067846186564": 676, "9331": 676, "538957767148399": 676, "9715": 676, "5938200175979125": 676, "9332": 676, "011382795326126": 676, "9206": 676, "143957083708623": 676, "9846": 676, "06953854853483": 676, "9720": 676, "396379232854145": 676, "9848": 676, "954239089336956": 676, "9978": 676, "361581246135302": 676, "9851": 676, "2671304174097977": 676, "9979": 676, "83927029732905": 676, "9469": 676, "30708181207612983": 676, "754750074684722": 676, "9343": 676, "050162096262399": 676, "encourag": [676, 677], "orchestr": 677, "cohes": 677, "ingest": 677, "decent": 677, "dayofweek": 677, "expens": 677, "cudf_df": 677, "persist": 677, "visual": 677, "difficult": [677, 680], "comprehens": 677, "track": 677, "thing": [677, 680], "certainli": 677, "slight": 677, "inconsist": 677, "tracker": 677, "report": [677, 684], "reus": 677, "newer": 677, "mislead": [677, 678], "frustrat": 677, "advertis": 677, "apolog": 677, "uint32": [678, 682], "durat": 678, "decimal32dtyp": 678, "decimal64dtyp": 678, "decimal128dtyp": 678, "023": 678, "max_precis": 678, "decimal128": [678, 682], "psr": 678, "gsr": 678, "pq": 678, "exclus": 679, "nuisanc": 679, "gb1": 679, "gb2": 679, "gb3": 679, "extern": 679, "penalti": 679, "disambigu": 679, "ok": 679, "corr": 679, "866025": 679, "idxmin": 679, "idxmax": 679, "nuniqu": 679, "nth": 679, "cov": 679, "randomdata": 680, "box": 680, "broader": 680, "varieti": 680, "cover": 680, "devicendarrai": 680, "demonstr": 680, "syntax": 680, "offer": 680, "const": 680, "unari": [680, 684], "redefin": 680, "capabl": 680, "singleton": 680, "f_null_sensit": 680, "grid": 680, "in_col": 680, "out_col": 680, "guard": 680, "runtim": 680, "pre": 680, "cuda_array_interfac": 680, "963": 680, "9630": 680, "977": 680, "1026": 680, "980": 680, "9770": 680, "1048": 680, "1019": 680, "10480": 680, "1078": 680, "960": 680, "985": 680, "10780": 680, "979": 680, "982": 680, "1011": 680, "9790": 680, "theoret": 680, "potenti": 680, "experi": 680, "spot": 680, "problem": 680, "area": 680, "pipelin": 680, "job": 680, "thin": 680, "entrypoint": 680, "onto": 680, "fulfil": 680, "ultim": 680, "happen": [680, 683], "428571429": 680, "did": 680, "fairli": 680, "streamlin": 680, "walk": 680, "conditional_add": 680, "heart": 680, "readi": 680, "successfulli": 680, "pessimist": 680, "explor": 680, "gpu_add": 680, "matter": 680, "1968": 680, "1961": 680, "propog": 680, "slide": 680, "answer": 680, "stock": 680, "mathemat": 680, "example_func": 680, "65": 680, "549834435": 680, "615773106": 680, "681145748": 680, "745966692": 680, "810249676": 680, "874007874": 680, "937253933": 680, "apply_group": 680, "drawn": 680, "691674": 680, "dan": 680, "958380": 680, "480099": 680, "729580": 680, "473370": 680, "xavier": 680, "767454": 680, "067479": 680, "380205": 680, "970850": 680, "sarah": 680, "342905": 680, "rolling_avg_": 680, "rolling_avg": 680, "win_siz": 680, "801430": 680, "632337": 680, "081887": 680, "933157": 680, "quinn": 680, "420826": 680, "184805": 680, "702013": 680, "837494": 680, "wendi": 680, "057540": 680, "401733": 680, "913899": 680, "ursula": 680, "466252": 680, "009502": 680, "725581": 680, "405245": 680, "271319": 680, "multiply_by_5": 680, "empty_lik": 680, "nondecim": 680, "releas": 680, "github": [680, 682], "properli": 680, "lot": 680, "hopefulli": 680, "feel": 680, "histogram": 681, "tip": 681, "magnum": 681, "gpudirect": 681, "integr": 681, "nvcomp": 681, "caveat": 681, "interweav": 681, "navig": 681, "writer\u00b9": 682, "reader\u00b9": 682, "uint16": 682, "decimal32": 682, "decimal64": 682, "\u00b9": 682, "gd": 682, "dma": 682, "transfer": 682, "bounc": 682, "sdk": 682, "download": 682, "toolkit": 682, "environ": 682, "libcudf_cufile_polici": 682, "kvikio": 682, "rapidsai": 682, "read_avro": 682, "libcudf_cufile_thread_count": 682, "libcudf_cufile_slice_s": 682, "4mb": 682, "libcudf_nvcomp_polici": 682, "deem": 682, "whenev": 682, "referenc": 683, "mind": 683, "20120101": 683, "natur": 683, "cumprod": 683, "prod": 683, "wish": 683, "dff": 683, "randn": 683, "593392": 683, "010093": 683, "080197": 683, "899848": 683, "612657": 683, "848874": 683, "352157": 683, "073897": 683, "809682": 683, "383012": 683, "104560": 683, "726604": 683, "131760": 683, "744471": 683, "407960": 683, "426173": 683, "221297": 683, "936250": 683, "430269": 683, "452846": 683, "111999": 683, "694659": 683, "411952": 683, "196386": 683, "383927": 683, "386446": 683, "1183": 683, "silenc": 683, "dot": 683, "550833363": 683, "233383406": 683, "510183029": 683, "515988615": 683, "856250422": 683, "039294319": 683, "172988003": 683, "218597878": 683, "914496355": 683, "680780032": 683, "295168242": 683, "641097575": 683, "822155564": 683, "892509704": 683, "979389915": 683, "689500635": 683, "df00": 683, "233383": 683, "510183": 683, "515989": 683, "856250": 683, "039294": 683, "172988": 683, "218598": 683, "914496": 683, "680780": 683, "295168": 683, "641098": 683, "822156": 683, "892510": 683, "979390": 683, "689501": 683, "behaviour": 684, "commonli": 684, "resid": 684, "extrem": 684, "poor": 684, "vast": 684, "accomplish": 684, "742": 684, "694": 684, "840": 684, "459": 684, "525": 684, "442": 684, "363": 684, "643": 684, "631": 684, "906": 684, "640": 684, "impact": 684, "compatibilti": 684, "impos": 684}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [178, 0, 1, "", "DatetimeIndex"], [197, 0, 1, "", "Float64Index"], [198, 0, 1, "", "Grouper"], [199, 0, 1, "", "Index"], [247, 0, 1, "", "Int64Index"], [248, 0, 1, "", "IntervalIndex"], [252, 0, 1, "", "MultiIndex"], [265, 0, 1, "", "RangeIndex"], [266, 0, 1, "", "Series"], [436, 0, 1, "", "TimedeltaIndex"], [445, 0, 1, "", "UInt64Index"], [446, 3, 1, "", "concat"], [636, 3, 1, "", "cut"], [637, 3, 1, "", "from_dlpack"], [638, 3, 1, "", "get_dummies"], [643, 3, 1, "", "melt"], [644, 3, 1, "", "pivot"], [645, 3, 1, "", "read_avro"], [646, 3, 1, "", "read_csv"], [647, 3, 1, "", "read_feather"], [648, 3, 1, "", "read_hdf"], [649, 3, 1, "", "read_json"], [650, 3, 1, "", "read_orc"], [651, 3, 1, "", "read_parquet"], [652, 3, 1, "", "read_text"], [657, 3, 1, "", "to_datetime"], [658, 3, 1, "", "to_numeric"], [659, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 2, 1, "", "clip"], [24, 1, 1, "", "columns"], [25, 2, 1, "", "copy"], [26, 2, 1, "", "corr"], [27, 2, 1, "", "count"], [28, 2, 1, "", "cov"], [29, 2, 1, "", "cummax"], [30, 2, 1, "", "cummin"], [31, 2, 1, "", "cumprod"], [32, 2, 1, "", "cumsum"], [33, 2, 1, "", "describe"], [34, 2, 1, "", "deserialize"], [35, 2, 1, "", "device_deserialize"], [36, 2, 1, "", "device_serialize"], [37, 2, 1, "", "diff"], [38, 2, 1, "", "div"], [39, 2, 1, "", "divide"], [40, 2, 1, "", "dot"], [41, 2, 1, "", "drop"], [42, 2, 1, "", "drop_duplicates"], [43, 2, 1, "", "dropna"], [44, 1, 1, "", "dtypes"], [45, 1, 1, "", "empty"], [46, 2, 1, "", "eq"], [47, 2, 1, "", "equals"], [48, 2, 1, "", "eval"], [49, 2, 1, "", "explode"], [50, 2, 1, "", "fillna"], [51, 2, 1, "", "first"], [52, 2, 1, "", "floordiv"], [53, 2, 1, "", "from_arrow"], [54, 2, 1, "", "from_pandas"], [55, 2, 1, "", "from_records"], [56, 2, 1, "", "ge"], [57, 2, 1, "", "groupby"], [58, 2, 1, "", "gt"], [59, 2, 1, "", "hash_values"], [60, 2, 1, "", "head"], [61, 2, 1, "", "host_deserialize"], [62, 2, 1, "", "host_serialize"], [63, 1, 1, "", "iat"], [64, 1, 1, "", "iloc"], [65, 1, 1, "", "index"], [66, 2, 1, "", "info"], [67, 2, 1, "", "insert"], [68, 2, 1, "", "interleave_columns"], [69, 2, 1, "", "interpolate"], [70, 2, 1, "", "isin"], [71, 2, 1, "", "isna"], [72, 2, 1, "", "isnull"], [73, 2, 1, "", "items"], [74, 2, 1, "", "iterrows"], [75, 2, 1, "", "itertuples"], [76, 2, 1, "", "join"], [77, 2, 1, "", "keys"], [78, 2, 1, "", "kurt"], [79, 2, 1, "", "kurtosis"], [80, 2, 1, "", "last"], [81, 2, 1, "", "le"], [82, 1, 1, "", "loc"], [83, 2, 1, "", "lt"], [84, 2, 1, "", "mask"], [85, 2, 1, "", "max"], [86, 2, 1, "", "mean"], [87, 2, 1, "", "median"], [88, 2, 1, "", "melt"], [89, 2, 1, "", "memory_usage"], [90, 2, 1, "", "merge"], [91, 2, 1, "", "min"], [92, 2, 1, "", "mod"], [93, 2, 1, "", "mode"], [94, 2, 1, "", "mul"], [95, 2, 1, "", "multiply"], [96, 2, 1, "", "nans_to_nulls"], [97, 1, 1, "", "ndim"], [98, 2, 1, "", "ne"], [99, 2, 1, "", "nlargest"], [100, 2, 1, "", "notna"], [101, 2, 1, "", "notnull"], [102, 2, 1, "", "nsmallest"], [103, 2, 1, "", "nunique"], [104, 2, 1, "", "partition_by_hash"], [105, 2, 1, "", "pct_change"], [106, 2, 1, "", "pipe"], [107, 2, 1, "", "pivot"], [108, 2, 1, "", "pop"], [109, 2, 1, "", "pow"], [110, 2, 1, "", "prod"], [111, 2, 1, "", "product"], [112, 2, 1, "", "quantile"], [113, 2, 1, "", "quantiles"], [114, 2, 1, "", "query"], [115, 2, 1, "", "radd"], [116, 2, 1, "", "rank"], [117, 2, 1, "", "rdiv"], [118, 2, 1, "", "reindex"], [119, 2, 1, "", "rename"], [120, 2, 1, "", "repeat"], [121, 2, 1, "", "replace"], [122, 2, 1, "", "resample"], [123, 2, 1, "", "reset_index"], [124, 2, 1, "", "rfloordiv"], [125, 2, 1, "", "rmod"], [126, 2, 1, "", "rmul"], [127, 2, 1, "", "rolling"], [128, 2, 1, "", "round"], [129, 2, 1, "", "rpow"], [130, 2, 1, "", "rsub"], [131, 2, 1, "", "rtruediv"], [132, 2, 1, "", "sample"], [133, 2, 1, "", "scale"], [134, 2, 1, "", "scatter_by_map"], [135, 2, 1, "", "searchsorted"], [136, 2, 1, "", "select_dtypes"], [137, 2, 1, "", "serialize"], [138, 2, 1, "", "set_index"], [139, 1, 1, "", "shape"], [140, 2, 1, "", "shift"], [141, 1, 1, "", "size"], [142, 2, 1, "", "skew"], [143, 2, 1, "", "sort_index"], [144, 2, 1, "", "sort_values"], [145, 2, 1, "", "stack"], [146, 2, 1, "", "std"], [147, 2, 1, "", "sub"], [148, 2, 1, "", "subtract"], [149, 2, 1, "", "sum"], [150, 2, 1, "", "sum_of_squares"], [151, 2, 1, "", "tail"], [152, 2, 1, "", "take"], [153, 2, 1, "", "tile"], [154, 2, 1, "", "to_arrow"], [155, 2, 1, "", "to_csv"], [156, 2, 1, "", "to_cupy"], [157, 2, 1, "", "to_dict"], [158, 2, 1, "", "to_dlpack"], [159, 2, 1, "", "to_feather"], [160, 2, 1, "", "to_hdf"], [161, 2, 1, "", "to_json"], [162, 2, 1, "", "to_numpy"], [163, 2, 1, "", "to_orc"], [164, 2, 1, "", "to_pandas"], [165, 2, 1, "", "to_parquet"], [166, 2, 1, "", "to_records"], [167, 2, 1, "", "to_string"], [168, 2, 1, "", "to_struct"], [169, 2, 1, "", "transpose"], [170, 2, 1, "", "truediv"], [171, 2, 1, "", "unstack"], [172, 2, 1, "", "update"], [173, 2, 1, "", "value_counts"], [174, 1, 1, "", "values"], [175, 1, 1, "", "values_host"], [176, 2, 1, "", "var"], [177, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[179, 2, 1, "", "ceil"], [180, 1, 1, "", "day"], [181, 1, 1, "", "day_of_year"], [182, 1, 1, "", "dayofweek"], [183, 1, 1, "", "dayofyear"], [184, 2, 1, "", "floor"], [185, 1, 1, "", "hour"], [186, 1, 1, "", "is_leap_year"], [187, 2, 1, "", "isocalendar"], [188, 1, 1, "", "minute"], [189, 1, 1, "", "month"], [190, 1, 1, "", "quarter"], [191, 2, 1, "", "round"], [192, 1, 1, "", "second"], [193, 2, 1, "", "to_frame"], [194, 2, 1, "", "to_series"], [195, 1, 1, "", "weekday"], [196, 1, 1, "", "year"]], "cudf.Grouper": [[198, 2, 1, "", "__init__"]], "cudf.Index": [[200, 2, 1, "", "any"], [201, 2, 1, "", "append"], [202, 2, 1, "", "copy"], [203, 2, 1, "", "deserialize"], [204, 2, 1, "", "device_deserialize"], [205, 2, 1, "", "device_serialize"], [206, 2, 1, "", "difference"], [207, 2, 1, "", "drop_duplicates"], [208, 2, 1, "", "dropna"], [209, 2, 1, "", "fillna"], [210, 2, 1, "", "from_arrow"], [211, 2, 1, "", "from_pandas"], [212, 2, 1, "", "get_level_values"], [213, 2, 1, "", "get_loc"], [214, 2, 1, "", "get_slice_bound"], [215, 1, 1, "", "has_duplicates"], [216, 2, 1, "", "host_deserialize"], [217, 2, 1, "", "host_serialize"], [218, 2, 1, "", "intersection"], [219, 2, 1, "", "is_boolean"], [220, 2, 1, "", "is_categorical"], [221, 2, 1, "", "is_floating"], [222, 2, 1, "", "is_integer"], [223, 2, 1, "", "is_interval"], [224, 1, 1, "", "is_monotonic"], [225, 1, 1, "", "is_monotonic_decreasing"], [226, 1, 1, "", "is_monotonic_increasing"], [227, 2, 1, "", "is_numeric"], [228, 2, 1, "", "is_object"], [229, 2, 1, "", "isin"], [230, 2, 1, "", "join"], [231, 1, 1, "", "names"], [232, 1, 1, "", "nlevels"], [233, 2, 1, "", "rename"], [234, 2, 1, "", "repeat"], [235, 2, 1, "", "serialize"], [236, 2, 1, "", "set_names"], [237, 1, 1, "", "size"], [238, 2, 1, "", "sort_values"], [239, 2, 1, "", "take"], [240, 2, 1, "", "to_dlpack"], [241, 2, 1, "", "to_frame"], [242, 2, 1, "", "to_pandas"], [243, 2, 1, "", "to_series"], [244, 2, 1, "", "union"], [245, 2, 1, "", "unique"], [246, 1, 1, "", "values"]], "cudf.IntervalIndex": [[248, 2, 1, "", "__init__"], [249, 2, 1, "", "from_breaks"], [250, 2, 1, "", "get_loc"], [251, 1, 1, "", "values"]], "cudf.MultiIndex": [[253, 1, 1, "", "codes"], [254, 2, 1, "", "droplevel"], [255, 2, 1, "", "from_arrow"], [256, 2, 1, "", "from_frame"], [257, 2, 1, "", "from_product"], [258, 2, 1, "", "from_tuples"], [259, 2, 1, "", "get_level_values"], [260, 2, 1, "", "get_loc"], [261, 1, 1, "", "levels"], [262, 1, 1, "", "names"], [263, 1, 1, "", "nlevels"], [264, 2, 1, "", "to_frame"]], "cudf.Series": [[267, 1, 1, "", "T"], [268, 2, 1, "", "__array__"], [269, 2, 1, "", "__iter__"], [270, 2, 1, "", "abs"], [271, 2, 1, "", "add"], [272, 2, 1, "", "add_prefix"], [273, 2, 1, "", "add_suffix"], [274, 2, 1, "", "all"], [275, 2, 1, "", "any"], [276, 2, 1, "", "append"], [277, 2, 1, "", "apply"], [278, 2, 1, "", "applymap"], [279, 2, 1, "", "argsort"], [280, 2, 1, "", "astype"], [281, 2, 1, "", "autocorr"], [282, 2, 1, "", "between"], [283, 1, 1, "", "cat"], [284, 2, 1, "", "clip"], [285, 2, 1, "", "copy"], [286, 2, 1, "", "corr"], [287, 2, 1, "", "count"], [288, 2, 1, "", "cov"], [289, 2, 1, "", "cummax"], [290, 2, 1, "", "cummin"], [291, 2, 1, "", "cumprod"], [292, 2, 1, "", "cumsum"], [293, 1, 1, "", "data"], [294, 2, 1, "", "describe"], [295, 2, 1, "", "deserialize"], [296, 2, 1, "", "device_deserialize"], [297, 2, 1, "", "device_serialize"], [298, 2, 1, "", "diff"], [299, 2, 1, "", "digitize"], [300, 2, 1, "", "div"], [301, 2, 1, "", "divide"], [302, 2, 1, "", "dot"], [303, 2, 1, "", "drop"], [304, 2, 1, "", "drop_duplicates"], [305, 2, 1, "", "dropna"], [306, 1, 1, "", "dt"], [307, 1, 1, "", "dtype"], [308, 1, 1, "", "empty"], [309, 2, 1, "", "eq"], [310, 2, 1, "", "equals"], [311, 2, 1, "", "explode"], [312, 2, 1, "", "factorize"], [313, 2, 1, "", "fillna"], [314, 2, 1, "", "first"], [315, 2, 1, "", "floordiv"], [316, 2, 1, "", "from_arrow"], [317, 2, 1, "", "from_categorical"], [318, 2, 1, "", "from_masked_array"], [319, 2, 1, "", "from_pandas"], [320, 2, 1, "", "ge"], [321, 2, 1, "", "groupby"], [322, 2, 1, "", "gt"], [323, 1, 1, "", "has_nulls"], [324, 2, 1, "", "hash_values"], [325, 2, 1, "", "head"], [326, 2, 1, "", "host_deserialize"], [327, 2, 1, "", "host_serialize"], [328, 1, 1, "", "iloc"], [329, 1, 1, "", "index"], [330, 2, 1, "", "interpolate"], [331, 1, 1, "", "is_monotonic"], [332, 1, 1, "", "is_monotonic_decreasing"], [333, 1, 1, "", "is_monotonic_increasing"], [334, 1, 1, "", "is_unique"], [335, 2, 1, "", "isin"], [336, 2, 1, "", "isna"], [337, 2, 1, "", "isnull"], [338, 2, 1, "", "items"], [339, 2, 1, "", "iteritems"], [340, 2, 1, "", "keys"], [341, 2, 1, "", "kurt"], [342, 2, 1, "", "kurtosis"], [343, 2, 1, "", "last"], [344, 2, 1, "", "le"], [345, 1, 1, "", "list"], [346, 1, 1, "", "loc"], [347, 2, 1, "", "lt"], [348, 2, 1, "", "map"], [349, 2, 1, "", "mask"], [350, 2, 1, "", "max"], [351, 2, 1, "", "mean"], [352, 2, 1, "", "median"], [353, 2, 1, "", "memory_usage"], [354, 2, 1, "", "min"], [355, 2, 1, "", "mod"], [356, 2, 1, "", "mode"], [357, 2, 1, "", "mul"], [358, 2, 1, "", "multiply"], [359, 1, 1, "", "name"], [360, 2, 1, "", "nans_to_nulls"], [361, 1, 1, "", "ndim"], [362, 2, 1, "", "ne"], [363, 2, 1, "", "nlargest"], [364, 2, 1, "", "notna"], [365, 2, 1, "", "notnull"], [366, 2, 1, "", "nsmallest"], [367, 1, 1, "", "null_count"], [368, 1, 1, "", "nullable"], [369, 1, 1, "", "nullmask"], [370, 2, 1, "", "nunique"], [371, 2, 1, "", "pct_change"], [372, 2, 1, "", "pipe"], [373, 2, 1, "", "pow"], [374, 2, 1, "", "prod"], [375, 2, 1, "", "product"], [376, 2, 1, "", "quantile"], [377, 2, 1, "", "radd"], [378, 2, 1, "", "rank"], [379, 2, 1, "", "rdiv"], [380, 2, 1, "", "reindex"], [381, 2, 1, "", "rename"], [382, 2, 1, "", "repeat"], [383, 2, 1, "", "replace"], [384, 2, 1, "", "resample"], [385, 2, 1, "", "reset_index"], [386, 2, 1, "", "rfloordiv"], [387, 2, 1, "", "rmod"], [388, 2, 1, "", "rmul"], [389, 2, 1, "", "rolling"], [390, 2, 1, "", "round"], [391, 2, 1, "", "rpow"], [392, 2, 1, "", "rsub"], [393, 2, 1, "", "rtruediv"], [394, 2, 1, "", "sample"], [395, 2, 1, "", "scale"], [396, 2, 1, "", "searchsorted"], [397, 2, 1, "", "serialize"], [398, 1, 1, "", "shape"], [399, 2, 1, "", "shift"], [400, 1, 1, "", "size"], [401, 2, 1, "", "skew"], [402, 2, 1, "", "sort_index"], [403, 2, 1, "", "sort_values"], [404, 2, 1, "", "std"], [405, 1, 1, "", "str"], [406, 1, 1, "", "struct"], [407, 2, 1, "", "sub"], [408, 2, 1, "", "subtract"], [409, 2, 1, "", "sum"], [410, 2, 1, "", "sum_of_squares"], [411, 2, 1, "", "tail"], [412, 2, 1, "", "take"], [413, 2, 1, "", "tile"], [414, 2, 1, "", "to_arrow"], [415, 2, 1, "", "to_cupy"], [416, 2, 1, "", "to_dict"], [417, 2, 1, "", "to_dlpack"], [418, 2, 1, "", "to_frame"], [419, 2, 1, "", "to_hdf"], [420, 2, 1, "", "to_json"], [421, 2, 1, "", "to_list"], [422, 2, 1, "", "to_numpy"], [423, 2, 1, "", "to_pandas"], [424, 2, 1, "", "to_string"], [425, 2, 1, "", "tolist"], [426, 2, 1, "", "transpose"], [427, 2, 1, "", "truediv"], [428, 2, 1, "", "unique"], [429, 2, 1, "", "update"], [430, 1, 1, "", "valid_count"], [431, 2, 1, "", "value_counts"], [432, 1, 1, "", "values"], [433, 1, 1, "", "values_host"], [434, 2, 1, "", "var"], [435, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[437, 1, 1, "", "components"], [438, 1, 1, "", "days"], [439, 1, 1, "", "inferred_freq"], [440, 1, 1, "", "microseconds"], [441, 1, 1, "", "nanoseconds"], [442, 1, 1, "", "seconds"], [443, 2, 1, "", "to_frame"], [444, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[447, 2, 1, "", "add_categories"], [448, 2, 1, "", "as_ordered"], [449, 2, 1, "", "as_unordered"], [450, 1, 1, "", "categories"], [451, 1, 1, "", "codes"], [452, 1, 1, "", "ordered"], [453, 2, 1, "", "remove_categories"], [454, 2, 1, "", "reorder_categories"], [455, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[456, 2, 1, "", "concat"], [457, 2, 1, "", "contains"], [458, 2, 1, "", "get"], [459, 2, 1, "", "len"], [460, 2, 1, "", "sort_values"], [461, 2, 1, "", "take"], [462, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[463, 2, 1, "", "byte_count"], [464, 2, 1, "", "capitalize"], [465, 2, 1, "", "cat"], [466, 2, 1, "", "center"], [467, 2, 1, "", "character_ngrams"], [468, 2, 1, "", "character_tokenize"], [469, 2, 1, "", "code_points"], [470, 2, 1, "", "contains"], [471, 2, 1, "", "count"], [472, 2, 1, "", "detokenize"], [473, 2, 1, "", "edit_distance"], [474, 2, 1, "", "edit_distance_matrix"], [475, 2, 1, "", "endswith"], [476, 2, 1, "", "extract"], [477, 2, 1, "", "filter_alphanum"], [478, 2, 1, "", "filter_characters"], [479, 2, 1, "", "filter_tokens"], [480, 2, 1, "", "find"], [481, 2, 1, "", "findall"], [482, 2, 1, "", "get"], [483, 2, 1, "", "get_json_object"], [484, 2, 1, "", "hex_to_int"], [485, 2, 1, "", "htoi"], [486, 2, 1, "", "index"], [487, 2, 1, "", "insert"], [488, 2, 1, "", "ip2int"], [489, 2, 1, "", "ip_to_int"], [490, 2, 1, "", "is_consonant"], [491, 2, 1, "", "is_vowel"], [492, 2, 1, "", "isalnum"], [493, 2, 1, "", "isalpha"], [494, 2, 1, "", "isdecimal"], [495, 2, 1, "", "isdigit"], [496, 2, 1, "", "isempty"], [497, 2, 1, "", "isfloat"], [498, 2, 1, "", "ishex"], [499, 2, 1, "", "isinteger"], [500, 2, 1, "", "isipv4"], [501, 2, 1, "", "islower"], [502, 2, 1, "", "isnumeric"], [503, 2, 1, "", "isspace"], [504, 2, 1, "", "istimestamp"], [505, 2, 1, "", "istitle"], [506, 2, 1, "", "isupper"], [507, 2, 1, "", "join"], [508, 2, 1, "", "len"], [509, 2, 1, "", "ljust"], [510, 2, 1, "", "lower"], [511, 2, 1, "", "lstrip"], [512, 2, 1, "", "match"], [513, 2, 1, "", "ngrams"], [514, 2, 1, "", "ngrams_tokenize"], [515, 2, 1, "", "normalize_characters"], [516, 2, 1, "", "normalize_spaces"], [517, 2, 1, "", "pad"], [518, 2, 1, "", "partition"], [519, 2, 1, "", "porter_stemmer_measure"], [520, 2, 1, "", "repeat"], [521, 2, 1, "", "replace"], [522, 2, 1, "", "replace_tokens"], [523, 2, 1, "", "replace_with_backrefs"], [524, 2, 1, "", "rfind"], [525, 2, 1, "", "rindex"], [526, 2, 1, "", "rjust"], [527, 2, 1, "", "rpartition"], [528, 2, 1, "", "rsplit"], [529, 2, 1, "", "rstrip"], [530, 2, 1, "", "slice"], [531, 2, 1, "", "slice_from"], [532, 2, 1, "", "slice_replace"], [533, 2, 1, "", "split"], [534, 2, 1, "", "startswith"], [535, 2, 1, "", "strip"], [536, 2, 1, "", "swapcase"], [537, 2, 1, "", "title"], [538, 2, 1, "", "token_count"], [539, 2, 1, "", "tokenize"], [540, 2, 1, "", "translate"], [541, 2, 1, "", "upper"], [542, 2, 1, "", "url_decode"], [543, 2, 1, "", "url_encode"], [544, 2, 1, "", "wrap"], [545, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[546, 2, 1, "", "explode"], [547, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[548, 2, 1, "", "__iter__"], [549, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[550, 2, 1, "", "aggregate"], [551, 2, 1, "", "backfill"], [552, 2, 1, "", "bfill"], [553, 2, 1, "", "count"], [554, 2, 1, "", "cumcount"], [555, 2, 1, "", "cummax"], [556, 2, 1, "", "cummin"], [557, 2, 1, "", "cumsum"], [558, 2, 1, "", "describe"], [559, 2, 1, "", "diff"], [560, 2, 1, "", "ffill"], [561, 2, 1, "", "fillna"], [562, 2, 1, "", "idxmax"], [563, 2, 1, "", "idxmin"], [564, 2, 1, "", "nunique"], [565, 2, 1, "", "pad"], [566, 2, 1, "", "quantile"], [567, 2, 1, "", "shift"], [568, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[569, 2, 1, "", "agg"], [570, 2, 1, "", "apply"], [571, 2, 1, "", "backfill"], [572, 2, 1, "", "bfill"], [573, 2, 1, "", "corr"], [574, 2, 1, "", "count"], [575, 2, 1, "", "cov"], [576, 2, 1, "", "cumcount"], [577, 2, 1, "", "cummax"], [578, 2, 1, "", "cummin"], [579, 2, 1, "", "cumsum"], [580, 2, 1, "", "ffill"], [581, 2, 1, "", "max"], [582, 2, 1, "", "mean"], [583, 2, 1, "", "median"], [584, 2, 1, "", "min"], [585, 2, 1, "", "nth"], [586, 2, 1, "", "pad"], [587, 2, 1, "", "pipe"], [588, 2, 1, "", "prod"], [589, 2, 1, "", "size"], [590, 2, 1, "", "std"], [591, 2, 1, "", "sum"], [592, 2, 1, "", "transform"], [593, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[594, 2, 1, "", "aggregate"], [595, 2, 1, "", "nunique"], [596, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[597, 2, 1, "", "ceil"], [598, 1, 1, "", "day"], [599, 1, 1, "", "day_of_year"], [600, 1, 1, "", "dayofweek"], [601, 1, 1, "", "dayofyear"], [602, 1, 1, "", "days_in_month"], [603, 2, 1, "", "floor"], [604, 1, 1, "", "hour"], [605, 1, 1, "", "is_leap_year"], [606, 1, 1, "", "is_month_end"], [607, 1, 1, "", "is_month_start"], [608, 1, 1, "", "is_quarter_end"], [609, 1, 1, "", "is_quarter_start"], [610, 1, 1, "", "is_year_end"], [611, 1, 1, "", "is_year_start"], [612, 2, 1, "", "isocalendar"], [613, 1, 1, "", "minute"], [614, 1, 1, "", "month"], [615, 1, 1, "", "quarter"], [616, 2, 1, "", "round"], [617, 1, 1, "", "second"], [618, 2, 1, "", "strftime"], [619, 1, 1, "", "weekday"], [620, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[621, 1, 1, "", "components"], [622, 1, 1, "", "days"], [623, 1, 1, "", "microseconds"], [624, 1, 1, "", "nanoseconds"], [625, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[626, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[627, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[628, 2, 1, "", "apply"], [629, 2, 1, "", "count"], [630, 2, 1, "", "max"], [631, 2, 1, "", "mean"], [632, 2, 1, "", "min"], [633, 2, 1, "", "std"], [634, 2, 1, "", "sum"], [635, 2, 1, "", "var"]], "cudf.io.parquet": [[639, 0, 1, "", "ParquetDatasetWriter"], [642, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[640, 2, 1, "", "close"], [641, 2, 1, "", "write_table"]], "cudf.testing.testing": [[653, 3, 1, "", "assert_column_equal"], [654, 3, 1, "", "assert_frame_equal"], [655, 3, 1, "", "assert_index_equal"], [656, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 673, 674, 676, 677, 680, 683, 684], "categoricalindex": [0, 1, 2, 3, 665], "categori": [1, 450], "code": [2, 253, 451], "equal": [3, 47, 310], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 660, 676, 680], "t": [5, 267], "__iter__": [6, 269, 548], "ab": [7, 270], "add": [8, 271], "add_prefix": [9, 272], "add_suffix": [10, 273], "agg": [11, 569], "all": [12, 274, 672], "ani": [13, 200, 275], "append": [14, 201, 276], "appli": [15, 277, 570, 628, 679, 680, 684], "apply_chunk": [16, 680], "apply_row": [17, 680], "applymap": [18, 278, 674], "argsort": [19, 279], "assign": 20, "astyp": [21, 280], "clip": [23, 284], "column": [24, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 672, 684], "copi": [25, 202, 285], "corr": [26, 286, 573], "count": [27, 287, 471, 553, 574, 629], "cov": [28, 288, 575], "cummax": [29, 289, 555, 577], "cummin": [30, 290, 556, 578], "cumprod": [31, 291], "cumsum": [32, 292, 557, 579], "describ": [33, 294, 558], "deseri": [34, 203, 295], "device_deseri": [35, 204, 296], "device_seri": [36, 205, 297], "diff": [37, 298, 559], "div": [38, 300], "divid": [39, 301], "dot": [40, 302], "drop": [41, 303, 683], "drop_dupl": [42, 207, 304], "dropna": [43, 208, 305, 683], "dtype": [44, 307, 682, 683], "empti": [45, 308], "eq": [46, 309], "eval": 48, "explod": [49, 311, 546], "fillna": [50, 209, 313, 561, 683], "first": [51, 314], "floordiv": [52, 315], "from_arrow": [53, 210, 255, 316], "from_panda": [54, 211, 319], "from_record": 55, "ge": [56, 320], "groupbi": [57, 321, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 660, 663, 667, 679, 680, 683], "gt": [58, 322], "hash_valu": [59, 324], "head": [60, 325], "host_deseri": [61, 216, 326], "host_seri": [62, 217, 327], "iat": 63, "iloc": [64, 328], "index": [65, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 329, 486, 660, 663, 665, 667, 672, 674, 679], "info": 66, "insert": [67, 487, 683], "interleave_column": 68, "interpol": [69, 330], "isin": [70, 229, 335], "isna": [71, 336], "isnul": [72, 337], "item": [73, 338], "iterrow": 74, "itertupl": 75, "join": [76, 230, 507, 660, 665, 667, 674], "kei": [77, 340], "kurt": [78, 341], "kurtosi": [79, 342], "last": [80, 343], "le": [81, 344], "loc": [82, 346], "lt": [83, 347], "mask": [84, 349], "max": [85, 350, 581, 630], "mean": [86, 351, 582, 631], "median": [87, 352, 583], "melt": [88, 643], "memory_usag": [89, 353], "merg": [90, 660, 667], "min": [91, 354, 584, 632], "mod": [92, 355], "mode": [93, 356], "mul": [94, 357], "multipli": [95, 358], "nans_to_nul": [96, 360], "ndim": [97, 361], "ne": [98, 362], "nlargest": [99, 363], "notna": [100, 364], "notnul": [101, 365], "nsmallest": [102, 366], "nuniqu": [103, 370, 564, 595], "partition_by_hash": 104, "pct_chang": [105, 371], "pipe": [106, 372, 587], "pivot": [107, 644], "pop": 108, "pow": [109, 373], "prod": [110, 374, 588], "product": [111, 375, 683], "quantil": [112, 113, 376, 566], "queri": 114, "radd": [115, 377], "rank": [116, 378], "rdiv": [117, 379], "reindex": [118, 380, 660, 667], "panda": [118, 260, 380, 561, 570, 674, 675, 684], "compat": [118, 260, 380, 561, 570, 665, 675], "note": [118, 260, 380, 561, 570, 675, 678], "renam": [119, 233, 381], "repeat": [120, 234, 382, 520], "replac": [121, 383, 521, 683], "resampl": [122, 384], "reset_index": [123, 385], "rfloordiv": [124, 386], "rmod": [125, 387], "rmul": [126, 388], "roll": [127, 389, 628, 629, 630, 631, 632, 633, 634, 635, 670, 679, 680], "round": [128, 191, 390, 616], "rpow": [129, 391], "rsub": [130, 392], "rtruediv": [131, 393], "sampl": [132, 394], "scale": [133, 395], "scatter_by_map": 134, "searchsort": [135, 396], "select_dtyp": 136, "serial": [137, 235, 397, 660, 667], "set_index": 138, "shape": [139, 398], "shift": [140, 399, 567], "size": [141, 237, 400, 568, 589], "skew": [142, 401], "sort_index": [143, 402], "sort_valu": [144, 238, 403, 460], "stack": 145, "std": [146, 404, 590, 633], "sub": [147, 407], "subtract": [148, 408], "sum": [149, 409, 591, 634, 683], "sum_of_squar": [150, 410], "tail": [151, 411], "take": [152, 239, 412, 461], "tile": [153, 413], "to_arrow": [154, 414], "to_csv": 155, "to_cupi": [156, 415], "to_dict": [157, 416], "to_dlpack": [158, 240, 417], "to_feath": 159, "to_hdf": [160, 419], "to_json": [161, 420], "to_numpi": [162, 422], "to_orc": 163, "to_panda": [164, 242, 423], "to_parquet": 165, "to_record": 166, "to_str": [167, 424], "to_struct": 168, "transpos": [169, 426, 660, 674], "truediv": [170, 427], "unstack": [171, 659], "updat": [172, 429], "value_count": [173, 431], "valu": [174, 246, 251, 432, 665, 683, 684], "values_host": [175, 433], "var": [176, 434, 593, 635], "where": [177, 435], "datetimeindex": [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 665], "ceil": [179, 597], "dai": [180, 438, 598, 622], "day_of_year": [181, 599], "dayofweek": [182, 600], "dayofyear": [183, 601], "floor": [184, 603], "hour": [185, 604], "is_leap_year": [186, 605], "isocalendar": [187, 612], "minut": [188, 613, 674], "month": [189, 614], "quarter": [190, 615], "second": [192, 442, 617, 625], "to_fram": [193, 241, 264, 418, 443], "to_seri": [194, 243, 444], "weekdai": [195, 619], "year": [196, 620], "float64index": 197, "grouper": [198, 679], "differ": [206, 682], "get_level_valu": [212, 259], "get_loc": [213, 250, 260], "get_slice_bound": 214, "has_dupl": 215, "intersect": 218, "is_boolean": 219, "is_categor": 220, "is_float": 221, "is_integ": 222, "is_interv": 223, "is_monoton": [224, 331], "is_monotonic_decreas": [225, 332], "is_monotonic_increas": [226, 333], "is_numer": 227, "is_object": 228, "name": [231, 262, 359, 684], "nlevel": [232, 263], "set_nam": 236, "union": 244, "uniqu": [245, 428, 462, 596], "int64index": 247, "intervalindex": [248, 249, 250, 251, 665], "from_break": 249, "multiindex": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 665, 674], "droplevel": 254, "from_fram": 256, "from_product": 257, "from_tupl": 258, "level": [261, 661, 679, 680], "rangeindex": 265, "seri": [266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 660, 667, 674, 676, 680], "__array__": 268, "autocorr": 281, "between": [282, 676], "cat": [283, 465], "data": [293, 660, 661, 667, 672, 674, 678, 680, 683, 684], "digit": 299, "dt": 306, "factor": 312, "from_categor": 317, "from_masked_arrai": 318, "has_nul": 323, "is_uniqu": 334, "iteritem": 339, "list": [345, 456, 457, 458, 459, 460, 461, 462, 667, 678], "map": 348, "null_count": 367, "nullabl": [368, 680], "nullmask": 369, "str": 405, "struct": [406, 546, 547, 667, 678], "to_list": 421, "tolist": 425, "valid_count": 430, "timedeltaindex": [436, 437, 438, 439, 440, 441, 442, 443, 444, 665], "compon": [437, 621, 665], "inferred_freq": 439, "microsecond": [440, 623], "nanosecond": [441, 624], "uint64index": 445, "concat": [446, 456, 674], "core": [447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "categor": [447, 448, 449, 450, 451, 452, 453, 454, 455, 665, 667, 674], "categoricalaccessor": [447, 448, 449, 450, 451, 452, 453, 454, 455], "add_categori": 447, "as_ord": 448, "as_unord": 449, "order": [452, 684], "remove_categori": 453, "reorder_categori": 454, "set_categori": 455, "listmethod": [456, 457, 458, 459, 460, 461, 462], "contain": [457, 470], "get": [458, 482, 674], "len": [459, 508], "string": [463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 667, 668, 674, 683], "stringmethod": [463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "byte_count": 463, "capit": 464, "center": 466, "character_ngram": 467, "character_token": 468, "code_point": 469, "detoken": 472, "edit_dist": 473, "edit_distance_matrix": 474, "endswith": 475, "extract": 476, "filter_alphanum": 477, "filter_charact": 478, "filter_token": 479, "find": 480, "findal": 481, "get_json_object": 483, "hex_to_int": 484, "htoi": 485, "ip2int": 488, "ip_to_int": 489, "is_conson": 490, "is_vowel": 491, "isalnum": 492, "isalpha": 493, "isdecim": 494, "isdigit": 495, "isempti": 496, "isfloat": 497, "ishex": 498, "isinteg": 499, "isipv4": 500, "islow": 501, "isnumer": 502, "isspac": 503, "istimestamp": 504, "istitl": 505, "isupp": 506, "ljust": 509, "lower": [510, 680], "lstrip": 511, "match": 512, "ngram": 513, "ngrams_token": 514, "normalize_charact": 515, "normalize_spac": 516, "pad": [517, 565, 586], "partit": 518, "porter_stemmer_measur": 519, "replace_token": 522, "replace_with_backref": 523, "rfind": 524, "rindex": 525, "rjust": 526, "rpartit": 527, "rsplit": 528, "rstrip": 529, "slice": 530, "slice_from": 531, "slice_replac": 532, "split": 533, "startswith": 534, "strip": 535, "swapcas": 536, "titl": 537, "token_count": 538, "token": 539, "translat": 540, "upper": 541, "url_decod": 542, "url_encod": 543, "wrap": 544, "zfill": 545, "structmethod": [546, 547], "field": 547, "group": [549, 674, 679], "dataframegroupbi": [550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "aggreg": [550, 594, 679], "backfil": [551, 571], "bfill": [552, 572], "cumcount": [554, 576], "ffill": [560, 580], "idxmax": 562, "idxmin": 563, "nth": 585, "transform": [592, 679], "seriesgroupbi": [594, 595, 596], "datetimeproperti": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620], "days_in_month": 602, "is_month_end": 606, "is_month_start": 607, "is_quarter_end": 608, "is_quarter_start": 609, "is_year_end": 610, "is_year_start": 611, "strftime": 618, "timedeltaproperti": [621, 622, 623, 624, 625], "subword_token": [626, 627], "subwordtoken": [626, 627, 669], "__call__": 627, "window": [628, 629, 630, 631, 632, 633, 634, 635, 660, 667, 670, 679, 680], "cut": 636, "from_dlpack": 637, "get_dummi": 638, "io": [639, 640, 641, 642, 660, 667, 682], "parquet": [639, 640, 641, 642, 666, 674], "parquetdatasetwrit": [639, 640, 641], "close": 640, "write_t": 641, "read_parquet_metadata": 642, "read_avro": 645, "read_csv": 646, "read_feath": 647, "read_hdf": 648, "read_json": 649, "read_orc": 650, "read_parquet": 651, "read_text": 652, "test": [653, 654, 655, 656, 662], "assert_column_equ": 653, "assert_frame_equ": 654, "assert_index_equ": 655, "assert_series_equ": 656, "to_datetim": 657, "to_numer": 658, "constructor": [660, 665, 667, 669], "attribut": [660, 667], "underli": 660, "convers": [660, 661, 665, 667], "iter": [660, 663, 667, 684], "binari": [660, 667], "oper": [660, 665, 667, 674, 679, 684], "function": [660, 661, 662, 663, 667, 670, 680, 684], "applic": [660, 663, 667], "comput": [660, 663, 665, 667, 684], "descript": [660, 663, 667], "stat": [660, 663, 667, 674], "select": [660, 665, 667, 674], "label": [660, 667, 674, 683], "manipul": [660, 661, 667], "miss": [660, 665, 667, 674, 683, 684], "handl": [660, 667, 668, 680], "reshap": [660, 667], "sort": [660, 665, 667], "combin": [660, 665, 667], "compar": [660, 667], "time": [660, 665, 667, 674], "relat": [660, 667], "gener": [661, 662, 683], "top": 661, "deal": 661, "datetimelik": [661, 667], "util": 662, "api": [664, 677], "refer": 664, "document": [664, 673], "object": [665, 674, 678, 679, 683, 684], "properti": [665, 667], "modifi": 665, "memori": 665, "usag": 665, "specif": 665, "set": 665, "numer": [665, 683], "date": 665, "input": [666, 682], "output": [666, 682], "csv": [666, 674], "text": 666, "json": 666, "orc": [666, 674], "hdfstore": 666, "pytabl": 666, "hdf5": 666, "feather": 666, "avro": 666, "accessor": 667, "datetim": [667, 683], "method": [667, 674], "timedelta": 667, "develop": [671, 677], "guid": [671, 681], "librari": [672, 674], "design": 672, "The": [672, 679], "frame": 672, "layer": 672, "columnaccessor": 672, "type": [672, 678, 682, 684], "buffer": 672, "cython": 672, "put": 672, "It": 672, "togeth": 672, "welcom": 673, "s": 673, "content": 673, "indic": 673, "tabl": 673, "10": 674, "dask": [674, 677], "what": [674, 677], "ar": 674, "when": 674, "us": [674, 682], "creation": 674, "view": 674, "posit": 674, "boolean": 674, "histogram": 674, "convert": [674, 676], "represent": 674, "numpi": [674, 678], "arrow": 674, "In": 674, "out": 674, "perform": 674, "tip": 674, "persist": 674, "wait": 674, "interoper": 676, "cupi": [676, 680], "arrai": [676, 680], "interweav": 676, "smooth": 676, "pydata": 676, "workflow": 676, "spars": 676, "matrix": 676, "multi": 677, "gpu": 677, "work": [677, 683], "navig": 677, "support": [678, 679, 682, 684], "A": 678, "decim": 678, "nest": 678, "summari": [679, 680], "limit": [679, 684], "calcul": [679, 683], "overview": 680, "user": [680, 681], "defin": 680, "udf": 680, "addit": 680, "scalar": 680, "argument": 680, "control": 680, "custom": 680, "numba": 680, "kernel": 680, "null": [680, 683, 684], "caveat": 680, "i": 682, "o": 682, "magnum": 682, "gpudirect": 682, "storag": 682, "integr": 682, "nvcomp": 682, "current": 682, "polici": 682, "how": 683, "detect": 683, "float": [683, 684], "nan": 683, "na": 683, "fill": 683, "axi": 683, "regular": 683, "express": 683, "comparison": 684, "result": 684, "point": 684, "No": 684, "true": 684}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}})