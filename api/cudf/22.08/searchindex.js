Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.applymap", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/series", "api_docs/string_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/index", "developer_guide/library_design", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.applymap.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/index.md", "developer_guide/library_design.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.applymap", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.from_dlpack", "cudf.get_dummies", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "Series", "String handling", "SubwordTokenizer", "Window", "Developer Guide", "Library Design", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 36, 69, 127, 168, 182, 201, 202, 203, 207, 246, 251, 252, 256, 269, 270, 301, 431, 444, 453, 634, 647, 661, 662, 663, 664, 672, 680, 685], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 27, 35, 38, 40, 41, 42, 43, 46, 48, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 69, 72, 83, 84, 86, 87, 88, 89, 92, 94, 95, 97, 98, 100, 101, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 129, 130, 133, 134, 135, 136, 141, 145, 151, 152, 153, 154, 158, 162, 164, 165, 174, 176, 179, 181, 182, 183, 188, 195, 201, 203, 209, 215, 221, 223, 224, 225, 226, 227, 231, 232, 234, 239, 244, 251, 252, 253, 259, 270, 275, 281, 284, 289, 291, 300, 303, 306, 307, 308, 309, 315, 321, 322, 324, 325, 326, 327, 328, 329, 332, 334, 337, 350, 351, 354, 356, 357, 358, 361, 362, 364, 365, 368, 369, 380, 381, 382, 383, 384, 385, 386, 387, 389, 392, 394, 395, 396, 399, 400, 401, 402, 405, 408, 415, 416, 417, 418, 425, 427, 428, 435, 439, 441, 443, 444, 453, 472, 476, 478, 486, 513, 518, 541, 544, 545, 547, 548, 549, 550, 551, 552, 566, 570, 571, 572, 574, 575, 583, 589, 590, 591, 592, 596, 599, 603, 605, 611, 624, 644, 645, 646, 652, 653, 654, 657, 658, 659, 662, 671, 672, 681, 684, 685, 689, 690], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 40, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 69, 70, 72, 74, 75, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 107, 109, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 144, 145, 146, 147, 150, 151, 152, 153, 154, 159, 160, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 180, 181, 182, 197, 198, 201, 202, 203, 210, 213, 215, 217, 218, 222, 234, 238, 240, 242, 243, 245, 247, 248, 251, 252, 253, 254, 256, 260, 261, 262, 264, 268, 269, 270, 272, 275, 278, 279, 282, 283, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 300, 306, 307, 309, 310, 311, 314, 315, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 337, 343, 344, 348, 349, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 371, 372, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 407, 408, 409, 410, 412, 415, 416, 417, 418, 422, 423, 426, 428, 430, 431, 432, 435, 436, 439, 442, 443, 444, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 476, 478, 479, 483, 485, 486, 487, 488, 494, 495, 504, 515, 516, 519, 529, 530, 532, 533, 536, 537, 538, 540, 541, 542, 543, 548, 553, 559, 560, 566, 568, 569, 570, 571, 572, 573, 575, 579, 580, 588, 589, 590, 591, 592, 594, 596, 599, 603, 644, 646, 647, 651, 652, 653, 654, 655, 657, 658, 659, 660, 665, 666, 667, 682, 683, 688, 691], "categori": [0, 2, 21, 35, 92, 93, 224, 232, 284, 289, 300, 318, 324, 455, 456, 457, 460, 461, 462, 463, 491, 523, 644, 646, 661, 664, 680, 682, 685, 686, 690, 692], "order": [0, 14, 17, 19, 21, 42, 44, 60, 79, 93, 102, 105, 120, 139, 141, 148, 164, 169, 177, 182, 201, 234, 239, 242, 251, 283, 284, 308, 310, 318, 328, 363, 370, 373, 386, 404, 405, 411, 427, 439, 444, 453, 456, 457, 462, 463, 468, 470, 480, 547, 644, 645, 647, 654, 657, 661, 662, 663, 664, 665, 682, 687, 689], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 25, 27, 29, 35, 39, 40, 41, 42, 43, 47, 48, 50, 53, 55, 57, 58, 59, 61, 62, 63, 67, 69, 71, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 103, 104, 106, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 160, 166, 168, 174, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 205, 210, 213, 215, 216, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 237, 238, 240, 242, 243, 246, 247, 248, 251, 252, 253, 256, 258, 265, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 291, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 342, 343, 344, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 415, 416, 417, 418, 420, 423, 426, 430, 431, 435, 436, 437, 439, 442, 443, 444, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 566, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 644, 646, 654, 657, 659, 661, 662, 663, 664, 665, 666, 667, 675, 680, 682, 683, 684, 686, 687, 688, 689, 692], "copi": [0, 5, 21, 43, 44, 45, 53, 122, 123, 160, 162, 166, 172, 173, 182, 201, 203, 242, 244, 251, 252, 253, 256, 269, 284, 309, 320, 388, 389, 423, 425, 430, 444, 453, 455, 456, 457, 461, 462, 463, 518, 529, 554, 645, 659, 680, 690, 692], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 25, 27, 29, 35, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 57, 58, 59, 60, 61, 69, 70, 72, 73, 74, 75, 79, 84, 86, 87, 92, 93, 96, 99, 101, 103, 104, 116, 120, 122, 123, 125, 127, 131, 136, 139, 140, 142, 147, 148, 156, 158, 160, 164, 165, 168, 169, 176, 177, 181, 182, 201, 203, 210, 211, 215, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 237, 240, 242, 248, 251, 252, 253, 254, 256, 264, 269, 270, 278, 279, 280, 282, 284, 287, 290, 291, 300, 305, 308, 309, 310, 311, 314, 315, 316, 317, 320, 326, 327, 328, 329, 330, 337, 342, 343, 344, 351, 354, 356, 360, 363, 367, 369, 371, 372, 386, 391, 393, 397, 402, 404, 410, 411, 420, 423, 427, 428, 431, 437, 439, 443, 444, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 468, 475, 478, 483, 484, 485, 486, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 523, 529, 536, 541, 542, 552, 569, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 613, 614, 616, 617, 618, 619, 635, 644, 646, 647, 648, 654, 657, 659, 661, 662, 663, 664, 665, 682, 683, 684, 687, 688, 691], "name": [0, 8, 11, 16, 17, 19, 21, 35, 40, 41, 43, 45, 48, 50, 55, 58, 59, 60, 61, 67, 70, 73, 74, 75, 76, 78, 79, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 97, 98, 101, 103, 104, 105, 108, 111, 113, 116, 118, 119, 121, 122, 123, 127, 128, 129, 130, 132, 133, 134, 135, 136, 145, 147, 148, 151, 152, 159, 164, 167, 169, 172, 174, 175, 176, 182, 197, 198, 201, 203, 216, 234, 237, 240, 242, 245, 247, 251, 252, 253, 256, 257, 258, 260, 261, 262, 265, 268, 269, 270, 275, 283, 284, 300, 306, 307, 309, 310, 315, 322, 327, 328, 329, 335, 342, 343, 344, 351, 353, 354, 357, 358, 361, 362, 364, 365, 369, 371, 372, 381, 384, 385, 387, 389, 393, 394, 395, 396, 398, 399, 400, 401, 402, 408, 410, 415, 416, 426, 427, 435, 444, 451, 452, 453, 454, 536, 555, 558, 577, 602, 620, 646, 647, 650, 651, 652, 654, 656, 661, 662, 663, 664, 667, 680, 682, 686, 687, 688, 689, 691], "A": [0, 4, 9, 10, 14, 16, 17, 35, 36, 37, 43, 47, 50, 53, 54, 57, 60, 62, 64, 69, 83, 87, 106, 110, 118, 122, 123, 124, 125, 126, 131, 132, 136, 138, 141, 159, 164, 165, 179, 181, 190, 207, 208, 215, 220, 238, 239, 256, 258, 276, 277, 280, 300, 301, 302, 305, 309, 312, 314, 320, 321, 324, 326, 328, 331, 333, 350, 356, 375, 380, 390, 391, 392, 397, 398, 402, 405, 427, 428, 436, 441, 443, 454, 471, 473, 478, 479, 483, 484, 495, 500, 516, 518, 529, 539, 540, 542, 544, 545, 549, 550, 551, 558, 577, 583, 595, 600, 602, 613, 635, 636, 644, 645, 647, 651, 654, 656, 666, 680, 682, 687, 688, 689, 691], "categor": [0, 1, 2, 21, 35, 92, 93, 223, 224, 225, 226, 227, 231, 232, 284, 289, 300, 324, 644, 646, 659, 661, 662, 663, 664, 680, 686, 687, 689, 692], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 29, 31, 32, 33, 34, 35, 39, 40, 41, 43, 45, 47, 48, 49, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 67, 69, 70, 72, 73, 74, 75, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 164, 165, 166, 168, 169, 171, 174, 176, 177, 179, 180, 181, 198, 203, 210, 212, 213, 215, 216, 222, 228, 229, 230, 233, 242, 243, 247, 249, 254, 263, 270, 274, 275, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 423, 427, 428, 430, 431, 432, 435, 436, 437, 438, 439, 441, 442, 443, 452, 454, 461, 463, 464, 465, 468, 471, 473, 477, 478, 480, 486, 492, 493, 495, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 520, 526, 528, 529, 535, 536, 540, 541, 550, 552, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 601, 603, 604, 635, 636, 644, 646, 651, 652, 654, 657, 659, 662, 663, 664, 666, 675, 676, 680, 682, 684, 686, 687, 688, 689, 690], "repres": [0, 126, 143, 150, 159, 165, 180, 182, 270, 287, 392, 406, 412, 428, 442, 444, 473, 492, 493, 510, 610, 641, 643, 644, 646, 680, 686, 691, 692], "indic": [0, 19, 27, 45, 47, 53, 72, 74, 75, 93, 103, 104, 110, 139, 156, 165, 176, 190, 194, 205, 242, 243, 264, 283, 291, 305, 311, 314, 318, 320, 330, 337, 342, 343, 344, 371, 372, 375, 380, 404, 420, 428, 454, 465, 469, 471, 478, 480, 483, 516, 526, 531, 535, 542, 595, 613, 614, 615, 616, 617, 618, 619, 623, 635, 644, 646, 654, 657, 671, 680, 683, 688], "anoth": [0, 39, 160, 164, 166, 176, 280, 304, 355, 423, 427, 430, 552, 680], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 70, 71, 73, 76, 79, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 108, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 140, 142, 145, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 191, 197, 244, 245, 260, 262, 268, 270, 275, 276, 277, 278, 279, 282, 283, 284, 289, 295, 296, 297, 298, 300, 306, 307, 309, 311, 314, 315, 316, 320, 322, 327, 328, 329, 331, 332, 335, 348, 349, 351, 353, 354, 357, 358, 361, 362, 364, 365, 369, 377, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 408, 410, 412, 415, 416, 417, 419, 421, 423, 425, 426, 427, 428, 430, 432, 435, 442, 451, 454, 558, 561, 567, 569, 570, 571, 572, 574, 575, 577, 581, 582, 583, 589, 590, 591, 592, 596, 598, 599, 601, 602, 603, 604, 620, 634, 635, 636, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 671, 672, 679, 682, 683, 684, 685, 687, 688, 689, 691], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 180, 181, 182, 183, 188, 195, 197, 198, 201, 203, 205, 207, 208, 210, 213, 215, 216, 218, 220, 222, 233, 234, 237, 238, 240, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 337, 342, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 373, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 409, 410, 411, 412, 415, 416, 417, 418, 420, 421, 423, 425, 426, 427, 428, 430, 431, 435, 437, 439, 442, 443, 444, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 468, 469, 473, 474, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 498, 499, 515, 517, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 552, 553, 555, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 605, 611, 624, 626, 634, 635, 636, 641, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 690, 691], "arrai": [0, 4, 16, 17, 19, 25, 58, 60, 70, 87, 93, 116, 117, 118, 120, 122, 124, 125, 136, 139, 156, 160, 165, 166, 181, 182, 201, 203, 210, 222, 233, 238, 242, 243, 248, 251, 252, 253, 254, 256, 261, 264, 270, 280, 283, 290, 299, 305, 318, 323, 324, 325, 328, 356, 384, 386, 390, 391, 402, 404, 420, 422, 423, 428, 430, 443, 444, 453, 477, 481, 515, 530, 574, 636, 644, 646, 657, 665, 680, 682, 683, 689], "like": [0, 4, 8, 14, 16, 25, 35, 40, 41, 42, 43, 48, 51, 53, 55, 58, 59, 61, 70, 84, 86, 87, 93, 95, 96, 97, 98, 101, 113, 116, 117, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 142, 151, 152, 156, 164, 165, 174, 175, 177, 181, 182, 183, 188, 195, 201, 203, 210, 213, 222, 233, 243, 248, 251, 252, 253, 258, 260, 262, 270, 275, 280, 282, 287, 290, 300, 306, 307, 308, 309, 312, 315, 317, 320, 322, 324, 325, 327, 329, 342, 351, 354, 356, 362, 364, 365, 369, 381, 384, 385, 386, 387, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 415, 416, 420, 427, 428, 435, 443, 444, 453, 454, 455, 461, 462, 463, 469, 478, 481, 483, 498, 499, 503, 515, 523, 529, 530, 536, 542, 566, 574, 605, 611, 624, 644, 646, 653, 654, 657, 658, 659, 660, 661, 662, 664, 665, 667, 673, 675, 676, 680, 681, 682, 684, 685, 686, 687, 688, 691, 692], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 25, 27, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 67, 69, 70, 71, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 168, 169, 171, 174, 175, 177, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 196, 199, 201, 203, 205, 210, 213, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 237, 240, 242, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 269, 270, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 379, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 431, 432, 435, 436, 437, 439, 442, 443, 444, 448, 449, 450, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 567, 569, 575, 577, 578, 581, 583, 595, 598, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 641, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 664, 665, 666, 667, 682, 683, 684, 686, 687, 688, 691, 692], "dimension": [0, 143, 182, 201, 203, 251, 252, 253, 256, 270, 406, 444, 453, 536, 541, 644], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 28, 29, 35, 36, 37, 38, 42, 46, 49, 50, 54, 58, 63, 64, 65, 69, 71, 73, 79, 83, 92, 96, 102, 106, 108, 109, 114, 115, 122, 124, 125, 126, 131, 140, 141, 147, 149, 150, 153, 157, 160, 165, 166, 169, 177, 178, 180, 184, 185, 186, 187, 189, 192, 193, 196, 198, 199, 200, 201, 203, 207, 208, 209, 220, 221, 225, 233, 238, 239, 240, 242, 243, 247, 251, 254, 255, 256, 260, 264, 270, 276, 277, 281, 282, 283, 285, 299, 300, 301, 302, 303, 308, 310, 316, 321, 324, 325, 332, 333, 334, 342, 350, 360, 370, 373, 376, 379, 382, 383, 390, 391, 392, 393, 397, 405, 410, 412, 417, 421, 423, 428, 430, 439, 440, 442, 452, 453, 454, 455, 458, 461, 462, 463, 470, 473, 475, 476, 478, 480, 481, 482, 484, 486, 487, 489, 491, 498, 499, 502, 503, 510, 513, 515, 520, 521, 522, 523, 526, 527, 529, 530, 535, 536, 539, 541, 546, 547, 552, 553, 570, 571, 572, 574, 575, 578, 583, 589, 590, 591, 592, 596, 598, 599, 601, 603, 605, 606, 607, 608, 609, 611, 612, 621, 622, 624, 625, 626, 627, 628, 635, 641, 643, 644, 651, 654, 656, 657, 658, 659, 660, 665, 666, 671, 679, 682, 683, 684, 685, 686, 688, 690, 691, 692], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 25, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 69, 70, 73, 83, 84, 86, 88, 89, 93, 94, 95, 96, 97, 98, 101, 110, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 147, 148, 150, 151, 152, 153, 159, 164, 165, 167, 168, 169, 174, 175, 176, 180, 182, 198, 203, 215, 234, 240, 247, 252, 253, 254, 260, 261, 264, 270, 275, 278, 279, 280, 283, 290, 295, 296, 297, 298, 300, 306, 307, 308, 309, 310, 311, 314, 315, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 342, 350, 351, 354, 355, 357, 358, 361, 362, 364, 365, 369, 380, 381, 382, 383, 384, 385, 387, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 410, 411, 412, 415, 416, 417, 427, 428, 431, 435, 437, 439, 442, 444, 452, 462, 463, 464, 466, 468, 473, 478, 483, 484, 486, 489, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 519, 523, 526, 529, 535, 536, 537, 541, 542, 543, 561, 569, 570, 571, 572, 582, 589, 590, 591, 592, 596, 599, 603, 634, 635, 644, 645, 646, 647, 652, 653, 654, 655, 657, 658, 659, 662, 663, 665, 666, 667, 682, 683, 684, 685, 688, 690, 692], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 27, 29, 35, 43, 45, 47, 49, 50, 53, 60, 74, 75, 81, 82, 87, 88, 90, 91, 93, 94, 96, 102, 103, 104, 105, 110, 111, 114, 115, 116, 118, 120, 122, 125, 126, 131, 132, 136, 139, 140, 141, 146, 150, 153, 164, 165, 169, 176, 177, 180, 181, 190, 194, 210, 211, 216, 222, 228, 229, 230, 233, 239, 248, 252, 253, 254, 256, 260, 270, 274, 276, 277, 278, 279, 281, 282, 283, 287, 291, 300, 309, 311, 314, 316, 320, 324, 325, 328, 338, 339, 340, 341, 342, 343, 344, 348, 349, 355, 356, 357, 359, 361, 370, 371, 372, 373, 380, 382, 383, 384, 386, 391, 392, 397, 398, 402, 404, 405, 409, 412, 417, 427, 428, 437, 442, 443, 454, 462, 463, 464, 473, 478, 481, 482, 483, 484, 486, 487, 489, 495, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 515, 519, 520, 523, 529, 530, 536, 537, 539, 541, 542, 543, 548, 550, 551, 552, 553, 554, 570, 571, 572, 583, 589, 590, 591, 592, 596, 599, 603, 613, 614, 615, 616, 617, 618, 619, 623, 626, 635, 644, 646, 647, 651, 652, 654, 656, 657, 658, 659, 661, 662, 663, 664, 671, 673, 674, 675, 678, 680, 684, 685, 686, 687, 688, 689, 690, 691, 692], "given": [0, 21, 43, 102, 111, 116, 117, 124, 125, 126, 127, 132, 136, 139, 169, 218, 238, 260, 284, 309, 325, 384, 390, 391, 392, 393, 398, 402, 404, 462, 463, 466, 469, 473, 478, 483, 486, 512, 526, 529, 536, 541, 542, 548, 552, 647, 652, 654, 658, 659, 665, 680, 690], "replac": [0, 45, 87, 136, 147, 181, 311, 356, 402, 410, 443, 486, 487, 495, 515, 530, 538, 540, 672, 682, 684, 689, 692], "nan": [0, 4, 8, 18, 19, 29, 35, 40, 41, 48, 49, 55, 57, 59, 61, 70, 72, 74, 75, 84, 86, 95, 96, 97, 98, 99, 101, 103, 104, 106, 113, 119, 120, 121, 122, 127, 128, 129, 130, 131, 133, 134, 135, 147, 151, 152, 164, 165, 168, 174, 203, 215, 225, 231, 242, 270, 275, 283, 300, 306, 307, 315, 316, 322, 326, 327, 329, 337, 343, 344, 351, 354, 355, 362, 363, 364, 365, 367, 369, 371, 372, 377, 381, 385, 386, 387, 388, 394, 395, 396, 397, 399, 400, 401, 410, 415, 416, 427, 428, 431, 435, 437, 439, 464, 468, 470, 478, 529, 566, 637, 646, 654, 683, 688, 689, 692], "list": [0, 4, 8, 11, 14, 16, 17, 19, 35, 36, 37, 38, 40, 41, 42, 43, 45, 48, 51, 55, 58, 59, 60, 61, 64, 65, 67, 73, 84, 86, 87, 91, 93, 95, 97, 98, 101, 102, 105, 108, 111, 113, 116, 119, 121, 123, 125, 127, 128, 129, 130, 133, 134, 135, 138, 140, 141, 142, 147, 148, 151, 152, 159, 164, 165, 169, 174, 175, 177, 181, 205, 207, 208, 209, 213, 220, 221, 233, 239, 240, 254, 258, 260, 261, 262, 265, 275, 280, 282, 283, 287, 289, 300, 301, 302, 303, 306, 307, 308, 309, 315, 317, 322, 327, 328, 329, 333, 334, 335, 342, 351, 354, 356, 362, 364, 365, 369, 381, 384, 385, 387, 391, 393, 394, 395, 396, 399, 400, 401, 405, 410, 411, 415, 416, 427, 428, 435, 443, 454, 455, 461, 463, 473, 475, 478, 482, 483, 498, 499, 515, 529, 536, 541, 542, 546, 547, 558, 566, 575, 577, 602, 604, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 665, 667, 672, 680, 682, 684, 685, 687, 688, 689, 690, 691, 692], "option": [0, 16, 17, 18, 28, 35, 43, 44, 45, 60, 69, 91, 109, 110, 111, 120, 122, 123, 126, 131, 132, 136, 139, 147, 159, 160, 164, 165, 166, 169, 171, 172, 177, 182, 198, 205, 240, 242, 247, 252, 253, 254, 256, 260, 261, 262, 269, 270, 282, 292, 300, 309, 311, 324, 325, 379, 380, 384, 386, 389, 392, 393, 397, 398, 402, 404, 410, 423, 427, 428, 430, 432, 439, 444, 452, 454, 455, 456, 457, 460, 461, 462, 463, 464, 466, 485, 486, 487, 538, 540, 566, 575, 581, 583, 595, 635, 644, 646, 648, 651, 652, 654, 656, 658, 659, 688, 690], "item": [0, 35, 47, 105, 112, 136, 142, 270, 300, 314, 318, 402, 462, 463, 654, 656], "need": [0, 8, 40, 41, 47, 48, 49, 55, 59, 61, 69, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 158, 174, 270, 275, 282, 292, 306, 307, 314, 315, 316, 322, 327, 329, 351, 354, 362, 364, 365, 369, 375, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 462, 479, 644, 680, 682, 684, 686, 688, 692], "uniqu": [0, 35, 111, 123, 138, 177, 254, 256, 261, 264, 270, 300, 318, 341, 377, 439, 644, 646, 652, 657, 682, 683, 687, 692], "here": [0, 35, 300, 527, 653, 654, 658, 659, 680, 684, 688, 690], "also": [0, 15, 35, 53, 93, 122, 123, 125, 127, 131, 132, 242, 300, 320, 355, 389, 391, 393, 397, 398, 437, 478, 479, 481, 488, 490, 494, 495, 498, 499, 503, 510, 523, 526, 533, 535, 644, 647, 657, 658, 659, 680, 681, 682, 684, 686, 687, 688, 690, 691, 692], "thei": [0, 49, 93, 96, 120, 125, 169, 270, 316, 324, 325, 373, 386, 391, 473, 480, 547, 552, 647, 680, 681, 686, 687, 688, 692], "infer": [0, 4, 165, 182, 252, 253, 261, 270, 428, 447, 654, 657, 665, 682], "from": [0, 4, 5, 11, 14, 16, 18, 20, 35, 36, 37, 43, 45, 50, 56, 57, 60, 69, 79, 87, 91, 93, 102, 105, 109, 111, 112, 116, 122, 123, 126, 127, 136, 142, 147, 148, 149, 162, 164, 165, 169, 173, 176, 177, 181, 185, 187, 194, 207, 208, 210, 212, 215, 216, 244, 252, 253, 254, 258, 259, 260, 261, 262, 264, 270, 280, 281, 282, 300, 301, 302, 309, 311, 323, 324, 326, 328, 355, 356, 379, 388, 389, 392, 393, 402, 410, 411, 413, 425, 427, 428, 437, 443, 454, 466, 468, 469, 473, 475, 484, 485, 486, 487, 490, 519, 521, 522, 523, 524, 525, 529, 536, 537, 538, 540, 541, 543, 553, 566, 570, 571, 572, 578, 583, 589, 590, 591, 592, 593, 596, 599, 603, 607, 609, 623, 634, 635, 644, 645, 646, 651, 652, 653, 654, 655, 656, 658, 659, 665, 666, 680, 682, 683, 684, 685, 686, 688, 692], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 25, 27, 31, 32, 33, 34, 35, 42, 43, 44, 45, 47, 48, 49, 50, 51, 57, 59, 60, 61, 69, 70, 72, 74, 75, 79, 81, 82, 84, 86, 87, 88, 89, 90, 92, 93, 94, 96, 101, 103, 104, 106, 114, 115, 116, 120, 125, 127, 131, 136, 138, 139, 140, 146, 147, 148, 149, 150, 153, 158, 159, 160, 164, 165, 166, 169, 170, 177, 180, 181, 182, 201, 203, 206, 211, 215, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 240, 242, 248, 251, 252, 253, 256, 269, 270, 278, 279, 280, 281, 282, 283, 284, 287, 290, 291, 295, 296, 297, 298, 300, 305, 308, 309, 310, 311, 314, 315, 316, 317, 326, 327, 328, 329, 330, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 351, 354, 356, 357, 358, 359, 360, 361, 363, 369, 371, 372, 377, 382, 383, 386, 391, 393, 397, 402, 404, 409, 410, 411, 412, 417, 423, 427, 428, 430, 439, 442, 443, 444, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 468, 475, 478, 483, 484, 485, 486, 489, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 523, 526, 529, 535, 536, 541, 542, 561, 569, 570, 571, 572, 582, 589, 590, 591, 592, 596, 599, 603, 613, 614, 616, 617, 618, 619, 634, 635, 644, 647, 654, 656, 658, 661, 662, 663, 664, 665, 688, 690, 691], "whether": [0, 12, 13, 16, 17, 35, 43, 44, 45, 47, 49, 50, 69, 73, 74, 75, 87, 92, 103, 104, 108, 116, 120, 142, 149, 158, 160, 165, 166, 168, 170, 181, 204, 210, 212, 222, 223, 225, 226, 227, 231, 232, 233, 248, 252, 253, 278, 279, 287, 300, 305, 309, 314, 316, 330, 342, 343, 344, 356, 371, 372, 375, 384, 386, 423, 428, 430, 431, 443, 455, 456, 457, 460, 461, 462, 463, 465, 478, 483, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 542, 635, 644, 654, 659, 661, 662, 663, 664, 671, 684], "thi": [0, 1, 2, 7, 8, 14, 18, 25, 27, 35, 36, 37, 40, 41, 42, 46, 48, 49, 54, 55, 59, 60, 61, 62, 63, 69, 72, 80, 83, 84, 86, 93, 95, 97, 98, 101, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 141, 147, 148, 150, 151, 152, 153, 162, 166, 169, 171, 174, 180, 182, 197, 203, 207, 208, 210, 213, 216, 222, 228, 238, 239, 242, 244, 245, 264, 267, 268, 269, 270, 274, 275, 280, 281, 285, 287, 290, 291, 300, 301, 302, 305, 306, 307, 308, 315, 316, 321, 322, 324, 325, 327, 328, 329, 331, 332, 337, 338, 350, 351, 354, 362, 364, 365, 366, 369, 370, 373, 381, 382, 383, 384, 385, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 410, 411, 412, 413, 415, 416, 417, 425, 430, 432, 435, 436, 439, 442, 444, 447, 451, 455, 456, 457, 458, 461, 462, 463, 466, 472, 473, 477, 479, 481, 482, 485, 486, 487, 489, 494, 496, 497, 500, 501, 502, 503, 505, 507, 509, 510, 511, 514, 515, 518, 519, 521, 522, 523, 526, 530, 531, 533, 535, 536, 537, 541, 543, 544, 545, 548, 549, 552, 554, 569, 575, 583, 595, 634, 635, 644, 645, 646, 647, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 672, 674, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692], "treat": [0, 12, 13, 72, 93, 278, 279, 287, 337, 462, 463, 478, 521, 529, 536, 541, 553, 688, 690, 691], "an": [0, 3, 12, 13, 15, 16, 25, 31, 32, 33, 34, 35, 36, 50, 67, 72, 74, 75, 92, 93, 103, 104, 114, 115, 116, 118, 122, 123, 124, 131, 132, 136, 141, 145, 147, 150, 153, 162, 164, 180, 190, 198, 207, 216, 228, 238, 239, 242, 244, 247, 248, 253, 261, 263, 264, 278, 279, 282, 290, 295, 296, 297, 298, 300, 301, 328, 335, 337, 338, 342, 343, 344, 360, 371, 372, 382, 383, 384, 388, 390, 397, 398, 402, 405, 408, 410, 412, 417, 425, 427, 442, 452, 460, 465, 466, 474, 476, 477, 478, 480, 483, 491, 496, 497, 500, 504, 508, 515, 517, 521, 522, 525, 534, 542, 553, 583, 600, 613, 635, 636, 644, 645, 653, 655, 656, 658, 665, 666, 671, 673, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 28, 31, 32, 33, 34, 35, 40, 41, 42, 44, 48, 51, 53, 55, 59, 60, 61, 72, 73, 81, 82, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 111, 113, 114, 115, 116, 119, 121, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 139, 142, 146, 149, 150, 151, 152, 153, 154, 159, 165, 168, 172, 174, 175, 177, 180, 198, 210, 222, 234, 247, 248, 254, 264, 270, 275, 278, 279, 281, 282, 285, 292, 295, 296, 297, 298, 300, 306, 307, 308, 315, 317, 320, 322, 327, 328, 329, 337, 342, 348, 349, 351, 354, 357, 358, 359, 361, 362, 364, 365, 369, 381, 382, 383, 385, 387, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 404, 409, 412, 415, 416, 417, 418, 428, 431, 435, 439, 442, 452, 454, 463, 464, 468, 473, 474, 486, 515, 517, 525, 534, 553, 558, 566, 569, 570, 571, 572, 577, 578, 581, 583, 589, 590, 591, 592, 595, 596, 599, 600, 602, 603, 644, 651, 652, 657, 660, 666, 667, 680, 682, 683, 685, 686, 687, 688, 689, 691], "unord": [0, 93, 457, 644], "categoricaldtyp": [0, 21, 284, 680, 686], "cannot": [0, 53, 70, 136, 165, 213, 222, 282, 320, 370, 373, 402, 428, 523, 569, 647, 686, 687], "us": [0, 4, 11, 14, 16, 21, 28, 35, 43, 44, 46, 50, 53, 58, 60, 62, 63, 67, 69, 72, 81, 82, 85, 88, 89, 91, 92, 93, 94, 105, 106, 109, 110, 111, 116, 117, 118, 122, 123, 125, 126, 127, 131, 132, 136, 138, 142, 147, 150, 159, 160, 164, 165, 166, 167, 168, 169, 171, 176, 177, 180, 183, 188, 195, 197, 198, 201, 213, 216, 245, 247, 251, 254, 260, 268, 269, 270, 280, 281, 282, 284, 292, 300, 309, 311, 320, 324, 328, 331, 332, 335, 337, 342, 348, 349, 353, 355, 357, 358, 360, 361, 379, 380, 384, 388, 391, 392, 393, 397, 398, 402, 410, 412, 423, 426, 427, 428, 430, 431, 432, 437, 442, 451, 452, 453, 463, 464, 473, 477, 478, 479, 481, 483, 485, 486, 487, 488, 494, 502, 512, 515, 521, 522, 523, 529, 530, 531, 532, 533, 536, 539, 541, 546, 547, 551, 552, 558, 569, 570, 571, 572, 574, 575, 577, 583, 589, 590, 591, 592, 596, 598, 599, 601, 602, 603, 605, 611, 624, 626, 634, 635, 641, 643, 644, 646, 647, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 676, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692], "togeth": [0, 110, 205, 380, 679, 684, 687, 688], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 25, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 69, 70, 72, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 109, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 146, 147, 148, 149, 150, 151, 152, 153, 158, 159, 160, 164, 165, 166, 167, 168, 169, 173, 174, 176, 177, 180, 181, 182, 197, 198, 203, 210, 211, 212, 213, 215, 222, 234, 237, 240, 242, 245, 247, 248, 252, 253, 254, 256, 268, 269, 270, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 295, 296, 297, 298, 300, 304, 306, 307, 308, 309, 310, 311, 315, 317, 320, 322, 326, 327, 328, 329, 331, 332, 337, 348, 349, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 369, 370, 373, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 409, 410, 411, 412, 415, 416, 417, 423, 426, 427, 428, 430, 431, 435, 439, 442, 443, 444, 451, 452, 454, 455, 456, 457, 461, 462, 463, 464, 466, 468, 473, 474, 475, 478, 479, 480, 484, 486, 487, 489, 495, 515, 517, 519, 520, 521, 522, 523, 525, 526, 529, 530, 534, 535, 536, 537, 539, 540, 541, 543, 546, 547, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 583, 588, 589, 590, 591, 592, 594, 596, 599, 603, 634, 635, 641, 643, 644, 646, 647, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 682, 687, 688, 690, 691, 692], "make": [0, 27, 47, 182, 201, 203, 251, 260, 261, 262, 291, 314, 437, 444, 453, 486, 529, 536, 541, 548, 654, 658, 680, 682, 684, 688], "input": [0, 4, 8, 16, 17, 19, 25, 35, 40, 41, 48, 55, 56, 57, 59, 60, 61, 71, 84, 86, 95, 97, 98, 101, 113, 118, 119, 121, 128, 129, 130, 132, 133, 134, 135, 147, 151, 152, 157, 164, 174, 177, 182, 201, 203, 215, 251, 252, 253, 259, 275, 283, 290, 300, 306, 307, 315, 318, 322, 323, 326, 327, 328, 329, 351, 354, 355, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 398, 399, 400, 401, 410, 415, 416, 421, 427, 435, 444, 453, 491, 515, 528, 600, 634, 635, 636, 644, 645, 647, 654, 657, 659, 665, 666, 672, 680, 681, 684, 687, 688, 689], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 27, 35, 36, 37, 38, 40, 41, 42, 46, 48, 49, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 69, 71, 72, 74, 75, 80, 84, 86, 92, 93, 95, 97, 98, 101, 103, 104, 107, 110, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 141, 142, 147, 151, 152, 156, 159, 162, 164, 165, 167, 168, 171, 174, 176, 182, 201, 203, 205, 207, 208, 209, 210, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 239, 240, 243, 244, 248, 251, 252, 253, 254, 256, 258, 264, 265, 269, 270, 275, 280, 281, 282, 284, 286, 288, 289, 291, 299, 300, 301, 302, 303, 306, 307, 308, 310, 311, 312, 315, 316, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 343, 344, 347, 351, 354, 355, 360, 362, 364, 365, 366, 369, 371, 372, 378, 380, 381, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 410, 415, 416, 420, 422, 425, 426, 427, 428, 432, 435, 436, 437, 439, 444, 453, 454, 472, 473, 474, 475, 476, 478, 480, 483, 484, 485, 486, 487, 490, 491, 494, 495, 513, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 569, 575, 595, 620, 626, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 672, 678, 680, 681, 684, 685, 688, 689], "store": [0, 164, 167, 169, 182, 201, 203, 251, 252, 253, 269, 270, 282, 324, 427, 444, 453, 491, 644, 653, 654, 656, 658, 659, 680, 682, 686, 688, 692], "index": [0, 3, 4, 5, 8, 14, 15, 19, 25, 27, 31, 32, 33, 34, 35, 39, 40, 41, 43, 45, 47, 48, 51, 53, 54, 55, 56, 58, 59, 60, 61, 67, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 145, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 162, 164, 165, 167, 169, 170, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 251, 252, 253, 254, 256, 258, 261, 262, 263, 264, 266, 268, 269, 270, 275, 280, 282, 283, 290, 291, 295, 296, 297, 298, 300, 306, 307, 309, 311, 312, 314, 315, 317, 318, 320, 321, 322, 323, 325, 327, 328, 329, 335, 337, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 360, 361, 362, 364, 365, 369, 371, 372, 373, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 410, 411, 412, 413, 415, 416, 417, 421, 422, 425, 426, 427, 428, 431, 435, 437, 442, 444, 451, 452, 453, 454, 459, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 567, 569, 578, 605, 611, 624, 635, 644, 647, 651, 652, 654, 657, 658, 659, 662, 663, 664, 667, 672, 681, 683, 685, 688, 689, 691, 692], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 190, 191, 194, 195, 197, 198, 201, 203, 204, 205, 207, 208, 209, 210, 213, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 430, 431, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 562, 566, 567, 569, 570, 571, 572, 575, 576, 577, 578, 581, 583, 584, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 602, 603, 605, 610, 611, 613, 614, 616, 617, 618, 619, 620, 623, 624, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 665, 666, 667, 671, 675, 678, 680, 682, 683, 684, 687, 688], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 27, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 67, 69, 71, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 171, 174, 175, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 199, 200, 203, 205, 210, 213, 215, 216, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 237, 238, 240, 242, 243, 246, 248, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 269, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 426, 431, 432, 435, 436, 437, 439, 442, 443, 444, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 569, 577, 578, 581, 583, 595, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 644, 646, 647, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 664, 665, 666, 667, 680, 682, 683, 684, 686, 687, 688, 691, 692], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 25, 29, 31, 32, 33, 34, 35, 39, 42, 43, 44, 45, 46, 47, 49, 51, 53, 56, 57, 60, 62, 67, 69, 71, 73, 74, 75, 80, 81, 82, 85, 87, 88, 89, 90, 93, 94, 96, 99, 102, 103, 104, 105, 106, 114, 115, 116, 118, 123, 124, 125, 131, 136, 137, 140, 145, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 168, 171, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 199, 200, 203, 205, 210, 213, 215, 216, 222, 223, 224, 225, 226, 227, 231, 232, 234, 237, 240, 242, 246, 248, 253, 256, 257, 258, 259, 260, 264, 265, 269, 278, 279, 280, 282, 283, 284, 285, 287, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 308, 309, 311, 314, 316, 317, 318, 320, 323, 324, 325, 326, 330, 331, 335, 342, 343, 344, 347, 348, 349, 353, 356, 357, 358, 359, 361, 363, 367, 370, 371, 372, 373, 382, 383, 384, 388, 389, 390, 391, 397, 402, 403, 408, 409, 410, 411, 412, 417, 418, 419, 421, 422, 426, 431, 432, 436, 437, 439, 442, 443, 444, 454, 455, 456, 457, 461, 462, 463, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 566, 577, 578, 581, 583, 595, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 646, 650, 651, 653, 654, 655, 658, 659, 662, 663, 664, 665, 666, 682, 683, 684, 686, 687, 688, 691, 692], "panda": [0, 4, 5, 11, 15, 22, 35, 46, 50, 57, 60, 66, 69, 74, 75, 78, 79, 92, 102, 103, 104, 105, 116, 118, 123, 125, 131, 136, 147, 148, 159, 164, 168, 171, 173, 175, 184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 215, 222, 227, 246, 248, 253, 281, 300, 324, 326, 328, 343, 344, 360, 371, 372, 389, 391, 397, 402, 410, 411, 413, 427, 431, 432, 468, 552, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 621, 622, 625, 626, 627, 628, 636, 646, 651, 653, 656, 657, 659, 661, 662, 664, 666, 667, 674, 675, 680, 681, 684, 685, 686, 687, 688, 689, 691], "pd": [0, 4, 46, 57, 60, 74, 75, 103, 104, 131, 184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 215, 222, 227, 248, 253, 264, 324, 326, 343, 344, 371, 372, 397, 431, 510, 569, 578, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 653, 682, 683, 686, 688, 691, 692], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 25, 27, 31, 32, 33, 34, 35, 39, 42, 43, 44, 45, 47, 49, 50, 51, 53, 54, 56, 57, 58, 60, 62, 63, 67, 69, 71, 73, 74, 75, 80, 81, 82, 83, 85, 87, 88, 89, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 106, 111, 113, 114, 115, 116, 118, 119, 123, 124, 125, 126, 127, 131, 132, 134, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 168, 171, 175, 177, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 194, 196, 199, 203, 205, 210, 213, 222, 223, 224, 225, 226, 231, 232, 233, 234, 237, 240, 242, 243, 248, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 304, 305, 308, 309, 310, 311, 314, 316, 317, 320, 321, 323, 324, 325, 326, 330, 331, 332, 335, 342, 343, 344, 347, 348, 349, 350, 353, 355, 356, 357, 358, 359, 361, 363, 367, 371, 372, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 397, 398, 400, 402, 403, 404, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 427, 431, 432, 436, 437, 439, 442, 443, 444, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 558, 566, 569, 577, 578, 581, 583, 595, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 644, 646, 647, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 664, 665, 666, 667, 680, 682, 683, 684, 685, 686, 687, 688, 691, 692], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 25, 27, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 63, 67, 69, 71, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 113, 114, 115, 116, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 171, 174, 175, 180, 181, 182, 184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 203, 210, 213, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 237, 240, 242, 243, 246, 248, 253, 254, 257, 258, 259, 260, 264, 265, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 329, 330, 332, 335, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 431, 432, 435, 436, 437, 439, 442, 443, 444, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 483, 485, 487, 488, 492, 493, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 526, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 553, 554, 555, 558, 566, 577, 578, 581, 583, 595, 600, 602, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 644, 646, 647, 651, 652, 654, 662, 663, 664, 665, 667, 682, 683, 684, 686, 687, 688, 691, 692], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 25, 27, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 48, 50, 51, 53, 54, 55, 56, 57, 59, 61, 63, 67, 69, 71, 73, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 111, 113, 114, 115, 116, 118, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 174, 177, 180, 181, 182, 185, 186, 187, 194, 199, 210, 213, 222, 225, 226, 231, 232, 233, 234, 240, 242, 243, 248, 259, 264, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 290, 291, 293, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 315, 317, 320, 321, 322, 325, 327, 329, 330, 332, 335, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 371, 372, 381, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 435, 436, 437, 439, 442, 443, 444, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 481, 486, 504, 505, 506, 507, 540, 541, 547, 550, 551, 554, 555, 558, 569, 577, 578, 581, 583, 595, 600, 602, 607, 608, 609, 610, 613, 614, 616, 617, 620, 623, 627, 629, 630, 631, 632, 633, 636, 644, 646, 647, 651, 652, 663, 664, 665, 682, 683, 684, 686, 687, 688, 690, 691], "na": [0, 4, 8, 12, 13, 15, 29, 31, 32, 33, 34, 35, 39, 40, 41, 45, 47, 48, 51, 53, 55, 59, 61, 74, 75, 81, 82, 84, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99, 101, 103, 104, 109, 111, 113, 114, 115, 119, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 145, 146, 150, 151, 152, 153, 168, 174, 175, 176, 177, 180, 181, 213, 215, 275, 278, 279, 281, 287, 289, 293, 295, 296, 297, 298, 300, 304, 306, 307, 311, 314, 315, 317, 320, 322, 323, 325, 326, 327, 329, 330, 343, 344, 348, 349, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 371, 372, 379, 381, 382, 383, 385, 387, 388, 391, 392, 394, 395, 396, 399, 400, 401, 408, 409, 412, 415, 416, 417, 426, 431, 435, 436, 437, 439, 442, 443, 454, 461, 463, 466, 467, 473, 474, 478, 479, 483, 484, 489, 515, 516, 519, 520, 529, 536, 537, 541, 542, 543, 553, 559, 560, 566, 568, 569, 570, 571, 572, 573, 579, 580, 581, 583, 588, 589, 590, 591, 592, 594, 596, 599, 603, 620, 646, 652, 654, 666, 667, 682, 683, 687, 688, 689, 692], "properti": [1, 2, 5, 22, 26, 46, 47, 66, 67, 68, 85, 100, 143, 145, 178, 179, 184, 185, 186, 187, 189, 190, 192, 193, 194, 196, 199, 200, 219, 228, 229, 230, 235, 236, 241, 250, 255, 257, 265, 266, 267, 271, 289, 299, 312, 313, 314, 330, 335, 336, 338, 339, 340, 341, 352, 353, 366, 368, 374, 375, 376, 406, 408, 413, 414, 438, 440, 441, 445, 446, 447, 448, 449, 450, 458, 459, 460, 557, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 676, 682], "other": [3, 8, 14, 17, 21, 40, 41, 42, 48, 49, 55, 59, 61, 73, 79, 84, 86, 87, 95, 96, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 141, 147, 151, 152, 165, 167, 169, 174, 176, 181, 205, 210, 211, 222, 234, 239, 248, 269, 275, 282, 284, 287, 292, 294, 306, 307, 308, 315, 316, 322, 327, 329, 351, 354, 356, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 405, 410, 415, 416, 428, 435, 437, 443, 454, 463, 473, 478, 510, 526, 529, 535, 541, 569, 647, 657, 680, 682, 685, 688, 691, 692], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 29, 30, 31, 32, 33, 34, 49, 50, 72, 81, 82, 88, 89, 90, 91, 94, 110, 114, 115, 138, 146, 150, 153, 159, 161, 163, 164, 165, 167, 168, 169, 180, 203, 256, 278, 279, 281, 284, 293, 337, 348, 349, 357, 358, 359, 361, 380, 382, 383, 388, 391, 409, 410, 412, 417, 424, 427, 428, 431, 442, 552, 563, 564, 565, 570, 571, 572, 585, 586, 587, 589, 590, 591, 592, 595, 596, 599, 603, 626, 636, 638, 639, 640, 642, 647, 653, 654, 655, 656, 657, 658, 659, 660, 688], "determin": [3, 16, 44, 60, 138, 281, 328, 477, 520, 536, 541, 654, 666, 692], "two": [3, 14, 49, 96, 111, 116, 117, 122, 123, 210, 222, 237, 248, 270, 292, 316, 384, 393, 454, 480, 526, 535, 574, 652, 654, 661, 662, 663, 664, 680, 684, 688], "contain": [3, 4, 14, 16, 35, 36, 37, 38, 45, 47, 49, 50, 60, 64, 65, 71, 73, 96, 118, 123, 136, 141, 156, 157, 162, 164, 169, 176, 177, 195, 197, 207, 208, 209, 212, 220, 221, 235, 239, 243, 244, 245, 252, 263, 266, 268, 270, 287, 300, 301, 302, 303, 305, 311, 312, 314, 316, 318, 324, 328, 330, 333, 334, 342, 393, 402, 405, 420, 421, 425, 427, 437, 439, 451, 462, 473, 476, 482, 488, 491, 494, 515, 526, 531, 532, 533, 535, 536, 541, 542, 547, 558, 577, 602, 634, 635, 645, 654, 656, 657, 659, 663, 672, 673, 680, 682, 687, 688, 690, 692], "same": [3, 21, 35, 45, 49, 50, 69, 72, 74, 75, 87, 103, 104, 120, 122, 124, 125, 132, 136, 147, 164, 169, 176, 181, 183, 188, 238, 240, 252, 270, 282, 284, 300, 305, 311, 316, 337, 343, 344, 355, 356, 371, 372, 386, 390, 391, 398, 402, 410, 427, 443, 462, 466, 473, 489, 494, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 528, 533, 542, 600, 626, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 654, 657, 662, 663, 665, 680, 682, 685, 687, 688, 690, 691, 692], "element": [3, 7, 8, 12, 13, 18, 25, 39, 40, 41, 42, 45, 48, 49, 50, 51, 55, 59, 61, 69, 73, 74, 75, 84, 86, 95, 96, 97, 98, 101, 103, 104, 106, 109, 113, 119, 120, 121, 124, 128, 129, 130, 132, 133, 134, 135, 139, 140, 141, 145, 150, 151, 152, 174, 177, 180, 204, 210, 211, 222, 238, 239, 261, 274, 275, 278, 279, 287, 290, 304, 306, 307, 308, 315, 316, 317, 322, 327, 329, 342, 343, 344, 351, 354, 362, 364, 365, 369, 370, 371, 372, 373, 379, 381, 385, 386, 387, 390, 394, 395, 396, 398, 399, 400, 401, 404, 405, 408, 412, 415, 416, 435, 439, 442, 446, 448, 449, 450, 464, 465, 466, 467, 469, 470, 473, 475, 478, 479, 482, 483, 490, 500, 501, 502, 503, 509, 510, 511, 514, 515, 516, 526, 531, 535, 536, 538, 541, 542, 641, 643, 654, 663, 680, 682, 685, 688], "out": [3, 47, 91, 156, 159, 164, 165, 168, 243, 299, 314, 330, 420, 427, 428, 431, 466, 536, 541, 578, 644, 651, 658, 659, 680, 684, 688, 689], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 23, 24, 25, 27, 29, 31, 32, 33, 34, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 69, 70, 73, 74, 75, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 92, 94, 96, 101, 103, 104, 106, 107, 108, 114, 115, 116, 120, 122, 123, 125, 127, 131, 136, 138, 139, 140, 142, 146, 147, 148, 149, 150, 153, 156, 158, 159, 160, 164, 165, 166, 167, 168, 169, 170, 173, 176, 177, 180, 181, 182, 197, 203, 204, 206, 211, 215, 223, 224, 225, 226, 227, 231, 232, 233, 240, 242, 243, 245, 254, 256, 264, 268, 270, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 290, 291, 295, 296, 297, 298, 308, 310, 311, 314, 315, 316, 317, 319, 320, 326, 327, 328, 329, 330, 342, 343, 344, 348, 349, 351, 354, 356, 357, 358, 359, 360, 361, 363, 369, 371, 372, 377, 378, 382, 383, 384, 386, 388, 389, 391, 393, 397, 402, 404, 409, 410, 411, 412, 417, 420, 423, 427, 428, 430, 431, 439, 442, 443, 451, 454, 455, 456, 457, 461, 463, 464, 465, 468, 475, 478, 483, 484, 485, 486, 489, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 523, 526, 529, 535, 536, 541, 542, 552, 561, 569, 582, 613, 614, 616, 617, 618, 619, 634, 635, 644, 646, 647, 654, 657, 658, 659, 661, 662, 663, 664, 665, 682, 683, 685, 687, 688, 689, 691], "ha": [3, 19, 56, 57, 63, 69, 96, 175, 190, 215, 248, 261, 283, 323, 326, 330, 332, 479, 484, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 553, 613, 659, 667, 680, 682, 685, 687, 688, 690, 691], "call": [3, 11, 17, 27, 60, 122, 123, 136, 165, 176, 216, 281, 282, 291, 328, 402, 428, 455, 494, 533, 647, 671, 673, 678, 680, 682, 687, 688, 690], "otherwis": [3, 19, 43, 49, 50, 132, 139, 159, 165, 240, 254, 264, 281, 283, 309, 316, 325, 384, 398, 404, 413, 428, 468, 473, 654, 657, 666, 681, 682], "nan_as_nul": [4, 57, 58, 70, 99, 203, 215, 225, 270, 326, 367, 437, 646, 691], "gpu": [4, 16, 17, 93, 118, 270, 282, 299, 376, 635, 654, 660, 674, 680, 681, 682, 684, 688, 689, 690, 692], "iter": [4, 11, 14, 17, 73, 76, 96, 110, 260, 261, 262, 270, 380, 595, 656, 657, 672, 687, 688, 689], "dict": [4, 11, 14, 16, 17, 21, 36, 37, 38, 53, 60, 64, 65, 73, 92, 118, 123, 125, 132, 141, 165, 207, 208, 209, 213, 220, 221, 239, 270, 284, 301, 302, 303, 320, 328, 333, 334, 355, 391, 398, 405, 428, 486, 548, 558, 569, 577, 602, 646, 654, 657, 659, 665, 680, 688, 691], "can": [4, 14, 16, 25, 35, 36, 43, 50, 53, 54, 60, 72, 73, 83, 93, 96, 106, 110, 118, 122, 125, 127, 131, 132, 136, 141, 150, 164, 168, 180, 207, 239, 264, 287, 290, 300, 301, 309, 310, 320, 321, 325, 328, 337, 350, 363, 380, 388, 391, 393, 397, 398, 402, 405, 412, 427, 431, 437, 439, 442, 463, 466, 473, 486, 488, 494, 510, 512, 515, 521, 530, 533, 536, 541, 552, 558, 575, 577, 583, 595, 602, 626, 634, 635, 647, 651, 654, 656, 657, 659, 663, 665, 675, 676, 680, 681, 682, 684, 685, 686, 687, 688, 690, 691, 692], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 107, 109, 110, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 162, 164, 165, 172, 174, 175, 176, 177, 181, 198, 224, 242, 244, 247, 256, 265, 269, 452, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 567, 569, 570, 571, 572, 575, 577, 583, 589, 590, 591, 592, 595, 596, 599, 600, 602, 603, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 657, 660, 664, 665, 666, 667, 671, 672, 673, 676, 678, 680, 681, 683, 685, 686, 687, 689, 691, 692], "constant": [4, 282, 635, 646], "frame": [4, 8, 36, 37, 38, 40, 41, 42, 48, 55, 59, 61, 63, 64, 65, 69, 84, 86, 91, 93, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 139, 140, 147, 148, 151, 152, 156, 157, 160, 166, 168, 174, 207, 208, 209, 220, 221, 259, 275, 301, 302, 303, 306, 307, 308, 315, 322, 327, 329, 332, 333, 334, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 404, 410, 415, 416, 420, 421, 423, 430, 435, 651, 657, 679, 691], "Will": [4, 165, 169, 270, 428, 647], "rangeindex": [4, 69, 142, 145, 147, 169, 270, 347, 408, 410, 647, 663, 680], "inform": [4, 15, 19, 42, 60, 69, 164, 281, 283, 308, 328, 427, 462, 463, 635, 657, 665, 680, 682, 688, 690, 691], "part": [4, 169, 526, 535, 578, 683], "provid": [4, 16, 21, 22, 35, 53, 66, 123, 131, 132, 136, 159, 166, 175, 203, 216, 256, 260, 261, 264, 269, 270, 284, 300, 320, 397, 398, 402, 430, 454, 466, 487, 530, 546, 547, 566, 644, 646, 657, 667, 672, 675, 680, 681, 682, 683, 684, 686, 687, 688, 691, 692], "label": [4, 9, 10, 11, 14, 21, 43, 44, 49, 51, 60, 68, 70, 73, 85, 93, 102, 122, 123, 126, 136, 142, 147, 175, 176, 178, 179, 201, 202, 203, 218, 237, 240, 251, 254, 255, 256, 261, 263, 264, 270, 276, 277, 284, 309, 316, 317, 318, 328, 336, 353, 388, 392, 402, 410, 440, 441, 453, 468, 557, 644, 654, 657, 662, 667, 672, 680, 687, 689], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 25, 29, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 61, 62, 63, 67, 69, 71, 72, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 164, 168, 171, 174, 175, 177, 180, 181, 186, 189, 192, 196, 199, 215, 216, 224, 225, 226, 227, 231, 232, 238, 240, 242, 243, 248, 253, 256, 257, 258, 259, 260, 261, 265, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 342, 343, 344, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 369, 371, 372, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 427, 431, 432, 435, 436, 437, 439, 442, 443, 444, 448, 449, 450, 454, 455, 456, 457, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 567, 569, 570, 571, 572, 574, 575, 577, 578, 581, 583, 589, 590, 591, 592, 595, 596, 599, 600, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 644, 646, 647, 650, 651, 653, 654, 655, 658, 659, 662, 663, 664, 665, 666, 667, 680, 682, 683, 684, 685, 686, 687, 688, 691, 692], "n": [4, 15, 44, 51, 63, 81, 82, 102, 105, 120, 136, 150, 155, 159, 180, 183, 188, 195, 256, 270, 285, 294, 317, 318, 332, 348, 349, 370, 373, 386, 402, 412, 419, 442, 468, 475, 476, 482, 491, 505, 511, 516, 519, 521, 522, 523, 529, 536, 537, 538, 541, 543, 583, 593, 598, 601, 605, 611, 624, 632, 641, 643, 654, 682], "type": [4, 11, 15, 21, 27, 35, 46, 49, 50, 56, 57, 60, 63, 72, 74, 75, 87, 93, 96, 103, 104, 110, 114, 115, 116, 120, 124, 125, 127, 132, 136, 153, 154, 165, 168, 171, 181, 183, 188, 198, 215, 223, 224, 225, 226, 227, 231, 232, 234, 238, 240, 246, 247, 259, 264, 269, 270, 281, 284, 291, 300, 305, 316, 323, 326, 332, 337, 343, 344, 355, 356, 371, 372, 380, 382, 383, 386, 390, 391, 398, 402, 417, 418, 428, 431, 432, 437, 443, 444, 452, 454, 473, 515, 536, 539, 541, 566, 575, 595, 635, 637, 638, 639, 640, 641, 642, 643, 644, 654, 656, 657, 665, 666, 671, 675, 681, 682, 683, 687, 688, 689, 691], "forc": [4, 165, 428, 657, 682], "onli": [4, 5, 7, 8, 19, 25, 27, 35, 39, 40, 41, 43, 44, 45, 47, 48, 50, 55, 59, 60, 61, 69, 72, 73, 79, 84, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 113, 119, 120, 121, 123, 127, 128, 129, 130, 131, 133, 134, 135, 147, 148, 151, 152, 159, 164, 165, 173, 174, 176, 178, 179, 181, 212, 216, 223, 224, 225, 226, 227, 231, 232, 254, 255, 274, 275, 282, 283, 290, 291, 300, 306, 307, 309, 311, 314, 315, 322, 327, 328, 329, 337, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 381, 385, 386, 387, 389, 393, 394, 395, 396, 397, 399, 400, 401, 410, 411, 415, 416, 427, 428, 435, 436, 440, 441, 443, 454, 472, 478, 479, 484, 485, 489, 515, 520, 523, 536, 541, 544, 545, 549, 566, 567, 570, 571, 572, 575, 581, 589, 590, 591, 592, 596, 599, 603, 635, 644, 647, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 671, 675, 680, 682, 685, 688, 690, 691], "singl": [4, 8, 11, 14, 15, 18, 29, 40, 41, 43, 48, 50, 55, 59, 60, 61, 67, 71, 79, 84, 85, 86, 95, 97, 98, 101, 102, 105, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 165, 174, 175, 264, 275, 306, 307, 309, 315, 322, 327, 328, 329, 335, 342, 351, 353, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 428, 435, 473, 481, 528, 530, 575, 654, 656, 658, 659, 660, 667, 680, 682, 684, 685, 687, 688], "allow": [4, 15, 21, 49, 50, 69, 93, 123, 136, 164, 165, 270, 281, 284, 316, 402, 427, 428, 644, 657, 658, 659, 661, 662, 663, 664, 680, 682, 686, 688, 690, 692], "convert": [4, 21, 56, 57, 58, 70, 71, 99, 122, 126, 131, 141, 142, 158, 160, 162, 165, 166, 168, 169, 170, 171, 203, 215, 239, 244, 246, 259, 260, 261, 262, 264, 270, 284, 323, 326, 355, 367, 388, 392, 397, 405, 422, 423, 425, 426, 428, 430, 431, 432, 472, 496, 497, 512, 518, 544, 545, 549, 551, 553, 626, 645, 656, 657, 665, 666, 680, 685, 689, 691], "np": [4, 17, 29, 35, 45, 57, 69, 70, 74, 75, 92, 99, 103, 104, 118, 127, 131, 166, 168, 203, 215, 225, 231, 270, 300, 305, 326, 343, 344, 355, 367, 371, 372, 397, 430, 431, 437, 478, 644, 646, 654, 666, 686, 688, 691], "null": [4, 12, 13, 15, 16, 17, 29, 31, 32, 33, 34, 43, 45, 47, 53, 57, 60, 69, 70, 74, 75, 81, 82, 88, 89, 90, 94, 99, 103, 104, 114, 115, 118, 126, 131, 139, 146, 148, 150, 153, 159, 165, 168, 171, 180, 203, 211, 212, 213, 215, 270, 278, 279, 281, 293, 295, 296, 297, 298, 309, 311, 314, 320, 325, 326, 330, 343, 344, 348, 349, 357, 358, 359, 361, 367, 371, 372, 374, 375, 376, 382, 383, 392, 397, 404, 409, 411, 412, 413, 417, 422, 428, 431, 432, 438, 442, 454, 461, 463, 464, 468, 473, 482, 515, 561, 575, 581, 582, 583, 646, 654, 666, 680, 689], "leav": [4, 57, 70, 91, 203, 215, 270, 326, 651, 666, 688], "build": [4, 252, 688], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 29, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 59, 60, 61, 62, 63, 67, 69, 71, 73, 74, 75, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 110, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 168, 171, 174, 175, 177, 180, 181, 257, 260, 265, 275, 276, 277, 278, 279, 283, 284, 290, 295, 296, 297, 298, 300, 306, 307, 308, 309, 314, 315, 316, 320, 322, 327, 329, 331, 332, 335, 343, 344, 348, 349, 351, 353, 354, 356, 357, 358, 361, 362, 364, 365, 367, 369, 371, 372, 380, 381, 382, 383, 385, 387, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 404, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 421, 432, 435, 442, 443, 569, 578, 595, 600, 646, 649, 650, 651, 655, 658, 659, 665, 667, 682, 683, 684, 685, 687, 688, 691, 692], "kei": [4, 14, 60, 63, 73, 79, 93, 132, 142, 147, 155, 164, 171, 176, 198, 202, 217, 234, 242, 247, 254, 264, 270, 328, 332, 398, 410, 419, 427, 432, 452, 486, 555, 557, 562, 578, 584, 656, 659, 665, 680, 682, 683, 687, 688], "val": [4, 63, 155, 171, 332, 419, 432, 578, 682], "float": [4, 8, 40, 41, 46, 48, 55, 59, 61, 63, 74, 75, 84, 86, 88, 89, 93, 94, 95, 97, 98, 101, 103, 104, 113, 116, 117, 119, 121, 122, 128, 129, 130, 133, 134, 135, 136, 151, 152, 155, 165, 171, 174, 201, 223, 224, 225, 226, 227, 231, 232, 254, 275, 285, 294, 306, 307, 315, 322, 327, 329, 332, 343, 344, 351, 354, 357, 358, 361, 362, 364, 365, 369, 371, 372, 381, 384, 385, 387, 388, 394, 395, 396, 399, 400, 401, 402, 415, 416, 419, 428, 432, 435, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 570, 571, 572, 574, 589, 590, 591, 592, 596, 599, 603, 654, 661, 662, 663, 664, 665, 666, 680, 682, 683, 686, 688, 689], "i": [4, 14, 16, 17, 50, 54, 63, 83, 93, 116, 117, 120, 131, 155, 171, 321, 332, 350, 384, 386, 397, 419, 432, 466, 482, 483, 490, 538, 542, 636, 650, 680, 682, 684, 688, 689], "10": [4, 7, 12, 13, 21, 31, 32, 33, 34, 35, 42, 43, 46, 49, 50, 62, 63, 67, 69, 81, 82, 85, 87, 88, 89, 90, 93, 94, 99, 114, 115, 116, 118, 123, 124, 125, 126, 136, 137, 139, 142, 145, 146, 150, 153, 154, 155, 165, 171, 180, 181, 205, 215, 227, 238, 242, 246, 257, 265, 269, 274, 278, 279, 282, 284, 295, 296, 297, 298, 300, 305, 308, 309, 316, 325, 326, 331, 332, 335, 347, 348, 349, 353, 356, 357, 358, 359, 361, 367, 382, 383, 388, 389, 390, 391, 392, 393, 402, 403, 404, 408, 409, 412, 417, 418, 419, 426, 428, 431, 432, 442, 443, 456, 457, 461, 462, 463, 476, 490, 496, 497, 502, 507, 517, 525, 578, 610, 613, 616, 617, 629, 630, 631, 633, 644, 647, 653, 665, 681, 684, 688, 689, 691, 692], "rang": [4, 14, 16, 43, 50, 63, 67, 92, 93, 126, 155, 169, 171, 269, 309, 332, 335, 392, 393, 419, 432, 454, 486, 644, 650, 654, 657, 682, 684, 688, 691, 692], "5": [4, 8, 9, 10, 14, 15, 20, 29, 31, 32, 33, 34, 35, 39, 42, 43, 44, 49, 50, 51, 53, 56, 63, 67, 69, 71, 74, 75, 85, 87, 89, 90, 93, 103, 104, 106, 116, 117, 118, 119, 123, 125, 126, 127, 131, 136, 137, 139, 140, 142, 145, 146, 155, 157, 158, 175, 181, 185, 186, 187, 191, 199, 210, 222, 224, 227, 238, 242, 248, 259, 264, 275, 276, 277, 280, 281, 282, 285, 289, 292, 293, 295, 296, 297, 298, 300, 304, 305, 308, 309, 310, 316, 317, 320, 325, 332, 335, 342, 343, 344, 347, 353, 356, 358, 359, 363, 370, 371, 372, 373, 384, 385, 391, 392, 397, 402, 403, 404, 408, 409, 411, 419, 421, 436, 437, 439, 443, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 469, 471, 474, 475, 476, 477, 479, 487, 488, 494, 500, 505, 532, 533, 538, 539, 547, 550, 551, 558, 574, 577, 578, 581, 583, 600, 602, 607, 608, 609, 610, 613, 614, 616, 617, 620, 627, 636, 644, 647, 651, 661, 662, 663, 664, 665, 667, 680, 682, 683, 684, 686, 687, 688, 691, 692], "insert": [4, 63, 127, 139, 155, 332, 393, 404, 419, 540, 672, 680, 689], "11": [4, 43, 50, 51, 54, 63, 83, 85, 93, 126, 131, 137, 139, 142, 145, 171, 242, 257, 265, 309, 321, 325, 332, 347, 350, 353, 392, 393, 397, 403, 404, 408, 426, 432, 471, 476, 512, 610, 613, 650, 654, 655, 658, 659, 665, 682, 684, 687, 690, 691], "12": [4, 31, 32, 33, 34, 35, 39, 43, 85, 93, 126, 137, 139, 142, 145, 171, 183, 185, 186, 187, 188, 191, 193, 194, 199, 200, 257, 265, 292, 294, 295, 296, 297, 298, 300, 309, 312, 325, 347, 353, 392, 393, 403, 404, 408, 426, 432, 476, 485, 491, 496, 497, 552, 578, 583, 607, 608, 609, 610, 613, 618, 619, 622, 623, 627, 628, 629, 630, 631, 632, 633, 665, 680, 682, 684, 688], "13": [4, 43, 54, 83, 93, 126, 139, 142, 155, 292, 294, 309, 312, 321, 325, 347, 350, 392, 393, 404, 419, 426, 476, 629, 630, 631, 633, 682], "14": [4, 15, 69, 93, 99, 126, 139, 142, 155, 312, 325, 347, 367, 392, 404, 419, 476, 629, 630, 631, 633, 682, 684, 688], "via": [4, 35, 136, 164, 300, 402, 427, 463, 674, 680, 682, 684, 687], "numpi": [4, 17, 19, 21, 29, 35, 58, 69, 74, 75, 99, 103, 104, 118, 131, 136, 160, 166, 170, 179, 201, 203, 215, 251, 269, 270, 282, 283, 284, 300, 326, 343, 344, 367, 371, 372, 397, 402, 423, 430, 441, 444, 453, 644, 646, 657, 665, 688, 689, 691, 692], "datetim": [4, 35, 46, 116, 118, 126, 131, 165, 182, 184, 189, 192, 195, 196, 200, 300, 312, 392, 397, 428, 444, 606, 612, 621, 625, 628, 650, 654, 655, 658, 659, 661, 662, 664, 665, 680, 682, 686, 687, 688, 689, 692], "timedelta": [4, 116, 131, 397, 445, 629, 686, 688], "t0": 4, "strptime": [4, 118, 665, 682], "2018": [4, 46, 54, 83, 118, 126, 240, 321, 350, 392, 618, 619, 650, 654, 655, 658, 659, 682], "07": [4, 118, 122, 126, 131, 185, 186, 187, 199, 392, 397, 607, 608, 609, 610, 620, 627, 682], "00": [4, 7, 35, 45, 62, 69, 74, 75, 103, 104, 122, 126, 131, 182, 183, 188, 189, 191, 192, 194, 195, 196, 274, 300, 312, 331, 343, 344, 371, 372, 392, 397, 444, 558, 577, 602, 605, 611, 612, 621, 623, 624, 625, 629, 630, 631, 632, 633, 650, 654, 655, 658, 659, 682, 691, 692], "y": [4, 15, 16, 17, 43, 118, 125, 145, 159, 200, 242, 309, 388, 391, 408, 476, 512, 526, 535, 554, 626, 628, 665, 680, 682, 685, 688], "m": [4, 118, 126, 193, 392, 486, 512, 622, 626, 665, 682], "d": [4, 8, 15, 25, 35, 40, 41, 43, 48, 50, 55, 59, 61, 84, 85, 86, 95, 97, 98, 101, 113, 118, 119, 121, 125, 128, 129, 130, 133, 134, 135, 136, 139, 142, 147, 151, 152, 156, 159, 174, 175, 183, 184, 185, 186, 187, 188, 195, 199, 243, 264, 275, 289, 290, 300, 305, 306, 307, 309, 315, 322, 327, 329, 351, 353, 354, 362, 364, 365, 369, 381, 385, 387, 388, 391, 393, 394, 395, 396, 399, 400, 401, 402, 404, 410, 415, 416, 420, 426, 435, 437, 454, 471, 473, 474, 476, 478, 484, 490, 512, 515, 531, 550, 551, 605, 606, 607, 608, 609, 611, 624, 626, 627, 644, 665, 667, 680, 682, 684, 688, 691], "h": [4, 110, 183, 188, 189, 195, 380, 476, 515, 605, 611, 612, 624, 680], "s": [4, 7, 9, 10, 14, 19, 21, 25, 27, 31, 32, 33, 34, 35, 42, 43, 44, 47, 49, 56, 60, 67, 73, 81, 82, 91, 92, 93, 96, 102, 111, 116, 117, 124, 125, 132, 136, 139, 140, 147, 149, 156, 165, 169, 176, 183, 188, 195, 196, 224, 237, 240, 274, 276, 277, 282, 283, 284, 285, 287, 289, 290, 291, 295, 296, 297, 298, 300, 305, 308, 309, 310, 312, 314, 316, 317, 318, 326, 328, 335, 342, 348, 349, 355, 363, 373, 384, 390, 391, 398, 402, 404, 410, 411, 413, 420, 428, 437, 444, 455, 456, 457, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 566, 577, 578, 583, 595, 602, 605, 610, 611, 613, 614, 616, 617, 619, 623, 624, 625, 629, 630, 631, 632, 633, 636, 644, 646, 647, 650, 651, 652, 654, 657, 665, 666, 680, 682, 683, 684, 686, 688, 690, 691, 692], "id": [4, 16, 581, 583, 634, 635, 682, 685], "arang": [4, 17, 682, 688], "second": [4, 43, 96, 110, 126, 141, 165, 183, 188, 194, 195, 239, 258, 309, 312, 380, 392, 405, 428, 445, 448, 605, 611, 623, 624, 629, 631, 654, 657, 665, 680, 682], "x": [4, 5, 15, 16, 17, 43, 72, 145, 159, 173, 242, 264, 281, 282, 309, 337, 355, 408, 454, 526, 535, 538, 540, 554, 558, 577, 578, 595, 602, 626, 644, 654, 658, 659, 682, 683, 685, 687, 688], "01": [4, 35, 126, 131, 132, 182, 184, 185, 186, 187, 189, 192, 193, 195, 196, 199, 200, 300, 392, 397, 398, 444, 512, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 632, 650, 654, 655, 658, 659, 682, 685, 686, 691], "02": [4, 122, 126, 131, 184, 185, 186, 187, 189, 192, 193, 196, 199, 312, 392, 397, 444, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 621, 622, 625, 627, 650, 654, 655, 658, 659, 665, 682, 685], "03": [4, 46, 126, 132, 184, 185, 186, 187, 193, 199, 312, 392, 398, 444, 606, 607, 608, 609, 610, 614, 616, 617, 622, 626, 627, 632, 665, 682], "04": [4, 45, 54, 74, 75, 83, 103, 104, 122, 126, 131, 185, 186, 187, 195, 199, 321, 343, 344, 350, 371, 372, 392, 397, 444, 605, 607, 608, 609, 610, 611, 624, 627, 665], "row": [4, 9, 10, 12, 13, 14, 15, 17, 29, 31, 32, 33, 34, 39, 43, 44, 45, 50, 51, 54, 60, 63, 67, 68, 69, 71, 83, 85, 93, 96, 102, 105, 106, 122, 126, 136, 138, 147, 149, 150, 155, 156, 157, 159, 164, 167, 169, 177, 180, 201, 203, 211, 212, 243, 251, 262, 276, 277, 278, 279, 295, 296, 297, 298, 304, 309, 310, 311, 317, 321, 328, 332, 335, 336, 350, 353, 388, 392, 402, 410, 412, 419, 420, 421, 427, 442, 453, 454, 464, 465, 469, 473, 478, 480, 482, 484, 491, 515, 536, 541, 557, 567, 575, 578, 593, 635, 645, 650, 653, 654, 656, 657, 658, 659, 660, 662, 682, 683, 684, 685, 687, 688, 691], "tupl": [4, 11, 15, 26, 60, 91, 93, 110, 127, 141, 143, 205, 235, 239, 260, 261, 262, 264, 266, 280, 281, 328, 380, 393, 405, 406, 595, 636, 651, 654, 657, 658, 659, 665, 680, 682], "cat": [4, 132, 177, 318, 355, 398, 454, 455, 456, 457, 461, 462, 463, 479, 483, 491, 519, 537, 542, 543, 646, 672, 675, 682], "jump": [4, 127], "dog": [4, 73, 132, 177, 355, 398, 454, 478, 516, 682], "dig": 4, "7": [4, 12, 13, 14, 15, 31, 32, 33, 34, 35, 42, 43, 50, 63, 67, 81, 82, 85, 88, 89, 94, 114, 115, 116, 125, 126, 131, 132, 139, 146, 150, 153, 154, 157, 175, 180, 185, 187, 191, 224, 227, 278, 279, 295, 296, 297, 298, 300, 308, 309, 332, 335, 348, 349, 353, 357, 358, 361, 363, 382, 383, 391, 392, 397, 398, 404, 409, 412, 417, 418, 421, 437, 439, 442, 464, 475, 476, 532, 581, 583, 607, 608, 609, 610, 613, 614, 616, 617, 620, 627, 644, 647, 667, 682, 684, 686, 688, 691, 692], "cow": [4, 43, 309, 310, 342], "moo": 4, "occasion": 4, "pdf": [4, 57, 168, 682, 686], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 25, 27, 31, 32, 33, 34, 35, 39, 40, 41, 43, 48, 50, 51, 53, 55, 56, 57, 59, 61, 62, 67, 69, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 94, 95, 97, 98, 99, 101, 106, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 168, 174, 175, 180, 181, 203, 216, 234, 243, 254, 257, 258, 259, 260, 264, 265, 275, 276, 277, 278, 279, 284, 289, 290, 291, 295, 296, 297, 298, 300, 306, 307, 309, 315, 320, 322, 323, 324, 325, 327, 329, 331, 335, 347, 348, 349, 351, 353, 354, 356, 357, 358, 361, 362, 364, 365, 367, 369, 380, 381, 382, 383, 385, 387, 388, 390, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 408, 409, 410, 412, 415, 416, 417, 418, 420, 422, 426, 435, 436, 437, 442, 443, 454, 473, 474, 476, 479, 484, 488, 489, 494, 500, 515, 528, 533, 542, 550, 551, 554, 555, 558, 577, 578, 581, 583, 595, 600, 602, 644, 646, 647, 651, 652, 654, 662, 663, 664, 667, 682, 683, 684, 686, 687, 688, 691, 692], "from_panda": [4, 222, 227, 248, 264, 569, 578, 682, 683, 685, 686, 692], "attribut": [4, 35, 141, 176, 203, 239, 252, 261, 270, 300, 389, 405, 457, 662, 663, 664, 672, 680, 682], "method": [4, 14, 18, 23, 24, 28, 36, 37, 52, 53, 60, 62, 69, 72, 107, 116, 117, 120, 122, 125, 126, 131, 136, 141, 147, 176, 202, 203, 207, 208, 217, 239, 252, 254, 264, 270, 282, 285, 286, 288, 289, 292, 301, 302, 310, 319, 320, 328, 331, 337, 352, 378, 384, 386, 388, 391, 392, 397, 402, 405, 410, 413, 414, 463, 466, 477, 500, 501, 502, 503, 509, 510, 511, 514, 526, 535, 552, 569, 574, 581, 583, 600, 634, 647, 653, 654, 657, 658, 659, 660, 665, 666, 671, 672, 673, 676, 680, 683, 685, 687, 688, 689, 691, 692], "iterrow": 4, "itertupl": 4, "to_dict": [4, 270], "transpos": [5, 271, 645, 672, 684, 689], "new": [5, 8, 9, 10, 14, 21, 27, 36, 37, 40, 41, 48, 50, 55, 59, 61, 64, 84, 86, 95, 97, 98, 101, 113, 119, 121, 122, 123, 124, 127, 128, 129, 130, 133, 134, 135, 136, 142, 151, 152, 155, 156, 157, 164, 173, 174, 207, 208, 210, 220, 222, 234, 237, 238, 240, 243, 275, 276, 277, 280, 284, 289, 291, 301, 302, 305, 306, 307, 315, 322, 327, 329, 333, 351, 354, 362, 364, 365, 369, 370, 373, 381, 385, 387, 388, 390, 393, 394, 395, 396, 399, 400, 401, 402, 415, 416, 419, 420, 421, 427, 435, 454, 455, 462, 463, 491, 495, 531, 540, 680, 682, 685, 688, 690], "ncol": [5, 173], "nrow": [5, 173, 654, 682, 688], "self": [5, 14, 60, 87, 110, 116, 139, 157, 164, 173, 181, 222, 248, 271, 280, 285, 328, 356, 380, 393, 404, 421, 427, 434, 443, 483, 542, 680], "note": [5, 11, 12, 13, 14, 15, 21, 27, 29, 35, 39, 44, 47, 50, 56, 60, 73, 79, 81, 82, 88, 90, 93, 94, 96, 102, 105, 114, 115, 116, 123, 125, 126, 136, 146, 147, 148, 150, 153, 159, 160, 165, 167, 172, 173, 177, 180, 216, 278, 279, 281, 282, 284, 287, 291, 293, 294, 300, 305, 310, 314, 328, 348, 349, 355, 357, 359, 361, 382, 383, 389, 391, 392, 402, 409, 410, 411, 412, 417, 423, 428, 442, 447, 468, 478, 479, 483, 484, 489, 500, 520, 526, 529, 535, 536, 541, 552, 553, 554, 570, 571, 572, 575, 583, 589, 590, 591, 592, 596, 599, 600, 603, 626, 636, 644, 645, 646, 653, 654, 657, 658, 659, 662, 665, 666, 680, 681, 682, 687, 688, 689, 690, 691, 692], "differ": [5, 11, 39, 43, 49, 50, 53, 60, 79, 102, 105, 116, 122, 123, 125, 147, 148, 164, 169, 173, 203, 264, 304, 309, 316, 320, 328, 388, 389, 391, 410, 411, 427, 468, 498, 499, 526, 528, 536, 553, 567, 569, 570, 571, 572, 583, 589, 590, 591, 592, 595, 596, 599, 603, 635, 646, 651, 657, 661, 662, 663, 664, 666, 671, 680, 683, 688, 691, 692], "Not": [5, 8, 11, 15, 40, 41, 48, 50, 55, 59, 61, 84, 86, 89, 92, 95, 97, 98, 101, 109, 113, 119, 121, 122, 123, 128, 129, 130, 133, 134, 135, 147, 148, 151, 152, 164, 165, 173, 174, 256, 275, 281, 306, 307, 311, 315, 322, 327, 329, 351, 354, 358, 362, 364, 365, 369, 379, 381, 385, 387, 388, 389, 394, 395, 396, 399, 400, 401, 410, 411, 415, 416, 427, 428, 435, 468, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 661, 662, 663, 664, 690], "support": [5, 8, 11, 12, 13, 14, 15, 19, 25, 29, 39, 40, 41, 48, 50, 53, 55, 56, 59, 61, 72, 79, 81, 82, 84, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 101, 102, 105, 113, 114, 115, 116, 118, 119, 121, 122, 123, 125, 126, 128, 129, 130, 133, 134, 135, 136, 142, 146, 147, 148, 150, 151, 152, 153, 159, 164, 165, 167, 171, 173, 174, 176, 180, 181, 182, 203, 256, 270, 275, 278, 279, 280, 281, 282, 283, 290, 293, 294, 306, 307, 315, 320, 322, 327, 329, 337, 348, 349, 351, 354, 355, 356, 357, 359, 361, 362, 364, 365, 369, 381, 382, 383, 385, 387, 388, 389, 391, 392, 394, 395, 396, 399, 400, 401, 402, 409, 410, 411, 412, 415, 416, 417, 427, 428, 432, 435, 439, 442, 443, 444, 447, 468, 478, 479, 483, 484, 489, 495, 520, 526, 529, 535, 536, 552, 558, 567, 569, 570, 571, 572, 575, 577, 581, 589, 590, 591, 592, 596, 599, 600, 602, 603, 626, 635, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 680, 681, 682, 683, 684, 685, 688, 689, 691], "becaus": [5, 12, 13, 96, 173, 278, 279, 281, 583, 651, 682, 685, 686, 688, 691, 692], "behavior": [5, 125, 169, 173, 242, 264, 310, 391, 552, 635, 646, 654, 657, 665, 666, 680, 682, 687, 688, 690, 692], "absolut": [7, 203, 274, 583, 661, 662, 663, 664, 682, 692], "numer": [7, 35, 39, 50, 88, 89, 94, 96, 116, 120, 125, 223, 224, 225, 226, 227, 231, 232, 246, 274, 300, 355, 357, 358, 361, 386, 391, 439, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 566, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 657, 666, 672, 680, 682, 686, 687, 688, 689, 692], "each": [7, 9, 10, 15, 16, 17, 29, 35, 46, 49, 51, 60, 73, 74, 75, 92, 96, 103, 104, 124, 126, 131, 132, 138, 167, 169, 233, 238, 253, 256, 261, 262, 264, 274, 276, 277, 287, 300, 305, 310, 316, 317, 328, 342, 343, 344, 355, 371, 372, 390, 392, 397, 398, 446, 448, 449, 450, 454, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 527, 528, 530, 532, 533, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 558, 561, 562, 563, 564, 565, 567, 570, 571, 572, 574, 575, 576, 577, 578, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 635, 644, 654, 657, 658, 659, 666, 680, 682, 684, 686, 687, 688, 690, 692], "function": [7, 11, 14, 15, 16, 17, 18, 31, 32, 33, 34, 49, 50, 54, 60, 62, 63, 81, 82, 83, 88, 89, 94, 110, 114, 115, 116, 123, 131, 136, 147, 150, 153, 162, 169, 175, 180, 213, 242, 244, 264, 274, 280, 281, 282, 287, 295, 296, 297, 298, 316, 321, 328, 331, 332, 348, 349, 350, 355, 357, 358, 361, 380, 382, 383, 397, 402, 410, 412, 413, 417, 425, 442, 473, 477, 479, 486, 515, 521, 523, 548, 552, 558, 569, 577, 578, 595, 600, 602, 634, 636, 644, 645, 646, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 672, 676, 680, 681, 682, 683, 684, 687, 689, 691], "appli": [7, 16, 17, 18, 31, 32, 33, 34, 60, 81, 82, 88, 89, 93, 94, 96, 110, 114, 115, 123, 131, 147, 150, 153, 164, 180, 274, 282, 285, 295, 296, 297, 298, 328, 348, 349, 357, 358, 361, 380, 382, 383, 397, 410, 412, 417, 427, 442, 472, 491, 544, 545, 549, 558, 577, 595, 600, 602, 644, 646, 654, 657, 675, 676, 682, 683, 689], "all": [7, 14, 16, 17, 19, 21, 25, 35, 43, 44, 45, 49, 54, 63, 69, 72, 73, 83, 91, 93, 111, 114, 115, 126, 127, 141, 153, 159, 164, 165, 169, 175, 201, 203, 211, 212, 239, 240, 251, 274, 283, 284, 289, 290, 300, 309, 310, 316, 321, 332, 337, 350, 370, 373, 382, 383, 392, 393, 405, 417, 427, 428, 439, 453, 462, 473, 481, 485, 489, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 518, 519, 528, 529, 536, 537, 541, 543, 544, 545, 548, 549, 550, 551, 566, 575, 605, 611, 624, 646, 648, 651, 652, 654, 657, 665, 666, 667, 672, 679, 682, 685, 686, 688, 690, 691, 692], "33": [7, 29, 51, 238, 274], "float64": [7, 15, 17, 35, 40, 41, 46, 47, 69, 74, 75, 81, 82, 89, 92, 99, 103, 104, 116, 121, 131, 132, 135, 137, 140, 145, 146, 150, 168, 174, 180, 201, 215, 274, 281, 282, 300, 306, 307, 314, 326, 328, 343, 344, 348, 349, 358, 367, 371, 372, 384, 387, 397, 398, 401, 403, 408, 409, 412, 431, 435, 439, 442, 654, 666, 682, 686, 688, 690, 691], "axi": [8, 11, 12, 13, 15, 19, 23, 24, 25, 29, 31, 32, 33, 34, 39, 40, 41, 43, 44, 45, 48, 52, 53, 55, 59, 60, 61, 72, 81, 82, 84, 86, 88, 89, 90, 94, 95, 96, 97, 98, 101, 106, 107, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 144, 146, 147, 148, 150, 151, 152, 153, 156, 174, 180, 238, 243, 275, 278, 279, 283, 286, 288, 290, 295, 296, 297, 298, 306, 307, 309, 311, 315, 319, 320, 322, 327, 328, 329, 337, 348, 349, 351, 354, 357, 358, 359, 361, 362, 364, 365, 369, 378, 381, 382, 383, 385, 386, 387, 390, 392, 394, 395, 396, 397, 399, 400, 401, 402, 407, 409, 410, 411, 412, 415, 416, 417, 420, 435, 442, 454, 468, 567, 569, 575, 671, 682, 684, 688, 689], "level": [8, 12, 13, 29, 40, 41, 43, 48, 55, 59, 60, 61, 81, 82, 84, 86, 88, 89, 90, 93, 94, 95, 97, 98, 101, 113, 114, 115, 119, 121, 122, 123, 126, 127, 128, 129, 130, 133, 134, 135, 145, 146, 147, 149, 150, 151, 152, 153, 164, 169, 174, 175, 177, 180, 202, 216, 234, 236, 240, 242, 256, 258, 261, 262, 263, 264, 267, 275, 278, 279, 293, 306, 307, 309, 315, 322, 327, 328, 329, 348, 349, 351, 354, 357, 358, 359, 361, 362, 364, 365, 369, 381, 382, 383, 385, 387, 388, 389, 392, 393, 394, 395, 396, 399, 400, 401, 408, 409, 410, 412, 415, 416, 417, 427, 435, 442, 464, 647, 667, 672, 680], "fill_valu": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 122, 128, 129, 130, 133, 134, 135, 144, 151, 152, 174, 175, 243, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 388, 394, 395, 396, 399, 400, 401, 407, 415, 416, 435, 575, 667], "get": [8, 40, 41, 42, 48, 55, 59, 61, 68, 74, 75, 80, 84, 86, 95, 96, 97, 98, 101, 102, 103, 104, 105, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 216, 242, 254, 264, 275, 306, 307, 308, 315, 322, 327, 329, 336, 343, 344, 351, 354, 362, 364, 365, 366, 369, 371, 372, 381, 385, 387, 394, 395, 396, 399, 400, 401, 406, 415, 416, 435, 538, 567, 595, 604, 610, 646, 672, 684, 688, 689], "addit": [8, 15, 50, 89, 119, 164, 275, 358, 385, 427, 474, 500, 517, 525, 534, 654, 656, 661, 662, 663, 664, 692], "wise": [8, 17, 25, 39, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 106, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 290, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 454, 473, 567, 574, 575, 598, 601, 682, 684, 685], "binari": [8, 40, 41, 42, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 164, 169, 174, 275, 306, 307, 308, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 427, 435, 648, 653, 658, 659, 672, 688, 692], "oper": [8, 11, 15, 40, 41, 42, 43, 45, 48, 50, 53, 55, 59, 60, 61, 84, 86, 87, 93, 95, 97, 98, 101, 113, 114, 115, 119, 121, 128, 129, 130, 133, 134, 135, 147, 151, 152, 153, 164, 174, 181, 183, 188, 195, 270, 275, 281, 289, 306, 307, 308, 309, 310, 311, 315, 320, 322, 327, 328, 329, 351, 354, 356, 362, 364, 365, 369, 381, 382, 383, 385, 387, 394, 395, 396, 399, 400, 401, 410, 415, 416, 417, 427, 435, 443, 538, 558, 570, 571, 572, 577, 589, 590, 591, 592, 596, 599, 600, 602, 603, 605, 611, 624, 672, 680, 684, 685, 688, 689, 690, 691], "equival": [8, 36, 37, 40, 41, 43, 48, 55, 59, 61, 63, 64, 69, 84, 86, 95, 97, 98, 101, 113, 119, 121, 122, 128, 129, 130, 133, 134, 135, 136, 141, 151, 152, 174, 207, 208, 220, 239, 275, 287, 301, 302, 306, 307, 309, 315, 322, 325, 327, 329, 332, 333, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 402, 405, 415, 416, 435, 500, 501, 502, 503, 509, 510, 511, 513, 514, 515, 517, 518, 519, 525, 528, 529, 532, 534, 537, 538, 542, 543, 544, 545, 548, 549, 552, 680, 682, 687, 691], "substitut": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 355, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 663], "miss": [8, 23, 24, 40, 41, 43, 48, 52, 55, 59, 61, 74, 75, 84, 86, 95, 96, 97, 98, 101, 103, 104, 107, 111, 113, 119, 121, 122, 128, 129, 130, 133, 134, 135, 149, 151, 152, 160, 166, 174, 270, 275, 286, 288, 292, 294, 306, 307, 309, 315, 318, 319, 322, 327, 329, 343, 344, 351, 354, 362, 364, 365, 369, 371, 372, 378, 381, 385, 387, 388, 394, 395, 396, 399, 400, 401, 415, 416, 423, 430, 435, 473, 575, 583, 652, 654, 672, 681, 689], "one": [8, 11, 21, 40, 41, 45, 48, 55, 59, 61, 80, 84, 86, 93, 95, 96, 97, 98, 101, 108, 111, 113, 119, 121, 122, 128, 129, 130, 133, 134, 135, 151, 152, 174, 175, 176, 177, 212, 216, 218, 237, 258, 262, 264, 275, 282, 284, 306, 307, 311, 315, 322, 327, 329, 330, 342, 351, 354, 362, 363, 364, 365, 369, 381, 385, 387, 393, 394, 395, 396, 399, 400, 401, 415, 416, 435, 463, 464, 478, 480, 484, 489, 500, 501, 510, 515, 583, 595, 646, 652, 654, 657, 658, 659, 667, 680, 682, 684, 687, 688, 691], "scalar": [8, 15, 18, 25, 40, 41, 42, 48, 53, 55, 59, 61, 81, 82, 84, 86, 87, 90, 91, 92, 95, 97, 98, 101, 113, 119, 121, 125, 128, 129, 130, 133, 134, 135, 151, 152, 174, 180, 181, 213, 270, 275, 281, 282, 287, 290, 306, 307, 308, 315, 320, 322, 327, 329, 348, 349, 351, 354, 356, 359, 362, 364, 365, 369, 381, 385, 387, 389, 391, 394, 395, 396, 399, 400, 401, 415, 416, 435, 442, 443, 465, 466, 515, 569, 575, 644, 651, 654, 665, 691], "sequenc": [8, 40, 41, 42, 44, 48, 50, 55, 59, 60, 61, 84, 86, 95, 97, 98, 101, 108, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 182, 201, 251, 256, 260, 261, 262, 270, 275, 306, 307, 308, 315, 322, 327, 328, 329, 342, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 444, 453, 466, 476, 478, 481, 520, 528, 529, 530, 542, 546, 547, 635, 644, 646, 666, 680, 682], "ani": [8, 16, 17, 18, 27, 35, 40, 41, 42, 43, 44, 45, 47, 48, 50, 55, 59, 61, 84, 86, 95, 97, 98, 99, 101, 113, 118, 119, 121, 122, 125, 128, 129, 130, 132, 133, 134, 135, 141, 151, 152, 160, 166, 171, 174, 177, 210, 212, 239, 275, 281, 287, 291, 300, 306, 307, 308, 309, 314, 315, 322, 327, 329, 351, 354, 362, 364, 365, 367, 369, 381, 385, 387, 388, 391, 394, 395, 396, 398, 399, 400, 401, 405, 415, 416, 423, 430, 432, 435, 455, 461, 462, 463, 465, 466, 469, 473, 478, 496, 497, 500, 515, 520, 552, 558, 577, 602, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 680, 682, 685, 687, 688, 690, 691, 692], "multipl": [8, 14, 15, 17, 35, 40, 41, 42, 48, 50, 55, 59, 61, 67, 84, 85, 86, 95, 96, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 148, 151, 152, 174, 175, 190, 216, 258, 261, 275, 282, 300, 306, 307, 308, 315, 322, 327, 329, 335, 351, 353, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 411, 415, 416, 435, 484, 489, 575, 613, 657, 658, 659, 665, 667, 680, 682, 684, 685, 687, 688, 690], "structur": [8, 40, 41, 42, 48, 55, 58, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 162, 164, 174, 234, 244, 275, 306, 307, 308, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 425, 427, 435, 645, 647, 680, 682, 684, 688, 692], "int": [8, 16, 28, 39, 40, 41, 43, 45, 46, 48, 55, 57, 59, 60, 61, 63, 69, 70, 72, 84, 86, 88, 89, 94, 95, 97, 98, 101, 102, 105, 108, 109, 113, 114, 115, 116, 119, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 147, 150, 151, 152, 153, 156, 159, 165, 174, 180, 216, 218, 238, 240, 243, 254, 256, 263, 264, 269, 275, 285, 292, 293, 304, 306, 307, 309, 315, 322, 325, 327, 328, 329, 332, 337, 351, 354, 357, 358, 361, 362, 364, 365, 369, 370, 373, 377, 379, 381, 382, 383, 385, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 412, 415, 416, 417, 420, 428, 435, 439, 442, 466, 471, 474, 475, 478, 479, 484, 487, 488, 489, 490, 494, 495, 498, 499, 516, 517, 520, 521, 522, 525, 528, 529, 532, 533, 534, 536, 538, 540, 541, 552, 553, 555, 559, 560, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 583, 588, 589, 590, 591, 592, 594, 596, 598, 599, 601, 603, 635, 641, 643, 644, 647, 653, 654, 656, 658, 659, 661, 663, 664, 665, 680, 682, 688], "string": [8, 9, 10, 11, 35, 40, 41, 46, 48, 50, 55, 59, 61, 70, 74, 75, 84, 85, 86, 95, 97, 98, 101, 103, 104, 110, 113, 119, 121, 126, 128, 129, 130, 133, 134, 135, 151, 152, 159, 165, 169, 171, 174, 275, 276, 277, 282, 300, 306, 307, 311, 315, 322, 327, 329, 342, 343, 344, 351, 353, 354, 362, 364, 365, 369, 371, 372, 380, 381, 385, 387, 392, 394, 395, 396, 399, 400, 401, 413, 415, 416, 428, 432, 435, 558, 577, 595, 602, 626, 634, 635, 646, 650, 654, 655, 656, 657, 659, 660, 665, 672, 680, 681, 685, 686, 687, 688, 689, 692], "broadcast": [8, 15, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 600, 687], "across": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 583, 680, 682, 684, 685], "match": [8, 16, 17, 27, 40, 41, 48, 55, 59, 61, 73, 84, 86, 93, 95, 97, 98, 101, 113, 119, 121, 122, 125, 128, 129, 130, 133, 134, 135, 136, 148, 151, 152, 174, 176, 233, 254, 275, 291, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 388, 391, 394, 395, 396, 399, 400, 401, 402, 411, 415, 416, 435, 473, 478, 483, 484, 489, 529, 536, 541, 542, 552, 575, 657, 658, 659, 662, 672, 680, 682, 683, 687, 688, 691, 692], "pass": [8, 14, 15, 16, 17, 18, 21, 30, 40, 41, 48, 55, 59, 60, 61, 69, 73, 84, 86, 89, 95, 97, 98, 101, 110, 113, 119, 121, 122, 123, 125, 128, 129, 130, 131, 133, 134, 135, 136, 151, 152, 160, 166, 169, 174, 176, 233, 275, 281, 284, 306, 307, 315, 322, 327, 328, 329, 342, 351, 354, 355, 358, 362, 363, 364, 365, 369, 380, 381, 385, 387, 391, 394, 395, 396, 397, 399, 400, 401, 402, 415, 416, 423, 430, 435, 437, 439, 454, 473, 478, 479, 484, 489, 495, 515, 520, 536, 541, 595, 644, 645, 647, 654, 656, 657, 658, 659, 662, 663, 664, 666, 682, 684, 688, 691, 692], "multiindex": [8, 25, 40, 41, 43, 48, 55, 59, 60, 61, 72, 84, 86, 88, 89, 94, 95, 97, 98, 101, 113, 118, 119, 121, 123, 126, 127, 128, 129, 130, 133, 134, 135, 142, 145, 147, 151, 152, 174, 177, 203, 216, 222, 234, 240, 242, 248, 275, 290, 306, 307, 309, 315, 322, 327, 328, 329, 337, 351, 354, 357, 358, 361, 362, 364, 365, 369, 381, 385, 387, 392, 393, 394, 395, 396, 399, 400, 401, 408, 410, 415, 416, 435, 526, 535, 536, 541, 672, 680, 683, 687, 689], "yet": [8, 11, 14, 15, 40, 41, 48, 55, 59, 61, 79, 84, 86, 95, 97, 98, 101, 109, 113, 119, 121, 123, 126, 128, 129, 130, 133, 134, 135, 147, 151, 152, 174, 176, 182, 203, 256, 275, 294, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 379, 381, 385, 387, 392, 394, 395, 396, 399, 400, 401, 410, 415, 416, 435, 439, 444, 478, 483, 526, 529, 535, 536, 552, 626, 661, 663, 664, 682, 685, 688, 691], "fill": [8, 23, 24, 40, 41, 48, 52, 53, 55, 59, 61, 84, 86, 95, 97, 98, 101, 107, 109, 113, 119, 121, 122, 126, 128, 129, 130, 133, 134, 135, 151, 152, 174, 213, 254, 275, 286, 288, 306, 307, 315, 319, 320, 322, 327, 329, 351, 354, 362, 364, 365, 369, 378, 379, 381, 385, 387, 392, 394, 395, 396, 399, 400, 401, 415, 416, 435, 454, 474, 477, 517, 525, 534, 553, 559, 560, 568, 569, 573, 575, 579, 580, 588, 594, 688, 689], "exist": [8, 40, 41, 43, 48, 50, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 125, 128, 129, 130, 133, 134, 135, 142, 151, 152, 164, 174, 275, 306, 307, 309, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 391, 394, 395, 396, 399, 400, 401, 415, 416, 427, 435, 454, 682, 686, 692], "success": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "align": [8, 14, 40, 41, 48, 55, 59, 60, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 136, 151, 152, 174, 176, 270, 275, 306, 307, 315, 322, 327, 328, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 402, 415, 416, 435, 437, 454, 691], "befor": [8, 9, 40, 41, 48, 50, 55, 59, 61, 84, 86, 95, 97, 98, 101, 109, 113, 119, 121, 128, 129, 130, 133, 134, 135, 147, 151, 152, 174, 275, 276, 285, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 379, 381, 385, 387, 394, 395, 396, 399, 400, 401, 410, 415, 416, 435, 473, 526, 535, 540, 634, 645, 654, 657, 673, 680, 682, 684], "comput": [8, 16, 28, 30, 40, 41, 48, 55, 59, 60, 61, 62, 69, 81, 82, 84, 86, 88, 89, 90, 94, 95, 96, 97, 98, 101, 109, 113, 114, 115, 116, 117, 119, 120, 121, 128, 129, 130, 133, 134, 135, 146, 151, 152, 153, 174, 233, 234, 275, 285, 292, 294, 306, 307, 315, 322, 325, 327, 328, 329, 331, 348, 349, 351, 354, 357, 358, 359, 361, 362, 364, 365, 369, 379, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 399, 400, 401, 409, 415, 416, 417, 435, 467, 471, 481, 482, 516, 527, 561, 570, 571, 572, 574, 581, 582, 583, 589, 590, 591, 592, 596, 598, 599, 601, 603, 644, 646, 672, 682, 685, 688, 689], "both": [8, 27, 35, 40, 41, 48, 49, 55, 59, 61, 67, 73, 84, 86, 93, 95, 96, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 140, 151, 152, 174, 176, 198, 247, 252, 253, 270, 275, 287, 291, 300, 306, 307, 315, 316, 322, 327, 329, 335, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 452, 525, 553, 583, 647, 662, 663, 664, 671, 680, 685, 686, 687, 688, 692], "correspond": [8, 16, 17, 40, 41, 43, 48, 53, 55, 59, 61, 69, 84, 86, 87, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 136, 142, 151, 152, 168, 174, 181, 218, 275, 287, 306, 307, 309, 315, 318, 320, 322, 327, 329, 351, 354, 355, 356, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 402, 415, 416, 431, 435, 437, 443, 473, 478, 480, 515, 528, 530, 575, 654, 657, 680, 688], "locat": [8, 40, 41, 43, 48, 49, 55, 59, 61, 70, 73, 84, 86, 95, 97, 98, 101, 113, 119, 121, 122, 128, 129, 130, 133, 134, 135, 139, 151, 152, 174, 254, 256, 264, 275, 306, 307, 309, 315, 316, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 404, 415, 416, 435, 487, 522, 530, 546, 547, 653, 654, 657, 658, 659, 660, 691], "arithmet": [8, 40, 41, 42, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 308, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435, 688, 691, 692], "angl": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "degre": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 150, 151, 152, 174, 180, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 412, 415, 416, 435, 442, 475, 521, 522, 583, 598, 601, 641, 643], "360": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "180": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "circl": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "triangl": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "rectangl": [8, 40, 41, 48, 55, 59, 61, 84, 86, 95, 97, 98, 101, 113, 119, 121, 128, 129, 130, 133, 134, 135, 151, 152, 174, 275, 306, 307, 315, 322, 327, 329, 351, 354, 362, 364, 365, 369, 381, 385, 387, 394, 395, 396, 399, 400, 401, 415, 416, 435], "361": [8, 119, 275, 385], "181": [8, 119, 275, 385], "c": [8, 15, 25, 35, 39, 40, 41, 43, 48, 50, 53, 55, 59, 61, 67, 69, 80, 84, 85, 86, 92, 95, 97, 98, 101, 110, 111, 113, 119, 121, 123, 125, 128, 129, 130, 131, 133, 134, 135, 136, 140, 142, 145, 147, 151, 152, 156, 159, 174, 175, 216, 243, 264, 275, 289, 290, 300, 306, 307, 309, 315, 318, 320, 322, 324, 327, 329, 335, 347, 351, 353, 354, 362, 364, 365, 369, 380, 381, 385, 387, 388, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 408, 410, 415, 416, 420, 426, 435, 436, 437, 454, 473, 479, 515, 520, 528, 550, 551, 558, 577, 578, 581, 583, 602, 626, 644, 651, 652, 654, 662, 667, 680, 682, 683, 684, 687, 688, 691], "e": [8, 11, 15, 35, 40, 41, 48, 50, 55, 59, 61, 84, 85, 86, 95, 97, 98, 101, 113, 119, 120, 121, 125, 128, 129, 130, 131, 133, 134, 135, 142, 151, 152, 156, 174, 175, 243, 264, 275, 289, 300, 306, 307, 315, 322, 327, 329, 351, 353, 354, 362, 364, 365, 369, 381, 385, 386, 387, 391, 394, 395, 396, 397, 399, 400, 401, 415, 416, 420, 435, 437, 463, 476, 478, 479, 484, 489, 490, 515, 520, 523, 548, 550, 551, 626, 644, 654, 667, 680, 682, 688], "int64": [8, 9, 10, 15, 19, 21, 25, 27, 29, 35, 42, 43, 46, 47, 50, 53, 55, 62, 67, 69, 80, 85, 87, 88, 90, 92, 94, 95, 97, 98, 106, 113, 114, 115, 119, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 145, 146, 149, 151, 152, 153, 154, 158, 168, 175, 177, 181, 182, 205, 210, 213, 222, 233, 234, 237, 238, 240, 242, 246, 248, 251, 258, 265, 275, 276, 277, 280, 281, 282, 283, 284, 289, 290, 291, 299, 300, 304, 308, 309, 311, 314, 317, 320, 322, 325, 330, 331, 335, 347, 353, 355, 356, 357, 359, 361, 362, 363, 364, 365, 370, 373, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 408, 409, 411, 415, 416, 417, 418, 431, 437, 443, 444, 455, 456, 457, 461, 462, 463, 466, 479, 482, 492, 493, 496, 497, 555, 630, 631, 632, 633, 636, 646, 667, 682, 684, 686, 688, 690, 691, 692], "prefix": [9, 10, 276, 277, 646, 647, 654], "For": [9, 10, 15, 16, 29, 35, 43, 49, 54, 60, 63, 83, 92, 93, 110, 120, 125, 126, 131, 132, 147, 164, 165, 216, 264, 276, 277, 281, 300, 309, 316, 321, 328, 332, 350, 380, 386, 391, 392, 393, 397, 398, 410, 427, 428, 464, 484, 489, 536, 569, 578, 583, 635, 644, 654, 657, 666, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692], "str": [9, 10, 18, 19, 50, 51, 54, 58, 69, 72, 79, 83, 91, 93, 105, 108, 109, 116, 118, 125, 126, 127, 132, 138, 139, 140, 142, 148, 159, 160, 163, 164, 166, 167, 169, 182, 183, 188, 195, 197, 198, 216, 245, 247, 261, 262, 268, 270, 276, 277, 283, 311, 321, 337, 350, 379, 384, 391, 392, 393, 398, 404, 423, 426, 427, 430, 444, 451, 452, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 575, 577, 600, 602, 605, 611, 624, 626, 634, 635, 644, 646, 647, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 675, 676, 682, 684, 688, 690], "add": [9, 10, 42, 70, 79, 164, 276, 277, 308, 427, 455, 456, 646, 654, 680, 682, 688], "updat": [9, 10, 27, 72, 276, 277, 291, 337], "add_suffix": [9, 276], "suffix": [9, 10, 93, 276, 277], "item_": [9, 276], "item_0": [9, 276], "item_1": [9, 276], "item_2": [9, 276], "item_3": [9, 276], "6": [9, 10, 14, 15, 31, 32, 33, 34, 35, 39, 42, 43, 50, 53, 56, 63, 67, 69, 74, 75, 85, 90, 103, 104, 106, 123, 125, 126, 139, 145, 146, 158, 175, 177, 185, 186, 187, 199, 210, 222, 248, 259, 276, 277, 280, 282, 295, 296, 297, 298, 300, 304, 305, 308, 309, 320, 332, 335, 343, 344, 347, 353, 359, 363, 371, 372, 391, 392, 404, 408, 409, 436, 437, 439, 456, 457, 461, 462, 464, 465, 466, 474, 475, 476, 477, 479, 486, 550, 551, 578, 581, 583, 607, 608, 609, 610, 613, 614, 616, 617, 627, 629, 636, 644, 647, 651, 667, 682, 684, 686, 687, 688, 691, 692], "col_": [9, 276], "col_a": [9, 276], "col_b": [9, 276], "after": [10, 125, 277, 281, 391, 413, 455, 526, 535, 540, 545, 654, 657, 682, 688], "add_prefix": [10, 277], "_item": [10, 277], "0_item": [10, 277], "1_item": [10, 277], "2_item": [10, 277], "3_item": [10, 277], "_col": [10, 277], "a_col": [10, 277], "b_col": [10, 277], "aggreg": [11, 60, 126, 328, 392, 577, 600, 681, 682, 685, 689], "more": [11, 14, 15, 19, 21, 35, 42, 67, 69, 136, 164, 175, 183, 188, 195, 258, 281, 283, 284, 300, 308, 335, 402, 427, 463, 482, 489, 536, 583, 605, 611, 624, 657, 658, 659, 665, 667, 680, 682, 687, 688, 690, 691], "over": [11, 16, 17, 39, 76, 96, 136, 243, 402, 567, 578, 680, 687, 688, 692], "specifi": [11, 16, 25, 43, 45, 53, 69, 70, 89, 92, 106, 111, 116, 117, 122, 123, 125, 126, 131, 132, 136, 147, 148, 156, 164, 165, 169, 175, 183, 188, 195, 212, 213, 243, 258, 270, 290, 309, 320, 358, 384, 388, 391, 392, 397, 398, 402, 410, 411, 420, 427, 428, 444, 461, 462, 463, 465, 466, 469, 473, 490, 495, 519, 528, 536, 537, 539, 540, 541, 543, 553, 555, 558, 569, 575, 577, 602, 605, 611, 624, 626, 635, 644, 647, 652, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 680, 682, 686, 687, 688, 691], "set": [11, 14, 17, 21, 25, 35, 56, 67, 69, 74, 75, 79, 85, 91, 96, 103, 104, 116, 120, 131, 142, 159, 169, 171, 176, 197, 210, 233, 237, 240, 245, 268, 280, 284, 287, 290, 300, 310, 335, 342, 343, 344, 353, 371, 372, 386, 397, 431, 432, 439, 451, 454, 456, 457, 461, 463, 475, 478, 485, 519, 521, 523, 526, 529, 535, 536, 537, 541, 543, 552, 575, 583, 600, 634, 644, 651, 654, 657, 659, 665, 666, 680, 682, 687, 690, 691], "accept": [11, 18, 19, 39, 79, 136, 205, 269, 283, 304, 355, 402, 478, 483, 490, 542, 558, 567, 577, 583, 602, 666, 680, 686, 687, 688, 692], "g": [11, 35, 110, 300, 380, 463, 476, 478, 479, 484, 489, 515, 520, 523, 550, 551, 626, 654, 680, 688], "sum": [11, 34, 114, 115, 126, 131, 136, 154, 298, 382, 383, 392, 397, 402, 418, 439, 558, 565, 577, 587, 602, 680, 682, 684, 685, 687, 689, 692], "min": [11, 32, 35, 120, 183, 188, 195, 242, 296, 300, 386, 558, 564, 566, 577, 586, 595, 602, 605, 611, 624, 687, 691], "max": [11, 31, 35, 60, 120, 131, 295, 300, 328, 386, 397, 558, 563, 566, 577, 585, 595, 600, 602, 682, 685, 687, 688], "per": [11, 16, 28, 69, 147, 177, 289, 410, 484, 498, 499, 528, 558, 577, 581, 583, 600, 602, 657, 682, 684, 687, 690], "when": [11, 16, 17, 21, 27, 35, 42, 43, 45, 54, 69, 73, 79, 81, 82, 83, 88, 89, 90, 93, 94, 105, 110, 114, 115, 116, 117, 136, 146, 153, 165, 169, 176, 177, 203, 222, 248, 269, 284, 291, 300, 308, 309, 321, 348, 349, 350, 357, 358, 359, 361, 370, 373, 380, 382, 383, 384, 393, 402, 409, 417, 428, 478, 479, 489, 494, 495, 515, 529, 533, 536, 541, 574, 644, 646, 647, 654, 656, 657, 658, 661, 662, 663, 664, 666, 680, 685, 686, 687, 688, 689, 690, 691, 692], "sever": [11, 675, 676, 690], "arg": [11, 15, 17, 31, 32, 33, 34, 110, 161, 163, 164, 165, 167, 169, 281, 355, 380, 388, 391, 410, 424, 427, 428, 563, 564, 565, 570, 571, 572, 578, 585, 586, 587, 589, 590, 591, 592, 595, 596, 599, 603, 626, 636, 638, 639, 640, 642, 655, 656, 657, 659, 665, 666, 688], "bool_onli": [12, 13, 278, 279], "skipna": [12, 13, 31, 32, 33, 34, 81, 82, 88, 89, 90, 94, 114, 115, 146, 150, 153, 180, 278, 279, 295, 296, 297, 298, 348, 349, 357, 358, 359, 361, 382, 383, 409, 412, 417, 442, 691], "exclud": [12, 13, 31, 32, 33, 34, 35, 81, 82, 88, 89, 90, 94, 114, 115, 140, 146, 150, 153, 180, 270, 278, 279, 287, 292, 294, 295, 296, 297, 298, 300, 348, 349, 357, 358, 359, 361, 382, 383, 409, 412, 417, 439, 442, 566, 581, 583, 691], "entir": [12, 13, 21, 31, 32, 33, 34, 47, 150, 180, 278, 279, 284, 295, 296, 297, 298, 314, 412, 442, 659, 684, 688], "empti": [12, 13, 74, 75, 80, 103, 104, 114, 115, 124, 140, 145, 153, 238, 278, 279, 311, 343, 344, 371, 372, 382, 383, 390, 408, 417, 473, 504, 515, 526, 535, 646, 654, 688, 691], "equal": [12, 13, 48, 59, 72, 84, 93, 101, 120, 125, 131, 136, 198, 211, 222, 247, 248, 278, 279, 315, 327, 337, 351, 369, 386, 391, 397, 402, 452, 515, 553, 644, 661, 662, 663, 664, 666, 691, 692], "zero": [12, 13, 278, 279, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 553, 654, 657, 688], "current": [12, 13, 14, 25, 29, 39, 50, 72, 81, 82, 88, 90, 94, 96, 114, 115, 122, 124, 125, 136, 142, 146, 150, 153, 159, 167, 180, 213, 238, 270, 278, 279, 280, 290, 293, 337, 348, 349, 355, 357, 359, 361, 382, 383, 390, 391, 402, 409, 412, 417, 442, 447, 478, 479, 484, 489, 520, 552, 581, 600, 635, 660, 661, 662, 664, 674, 680, 682, 685, 688], "ignore_index": [14, 44, 51, 136, 147, 148, 280, 310, 317, 402, 410, 411, 454, 468], "verify_integr": [14, 142, 256, 280], "sort": [14, 19, 44, 54, 60, 79, 83, 93, 102, 105, 139, 147, 148, 177, 210, 222, 234, 242, 248, 264, 270, 283, 310, 321, 328, 350, 363, 370, 373, 404, 410, 411, 439, 454, 468, 644, 672, 682, 683, 685, 687, 692], "end": [14, 19, 147, 148, 183, 188, 195, 242, 283, 312, 410, 411, 468, 483, 488, 489, 494, 495, 524, 532, 533, 536, 539, 540, 542, 605, 610, 611, 613, 614, 616, 617, 620, 624, 654, 657, 688], "caller": [14, 27, 54, 63, 72, 83, 87, 120, 124, 136, 181, 238, 240, 291, 321, 332, 337, 350, 355, 356, 386, 390, 402, 443, 473, 536, 541], "ad": [14, 455, 456, 463, 523, 553, 682], "do": [14, 43, 45, 49, 60, 122, 127, 142, 210, 222, 248, 264, 280, 309, 311, 316, 388, 393, 462, 463, 595, 654, 658, 659, 680, 682, 683, 684, 685, 688, 691, 692], "concat": [14, 280, 473, 650, 689], "gener": [14, 15, 35, 36, 50, 69, 136, 141, 207, 239, 280, 282, 300, 301, 402, 405, 475, 521, 522, 566, 583, 635, 647, 672, 680, 681, 685, 688, 689], "concaten": [14, 280, 454, 464, 473, 480, 515, 658, 682, 687, 692], "unchang": [14, 27, 291, 553], "computation": 14, "intens": [14, 684], "than": [14, 15, 45, 59, 61, 69, 84, 86, 114, 115, 122, 136, 153, 177, 287, 327, 329, 351, 354, 382, 383, 388, 402, 417, 439, 448, 449, 450, 463, 478, 482, 487, 489, 498, 499, 526, 529, 535, 552, 553, 570, 571, 572, 583, 589, 590, 591, 592, 596, 599, 603, 631, 633, 647, 680, 682, 683, 686, 688, 691, 692], "better": [14, 60, 136, 328, 402, 687], "solut": [14, 141, 239, 405, 685], "those": [14, 15, 35, 120, 281, 300, 386, 454, 515, 558, 577, 602, 657, 673, 680, 688], "origin": [14, 21, 27, 50, 87, 92, 123, 126, 138, 176, 181, 197, 198, 245, 247, 268, 284, 291, 312, 356, 392, 393, 437, 443, 451, 452, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 538, 634, 635, 637, 638, 639, 640, 641, 642, 643, 665, 685], "onc": [14, 136, 402, 489, 657, 680, 682], "ab": [14, 254, 475, 484, 494, 517, 533, 534, 540, 688, 691], "df2": [14, 454, 647, 662, 682, 688, 691], "8": [14, 15, 31, 32, 33, 34, 35, 39, 42, 43, 50, 63, 67, 73, 81, 82, 85, 87, 88, 89, 94, 96, 114, 115, 125, 126, 131, 146, 150, 153, 157, 159, 175, 180, 181, 185, 187, 287, 295, 296, 297, 298, 300, 304, 308, 309, 325, 332, 335, 348, 349, 353, 356, 357, 358, 361, 382, 383, 391, 392, 397, 409, 412, 417, 421, 437, 442, 443, 464, 468, 476, 477, 491, 550, 551, 578, 581, 583, 607, 608, 609, 610, 613, 614, 627, 635, 636, 644, 647, 657, 661, 662, 663, 664, 667, 680, 682, 684, 686, 688, 691], "With": [14, 27, 69, 132, 194, 280, 287, 291, 310, 398, 439, 623, 657, 680, 682, 684, 685, 688], "follow": [14, 69, 105, 126, 159, 304, 392, 393, 478, 515, 526, 535, 552, 558, 577, 602, 626, 635, 654, 659, 666, 671, 680, 685, 687, 688, 690, 692], "while": [14, 96, 159, 169, 289, 578, 647, 680, 683, 688, 691], "recommend": [14, 122, 123], "show": [14, 69, 73, 74, 75, 103, 104, 126, 343, 344, 371, 372, 392, 661, 662, 663, 664, 680, 682], "wai": [14, 125, 282, 391, 665, 680, 684, 686, 688, 691, 692], "sourc": [14, 16, 17, 162, 244, 282, 425, 645, 653, 654, 658, 659, 683], "less": [14, 45, 84, 86, 287, 351, 354, 448, 449, 450, 463, 552, 553, 631, 633, 657], "effici": [14, 16, 92, 171, 432, 680, 691], "abov": [14, 142, 680, 685, 688, 691], "func": [15, 16, 17, 18, 110, 281, 380, 558, 577, 578, 595, 602, 636, 682], "raw": [15, 634, 653, 658, 659], "result_typ": 15, "along": [15, 72, 88, 89, 94, 96, 120, 147, 148, 337, 357, 358, 361, 386, 410, 411, 454, 691], "reli": [15, 281, 680, 682, 692], "numba": [15, 16, 118, 281, 282, 689, 692], "jit": [15, 16, 281, 282, 688, 692], "compil": [15, 118, 281, 282, 479, 520, 529, 531, 688, 692], "thu": [15, 281, 466, 680, 686, 688], "within": [15, 54, 60, 83, 131, 281, 321, 328, 350, 397, 478, 487, 498, 499, 521, 522, 530, 570, 571, 572, 575, 589, 590, 591, 592, 596, 599, 603, 654, 657, 675, 688], "limit": [15, 16, 23, 24, 35, 52, 53, 72, 107, 109, 122, 125, 281, 286, 288, 300, 319, 320, 337, 378, 379, 388, 391, 536, 541, 559, 560, 568, 569, 573, 578, 579, 580, 588, 594, 683, 689], "cuda": [15, 16, 17, 281, 282, 634, 635, 680, 681, 682, 684, 688, 690], "python": [15, 18, 21, 42, 118, 240, 281, 282, 284, 308, 413, 473, 483, 500, 501, 502, 503, 509, 510, 511, 514, 536, 541, 578, 626, 653, 658, 659, 665, 680, 681, 682, 686, 688, 691, 692], "target": [15, 122, 281, 481, 530], "see": [15, 16, 19, 27, 42, 47, 49, 60, 118, 164, 183, 188, 195, 281, 283, 291, 308, 314, 316, 328, 427, 536, 541, 558, 577, 583, 602, 605, 611, 624, 636, 653, 654, 656, 657, 658, 659, 665, 682, 685, 687, 688, 690, 692], "guid": [15, 164, 281, 427, 558, 577, 602, 680, 681, 688], "user": [15, 16, 17, 50, 164, 269, 281, 282, 427, 558, 577, 602, 636, 666, 680, 681, 682, 685, 690, 692], "defin": [15, 17, 36, 45, 131, 141, 207, 239, 281, 282, 301, 324, 397, 405, 525, 578, 635, 636, 644, 680, 681, 682, 684, 689, 692], "which": [15, 16, 17, 35, 43, 44, 45, 50, 56, 57, 73, 74, 75, 92, 103, 104, 110, 126, 132, 140, 147, 156, 162, 164, 165, 169, 171, 190, 194, 215, 243, 244, 252, 256, 271, 282, 292, 294, 300, 305, 309, 311, 323, 326, 343, 344, 371, 372, 380, 392, 398, 410, 420, 425, 427, 428, 432, 434, 461, 463, 478, 480, 481, 523, 525, 526, 535, 553, 583, 613, 623, 626, 635, 644, 645, 646, 647, 659, 661, 662, 664, 665, 680, 682, 684, 685, 687, 688, 690, 691, 692], "expand": [15, 484, 489, 526, 535, 536, 541], "reduc": 15, "posit": [15, 63, 67, 110, 139, 144, 156, 216, 218, 243, 281, 332, 335, 380, 404, 407, 420, 466, 490, 495, 498, 499, 515, 538, 539, 540, 555, 575, 583, 595, 689], "argument": [15, 16, 17, 19, 20, 21, 30, 89, 110, 122, 123, 142, 147, 150, 159, 164, 165, 175, 180, 242, 281, 282, 283, 284, 358, 380, 393, 410, 412, 427, 428, 442, 454, 558, 577, 595, 602, 635, 646, 654, 656, 659, 665, 666, 667, 671, 680, 684], "simpl": [15, 282, 463, 680, 682, 688], "variabl": [15, 45, 91, 93, 118, 131, 132, 282, 311, 397, 398, 644, 651, 682, 690], "could": [15, 583, 680, 684, 688], "def": [15, 16, 17, 131, 281, 282, 397, 515, 521, 578, 636, 654, 682, 684, 686, 688], "f": [15, 35, 110, 264, 281, 300, 380, 490, 515, 529, 538, 550, 551, 665, 688], "els": [15, 74, 75, 281, 282, 343, 344, 682, 684, 688], "awar": [15, 289, 688], "manner": [15, 16], "mai": [15, 16, 17, 21, 60, 136, 139, 164, 167, 225, 264, 281, 284, 328, 355, 402, 404, 427, 478, 481, 498, 499, 569, 583, 654, 657, 658, 659, 671, 674, 680, 682, 683, 684, 687, 688], "condition": [15, 281, 688], "mix": [15, 35, 116, 164, 225, 300, 427, 500, 666, 688], "common": [15, 35, 93, 141, 222, 239, 281, 300, 405, 665, 680, 688], "rather": [15, 122, 160, 177, 388, 423, 439, 680, 683, 688, 692], "howev": [15, 169, 478, 523, 583, 680, 682, 686, 688, 691], "promot": [15, 688], "safe": [15, 682, 688], "regardless": [15, 35, 118, 300, 666, 685, 688], "op": [15, 688], "against": [15, 16, 17, 49, 316, 481, 500], "v": [15, 531, 569, 683], "w": [15, 126, 164, 392, 427, 476, 654], "z": [15, 16, 17, 43, 53, 125, 159, 309, 320, 388, 391, 486, 554, 685], "incol": [16, 17, 688], "outcol": [16, 17, 688], "pessimistic_nul": [16, 17], "chunk": [16, 169, 578, 660], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 51, 123, 282, 317, 523, 578, 636, 682, 684, 688, 689], "execut": [16, 17, 682, 688, 692], "Or": [16, 17, 122, 686, 688], "dictionari": [16, 17, 21, 110, 141, 239, 284, 380, 405, 557, 595, 646, 659, 680, 686, 688], "map": [16, 17, 60, 74, 75, 103, 104, 110, 123, 198, 247, 328, 343, 344, 371, 372, 380, 452, 486, 548, 557, 558, 577, 595, 602, 646, 654, 680, 682, 687, 688, 691], "col1": [16, 17, 688], "arg1": [16, 17, 110, 380, 688], "output": [16, 17, 35, 50, 60, 69, 108, 118, 136, 138, 159, 162, 165, 167, 169, 170, 171, 244, 270, 282, 300, 328, 402, 425, 428, 432, 444, 464, 480, 487, 536, 541, 578, 635, 646, 647, 657, 661, 662, 663, 664, 672, 680, 681, 685, 687, 688, 689, 692], "extra": [16, 17, 21, 123, 284, 524], "These": [16, 17, 93, 282, 674, 675, 676, 680, 686, 688, 691], "directli": [16, 17, 43, 176, 240, 309, 455, 673, 680, 682, 684, 688], "apply_row": 16, "should": [16, 17, 35, 36, 37, 38, 64, 65, 69, 120, 124, 125, 132, 136, 139, 147, 165, 169, 176, 203, 207, 208, 209, 216, 220, 221, 238, 242, 300, 301, 302, 303, 333, 334, 386, 388, 390, 391, 398, 402, 404, 410, 428, 461, 463, 482, 513, 531, 575, 635, 644, 647, 659, 660, 673, 680, 682, 688, 692], "non": [16, 17, 29, 45, 47, 53, 69, 93, 103, 104, 114, 115, 116, 124, 131, 153, 157, 175, 176, 185, 187, 213, 238, 242, 270, 293, 311, 314, 320, 371, 372, 382, 383, 390, 397, 417, 421, 437, 438, 439, 454, 485, 489, 515, 570, 571, 572, 583, 589, 590, 591, 592, 596, 599, 603, 607, 609, 635, 637, 644, 646, 654, 657, 666, 667, 680, 691, 692], "underli": [16, 17, 123, 145, 179, 257, 368, 389, 408, 441, 672, 680, 682, 691], "garbag": [16, 17, 325], "chunksiz": [16, 159, 656, 657], "integ": [16, 19, 50, 55, 67, 122, 124, 127, 128, 132, 167, 169, 175, 194, 216, 223, 224, 225, 226, 227, 231, 232, 238, 251, 254, 256, 258, 264, 267, 269, 270, 283, 318, 322, 335, 342, 388, 390, 393, 394, 398, 453, 466, 471, 477, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 516, 546, 610, 623, 644, 654, 657, 665, 666, 667, 680, 682, 683, 686, 691], "offset": [16, 54, 83, 126, 131, 169, 321, 350, 392, 397, 654, 657, 680], "start": [16, 93, 118, 126, 145, 269, 312, 347, 392, 408, 488, 494, 495, 520, 523, 529, 532, 533, 538, 539, 540, 541, 542, 550, 551, 610, 613, 614, 616, 617, 620, 653, 654, 656, 657, 658, 659, 665, 680], "span": 16, "th": [16, 318, 466, 482], "size": [16, 25, 74, 75, 92, 103, 104, 131, 167, 169, 203, 290, 343, 344, 371, 372, 397, 473, 477, 482, 538, 600, 644, 647, 654, 657, 680, 687, 688, 690], "len": [16, 169, 477, 635, 672, 682, 688], "thread": [16, 17, 688], "block": [16, 523], "kernel": [16, 17, 118, 689], "foral": [16, 688], "built": [16, 523, 680, 681, 682, 684], "queri": [16, 164, 427, 682, 685], "driver": [16, 682], "api": [16, 109, 379, 680, 681, 682, 684, 687, 688, 689, 690, 691, 692], "optim": [16, 69, 659, 690, 692], "launch": [16, 688], "configur": [16, 653, 654, 658, 659, 660, 688], "emul": 16, "serial": [16, 17, 36, 37, 38, 64, 65, 207, 208, 209, 220, 221, 301, 302, 303, 333, 334, 672], "It": [16, 63, 96, 136, 147, 203, 216, 332, 355, 402, 410, 647, 679, 688, 691, 692], "good": [16, 635, 644, 680, 682], "point": [16, 72, 116, 117, 139, 165, 337, 384, 404, 428, 477, 522, 546, 547, 574, 654, 680, 686, 688, 689, 691], "ineffici": 16, "Its": [16, 680], "maximum": [16, 25, 88, 167, 169, 254, 290, 357, 486, 552, 595, 635, 644, 654, 686, 690], "possibl": [16, 72, 164, 203, 337, 427, 657, 666, 680, 688, 690, 691, 692], "avail": [16, 164, 427, 479, 526, 535, 653, 654, 658, 659, 671, 673, 675, 682, 687, 690, 691], "resourc": [16, 69], "number": [16, 28, 29, 35, 63, 69, 70, 73, 102, 105, 106, 108, 109, 114, 115, 122, 123, 124, 131, 132, 136, 145, 150, 153, 157, 165, 167, 169, 180, 236, 238, 258, 261, 262, 267, 282, 285, 292, 293, 300, 318, 325, 332, 368, 374, 377, 379, 382, 383, 390, 397, 398, 402, 408, 412, 417, 421, 428, 438, 439, 442, 446, 448, 449, 450, 454, 471, 473, 475, 479, 482, 487, 490, 502, 521, 522, 525, 529, 536, 541, 546, 561, 570, 571, 572, 575, 581, 582, 583, 589, 590, 591, 592, 596, 599, 603, 610, 630, 631, 632, 633, 634, 635, 641, 643, 644, 646, 650, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 680, 682, 686, 687, 688, 690], "concurr": [16, 17], "To": [16, 35, 44, 125, 169, 300, 391, 439, 526, 595, 654, 658, 659, 680, 684, 687, 688, 691, 692], "access": [16, 35, 164, 300, 427, 672, 675, 676, 680, 682, 688, 690], "count": [16, 35, 69, 88, 89, 94, 96, 106, 131, 157, 177, 300, 357, 358, 361, 363, 377, 397, 421, 439, 562, 566, 584, 636, 672, 682, 685, 687], "threadidx": [16, 688], "blockdim": [16, 688], "respect": [16, 93, 125, 165, 391, 428, 463, 536, 541, 555, 644, 657, 662, 684, 686], "document": [16, 536, 665, 680, 682, 688, 692], "In": [16, 25, 105, 123, 164, 281, 290, 393, 427, 515, 536, 541, 578, 665, 680, 683, 684, 686, 688, 689, 691, 692], "below": [16, 25, 27, 35, 47, 290, 291, 300, 314, 583, 682, 688, 692], "invok": [16, 17, 680], "By": [16, 35, 44, 69, 96, 120, 132, 164, 165, 177, 210, 282, 300, 386, 398, 427, 428, 473, 647, 654, 659, 680, 682, 684, 688, 691, 692], "loop": [16, 17, 680, 684, 688], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 281, 525, 553, 658, 659, 680, 686, 687, 688, 691, 692], "so": [17, 131, 169, 177, 264, 373, 397, 439, 680, 681, 684, 685, 688, 691, 692], "must": [17, 36, 49, 50, 73, 79, 93, 108, 123, 125, 126, 131, 132, 138, 139, 141, 148, 157, 164, 166, 176, 183, 188, 195, 203, 207, 239, 240, 254, 270, 301, 316, 325, 391, 392, 397, 398, 404, 405, 411, 421, 427, 430, 461, 466, 473, 479, 605, 611, 624, 644, 654, 657, 658, 659, 662, 663, 680, 682, 688, 691, 692], "independ": [17, 688], "stride": [17, 167, 635], "improv": [17, 654, 658], "parallel": [17, 682, 685, 688, 690, 692], "resembl": 17, "code": [17, 43, 145, 242, 256, 309, 318, 324, 408, 477, 680, 682, 688], "nelem": [17, 684], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 688], "zip": [17, 165, 428, 654, 657, 682, 688], "callabl": [18, 87, 110, 147, 165, 181, 282, 356, 380, 410, 428, 443, 558, 577, 581, 595, 600, 602, 687], "na_act": [18, 355], "elementwis": [18, 282, 636], "everi": [18, 45, 73, 529, 558, 577, 602, 680, 682, 688], "ignor": [18, 21, 35, 43, 72, 92, 93, 96, 106, 123, 125, 132, 176, 284, 300, 309, 337, 355, 360, 391, 393, 398, 454, 464, 473, 566, 646, 654, 656, 658, 661, 662, 664, 665, 666, 688, 691], "propag": [18, 21, 53, 284, 320, 355, 536, 541, 569, 688, 690, 691], "without": [18, 27, 35, 43, 69, 123, 240, 249, 291, 300, 309, 355, 473, 523, 536, 540, 541, 654, 662, 663, 664, 681, 684, 688], "them": [18, 282, 355, 439, 480, 485, 487, 665, 680, 686, 687, 688, 692], "kind": [19, 93, 126, 147, 148, 218, 240, 283, 392, 410, 411, 468, 686], "quicksort": [19, 148, 283, 411, 468], "ascend": [19, 120, 139, 147, 148, 177, 242, 283, 373, 386, 404, 410, 411, 439, 468], "na_posit": [19, 139, 147, 148, 242, 283, 404, 410, 411, 468], "last": [19, 35, 44, 53, 63, 102, 105, 123, 139, 147, 148, 155, 211, 242, 283, 300, 310, 320, 332, 370, 373, 404, 410, 411, 419, 455, 468, 494, 526, 533, 535, 569, 614, 616, 618, 635, 654, 665, 688], "would": [19, 139, 164, 242, 281, 283, 404, 427, 530, 553, 665, 682, 688, 691], "effect": [19, 60, 122, 283, 328, 388, 683, 685], "compat": [19, 22, 66, 92, 175, 216, 283, 311, 360, 657, 667, 680, 681, 686, 689, 690], "mergesort": [19, 283], "heapsort": [19, 283], "stabl": [19, 283, 690], "choic": [19, 69, 283, 665, 684], "algorithm": [19, 116, 283, 384, 481, 482, 527, 680, 682], "descend": [19, 102, 139, 147, 148, 177, 242, 283, 370, 404, 410, 411, 439, 468], "first": [19, 35, 39, 44, 49, 60, 63, 102, 105, 120, 126, 139, 141, 147, 148, 165, 177, 182, 194, 211, 239, 242, 258, 281, 283, 300, 304, 310, 316, 328, 332, 370, 373, 386, 392, 393, 404, 405, 410, 411, 428, 439, 468, 484, 513, 518, 526, 536, 541, 544, 545, 549, 567, 615, 617, 619, 623, 635, 644, 654, 657, 665, 680, 682, 688], "put": [19, 147, 148, 242, 283, 410, 411, 468, 679], "begin": [19, 147, 148, 242, 283, 410, 411, 468, 495, 524, 539, 540, 541, 617, 654, 657, 682], "cupi": [19, 30, 60, 116, 136, 139, 160, 178, 233, 242, 255, 283, 318, 328, 402, 404, 423, 440, 635, 680, 681, 682, 689, 691, 692], "ndarrai": [19, 58, 91, 136, 160, 166, 178, 179, 182, 190, 242, 255, 270, 283, 318, 402, 423, 430, 440, 441, 635, 644, 651, 666, 682, 684, 688], "base": [19, 25, 43, 44, 54, 63, 69, 73, 83, 111, 126, 131, 140, 198, 247, 270, 281, 283, 290, 309, 321, 332, 350, 373, 392, 397, 452, 469, 478, 482, 492, 493, 502, 635, 652, 656, 657, 665, 680, 682, 686, 688], "int32": [19, 21, 62, 139, 242, 283, 284, 305, 331, 404, 439, 467, 471, 477, 479, 481, 488, 494, 516, 527, 532, 533, 546, 635, 644, 654, 680, 682, 686, 688, 690], "foo": [19, 46, 159, 283, 393, 529, 654, 682], "idx": [19, 74, 75, 103, 104, 205, 216, 223, 224, 225, 226, 227, 231, 232, 233, 240, 242, 243, 246, 258, 283, 325, 343, 344, 371, 372, 478, 526, 535, 682], "keyword": [20, 30, 89, 110, 122, 123, 234, 358, 380, 388, 454, 536, 541, 595, 656, 682, 688], "error": [21, 43, 123, 159, 164, 176, 281, 284, 309, 342, 427, 644, 656, 665, 666, 686, 690], "rais": [21, 43, 54, 56, 57, 83, 123, 125, 140, 176, 182, 215, 259, 281, 284, 309, 312, 321, 323, 326, 342, 350, 391, 462, 466, 478, 494, 515, 526, 529, 533, 535, 552, 644, 665, 666, 680, 684, 685, 686, 688], "cast": [21, 50, 114, 115, 122, 153, 154, 284, 382, 383, 388, 417, 418, 683, 691], "altern": [21, 43, 45, 110, 284, 309, 380, 530, 595, 654], "col": [21, 71, 284, 684], "where": [21, 37, 43, 45, 50, 69, 74, 75, 87, 102, 103, 104, 105, 110, 116, 122, 124, 139, 150, 167, 180, 208, 233, 238, 284, 302, 309, 343, 344, 356, 371, 372, 373, 380, 384, 388, 390, 404, 412, 442, 475, 482, 488, 491, 494, 498, 499, 532, 533, 595, 632, 641, 643, 656, 680, 682, 683, 687, 690], "specif": [21, 44, 50, 93, 132, 284, 398, 671, 675, 680, 682, 691], "deep": [21, 27, 69, 92, 162, 206, 244, 284, 291, 360, 425, 645], "henc": [21, 284, 691], "chang": [21, 27, 109, 122, 150, 176, 180, 284, 291, 310, 379, 388, 389, 412, 439, 442, 462, 463, 523, 544, 691], "warn": [21, 123, 284, 665, 691], "control": [21, 35, 123, 168, 284, 300, 431, 523, 635, 654, 690], "except": [21, 44, 63, 123, 126, 190, 211, 222, 248, 282, 284, 310, 332, 392, 494, 533, 551, 613, 654, 665, 680, 687, 690], "invalid": [21, 56, 57, 123, 215, 259, 284, 323, 326, 665, 666], "suppress": [21, 43, 123, 284, 309], "On": [21, 123, 284, 463, 682, 685], "constructor": [21, 284, 672, 680, 682, 684, 691], "20": [21, 39, 43, 49, 60, 67, 123, 124, 164, 215, 246, 284, 309, 316, 326, 328, 335, 388, 389, 390, 427, 431, 476, 534, 653, 682, 684, 685, 688], "30": [21, 42, 43, 60, 62, 67, 123, 124, 126, 183, 215, 284, 308, 309, 326, 328, 331, 335, 388, 389, 390, 392, 431, 566, 610, 614, 616, 617, 618, 619, 620, 626, 653, 665, 682], "float32": [21, 284, 439, 666, 686, 690], "custom": [21, 131, 284, 397, 651, 659, 680, 685, 692], "cat_dtyp": [21, 284], "enabl": [21, 167, 284, 654, 657, 680, 686, 690], "s1": [21, 280, 284, 454, 464, 478, 500, 501, 510], "s2": [21, 280, 284, 393, 454, 464, 478, 500, 510], "alia": [22, 66, 228, 338, 347], "loc": [22, 43, 70, 218, 254, 264, 309, 682, 685, 688], "inplac": [23, 24, 25, 43, 44, 45, 50, 52, 53, 72, 87, 107, 123, 125, 127, 142, 147, 148, 181, 237, 240, 286, 288, 289, 290, 309, 310, 311, 319, 320, 337, 356, 378, 389, 391, 393, 410, 411, 443, 455, 456, 457, 461, 462, 463, 468, 569, 691], "synonym": [23, 24, 52, 107, 286, 288, 319, 378], "fillna": [23, 24, 45, 52, 107, 125, 286, 288, 311, 319, 378, 391, 682, 683, 685, 689], "bfill": [23, 53, 126, 254, 286, 320, 392, 569], "lower": [25, 35, 116, 117, 290, 300, 384, 472, 523, 544, 545, 548, 549, 574, 672, 680, 682], "upper": [25, 35, 290, 300, 518, 523, 544, 545, 672], "trim": [25, 290, 524], "threshold": [25, 290, 583], "assign": [25, 50, 120, 123, 138, 289, 290, 386, 431, 682, 685, 691], "outsid": [25, 164, 290, 427, 454, 688], "boundari": [25, 131, 287, 290, 397, 688], "singular": [25, 290], "latter": [25, 290, 684], "case": [25, 50, 63, 93, 116, 123, 147, 201, 222, 248, 251, 290, 332, 393, 410, 453, 478, 481, 515, 520, 523, 529, 536, 635, 665, 680, 684, 687, 688, 691, 692], "perform": [25, 37, 50, 60, 64, 69, 87, 93, 114, 115, 136, 147, 153, 164, 181, 183, 188, 195, 208, 220, 270, 285, 290, 302, 310, 328, 333, 356, 382, 383, 402, 410, 417, 427, 431, 443, 463, 523, 550, 551, 558, 570, 571, 572, 577, 589, 590, 591, 592, 596, 599, 602, 603, 605, 611, 624, 654, 658, 661, 662, 663, 664, 680, 684, 687, 688, 689, 690, 691, 692], "array_lik": [25, 290], "minimum": [25, 28, 94, 131, 290, 292, 361, 397, 474, 486, 487, 517, 525, 534, 553, 581, 583, 595, 644], "expect": [25, 87, 110, 116, 147, 165, 181, 282, 290, 356, 380, 410, 428, 443, 478, 550, 595, 635, 657, 680, 684, 685, 688], "sr": [25, 126, 136, 281, 290, 347, 392, 402, 422, 439, 481, 487, 530, 688], "t": [27, 42, 92, 96, 106, 116, 123, 136, 169, 177, 183, 188, 192, 195, 291, 308, 363, 377, 402, 439, 476, 483, 505, 511, 515, 519, 523, 524, 537, 543, 561, 582, 605, 611, 621, 624, 657, 682, 684, 685, 688, 691], "creat": [27, 122, 124, 126, 127, 142, 164, 197, 198, 203, 238, 240, 245, 247, 268, 291, 323, 324, 325, 390, 392, 393, 427, 451, 452, 526, 531, 535, 583, 634, 654, 682, 684, 685, 686, 687, 688], "modif": [27, 291], "reflect": [27, 42, 291, 308], "refer": [27, 35, 42, 118, 282, 291, 300, 308, 491, 531, 681, 686, 688, 691], "shallow": [27, 291], "vice": [27, 291, 544], "versa": [27, 291, 544], "includ": [27, 35, 50, 58, 60, 69, 74, 75, 88, 89, 92, 94, 103, 104, 106, 116, 132, 140, 165, 169, 170, 177, 190, 270, 287, 291, 300, 343, 344, 357, 358, 360, 361, 363, 371, 372, 377, 384, 398, 428, 439, 455, 461, 462, 463, 503, 510, 519, 523, 537, 540, 543, 561, 566, 570, 571, 572, 582, 589, 590, 591, 592, 596, 599, 603, 613, 644, 647, 653, 654, 656, 657, 658, 659, 660, 680, 682, 686, 688, 690, 691, 692], "neither": [27, 252, 253, 264, 287, 291, 683], "nor": [27, 164, 264, 291, 427, 683, 692], "s_copi": [27, 291], "versu": [27, 291, 691], "share": [27, 291, 454, 680], "remain": [27, 111, 258, 291, 473, 518, 544, 545, 549, 553, 652], "pearson": [28, 146, 285, 292, 409, 581, 687], "min_period": [28, 131, 292, 294, 397, 581, 583, 636, 688], "correl": [28, 285, 292, 581, 583], "matrix": [28, 30, 482, 581, 583, 689], "spearman": [28, 292, 581], "standard": [28, 150, 159, 191, 292, 412, 532, 536, 541, 548, 598, 620, 626, 641, 654, 680, 682, 685, 688], "coeffici": [28, 292, 581], "rank": [28, 292], "observ": [28, 60, 131, 260, 292, 293, 328, 397, 569, 581, 583, 637, 682], "requir": [28, 36, 37, 38, 64, 65, 114, 115, 131, 136, 141, 153, 169, 207, 208, 209, 220, 221, 239, 281, 301, 302, 303, 333, 334, 382, 383, 397, 402, 405, 417, 570, 571, 572, 581, 583, 589, 590, 591, 592, 596, 599, 603, 634, 659, 680, 687, 688], "pair": [28, 76, 125, 391, 581, 583, 659], "have": [28, 35, 47, 49, 54, 73, 83, 93, 96, 105, 108, 110, 120, 122, 126, 136, 140, 168, 169, 176, 177, 270, 282, 292, 300, 314, 316, 321, 350, 380, 386, 392, 402, 431, 460, 473, 482, 492, 493, 515, 553, 581, 583, 651, 680, 682, 684, 687, 688, 691], "valid": [28, 45, 114, 115, 131, 132, 153, 256, 292, 311, 325, 382, 383, 397, 398, 417, 479, 491, 515, 569, 570, 571, 572, 581, 583, 589, 590, 591, 592, 596, 599, 603, 657, 680, 690], "request": [28, 89, 90, 169, 216, 254, 263, 358, 359], "numeric_onli": [29, 81, 82, 88, 89, 90, 94, 96, 114, 115, 116, 120, 146, 150, 153, 180, 348, 349, 357, 358, 359, 361, 382, 383, 386, 409, 412, 417, 442, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603], "cell": [29, 684, 688], "nat": [29, 45, 74, 75, 96, 103, 104, 182, 343, 344, 363, 371, 372, 620, 665, 691], "consid": [29, 43, 44, 45, 47, 49, 74, 75, 96, 103, 104, 159, 211, 282, 309, 311, 314, 316, 343, 344, 363, 371, 372, 463, 515, 654, 680, 688, 691], "entri": [29, 45, 69, 74, 75, 87, 103, 104, 159, 181, 310, 311, 343, 344, 356, 371, 372, 443, 515, 654, 657, 663], "person": 29, "john": 29, "myla": 29, "lewi": 29, "ag": [29, 74, 75, 103, 104, 343, 344, 371, 372], "24": [29, 31, 32, 33, 34, 60, 90, 92, 114, 115, 126, 127, 131, 295, 296, 297, 298, 359, 382, 383, 392, 397, 476, 566, 682, 691], "21": [29, 126, 131, 132, 392, 397, 398, 476, 682, 687], "26": [29, 42, 60, 292, 294, 308, 476, 566, 614, 616, 617, 682], "covari": [30, 294, 583], "cumul": [31, 32, 33, 34, 295, 296, 297, 298, 562, 563, 564, 565, 584, 585, 586, 587, 691], "indexedfram": [31, 32, 33, 34, 680], "ser": [31, 32, 33, 34, 53, 63, 74, 75, 87, 90, 103, 104, 155, 181, 287, 293, 295, 296, 297, 298, 311, 320, 328, 332, 343, 344, 356, 359, 371, 372, 419, 431, 443, 476, 498, 499, 515, 522, 523, 524, 527, 546, 547, 620, 688], "cumsum": [31, 32, 33, 295, 296, 297, 680, 691], "15": [31, 32, 33, 34, 44, 54, 83, 126, 131, 139, 142, 246, 282, 295, 296, 297, 298, 321, 347, 350, 392, 397, 404, 426, 476, 506, 507, 682, 688], "9": [31, 32, 33, 34, 35, 39, 50, 67, 81, 82, 85, 88, 89, 94, 114, 115, 125, 126, 131, 132, 150, 153, 164, 175, 180, 292, 294, 295, 296, 297, 298, 300, 335, 348, 349, 353, 355, 357, 358, 361, 382, 383, 391, 392, 397, 398, 412, 417, 427, 437, 442, 464, 468, 476, 505, 581, 583, 610, 613, 647, 667, 680, 682, 684, 686, 687, 688, 691, 692], "34": [31, 32, 33, 34, 153, 295, 296, 297, 298, 417, 485, 684, 691], "product": [33, 42, 114, 153, 260, 261, 262, 297, 308, 382, 417, 689, 690], "percentil": [35, 120, 300, 386], "datetime_is_numer": [35, 300], "descript": [35, 69, 300, 566, 672, 682], "statist": [35, 69, 131, 167, 169, 270, 300, 397, 566, 647, 658, 659, 682], "summar": [35, 300, 566, 687], "central": [35, 300, 566], "tendenc": [35, 300, 566], "dispers": [35, 300, 566], "shape": [35, 49, 92, 139, 147, 300, 316, 404, 410, 566, 680, 684, 688, 691], "dataset": [35, 167, 169, 300, 363, 566, 647, 649, 653, 654, 657, 658, 659, 688], "distribut": [35, 136, 300, 402, 566, 682], "analyz": [35, 300, 566, 682], "well": [35, 116, 141, 216, 239, 300, 405, 459, 523, 663, 680, 684], "vari": [35, 300, 635, 661, 662, 663, 664, 682], "depend": [35, 50, 93, 123, 160, 165, 166, 168, 203, 234, 258, 300, 423, 428, 430, 431, 536, 541, 644, 645, 656, 657, 665, 666, 680, 682, 684, 690], "what": [35, 300, 469, 680, 688, 689, 692], "detail": [35, 183, 188, 195, 281, 300, 583, 605, 611, 624, 626, 653, 654, 658, 659, 681, 682, 687, 688, 692], "fall": [35, 300, 610, 680, 690], "between": [35, 50, 72, 109, 116, 117, 120, 270, 285, 292, 294, 300, 337, 379, 384, 386, 480, 482, 488, 494, 515, 521, 522, 524, 532, 533, 567, 574, 583, 595, 680, 681, 685, 687, 688, 689, 690, 691, 692], "25": [35, 39, 45, 60, 62, 69, 74, 75, 90, 103, 104, 131, 285, 300, 328, 331, 343, 344, 359, 371, 372, 384, 397, 476, 566, 620, 663, 664, 682, 684, 688], "75": [35, 69, 300, 384, 558, 566, 577, 602, 692], "25th": [35, 300], "50th": [35, 300], "75th": [35, 300], "submit": [35, 300], "instead": [35, 69, 110, 118, 126, 131, 169, 190, 203, 240, 260, 300, 324, 342, 380, 392, 397, 454, 464, 483, 485, 494, 533, 595, 613, 680, 682, 690, 691], "style": [35, 44, 60, 93, 122, 300, 328, 682, 688], "select_dtyp": [35, 300], "o": [35, 300, 476, 680, 689], "select": [35, 43, 54, 63, 67, 83, 85, 96, 105, 123, 164, 243, 300, 309, 310, 321, 332, 335, 350, 353, 427, 656, 657, 658, 659, 672, 680, 685, 689], "omit": [35, 43, 177, 300, 309, 473, 566, 656], "noth": [35, 169, 300, 495], "output_fram": [35, 300], "summari": [35, 69, 300, 566, 689], "mean": [35, 47, 60, 114, 115, 126, 153, 281, 300, 314, 328, 382, 383, 392, 417, 479, 540, 558, 566, 577, 602, 682, 684, 685, 687, 688, 691, 692], "std": [35, 300, 566, 684, 685, 687], "50": [35, 43, 62, 69, 125, 126, 205, 300, 309, 331, 384, 391, 392, 566, 662, 684, 686, 688], "median": [35, 300, 687], "top": [35, 120, 300, 386, 464, 672, 682], "freq": [35, 54, 83, 109, 126, 144, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 199, 200, 202, 300, 312, 321, 350, 379, 392, 407, 444, 575, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 621, 622, 624, 625, 626, 627, 628, 682], "most": [35, 96, 177, 282, 300, 439, 494, 533, 659, 673, 680, 682, 685], "frequenc": [35, 96, 126, 177, 183, 188, 195, 300, 392, 439, 447, 605, 611, 624], "timestamp": [35, 46, 74, 75, 103, 104, 131, 165, 169, 300, 343, 344, 371, 372, 397, 428, 512, 605, 611, 624, 657, 665, 682, 685, 691, 692], "highest": [35, 96, 120, 300, 386, 455, 532, 533], "arbitrarili": [35, 300], "chosen": [35, 136, 300, 402], "among": [35, 42, 300, 308, 583, 692], "analysi": [35, 300, 583], "consist": [35, 139, 223, 224, 225, 226, 227, 231, 232, 256, 300, 404, 680, 688], "union": [35, 93, 160, 166, 270, 300, 423, 430, 464, 465, 466, 467, 468, 469, 470, 473, 478, 528, 529, 542, 635, 663], "00000": [35, 146, 300, 409], "50000": [35, 300], "02765": [35, 300], "25000": [35, 300], "75000": [35, 300], "datetime64": [35, 45, 46, 74, 75, 103, 104, 118, 126, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 199, 200, 300, 343, 344, 371, 372, 392, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 665, 686, 690, 691], "2000": [35, 126, 184, 189, 192, 193, 196, 200, 300, 392, 606, 610, 612, 613, 614, 616, 617, 621, 622, 625, 626, 628], "2010": [35, 300, 613, 620, 684], "2006": [35, 300, 613], "09": [35, 54, 83, 126, 131, 300, 321, 350, 392, 397, 610, 614, 616, 617, 626, 682], "08": [35, 118, 122, 126, 131, 183, 185, 186, 187, 188, 191, 194, 199, 300, 392, 397, 607, 608, 609, 610, 614, 623, 627, 661, 662, 663, 664], "2004": [35, 300, 613], "31": [35, 126, 183, 185, 186, 187, 188, 191, 193, 194, 199, 200, 300, 392, 607, 608, 609, 610, 613, 614, 618, 619, 622, 623, 626, 627, 628, 629, 630, 631, 633], "field": [35, 169, 300, 554, 635, 654, 680], "classmethod": [36, 37, 56, 57, 58, 64, 207, 208, 214, 215, 220, 259, 260, 261, 262, 301, 302, 323, 324, 325, 326, 333], "header": [36, 37, 38, 49, 64, 65, 159, 207, 208, 209, 220, 221, 301, 302, 303, 316, 333, 334, 654, 680], "represent": [36, 69, 141, 178, 179, 207, 239, 255, 260, 301, 405, 440, 441, 473, 686, 689], "subclass": [36, 37, 64, 131, 141, 203, 207, 208, 220, 239, 301, 302, 333, 355, 397, 405, 680], "implement": [36, 89, 109, 141, 176, 207, 239, 269, 301, 358, 379, 405, 552, 656, 680, 682, 685, 688, 690], "how": [36, 45, 56, 79, 93, 109, 120, 132, 141, 164, 176, 207, 212, 234, 239, 301, 311, 379, 386, 398, 405, 427, 454, 656, 682, 684, 688, 689, 690], "construct": [36, 111, 141, 182, 207, 239, 253, 301, 405, 444, 652, 680], "metadata": [36, 37, 38, 64, 65, 141, 169, 207, 208, 209, 220, 221, 239, 301, 302, 303, 333, 334, 405, 635, 648, 650, 658, 659], "reconstruct": [36, 37, 38, 64, 65, 141, 207, 208, 209, 220, 221, 239, 301, 302, 303, 333, 334, 405], "buffer": [36, 37, 38, 64, 65, 69, 141, 207, 208, 209, 220, 221, 239, 299, 301, 302, 303, 333, 334, 376, 405, 656, 690], "memoryview": [36, 37, 38, 64, 65, 141, 207, 208, 209, 220, 221, 239, 301, 302, 303, 333, 334, 405], "serializ": [36, 37, 64, 141, 165, 207, 208, 220, 239, 301, 302, 333, 405, 428], "instanc": [36, 37, 54, 64, 83, 142, 207, 208, 220, 269, 301, 302, 321, 333, 350, 473, 481, 489, 521, 530, 654, 680, 682], "cl": [36, 37, 64, 207, 208, 220, 301, 302, 333], "wa": [36, 37, 64, 207, 208, 220, 242, 301, 302, 333, 685], "produc": [36, 37, 64, 111, 122, 136, 207, 208, 220, 301, 302, 333, 402, 464, 652, 657, 682, 687, 688, 692], "meta": [36, 37, 38, 64, 65, 141, 158, 207, 208, 209, 220, 221, 239, 301, 302, 303, 333, 334, 405], "privat": [36, 37, 38, 64, 65, 141, 207, 208, 209, 220, 221, 239, 301, 302, 303, 333, 334, 405], "devic": [37, 38, 64, 141, 166, 208, 209, 220, 239, 281, 282, 302, 303, 333, 405, 430, 635, 680], "side": [37, 64, 93, 122, 126, 139, 208, 218, 220, 252, 253, 302, 333, 388, 392, 404, 474, 517, 519, 525, 534, 537, 543, 553, 644, 683], "deseri": [37, 64, 141, 208, 220, 239, 302, 333, 405], "task": [37, 64, 208, 220, 302, 333, 680, 682, 688, 692], "primari": [37, 208, 302, 680], "purpos": [37, 208, 302, 680], "creation": [37, 208, 302, 689], "memori": [37, 38, 65, 69, 92, 159, 162, 166, 208, 209, 221, 244, 281, 302, 303, 334, 360, 425, 430, 634, 635, 645, 657, 659, 680, 681, 682, 684, 690], "host": [37, 65, 166, 179, 208, 221, 270, 302, 334, 430, 441, 659, 680], "necessari": [37, 42, 160, 208, 302, 308, 423, 680, 682, 688], "associ": [38, 65, 209, 221, 270, 303, 334, 686, 692], "period": [39, 54, 83, 109, 126, 131, 144, 184, 189, 192, 193, 196, 200, 304, 321, 350, 379, 392, 397, 407, 567, 575, 606, 612, 618, 619, 621, 622, 625, 626, 628, 682], "discret": [39, 304, 644], "calcul": [39, 69, 109, 131, 150, 180, 191, 218, 292, 304, 325, 379, 397, 412, 442, 567, 583, 620, 637, 638, 639, 640, 641, 642, 643, 665, 682, 684, 689], "compar": [39, 49, 210, 222, 304, 316, 342, 578, 661, 662, 663, 664, 672, 683, 687, 691, 692], "previou": [39, 122, 254, 304], "shift": [39, 109, 285, 304, 379, 567], "neg": [39, 63, 124, 157, 238, 304, 332, 390, 421, 490, 495, 567], "take": [39, 105, 110, 162, 244, 282, 380, 425, 473, 515, 558, 567, 577, 602, 636, 645, 684, 688], "gdf": [39, 566, 569, 578, 581, 583, 682, 683, 686], "16": [39, 131, 139, 355, 397, 404, 476, 492, 493, 665, 682, 688, 690], "36": [39, 131, 397, 682, 688], "divis": [40, 41, 55, 121, 128, 135, 174, 190, 306, 307, 322, 387, 394, 401, 435, 613], "truediv": [40, 41, 306, 307], "inf": [40, 41, 74, 75, 103, 104, 121, 135, 174, 306, 307, 343, 344, 371, 372, 387, 401, 435], "flexibl": [42, 164, 308, 427, 680, 682, 684, 688, 691], "wrapper": [42, 308, 680, 688], "sub": [42, 152, 308, 416, 477, 488, 494, 529, 532, 533], "mul": [42, 98, 308, 365], "div": [42, 308], "mod": [42, 308], "pow": [42, 308], "swap": [42, 308], "operand": [42, 308], "http": [42, 282, 308, 481, 536, 541, 550, 551, 583, 653, 654, 657, 658, 659, 660, 665, 690], "doc": [42, 282, 308, 536, 541, 626, 657, 665, 684, 692], "org": [42, 282, 308, 536, 541, 583, 665], "datamodel": [42, 308], "html": [42, 282, 308, 536, 541, 550, 551, 665], "__ror__": [42, 308], "70": [42, 308], "174": [42, 308], "remov": [43, 44, 127, 178, 179, 255, 258, 309, 310, 311, 393, 440, 441, 461, 463, 485, 486, 487, 519, 523, 524, 537, 543, 680, 688], "multi": [43, 50, 79, 256, 309, 651, 681, 682, 689], "keyerror": [43, 309], "found": [43, 93, 139, 233, 264, 270, 309, 355, 404, 489, 494, 526, 530, 531, 533, 535, 536, 541, 547, 626, 654, 680, 683], "dropna": [43, 47, 60, 96, 106, 149, 164, 177, 309, 314, 328, 330, 363, 377, 427, 439, 464, 561, 582, 689], "drop_dupl": [43, 309], "duplic": [43, 44, 102, 105, 123, 142, 211, 249, 309, 310, 370, 373, 528, 644, 654, 692], "certain": [43, 44, 93, 309, 523, 536, 541, 688], "reindex": [43, 309, 569, 672, 683], "midx": [43, 145, 242, 257, 265, 309, 408], "from_product": [43, 240, 260, 262, 309], "40": [43, 126, 183, 191, 194, 309, 388, 392, 478, 623, 682], "lama": [43, 309, 310, 342], "falcon": [43, 60, 63, 73, 127, 177, 309, 328, 332], "speed": [43, 60, 127, 309, 328, 566, 654, 665, 684], "weight": [43, 136, 309, 402], "length": [43, 47, 54, 83, 87, 93, 125, 136, 138, 148, 181, 233, 248, 270, 309, 314, 321, 350, 356, 391, 402, 411, 443, 466, 467, 482, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 536, 541, 552, 553, 575, 635, 644, 646, 688], "big": [43, 69, 309], "small": [43, 309, 654, 658, 680, 684, 685, 687, 688], "45": [43, 195, 309, 605, 611, 624, 665, 688], "200": [43, 122, 205, 282, 309, 684], "100": [43, 116, 125, 126, 190, 205, 242, 282, 309, 328, 391, 392, 505, 507, 613, 662, 682, 684, 688, 691], "250": [43, 309], "150": [43, 309], "320": [43, 309], "subset": [44, 45, 54, 83, 140, 156, 164, 177, 243, 321, 350, 420, 427, 654, 685, 687], "keep": [44, 45, 87, 102, 105, 108, 120, 176, 181, 211, 310, 311, 356, 370, 373, 386, 443, 485, 486], "identifi": [44, 74, 75, 91, 103, 104, 147, 164, 343, 344, 371, 372, 410, 427, 480, 487, 530, 531, 626, 651, 656], "drop": [44, 45, 47, 108, 112, 127, 142, 149, 211, 212, 258, 310, 311, 314, 393, 464, 644, 689, 692], "occurr": [44, 102, 105, 211, 310, 370, 373, 479, 489, 515, 526, 529, 535, 682], "place": [44, 72, 87, 122, 125, 127, 132, 141, 142, 147, 165, 176, 181, 239, 337, 356, 391, 393, 398, 405, 410, 428, 437, 443, 455, 457, 463, 473, 485, 486, 487, 515, 654, 658, 659, 690, 691], "brand": 44, "yum": 44, "indomi": 44, "cup": 44, "pack": 44, "rate": 44, "being": [44, 114, 115, 153, 169, 194, 310, 382, 383, 417, 465, 488, 494, 532, 533, 538, 623, 661, 662, 663, 664, 682, 688], "guarante": [44, 136, 310, 402, 470, 583, 654, 687, 692], "thresh": 45, "decid": [45, 212], "least": [45, 108, 176, 212, 330, 464, 515, 686, 688], "isna": [45, 311, 691], "notna": [45, 311, 691], "alfr": [45, 74, 75, 103, 104, 343, 344, 371, 372], "batman": [45, 74, 75, 103, 104, 343, 344, 371, 372], "catwoman": 45, "toi": [45, 74, 75, 103, 104, 343, 344, 371, 372, 498, 499, 688], "batmobil": [45, 74, 75, 103, 104, 343, 344, 371, 372], "bullwhip": 45, "born": [45, 74, 75, 103, 104, 343, 344, 371, 372], "1940": [45, 74, 75, 103, 104, 343, 344, 371, 372], "look": [45, 680, 684, 685, 688], "20180310": 46, "ax": [47, 111, 164, 178, 179, 255, 314, 427, 440, 441, 454, 540, 652, 657, 668, 675], "still": [47, 314], "we": [47, 73, 105, 122, 123, 126, 203, 314, 363, 392, 515, 656, 680, 682, 684, 685, 686, 688, 691, 692], "our": [47, 314, 680, 682, 684, 688, 692], "test": [49, 63, 316, 332, 342, 478, 483, 524, 542, 654, 672, 682, 685, 692], "exactly_equ": [49, 316], "different_column_typ": [49, 316], "expr": [50, 118], "evalu": [50, 483, 500, 542, 682], "describ": [50, 69, 164, 165, 427, 428, 527, 658, 659, 687], "express": [50, 118, 478, 479, 483, 484, 489, 520, 529, 531, 536, 541, 542, 658, 659, 689], "mutat": 50, "typic": [50, 680, 692], "statement": [50, 682, 688], "bitwis": [50, 688], "logic": [50, 93, 281, 658, 659, 680, 682, 688], "boolean": [50, 73, 74, 75, 85, 88, 89, 94, 103, 104, 108, 116, 118, 122, 123, 142, 167, 168, 190, 197, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245, 254, 264, 268, 280, 282, 287, 338, 339, 340, 341, 342, 343, 344, 353, 357, 358, 361, 371, 372, 375, 384, 388, 389, 431, 451, 465, 478, 483, 486, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 520, 542, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 613, 614, 615, 616, 617, 618, 619, 646, 654, 657, 658, 659, 688, 689], "automat": [50, 56, 270, 325, 583, 657, 682, 687, 691], "respons": 50, "suitabl": [50, 139, 165, 404, 428, 680], "later": 50, "condit": [50, 87, 118, 181, 356, 443, 682, 688], "upon": [50, 141, 239, 405], "earlier": 50, "though": [50, 682, 688], "modifi": [50, 127, 142, 176, 240, 393, 437, 569, 657], "line": [50, 63, 165, 332, 428, 494, 533, 552, 654, 657, 684], "replic": [51, 317], "22": [51, 126, 191, 238, 392, 476, 682, 691], "44": [51, 188, 688], "ffill": [53, 107, 109, 254, 320, 378, 379, 569], "forward": [53, 320, 568, 569, 573, 588, 594], "next": [53, 254, 320, 489, 569, 680, 682, 684, 688], "backward": [53, 320, 559, 560, 579, 580], "initi": [54, 321, 680, 682], "time": [54, 83, 109, 124, 126, 131, 157, 159, 165, 238, 270, 282, 321, 350, 379, 390, 392, 397, 421, 428, 472, 479, 544, 545, 549, 583, 654, 658, 659, 665, 672, 680, 684, 685, 688, 689, 691], "date": [54, 83, 165, 182, 190, 194, 321, 350, 428, 610, 613, 614, 615, 616, 617, 618, 619, 623, 626, 654, 657, 665, 682, 685], "few": [54, 83, 321, 350, 680, 688, 691, 692], "1m": [54, 321, 610], "displai": [54, 69, 83, 120, 321, 350, 386, 644], "month": [54, 183, 188, 195, 321, 605, 610, 611, 614, 615, 624, 665], "typeerror": [54, 56, 57, 83, 125, 210, 215, 259, 312, 321, 323, 326, 342, 350, 391, 515, 666, 688], "datetimeindex": [54, 83, 321, 350, 665, 672], "date_rang": [54, 83, 126, 184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 312, 321, 350, 392, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 682], "2d": [54, 83, 321, 350, 645], "ts": [54, 83, 321, 350], "3d": [54, 83, 321, 350], "9223372036854775807": [55, 128, 322, 394, 682], "tabl": [56, 71, 111, 157, 158, 164, 165, 167, 259, 421, 427, 428, 486, 548, 652, 657, 680, 682, 687, 690], "pyarrow": [56, 158, 259, 323, 422, 658, 659, 682], "doe": [56, 60, 73, 123, 160, 164, 281, 282, 312, 328, 423, 427, 463, 536, 578, 651, 666, 680, 683, 686, 687, 688, 692], "similar": [56, 93, 147, 164, 281, 410, 427, 536, 541, 661, 662, 664, 685, 687, 688, 691, 692], "to_panda": [56, 682, 685, 687, 688, 691, 692], "work": [56, 131, 397, 439, 634, 635, 680, 681, 682, 686, 687, 688, 689], "pa": [56, 259, 323], "record": [58, 93, 120, 165, 386, 428, 521, 657], "recarrai": [58, 170], "ndim": 58, "greater": [59, 61, 70, 287, 327, 329, 553, 583, 666, 686], "as_index": [60, 328], "group_kei": [60, 328], "squeez": [60, 328], "group": [60, 120, 164, 167, 328, 386, 427, 439, 484, 531, 558, 562, 563, 564, 565, 567, 570, 571, 572, 574, 575, 576, 577, 578, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 650, 656, 658, 659, 680, 683, 685, 688, 689, 691, 692], "mapper": [60, 123, 328], "involv": [60, 270, 328, 680], "some": [60, 72, 122, 264, 328, 337, 413, 468, 479, 529, 578, 665, 680, 682, 683, 687, 688, 690, 692], "combin": [60, 142, 177, 328, 454, 480, 519, 536, 537, 543, 558, 577, 602, 658, 659, 672, 682, 690], "split": [60, 165, 253, 328, 428, 476, 522, 526, 535, 536, 546, 547, 657, 660, 672, 682, 690], "larg": [60, 136, 328, 402, 680, 685, 687], "amount": [60, 69, 328, 680, 688], "notic": [60, 264, 328, 686, 688], "interpret": [60, 164, 328, 427, 492, 493, 536, 541, 654, 658, 659], "hierarch": [60, 88, 89, 94, 164, 175, 256, 328, 357, 358, 361, 427, 667, 680, 682], "particular": [60, 88, 89, 94, 328, 357, 358, 361, 413, 479, 654, 680, 687, 692], "relev": [60, 328], "sql": [60, 93, 328, 682], "influenc": [60, 328, 690], "preserv": [60, 125, 282, 328, 391, 605, 611, 624, 654, 691], "dataframegroupbi": [60, 671], "about": [60, 69, 328, 583, 634, 635, 680, 682, 690], "anim": [60, 73, 310, 342, 454], "parrot": [60, 63, 127, 328, 332, 478], "380": [60, 566], "370": [60, 328, 566], "375": 60, "captiv": 60, "wild": 60, "from_arrai": [60, 222, 248], "390": [60, 328, 684], "350": [60, 328], "185": 60, "210": [60, 684], "murmur3": [62, 331], "hash": [62, 108, 331, 634], "md5": [62, 331], "murmurhash3": [62, 331], "120": [62, 331, 477], "1930516747": [62, 331], "422619251": [62, 331], "941520876": [62, 331], "7be4bbacbfdb05fb3044e36c22b41e8b": [62, 331], "947ca8d2c5f0f27437f156cfbfab0969": [62, 331], "d0580ef52d27c043c8e341fd5039b166": [62, 331], "330519225": [62, 331], "397962448": [62, 331], "1345834934": [62, 331], "57ce879751b5169c525907d5c563fae1": [62, 331], "948d6221a7c4963d4be411bcead7e32b": [62, 331], "fe061786ea286a515b772d91b0dfcd70": [62, 331], "quickli": [63, 332, 684], "your": [63, 122, 123, 332, 682, 684, 688], "right": [63, 79, 93, 126, 131, 139, 218, 227, 234, 252, 253, 287, 305, 332, 392, 397, 404, 474, 488, 494, 517, 525, 532, 533, 537, 541, 543, 553, 644, 646, 661, 662, 663, 664, 685, 686], "tail": [63, 332], "allig": [63, 332], "bee": [63, 332, 519, 537, 543], "lion": [63, 127, 332, 489], "monkei": [63, 127, 332, 454, 489], "shark": [63, 332], "whale": [63, 332], "zebra": [63, 332], "view": [63, 160, 166, 332, 423, 430, 569, 680, 689], "three": [63, 105, 111, 332, 480, 644, 652, 680, 684, 688, 690], "iloc": [66, 578, 682, 683, 688, 691], "18": [67, 126, 131, 132, 183, 188, 191, 194, 335, 392, 397, 398, 476, 623, 632, 682, 686], "slice": [67, 218, 254, 264, 335, 540, 672, 680, 682, 683], "verbos": 69, "buf": 69, "max_col": 69, "memory_usag": 69, "null_count": [69, 325], "print": [69, 123, 131, 171, 397, 432, 578, 665, 684], "concis": 69, "usag": [69, 92, 360, 657, 682], "full": [69, 93, 164, 427, 595, 656, 682, 684, 685, 692], "max_info_column": 69, "writabl": 69, "sy": 69, "stdout": 69, "send": 69, "you": [69, 110, 127, 203, 380, 393, 476, 486, 521, 595, 644, 680, 682, 684, 686, 687, 688, 691, 692], "further": 69, "process": [69, 171, 432, 682, 684, 687, 688], "switch": [69, 665], "truncat": [69, 635], "total": [69, 92, 360, 553, 610, 650, 653, 658, 659, 686, 688], "alwai": [69, 100, 120, 136, 243, 281, 363, 386, 402, 515, 654, 680, 687, 688, 690, 692], "never": [69, 466, 680, 688], "introspect": 69, "shown": [69, 489], "human": 69, "readabl": 69, "unit": [69, 165, 428, 444, 657, 665], "estim": [69, 294, 583], "made": [69, 160, 172, 264, 423, 554, 683, 691], "assum": [69, 305, 478, 482, 529, 536, 541, 583, 645, 680, 688], "consum": [69, 688], "real": 69, "cost": 69, "smaller": [69, 92, 487], "max_info_row": 69, "int_valu": 69, "text_valu": 69, "alpha": [69, 102, 105], "beta": 69, "gamma": [69, 282], "delta": [69, 150, 180, 412, 442, 444, 583, 598, 601, 641, 643], "epsilon": 69, "float_valu": 69, "int_col": 69, "text_col": 69, "float_col": 69, "core": [69, 168, 246, 259, 299, 431, 672, 680, 682, 688, 691], "130": 69, "byte": [69, 92, 360, 471, 551, 634, 647, 653, 654, 657, 658, 659, 680, 690], "its": [69, 110, 158, 176, 285, 380, 665, 680, 682, 690], "pipe": [69, 687], "content": [69, 164, 427, 515, 680, 688], "io": [69, 654, 658, 659, 672, 689], "stringio": [69, 654, 657, 660], "getvalu": 69, "mode": [69, 164, 427, 656, 690], "special": [69, 201, 251, 453, 479, 503, 515, 553, 635, 680, 686, 692], "fine": 69, "tune": [69, 690], "random_strings_arrai": 69, "random": [69, 136, 169, 402, 583, 682, 684, 691, 692], "column_1": 69, "column_2": 69, "column_3": 69, "1000000": [69, 167, 169, 282], "999999": 69, "mb": [69, 647, 682], "num": [70, 682], "interleav": [71, 157, 421], "major": [71, 645, 692], "a1": [71, 484, 684], "a2": [71, 684], "a3": [71, 684], "b1": 71, "b2": [71, 484], "b3": 71, "linear": [72, 116, 337, 384, 574, 680, 684, 685], "limit_direct": [72, 337], "limit_area": [72, 337], "downcast": [72, 213, 337, 569, 666], "techniqu": [72, 337], "space": [72, 169, 337, 480, 515, 522, 523, 526, 536, 545, 654], "linearli": [72, 337], "unsort": [72, 337, 685], "lead": [72, 159, 337, 519, 537, 543, 583, 684, 685, 688], "erron": [72, 337], "num_leg": [73, 177], "num_w": [73, 177], "check": [73, 142, 223, 224, 225, 226, 227, 231, 232, 233, 256, 305, 342, 463, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 550, 551, 661, 662, 663, 664, 684, 692], "present": [73, 114, 115, 153, 382, 383, 417, 464, 515, 536, 541, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 635], "leg": [73, 96], "wing": [73, 96], "separ": [73, 473, 480, 521, 522, 526, 535, 536, 541, 646, 660, 675, 680], "spider": 73, "everyth": [74, 75, 88, 89, 94, 343, 344, 357, 358, 361, 454, 540, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603], "mask": [74, 75, 85, 103, 104, 125, 254, 264, 282, 325, 343, 344, 353, 371, 372, 375, 376, 391, 680, 691], "timedelta64": [74, 75, 103, 104, 343, 344, 371, 372, 444, 629, 630, 631, 632, 633, 690, 691], "charact": [74, 75, 103, 104, 343, 344, 371, 372, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 492, 493, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 522, 523, 525, 529, 530, 534, 537, 541, 543, 544, 545, 546, 548, 549, 550, 551, 553, 634, 654, 680], "incas": [74, 75, 103, 104, 343, 344, 371, 372], "1939": [74, 75, 103, 104, 343, 344, 371, 372], "05": [74, 75, 103, 104, 126, 183, 185, 186, 187, 188, 191, 194, 195, 199, 285, 343, 344, 371, 372, 392, 605, 607, 608, 609, 610, 611, 623, 624, 627, 661, 662, 663, 664, 665, 682], "27": [74, 75, 103, 104, 343, 344, 371, 372, 476, 614, 616, 617, 682], "joker": [74, 75, 103, 104, 343, 344, 371, 372], "000000": [74, 75, 103, 104, 126, 137, 343, 344, 371, 372, 392, 403, 581, 583, 684, 687, 691], "isnul": [74, 343], "32": [74, 75, 103, 104, 132, 343, 344, 371, 372, 398], "float64index": [74, 75, 103, 104, 145, 215, 343, 344, 371, 372, 408], "genericindex": [74, 75, 103, 104, 343, 344, 371, 372, 464, 465, 466, 467, 468, 469, 470, 478, 680], "left": [79, 93, 123, 126, 132, 139, 176, 218, 227, 234, 252, 253, 287, 305, 392, 398, 404, 474, 488, 494, 519, 525, 529, 532, 533, 534, 543, 548, 553, 644, 661, 662, 663, 664, 682, 685], "lsuffix": [79, 93], "rsuffix": [79, 93], "inner": [79, 93, 234, 454, 658, 659], "outer": [79, 93, 234, 454, 659], "suffic": [79, 688], "avoid": [79, 281, 680, 690, 692], "conflict": 79, "ensur": [79, 160, 166, 423, 430, 478, 659, 682], "now": [79, 646, 680, 682, 684, 688], "due": [79, 578, 654, 682, 683, 685, 688], "lack": 79, "five": [80, 282], "int64index": [80, 145, 205, 210, 213, 222, 233, 234, 237, 238, 240, 242, 246, 248, 258, 289, 408, 479, 663, 680], "fisher": [81, 82, 146, 348, 349, 409], "unbias": [81, 82, 146, 180, 294, 348, 349, 409, 442, 583], "kurtosi": [81, 348], "sampl": [81, 82, 146, 150, 292, 348, 349, 409, 412, 426, 682], "obtain": [81, 82, 282, 348, 349, 552, 692], "definit": [81, 82, 271, 348, 349, 368, 434, 583], "normal": [81, 82, 136, 150, 177, 180, 182, 294, 348, 349, 402, 412, 439, 442, 523, 583, 598, 601, 658, 659, 684], "1999999999999904": [81, 82, 348, 349], "kurt": [82, 349], "final": [83, 350, 658, 659, 680, 688], "dai": [83, 169, 182, 185, 186, 187, 190, 191, 199, 312, 350, 444, 445, 450, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 627, 629, 631, 633, 665, 688, 691], "cond": [87, 181, 356, 443], "dimens": [87, 100, 181, 356, 368, 443], "collaps": [88, 89, 94, 357, 358, 361], "attempt": [88, 89, 94, 203, 210, 264, 357, 358, 361, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603, 646, 654, 665, 683, 688], "17": [90, 126, 131, 139, 285, 359, 392, 397, 404, 476, 682, 691], "unpivot": [91, 651], "wide": [91, 651, 688], "format": [91, 159, 163, 164, 165, 167, 169, 171, 427, 428, 432, 512, 513, 550, 551, 552, 569, 626, 651, 654, 657, 665, 680, 681, 682, 683, 684, 685, 686, 690], "long": [91, 552, 651, 657], "id_var": [91, 651], "value_var": [91, 651], "var_nam": [91, 651], "value_nam": [91, 651], "whose": [92, 111, 554, 646, 652, 680], "ones": [92, 462], "5000": 92, "astyp": [92, 224, 232, 682], "head": [92, 682, 684, 688, 692], "40000": [92, 282], "storag": [92, 689], "mani": [92, 370, 373, 583, 673, 680, 682, 685, 686, 688, 690, 692], "repeat": [92, 157, 421, 479, 672], "5008": 92, "43": [92, 632, 688], "give": [92, 270, 680, 684, 687], "rest": [92, 513, 540, 545], "necessarili": [92, 175, 667], "left_on": 93, "right_on": 93, "left_index": [93, 685], "right_index": [93, 685], "_x": 93, "_y": 93, "databas": 93, "join": [93, 176, 454, 654, 672, 681, 685, 689, 692], "intersect": [93, 454], "leftsemi": 93, "leftanti": 93, "exact": [93, 116, 136, 254, 384, 402, 644, 663, 665], "opposit": 93, "were": [93, 461, 547, 682, 688], "overlap": [93, 140, 176, 454, 486, 489, 635, 644], "determinist": [93, 692], "df_a": [93, 682], "vals_a": [93, 682], "df_b": [93, 682], "vals_b": [93, 682], "df_merg": 93, "sort_valu": [93, 682], "typecast": 93, "ambigu": [93, 182], "exactli": [93, 661, 662, 663, 664, 687], "extend": [93, 644, 682], "semi": [93, 583], "anti": 93, "modulo": [95, 129, 362, 395], "4294967295": [95, 129, 362, 395], "appear": [96, 120, 325, 370, 373, 386, 480], "often": [96, 671, 685, 688, 691], "search": [96, 164, 264, 427, 465, 478, 488, 489, 494, 530, 532, 533, 681, 691, 692], "don": [96, 106, 123, 177, 363, 377, 439, 561, 582, 657, 685, 688, 691], "value_count": [96, 682], "speci": [96, 240], "bird": [96, 127, 454], "mammal": [96, 127], "arthropod": 96, "multipli": [97, 364, 688], "largest": [102, 370], "priorit": [102, 688], "popul": [102, 105, 684, 688], "59000000": [102, 105, 370, 373], "65000000": [102, 105, 370, 373], "434000": [102, 105, 370, 373], "337000": [102, 105, 370, 373], "11300": [102, 105, 370, 373], "gdp": [102, 105], "1937894": [102, 105], "2583560": [102, 105], "12011": [102, 105], "4520": [102, 105], "12128": [102, 105], "17036": [102, 105], "182": [102, 105], "38": [102, 105, 154, 418, 686], "311": [102, 105], "IT": [102, 105], "fr": [102, 105], "mt": [102, 105], "mv": [102, 105], "bn": [102, 105], "IS": [102, 105, 544, 549], "nr": [102, 105], "tv": [102, 105], "ai": [102, 105, 145, 408, 517, 520, 532, 534, 550, 551, 653], "itali": [102, 105, 370, 373], "franc": [102, 105, 370, 373], "malta": [102, 105, 370, 373], "maldiv": [102, 105, 370, 373], "brunei": [102, 105, 370, 373], "iceland": [102, 105, 370, 373], "nauru": [102, 105, 370, 373], "tuvalu": [102, 105, 370, 373], "anguilla": [102, 105, 370, 373], "notnul": [103, 371], "smallest": [105, 120, 373, 386, 666], "retriev": [105, 491, 656], "ti": [105, 120, 254, 386], "resolv": 105, "revers": [105, 370, 373, 682], "distinct": [106, 342, 680], "npart": 108, "keep_index": [108, 138], "partit": [108, 169, 647, 659, 672, 682], "fill_method": [109, 379], "percent": [109, 379], "sequenti": [109, 379, 687, 688, 692], "form": [109, 111, 120, 157, 222, 248, 379, 386, 421, 502, 505, 506, 507, 508, 647, 652, 658, 659, 680, 685], "handl": [109, 159, 164, 165, 176, 310, 379, 413, 427, 428, 454, 536, 541, 553, 656, 666, 672, 680, 681, 690], "consecut": [109, 124, 238, 379, 390, 475, 521, 522, 654], "stop": [109, 145, 269, 347, 379, 408, 538, 539, 540, 656], "increment": [109, 379, 647], "data_keyword": [110, 380, 595], "chain": [110, 380], "groupbi": [110, 380, 672, 680, 681, 682, 683, 685, 689, 692], "write": [110, 159, 163, 164, 165, 167, 169, 380, 427, 428, 647, 649, 654, 656, 682, 684, 688, 690], "arg2": [110, 380], "arg3": [110, 380], "sai": [110, 380, 491, 688], "suppos": [110, 380], "reshap": [111, 149, 652, 672, 684], "organ": [111, 652], "rearrang": [111, 652], "exponenti": [113, 133, 381, 399], "min_count": [114, 115, 153, 382, 383, 417, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603], "fewer": [114, 115, 153, 382, 383, 417, 570, 571, 572, 589, 590, 591, 592, 596, 599, 603], "5040": [114, 115, 382, 383], "q": [116, 117, 384, 574, 626], "interpol": [116, 117, 384, 574], "higher": [116, 117, 384, 574, 657, 680, 690], "midpoint": [116, 384, 574], "nearest": [116, 117, 254, 384, 574], "desir": [116, 117, 156, 243, 384, 420, 574, 654, 657, 688, 692], "li": [116, 117, 384, 574], "j": [116, 117, 384, 482, 688], "approxim": [116, 384], "One": [116, 122, 164, 165, 183, 188, 195, 270, 388, 427, 428, 605, 611, 624, 683, 684, 686, 691], "notabl": [116, 147, 410], "doesn": [116, 136, 169, 402, 515, 682, 691], "under": [116, 659, 675, 680, 682], "cp": [116, 635, 682, 684, 688, 691, 692], "55": [116, 238, 688], "local_dict": [118, 682], "local": [118, 647, 653, 654, 656, 657, 658, 659, 660, 682], "filter": [118, 486, 658, 659, 681, 682, 692], "search_dat": [118, 682], "search_date2": 118, "averag": [120, 386, 688], "na_opt": [120, 386], "pct": [120, 386], "through": [120, 386, 478, 479, 484, 489, 520, 548, 672, 680, 688, 690, 691], "direct": [120, 386, 575, 657, 682, 690], "dens": [120, 386, 684], "lowest": [120, 386, 488, 494, 532, 680], "increas": [120, 230, 305, 338, 340, 373, 386, 654, 665], "bottom": [120, 386, 654], "rtruediv": [121, 387], "002778": [121, 135, 387, 401], "333333": [121, 126, 135, 387, 392, 401, 439, 583], "005556": [121, 135, 387, 401], "250000": [121, 135, 387, 401], "toler": [122, 217, 254, 264, 388, 661, 662, 663, 664], "conform": [122, 234, 388], "unless": [122, 413, 536, 541], "either": [122, 132, 136, 148, 168, 176, 216, 282, 393, 398, 402, 411, 431, 473, 478, 646, 653, 654, 657, 658, 659, 660, 682, 684, 688, 690], "even": [122, 160, 281, 363, 423, 654, 657, 688, 691], "convent": [122, 123, 126, 392], "index_label": 122, "column_label": 122, "_highly_": 122, "clarifi": [122, 123], "intent": [122, 123], "fiction": [122, 491], "firefox": 122, "chrome": 122, "safari": 122, "ie10": 122, "konqueror": 122, "http_statu": [122, 683], "404": [122, 684], "301": 122, "response_tim": 122, "new_index": 122, "iceweasel": 122, "comodo": 122, "dragon": 122, "retain": [122, 388, 487, 683, 691], "user_ag": 122, "alter": [123, 169, 237, 389], "throw": [123, 165, 428, 688, 690], "index_mapp": 123, "columns_mapp": 123, "highli": [123, 659, 692], "overwrit": [123, 176, 260], "postfix": 123, "repetit": [124, 238, 390], "newli": [124, 238, 390, 393, 575, 680], "to_replac": [125, 391], "regex": [125, 391, 478, 479, 484, 489, 520, 529, 531, 536, 541], "valueerror": [125, 140, 164, 165, 176, 391, 427, 428, 462, 494, 515, 533, 644, 684, 687], "mismatch": [125, 391, 663, 664], "actual": [125, 391, 515, 680, 682, 688, 691], "exhibit": [125, 391], "silent": [125, 391], "rule": [126, 392], "close": [126, 182, 202, 252, 253, 287, 392, 444, 647, 656, 680, 692], "loffset": [126, 392], "start_dai": [126, 392], "dateoffset": [126, 392], "bin": [126, 305, 392, 439, 644], "interv": [126, 223, 224, 225, 226, 227, 231, 232, 252, 253, 305, 392, 644, 680, 687], "edg": [126, 131, 305, 392, 397, 488, 494, 532, 533, 644], "bucket": [126, 392], "closest": [126, 392], "nanosecond": [126, 165, 169, 392, 428, 445, 629, 657, 665], "millisecond": [126, 165, 392, 428, 445, 629, 657, 665], "ms": [126, 165, 169, 183, 188, 195, 392, 428, 605, 611, 623, 624, 629, 630, 631, 633, 657, 665, 684, 686, 690], "minut": [126, 392, 445, 629, 665, 681, 689], "2001": [126, 195, 200, 312, 392, 605, 610, 611, 613, 624, 628, 685], "1t": [126, 392], "06": [126, 183, 185, 186, 187, 199, 392, 605, 607, 608, 609, 610, 626, 627, 629, 630, 631, 633], "downsampl": [126, 392], "3t": [126, 392], "23": [126, 392, 476, 478, 502, 503, 510, 682, 686, 691], "57": [126, 392, 688], "upsampl": [126, 392], "asfreq": [126, 392], "price": [126, 392, 491, 688], "19": [126, 392, 476, 583, 680, 682, 684], "volum": [126, 392], "60": [126, 392, 682], "week_start": [126, 392], "7d": [126, 392], "29": [126, 193, 392, 476, 614, 616, 617, 620, 622, 682, 692], "28": [126, 392, 476, 610, 614, 616, 617, 682], "63": [126, 392, 687], "col_level": [127, 651], "col_fil": 127, "reset": [127, 280, 393, 454], "try": [127, 393, 657, 666], "389": 127, "80": [127, 566], "max_spe": 127, "from_tupl": [127, 260, 261, 264, 393, 682, 683], "fly": [127, 654, 657], "run": [127, 500, 501, 502, 503, 509, 510, 511, 514, 634, 635, 682, 684, 688, 692], "window": [131, 397, 672, 681, 689, 692], "center": [131, 397, 525, 553, 672, 688], "win_typ": [131, 397], "baseindex": [131, 203, 206, 397, 458, 680], "As": [131, 164, 397, 427, 680, 685, 688], "oppos": [131, 397, 682], "fix": [131, 164, 183, 188, 195, 355, 397, 427, 605, 611, 624, 680, 685, 686], "accommod": [131, 397], "get_window_bound": [131, 397], "20190101": [131, 397], "2s": [131, 397], "2019": [131, 240, 397], "01t09": [131, 397], "000": [131, 397, 500, 650, 654, 655, 658, 659], "math": [131, 282, 397, 688], "49": [131, 397, 684, 688], "64": [131, 397, 680, 688], "81": [131, 397, 688], "some_func": [131, 397], "sqrt": [131, 397, 688], "And": [131, 397, 688], "decim": [132, 165, 398, 428, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 654, 687, 689, 692], "half_even": [132, 398], "half_up": [132, 398], "affect": [132, 398, 690], "67": [132, 398], "66": [132, 398, 684], "subtract": [134, 151, 400, 415], "359": [134, 151, 152, 400, 415, 416], "179": [134, 151, 152, 400, 415, 416], "frac": [136, 402], "random_st": [136, 402], "reproduc": [136, 402], "ident": [136, 171, 402, 432, 454, 536, 541, 600, 661, 662, 663, 664, 692], "fraction": [136, 402, 510], "disallow": [136, 402], "state": [136, 260, 402], "uniform": [136, 402, 644], "probabl": [136, 402], "unlik": [136, 402, 687, 690, 692], "randomst": [136, 402], "seed": [136, 402, 682, 688], "stat": [136, 402, 672, 689], "randomli": [136, 402, 682], "slow": [136, 402, 687], "achiev": [136, 402, 552, 687], "especi": [136, 402, 687], "advis": [136, 402], "826087": [137, 403], "913043": [137, 403], "043478": [137, 403], "map_index": 138, "map_siz": 138, "scatter": 138, "destin": [138, 688], "conserv": 138, "find": [139, 203, 254, 404, 479, 489, 494, 532, 672], "maintain": [139, 404, 682], "hypothet": [139, 404], "monoton": [139, 229, 230, 254, 264, 269, 305, 338, 339, 340, 404], "wrong": [139, 404], "correct": [139, 404, 657, 688], "values_df": [139, 404], "reinterpret": [141, 239, 405], "lightweight": [141, 239, 405], "append": [142, 164, 427, 473, 536, 541, 646], "becom": [142, 684], "too": [142, 489, 688], "hello": [145, 408, 471, 472, 476, 480, 490, 517, 523, 524, 527, 532, 534, 539, 546, 547, 653], "rapid": [145, 408, 490, 517, 520, 532, 534, 550, 551, 646, 653, 682, 684, 688, 691], "37037": [146, 409], "sort_remain": [147, 410], "vs": [147, 148, 410, 411], "quick": [147, 410], "builtin": [147, 410, 653, 654, 657, 658, 659, 660], "vector": [147, 287, 410, 413], "prescrib": 149, "ddof": [150, 180, 412, 442, 583, 598, 601, 641, 643], "deviat": [150, 264, 412, 598, 641, 683, 685], "freedom": [150, 180, 412, 442, 583, 598, 601, 641, 643], "divisor": [150, 180, 412, 442, 598, 601, 641, 643], "290994": [150, 412], "squar": [154, 418], "249": [154, 418], "unsupport": [156, 243, 420, 559, 560, 568, 569, 573, 575, 579, 580, 588, 594, 636, 687], "preserve_index": 158, "save": [158, 169, 647, 680], "path_or_buf": [159, 164, 165, 427, 428, 656, 657], "sep": [159, 473, 515, 522, 526, 535, 654], "na_rep": [159, 473], "line_termin": 159, "encod": [159, 164, 165, 318, 427, 428, 550, 551, 634, 635, 646, 656, 657, 680], "compress": [159, 164, 165, 167, 169, 427, 428, 647, 654, 657, 690], "csv": [159, 654, 672, 689, 690], "file": [159, 163, 164, 165, 167, 169, 427, 428, 494, 533, 634, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 680, 682, 686, 690], "path": [159, 163, 164, 165, 167, 169, 427, 428, 634, 647, 650, 653, 654, 655, 656, 657, 658, 659, 660, 682, 690], "char": [159, 525, 654], "delimit": [159, 165, 428, 487, 515, 522, 530, 536, 541, 546, 547, 654, 657, 660], "utf": [159, 477, 550, 551, 657, 680], "scheme": 159, "read_csv": [159, 682, 685], "quote_nonnumer": [159, 654], "filenam": [159, 165, 428, 647, 650, 654, 655, 658, 659], "set_index": [159, 175, 234, 667, 687], "na_valu": [160, 166, 423, 430, 654], "asarrai": [160, 166, 423, 430, 684, 688], "strictli": [160, 423, 680], "dlpack": [162, 244, 425, 645, 684, 690], "tensor": [162, 244, 425, 635, 645], "open": [162, 164, 244, 287, 425, 427, 439, 645, 648, 653, 654, 656, 657, 658, 659, 660], "dmlc": [162, 244, 425, 645], "pycapsul": [162, 244, 425, 645], "pointer": [162, 244, 425, 645], "cudf_obj": [162, 244, 425], "pycapsule_obj": [162, 244, 425, 645], "encapsul": [162, 244, 425, 645, 680], "feather": [163, 164, 427, 655, 672, 690], "read_feath": 163, "hdf5": [164, 427, 672], "hdfstore": [164, 427, 656, 672], "hdf": [164, 427, 656, 674, 690], "applic": [164, 427, 583, 672, 680], "hold": [164, 223, 224, 225, 226, 227, 231, 232, 427], "relat": [164, 427, 672, 690], "individu": [164, 216, 427, 463, 476, 478, 680, 691], "pleas": [164, 355, 427, 682, 688], "r": [164, 413, 427, 476, 484, 511, 523, 548, 552, 656], "delet": [164, 427], "read": [164, 427, 650, 653, 654, 655, 656, 657, 658, 659, 660, 680, 682, 686, 690], "alreadi": [164, 282, 427, 454, 523, 680, 684, 685], "fast": [164, 427, 657, 680, 682, 685, 692], "searchabl": [164, 427], "pytabl": [164, 427, 672], "wors": [164, 427], "data_column": [164, 427], "disk": [164, 427, 654, 657, 686], "complevel": [164, 427], "disabl": [164, 427, 654, 690], "complib": [164, 427], "zlib": [164, 167, 427], "lzo": [164, 427], "bzip2": [164, 427], "blosc": [164, 427], "librari": [164, 427, 536, 541, 552, 626, 665, 679, 681, 684, 685, 689, 690, 692], "v0": [164, 427], "compressor": [164, 427], "blosclz": [164, 427], "lz4": [164, 427], "lz4hc": [164, 427], "snappi": [164, 167, 169, 427, 647, 690], "zstd": [164, 427], "issu": [164, 427, 685, 688], "fletcher32": [164, 427], "checksum": [164, 427], "written": [164, 169, 427, 647, 688], "strict": [164, 427, 656, 661, 662, 663, 664, 665], "decod": [164, 427, 550, 656, 657], "read_hdf": [164, 427], "to_parquet": [164, 427, 659, 682, 686, 690], "parquet": [164, 169, 427, 658, 659, 672, 685, 689, 690], "to_feath": [164, 427, 655], "json": [165, 428, 491, 657, 672, 690], "unix": [165, 428, 665], "orient": [165, 428, 657], "just": [165, 428, 540, 657, 680, 684, 686, 688], "schema": [165, 428, 650, 657, 659], "compon": [165, 428, 490, 680], "date_format": [165, 428, 626], "epoch": [165, 428, 665], "iso": [165, 191, 428, 620], "convers": [165, 428, 431, 672, 680, 684], "iso8601": [165, 428], "double_precis": [165, 428], "force_ascii": [165, 428], "ascii": [165, 428, 472, 523, 544, 545, 549, 551], "date_unit": [165, 428, 657], "govern": [165, 428], "precis": [165, 428, 644, 657, 686, 692], "ns": [165, 169, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 199, 200, 428, 444, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 625, 626, 627, 628, 632, 657, 665, 684, 686, 690, 691], "microsecond": [165, 428, 445, 449, 629, 632, 633, 657], "default_handl": [165, 428], "handler": [165, 428, 653, 654, 657, 658, 659, 660], "receiv": [165, 428, 666], "incorrect": [165, 428], "sinc": [165, 166, 169, 216, 282, 373, 428, 430, 680, 688, 691], "gzip": [165, 428, 654, 657], "bz2": [165, 428, 657], "xz": [165, 428, 657], "read_json": [165, 428], "fname": [167, 650], "orc": [167, 658, 672, 689, 690], "enable_statist": 167, "stripe_size_byt": 167, "stripe": [167, 169, 658], "67108864": 167, "64mb": 167, "stripe_size_row": 167, "row_index_strid": 167, "10000": [167, 282, 684], "read_orc": [167, 659, 682, 690], "struct": [167, 172, 680, 687, 689, 690, 692], "experiment": [167, 690], "reliabl": 167, "datatyp": [167, 666], "nullabl": [168, 431, 680, 686, 692], "root": [169, 647], "directori": [169, 647, 659, 682], "partition_offset": 169, "es": [169, 647], "engin": [169, 478, 479, 484, 489, 520, 653, 657, 658, 659, 681], "much": [169, 680, 682], "faster": [169, 463, 658, 665, 688], "partition_col": [169, 647], "partition_file_nam": 169, "uuid4": 169, "hex": [169, 492, 493, 506, 550, 551], "rowgroup": [169, 647], "page": [169, 647, 672, 681, 690, 692], "metadata_file_path": 169, "blob": [169, 648], "footer": [169, 648], "file_path": [169, 682], "int96_timestamp": 169, "int96": 169, "julian": 169, "midnight": 169, "row_group_size_byt": 169, "134217728": 169, "128mb": 169, "row_group_size_row": 169, "return_metadata": [169, 648], "read_parquet": [169, 650, 682, 686, 690], "intern": [171, 182, 203, 432, 444, 661, 662, 663, 664, 680, 690], "transpar": [171, 432], "dure": [171, 432, 536, 541, 666], "n0": [171, 432], "n1": [171, 432], "n2": [171, 432], "compos": [172, 680, 686, 688], "pivot": [175, 667], "innermost": [175, 658, 659, 667], "filter_func": 176, "There": [176, 194, 311, 623, 684, 690, 692], "coercibl": [176, 437], "notimplementederror": [176, 478, 526, 529, 535, 552, 680], "proport": 177, "frequent": [177, 439, 680], "occur": [177, 439, 478, 682], "ant": [177, 519, 537, 543], "varianc": [180, 442, 583, 601, 643], "666667": [180, 442], "tz": 182, "dayfirst": [182, 654, 665], "yearfirst": [182, 665], "immut": [182, 201, 251, 252, 269, 444, 453], "sliceabl": [182, 201, 251, 444, 453], "pytz": 182, "timezon": 182, "dateutil": [182, 665], "tzfile": 182, "pars": [182, 654, 657, 665, 666, 682, 684], "year": [182, 185, 187, 190, 191, 194, 240, 607, 609, 613, 618, 619, 620, 623, 665, 688], "1970": 182, "000000001": 182, "000000002": 182, "000000003": 182, "000000004": 182, "l": [183, 188, 195, 476, 486, 605, 611, 624], "u": [183, 188, 195, 476, 490, 605, 611, 624, 680], "me": [183, 188, 195, 487, 530, 605, 611, 624], "alias": [183, 188, 195, 605, 611, 624], "gindex": [183, 188, 191, 194], "2020": [183, 188, 191, 194, 623], "42": [183, 281, 687, 688], "1999": [183, 188, 191, 194, 623], "41": [183, 478], "datetime_index": [184, 185, 186, 187, 189, 192, 193, 196, 199, 200], "int16index": [184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 663], "int16": [184, 185, 186, 187, 189, 192, 193, 196, 199, 200, 312, 606, 607, 608, 609, 610, 612, 621, 622, 625, 627, 628, 666, 686, 690], "365": [185, 187, 190, 607, 609, 613, 682], "leap": [185, 187, 190, 607, 609, 613], "366": [185, 187, 190, 607, 609, 613], "2016": [185, 186, 187, 199, 607, 608, 609, 627, 665], "2017": [185, 186, 187, 199, 607, 608, 609, 618, 619, 627, 665], "week": [186, 191, 199, 608, 620, 627], "mondai": [186, 199, 608, 627], "sundai": [186, 199, 608, 627], "59": [188, 282, 650, 654, 655, 658, 659, 688], "belong": [190, 194, 305, 613, 623], "29th": [190, 613], "februari": [190, 613], "intercalari": [190, 613], "four": [190, 613, 690], "400": [190, 205, 613, 684], "datafram": [191, 197, 203, 234, 242, 244, 245, 255, 256, 257, 258, 260, 261, 262, 265, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 284, 290, 291, 295, 296, 297, 298, 300, 306, 307, 308, 309, 311, 314, 315, 316, 320, 321, 322, 327, 328, 329, 331, 332, 335, 337, 343, 344, 348, 349, 350, 351, 353, 354, 356, 357, 358, 361, 362, 364, 365, 367, 369, 371, 372, 380, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 412, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 430, 432, 435, 439, 440, 441, 442, 443, 445, 451, 454, 484, 489, 526, 535, 536, 541, 554, 558, 566, 567, 569, 570, 571, 572, 575, 577, 578, 581, 583, 589, 590, 591, 592, 595, 596, 599, 600, 602, 603, 620, 629, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 667, 671, 672, 673, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692], "accord": [191, 355, 620, 680], "8601": [191, 620], "52": 191, "januari": [193, 194, 622, 623], "decemb": [193, 194, 622, 623], "march": [194, 623], "april": [194, 623], "june": [194, 623], "third": [194, 258, 623], "juli": [194, 623], "septemb": [194, 623], "fourth": [194, 623], "octob": [194, 623], "int8index": [194, 663], "int8": [194, 318, 623, 666, 686, 690], "dt_idx": 195, "58": [195, 605, 611, 624, 688], "dame": [198, 247, 452], "2002": [200, 613, 628], "basic": [201, 203, 251, 281, 453, 558, 577, 602, 682, 687, 688], "pure": [201, 251, 453, 680], "__init__": [202, 252], "tupleize_col": 203, "best": [203, 264, 522, 635, 682, 683, 692], "fit": [203, 370, 373, 682], "design": [203, 256, 679, 681, 685], "factori": [203, 680], "re": [203, 282, 478, 479, 484, 489, 520, 529, 539, 682, 684, 688], "intim": 203, "familiar": [203, 680, 681], "uint64": [203, 453, 686, 690], "uint64index": 203, "has_dupl": 203, "from_arrow": [203, 692], "get_loc": [203, 683], "collect": [205, 355, 469, 682, 687, 692], "incompar": 210, "caught": 210, "catch": 210, "idx1": [210, 222, 248], "idx2": [210, 222, 248], "nulls_are_equ": 211, "obj": [214, 454, 661, 662, 663, 664], "pdi": 215, "primarili": 216, "stringindex": [216, 243, 318, 323, 347, 478, 526, 535, 682], "bound": [218, 253, 287, 466, 688], "leftmost": 218, "past": [218, 688], "rightmost": [218, 644], "ix": 218, "getitem": 218, "red": [222, 248, 256, 262], "blue": [222, 248, 256, 262], "is_integ": [223, 224, 225, 227, 231, 232], "is_float": [223, 224, 226, 227, 231, 232], "is_numer": [223, 224, 225, 226, 227, 232], "is_object": [223, 224, 225, 226, 227, 231], "is_categor": [223, 225, 226, 227, 231, 232], "is_interv": [223, 224, 225, 226, 231, 232], "categoricalindex": [224, 289, 644, 672], "is_boolean": [224, 225, 226, 227, 231, 232], "watermelon": [224, 226, 232], "orang": [224, 232], "appl": [224, 226, 231, 232, 666], "peter": 224, "victor": 224, "elisabeth": 224, "mar": 224, "mango": [226, 232], "intervalindex": [227, 644, 672], "monotonic_increas": 228, "is_monotonic_increas": [228, 338], "decreas": [229, 339, 370], "cold": 231, "sought": 233, "is_contain": 233, "return_index": [234, 242], "join_index": 234, "lexicograph": [234, 264, 683], "lh": 234, "rh": 234, "renamed_index": 237, "abl": [240, 684, 685], "partial": 240, "renam": [240, 463], "quarter": [240, 616, 617], "cobra": 240, "frozenlist": 240, "itself": [242, 526, 535, 680], "sorted_index": 242, "1000": [242, 282, 553, 680, 684, 688, 692], "allow_fil": 243, "green": [248, 261], "break": 253, "pad": [254, 523, 536, 541, 553, 569, 635, 672, 680], "backfil": [254, 569], "distanc": [254, 481, 482], "broken": 254, "prefer": [254, 658, 659, 665], "larger": [254, 498, 499, 635, 654, 658, 682, 690], "inexact": 254, "satisfi": 254, "equat": 254, "unique_index": 254, "abc": [254, 311, 355, 471, 475, 477, 482, 488, 494, 496, 497, 504, 506, 507, 515, 521, 532, 533, 540, 654, 686, 691], "monotonic_index": 254, "abbc": 254, "non_monotonic_index": 254, "abcb": 254, "numeric_unique_index": 254, "sortord": 256, "from_fram": [257, 258, 261, 262, 265], "cartesian": [260, 261, 262], "hi": [260, 682], "temp": [260, 485, 682], "precip": 260, "nj": 260, "explicit": [260, 269, 688], "explicitli": [261, 282, 654, 682, 684, 691, 692], "color": [261, 262], "purpl": 261, "effort": [264, 683], "fail": [264, 690], "situat": [264, 578, 683, 692], "mi": 264, "non_monotonic_non_unique_idx": 264, "coerc": [264, 665, 666, 683, 684, 692], "step": [269, 347, 463, 538], "unus": [269, 455, 463], "homogen": 269, "hashabl": 270, "been": [270, 680, 685, 690], "overridden": 270, "1d": [270, 325, 614, 616, 617, 636, 645, 680], "overrid": [270, 680], "extensiondtyp": [270, 692], "iteritem": 270, "to_list": 270, "tolist": 270, "to_append": 280, "s3": [280, 502, 647, 653, 654, 657, 658, 659, 660], "convert_dtyp": 281, "udf": [281, 282, 684, 689, 692], "cach": [281, 665], "recompil": 281, "incur": 281, "overhead": 281, "nest": [281, 464, 689], "decor": [281, 282], "someth": [281, 526, 682, 688], "upcast": 281, "deriv": [281, 355], "out_dtyp": 282, "global": 282, "featur": 282, "pydata": [282, 688, 689], "dev": [282, 684], "cudapysupport": 282, "cmath": 282, "libcudf": [282, 680], "complex": [282, 536, 680, 688], "ptx": 282, "sin": 282, "co": 282, "tan": 282, "lgamma": 282, "insid": [282, 530, 654, 687, 688], "known": [282, 665], "liter": [282, 478, 479, 529, 536, 541], "pattern": [282, 413, 478, 479, 483, 484, 489, 529, 536, 541, 542, 680], "lambda": [282, 355, 558, 577, 578, 595, 602, 683, 685, 687, 688], "105": 282, "95": [282, 491], "40100": 282, "10050": 282, "cube_funct": 282, "8000000": [282, 682], "custom_udf": 282, "205": [282, 684], "lag": 285, "autocorrel": 285, "1438853844": 285, "9647548490": 285, "inclus": [287, 486, 644], "wherev": [287, 680], "gt": [287, 682, 688, 691], "lt": [287, 682, 688, 691], "alic": [287, 688], "bob": [287, 688], "carol": 287, "ev": 287, "anna": 287, "daniel": 287, "accessor": [289, 312, 672, 685], "Be": 289, "parent": [289, 680, 682], "reorder_categori": 289, "remove_categori": 289, "set_categori": 289, "abcd": [289, 475, 540], "as_ord": [289, 457], "as_unord": 289, "ser1": [292, 294], "62": [292, 294], "ser2": [292, 294], "51": [292, 294], "20454263717316112": 292, "015750000000000004": 294, "0x": 299, "to_host_arrai": 299, "uint8": [299, 646, 666, 682, 690], "3rd": 304, "ind": [305, 422, 654], "beetl": [310, 342], "hippo": [310, 342], "discard": [310, 654], "kept": [311, 373], "datetimelik": [312, 672], "1h": 312, "hour": [312, 445, 629], "na_sentinel": 318, "chunkedarrai": 323, "singlecolumnfram": [323, 680], "pd_categor": 324, "set_mask": 325, "skip": [325, 653, 654, 658, 659, 666], "mark": 325, "bit": [325, 680], "_column": 325, "seriesgroupbi": [328, 671], "turn": [342, 680], "therefor": [342, 463, 553, 680], "width": [355, 474, 517, 525, 534, 552, 553, 644, 680], "rabbit": [355, 489], "kitten": [355, 481], "puppi": [355, 481], "countries_popul": [370, 373], "montserrat": [370, 373], "5200": [370, 373], "quant_index": 384, "renamed_seri": 389, "numeric_seri": 389, "come": 393, "bar": 393, "baz": [393, 529], "mimic": 413, "interfac": [413, 680, 684, 688], "stai": 413, "inspir": 413, "stringr": [413, 552], "packag": [413, 682, 684, 685, 691], "lib": [422, 682, 691], "stringarrai": 422, "0x7f796b0e7600": 422, "0x7f796b0e7750": 422, "rel": [439, 661, 662, 663, 664], "half": 439, "divid": 439, "500000": [439, 581, 583], "166667": 439, "1132223": 444, "2023232": 444, "342234324": 444, "4234324": 444, "001132223": 444, "002023232": 444, "004234324": 444, "clear": [454, 680], "df1": [454, 647, 662, 682, 691], "letter": [454, 513, 545, 551], "df3": 454, "horizont": 454, "df4": 454, "polli": 454, "georg": [454, 526, 535, 688], "new_categori": [455, 462, 463], "seriesorindex": [455, 456, 457, 461, 462, 463, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "relationship": [460, 583, 680], "old": [461, 462, 463], "reorder": [462, 463], "action": 463, "simultan": 463, "specialis": 463, "hand": 463, "surpris": 463, "search_kei": 465, "extract": [466, 490, 531, 539, 555, 672], "indexerror": 466, "criterion": 468, "lists_indic": 469, "ef": [471, 475], "bye": [471, 682], "thank": [471, 476, 688], "sentenc": [472, 518, 536, 541, 544, 545, 548, 549], "swapcas": [472, 518, 545, 548, 549, 672], "friend": 472, "goodby": [472, 476, 546, 547], "stringcolumn": [473, 680], "again": [473, 688], "aa": [473, 528], "bb": [473, 528], "dd": 473, "fillchar": [474, 517, 525, 534], "whitespac": [474, 487, 500, 501, 502, 503, 505, 507, 509, 510, 511, 514, 517, 519, 523, 524, 525, 526, 530, 534, 535, 536, 537, 541, 543, 546, 547, 654], "as_list": 475, "gram": [475, 521, 522], "bigram": [475, 521], "ngram": [475, 522, 672], "str_seri": [475, 521, 635], "efgh": 475, "xyz": [475, 477, 521], "bc": [475, 482], "cd": 475, "fg": 475, "gh": 475, "xy": 475, "yz": 475, "bcd": 475, "efg": 475, "fgh": 475, "world": [476, 480, 490, 517, 523, 524, 532, 534, 546, 547], "k": [476, 515, 569, 683], "\u00e9ee": 477, "97": 477, "121": 477, "122": 477, "50089": 477, "101": [477, 635, 682], "98": 477, "99": [477, 491, 523], "pat": [478, 479, 483, 484, 489, 520, 529, 531, 536, 541, 542], "flag": [478, 479, 484, 489, 520, 529, 684], "regular": [478, 479, 483, 484, 489, 520, 529, 536, 541, 542, 553, 689], "multilin": [478, 479, 484, 489, 520], "anyth": [478, 526, 529, 535], "dotal": [478, 479, 484, 489, 520], "mous": 478, "hous": 478, "og": 478, "digit": [478, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 514, 551, 686], "might": [478, 684, 688], "35": [478, 629, 630, 631, 633, 650, 654, 655, 658, 659], "escap": 479, "aaba": [479, 682], "baca": [479, 682], "caba": [479, 682], "dollar": 479, "sign": [479, 553, 666, 686], "aab": 479, "ca": 479, "token": [480, 487, 521, 522, 523, 524, 530, 546, 634, 635, 672], "measur": [481, 482, 527, 583], "levenshtein": [481, 482], "edit": [481, 482], "www": 481, "cuelog": 481, "com": [481, 550, 551, 690], "blog": 481, "doggi": 481, "kitti": 481, "pup": 481, "dogi": 481, "listdtyp": [482, 680, 686], "tell": 482, "symmetr": 482, "diagon": [482, 684], "cba": 482, "nativ": 483, "bat": [483, 542], "bear": [483, 542], "captur": 484, "subject": 484, "c3": 484, "repl": [485, 486, 495, 529, 531, 540], "alphanumer": [485, 500, 501, 502, 503, 505, 507, 509, 510, 511, 514], "pear": 485, "plum": 485, "72": [485, 682], "100k": 485, "unicod": [486, 503, 510, 523, 548], "ordin": [486, 548], "maketran": [486, 548], "helper": [486, 548, 680, 684], "caus": 486, "undefin": [486, 635, 688], "aeiou": 486, "0123456789": [486, 495], "aei": 486, "ou": 486, "456": [486, 508, 650, 654, 655, 658, 659], "_": [486, 487, 495, 515, 517, 521, 522, 530, 534, 551, 646], "___ou": 486, "aei__": 486, "0123___789": 486, "min_token_length": 487, "theme": [487, 530], "music": [487, 530], "substr": [488, 494, 532, 533, 538, 539], "fulli": [488, 494, 532, 533, 682, 686, 688], "failur": [488, 532], "ddb": [488, 494, 533], "word": [489, 513, 518, 544, 549, 634, 635], "json_path": 491, "jsonpath": 491, "book": [491, 521, 522, 635], "author": 491, "nigel": 491, "ree": 491, "titl": [491, 513, 518, 544, 549, 672], "centuri": 491, "evelyn": 491, "waugh": 491, "sword": 491, "honour": 491, "1234": [492, 493], "abcdef": [492, 493], "1a2": [492, 493], "cafe": [492, 493], "htoi": [492, 672], "4660": [492, 493], "11259375": [492, 493], "418": [492, 493], "51966": [492, 493], "traceback": [494, 533], "recent": [494, 533], "stdin": [494, 533], "modul": [494, 533, 672, 682, 692], "abb": [494, 533], "abcdefghij": 495, "ab_cdefghij": 495, "01_23456789": 495, "abcdefghij_": 495, "0123456789_": 495, "ip": [496, 497], "168": [496, 497], "212336897": [496, 497], "167772161": [496, 497], "ip2int": [497, 672], "conson": [498, 499], "troubl": [498, 499, 680], "vowel": 499, "isalpha": [500, 502, 503, 505, 507, 509, 510, 511, 514, 672], "isdigit": [500, 501, 502, 505, 506, 507, 509, 510, 511, 514, 672], "isnumer": [500, 501, 502, 503, 505, 506, 507, 509, 511, 514, 672], "isdecim": [500, 501, 503, 505, 506, 507, 509, 510, 511, 514, 672], "alphabet": [500, 501, 502, 503, 505, 507, 509, 510, 511, 514], "isinteg": [500, 501, 502, 503, 505, 509, 510, 511, 514, 672], "isfloat": [500, 501, 502, 503, 506, 507, 509, 510, 511, 514, 672], "islow": [500, 501, 502, 503, 505, 507, 510, 511, 514, 672], "lowercas": [500, 501, 502, 503, 505, 507, 509, 510, 511, 513, 514, 518, 544, 545, 549, 634], "isspac": [500, 501, 502, 503, 505, 507, 509, 510, 514, 672], "isupp": [500, 501, 502, 503, 505, 507, 509, 510, 511, 672], "uppercas": [500, 501, 502, 503, 505, 507, 509, 510, 511, 513, 514, 518, 544, 545, 549], "one1": [500, 501, 510], "punctuat": [500, 523], "isalnum": [501, 502, 503, 505, 507, 509, 510, 511, 514, 672], "\u00b3": [502, 503, 510], "\u2155": [502, 503, 510], "superscript": 503, "subscript": 503, "123213": 505, "123": [505, 508, 519, 526, 535, 543, 629, 630, 631, 632, 633, 650, 654, 655, 658, 659], "0001": 505, "234": [505, 629, 630, 631, 632, 633, 686], "plain": 505, "text": [505, 507, 634, 635, 650, 653, 654, 655, 658, 659, 660, 672], "123def": 506, "0x2d3": 506, "plan": [507, 688], "ipv4": 508, "address": [508, 680], "127": [508, 684], "255": 508, "leopard": [509, 513, 514], "golden": [509, 513, 514], "eagl": [509, 513, 514], "snake": [509, 513, 514], "quantiti": 510, "20201101": 512, "192011": 512, "18200111": 512, "2120": 512, "string_na_rep": 515, "sep_na_rep": 515, "themselv": 515, "interven": 515, "suppli": [515, 646, 688], "ghi": [515, 654, 686], "a_b_c": 515, "d_e_f": 515, "g_h_i": 515, "a_b_k": 515, "c_d": 515, "ai_": 517, "__": [517, 534], "capit": [518, 544, 545, 548, 549, 672], "to_strip": [519, 537, 543], "trail": [519, 537, 543], "strip": [519, 537, 672], "newlin": [519, 537, 543], "rstrip": [519, 543, 672], "ac": 520, "my": 521, "favorit": 521, "my_favorit": 521, "hhh": 521, "abc_def": 521, "def_xyz": 521, "xyz_hhh": 521, "white": 522, "this_i": 522, "is_th": 522, "best_book": 522, "do_low": [523, 634], "subword_token": 523, "around": [523, 526, 536, 541, 680, 688], "p": 523, "symbol": 523, "cjk": 523, "cc": [523, 528], "cf": 523, "do_lower_cas": [523, 634, 635], "accent": 523, "h\u00e9llo": 523, "tworld": 523, "\u0103\u0107c\u0117\u00f1ted": 523, "up": [525, 536, 541, 605, 611, 665, 682, 688, 692], "rjust": [525, 553, 672], "ljust": [525, 553, 672], "zfill": [525, 672], "prepend": [525, 553], "carib": 525, "tiger": 525, "rpartit": [526, 672], "linda": [526, 535], "van": [526, 535], "der": [526, 535], "berg": [526, 535], "pitt": [526, 535], "river": [526, 535], "999": [526, 535, 682, 684], "porter": 527, "stemmer": 527, "super": 527, "ccc": 528, "fuz": 529, "ba": 529, "bao": 529, "back": [531, 654, 658, 659, 680, 682, 690, 692], "ref": [531, 558, 577, 602], "templat": 531, "section": [531, 540, 682, 687, 688, 691, 692], "a543": 531, "z756": 531, "av453": 531, "zv576": 531, "rfind": [533, 672], "_________hello": 534, "___________rapid": 534, "version": [536, 541, 671, 682, 684, 691], "tutori": [536, 682], "throughout": [536, 541], "slightli": [536, 671], "url": [536, 550, 551, 647, 653, 654, 657, 658, 659, 660], "lstrip": [537, 543, 672], "slice_replac": [538, 672], "koala": 538, "fox": 538, "chameleon": 538, "oala": 538, "ox": 538, "hameleon": 538, "ko": 538, "fo": 538, "ch": 538, "kaa": 538, "fx": 538, "caeen": 538, "kl": 538, "cm": 538, "ello": 539, "abdc": 540, "until": [540, 682], "xc": 540, "xdc": 540, "xcde": 540, "axc": 540, "axd": 540, "rsplit": [541, 672], "endswith": [542, 672], "Is": 545, "unmap": 548, "untouch": 548, "swapc1s": 548, "low": [548, 688], "nt": 548, "nc": 548, "swapc1": 548, "No": [550, 551, 635, 644, 680, 689], "2fb": [550, 551], "2fd": [550, 551], "20f": [550, 551], "2c6": [550, 551], "3a": [550, 551], "2f": [550, 551], "2frapid": [550, 551], "2fstart": [550, 551], "2fmedium": [550, 551], "medium": [550, 551, 644], "paragraph": 552, "expand_tabsbool": 552, "replace_whitespac": 552, "drop_whitespac": 552, "break_long_word": 552, "break_on_hyphen": 552, "str_wrap": 552, "expand_tab": 552, "nwrap": 552, "nto": 552, "reach": [553, 680], "minu": 553, "move": [553, 684, 688], "longer": 553, "001": 553, "children": [555, 680], "agg": [558, 600, 602, 682, 685, 687], "f1": [558, 577, 602], "quantil": [558, 577, 602, 687], "__name__": [558, 577, 602], "q0": [558, 577, 602], "f2": [558, 577, 602], "score": 566, "90": [566, 682], "hole": 569, "gap": [569, 680], "introduc": 575, "indetermin": 575, "mult": 578, "redund": [578, 683], "pairwis": [581, 583], "kendal": 581, "val1": [581, 583], "val2": [581, 583], "val3": [581, 583], "385727": 581, "714575": 581, "bia": 583, "comparison": [583, 681, 689, 691], "understand": 583, "member": 583, "invert": 583, "matric": [583, 684], "en": 583, "wikipedia": 583, "wiki": 583, "estimation_of_covariance_matric": 583, "833333": 583, "round": [605, 611], "dt": [605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 675, 682, 685], "datetime_seri": [606, 607, 608, 609, 612, 621, 622, 625, 627, 628, 691], "2013": 613, "1y": 613, "2003": [613, 688], "2005": [613, 685], "2007": 613, "2008": 613, "2009": [613, 620], "2011": 613, "2012": [613, 665, 691], "2021": 620, "serindex": 620, "to_datetim": 620, "53": 620, "dt_sr": 624, "weekday_seri": 626, "12231312123": [629, 630, 631, 632, 633], "1231231231": [629, 630, 631, 632, 633], "1123236768712": [629, 630, 631, 632, 633], "2135656": [629, 630, 631, 632, 633], "3244334234": [629, 630, 631, 632, 633], "141": [629, 630, 631, 633], "231": [629, 630, 631, 632, 633], "13000": [629, 630, 631, 633], "48": [629, 630, 631, 633, 692], "712": [629, 630, 631, 632, 633], "656": [629, 630, 631, 632, 633], "37": [629, 630, 631, 633, 691], "123000": [631, 633], "231000": [631, 633], "712000": [631, 633], "656000": [631, 633], "234000": [631, 633], "231312123": 632, "231231231": 632, "236768712": 632, "002135656": 632, "244334234": 632, "48912": 633, "21631": 633, "36768": 633, "2135": 633, "47534": 633, "hash_fil": 634, "bert": [634, 635], "subword": [634, 635], "vocabulari": [634, 635], "pretrain": [634, 635], "21x": 634, "util": [634, 635, 672, 681, 682], "hash_vocab_util": [634, 635], "hash_vocab": [634, 635], "max_length": 635, "max_num_row": 635, "add_special_token": 635, "return_tensor": 635, "return_token_type_id": 635, "batch": 635, "alloc": [635, 680, 688], "temporari": 635, "twice": 635, "classif": 635, "model": [635, 680, 682], "do_not_trunc": 635, "huggingfac": 635, "pt": 635, "tf": 635, "tensorflow": 635, "pytorch": 635, "torch": 635, "input_id": 635, "fed": 635, "attention_mask": 635, "attend": 635, "vocab": 635, "txt": 635, "voc_hash": 635, "cudf_token": 635, "tokenizer_output": 635, "1142": 635, "1110": 635, "1103": 635, "102": [635, 682], "1436": 635, "1520": 635, "counterpart": 636, "applymap": [636, 689], "count_if_gt_3": 636, "retbin": 644, "include_lowest": 644, "segment": 644, "go": [644, 680, 681, 684, 688], "continu": [644, 684], "criteria": [644, 656], "extens": [644, 654], "done": [644, 682], "994": [644, 684], "bad": 644, "fortran": [645, 684], "prefix_sep": 646, "dummy_na": 646, "spars": [646, 689], "drop_first": 646, "hot": 646, "dummi": 646, "value1": 646, "value2": 646, "a_value1": 646, "a_value2": 646, "a_non": 646, "a_1": 646, "a_2": 646, "a_nan": 646, "a_nul": 646, "max_file_s": 647, "file_name_prefix": 647, "exceed": 647, "writer": [647, 674, 690], "gb": 647, "etc": [647, 671, 678, 686, 687], "mandatori": 647, "context": 647, "cw": 647, "write_t": 647, "manual": 647, "num_row": [650, 653, 658, 659], "num_row_group": 650, "row_group": [650, 659], "num1": [650, 654, 655, 658, 659], "13t12": [650, 654, 655, 658, 659], "5451": [650, 654, 655, 658, 659], "14t12": [650, 654, 655, 658, 659], "5784": [650, 654, 655, 658, 659], "789": [650, 654, 655, 658, 659], "15t18": [650, 654, 655, 658, 659], "6117": [650, 654, 655, 658, 659], "myvarnam": 651, "myvalnam": 651, "filepath_or_buff": [653, 654, 658, 659, 660], "skiprow": [653, 654, 658, 659], "load": [653, 654, 655, 657, 658, 659, 681, 682], "avro": [653, 672, 690], "pathlib": [653, 654, 656, 657, 658, 659, 660, 682], "py": [653, 654, 656, 657, 658, 659, 660, 682, 691], "_path": [653, 654, 656, 657, 658, 659, 660], "localpath": [653, 654, 656, 657, 658, 659, 660], "ftp": [653, 654, 657, 658, 659, 660], "bytesio": [653, 658, 659], "parser": [653, 657, 658, 659], "remot": [653, 654, 658, 659], "pandavro": 653, "pandas_df": 653, "to_avro": 653, "linetermin": 654, "quotechar": 654, "quot": 654, "doublequot": 654, "mangle_dupe_col": 654, "usecol": 654, "delim_whitespac": 654, "skipinitialspac": 654, "skipfoot": 654, "thousand": [654, 684], "true_valu": 654, "false_valu": 654, "byte_rang": [654, 657, 660], "skip_blank_lin": 654, "parse_d": 654, "comment": 654, "keep_default_na": 654, "na_filt": 654, "index_col": 654, "use_python_file_object": [654, 658, 659], "comma": 654, "seper": 654, "quote_minim": 654, "quote_al": 654, "quote_non": 654, "decompress": [654, 657, 690], "detect": [654, 657, 689], "gz": [654, 657], "recogn": 654, "unusu": 654, "altogeth": [654, 680], "qnan": 654, "arrow": [654, 658, 659, 680, 681, 689], "pythonfil": [654, 658, 659], "fsspec": [654, 658, 659], "abstractbufferedfil": [654, 658, 659], "to_csv": [654, 682, 690], "fp": 654, "__fspath__": 656, "protocol": 656, "term": [656, 657, 688, 692], "to_hdf": 656, "auto": 657, "to_json": 657, "typ": 657, "recov": 657, "convert_ax": 657, "proper": 657, "convert_d": 657, "datelik": 657, "_at": 657, "_time": 657, "keep_default_d": 657, "precise_float": 657, "strtod": 657, "doubl": 657, "py3": 657, "jsonread": 657, "use_index": 658, "timestamp_typ": 658, "predic": [658, 659], "disjunct": [658, 659], "dnf": [658, 659], "conjunct": [658, 659, 688], "AND": [658, 659], "outermost": 658, "OR": [658, 659], "notat": [658, 659], "seek": 658, "to_orc": [658, 690], "strings_to_categor": 659, "use_pandas_metadata": 659, "categorical_partit": 659, "open_file_opt": 659, "gdf_categori": 659, "gdf_string": 659, "discourag": 659, "open_parquet_fil": 659, "deactiv": 659, "precach": 659, "precache_opt": 659, "open_file_func": 659, "read_parquet_metadata": 659, "datasourc": 660, "check_dtyp": [661, 662, 664], "check_column_typ": [661, 662], "equiv": [661, 662, 663, 664], "check_less_precis": [661, 663, 664], "check_exact": [661, 662, 663, 664], "check_datetimelike_compat": [661, 662, 664], "check_categor": [661, 662, 663, 664], "check_category_ord": [661, 664], "rtol": [661, 662, 663, 664], "1e": [661, 662, 663, 664], "atol": [661, 662, 663, 664], "columnbas": [661, 662, 663, 664, 680], "intend": [661, 662, 663, 664, 680, 688], "inferred_typ": [661, 662, 663, 664], "idl": [661, 662, 664], "check_datetime_like_compat": [661, 662, 664], "appropri": [661, 662, 663, 664, 680], "assert": [661, 662, 663, 664], "messag": [661, 662, 663, 664], "check_index_typ": [662, 664], "check_frame_typ": 662, "check_nam": [662, 663, 664], "by_block": 662, "check_lik": 662, "assertionerror": [662, 663, 664], "hitch": [662, 663, 664], "check_ord": 663, "int32index": 663, "id1": 663, "id2": 663, "check_series_typ": 664, "sr1": 664, "sr2": 664, "utc": 665, "infer_datetime_format": 665, "eg": 665, "bug": 665, "strftime": 665, "denot": 665, "off": [665, 682, 690], "10x": 665, "succeed": 665, "assembl": 665, "abbrevi": 665, "plural": 665, "2015": 665, "1490195805": 665, "22t15": 665, "000000000": 665, "1490195805433502912": 665, "1780": 665, "20t01": 665, "494253056": 665, "polici": 666, "notifi": 666, "encount": 666, "unsign": [666, 686], "down": 666, "decoupl": 666, "3e3": 666, "3000": 666, "cudf": [671, 672, 678, 680, 683, 686, 687, 689, 690], "usual": 671, "permit": 671, "restrict": 671, "publicli": 672, "namespac": [672, 675], "manipul": [672, 681, 682], "merg": [672, 680, 682, 685, 692], "timedeltaindex": 672, "deal": 672, "roll": [672, 680, 685, 689], "subwordtoken": [672, 681], "stringmethod": 672, "byte_count": 672, "character_ngram": 672, "character_token": 672, "code_point": 672, "detoken": 672, "edit_dist": 672, "edit_distance_matrix": 672, "filter_alphanum": 672, "filter_charact": 672, "filter_token": 672, "findal": 672, "get_json_object": 672, "hex_to_int": 672, "ip_to_int": 672, "is_conson": 672, "is_vowel": 672, "isempti": 672, "ishex": 672, "isipv4": 672, "istimestamp": 672, "istitl": 672, "ngrams_token": 672, "normalize_charact": 672, "normalize_spac": 672, "porter_stemmer_measur": 672, "replace_token": 672, "replace_with_backref": 672, "rindex": 672, "slice_from": 672, "startswith": 672, "token_count": 672, "translat": [672, 680], "url_decod": 672, "url_encod": 672, "wrap": [672, 682, 688], "variant": 673, "thereof": 673, "reader": [674, 682, 690], "acceler": [674, 680, 681, 682, 688, 690], "cpu": [674, 682, 685, 690, 692], "futur": [674, 682, 688, 691], "variou": [675, 680], "layer": 679, "cython": 679, "hood": [680, 682], "robustli": 680, "develop": [680, 681, 684, 688, 689], "At": [680, 688], "high": 680, "serv": 680, "face": 680, "bridg": 680, "review": 680, "role": 680, "requisit": 680, "tradeoff": 680, "tie": 680, "piec": 680, "holist": 680, "project": [680, 685], "diagram": 680, "princip": 680, "inherit": 680, "eponym": 680, "tabular": [680, 682, 688], "columnar": [680, 681, 682], "meanwhil": 680, "essenti": [680, 688], "abstract": 680, "materi": 680, "preliminari": 680, "let": [680, 684, 688], "dive": 680, "littl": 680, "deeper": 680, "expos": [680, 684, 688, 690], "addition": [680, 685], "mention": [680, 685, 688], "surmis": 680, "diamond": 680, "simpler": [680, 688], "flatten": 680, "ve": [680, 682, 688], "highlight": [680, 688], "simpli": [680, 684], "practic": [680, 682], "concret": [680, 688], "eventu": 680, "almost": 680, "hierarchi": 680, "rewrit": 680, "main": [680, 688], "alon": 680, "infeas": 680, "reimplement": 680, "behav": 680, "instanti": 680, "unfortun": 680, "mimick": 680, "__new__": 680, "tree": 680, "cumbersom": 680, "manag": [680, 688], "masquerad": 680, "stack": 680, "glue": 680, "layout": 680, "own": [680, 690], "semant": 680, "wildcard": [680, 682], "apach": [680, 681, 682], "conduc": 680, "interchang": 680, "concept": [680, 682], "extent": 680, "facilit": 680, "interoper": [680, 681, 689], "simplifi": 680, "debug": 680, "sens": 680, "numericalcolumn": 680, "datetimecolumn": 680, "decis": 680, "4000": 680, "sizeof": 680, "128": 680, "chees": 680, "preexist": 680, "knowledg": [680, 688], "structdtyp": [680, 686], "analog": 680, "decimaldtyp": 680, "intervaldtyp": 680, "contigu": [680, 684], "rmm": 680, "devicebuff": 680, "interact": [680, 682, 688], "bind": 680, "pxd": 680, "declar": 680, "explanatori": 680, "column_view": 680, "table_view": 680, "question": [680, 688], "trivial": 680, "discuss": [680, 682, 691], "descent": 680, "approach": [680, 688], "whole": 680, "fact": [680, 691], "act": 680, "reduct": [680, 685], "scan": 680, "bypass": 680, "straight": 680, "resampl": 680, "composit": 680, "reason": [680, 690], "scientist": 681, "easili": 681, "workflow": [681, 682, 689], "program": 681, "dask": [681, 689], "overview": [681, 689], "short": 682, "introduct": 682, "gear": 682, "mainli": 682, "scale": [682, 685, 686], "smooth": [682, 689], "dask_cudf": [682, 685], "cluster": [682, 685], "enough": [682, 685, 688], "comfort": [682, 688], "want": [682, 684, 688, 691], "spread": [682, 685], "os": 682, "portion": [682, 688], "borrow": 682, "adapt": [682, 688], "cheatsheet": 682, "ds": 682, "from_cudf": 682, "npartit": [682, 685], "ddf": 682, "dask_gdf": 682, "yield": [682, 692], "met": 682, "cudf_compar": 682, "dask_cudf_compar": 682, "isin": 682, "gdf1": 682, "rand": [682, 691], "082654": 682, "967955": 682, "399417": 682, "441425": 682, "784297": 682, "793582": 682, "070303": 682, "271711": 682, "gdf2": 682, "opt": [682, 691], "conda": [682, 691], "env": [682, 691], "python3": [682, 691], "site": [682, 691], "798": [682, 684], "futurewarn": [682, 691], "343382": 682, "003700": 682, "20043": 682, "581614": 682, "907812": 682, "101512": 682, "24179": 682, "224180": 682, "var": [682, 687], "666666666666666": 682, "6666666666666667": 682, "map_partit": [682, 685], "add_ten": 682, "progress": 682, "ds2": 682, "restor": 682, "post": [682, 687], "ddf_a": 682, "ddf_b": 682, "paradigm": 682, "agg_col1": 682, "agg_col2": 682, "54": 682, "73": 682, "date_df": 682, "986051": 682, "232034": 682, "397617": 682, "103839": 682, "date_ddf": 682, "grade": 682, "dgdf": 682, "to_numpi": 682, "to_arrow": [682, 692], "example_output": 682, "mkdir": 682, "foo_dask": 682, "star": 682, "temp_parquet": 682, "example_fil": 682, "cudf_root": 682, "orc_fil": 682, "testorcfil": 682, "test1": 682, "boolean1": 682, "byte1": 682, "short1": 682, "int1": 682, "long1": 682, "float1": 682, "double1": 682, "bytes1": 682, "string1": 682, "middl": 682, "1024": 682, "65536": 682, "2048": 682, "100000000": 682, "chani": 682, "spark": 682, "lazi": 682, "moment": 682, "graph": 682, "delai": 682, "sometim": [682, 684, 688], "activ": 682, "background": [682, 688], "system": 682, "finish": 682, "downstream": [682, 684], "enforc": 682, "contract": 682, "upstream": 682, "snippet": 682, "localcudaclust": 682, "worker": 682, "machin": [682, 685], "beyond": 682, "scope": [682, 688], "client": 682, "dask_cuda": 682, "2022": 682, "364": 682, "preload": 682, "info": 682, "10000000": 682, "ddf2": 682, "2000000": 682, "9999999": 682, "nvidia": 682, "smi": 682, "fri": 682, "jul": 682, "495": 682, "bu": 682, "disp": 682, "volatil": 682, "uncorr": 682, "ecc": 682, "fan": 682, "perf": 682, "pwr": 682, "cap": 682, "mig": 682, "tesla": 682, "v100": 682, "pcie": 682, "00000000": 682, "27c": 682, "p0": 682, "32w": 682, "250w": 682, "1543mib": 682, "32510mib": 682, "gi": 682, "ci": 682, "pid": 682, "twenti": 682, "800": [682, 684], "baselin": 682, "sleep": 682, "2127mib": 682, "setup": 682, "proceed": 682, "ll": [682, 684, 688], "ddf1": 682, "randint": [682, 692], "spent": 682, "results_ddf": 682, "sooner": 682, "had": 682, "complet": [682, 690], "doneandnotdonefutur": 682, "a4bc352ebee4c84b05c73db8ca4138a8": 682, "not_don": 682, "proce": [682, 684], "notebook": 684, "introductori": 684, "advantag": 684, "advanc": [684, 685, 688], "algebra": 684, "timeit": 684, "__version__": 684, "cupy_from_dlpack": 684, "from_dlpack": 684, "fromdlpack": 684, "as_gpu_matrix": 684, "500": 684, "arr_cupi": 684, "to_dlpack": 684, "to_cupi": 684, "190": 684, "\u00b5s": 684, "89": 684, "561": 684, "84": 684, "562": 684, "501": 684, "1001": 684, "502": 684, "1002": 684, "9997": 684, "10497": 684, "10997": 684, "9998": 684, "10498": 684, "10998": 684, "9999": 684, "10499": 684, "10999": 684, "__cuda_array_interface__": [684, 688], "leverag": [684, 688, 692], "cola_cupi": 684, "87": 684, "299": 684, "193": 684, "norm": 684, "reshaped_arr": 684, "197": 684, "198": 684, "199": 684, "201": 684, "202": 684, "397": 684, "398": 684, "399": 684, "401": 684, "402": 684, "597": 684, "598": 684, "599": 684, "9400": 684, "9401": 684, "9402": 684, "9597": 684, "9598": 684, "9599": 684, "9600": 684, "9601": 684, "9602": 684, "9797": 684, "9798": 684, "9799": 684, "9800": 684, "9801": 684, "9802": 684, "603": 684, "804": 684, "1005": [684, 688], "1206": 684, "1407": 684, "1608": 684, "1809": 684, "2211": 684, "2412": 684, "2613": 684, "2814": 684, "3015": 684, "3216": 684, "3417": 684, "3618": 684, "3819": 684, "4020": 684, "4221": 684, "4422": 684, "4623": 684, "4824": 684, "5025": 684, "5226": 684, "5427": 684, "5628": 684, "5829": 684, "6030": 684, "6231": 684, "6432": 684, "6633": 684, "6834": 684, "7035": 684, "7236": 684, "7437": 684, "7638": 684, "7839": 684, "8040": 684, "8241": 684, "8442": 684, "8643": 684, "8844": 684, "9045": 684, "9246": 684, "9447": 684, "9648": 684, "9849": 684, "linalg": 684, "577306": 684, "967739": 684, "easiest": [684, 688], "sure": [684, 688], "beforehand": 684, "reshaped_df": 684, "191": 684, "192": 684, "194": 684, "195": 684, "196": 684, "203": 684, "204": 684, "206": 684, "207": 684, "208": 684, "209": 684, "391": 684, "392": 684, "393": 684, "394": 684, "395": 684, "396": 684, "403": 684, "405": 684, "406": 684, "407": 684, "408": 684, "409": 684, "590": 684, "591": 684, "592": 684, "593": 684, "594": 684, "595": 684, "596": 684, "600": 684, "601": 684, "602": 684, "604": 684, "605": 684, "606": 684, "607": 684, "608": 684, "609": 684, "790": 684, "791": 684, "792": 684, "793": 684, "794": 684, "795": 684, "796": 684, "797": 684, "799": 684, "801": 684, "802": 684, "803": 684, "805": 684, "806": 684, "807": 684, "808": 684, "809": 684, "990": 684, "991": 684, "992": 684, "993": 684, "995": 684, "996": 684, "997": [684, 688], "998": 684, "isfortran": 684, "fortran_arr": 684, "asfortranarrai": 684, "todlpack": 684, "ecosystem": [684, 688], "isn": 684, "matur": 684, "hundr": 684, "wouldn": 684, "veri": [684, 687, 688], "easi": [684, 685], "previous": 684, "new_arr": 684, "19900": 684, "59900": 684, "99900": 684, "139900": 684, "179900": 684, "219900": 684, "259900": 684, "299900": 684, "339900": 684, "379900": 684, "419900": 684, "459900": 684, "499900": 684, "539900": 684, "579900": 684, "619900": 684, "659900": 684, "699900": 684, "739900": 684, "779900": 684, "819900": 684, "859900": 684, "899900": 684, "939900": 684, "979900": 684, "1019900": 684, "1059900": 684, "1099900": 684, "1139900": 684, "1179900": 684, "1219900": 684, "1259900": 684, "1299900": 684, "1339900": 684, "1379900": 684, "1419900": 684, "1459900": 684, "1499900": 684, "1539900": 684, "1579900": 684, "1619900": 684, "1659900": 684, "1699900": 684, "1739900": 684, "1779900": 684, "1819900": 684, "1859900": 684, "1899900": 684, "1939900": 684, "1979900": 684, "seamlessli": 684, "enorm": 684, "sacrif": 684, "cleanli": 684, "cudf_to_cupy_sparse_matrix": 684, "sparseformat": 684, "focu": 684, "_sparse_constructor": 684, "csc_matrix": 684, "csr_matrix": 684, "illustr": 684, "nonzero": 684, "arr": [684, 688], "a0": 684, "a4": 684, "a5": 684, "a6": 684, "a7": 684, "a8": 684, "a9": 684, "a10": 684, "a11": 684, "a12": 684, "a13": 684, "a14": 684, "a15": 684, "a16": 684, "a17": 684, "a18": 684, "a19": 684, "561433": 684, "420721": 684, "507855": 684, "933082": 684, "324731": 684, "913503": 684, "960127": 684, "sparse_data": 684, "512": 684, "032386031471162": 684, "1152": 684, "353277613475763": 684, "1280": 684, "699191322748758": 684, "1664": 684, "225948993033366": 684, "1410": 684, "657263596128178": 684, "515": 684, "230761052431465": 684, "1539": 684, "403941434650815": 684, "388": 684, "144870073568828": 684, "645": 684, "023795961802256": 684, "1413": 684, "35936695431939": 684, "903": 684, "228371248699004": 684, "138": 684, "941885860496123": 684, "650": 684, "821580050012376": 684, "139": 684, "909107220784494": 684, "267": 684, "396230086550823": 684, "523": 684, "0346435157216836": 684, "1164": 684, "964587831113351": 684, "1293": 684, "6659715642331925": 684, "1677": 684, "7744086620487938": 684, "1166": 684, "56216792841694": 684, "1039": 684, "71759767000746": 684, "146": 684, "602803233649424": 684, "1171": 684, "004850910444944": 684, "1302": 684, "8847397938611223": 684, "1430": 684, "826084746143774": 684, "9708": 684, "215839274656358": 684, "9836": 684, "609416229060236": 684, "8941": 684, "849171345299215": 684, "9965": 684, "454597818829377": 684, "9070": 684, "0908566447144752": 684, "8816": 684, "487329192442527": 684, "8944": 684, "469596653167705": 684, "8689": 684, "330014207033775": 684, "8691": 684, "793724616623796": 684, "9203": 684, "6104376491023287": 684, "9972": 684, "80120731540287": 684, "8951": 684, "998439835231142": 684, "8824": 684, "0675133759904885": 684, "9081": 684, "4120635194276465": 684, "475414675653033": 684, "9466": 684, "9106242187016211": 684, "9339": 684, "6574913332670764": 684, "9979": 684, "636626589324717": 684, "8956": 684, "541795929627026": 684, "8829": 684, "770226649112962": 684, "9341": 684, "2021591855738722": 684, "9725": 684, "469567782011412": 684, "8830": 684, "980189102742586": 684, "9854": 684, "219834301112794": 684, "9982": 684, "38025689543779": 684, "encourag": [684, 685], "orchestr": 685, "cohes": 685, "ingest": 685, "decent": 685, "dayofweek": 685, "expens": 685, "cudf_df": 685, "persist": 685, "visual": 685, "difficult": [685, 688], "comprehens": 685, "track": 685, "thing": [685, 688], "certainli": 685, "slight": 685, "inconsist": 685, "tracker": 685, "report": [685, 692], "reus": 685, "newer": 685, "mislead": [685, 686], "frustrat": 685, "advertis": 685, "apolog": 685, "uint32": [686, 690], "durat": 686, "decimal32dtyp": 686, "decimal64dtyp": 686, "decimal128dtyp": 686, "023": 686, "max_precis": 686, "decimal128": [686, 690], "psr": 686, "gsr": 686, "pq": 686, "exclus": 687, "nuisanc": 687, "gb1": 687, "gb2": 687, "gb3": 687, "extern": 687, "penalti": 687, "disambigu": 687, "ok": 687, "corr": 687, "866025": 687, "idxmin": 687, "idxmax": 687, "nuniqu": 687, "nth": 687, "cov": 687, "randomdata": 688, "box": 688, "broader": 688, "varieti": 688, "cover": 688, "devicendarrai": 688, "demonstr": 688, "syntax": 688, "offer": 688, "const": 688, "unari": [688, 692], "redefin": 688, "capabl": 688, "singleton": 688, "f_null_sensit": 688, "grid": 688, "in_col": 688, "out_col": 688, "guard": 688, "runtim": 688, "pre": 688, "cuda_array_interfac": 688, "963": 688, "9630": 688, "977": 688, "1026": 688, "980": 688, "9770": 688, "1048": 688, "1019": 688, "10480": 688, "1078": 688, "960": 688, "985": 688, "10780": 688, "979": 688, "982": 688, "1011": 688, "9790": 688, "theoret": 688, "potenti": 688, "experi": 688, "spot": 688, "problem": 688, "area": 688, "pipelin": 688, "job": 688, "thin": 688, "entrypoint": 688, "onto": 688, "fulfil": 688, "ultim": 688, "happen": [688, 691], "428571429": 688, "did": 688, "fairli": 688, "streamlin": 688, "walk": 688, "conditional_add": 688, "heart": 688, "readi": 688, "successfulli": 688, "pessimist": 688, "explor": 688, "gpu_add": 688, "matter": 688, "1968": 688, "1961": 688, "propog": 688, "slide": 688, "answer": 688, "stock": 688, "mathemat": 688, "example_func": 688, "65": 688, "56": 688, "549834435": 688, "615773106": 688, "681145748": 688, "745966692": 688, "810249676": 688, "874007874": 688, "937253933": 688, "apply_group": 688, "drawn": 688, "691674": 688, "dan": 688, "958380": 688, "480099": 688, "729580": 688, "473370": 688, "xavier": 688, "767454": 688, "067479": 688, "380205": 688, "970850": 688, "sarah": 688, "342905": 688, "rolling_avg_": 688, "rolling_avg": 688, "win_siz": 688, "801430": 688, "632337": 688, "081887": 688, "933157": 688, "quinn": 688, "420826": 688, "184805": 688, "702013": 688, "837494": 688, "wendi": 688, "057540": 688, "401733": 688, "913899": 688, "ursula": 688, "466252": 688, "009502": 688, "725581": 688, "405245": 688, "271319": 688, "multiply_by_5": 688, "empty_lik": 688, "nondecim": 688, "releas": 688, "github": [688, 690], "properli": 688, "lot": 688, "hopefulli": 688, "feel": 688, "histogram": 689, "tip": 689, "magnum": 689, "gpudirect": 689, "integr": 689, "nvcomp": 689, "caveat": 689, "interweav": 689, "navig": 689, "writer\u00b9": 690, "reader\u00b9": 690, "uint16": 690, "decimal32": 690, "decimal64": 690, "\u00b9": 690, "gd": 690, "dma": 690, "transfer": 690, "bounc": 690, "sdk": 690, "download": 690, "toolkit": 690, "environ": 690, "libcudf_cufile_polici": 690, "kvikio": 690, "rapidsai": 690, "read_avro": 690, "libcudf_cufile_thread_count": 690, "libcudf_cufile_slice_s": 690, "4mb": 690, "libcudf_nvcomp_polici": 690, "deem": 690, "whenev": 690, "referenc": 691, "mind": 691, "20120101": 691, "natur": 691, "cumprod": 691, "prod": 691, "wish": 691, "dff": 691, "randn": 691, "384572": 691, "727515": 691, "703913": 691, "687307": 691, "013689": 691, "109506": 691, "320010": 691, "204782": 691, "318648": 691, "240619": 691, "414962": 691, "933648": 691, "579979": 691, "560311": 691, "059839": 691, "521861": 691, "447392": 691, "709243": 691, "166481": 691, "318104": 691, "016432": 691, "306391": 691, "946760": 691, "502384": 691, "452207": 691, "210060": 691, "1183": 691, "silenc": 691, "dot": 691, "88612476": 691, "181788283": 691, "612687714": 691, "272282401": 691, "401598035": 691, "382708245": 691, "065837605": 691, "044830417": 691, "765813606": 691, "121128461": 691, "56135663": 691, "825271278": 691, "580406961": 691, "182003858": 691, "df00": 691, "181788": 691, "612688": 691, "272282": 691, "401598": 691, "382708": 691, "065838": 691, "044830": 691, "765814": 691, "121128": 691, "561357": 691, "825271": 691, "580407": 691, "182004": 691, "behaviour": 692, "commonli": 692, "resid": 692, "extrem": 692, "poor": 692, "vast": 692, "accomplish": 692, "742": 692, "694": 692, "840": 692, "459": 692, "525": 692, "442": 692, "363": 692, "666": 692, "643": 692, "631": 692, "906": 692, "640": 692, "impact": 692, "compatibilti": 692, "impos": 692}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [182, 0, 1, "", "DatetimeIndex"], [201, 0, 1, "", "Float64Index"], [202, 0, 1, "", "Grouper"], [203, 0, 1, "", "Index"], [251, 0, 1, "", "Int64Index"], [252, 0, 1, "", "IntervalIndex"], [256, 0, 1, "", "MultiIndex"], [269, 0, 1, "", "RangeIndex"], [270, 0, 1, "", "Series"], [444, 0, 1, "", "TimedeltaIndex"], [453, 0, 1, "", "UInt64Index"], [454, 3, 1, "", "concat"], [644, 3, 1, "", "cut"], [645, 3, 1, "", "from_dlpack"], [646, 3, 1, "", "get_dummies"], [651, 3, 1, "", "melt"], [652, 3, 1, "", "pivot"], [653, 3, 1, "", "read_avro"], [654, 3, 1, "", "read_csv"], [655, 3, 1, "", "read_feather"], [656, 3, 1, "", "read_hdf"], [657, 3, 1, "", "read_json"], [658, 3, 1, "", "read_orc"], [659, 3, 1, "", "read_parquet"], [660, 3, 1, "", "read_text"], [665, 3, 1, "", "to_datetime"], [666, 3, 1, "", "to_numeric"], [667, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 2, 1, "", "backfill"], [24, 2, 1, "", "bfill"], [25, 2, 1, "", "clip"], [26, 1, 1, "", "columns"], [27, 2, 1, "", "copy"], [28, 2, 1, "", "corr"], [29, 2, 1, "", "count"], [30, 2, 1, "", "cov"], [31, 2, 1, "", "cummax"], [32, 2, 1, "", "cummin"], [33, 2, 1, "", "cumprod"], [34, 2, 1, "", "cumsum"], [35, 2, 1, "", "describe"], [36, 2, 1, "", "deserialize"], [37, 2, 1, "", "device_deserialize"], [38, 2, 1, "", "device_serialize"], [39, 2, 1, "", "diff"], [40, 2, 1, "", "div"], [41, 2, 1, "", "divide"], [42, 2, 1, "", "dot"], [43, 2, 1, "", "drop"], [44, 2, 1, "", "drop_duplicates"], [45, 2, 1, "", "dropna"], [46, 1, 1, "", "dtypes"], [47, 1, 1, "", "empty"], [48, 2, 1, "", "eq"], [49, 2, 1, "", "equals"], [50, 2, 1, "", "eval"], [51, 2, 1, "", "explode"], [52, 2, 1, "", "ffill"], [53, 2, 1, "", "fillna"], [54, 2, 1, "", "first"], [55, 2, 1, "", "floordiv"], [56, 2, 1, "", "from_arrow"], [57, 2, 1, "", "from_pandas"], [58, 2, 1, "", "from_records"], [59, 2, 1, "", "ge"], [60, 2, 1, "", "groupby"], [61, 2, 1, "", "gt"], [62, 2, 1, "", "hash_values"], [63, 2, 1, "", "head"], [64, 2, 1, "", "host_deserialize"], [65, 2, 1, "", "host_serialize"], [66, 1, 1, "", "iat"], [67, 1, 1, "", "iloc"], [68, 1, 1, "", "index"], [69, 2, 1, "", "info"], [70, 2, 1, "", "insert"], [71, 2, 1, "", "interleave_columns"], [72, 2, 1, "", "interpolate"], [73, 2, 1, "", "isin"], [74, 2, 1, "", "isna"], [75, 2, 1, "", "isnull"], [76, 2, 1, "", "items"], [77, 2, 1, "", "iterrows"], [78, 2, 1, "", "itertuples"], [79, 2, 1, "", "join"], [80, 2, 1, "", "keys"], [81, 2, 1, "", "kurt"], [82, 2, 1, "", "kurtosis"], [83, 2, 1, "", "last"], [84, 2, 1, "", "le"], [85, 1, 1, "", "loc"], [86, 2, 1, "", "lt"], [87, 2, 1, "", "mask"], [88, 2, 1, "", "max"], [89, 2, 1, "", "mean"], [90, 2, 1, "", "median"], [91, 2, 1, "", "melt"], [92, 2, 1, "", "memory_usage"], [93, 2, 1, "", "merge"], [94, 2, 1, "", "min"], [95, 2, 1, "", "mod"], [96, 2, 1, "", "mode"], [97, 2, 1, "", "mul"], [98, 2, 1, "", "multiply"], [99, 2, 1, "", "nans_to_nulls"], [100, 1, 1, "", "ndim"], [101, 2, 1, "", "ne"], [102, 2, 1, "", "nlargest"], [103, 2, 1, "", "notna"], [104, 2, 1, "", "notnull"], [105, 2, 1, "", "nsmallest"], [106, 2, 1, "", "nunique"], [107, 2, 1, "", "pad"], [108, 2, 1, "", "partition_by_hash"], [109, 2, 1, "", "pct_change"], [110, 2, 1, "", "pipe"], [111, 2, 1, "", "pivot"], [112, 2, 1, "", "pop"], [113, 2, 1, "", "pow"], [114, 2, 1, "", "prod"], [115, 2, 1, "", "product"], [116, 2, 1, "", "quantile"], [117, 2, 1, "", "quantiles"], [118, 2, 1, "", "query"], [119, 2, 1, "", "radd"], [120, 2, 1, "", "rank"], [121, 2, 1, "", "rdiv"], [122, 2, 1, "", "reindex"], [123, 2, 1, "", "rename"], [124, 2, 1, "", "repeat"], [125, 2, 1, "", "replace"], [126, 2, 1, "", "resample"], [127, 2, 1, "", "reset_index"], [128, 2, 1, "", "rfloordiv"], [129, 2, 1, "", "rmod"], [130, 2, 1, "", "rmul"], [131, 2, 1, "", "rolling"], [132, 2, 1, "", "round"], [133, 2, 1, "", "rpow"], [134, 2, 1, "", "rsub"], [135, 2, 1, "", "rtruediv"], [136, 2, 1, "", "sample"], [137, 2, 1, "", "scale"], [138, 2, 1, "", "scatter_by_map"], [139, 2, 1, "", "searchsorted"], [140, 2, 1, "", "select_dtypes"], [141, 2, 1, "", "serialize"], [142, 2, 1, "", "set_index"], [143, 1, 1, "", "shape"], [144, 2, 1, "", "shift"], [145, 1, 1, "", "size"], [146, 2, 1, "", "skew"], [147, 2, 1, "", "sort_index"], [148, 2, 1, "", "sort_values"], [149, 2, 1, "", "stack"], [150, 2, 1, "", "std"], [151, 2, 1, "", "sub"], [152, 2, 1, "", "subtract"], [153, 2, 1, "", "sum"], [154, 2, 1, "", "sum_of_squares"], [155, 2, 1, "", "tail"], [156, 2, 1, "", "take"], [157, 2, 1, "", "tile"], [158, 2, 1, "", "to_arrow"], [159, 2, 1, "", "to_csv"], [160, 2, 1, "", "to_cupy"], [161, 2, 1, "", "to_dict"], [162, 2, 1, "", "to_dlpack"], [163, 2, 1, "", "to_feather"], [164, 2, 1, "", "to_hdf"], [165, 2, 1, "", "to_json"], [166, 2, 1, "", "to_numpy"], [167, 2, 1, "", "to_orc"], [168, 2, 1, "", "to_pandas"], [169, 2, 1, "", "to_parquet"], [170, 2, 1, "", "to_records"], [171, 2, 1, "", "to_string"], [172, 2, 1, "", "to_struct"], [173, 2, 1, "", "transpose"], [174, 2, 1, "", "truediv"], [175, 2, 1, "", "unstack"], [176, 2, 1, "", "update"], [177, 2, 1, "", "value_counts"], [178, 1, 1, "", "values"], [179, 1, 1, "", "values_host"], [180, 2, 1, "", "var"], [181, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[183, 2, 1, "", "ceil"], [184, 1, 1, "", "day"], [185, 1, 1, "", "day_of_year"], [186, 1, 1, "", "dayofweek"], [187, 1, 1, "", "dayofyear"], [188, 2, 1, "", "floor"], [189, 1, 1, "", "hour"], [190, 1, 1, "", "is_leap_year"], [191, 2, 1, "", "isocalendar"], [192, 1, 1, "", "minute"], [193, 1, 1, "", "month"], [194, 1, 1, "", "quarter"], [195, 2, 1, "", "round"], [196, 1, 1, "", "second"], [197, 2, 1, "", "to_frame"], [198, 2, 1, "", "to_series"], [199, 1, 1, "", "weekday"], [200, 1, 1, "", "year"]], "cudf.Grouper": [[202, 2, 1, "", "__init__"]], "cudf.Index": [[204, 2, 1, "", "any"], [205, 2, 1, "", "append"], [206, 2, 1, "", "copy"], [207, 2, 1, "", "deserialize"], [208, 2, 1, "", "device_deserialize"], [209, 2, 1, "", "device_serialize"], [210, 2, 1, "", "difference"], [211, 2, 1, "", "drop_duplicates"], [212, 2, 1, "", "dropna"], [213, 2, 1, "", "fillna"], [214, 2, 1, "", "from_arrow"], [215, 2, 1, "", "from_pandas"], [216, 2, 1, "", "get_level_values"], [217, 2, 1, "", "get_loc"], [218, 2, 1, "", "get_slice_bound"], [219, 1, 1, "", "has_duplicates"], [220, 2, 1, "", "host_deserialize"], [221, 2, 1, "", "host_serialize"], [222, 2, 1, "", "intersection"], [223, 2, 1, "", "is_boolean"], [224, 2, 1, "", "is_categorical"], [225, 2, 1, "", "is_floating"], [226, 2, 1, "", "is_integer"], [227, 2, 1, "", "is_interval"], [228, 1, 1, "", "is_monotonic"], [229, 1, 1, "", "is_monotonic_decreasing"], [230, 1, 1, "", "is_monotonic_increasing"], [231, 2, 1, "", "is_numeric"], [232, 2, 1, "", "is_object"], [233, 2, 1, "", "isin"], [234, 2, 1, "", "join"], [235, 1, 1, "", "names"], [236, 1, 1, "", "nlevels"], [237, 2, 1, "", "rename"], [238, 2, 1, "", "repeat"], [239, 2, 1, "", "serialize"], [240, 2, 1, "", "set_names"], [241, 1, 1, "", "size"], [242, 2, 1, "", "sort_values"], [243, 2, 1, "", "take"], [244, 2, 1, "", "to_dlpack"], [245, 2, 1, "", "to_frame"], [246, 2, 1, "", "to_pandas"], [247, 2, 1, "", "to_series"], [248, 2, 1, "", "union"], [249, 2, 1, "", "unique"], [250, 1, 1, "", "values"]], "cudf.IntervalIndex": [[252, 2, 1, "", "__init__"], [253, 2, 1, "", "from_breaks"], [254, 2, 1, "", "get_loc"], [255, 1, 1, "", "values"]], "cudf.MultiIndex": [[257, 1, 1, "", "codes"], [258, 2, 1, "", "droplevel"], [259, 2, 1, "", "from_arrow"], [260, 2, 1, "", "from_frame"], [261, 2, 1, "", "from_product"], [262, 2, 1, "", "from_tuples"], [263, 2, 1, "", "get_level_values"], [264, 2, 1, "", "get_loc"], [265, 1, 1, "", "levels"], [266, 1, 1, "", "names"], [267, 1, 1, "", "nlevels"], [268, 2, 1, "", "to_frame"]], "cudf.Series": [[271, 1, 1, "", "T"], [272, 2, 1, "", "__array__"], [273, 2, 1, "", "__iter__"], [274, 2, 1, "", "abs"], [275, 2, 1, "", "add"], [276, 2, 1, "", "add_prefix"], [277, 2, 1, "", "add_suffix"], [278, 2, 1, "", "all"], [279, 2, 1, "", "any"], [280, 2, 1, "", "append"], [281, 2, 1, "", "apply"], [282, 2, 1, "", "applymap"], [283, 2, 1, "", "argsort"], [284, 2, 1, "", "astype"], [285, 2, 1, "", "autocorr"], [286, 2, 1, "", "backfill"], [287, 2, 1, "", "between"], [288, 2, 1, "", "bfill"], [289, 1, 1, "", "cat"], [290, 2, 1, "", "clip"], [291, 2, 1, "", "copy"], [292, 2, 1, "", "corr"], [293, 2, 1, "", "count"], [294, 2, 1, "", "cov"], [295, 2, 1, "", "cummax"], [296, 2, 1, "", "cummin"], [297, 2, 1, "", "cumprod"], [298, 2, 1, "", "cumsum"], [299, 1, 1, "", "data"], [300, 2, 1, "", "describe"], [301, 2, 1, "", "deserialize"], [302, 2, 1, "", "device_deserialize"], [303, 2, 1, "", "device_serialize"], [304, 2, 1, "", "diff"], [305, 2, 1, "", "digitize"], [306, 2, 1, "", "div"], [307, 2, 1, "", "divide"], [308, 2, 1, "", "dot"], [309, 2, 1, "", "drop"], [310, 2, 1, "", "drop_duplicates"], [311, 2, 1, "", "dropna"], [312, 1, 1, "", "dt"], [313, 1, 1, "", "dtype"], [314, 1, 1, "", "empty"], [315, 2, 1, "", "eq"], [316, 2, 1, "", "equals"], [317, 2, 1, "", "explode"], [318, 2, 1, "", "factorize"], [319, 2, 1, "", "ffill"], [320, 2, 1, "", "fillna"], [321, 2, 1, "", "first"], [322, 2, 1, "", "floordiv"], [323, 2, 1, "", "from_arrow"], [324, 2, 1, "", "from_categorical"], [325, 2, 1, "", "from_masked_array"], [326, 2, 1, "", "from_pandas"], [327, 2, 1, "", "ge"], [328, 2, 1, "", "groupby"], [329, 2, 1, "", "gt"], [330, 1, 1, "", "has_nulls"], [331, 2, 1, "", "hash_values"], [332, 2, 1, "", "head"], [333, 2, 1, "", "host_deserialize"], [334, 2, 1, "", "host_serialize"], [335, 1, 1, "", "iloc"], [336, 1, 1, "", "index"], [337, 2, 1, "", "interpolate"], [338, 1, 1, "", "is_monotonic"], [339, 1, 1, "", "is_monotonic_decreasing"], [340, 1, 1, "", "is_monotonic_increasing"], [341, 1, 1, "", "is_unique"], [342, 2, 1, "", "isin"], [343, 2, 1, "", "isna"], [344, 2, 1, "", "isnull"], [345, 2, 1, "", "items"], [346, 2, 1, "", "iteritems"], [347, 2, 1, "", "keys"], [348, 2, 1, "", "kurt"], [349, 2, 1, "", "kurtosis"], [350, 2, 1, "", "last"], [351, 2, 1, "", "le"], [352, 1, 1, "", "list"], [353, 1, 1, "", "loc"], [354, 2, 1, "", "lt"], [355, 2, 1, "", "map"], [356, 2, 1, "", "mask"], [357, 2, 1, "", "max"], [358, 2, 1, "", "mean"], [359, 2, 1, "", "median"], [360, 2, 1, "", "memory_usage"], [361, 2, 1, "", "min"], [362, 2, 1, "", "mod"], [363, 2, 1, "", "mode"], [364, 2, 1, "", "mul"], [365, 2, 1, "", "multiply"], [366, 1, 1, "", "name"], [367, 2, 1, "", "nans_to_nulls"], [368, 1, 1, "", "ndim"], [369, 2, 1, "", "ne"], [370, 2, 1, "", "nlargest"], [371, 2, 1, "", "notna"], [372, 2, 1, "", "notnull"], [373, 2, 1, "", "nsmallest"], [374, 1, 1, "", "null_count"], [375, 1, 1, "", "nullable"], [376, 1, 1, "", "nullmask"], [377, 2, 1, "", "nunique"], [378, 2, 1, "", "pad"], [379, 2, 1, "", "pct_change"], [380, 2, 1, "", "pipe"], [381, 2, 1, "", "pow"], [382, 2, 1, "", "prod"], [383, 2, 1, "", "product"], [384, 2, 1, "", "quantile"], [385, 2, 1, "", "radd"], [386, 2, 1, "", "rank"], [387, 2, 1, "", "rdiv"], [388, 2, 1, "", "reindex"], [389, 2, 1, "", "rename"], [390, 2, 1, "", "repeat"], [391, 2, 1, "", "replace"], [392, 2, 1, "", "resample"], [393, 2, 1, "", "reset_index"], [394, 2, 1, "", "rfloordiv"], [395, 2, 1, "", "rmod"], [396, 2, 1, "", "rmul"], [397, 2, 1, "", "rolling"], [398, 2, 1, "", "round"], [399, 2, 1, "", "rpow"], [400, 2, 1, "", "rsub"], [401, 2, 1, "", "rtruediv"], [402, 2, 1, "", "sample"], [403, 2, 1, "", "scale"], [404, 2, 1, "", "searchsorted"], [405, 2, 1, "", "serialize"], [406, 1, 1, "", "shape"], [407, 2, 1, "", "shift"], [408, 1, 1, "", "size"], [409, 2, 1, "", "skew"], [410, 2, 1, "", "sort_index"], [411, 2, 1, "", "sort_values"], [412, 2, 1, "", "std"], [413, 1, 1, "", "str"], [414, 1, 1, "", "struct"], [415, 2, 1, "", "sub"], [416, 2, 1, "", "subtract"], [417, 2, 1, "", "sum"], [418, 2, 1, "", "sum_of_squares"], [419, 2, 1, "", "tail"], [420, 2, 1, "", "take"], [421, 2, 1, "", "tile"], [422, 2, 1, "", "to_arrow"], [423, 2, 1, "", "to_cupy"], [424, 2, 1, "", "to_dict"], [425, 2, 1, "", "to_dlpack"], [426, 2, 1, "", "to_frame"], [427, 2, 1, "", "to_hdf"], [428, 2, 1, "", "to_json"], [429, 2, 1, "", "to_list"], [430, 2, 1, "", "to_numpy"], [431, 2, 1, "", "to_pandas"], [432, 2, 1, "", "to_string"], [433, 2, 1, "", "tolist"], [434, 2, 1, "", "transpose"], [435, 2, 1, "", "truediv"], [436, 2, 1, "", "unique"], [437, 2, 1, "", "update"], [438, 1, 1, "", "valid_count"], [439, 2, 1, "", "value_counts"], [440, 1, 1, "", "values"], [441, 1, 1, "", "values_host"], [442, 2, 1, "", "var"], [443, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[445, 1, 1, "", "components"], [446, 1, 1, "", "days"], [447, 1, 1, "", "inferred_freq"], [448, 1, 1, "", "microseconds"], [449, 1, 1, "", "nanoseconds"], [450, 1, 1, "", "seconds"], [451, 2, 1, "", "to_frame"], [452, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[455, 2, 1, "", "add_categories"], [456, 2, 1, "", "as_ordered"], [457, 2, 1, "", "as_unordered"], [458, 1, 1, "", "categories"], [459, 1, 1, "", "codes"], [460, 1, 1, "", "ordered"], [461, 2, 1, "", "remove_categories"], [462, 2, 1, "", "reorder_categories"], [463, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[464, 2, 1, "", "concat"], [465, 2, 1, "", "contains"], [466, 2, 1, "", "get"], [467, 2, 1, "", "len"], [468, 2, 1, "", "sort_values"], [469, 2, 1, "", "take"], [470, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[471, 2, 1, "", "byte_count"], [472, 2, 1, "", "capitalize"], [473, 2, 1, "", "cat"], [474, 2, 1, "", "center"], [475, 2, 1, "", "character_ngrams"], [476, 2, 1, "", "character_tokenize"], [477, 2, 1, "", "code_points"], [478, 2, 1, "", "contains"], [479, 2, 1, "", "count"], [480, 2, 1, "", "detokenize"], [481, 2, 1, "", "edit_distance"], [482, 2, 1, "", "edit_distance_matrix"], [483, 2, 1, "", "endswith"], [484, 2, 1, "", "extract"], [485, 2, 1, "", "filter_alphanum"], [486, 2, 1, "", "filter_characters"], [487, 2, 1, "", "filter_tokens"], [488, 2, 1, "", "find"], [489, 2, 1, "", "findall"], [490, 2, 1, "", "get"], [491, 2, 1, "", "get_json_object"], [492, 2, 1, "", "hex_to_int"], [493, 2, 1, "", "htoi"], [494, 2, 1, "", "index"], [495, 2, 1, "", "insert"], [496, 2, 1, "", "ip2int"], [497, 2, 1, "", "ip_to_int"], [498, 2, 1, "", "is_consonant"], [499, 2, 1, "", "is_vowel"], [500, 2, 1, "", "isalnum"], [501, 2, 1, "", "isalpha"], [502, 2, 1, "", "isdecimal"], [503, 2, 1, "", "isdigit"], [504, 2, 1, "", "isempty"], [505, 2, 1, "", "isfloat"], [506, 2, 1, "", "ishex"], [507, 2, 1, "", "isinteger"], [508, 2, 1, "", "isipv4"], [509, 2, 1, "", "islower"], [510, 2, 1, "", "isnumeric"], [511, 2, 1, "", "isspace"], [512, 2, 1, "", "istimestamp"], [513, 2, 1, "", "istitle"], [514, 2, 1, "", "isupper"], [515, 2, 1, "", "join"], [516, 2, 1, "", "len"], [517, 2, 1, "", "ljust"], [518, 2, 1, "", "lower"], [519, 2, 1, "", "lstrip"], [520, 2, 1, "", "match"], [521, 2, 1, "", "ngrams"], [522, 2, 1, "", "ngrams_tokenize"], [523, 2, 1, "", "normalize_characters"], [524, 2, 1, "", "normalize_spaces"], [525, 2, 1, "", "pad"], [526, 2, 1, "", "partition"], [527, 2, 1, "", "porter_stemmer_measure"], [528, 2, 1, "", "repeat"], [529, 2, 1, "", "replace"], [530, 2, 1, "", "replace_tokens"], [531, 2, 1, "", "replace_with_backrefs"], [532, 2, 1, "", "rfind"], [533, 2, 1, "", "rindex"], [534, 2, 1, "", "rjust"], [535, 2, 1, "", "rpartition"], [536, 2, 1, "", "rsplit"], [537, 2, 1, "", "rstrip"], [538, 2, 1, "", "slice"], [539, 2, 1, "", "slice_from"], [540, 2, 1, "", "slice_replace"], [541, 2, 1, "", "split"], [542, 2, 1, "", "startswith"], [543, 2, 1, "", "strip"], [544, 2, 1, "", "swapcase"], [545, 2, 1, "", "title"], [546, 2, 1, "", "token_count"], [547, 2, 1, "", "tokenize"], [548, 2, 1, "", "translate"], [549, 2, 1, "", "upper"], [550, 2, 1, "", "url_decode"], [551, 2, 1, "", "url_encode"], [552, 2, 1, "", "wrap"], [553, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[554, 2, 1, "", "explode"], [555, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[556, 2, 1, "", "__iter__"], [557, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[558, 2, 1, "", "aggregate"], [559, 2, 1, "", "backfill"], [560, 2, 1, "", "bfill"], [561, 2, 1, "", "count"], [562, 2, 1, "", "cumcount"], [563, 2, 1, "", "cummax"], [564, 2, 1, "", "cummin"], [565, 2, 1, "", "cumsum"], [566, 2, 1, "", "describe"], [567, 2, 1, "", "diff"], [568, 2, 1, "", "ffill"], [569, 2, 1, "", "fillna"], [570, 2, 1, "", "idxmax"], [571, 2, 1, "", "idxmin"], [572, 2, 1, "", "nunique"], [573, 2, 1, "", "pad"], [574, 2, 1, "", "quantile"], [575, 2, 1, "", "shift"], [576, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[577, 2, 1, "", "agg"], [578, 2, 1, "", "apply"], [579, 2, 1, "", "backfill"], [580, 2, 1, "", "bfill"], [581, 2, 1, "", "corr"], [582, 2, 1, "", "count"], [583, 2, 1, "", "cov"], [584, 2, 1, "", "cumcount"], [585, 2, 1, "", "cummax"], [586, 2, 1, "", "cummin"], [587, 2, 1, "", "cumsum"], [588, 2, 1, "", "ffill"], [589, 2, 1, "", "max"], [590, 2, 1, "", "mean"], [591, 2, 1, "", "median"], [592, 2, 1, "", "min"], [593, 2, 1, "", "nth"], [594, 2, 1, "", "pad"], [595, 2, 1, "", "pipe"], [596, 2, 1, "", "prod"], [597, 2, 1, "", "size"], [598, 2, 1, "", "std"], [599, 2, 1, "", "sum"], [600, 2, 1, "", "transform"], [601, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[602, 2, 1, "", "aggregate"], [603, 2, 1, "", "nunique"], [604, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[605, 2, 1, "", "ceil"], [606, 1, 1, "", "day"], [607, 1, 1, "", "day_of_year"], [608, 1, 1, "", "dayofweek"], [609, 1, 1, "", "dayofyear"], [610, 1, 1, "", "days_in_month"], [611, 2, 1, "", "floor"], [612, 1, 1, "", "hour"], [613, 1, 1, "", "is_leap_year"], [614, 1, 1, "", "is_month_end"], [615, 1, 1, "", "is_month_start"], [616, 1, 1, "", "is_quarter_end"], [617, 1, 1, "", "is_quarter_start"], [618, 1, 1, "", "is_year_end"], [619, 1, 1, "", "is_year_start"], [620, 2, 1, "", "isocalendar"], [621, 1, 1, "", "minute"], [622, 1, 1, "", "month"], [623, 1, 1, "", "quarter"], [624, 2, 1, "", "round"], [625, 1, 1, "", "second"], [626, 2, 1, "", "strftime"], [627, 1, 1, "", "weekday"], [628, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[629, 1, 1, "", "components"], [630, 1, 1, "", "days"], [631, 1, 1, "", "microseconds"], [632, 1, 1, "", "nanoseconds"], [633, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[634, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[635, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[636, 2, 1, "", "apply"], [637, 2, 1, "", "count"], [638, 2, 1, "", "max"], [639, 2, 1, "", "mean"], [640, 2, 1, "", "min"], [641, 2, 1, "", "std"], [642, 2, 1, "", "sum"], [643, 2, 1, "", "var"]], "cudf.io.parquet": [[647, 0, 1, "", "ParquetDatasetWriter"], [650, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[648, 2, 1, "", "close"], [649, 2, 1, "", "write_table"]], "cudf.testing.testing": [[661, 3, 1, "", "assert_column_equal"], [662, 3, 1, "", "assert_frame_equal"], [663, 3, 1, "", "assert_index_equal"], [664, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 681, 682, 684, 685, 688, 691, 692], "categoricalindex": [0, 1, 2, 3, 673], "categori": [1, 458], "code": [2, 257, 459], "equal": [3, 49, 316], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 668, 684, 688], "t": [5, 271], "__iter__": [6, 273, 556], "ab": [7, 274], "add": [8, 275], "add_prefix": [9, 276], "add_suffix": [10, 277], "agg": [11, 577], "all": [12, 278, 680], "ani": [13, 204, 279], "append": [14, 205, 280], "appli": [15, 281, 578, 636, 687, 688, 692], "apply_chunk": [16, 688], "apply_row": [17, 688], "applymap": [18, 282, 682], "argsort": [19, 283], "assign": 20, "astyp": [21, 284], "backfil": [23, 286, 559, 579], "bfill": [24, 288, 560, 580], "clip": [25, 290], "column": [26, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 680, 692], "copi": [27, 206, 291], "corr": [28, 292, 581], "count": [29, 293, 479, 561, 582, 637], "cov": [30, 294, 583], "cummax": [31, 295, 563, 585], "cummin": [32, 296, 564, 586], "cumprod": [33, 297], "cumsum": [34, 298, 565, 587], "describ": [35, 300, 566], "deseri": [36, 207, 301], "device_deseri": [37, 208, 302], "device_seri": [38, 209, 303], "diff": [39, 304, 567], "div": [40, 306], "divid": [41, 307], "dot": [42, 308], "drop": [43, 309, 691], "drop_dupl": [44, 211, 310], "dropna": [45, 212, 311, 691], "dtype": [46, 313, 690, 691], "empti": [47, 314], "eq": [48, 315], "eval": 50, "explod": [51, 317, 554], "ffill": [52, 319, 568, 588], "fillna": [53, 213, 320, 569, 691], "first": [54, 321], "floordiv": [55, 322], "from_arrow": [56, 214, 259, 323], "from_panda": [57, 215, 326], "from_record": 58, "ge": [59, 327], "groupbi": [60, 328, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 668, 671, 675, 687, 688, 691], "gt": [61, 329], "hash_valu": [62, 331], "head": [63, 332], "host_deseri": [64, 220, 333], "host_seri": [65, 221, 334], "iat": 66, "iloc": [67, 335], "index": [68, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 336, 494, 668, 671, 673, 675, 680, 682, 687], "info": 69, "insert": [70, 495, 691], "interleave_column": 71, "interpol": [72, 337], "isin": [73, 233, 342], "isna": [74, 343], "isnul": [75, 344], "item": [76, 345], "iterrow": 77, "itertupl": 78, "join": [79, 234, 515, 668, 673, 675, 682], "kei": [80, 347], "kurt": [81, 348], "kurtosi": [82, 349], "last": [83, 350], "le": [84, 351], "loc": [85, 353], "lt": [86, 354], "mask": [87, 356], "max": [88, 357, 589, 638], "mean": [89, 358, 590, 639], "median": [90, 359, 591], "melt": [91, 651], "memory_usag": [92, 360], "merg": [93, 668, 675], "min": [94, 361, 592, 640], "mod": [95, 362], "mode": [96, 363], "mul": [97, 364], "multipli": [98, 365], "nans_to_nul": [99, 367], "ndim": [100, 368], "ne": [101, 369], "nlargest": [102, 370], "notna": [103, 371], "notnul": [104, 372], "nsmallest": [105, 373], "nuniqu": [106, 377, 572, 603], "pad": [107, 378, 525, 573, 594], "partition_by_hash": 108, "pct_chang": [109, 379], "pipe": [110, 380, 595], "pivot": [111, 652], "pop": 112, "pow": [113, 381], "prod": [114, 382, 596], "product": [115, 383, 691], "quantil": [116, 117, 384, 574], "queri": 118, "radd": [119, 385], "rank": [120, 386], "rdiv": [121, 387], "reindex": [122, 388, 668, 675], "panda": [122, 264, 388, 569, 578, 682, 683, 692], "compat": [122, 264, 388, 569, 578, 673, 683], "note": [122, 264, 388, 569, 578, 683, 686], "renam": [123, 237, 389], "repeat": [124, 238, 390, 528], "replac": [125, 391, 529, 691], "resampl": [126, 392], "reset_index": [127, 393], "rfloordiv": [128, 394], "rmod": [129, 395], "rmul": [130, 396], "roll": [131, 397, 636, 637, 638, 639, 640, 641, 642, 643, 678, 687, 688], "round": [132, 195, 398, 624], "rpow": [133, 399], "rsub": [134, 400], "rtruediv": [135, 401], "sampl": [136, 402], "scale": [137, 403], "scatter_by_map": 138, "searchsort": [139, 404], "select_dtyp": 140, "serial": [141, 239, 405, 668, 675], "set_index": 142, "shape": [143, 406], "shift": [144, 407, 575], "size": [145, 241, 408, 576, 597], "skew": [146, 409], "sort_index": [147, 410], "sort_valu": [148, 242, 411, 468], "stack": 149, "std": [150, 412, 598, 641], "sub": [151, 415], "subtract": [152, 416], "sum": [153, 417, 599, 642, 691], "sum_of_squar": [154, 418], "tail": [155, 419], "take": [156, 243, 420, 469], "tile": [157, 421], "to_arrow": [158, 422], "to_csv": 159, "to_cupi": [160, 423], "to_dict": [161, 424], "to_dlpack": [162, 244, 425], "to_feath": 163, "to_hdf": [164, 427], "to_json": [165, 428], "to_numpi": [166, 430], "to_orc": 167, "to_panda": [168, 246, 431], "to_parquet": 169, "to_record": 170, "to_str": [171, 432], "to_struct": 172, "transpos": [173, 434, 668, 682], "truediv": [174, 435], "unstack": [175, 667], "updat": [176, 437], "value_count": [177, 439], "valu": [178, 250, 255, 440, 673, 691, 692], "values_host": [179, 441], "var": [180, 442, 601, 643], "where": [181, 443], "datetimeindex": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 673], "ceil": [183, 605], "dai": [184, 446, 606, 630], "day_of_year": [185, 607], "dayofweek": [186, 608], "dayofyear": [187, 609], "floor": [188, 611], "hour": [189, 612], "is_leap_year": [190, 613], "isocalendar": [191, 620], "minut": [192, 621, 682], "month": [193, 622], "quarter": [194, 623], "second": [196, 450, 625, 633], "to_fram": [197, 245, 268, 426, 451], "to_seri": [198, 247, 452], "weekdai": [199, 627], "year": [200, 628], "float64index": 201, "grouper": [202, 687], "differ": [210, 690], "get_level_valu": [216, 263], "get_loc": [217, 254, 264], "get_slice_bound": 218, "has_dupl": 219, "intersect": 222, "is_boolean": 223, "is_categor": 224, "is_float": 225, "is_integ": 226, "is_interv": 227, "is_monoton": [228, 338], "is_monotonic_decreas": [229, 339], "is_monotonic_increas": [230, 340], "is_numer": 231, "is_object": 232, "name": [235, 266, 366, 692], "nlevel": [236, 267], "set_nam": 240, "union": 248, "uniqu": [249, 436, 470, 604], "int64index": 251, "intervalindex": [252, 253, 254, 255, 673], "from_break": 253, "multiindex": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 673, 682], "droplevel": 258, "from_fram": 260, "from_product": 261, "from_tupl": 262, "level": [265, 669, 687, 688], "rangeindex": 269, "seri": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 668, 675, 682, 684, 688], "__array__": 272, "autocorr": 285, "between": [287, 684], "cat": [289, 473], "data": [299, 668, 669, 675, 680, 682, 686, 688, 691, 692], "digit": 305, "dt": 312, "factor": 318, "from_categor": 324, "from_masked_arrai": 325, "has_nul": 330, "is_uniqu": 341, "iteritem": 346, "list": [352, 464, 465, 466, 467, 468, 469, 470, 675, 686], "map": 355, "null_count": 374, "nullabl": [375, 688], "nullmask": 376, "str": 413, "struct": [414, 554, 555, 675, 686], "to_list": 429, "tolist": 433, "valid_count": 438, "timedeltaindex": [444, 445, 446, 447, 448, 449, 450, 451, 452, 673], "compon": [445, 629, 673], "inferred_freq": 447, "microsecond": [448, 631], "nanosecond": [449, 632], "uint64index": 453, "concat": [454, 464, 682], "core": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643], "categor": [455, 456, 457, 458, 459, 460, 461, 462, 463, 673, 675, 682], "categoricalaccessor": [455, 456, 457, 458, 459, 460, 461, 462, 463], "add_categori": 455, "as_ord": 456, "as_unord": 457, "order": [460, 692], "remove_categori": 461, "reorder_categori": 462, "set_categori": 463, "listmethod": [464, 465, 466, 467, 468, 469, 470], "contain": [465, 478], "get": [466, 490, 682], "len": [467, 516], "string": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 675, 676, 682, 691], "stringmethod": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "byte_count": 471, "capit": 472, "center": 474, "character_ngram": 475, "character_token": 476, "code_point": 477, "detoken": 480, "edit_dist": 481, "edit_distance_matrix": 482, "endswith": 483, "extract": 484, "filter_alphanum": 485, "filter_charact": 486, "filter_token": 487, "find": 488, "findal": 489, "get_json_object": 491, "hex_to_int": 492, "htoi": 493, "ip2int": 496, "ip_to_int": 497, "is_conson": 498, "is_vowel": 499, "isalnum": 500, "isalpha": 501, "isdecim": 502, "isdigit": 503, "isempti": 504, "isfloat": 505, "ishex": 506, "isinteg": 507, "isipv4": 508, "islow": 509, "isnumer": 510, "isspac": 511, "istimestamp": 512, "istitl": 513, "isupp": 514, "ljust": 517, "lower": [518, 688], "lstrip": 519, "match": 520, "ngram": 521, "ngrams_token": 522, "normalize_charact": 523, "normalize_spac": 524, "partit": 526, "porter_stemmer_measur": 527, "replace_token": 530, "replace_with_backref": 531, "rfind": 532, "rindex": 533, "rjust": 534, "rpartit": 535, "rsplit": 536, "rstrip": 537, "slice": 538, "slice_from": 539, "slice_replac": 540, "split": 541, "startswith": 542, "strip": 543, "swapcas": 544, "titl": 545, "token_count": 546, "token": 547, "translat": 548, "upper": 549, "url_decod": 550, "url_encod": 551, "wrap": 552, "zfill": 553, "structmethod": [554, 555], "field": 555, "group": [557, 682, 687], "dataframegroupbi": [558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576], "aggreg": [558, 602, 687], "cumcount": [562, 584], "idxmax": 570, "idxmin": 571, "nth": 593, "transform": [600, 687], "seriesgroupbi": [602, 603, 604], "datetimeproperti": [605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628], "days_in_month": 610, "is_month_end": 614, "is_month_start": 615, "is_quarter_end": 616, "is_quarter_start": 617, "is_year_end": 618, "is_year_start": 619, "strftime": 626, "timedeltaproperti": [629, 630, 631, 632, 633], "subword_token": [634, 635], "subwordtoken": [634, 635, 677], "__call__": 635, "window": [636, 637, 638, 639, 640, 641, 642, 643, 668, 675, 678, 687, 688], "cut": 644, "from_dlpack": 645, "get_dummi": 646, "io": [647, 648, 649, 650, 668, 675, 690], "parquet": [647, 648, 649, 650, 674, 682], "parquetdatasetwrit": [647, 648, 649], "close": 648, "write_t": 649, "read_parquet_metadata": 650, "read_avro": 653, "read_csv": 654, "read_feath": 655, "read_hdf": 656, "read_json": 657, "read_orc": 658, "read_parquet": 659, "read_text": 660, "test": [661, 662, 663, 664, 670], "assert_column_equ": 661, "assert_frame_equ": 662, "assert_index_equ": 663, "assert_series_equ": 664, "to_datetim": 665, "to_numer": 666, "constructor": [668, 673, 675, 677], "attribut": [668, 675], "underli": 668, "convers": [668, 669, 673, 675], "iter": [668, 671, 675, 692], "binari": [668, 675], "oper": [668, 673, 675, 682, 687, 692], "function": [668, 669, 670, 671, 675, 678, 688, 692], "applic": [668, 671, 675], "comput": [668, 671, 673, 675, 692], "descript": [668, 671, 675], "stat": [668, 671, 675, 682], "select": [668, 673, 675, 682], "label": [668, 675, 682, 691], "manipul": [668, 669, 675], "miss": [668, 673, 675, 682, 691, 692], "handl": [668, 675, 676, 688], "reshap": [668, 675], "sort": [668, 673, 675], "combin": [668, 673, 675], "compar": [668, 675], "time": [668, 673, 675, 682], "relat": [668, 675], "gener": [669, 670, 691], "top": 669, "deal": 669, "datetimelik": [669, 675], "util": 670, "api": [672, 685], "refer": 672, "document": [672, 681], "object": [673, 682, 686, 687, 691, 692], "properti": [673, 675], "modifi": 673, "memori": 673, "usag": 673, "specif": 673, "set": 673, "numer": [673, 691], "date": 673, "input": [674, 690], "output": [674, 690], "csv": [674, 682], "text": 674, "json": 674, "orc": [674, 682], "hdfstore": 674, "pytabl": 674, "hdf5": 674, "feather": 674, "avro": 674, "accessor": 675, "datetim": [675, 691], "method": [675, 682], "timedelta": 675, "develop": [679, 685], "guid": [679, 689], "librari": [680, 682], "design": 680, "The": [680, 687], "frame": 680, "layer": 680, "columnaccessor": 680, "type": [680, 686, 690, 692], "buffer": 680, "cython": 680, "put": 680, "It": 680, "togeth": 680, "welcom": 681, "s": 681, "content": 681, "indic": 681, "tabl": 681, "10": 682, "dask": [682, 685], "what": [682, 685], "ar": 682, "when": 682, "us": [682, 690], "creation": 682, "view": 682, "posit": 682, "boolean": 682, "histogram": 682, "convert": [682, 684], "represent": 682, "numpi": [682, 686], "arrow": 682, "In": 682, "out": 682, "perform": 682, "tip": 682, "persist": 682, "wait": 682, "interoper": 684, "cupi": [684, 688], "arrai": [684, 688], "interweav": 684, "smooth": 684, "pydata": 684, "workflow": 684, "spars": 684, "matrix": 684, "multi": 685, "gpu": 685, "work": [685, 691], "navig": 685, "support": [686, 687, 690, 692], "A": 686, "decim": 686, "nest": 686, "summari": [687, 688], "limit": [687, 692], "calcul": [687, 691], "overview": 688, "user": [688, 689], "defin": 688, "udf": 688, "addit": 688, "scalar": 688, "argument": 688, "control": 688, "custom": 688, "numba": 688, "kernel": 688, "null": [688, 691, 692], "caveat": 688, "i": 690, "o": 690, "magnum": 690, "gpudirect": 690, "storag": 690, "integr": 690, "nvcomp": 690, "current": 690, "polici": 690, "how": 691, "detect": 691, "float": [691, 692], "nan": 691, "na": 691, "fill": 691, "axi": 691, "regular": 691, "express": 691, "comparison": 692, "result": 692, "point": 692, "No": 692, "true": 692}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}})