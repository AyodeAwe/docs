Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pivot_table", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.crosstab", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.pivot_table", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "developer_guide/testing", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cudf.CategoricalDtype", "user_guide/cudf.CategoricalDtype.categories", "user_guide/cudf.CategoricalDtype.from_pandas", "user_guide/cudf.CategoricalDtype.ordered", "user_guide/cudf.CategoricalDtype.to_pandas", "user_guide/cudf.Decimal128Dtype", "user_guide/cudf.Decimal128Dtype.from_arrow", "user_guide/cudf.Decimal128Dtype.itemsize", "user_guide/cudf.Decimal128Dtype.precision", "user_guide/cudf.Decimal128Dtype.scale", "user_guide/cudf.Decimal128Dtype.to_arrow", "user_guide/cudf.Decimal32Dtype", "user_guide/cudf.Decimal32Dtype.from_arrow", "user_guide/cudf.Decimal32Dtype.itemsize", "user_guide/cudf.Decimal32Dtype.precision", "user_guide/cudf.Decimal32Dtype.scale", "user_guide/cudf.Decimal32Dtype.to_arrow", "user_guide/cudf.Decimal64Dtype", "user_guide/cudf.Decimal64Dtype.from_arrow", "user_guide/cudf.Decimal64Dtype.itemsize", "user_guide/cudf.Decimal64Dtype.precision", "user_guide/cudf.Decimal64Dtype.scale", "user_guide/cudf.Decimal64Dtype.to_arrow", "user_guide/cudf.ListDtype", "user_guide/cudf.ListDtype.element_type", "user_guide/cudf.ListDtype.from_arrow", "user_guide/cudf.ListDtype.leaf_type", "user_guide/cudf.ListDtype.to_arrow", "user_guide/cudf.StructDtype", "user_guide/cudf.StructDtype.fields", "user_guide/cudf.StructDtype.from_arrow", "user_guide/cudf.StructDtype.to_arrow", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pivot_table.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.crosstab.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.pivot_table.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "developer_guide/testing.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cudf.CategoricalDtype.rst", "user_guide/cudf.CategoricalDtype.categories.rst", "user_guide/cudf.CategoricalDtype.from_pandas.rst", "user_guide/cudf.CategoricalDtype.ordered.rst", "user_guide/cudf.CategoricalDtype.to_pandas.rst", "user_guide/cudf.Decimal128Dtype.rst", "user_guide/cudf.Decimal128Dtype.from_arrow.rst", "user_guide/cudf.Decimal128Dtype.itemsize.rst", "user_guide/cudf.Decimal128Dtype.precision.rst", "user_guide/cudf.Decimal128Dtype.scale.rst", "user_guide/cudf.Decimal128Dtype.to_arrow.rst", "user_guide/cudf.Decimal32Dtype.rst", "user_guide/cudf.Decimal32Dtype.from_arrow.rst", "user_guide/cudf.Decimal32Dtype.itemsize.rst", "user_guide/cudf.Decimal32Dtype.precision.rst", "user_guide/cudf.Decimal32Dtype.scale.rst", "user_guide/cudf.Decimal32Dtype.to_arrow.rst", "user_guide/cudf.Decimal64Dtype.rst", "user_guide/cudf.Decimal64Dtype.from_arrow.rst", "user_guide/cudf.Decimal64Dtype.itemsize.rst", "user_guide/cudf.Decimal64Dtype.precision.rst", "user_guide/cudf.Decimal64Dtype.scale.rst", "user_guide/cudf.Decimal64Dtype.to_arrow.rst", "user_guide/cudf.ListDtype.rst", "user_guide/cudf.ListDtype.element_type.rst", "user_guide/cudf.ListDtype.from_arrow.rst", "user_guide/cudf.ListDtype.leaf_type.rst", "user_guide/cudf.ListDtype.to_arrow.rst", "user_guide/cudf.StructDtype.rst", "user_guide/cudf.StructDtype.fields.rst", "user_guide/cudf.StructDtype.from_arrow.rst", "user_guide/cudf.StructDtype.to_arrow.rst", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pivot_table", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.crosstab", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.pivot_table", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Testing cuDF", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "cudf.CategoricalDtype", "cudf.CategoricalDtype.categories", "cudf.CategoricalDtype.from_pandas", "cudf.CategoricalDtype.ordered", "cudf.CategoricalDtype.to_pandas", "cudf.Decimal128Dtype", "cudf.Decimal128Dtype.from_arrow", "cudf.Decimal128Dtype.itemsize", "cudf.Decimal128Dtype.precision", "cudf.Decimal128Dtype.scale", "cudf.Decimal128Dtype.to_arrow", "cudf.Decimal32Dtype", "cudf.Decimal32Dtype.from_arrow", "cudf.Decimal32Dtype.itemsize", "cudf.Decimal32Dtype.precision", "cudf.Decimal32Dtype.scale", "cudf.Decimal32Dtype.to_arrow", "cudf.Decimal64Dtype", "cudf.Decimal64Dtype.from_arrow", "cudf.Decimal64Dtype.itemsize", "cudf.Decimal64Dtype.precision", "cudf.Decimal64Dtype.scale", "cudf.Decimal64Dtype.to_arrow", "cudf.ListDtype", "cudf.ListDtype.element_type", "cudf.ListDtype.from_arrow", "cudf.ListDtype.leaf_type", "cudf.ListDtype.to_arrow", "cudf.StructDtype", "cudf.StructDtype.fields", "cudf.StructDtype.from_arrow", "cudf.StructDtype.to_arrow", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 129, 171, 185, 206, 207, 208, 212, 253, 258, 259, 263, 276, 277, 308, 438, 451, 460, 649, 665, 681, 682, 683, 684, 692, 702, 704, 706, 708, 712, 717, 723, 729, 735, 740, 745], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 135, 136, 137, 138, 143, 147, 153, 154, 155, 156, 157, 161, 165, 167, 168, 172, 177, 179, 182, 184, 185, 186, 191, 200, 206, 208, 214, 220, 226, 228, 229, 230, 231, 232, 236, 237, 240, 246, 251, 258, 259, 260, 266, 277, 282, 288, 290, 296, 298, 307, 310, 313, 314, 315, 316, 322, 328, 329, 331, 332, 333, 334, 335, 336, 339, 341, 344, 357, 358, 361, 363, 364, 365, 368, 369, 371, 372, 375, 376, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 402, 403, 406, 407, 408, 409, 412, 415, 422, 423, 424, 425, 432, 434, 435, 442, 446, 448, 450, 451, 460, 471, 482, 486, 488, 496, 524, 530, 553, 556, 557, 559, 560, 561, 562, 563, 564, 578, 582, 583, 584, 586, 587, 595, 601, 602, 603, 604, 609, 612, 616, 618, 624, 639, 659, 660, 662, 663, 670, 671, 672, 673, 676, 677, 678, 682, 691, 692, 702, 703, 708, 709, 711, 712, 717, 723, 729, 735, 740, 744, 745, 749, 750], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 146, 147, 148, 149, 152, 153, 154, 155, 156, 162, 163, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 183, 184, 185, 202, 203, 206, 207, 208, 215, 218, 220, 222, 223, 227, 239, 240, 243, 245, 247, 249, 250, 252, 254, 255, 258, 259, 260, 261, 263, 267, 268, 269, 271, 275, 276, 277, 279, 282, 285, 286, 289, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 307, 313, 314, 316, 317, 318, 321, 322, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 350, 351, 355, 356, 358, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 385, 386, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 414, 415, 416, 417, 419, 422, 423, 424, 425, 429, 430, 433, 435, 437, 438, 439, 442, 443, 446, 449, 450, 451, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 486, 488, 489, 493, 495, 496, 497, 498, 502, 505, 506, 515, 526, 527, 528, 531, 541, 542, 544, 545, 548, 549, 550, 552, 553, 554, 555, 560, 565, 571, 572, 578, 580, 581, 582, 583, 584, 585, 587, 591, 592, 600, 601, 602, 603, 604, 607, 609, 612, 616, 659, 660, 661, 663, 665, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 685, 686, 687, 710, 711, 712, 748, 751], "categori": [0, 2, 21, 36, 93, 94, 229, 237, 290, 296, 307, 325, 331, 462, 463, 464, 467, 468, 469, 470, 502, 535, 660, 663, 681, 684, 706, 710, 712, 714, 715, 716, 745, 746, 750, 753], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 122, 141, 143, 150, 157, 167, 172, 180, 185, 206, 240, 246, 249, 258, 289, 290, 315, 317, 325, 335, 370, 377, 380, 393, 411, 412, 418, 434, 446, 451, 460, 463, 464, 469, 470, 478, 480, 490, 559, 605, 660, 662, 665, 673, 676, 681, 682, 683, 684, 685, 702, 710, 712, 713, 714, 716, 740, 741, 747, 749], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 169, 171, 177, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 210, 215, 218, 220, 221, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 244, 245, 247, 249, 250, 253, 254, 255, 258, 259, 260, 263, 265, 272, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 296, 297, 298, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 349, 350, 351, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 427, 430, 433, 437, 438, 442, 443, 444, 446, 449, 450, 451, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 605, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 659, 660, 663, 673, 676, 678, 681, 682, 683, 684, 685, 686, 687, 697, 702, 706, 708, 710, 711, 712, 713, 714, 716, 717, 718, 722, 723, 724, 728, 729, 730, 734, 735, 736, 740, 741, 742, 743, 744, 746, 747, 748, 749, 753], "copi": [0, 5, 21, 44, 45, 46, 54, 124, 125, 163, 165, 169, 175, 176, 185, 206, 208, 249, 251, 258, 259, 260, 263, 276, 290, 316, 327, 395, 396, 430, 432, 437, 451, 460, 462, 463, 464, 468, 469, 470, 530, 541, 566, 662, 678, 704, 706, 750, 753], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 113, 118, 122, 124, 125, 127, 129, 133, 138, 141, 142, 144, 149, 150, 159, 161, 163, 167, 168, 170, 171, 172, 179, 180, 184, 185, 206, 208, 215, 216, 220, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 243, 244, 247, 249, 255, 258, 259, 260, 261, 263, 271, 276, 277, 285, 286, 287, 290, 294, 297, 298, 307, 312, 315, 316, 317, 318, 321, 322, 323, 324, 327, 333, 334, 335, 336, 337, 344, 349, 350, 351, 358, 361, 363, 367, 370, 374, 376, 378, 379, 393, 398, 400, 404, 409, 411, 417, 418, 427, 430, 434, 435, 438, 444, 446, 450, 451, 460, 461, 462, 463, 464, 468, 469, 470, 472, 473, 478, 485, 488, 493, 494, 495, 496, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 532, 535, 541, 548, 553, 554, 564, 581, 582, 583, 584, 601, 602, 603, 604, 605, 609, 612, 616, 626, 627, 629, 630, 631, 632, 650, 659, 660, 663, 665, 666, 671, 673, 676, 677, 678, 679, 681, 682, 683, 684, 685, 702, 707, 710, 711, 712, 744, 747, 748, 751], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 113, 115, 118, 120, 121, 123, 124, 125, 129, 130, 131, 132, 134, 135, 136, 137, 138, 147, 149, 150, 153, 154, 162, 167, 170, 172, 175, 177, 178, 179, 185, 202, 203, 206, 208, 221, 240, 244, 247, 249, 252, 254, 258, 259, 260, 263, 264, 265, 267, 268, 269, 272, 275, 276, 277, 282, 289, 290, 307, 313, 314, 316, 317, 322, 329, 334, 335, 336, 342, 349, 350, 351, 358, 360, 361, 364, 365, 368, 369, 371, 372, 376, 378, 379, 388, 391, 392, 394, 396, 400, 401, 402, 403, 405, 406, 407, 408, 409, 415, 417, 422, 423, 433, 434, 442, 451, 458, 459, 460, 461, 548, 567, 570, 589, 615, 633, 661, 663, 664, 665, 668, 669, 670, 671, 673, 675, 676, 680, 681, 682, 683, 684, 687, 702, 704, 705, 706, 707, 710, 740, 741, 746, 747, 748, 749, 751], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 120, 124, 125, 126, 127, 128, 133, 134, 138, 140, 143, 162, 167, 168, 170, 182, 184, 193, 212, 213, 220, 225, 239, 243, 245, 246, 263, 265, 283, 284, 287, 307, 308, 309, 312, 316, 319, 321, 327, 328, 331, 333, 335, 338, 340, 357, 363, 382, 387, 397, 398, 399, 404, 405, 409, 412, 434, 435, 443, 448, 450, 461, 471, 481, 483, 488, 489, 493, 494, 499, 506, 511, 527, 528, 530, 541, 551, 552, 554, 556, 557, 561, 562, 563, 570, 589, 595, 605, 608, 613, 615, 626, 650, 651, 660, 662, 665, 669, 673, 675, 686, 702, 703, 704, 706, 710, 735, 737, 740, 747, 748, 749, 751], "categor": [0, 1, 2, 21, 36, 93, 94, 228, 229, 230, 231, 232, 236, 237, 290, 296, 307, 331, 660, 663, 678, 681, 682, 683, 684, 706, 712, 746, 747, 749, 753], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 167, 168, 169, 170, 171, 172, 174, 177, 179, 180, 182, 183, 184, 203, 208, 215, 217, 218, 220, 221, 227, 233, 234, 235, 238, 239, 243, 249, 250, 254, 256, 261, 270, 277, 281, 282, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 430, 434, 435, 437, 438, 439, 442, 443, 444, 445, 446, 448, 449, 450, 459, 461, 468, 470, 471, 472, 473, 476, 478, 481, 483, 487, 488, 490, 496, 502, 503, 504, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 532, 538, 540, 541, 547, 548, 552, 553, 562, 564, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 614, 616, 617, 650, 651, 659, 660, 663, 664, 665, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 682, 683, 684, 686, 695, 697, 698, 699, 702, 704, 706, 707, 708, 710, 711, 712, 717, 723, 729, 735, 738, 740, 741, 744, 746, 747, 748, 749, 750, 752], "repres": [0, 23, 128, 145, 152, 162, 168, 183, 185, 277, 292, 294, 399, 413, 419, 435, 449, 451, 475, 483, 502, 503, 504, 521, 623, 656, 658, 660, 663, 702, 706, 717, 723, 729, 735, 740, 746, 751, 753], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 141, 159, 168, 179, 193, 199, 210, 239, 243, 249, 250, 271, 289, 298, 312, 318, 321, 325, 327, 337, 344, 349, 350, 351, 378, 379, 382, 387, 411, 427, 435, 461, 473, 479, 481, 488, 490, 493, 499, 527, 528, 538, 543, 547, 554, 608, 626, 627, 628, 629, 630, 631, 632, 638, 650, 660, 663, 673, 676, 691, 703, 706, 708, 711, 748], "anoth": [0, 40, 163, 167, 169, 179, 287, 311, 362, 430, 434, 437, 564, 706, 708], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 142, 144, 147, 149, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 183, 194, 202, 251, 252, 267, 269, 275, 277, 282, 283, 284, 285, 286, 289, 290, 296, 302, 303, 304, 305, 307, 313, 314, 316, 318, 321, 322, 323, 327, 329, 334, 335, 336, 338, 339, 342, 355, 356, 358, 360, 361, 364, 365, 368, 369, 371, 372, 376, 384, 388, 389, 390, 391, 392, 393, 394, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 415, 417, 419, 422, 423, 424, 426, 428, 430, 432, 433, 434, 435, 437, 439, 442, 449, 458, 461, 570, 573, 579, 581, 582, 583, 584, 586, 587, 589, 593, 594, 595, 601, 602, 603, 604, 609, 611, 612, 614, 615, 616, 617, 633, 649, 650, 651, 659, 662, 663, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 691, 692, 702, 705, 708, 710, 711, 717, 719, 723, 725, 729, 731, 740, 741, 744, 745, 747, 748, 749, 751], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 183, 184, 185, 186, 191, 200, 202, 203, 206, 208, 210, 212, 213, 215, 218, 220, 221, 223, 225, 227, 238, 240, 244, 245, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 344, 349, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 380, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 416, 417, 418, 419, 422, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 437, 438, 442, 444, 446, 449, 450, 451, 458, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 509, 510, 526, 528, 529, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 564, 565, 567, 570, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 624, 639, 641, 649, 650, 651, 656, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 702, 703, 704, 708, 712, 717, 723, 729, 735, 737, 740, 750, 751], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 75, 76, 88, 94, 104, 105, 118, 119, 120, 122, 124, 126, 127, 138, 141, 159, 163, 168, 169, 184, 185, 206, 208, 215, 227, 238, 239, 243, 245, 249, 250, 255, 258, 259, 260, 261, 263, 268, 271, 277, 287, 289, 297, 306, 312, 325, 330, 331, 332, 335, 350, 351, 363, 378, 379, 391, 393, 397, 398, 409, 411, 427, 429, 430, 435, 437, 450, 451, 460, 487, 491, 499, 526, 542, 586, 651, 659, 660, 663, 676, 685, 706, 710, 711, 749], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 61, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 115, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 144, 153, 154, 159, 167, 168, 177, 178, 180, 184, 185, 186, 191, 200, 206, 208, 215, 218, 227, 238, 250, 255, 258, 259, 260, 265, 267, 269, 277, 282, 287, 294, 297, 307, 313, 314, 315, 316, 319, 322, 324, 327, 329, 331, 332, 334, 335, 336, 349, 358, 361, 363, 369, 371, 372, 376, 388, 391, 392, 393, 394, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 422, 423, 427, 434, 435, 442, 450, 451, 460, 461, 462, 468, 469, 470, 479, 488, 491, 493, 499, 509, 510, 514, 526, 535, 541, 542, 548, 554, 578, 586, 618, 624, 639, 651, 659, 660, 663, 672, 673, 676, 677, 678, 679, 681, 682, 684, 685, 687, 692, 693, 695, 697, 698, 699, 702, 704, 705, 706, 708, 709, 710, 744, 745, 746, 747, 748, 751, 753], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 171, 172, 174, 177, 178, 180, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 206, 208, 210, 215, 218, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 244, 247, 249, 255, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 276, 277, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 438, 439, 442, 443, 444, 446, 449, 450, 451, 455, 456, 457, 460, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 579, 581, 587, 589, 590, 593, 595, 605, 608, 611, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 656, 658, 659, 660, 663, 665, 668, 669, 670, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 687, 708, 710, 711, 712, 735, 737, 744, 746, 747, 748, 751, 753], "dimension": [0, 145, 185, 206, 208, 258, 259, 260, 263, 277, 413, 451, 460, 548, 553, 660], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 106, 107, 109, 110, 116, 117, 124, 126, 127, 128, 133, 142, 143, 149, 151, 152, 155, 157, 160, 163, 168, 169, 170, 172, 180, 181, 183, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 203, 204, 205, 206, 208, 212, 213, 214, 225, 226, 230, 238, 245, 246, 247, 249, 250, 254, 258, 261, 262, 263, 267, 271, 277, 283, 284, 288, 289, 291, 306, 307, 308, 309, 310, 315, 317, 320, 323, 328, 331, 332, 339, 340, 341, 349, 357, 367, 377, 380, 383, 386, 389, 390, 397, 398, 399, 400, 404, 412, 417, 419, 424, 428, 430, 435, 437, 446, 447, 449, 459, 460, 461, 462, 465, 468, 469, 470, 480, 483, 485, 486, 488, 490, 491, 492, 494, 496, 497, 500, 502, 509, 510, 513, 514, 521, 524, 526, 532, 533, 534, 535, 538, 539, 541, 542, 547, 548, 551, 553, 558, 559, 564, 565, 582, 583, 584, 586, 587, 590, 595, 601, 602, 603, 604, 609, 611, 612, 614, 616, 618, 619, 620, 621, 622, 624, 625, 634, 635, 636, 637, 639, 640, 641, 642, 643, 650, 651, 656, 658, 660, 661, 664, 669, 673, 675, 676, 677, 678, 679, 680, 685, 686, 691, 703, 704, 705, 707, 708, 710, 711, 712, 717, 720, 721, 723, 726, 727, 729, 732, 733, 744, 745, 746, 748, 750, 751, 753], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 113, 115, 116, 117, 118, 121, 123, 125, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 149, 150, 152, 153, 154, 155, 162, 167, 168, 170, 171, 172, 177, 178, 179, 183, 185, 203, 208, 220, 240, 247, 254, 259, 260, 261, 267, 268, 271, 277, 282, 285, 286, 287, 289, 297, 302, 303, 304, 305, 307, 313, 314, 315, 316, 317, 318, 321, 322, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 349, 357, 358, 361, 362, 364, 365, 368, 369, 371, 372, 376, 387, 388, 389, 390, 391, 392, 394, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 417, 418, 419, 422, 423, 424, 434, 435, 438, 442, 444, 446, 449, 451, 459, 469, 470, 472, 474, 475, 478, 483, 488, 493, 494, 496, 499, 500, 502, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 525, 526, 531, 535, 538, 541, 547, 548, 549, 553, 554, 555, 573, 581, 582, 583, 584, 594, 601, 602, 603, 604, 605, 609, 612, 616, 649, 650, 659, 660, 661, 662, 663, 664, 665, 670, 671, 672, 673, 674, 676, 677, 678, 680, 682, 683, 685, 686, 687, 702, 703, 704, 710, 711, 744, 745, 748, 750, 753], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 116, 117, 118, 120, 122, 124, 127, 128, 133, 134, 138, 141, 142, 143, 148, 152, 155, 162, 167, 168, 170, 172, 179, 180, 183, 184, 193, 199, 215, 216, 221, 227, 233, 234, 235, 238, 239, 243, 246, 255, 259, 260, 261, 263, 267, 277, 281, 283, 284, 285, 286, 288, 289, 294, 298, 307, 316, 318, 321, 323, 327, 331, 332, 335, 345, 346, 347, 348, 349, 350, 351, 355, 356, 362, 363, 364, 366, 368, 377, 378, 379, 380, 387, 389, 390, 391, 393, 398, 399, 404, 405, 409, 411, 412, 416, 419, 424, 434, 435, 444, 449, 450, 461, 469, 470, 472, 475, 483, 488, 491, 492, 493, 494, 496, 497, 500, 502, 506, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 526, 531, 532, 535, 541, 542, 548, 549, 551, 553, 554, 555, 560, 562, 563, 564, 565, 566, 582, 583, 584, 595, 601, 602, 603, 604, 605, 609, 612, 616, 626, 627, 628, 629, 630, 631, 632, 638, 641, 650, 651, 659, 660, 663, 665, 669, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 691, 693, 694, 697, 701, 702, 703, 704, 705, 706, 707, 708, 712, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753], "given": [0, 21, 44, 103, 112, 118, 119, 126, 127, 128, 129, 134, 138, 141, 172, 223, 245, 267, 290, 316, 332, 391, 397, 398, 399, 400, 405, 409, 411, 469, 470, 474, 479, 483, 488, 493, 496, 499, 502, 523, 528, 538, 541, 548, 553, 554, 560, 564, 605, 665, 670, 673, 677, 678, 685, 702, 703, 706, 708, 750], "replac": [0, 46, 88, 113, 138, 149, 184, 318, 363, 409, 417, 450, 496, 497, 506, 526, 542, 550, 552, 671, 692, 702, 703, 704, 710, 744, 749, 753], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 115, 121, 122, 123, 124, 129, 130, 131, 132, 133, 135, 136, 137, 149, 153, 154, 167, 168, 171, 177, 208, 220, 230, 236, 239, 243, 249, 277, 282, 289, 307, 313, 314, 322, 323, 329, 333, 334, 336, 344, 350, 351, 358, 361, 362, 369, 370, 371, 372, 374, 376, 378, 379, 384, 388, 392, 393, 394, 395, 401, 402, 403, 404, 406, 407, 408, 417, 422, 423, 434, 435, 438, 442, 444, 446, 472, 478, 480, 488, 541, 578, 652, 663, 673, 708, 711, 748, 749, 753], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 113, 115, 118, 121, 123, 125, 127, 129, 130, 131, 132, 135, 136, 137, 140, 142, 143, 144, 149, 150, 153, 154, 162, 167, 168, 170, 172, 177, 178, 180, 184, 210, 212, 213, 214, 218, 225, 226, 238, 246, 247, 261, 265, 267, 268, 269, 272, 277, 282, 287, 288, 289, 292, 294, 296, 307, 308, 309, 310, 313, 314, 315, 316, 322, 324, 329, 334, 335, 336, 340, 341, 342, 349, 358, 361, 363, 369, 371, 372, 376, 388, 391, 392, 394, 398, 400, 401, 402, 403, 406, 407, 408, 412, 417, 418, 422, 423, 434, 435, 442, 450, 461, 462, 468, 470, 483, 485, 488, 492, 493, 499, 500, 509, 510, 526, 541, 548, 553, 554, 558, 559, 570, 578, 587, 589, 605, 615, 617, 651, 659, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 687, 692, 704, 706, 708, 709, 710, 735, 737, 739, 744, 745, 747, 748, 749, 750, 751, 753], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 113, 122, 124, 125, 128, 133, 134, 138, 141, 149, 162, 163, 167, 168, 169, 170, 172, 174, 175, 180, 185, 203, 247, 249, 254, 259, 260, 261, 263, 267, 268, 269, 276, 277, 299, 307, 316, 318, 331, 332, 335, 386, 387, 391, 393, 396, 399, 400, 404, 405, 409, 411, 417, 430, 434, 435, 437, 439, 446, 451, 459, 461, 462, 463, 464, 468, 469, 470, 472, 474, 495, 496, 497, 550, 552, 578, 587, 593, 595, 608, 650, 659, 660, 661, 663, 664, 665, 666, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 692, 702, 705, 708, 709, 712, 717, 723, 729, 748, 749, 750], "item": [0, 36, 48, 106, 114, 138, 144, 277, 307, 321, 325, 409, 469, 470, 673, 675, 735, 737, 739], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 161, 177, 277, 282, 299, 313, 314, 321, 322, 323, 329, 334, 336, 358, 361, 369, 371, 372, 376, 382, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 469, 489, 651, 660, 702, 703, 704, 706, 708, 710, 744, 746, 748, 753], "uniqu": [0, 36, 112, 125, 140, 180, 261, 263, 268, 271, 277, 307, 325, 348, 384, 446, 605, 660, 663, 670, 676, 692, 710, 711, 712, 713, 747, 753], "here": [0, 36, 307, 539, 672, 673, 677, 678, 702, 704, 706, 708, 744, 748, 750], "also": [0, 15, 36, 54, 94, 124, 125, 127, 129, 133, 134, 249, 307, 327, 362, 396, 398, 400, 404, 405, 444, 488, 489, 491, 498, 501, 505, 506, 509, 510, 514, 521, 535, 538, 545, 547, 660, 665, 676, 677, 678, 702, 703, 704, 705, 706, 708, 709, 710, 740, 744, 746, 747, 748, 750, 751, 753], "thei": [0, 15, 50, 94, 97, 122, 127, 170, 172, 277, 288, 323, 331, 332, 380, 393, 398, 483, 490, 502, 559, 564, 605, 665, 679, 702, 703, 704, 706, 708, 709, 746, 747, 748, 753], "infer": [0, 4, 168, 185, 259, 260, 268, 277, 435, 454, 673, 676, 685, 710], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 114, 118, 124, 125, 128, 129, 138, 144, 149, 150, 151, 165, 167, 168, 172, 176, 179, 180, 184, 188, 190, 199, 212, 213, 215, 217, 220, 221, 251, 259, 260, 261, 265, 266, 267, 268, 269, 271, 277, 287, 288, 307, 308, 309, 316, 318, 330, 331, 333, 335, 362, 363, 386, 395, 396, 399, 400, 409, 417, 418, 420, 432, 434, 435, 444, 450, 461, 474, 476, 478, 479, 483, 485, 494, 495, 496, 497, 501, 502, 531, 533, 534, 535, 536, 537, 541, 548, 549, 550, 552, 553, 555, 578, 582, 583, 584, 590, 595, 601, 602, 603, 604, 605, 606, 609, 612, 616, 620, 622, 638, 649, 650, 651, 660, 662, 663, 669, 670, 672, 673, 674, 675, 676, 677, 685, 686, 702, 703, 704, 706, 707, 708, 710, 711, 717, 718, 723, 724, 729, 730, 735, 737, 744, 745, 746, 748, 753], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 116, 117, 118, 122, 127, 129, 133, 138, 140, 141, 142, 148, 149, 150, 151, 152, 155, 161, 162, 163, 167, 168, 169, 170, 172, 173, 180, 183, 184, 185, 206, 208, 211, 216, 220, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 247, 249, 255, 258, 259, 260, 263, 276, 277, 285, 286, 287, 288, 289, 290, 294, 297, 298, 302, 303, 304, 305, 307, 312, 315, 316, 317, 318, 321, 322, 323, 324, 333, 334, 335, 336, 337, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 358, 361, 363, 364, 365, 366, 367, 368, 370, 376, 378, 379, 384, 389, 390, 393, 398, 400, 404, 409, 411, 416, 417, 418, 419, 424, 430, 434, 435, 437, 446, 449, 450, 451, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 478, 485, 488, 493, 494, 495, 496, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 532, 535, 538, 541, 547, 548, 553, 554, 573, 581, 582, 583, 584, 594, 601, 602, 603, 604, 605, 609, 612, 616, 626, 627, 629, 630, 631, 632, 649, 650, 660, 665, 673, 675, 676, 677, 681, 682, 683, 684, 685, 712, 715, 748, 750, 751], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 118, 122, 144, 151, 161, 163, 168, 169, 171, 173, 184, 209, 215, 217, 227, 228, 230, 231, 232, 236, 237, 238, 255, 259, 260, 285, 286, 294, 307, 312, 316, 321, 323, 337, 349, 350, 351, 363, 378, 379, 382, 391, 393, 430, 435, 437, 438, 450, 462, 463, 464, 467, 468, 469, 470, 473, 488, 493, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 554, 650, 660, 673, 678, 681, 682, 683, 684, 691, 704, 708, 712, 715, 744], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 149, 150, 152, 153, 154, 155, 157, 165, 169, 170, 172, 174, 177, 183, 185, 202, 208, 212, 213, 215, 218, 221, 227, 233, 245, 246, 249, 251, 252, 271, 274, 275, 276, 277, 281, 282, 287, 288, 291, 294, 297, 298, 307, 308, 309, 312, 313, 314, 315, 322, 323, 328, 329, 331, 332, 334, 335, 336, 338, 339, 344, 345, 357, 358, 361, 369, 371, 372, 373, 376, 377, 380, 388, 389, 390, 391, 392, 394, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 417, 418, 419, 420, 422, 423, 424, 432, 437, 439, 442, 443, 449, 451, 454, 458, 462, 463, 464, 465, 468, 469, 470, 474, 482, 483, 487, 489, 491, 492, 495, 496, 497, 500, 505, 507, 508, 511, 512, 513, 514, 516, 518, 520, 521, 522, 525, 526, 530, 531, 533, 534, 535, 538, 542, 543, 545, 547, 548, 549, 553, 555, 556, 557, 560, 561, 564, 566, 581, 587, 595, 605, 608, 649, 650, 660, 662, 663, 665, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 692, 694, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 717, 723, 729, 744, 745, 746, 747, 748, 750, 751, 752, 753], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 147, 149, 150, 152, 153, 154, 155, 157, 158, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 183, 184, 185, 193, 206, 208, 209, 213, 215, 218, 220, 221, 228, 229, 230, 231, 232, 233, 236, 237, 238, 245, 246, 247, 249, 251, 258, 261, 267, 269, 271, 276, 277, 278, 282, 285, 286, 287, 288, 289, 290, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 309, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 328, 329, 332, 333, 334, 335, 336, 339, 344, 345, 349, 350, 351, 357, 358, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 376, 378, 379, 380, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 415, 417, 418, 419, 422, 423, 424, 426, 430, 432, 434, 435, 437, 438, 439, 441, 442, 444, 446, 449, 450, 451, 454, 460, 461, 469, 470, 472, 473, 474, 475, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 530, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 579, 587, 590, 593, 595, 605, 608, 611, 613, 614, 618, 624, 626, 627, 629, 630, 631, 632, 639, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 668, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 717, 723, 729, 744, 745, 746, 747, 748, 749, 751, 752, 753], "treat": [0, 12, 13, 73, 94, 184, 285, 286, 294, 344, 450, 469, 470, 488, 533, 541, 548, 553, 711, 712, 748, 750, 751], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 113, 116, 117, 118, 120, 124, 125, 126, 133, 134, 138, 143, 147, 149, 152, 155, 165, 167, 183, 193, 203, 212, 221, 233, 245, 246, 249, 251, 254, 255, 260, 268, 270, 271, 277, 285, 286, 288, 297, 302, 303, 304, 305, 307, 308, 335, 342, 344, 345, 349, 350, 351, 367, 378, 379, 389, 390, 391, 395, 397, 404, 405, 409, 412, 415, 417, 419, 424, 432, 434, 449, 459, 467, 473, 474, 484, 486, 487, 488, 490, 493, 502, 507, 508, 511, 515, 519, 526, 529, 533, 534, 537, 546, 554, 565, 595, 613, 626, 650, 651, 659, 660, 661, 662, 671, 672, 674, 675, 676, 677, 685, 686, 691, 693, 702, 703, 704, 706, 707, 710, 711, 712, 713, 715, 717, 720, 721, 723, 726, 727, 729, 732, 733, 740, 741, 744, 746, 747, 748, 750, 751, 752, 753], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 113, 115, 116, 117, 118, 121, 123, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 141, 144, 148, 151, 152, 153, 154, 155, 156, 162, 168, 171, 175, 177, 178, 180, 183, 203, 215, 227, 240, 254, 255, 261, 271, 277, 282, 285, 286, 288, 291, 299, 302, 303, 304, 305, 307, 313, 314, 315, 322, 324, 327, 329, 334, 335, 336, 344, 349, 355, 356, 358, 361, 364, 365, 366, 368, 369, 371, 372, 376, 388, 389, 390, 392, 394, 398, 399, 401, 402, 403, 404, 406, 407, 408, 409, 411, 416, 419, 422, 423, 424, 425, 435, 438, 442, 446, 449, 459, 461, 470, 472, 478, 483, 484, 496, 526, 529, 537, 546, 565, 570, 578, 581, 582, 583, 584, 589, 590, 593, 595, 601, 602, 603, 604, 608, 609, 612, 613, 615, 616, 660, 669, 670, 671, 676, 679, 686, 687, 702, 703, 704, 706, 708, 710, 711, 745, 746, 747, 748, 749, 751], "unord": [0, 94, 464, 660], "categoricaldtyp": [0, 21, 290, 706, 746], "cannot": [0, 54, 71, 138, 168, 218, 227, 327, 377, 380, 409, 435, 535, 581, 665, 702, 703, 746, 747], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 103, 106, 107, 110, 111, 112, 118, 119, 120, 124, 125, 127, 128, 129, 133, 134, 138, 140, 144, 149, 152, 162, 163, 167, 168, 169, 170, 171, 172, 174, 179, 180, 183, 202, 203, 206, 218, 221, 252, 254, 258, 261, 267, 275, 276, 277, 287, 288, 290, 299, 307, 316, 318, 327, 331, 335, 338, 339, 342, 344, 349, 355, 356, 360, 362, 364, 365, 367, 368, 386, 387, 391, 395, 398, 399, 400, 404, 405, 409, 417, 419, 430, 433, 434, 435, 437, 438, 439, 444, 449, 458, 459, 460, 470, 472, 483, 487, 488, 489, 491, 493, 495, 496, 497, 498, 505, 513, 523, 526, 528, 533, 534, 535, 541, 542, 543, 544, 545, 548, 551, 553, 558, 559, 563, 564, 570, 581, 582, 583, 584, 586, 587, 589, 595, 601, 602, 603, 604, 609, 611, 612, 614, 615, 616, 641, 649, 650, 656, 658, 660, 663, 665, 669, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 693, 694, 695, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 711, 712, 744, 745, 746, 747, 748, 749, 751, 752, 753], "togeth": [0, 111, 210, 387, 704, 705, 744, 747, 748], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 162, 163, 167, 168, 169, 170, 171, 172, 176, 177, 179, 180, 183, 184, 185, 202, 203, 208, 215, 216, 217, 218, 220, 227, 240, 244, 247, 249, 252, 254, 255, 259, 260, 261, 263, 275, 276, 277, 282, 285, 286, 287, 288, 289, 290, 291, 294, 296, 297, 298, 299, 302, 303, 304, 305, 307, 311, 313, 314, 315, 316, 317, 318, 322, 324, 327, 329, 333, 334, 335, 336, 338, 339, 344, 355, 356, 358, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 376, 377, 380, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 416, 417, 418, 419, 422, 423, 424, 430, 433, 434, 435, 437, 438, 442, 446, 449, 450, 451, 458, 459, 461, 462, 463, 464, 468, 469, 470, 472, 474, 478, 483, 484, 485, 488, 489, 490, 494, 496, 497, 500, 502, 506, 526, 529, 531, 532, 533, 534, 535, 537, 538, 541, 542, 546, 547, 548, 549, 551, 552, 553, 555, 558, 559, 571, 572, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 595, 600, 601, 602, 603, 604, 605, 607, 609, 612, 616, 649, 650, 656, 658, 659, 660, 663, 665, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 702, 703, 710, 712, 747, 748, 750, 751, 752, 753], "make": [0, 28, 48, 162, 170, 172, 185, 206, 208, 258, 267, 268, 269, 298, 321, 444, 451, 460, 496, 541, 548, 553, 560, 665, 672, 673, 676, 677, 678, 679, 702, 703, 704, 706, 710, 744, 748], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 115, 120, 121, 123, 130, 131, 132, 134, 135, 136, 137, 149, 153, 154, 160, 167, 177, 180, 185, 206, 208, 220, 258, 259, 260, 266, 282, 288, 289, 297, 307, 313, 314, 322, 325, 329, 330, 333, 334, 335, 336, 358, 361, 362, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 405, 406, 407, 408, 417, 422, 423, 428, 434, 442, 451, 460, 502, 526, 540, 613, 649, 650, 651, 660, 662, 665, 673, 676, 678, 679, 685, 686, 692, 702, 703, 706, 708, 709, 744, 747, 748, 749], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 149, 153, 154, 159, 162, 165, 167, 168, 170, 171, 174, 177, 179, 185, 206, 208, 210, 212, 213, 214, 215, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 250, 251, 255, 258, 259, 260, 261, 263, 265, 271, 272, 276, 277, 282, 287, 288, 290, 293, 295, 296, 298, 307, 308, 309, 310, 313, 314, 315, 317, 318, 319, 322, 323, 325, 326, 327, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 350, 351, 354, 358, 361, 362, 367, 369, 371, 372, 373, 376, 378, 379, 385, 387, 388, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 417, 422, 423, 427, 429, 432, 433, 434, 435, 439, 442, 443, 444, 446, 451, 460, 461, 482, 483, 484, 485, 486, 488, 490, 493, 494, 495, 496, 497, 499, 501, 502, 505, 506, 524, 526, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 581, 587, 605, 608, 633, 641, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 668, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 691, 692, 701, 702, 706, 707, 708, 709, 712, 713, 735, 744, 745, 748, 749], "store": [0, 167, 170, 172, 185, 206, 208, 258, 259, 260, 276, 277, 331, 434, 451, 460, 502, 660, 672, 673, 675, 677, 678, 702, 703, 704, 706, 707, 710, 712, 746, 748, 753], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 147, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 165, 167, 168, 170, 172, 173, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 258, 259, 260, 261, 263, 265, 268, 269, 270, 271, 273, 275, 276, 277, 282, 287, 288, 289, 292, 297, 298, 302, 303, 304, 305, 307, 313, 314, 316, 318, 319, 321, 322, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 342, 344, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 367, 368, 369, 371, 372, 376, 378, 379, 380, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 417, 418, 419, 420, 422, 423, 424, 428, 429, 432, 433, 434, 435, 438, 442, 444, 449, 451, 458, 459, 460, 461, 466, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 579, 581, 590, 618, 624, 639, 650, 659, 660, 665, 669, 670, 671, 673, 676, 677, 678, 682, 683, 684, 687, 692, 702, 704, 708, 709, 711, 712, 713, 745, 748, 749, 751, 753], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 193, 194, 199, 200, 202, 203, 206, 208, 209, 210, 212, 213, 214, 215, 218, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 437, 438, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 574, 578, 579, 581, 582, 583, 584, 587, 588, 589, 590, 593, 595, 596, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 615, 616, 618, 623, 624, 626, 627, 629, 630, 631, 632, 633, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 687, 691, 697, 701, 704, 706, 707, 710, 711, 717, 722, 723, 728, 729, 734, 735, 736, 737, 738, 740, 741, 744, 747, 748], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 171, 174, 177, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 208, 210, 215, 218, 220, 221, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 244, 245, 247, 249, 250, 253, 255, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 433, 438, 439, 442, 443, 444, 446, 449, 450, 451, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 581, 589, 590, 593, 595, 605, 608, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 659, 660, 663, 665, 668, 669, 670, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 687, 702, 703, 704, 706, 708, 710, 711, 712, 713, 714, 716, 717, 718, 723, 724, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 751, 753], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 116, 117, 118, 120, 125, 126, 127, 133, 138, 139, 142, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 171, 174, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 204, 205, 208, 210, 215, 218, 220, 221, 227, 228, 229, 230, 231, 232, 236, 237, 240, 244, 247, 249, 253, 255, 260, 263, 264, 265, 266, 267, 271, 272, 276, 277, 285, 286, 287, 289, 290, 291, 292, 294, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 315, 316, 318, 321, 323, 324, 325, 327, 330, 331, 332, 333, 335, 337, 338, 342, 349, 350, 351, 354, 355, 356, 360, 363, 364, 365, 366, 368, 370, 374, 377, 378, 379, 380, 389, 390, 391, 395, 396, 397, 398, 404, 409, 410, 415, 416, 417, 418, 419, 424, 425, 426, 428, 429, 433, 438, 439, 443, 444, 446, 449, 450, 451, 461, 462, 463, 464, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 570, 578, 589, 590, 593, 595, 608, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 663, 668, 669, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 702, 703, 704, 710, 711, 712, 713, 714, 716, 717, 718, 723, 724, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 751, 753], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 120, 125, 127, 133, 138, 149, 150, 162, 167, 171, 174, 176, 178, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 205, 220, 227, 232, 253, 255, 260, 288, 307, 331, 333, 335, 350, 351, 367, 378, 379, 396, 398, 404, 409, 417, 418, 420, 434, 438, 439, 478, 564, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 640, 641, 642, 643, 663, 669, 672, 675, 676, 678, 681, 682, 684, 686, 687, 694, 697, 705, 706, 708, 709, 712, 714, 716, 744, 745, 746, 747, 748, 749, 751, 752], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 133, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 205, 220, 227, 232, 255, 260, 271, 331, 333, 335, 350, 351, 378, 379, 404, 438, 521, 581, 590, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 672, 710, 711, 712, 714, 746, 748, 751, 753], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 115, 116, 117, 118, 120, 121, 125, 126, 127, 128, 129, 133, 134, 136, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 171, 174, 178, 180, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 197, 198, 199, 201, 204, 208, 210, 215, 218, 227, 228, 229, 230, 231, 236, 237, 238, 240, 244, 247, 249, 250, 255, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 311, 312, 315, 316, 317, 318, 321, 323, 324, 327, 328, 330, 331, 332, 333, 335, 337, 338, 339, 342, 349, 350, 351, 354, 355, 356, 357, 360, 362, 363, 364, 365, 366, 368, 370, 374, 378, 379, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 404, 405, 407, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 438, 439, 443, 444, 446, 449, 450, 451, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 570, 578, 581, 589, 590, 593, 595, 605, 608, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 659, 660, 663, 665, 668, 669, 670, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 687, 706, 708, 710, 711, 712, 717, 718, 723, 724, 729, 730, 744, 745, 746, 747, 748, 751, 753], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 171, 174, 177, 178, 183, 184, 185, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 205, 208, 215, 218, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 244, 247, 249, 250, 253, 255, 260, 261, 264, 265, 266, 267, 271, 272, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 342, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 388, 389, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 438, 439, 442, 443, 444, 446, 449, 450, 451, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 495, 497, 498, 499, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 565, 566, 567, 570, 578, 589, 590, 593, 595, 605, 608, 613, 615, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 660, 663, 665, 669, 670, 673, 676, 682, 683, 684, 685, 687, 710, 711, 712, 744, 746, 747, 748, 751, 753], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 177, 180, 183, 184, 185, 188, 189, 190, 199, 204, 215, 218, 227, 230, 231, 236, 237, 238, 240, 247, 249, 250, 255, 266, 271, 277, 281, 282, 283, 284, 285, 286, 287, 288, 292, 294, 297, 298, 300, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 322, 324, 327, 328, 329, 332, 334, 335, 336, 337, 339, 342, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 388, 389, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 442, 443, 444, 446, 449, 450, 451, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 487, 488, 489, 491, 496, 499, 515, 516, 517, 518, 528, 552, 553, 559, 562, 563, 566, 567, 570, 581, 589, 590, 593, 595, 605, 608, 613, 615, 620, 621, 622, 623, 626, 627, 629, 630, 633, 638, 642, 644, 645, 646, 647, 648, 651, 660, 663, 665, 669, 670, 676, 683, 684, 685, 710, 711, 717, 723, 729, 744, 746, 747, 748, 750, 751], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 115, 116, 117, 121, 123, 124, 127, 128, 129, 130, 131, 132, 135, 136, 137, 147, 148, 152, 153, 154, 155, 171, 177, 178, 179, 180, 183, 184, 218, 220, 239, 243, 282, 285, 286, 288, 294, 296, 300, 302, 303, 304, 305, 307, 311, 313, 314, 318, 321, 322, 324, 327, 329, 330, 332, 333, 334, 336, 337, 350, 351, 355, 356, 358, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 386, 388, 389, 390, 392, 394, 395, 398, 399, 401, 402, 403, 406, 407, 408, 415, 416, 419, 422, 423, 424, 433, 438, 442, 443, 444, 446, 449, 450, 461, 468, 470, 474, 475, 476, 477, 483, 484, 488, 489, 493, 494, 526, 527, 531, 532, 541, 548, 549, 553, 554, 555, 565, 571, 572, 578, 580, 581, 582, 583, 584, 585, 591, 592, 593, 595, 600, 601, 602, 603, 604, 607, 609, 612, 616, 633, 663, 670, 673, 686, 687, 710, 711, 712, 747, 748, 749, 753], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 145, 147, 181, 182, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 201, 204, 205, 224, 233, 234, 235, 241, 242, 248, 257, 262, 264, 272, 273, 274, 278, 292, 296, 306, 319, 320, 321, 337, 342, 343, 345, 346, 347, 348, 359, 360, 373, 375, 381, 382, 383, 413, 415, 420, 421, 445, 447, 448, 452, 453, 454, 455, 456, 457, 465, 466, 467, 476, 569, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 695, 698, 699, 702, 704, 710, 712, 713, 715, 717, 719, 720, 721, 723, 725, 726, 727, 729, 731, 732, 733, 735, 736, 738, 740, 741], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 143, 149, 153, 154, 162, 168, 170, 172, 177, 179, 184, 210, 215, 216, 227, 240, 246, 255, 276, 282, 290, 294, 299, 301, 313, 314, 315, 322, 323, 329, 334, 336, 358, 361, 363, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 412, 417, 422, 423, 435, 442, 444, 450, 461, 470, 483, 488, 521, 538, 541, 547, 553, 581, 665, 672, 673, 676, 677, 678, 679, 702, 703, 704, 706, 708, 710, 745, 748, 751, 753], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 116, 117, 140, 148, 152, 155, 164, 166, 167, 168, 171, 172, 183, 208, 263, 285, 286, 288, 290, 300, 344, 355, 356, 364, 365, 366, 368, 387, 389, 390, 395, 398, 416, 417, 419, 424, 431, 434, 435, 438, 449, 564, 575, 576, 577, 582, 583, 584, 597, 598, 599, 601, 602, 603, 604, 608, 609, 612, 616, 641, 651, 653, 654, 655, 657, 674, 675, 676, 678, 748], "determin": [3, 16, 45, 61, 140, 288, 335, 487, 532, 548, 553, 673, 677, 678, 686, 703, 753], "two": [3, 14, 23, 50, 61, 97, 112, 118, 119, 124, 125, 215, 227, 244, 255, 277, 299, 323, 335, 391, 400, 461, 490, 538, 547, 586, 659, 670, 673, 681, 682, 683, 684, 702, 703, 706, 708, 744, 748], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 120, 125, 138, 143, 159, 160, 165, 167, 172, 179, 180, 200, 202, 212, 213, 214, 217, 225, 226, 241, 246, 250, 251, 252, 259, 270, 273, 275, 277, 292, 294, 307, 308, 309, 310, 312, 318, 319, 321, 323, 325, 331, 335, 337, 340, 341, 349, 400, 409, 412, 427, 428, 432, 434, 444, 446, 458, 469, 475, 483, 486, 492, 498, 502, 505, 526, 538, 543, 544, 545, 547, 548, 553, 554, 559, 570, 589, 615, 649, 650, 662, 673, 675, 676, 678, 679, 683, 692, 693, 702, 703, 704, 706, 708, 710, 712, 713, 747, 748, 750, 753], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 122, 124, 126, 127, 134, 138, 149, 167, 172, 179, 184, 186, 191, 239, 243, 245, 247, 259, 277, 290, 307, 312, 318, 323, 344, 350, 351, 362, 363, 378, 379, 393, 397, 398, 405, 409, 417, 434, 450, 469, 474, 475, 483, 500, 505, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 540, 545, 554, 613, 641, 650, 652, 653, 654, 655, 656, 657, 658, 660, 663, 665, 673, 676, 682, 683, 685, 702, 703, 704, 706, 708, 710, 745, 747, 748, 750, 751, 753], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 115, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 141, 142, 143, 147, 152, 153, 154, 177, 180, 183, 209, 215, 216, 227, 245, 246, 268, 281, 282, 285, 286, 294, 297, 311, 313, 314, 315, 322, 323, 324, 329, 334, 336, 349, 350, 351, 358, 361, 369, 371, 372, 376, 377, 378, 379, 380, 386, 388, 392, 393, 394, 397, 401, 402, 403, 405, 406, 407, 408, 411, 412, 415, 419, 422, 423, 442, 446, 449, 453, 455, 456, 457, 472, 473, 474, 475, 476, 477, 479, 480, 483, 485, 488, 489, 492, 493, 501, 511, 512, 513, 514, 520, 521, 522, 525, 526, 527, 528, 538, 543, 547, 548, 550, 553, 554, 656, 658, 673, 683, 706, 708, 710, 717, 719, 723, 725, 729, 731, 735, 736, 745, 748], "out": [3, 48, 92, 159, 162, 167, 168, 171, 250, 306, 321, 337, 427, 434, 435, 438, 474, 548, 553, 590, 660, 669, 677, 678, 702, 706, 744, 748, 749], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 113, 116, 117, 118, 122, 124, 125, 127, 129, 133, 138, 140, 141, 142, 144, 148, 149, 150, 151, 152, 155, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 176, 179, 180, 183, 184, 185, 202, 208, 209, 211, 216, 220, 228, 229, 230, 231, 232, 236, 237, 238, 239, 243, 247, 249, 250, 252, 261, 263, 271, 275, 277, 285, 286, 287, 288, 289, 290, 293, 294, 295, 297, 298, 302, 303, 304, 305, 315, 317, 318, 321, 322, 323, 324, 326, 327, 333, 334, 335, 336, 337, 349, 350, 351, 355, 356, 358, 361, 363, 364, 365, 366, 367, 368, 370, 376, 378, 379, 384, 385, 389, 390, 391, 393, 395, 396, 398, 400, 404, 409, 411, 416, 417, 418, 419, 424, 427, 430, 434, 435, 437, 438, 446, 449, 450, 458, 461, 462, 463, 464, 468, 470, 472, 473, 478, 485, 488, 493, 494, 495, 496, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 532, 535, 538, 541, 547, 548, 553, 554, 564, 573, 581, 594, 605, 626, 627, 629, 630, 631, 632, 649, 650, 660, 663, 665, 671, 673, 676, 677, 678, 679, 681, 682, 683, 684, 685, 702, 707, 710, 711, 712, 713, 714, 716, 745, 747, 748, 749, 751], "ha": [3, 19, 57, 58, 61, 64, 70, 97, 178, 193, 220, 255, 268, 289, 330, 333, 335, 337, 339, 489, 494, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 525, 626, 678, 687, 702, 703, 706, 707, 710, 735, 737, 745, 747, 748, 750, 751, 752], "call": [3, 11, 15, 17, 28, 61, 124, 125, 138, 157, 168, 179, 221, 288, 298, 335, 409, 435, 462, 505, 545, 665, 691, 693, 701, 702, 703, 706, 708, 710, 747, 748, 750], "otherwis": [3, 19, 44, 50, 51, 61, 134, 141, 162, 168, 247, 261, 271, 288, 289, 316, 323, 332, 335, 391, 405, 411, 420, 435, 478, 483, 673, 676, 686, 703, 707, 709, 710], "nan_as_nul": [4, 58, 59, 71, 100, 208, 220, 230, 277, 333, 374, 444, 663, 751], "gpu": [4, 16, 17, 94, 120, 277, 306, 383, 650, 673, 694, 703, 704, 705, 706, 708, 709, 710, 744, 748, 749, 750, 753], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 267, 268, 269, 277, 387, 605, 608, 675, 676, 692, 747, 748, 749], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 113, 120, 125, 127, 134, 143, 162, 168, 170, 172, 212, 213, 214, 218, 225, 226, 246, 277, 290, 308, 309, 310, 327, 335, 340, 341, 362, 398, 405, 412, 435, 496, 560, 570, 581, 589, 615, 663, 665, 671, 672, 673, 676, 677, 678, 679, 685, 706, 740, 741, 748, 751], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 120, 124, 127, 129, 133, 134, 138, 143, 152, 167, 171, 183, 212, 246, 271, 294, 297, 307, 308, 316, 317, 327, 328, 332, 335, 344, 357, 370, 387, 395, 398, 400, 404, 405, 409, 412, 419, 434, 438, 444, 446, 449, 470, 474, 483, 496, 498, 505, 521, 523, 526, 528, 533, 542, 545, 548, 553, 564, 570, 587, 589, 595, 608, 615, 641, 649, 650, 665, 669, 673, 675, 676, 678, 683, 685, 695, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 712, 717, 723, 729, 735, 740, 744, 745, 746, 747, 748, 750, 751, 753], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 162, 165, 167, 168, 175, 177, 178, 179, 180, 184, 203, 229, 249, 251, 254, 263, 272, 276, 459, 461, 462, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 579, 581, 582, 583, 584, 587, 589, 595, 601, 602, 603, 604, 605, 608, 609, 612, 613, 615, 616, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 676, 679, 684, 685, 686, 687, 691, 692, 693, 695, 698, 699, 701, 702, 703, 706, 708, 709, 711, 712, 745, 746, 747, 749, 751, 753], "constant": [4, 650, 651, 663], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 141, 142, 149, 150, 153, 154, 159, 160, 163, 169, 171, 177, 212, 213, 214, 225, 226, 266, 282, 308, 309, 310, 313, 314, 315, 322, 329, 334, 336, 339, 340, 341, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 411, 417, 422, 423, 427, 428, 430, 437, 442, 669, 676, 702, 705, 708, 751], "Will": [4, 168, 172, 277, 435, 665], "rangeindex": [4, 23, 70, 144, 147, 149, 170, 172, 277, 292, 354, 415, 417, 665, 683, 706], "inform": [4, 15, 19, 43, 61, 70, 167, 288, 289, 315, 335, 434, 469, 470, 650, 676, 685, 702, 703, 705, 706, 710, 748, 750, 751], "part": [4, 61, 172, 335, 538, 547, 590, 702, 703, 711, 717, 723, 729], "provid": [4, 15, 16, 21, 22, 36, 54, 67, 125, 133, 134, 138, 162, 169, 178, 208, 221, 263, 267, 268, 271, 276, 277, 288, 290, 307, 327, 404, 405, 409, 437, 461, 474, 497, 542, 558, 559, 578, 660, 663, 676, 679, 687, 692, 697, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 744, 746, 747, 748, 751, 752, 753], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 124, 125, 128, 138, 144, 149, 178, 179, 181, 182, 206, 207, 208, 223, 244, 247, 258, 261, 262, 263, 268, 270, 271, 277, 283, 284, 290, 316, 323, 324, 325, 335, 343, 360, 395, 399, 409, 417, 447, 448, 460, 478, 569, 660, 673, 676, 682, 687, 692, 706, 747, 749], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 167, 171, 172, 174, 177, 178, 180, 183, 184, 189, 192, 195, 196, 198, 201, 204, 220, 221, 229, 230, 231, 232, 236, 237, 245, 247, 249, 250, 255, 260, 263, 264, 265, 266, 267, 268, 272, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 349, 350, 351, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 438, 439, 442, 443, 444, 446, 449, 450, 451, 455, 456, 457, 461, 462, 463, 464, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 593, 595, 601, 602, 603, 604, 605, 608, 609, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 659, 660, 663, 665, 668, 669, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 687, 704, 706, 708, 710, 711, 712, 717, 723, 729, 744, 745, 746, 747, 748, 751, 753], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 122, 138, 152, 158, 162, 168, 172, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 204, 205, 263, 277, 291, 301, 324, 325, 339, 355, 356, 377, 380, 393, 409, 419, 426, 435, 449, 451, 478, 485, 486, 492, 502, 516, 522, 527, 531, 533, 534, 535, 541, 548, 549, 550, 553, 555, 595, 606, 611, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 656, 658, 673, 676, 685, 704, 710, 746, 750, 751], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 116, 117, 118, 122, 126, 127, 129, 134, 138, 155, 156, 168, 170, 171, 174, 184, 186, 191, 203, 220, 228, 229, 230, 231, 232, 236, 237, 240, 245, 247, 253, 254, 266, 271, 276, 277, 288, 290, 298, 307, 312, 323, 330, 333, 335, 339, 344, 350, 351, 362, 363, 378, 379, 387, 389, 390, 393, 397, 398, 405, 409, 424, 425, 435, 438, 439, 444, 450, 451, 459, 461, 471, 483, 526, 548, 551, 553, 578, 587, 608, 650, 652, 653, 654, 655, 656, 657, 658, 660, 673, 675, 676, 679, 685, 686, 691, 697, 702, 703, 709, 710, 711, 712, 717, 723, 729, 735, 736, 738, 740, 747, 748, 749, 751], "forc": [4, 168, 435, 676, 710], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 115, 118, 121, 122, 123, 125, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 153, 154, 162, 167, 168, 170, 176, 177, 179, 181, 182, 184, 217, 221, 228, 229, 230, 231, 232, 236, 237, 261, 262, 281, 282, 289, 297, 298, 307, 313, 314, 316, 318, 321, 322, 329, 334, 335, 336, 344, 358, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 376, 388, 392, 393, 394, 396, 400, 401, 402, 403, 404, 406, 407, 408, 417, 418, 422, 423, 434, 435, 442, 443, 446, 447, 448, 450, 461, 482, 488, 489, 494, 495, 500, 502, 526, 532, 535, 548, 553, 556, 557, 561, 578, 579, 582, 583, 584, 587, 593, 601, 602, 603, 604, 609, 612, 616, 650, 660, 665, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 691, 697, 702, 703, 705, 706, 708, 710, 717, 723, 729, 745, 748, 750, 751], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 115, 118, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 168, 177, 178, 271, 277, 282, 313, 314, 316, 322, 329, 334, 335, 336, 342, 349, 358, 360, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 435, 442, 483, 491, 502, 528, 540, 542, 587, 673, 675, 677, 678, 687, 703, 706, 710, 744, 745, 747, 748], "allow": [4, 15, 21, 50, 51, 70, 94, 118, 125, 138, 167, 168, 277, 288, 290, 323, 409, 434, 435, 502, 660, 676, 677, 678, 681, 682, 683, 684, 702, 704, 706, 708, 710, 712, 713, 746, 748, 750, 753], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 124, 128, 133, 143, 144, 161, 163, 165, 168, 169, 171, 172, 173, 174, 208, 220, 246, 251, 253, 266, 267, 268, 269, 271, 277, 290, 330, 333, 362, 374, 395, 399, 404, 412, 429, 430, 432, 433, 435, 437, 438, 439, 482, 507, 508, 523, 530, 556, 557, 561, 563, 565, 641, 662, 675, 676, 685, 686, 706, 712, 714, 716, 735, 737, 739, 740, 742, 743, 745, 749, 751], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 120, 129, 133, 169, 171, 208, 220, 230, 236, 277, 306, 307, 312, 333, 350, 351, 362, 374, 378, 379, 404, 437, 438, 444, 446, 488, 660, 663, 673, 686, 746, 748, 751], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 116, 117, 120, 128, 133, 141, 148, 150, 152, 155, 162, 168, 171, 174, 183, 208, 216, 217, 218, 220, 277, 285, 286, 288, 300, 302, 303, 304, 305, 316, 318, 321, 327, 332, 333, 337, 350, 351, 355, 356, 364, 365, 366, 368, 374, 378, 379, 381, 382, 383, 389, 390, 399, 404, 411, 416, 418, 419, 420, 424, 429, 435, 438, 439, 445, 449, 461, 468, 470, 472, 475, 478, 483, 492, 502, 526, 573, 587, 593, 594, 595, 663, 673, 686, 702, 703, 706, 708, 712, 749], "leav": [4, 58, 71, 92, 208, 220, 277, 333, 471, 669, 679, 686, 692, 748], "build": [4, 259, 705, 748], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 171, 174, 177, 178, 180, 183, 184, 264, 267, 272, 277, 282, 283, 284, 285, 286, 289, 290, 297, 302, 303, 304, 305, 307, 313, 314, 315, 316, 321, 322, 323, 327, 329, 334, 335, 336, 338, 339, 342, 350, 351, 355, 356, 358, 360, 361, 363, 364, 365, 368, 369, 371, 372, 374, 376, 378, 379, 387, 388, 389, 390, 392, 394, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 411, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 428, 439, 442, 449, 450, 581, 590, 605, 608, 613, 663, 667, 668, 669, 674, 676, 677, 678, 685, 687, 710, 711, 744, 745, 747, 748, 751, 753], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 113, 134, 144, 149, 158, 162, 167, 170, 172, 174, 179, 203, 207, 222, 240, 249, 254, 261, 271, 277, 335, 339, 405, 417, 426, 434, 439, 459, 475, 496, 567, 569, 574, 590, 596, 664, 665, 671, 672, 673, 675, 676, 677, 678, 679, 685, 706, 707, 710, 711, 740, 741, 747, 748], "val": [4, 23, 64, 158, 174, 339, 426, 439, 590, 680, 710], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 115, 118, 119, 121, 123, 124, 130, 131, 132, 135, 136, 137, 138, 153, 154, 158, 168, 174, 177, 206, 228, 229, 230, 231, 232, 236, 237, 261, 282, 291, 301, 313, 314, 322, 329, 334, 336, 339, 350, 351, 358, 361, 364, 365, 368, 369, 371, 372, 376, 378, 379, 388, 391, 392, 394, 395, 401, 402, 403, 406, 407, 408, 409, 422, 423, 426, 435, 439, 442, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 582, 583, 584, 586, 601, 602, 603, 604, 609, 612, 616, 673, 676, 681, 682, 683, 684, 685, 686, 704, 706, 710, 711, 735, 739, 746, 748, 749], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 116, 117, 118, 120, 125, 126, 127, 128, 138, 139, 141, 144, 147, 148, 152, 155, 156, 158, 168, 174, 183, 184, 210, 220, 232, 245, 249, 253, 264, 272, 276, 277, 281, 285, 286, 290, 302, 303, 304, 305, 307, 312, 315, 316, 323, 332, 333, 338, 339, 342, 354, 355, 356, 360, 363, 364, 365, 366, 368, 374, 389, 390, 395, 396, 397, 398, 399, 400, 409, 410, 411, 415, 416, 419, 424, 425, 426, 433, 435, 438, 439, 449, 450, 463, 464, 468, 469, 470, 486, 501, 507, 508, 513, 518, 529, 537, 590, 623, 626, 629, 630, 644, 645, 646, 648, 660, 665, 672, 685, 703, 708, 709, 717, 723, 729, 744, 748, 749, 751, 753], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 128, 158, 170, 172, 174, 276, 277, 316, 339, 342, 399, 400, 426, 439, 461, 496, 660, 668, 673, 676, 679, 702, 708, 710, 744, 748, 751, 753], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 61, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 118, 119, 120, 121, 125, 127, 128, 129, 133, 138, 139, 141, 142, 144, 147, 148, 157, 158, 160, 161, 178, 184, 188, 189, 190, 194, 204, 215, 227, 229, 232, 245, 249, 255, 266, 271, 277, 282, 283, 284, 287, 288, 291, 296, 299, 300, 302, 303, 304, 305, 307, 311, 312, 315, 316, 317, 323, 324, 327, 332, 335, 339, 342, 349, 350, 351, 354, 360, 363, 365, 366, 370, 377, 378, 379, 380, 391, 392, 398, 399, 404, 409, 410, 411, 415, 416, 418, 426, 428, 443, 444, 446, 450, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 481, 484, 485, 486, 487, 489, 497, 498, 499, 505, 511, 516, 544, 545, 550, 551, 559, 562, 563, 570, 586, 589, 590, 593, 595, 605, 613, 615, 620, 621, 622, 623, 626, 627, 629, 630, 633, 642, 651, 660, 665, 669, 676, 681, 682, 683, 684, 685, 687, 706, 710, 711, 744, 746, 747, 748, 751, 753], "insert": [4, 64, 129, 141, 158, 339, 400, 411, 426, 552, 692, 706, 749], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 128, 133, 139, 141, 144, 147, 174, 249, 264, 272, 277, 316, 328, 332, 339, 354, 357, 360, 399, 400, 404, 410, 411, 415, 433, 439, 481, 486, 523, 623, 626, 668, 673, 674, 677, 678, 685, 710, 744, 747, 748, 750, 751], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 128, 139, 141, 144, 147, 174, 186, 188, 189, 190, 191, 194, 197, 199, 204, 205, 264, 272, 277, 299, 301, 302, 303, 304, 305, 307, 316, 319, 332, 354, 360, 399, 400, 410, 411, 415, 433, 439, 486, 495, 502, 507, 508, 564, 590, 595, 620, 621, 622, 623, 626, 631, 632, 636, 638, 642, 643, 644, 645, 646, 647, 648, 685, 706, 710, 744, 748], "13": [4, 44, 55, 84, 94, 128, 141, 144, 158, 299, 301, 316, 319, 328, 332, 354, 357, 399, 400, 411, 426, 433, 486, 644, 645, 646, 648, 710, 717, 723, 729, 744], "14": [4, 15, 70, 94, 100, 128, 141, 144, 158, 319, 332, 354, 374, 399, 411, 426, 486, 644, 645, 646, 648, 710, 748], "via": [4, 36, 138, 167, 307, 409, 434, 470, 694, 706, 710, 744, 747], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 120, 133, 138, 163, 169, 173, 182, 206, 208, 220, 239, 243, 258, 276, 277, 289, 290, 307, 333, 350, 351, 374, 378, 379, 404, 409, 430, 437, 448, 451, 460, 660, 663, 676, 685, 702, 704, 748, 749, 751, 753], "datetim": [4, 36, 47, 118, 120, 128, 133, 168, 185, 187, 192, 195, 196, 198, 200, 201, 205, 307, 319, 399, 404, 435, 451, 619, 625, 634, 635, 637, 640, 643, 668, 673, 674, 677, 678, 681, 682, 684, 685, 706, 710, 746, 747, 748, 749, 753], "timedelta": [4, 118, 133, 404, 452, 644, 746, 748], "t0": 4, "strptime": [4, 120, 685, 710], "2018": [4, 47, 55, 84, 120, 128, 247, 328, 357, 399, 631, 632, 668, 673, 674, 677, 678, 710], "07": [4, 120, 124, 128, 133, 188, 189, 190, 204, 399, 404, 620, 621, 622, 623, 633, 642], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 124, 128, 133, 185, 186, 191, 192, 194, 195, 196, 198, 199, 200, 201, 281, 307, 319, 338, 350, 351, 378, 379, 399, 404, 451, 570, 589, 615, 618, 624, 625, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 648, 668, 673, 674, 677, 678, 710, 751, 753], "y": [4, 15, 16, 17, 44, 120, 127, 147, 162, 205, 249, 316, 395, 398, 415, 475, 486, 523, 538, 547, 566, 641, 643, 685, 706, 710, 740, 742, 743, 745, 748], "m": [4, 120, 128, 168, 172, 186, 191, 197, 200, 399, 435, 496, 523, 618, 624, 636, 638, 639, 641, 644, 645, 646, 648, 676, 685, 704, 710, 744, 746, 750], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 115, 120, 121, 123, 127, 130, 131, 132, 135, 136, 137, 138, 141, 144, 149, 153, 154, 159, 162, 177, 178, 186, 187, 188, 189, 190, 191, 200, 204, 250, 271, 277, 282, 296, 297, 307, 312, 313, 314, 316, 322, 329, 334, 336, 358, 360, 361, 369, 371, 372, 376, 388, 392, 394, 395, 398, 400, 401, 402, 403, 406, 407, 408, 409, 411, 417, 422, 423, 427, 433, 442, 444, 461, 481, 483, 484, 486, 488, 494, 501, 523, 526, 543, 562, 563, 618, 619, 620, 621, 622, 624, 639, 641, 642, 660, 685, 687, 706, 710, 744, 748, 751], "h": [4, 111, 186, 191, 192, 200, 387, 486, 526, 618, 624, 625, 639, 706, 710], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 118, 119, 126, 127, 134, 138, 141, 142, 149, 151, 159, 162, 168, 170, 172, 179, 186, 191, 200, 201, 229, 244, 247, 277, 281, 283, 284, 289, 290, 291, 294, 296, 297, 298, 302, 303, 304, 305, 307, 312, 315, 316, 317, 319, 321, 323, 324, 325, 333, 335, 342, 349, 355, 356, 362, 370, 380, 391, 397, 398, 405, 409, 411, 417, 418, 420, 427, 435, 444, 446, 451, 462, 463, 464, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 589, 590, 595, 608, 615, 618, 623, 624, 626, 627, 629, 630, 632, 638, 639, 640, 644, 645, 646, 647, 648, 651, 660, 663, 665, 668, 669, 670, 672, 673, 676, 677, 678, 679, 685, 686, 702, 703, 704, 705, 706, 710, 711, 744, 746, 748, 750, 751, 752, 753], "id": [4, 16, 593, 595, 649, 650, 710, 745], "arang": [4, 17, 710, 748], "second": [4, 44, 97, 111, 128, 143, 157, 168, 186, 191, 199, 200, 246, 265, 316, 319, 387, 399, 412, 435, 452, 455, 618, 624, 638, 639, 644, 646, 673, 676, 679, 685, 706, 710], "x": [4, 5, 15, 16, 17, 44, 61, 73, 147, 162, 176, 249, 271, 288, 316, 335, 344, 362, 415, 461, 475, 538, 547, 550, 552, 566, 570, 589, 590, 608, 615, 641, 660, 673, 677, 678, 704, 708, 710, 711, 740, 742, 743, 745, 747, 748], "01": [4, 36, 128, 133, 134, 172, 185, 187, 188, 189, 190, 192, 195, 196, 197, 198, 200, 201, 204, 205, 307, 399, 404, 405, 451, 523, 565, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 647, 668, 673, 674, 677, 678, 745, 746, 751], "02": [4, 124, 128, 133, 187, 188, 189, 190, 192, 196, 197, 201, 204, 319, 399, 404, 451, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 635, 636, 640, 642, 668, 673, 674, 677, 678, 685, 710, 745], "03": [4, 47, 128, 134, 187, 188, 189, 190, 197, 204, 319, 399, 405, 451, 619, 620, 621, 622, 623, 627, 629, 630, 636, 641, 642, 647, 685, 710, 744], "04": [4, 46, 55, 75, 76, 84, 104, 105, 124, 128, 133, 188, 189, 190, 200, 204, 328, 350, 351, 357, 378, 379, 399, 404, 451, 618, 620, 621, 622, 623, 624, 639, 642, 685], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 113, 124, 128, 138, 140, 149, 151, 152, 157, 158, 159, 160, 162, 167, 170, 172, 180, 183, 206, 208, 216, 217, 250, 258, 269, 277, 283, 284, 285, 286, 292, 302, 303, 304, 305, 311, 316, 317, 318, 324, 328, 335, 339, 342, 343, 357, 360, 395, 399, 409, 417, 419, 426, 427, 428, 434, 449, 460, 461, 472, 473, 475, 476, 479, 483, 488, 490, 492, 494, 502, 526, 548, 553, 569, 579, 587, 590, 605, 606, 650, 659, 662, 668, 671, 672, 673, 675, 676, 677, 678, 679, 682, 702, 708, 710, 711, 744, 745, 747, 748, 751], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 129, 143, 145, 210, 241, 246, 267, 268, 269, 271, 273, 287, 288, 335, 387, 400, 412, 413, 608, 651, 669, 673, 676, 677, 678, 679, 685, 706, 710], "cat": [4, 134, 180, 325, 362, 405, 461, 462, 463, 464, 468, 469, 470, 489, 493, 502, 531, 549, 554, 555, 663, 692, 697, 710], "jump": [4, 129], "dog": [4, 74, 134, 180, 362, 405, 461, 488, 527, 710], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 116, 117, 118, 127, 128, 133, 134, 141, 148, 152, 155, 156, 160, 178, 183, 188, 190, 194, 229, 232, 277, 285, 286, 302, 303, 304, 305, 307, 315, 316, 339, 342, 355, 356, 360, 364, 365, 368, 370, 389, 390, 398, 399, 404, 405, 411, 416, 419, 424, 425, 428, 444, 446, 449, 472, 485, 486, 544, 593, 595, 620, 621, 622, 623, 626, 627, 629, 630, 633, 642, 660, 665, 687, 710, 744, 746, 748, 751, 753], "cow": [4, 44, 157, 316, 317, 349], "moo": 4, "occasion": [4, 703], "pdf": [4, 58, 171, 710, 746], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 162, 171, 177, 178, 183, 184, 208, 221, 240, 250, 261, 264, 265, 266, 267, 271, 272, 277, 282, 283, 284, 285, 286, 290, 296, 297, 298, 302, 303, 304, 305, 307, 313, 314, 316, 322, 327, 329, 330, 331, 332, 334, 335, 336, 338, 342, 354, 355, 356, 358, 360, 361, 363, 364, 365, 368, 369, 371, 372, 374, 376, 387, 388, 389, 390, 392, 394, 395, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 415, 416, 417, 419, 422, 423, 424, 425, 427, 429, 433, 442, 443, 444, 449, 450, 461, 475, 483, 484, 486, 489, 494, 498, 500, 505, 511, 526, 528, 540, 545, 554, 562, 563, 566, 567, 570, 589, 590, 593, 595, 605, 608, 613, 615, 659, 660, 663, 665, 669, 670, 673, 676, 679, 682, 683, 684, 687, 708, 710, 711, 712, 713, 714, 716, 740, 741, 744, 746, 747, 748, 751, 753], "from_panda": [4, 227, 232, 255, 271, 581, 590, 710, 711, 712, 745, 746, 753], "attribut": [4, 36, 143, 179, 208, 246, 259, 268, 277, 307, 396, 412, 464, 682, 683, 684, 692, 706, 707, 710, 712, 717, 723, 729, 735, 740], "iloc": [4, 67, 277, 590, 710, 711, 748, 751], "select": [4, 36, 44, 55, 64, 68, 84, 86, 97, 106, 125, 167, 250, 277, 307, 316, 317, 328, 339, 342, 357, 360, 434, 675, 676, 677, 678, 692, 706, 745, 749], "posit": [4, 15, 64, 68, 111, 141, 146, 159, 221, 223, 250, 277, 288, 339, 342, 387, 411, 414, 427, 474, 501, 506, 509, 510, 526, 550, 551, 552, 565, 567, 587, 595, 608, 717, 723, 729, 749], "20": [4, 21, 40, 44, 50, 61, 68, 125, 126, 157, 167, 220, 253, 277, 290, 316, 323, 333, 335, 342, 395, 396, 397, 434, 438, 486, 546, 672, 710, 744, 745, 748], "30": [4, 21, 43, 44, 61, 63, 68, 125, 126, 128, 157, 186, 220, 277, 290, 315, 316, 333, 335, 338, 342, 395, 396, 397, 399, 438, 578, 623, 627, 629, 630, 631, 632, 633, 641, 672, 685, 710], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 115, 116, 117, 121, 126, 127, 128, 130, 131, 132, 133, 135, 136, 138, 147, 148, 151, 153, 154, 155, 156, 161, 171, 178, 180, 184, 185, 210, 215, 218, 227, 238, 240, 244, 245, 247, 249, 253, 255, 258, 265, 272, 277, 282, 283, 284, 287, 288, 289, 290, 296, 297, 298, 306, 307, 311, 315, 316, 318, 321, 324, 327, 329, 332, 337, 338, 342, 354, 360, 362, 363, 364, 366, 368, 369, 370, 371, 372, 377, 380, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 415, 416, 418, 422, 423, 424, 425, 438, 444, 450, 451, 462, 463, 464, 468, 469, 470, 471, 474, 476, 489, 492, 503, 504, 507, 508, 567, 605, 645, 646, 647, 648, 651, 663, 687, 710, 711, 735, 737, 740, 741, 744, 746, 748, 750, 751, 753], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 61, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 115, 121, 123, 125, 127, 130, 131, 132, 133, 135, 136, 137, 138, 142, 144, 147, 149, 153, 154, 159, 162, 177, 178, 221, 250, 271, 277, 282, 296, 297, 307, 313, 314, 316, 322, 325, 327, 329, 331, 334, 335, 336, 342, 354, 358, 360, 361, 369, 371, 372, 376, 387, 388, 392, 394, 395, 398, 400, 401, 402, 403, 404, 406, 407, 408, 409, 415, 417, 422, 423, 427, 433, 442, 443, 444, 461, 475, 483, 489, 526, 532, 540, 562, 563, 570, 589, 590, 593, 595, 615, 641, 659, 660, 669, 670, 673, 679, 682, 687, 703, 705, 706, 710, 711, 712, 740, 744, 747, 748, 751], "integ": [4, 16, 19, 51, 56, 68, 124, 126, 129, 130, 134, 170, 172, 178, 199, 221, 228, 229, 230, 231, 232, 236, 237, 245, 258, 261, 263, 265, 271, 274, 276, 277, 289, 325, 329, 342, 349, 395, 397, 400, 401, 405, 460, 474, 475, 481, 487, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 527, 558, 623, 638, 660, 673, 676, 685, 686, 687, 702, 706, 708, 710, 711, 717, 720, 721, 723, 726, 727, 729, 732, 733, 746, 751], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 150, 153, 154, 177, 178, 193, 221, 265, 268, 277, 282, 307, 313, 314, 315, 322, 329, 334, 336, 342, 358, 360, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 418, 422, 423, 442, 475, 494, 500, 587, 626, 651, 673, 676, 677, 678, 685, 687, 704, 706, 708, 710, 717, 723, 729, 744, 745, 747, 748, 750], "9": [4, 32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 116, 117, 127, 128, 133, 134, 152, 155, 167, 178, 183, 277, 299, 301, 302, 303, 304, 305, 307, 342, 355, 356, 360, 362, 364, 365, 368, 389, 390, 398, 399, 404, 405, 419, 424, 434, 444, 449, 472, 478, 486, 516, 593, 595, 623, 626, 665, 687, 706, 710, 717, 718, 723, 724, 729, 730, 744, 746, 747, 748, 751, 753], "18": [4, 68, 128, 133, 134, 186, 191, 194, 199, 277, 342, 399, 404, 405, 486, 638, 647, 710, 744, 746], "slice": [4, 68, 223, 261, 271, 277, 342, 552, 692, 706, 710, 711], "both": [4, 8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 142, 153, 154, 177, 179, 203, 254, 259, 260, 277, 282, 294, 298, 307, 313, 314, 322, 323, 329, 334, 336, 342, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 459, 537, 565, 595, 665, 682, 683, 684, 691, 702, 703, 706, 708, 745, 746, 747, 748, 753], "set": [4, 11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 118, 122, 133, 144, 162, 172, 174, 179, 202, 215, 238, 244, 247, 252, 275, 277, 287, 290, 294, 297, 307, 317, 342, 349, 350, 351, 360, 378, 379, 393, 404, 438, 439, 446, 458, 461, 463, 464, 468, 470, 485, 488, 495, 531, 533, 535, 538, 541, 547, 548, 549, 553, 555, 564, 587, 595, 613, 649, 660, 669, 673, 676, 678, 679, 680, 685, 686, 702, 703, 704, 706, 707, 708, 710, 747, 750, 751, 752], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 61, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 125, 127, 128, 141, 147, 148, 161, 178, 180, 188, 189, 190, 204, 215, 227, 255, 266, 277, 283, 284, 287, 302, 303, 304, 305, 307, 311, 312, 315, 316, 327, 335, 339, 342, 350, 351, 354, 360, 366, 370, 378, 379, 398, 399, 411, 415, 416, 443, 444, 446, 463, 464, 468, 469, 472, 473, 474, 475, 476, 484, 485, 486, 487, 489, 496, 499, 562, 563, 590, 593, 595, 620, 621, 622, 623, 626, 627, 629, 630, 642, 644, 651, 660, 665, 669, 687, 702, 710, 717, 723, 729, 744, 746, 747, 748, 751, 753], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 116, 117, 127, 128, 133, 148, 152, 155, 157, 160, 162, 178, 183, 184, 188, 190, 277, 294, 302, 303, 304, 305, 307, 311, 315, 316, 332, 339, 342, 355, 356, 360, 363, 364, 365, 368, 389, 390, 398, 399, 404, 416, 419, 424, 428, 444, 449, 450, 472, 478, 486, 487, 502, 562, 563, 590, 593, 595, 620, 621, 622, 623, 626, 627, 642, 650, 651, 660, 665, 676, 681, 682, 683, 684, 687, 706, 710, 744, 746, 748, 751], "more": [4, 11, 14, 15, 19, 21, 36, 43, 68, 70, 138, 162, 167, 170, 172, 178, 186, 191, 200, 265, 277, 288, 289, 290, 307, 315, 342, 409, 434, 470, 492, 500, 548, 595, 618, 624, 639, 659, 665, 672, 673, 676, 677, 678, 679, 685, 687, 702, 703, 704, 705, 706, 707, 708, 710, 747, 748, 750, 751, 752], "loc": [4, 22, 44, 71, 223, 261, 271, 277, 316, 710, 745, 748], "boolean": [4, 51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 118, 120, 124, 125, 144, 171, 193, 202, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 252, 261, 271, 275, 277, 287, 294, 345, 346, 347, 348, 349, 350, 351, 360, 364, 365, 368, 378, 379, 382, 391, 395, 396, 438, 458, 473, 488, 493, 496, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 528, 532, 554, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 626, 627, 628, 629, 630, 631, 632, 663, 673, 676, 677, 678, 679, 707, 748, 749], "mask": [4, 75, 76, 86, 104, 105, 127, 261, 271, 277, 288, 332, 350, 351, 360, 378, 379, 382, 383, 398, 706, 751], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 115, 121, 123, 128, 130, 131, 132, 135, 136, 137, 153, 154, 162, 168, 172, 174, 177, 277, 282, 283, 284, 288, 307, 313, 314, 318, 322, 329, 334, 336, 349, 350, 351, 358, 360, 361, 369, 371, 372, 376, 378, 379, 387, 388, 392, 394, 399, 401, 402, 403, 406, 407, 408, 420, 422, 423, 435, 439, 442, 570, 589, 608, 615, 641, 649, 650, 651, 663, 668, 673, 674, 675, 676, 678, 679, 685, 692, 706, 708, 709, 740, 741, 742, 743, 745, 746, 747, 749, 753], "e": [4, 8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 115, 121, 122, 123, 127, 130, 131, 132, 133, 135, 136, 137, 144, 153, 154, 159, 162, 170, 172, 177, 178, 250, 271, 277, 282, 296, 307, 313, 314, 322, 329, 334, 336, 358, 360, 361, 369, 371, 372, 376, 388, 392, 393, 394, 398, 401, 402, 403, 404, 406, 407, 408, 422, 423, 427, 442, 444, 470, 486, 488, 489, 494, 500, 501, 526, 532, 535, 560, 562, 563, 641, 660, 665, 672, 673, 676, 677, 678, 679, 687, 702, 703, 704, 706, 708, 710, 712, 717, 723, 729, 748], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 118, 119, 122, 124, 127, 128, 133, 138, 143, 149, 157, 179, 207, 208, 212, 213, 222, 246, 259, 261, 271, 277, 288, 291, 293, 295, 296, 299, 308, 309, 317, 326, 327, 335, 338, 344, 359, 385, 391, 393, 395, 398, 399, 404, 409, 412, 417, 420, 421, 470, 474, 487, 511, 512, 513, 514, 520, 521, 522, 525, 538, 547, 564, 581, 586, 593, 595, 613, 649, 665, 672, 673, 676, 677, 678, 679, 685, 686, 691, 692, 693, 695, 698, 699, 702, 706, 708, 711, 712, 717, 723, 729, 735, 740, 745, 747, 748, 749, 751, 753], "iterrow": 4, "itertupl": 4, "to_dict": [4, 277], "transpos": [5, 278, 662, 692, 744, 749], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 125, 126, 129, 130, 131, 132, 135, 136, 137, 138, 144, 153, 154, 158, 159, 160, 167, 176, 177, 212, 213, 215, 225, 227, 240, 244, 245, 247, 250, 282, 283, 284, 287, 288, 290, 296, 298, 308, 309, 312, 313, 314, 322, 329, 334, 336, 340, 358, 361, 369, 371, 372, 376, 377, 380, 388, 392, 394, 395, 397, 400, 401, 402, 403, 406, 407, 408, 409, 422, 423, 426, 427, 428, 434, 442, 461, 462, 469, 470, 471, 502, 506, 543, 552, 702, 703, 704, 706, 710, 745, 748, 750], "ncol": [5, 176], "nrow": [5, 176, 673, 710, 748], "self": [5, 14, 61, 88, 111, 118, 141, 160, 167, 176, 184, 227, 255, 278, 287, 291, 335, 363, 387, 400, 411, 428, 434, 441, 450, 493, 554, 704, 706, 708], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 116, 117, 125, 127, 128, 138, 148, 149, 150, 152, 155, 162, 163, 168, 170, 175, 176, 180, 183, 221, 285, 286, 288, 290, 294, 298, 300, 301, 307, 312, 317, 321, 335, 355, 356, 362, 364, 366, 368, 389, 390, 396, 398, 399, 409, 416, 417, 418, 419, 424, 430, 435, 449, 454, 478, 488, 489, 493, 494, 500, 511, 532, 538, 541, 547, 548, 553, 564, 565, 566, 582, 583, 584, 587, 595, 601, 602, 603, 604, 605, 609, 612, 613, 616, 641, 651, 660, 662, 663, 672, 673, 676, 677, 678, 682, 685, 686, 702, 704, 706, 709, 710, 717, 723, 729, 747, 748, 749, 750, 751, 753], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 118, 124, 125, 127, 149, 150, 167, 172, 176, 208, 271, 311, 316, 323, 327, 335, 395, 396, 398, 417, 418, 434, 478, 509, 510, 538, 540, 548, 579, 581, 582, 583, 584, 595, 601, 602, 603, 604, 608, 609, 612, 616, 650, 663, 669, 676, 681, 682, 683, 684, 686, 691, 702, 703, 704, 706, 708, 711, 748, 751, 753], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 113, 115, 121, 123, 124, 125, 130, 131, 132, 135, 136, 137, 149, 150, 153, 154, 167, 168, 176, 177, 263, 282, 288, 313, 314, 318, 322, 329, 334, 336, 358, 361, 365, 369, 371, 372, 376, 386, 388, 392, 394, 395, 396, 401, 402, 403, 406, 407, 408, 417, 418, 422, 423, 434, 435, 442, 478, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 659, 671, 681, 682, 683, 684, 702, 750], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 127, 128, 130, 131, 132, 135, 136, 137, 138, 144, 148, 149, 150, 152, 153, 154, 155, 162, 167, 168, 174, 176, 177, 179, 183, 184, 185, 208, 263, 277, 282, 285, 286, 287, 288, 289, 297, 300, 301, 313, 314, 322, 327, 329, 334, 336, 344, 355, 356, 358, 361, 362, 363, 364, 366, 368, 369, 371, 372, 376, 388, 389, 390, 392, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 408, 409, 416, 417, 418, 419, 422, 423, 424, 434, 435, 439, 442, 449, 450, 451, 454, 478, 488, 489, 493, 494, 500, 506, 532, 538, 541, 547, 548, 564, 570, 579, 581, 582, 583, 584, 587, 589, 593, 601, 602, 603, 604, 609, 612, 613, 615, 616, 641, 650, 651, 659, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 702, 703, 704, 706, 709, 710, 711, 744, 745, 748, 749, 751], "becaus": [5, 12, 13, 97, 176, 285, 286, 288, 595, 669, 704, 710, 745, 746, 748, 751, 753], "behavior": [5, 127, 176, 249, 271, 317, 398, 564, 650, 663, 673, 676, 685, 686, 702, 703, 706, 707, 710, 747, 748, 750, 752, 753], "absolut": [7, 208, 281, 595, 681, 682, 683, 684, 710, 753], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 118, 122, 127, 228, 229, 230, 231, 232, 236, 237, 253, 281, 307, 362, 364, 365, 368, 393, 398, 446, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 578, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 676, 686, 692, 703, 706, 708, 710, 711, 746, 747, 748, 749, 753], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 126, 128, 133, 134, 140, 170, 172, 238, 245, 260, 263, 268, 269, 271, 281, 283, 284, 294, 307, 312, 317, 323, 324, 335, 349, 350, 351, 362, 378, 379, 397, 399, 404, 405, 453, 455, 456, 457, 461, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 539, 540, 542, 544, 545, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 570, 573, 574, 575, 576, 577, 579, 582, 583, 584, 586, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 650, 660, 673, 676, 677, 678, 686, 702, 703, 704, 706, 707, 708, 710, 717, 723, 729, 744, 746, 747, 748, 750, 753], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 113, 116, 117, 118, 125, 133, 138, 149, 152, 155, 165, 172, 178, 183, 218, 249, 251, 271, 281, 287, 288, 294, 302, 303, 304, 305, 323, 328, 335, 338, 339, 355, 356, 357, 362, 364, 365, 368, 387, 389, 390, 404, 409, 417, 419, 420, 424, 432, 449, 483, 487, 489, 496, 526, 533, 535, 560, 564, 570, 581, 589, 590, 608, 613, 615, 649, 651, 659, 660, 662, 663, 671, 672, 673, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 692, 695, 698, 699, 702, 703, 704, 705, 706, 707, 709, 710, 711, 744, 747, 749, 751], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 116, 117, 125, 133, 149, 152, 155, 167, 183, 281, 291, 302, 303, 304, 305, 335, 355, 356, 364, 365, 368, 387, 389, 390, 404, 417, 419, 424, 434, 449, 482, 502, 556, 557, 561, 570, 589, 608, 613, 615, 660, 663, 673, 676, 695, 697, 698, 699, 710, 711, 749], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 113, 116, 117, 118, 128, 129, 143, 155, 162, 167, 168, 172, 178, 206, 208, 216, 217, 246, 247, 258, 281, 289, 290, 296, 297, 307, 316, 317, 323, 328, 339, 344, 357, 377, 380, 389, 390, 399, 400, 412, 424, 434, 435, 446, 460, 469, 483, 491, 495, 499, 500, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 530, 531, 540, 541, 548, 549, 553, 555, 556, 557, 560, 561, 562, 563, 578, 587, 618, 624, 639, 659, 661, 663, 666, 669, 670, 671, 673, 676, 679, 685, 686, 687, 692, 702, 703, 704, 705, 708, 710, 745, 746, 748, 750, 751, 752, 753], "33": [7, 30, 52, 245, 281], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 118, 123, 133, 134, 137, 139, 142, 147, 148, 152, 171, 177, 183, 206, 220, 281, 288, 307, 313, 314, 321, 333, 335, 350, 351, 355, 356, 365, 374, 378, 379, 391, 394, 404, 405, 408, 410, 415, 416, 419, 438, 442, 446, 449, 471, 673, 686, 710, 746, 748, 750, 751], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 138, 146, 148, 149, 150, 152, 153, 154, 155, 157, 159, 177, 183, 245, 250, 282, 285, 286, 289, 293, 295, 297, 302, 303, 304, 305, 313, 314, 316, 318, 322, 326, 327, 329, 334, 335, 336, 344, 355, 356, 358, 361, 364, 365, 366, 368, 369, 371, 372, 376, 385, 388, 389, 390, 392, 393, 394, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 414, 416, 417, 418, 419, 422, 423, 424, 427, 442, 449, 461, 478, 579, 581, 587, 691, 710, 744, 748, 749], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 115, 116, 117, 121, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 147, 148, 149, 151, 152, 153, 154, 155, 157, 167, 172, 177, 178, 180, 183, 207, 221, 240, 242, 247, 249, 263, 265, 268, 269, 270, 271, 274, 282, 285, 286, 300, 313, 314, 316, 322, 329, 334, 335, 336, 355, 356, 358, 361, 364, 365, 366, 368, 369, 371, 372, 376, 388, 389, 390, 392, 394, 395, 396, 399, 400, 401, 402, 403, 406, 407, 408, 415, 416, 417, 419, 422, 423, 424, 434, 442, 449, 472, 665, 687, 692, 702, 703, 706], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 113, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 146, 153, 154, 177, 178, 250, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 395, 401, 402, 403, 406, 407, 408, 414, 422, 423, 442, 587, 671, 687], "get": [8, 41, 42, 43, 49, 56, 60, 61, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 104, 105, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 221, 239, 243, 249, 261, 271, 282, 313, 314, 315, 322, 329, 334, 335, 336, 343, 350, 351, 358, 361, 369, 371, 372, 373, 376, 378, 379, 388, 392, 394, 401, 402, 403, 406, 407, 408, 413, 422, 423, 442, 550, 579, 608, 617, 623, 663, 664, 673, 677, 678, 692, 707, 744, 748, 749], "addit": [8, 15, 51, 90, 121, 167, 172, 282, 365, 392, 434, 484, 511, 529, 537, 546, 673, 675, 676, 681, 682, 683, 684, 702, 703, 704, 708, 753], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 157, 177, 282, 297, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 461, 483, 579, 586, 587, 611, 614, 710, 744, 745], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 167, 172, 177, 282, 313, 314, 315, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 434, 442, 666, 672, 677, 678, 692, 708, 748, 753], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 115, 116, 117, 121, 123, 130, 131, 132, 135, 136, 137, 149, 153, 154, 155, 167, 177, 184, 186, 191, 200, 277, 282, 288, 296, 313, 314, 315, 316, 317, 318, 322, 327, 329, 334, 335, 336, 358, 361, 363, 369, 371, 372, 376, 388, 389, 390, 392, 394, 401, 402, 403, 406, 407, 408, 417, 422, 423, 424, 434, 442, 450, 550, 570, 582, 583, 584, 589, 601, 602, 603, 604, 609, 612, 613, 615, 616, 618, 624, 639, 692, 702, 706, 708, 712, 744, 745, 748, 749, 750, 751], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 138, 143, 153, 154, 177, 212, 213, 225, 246, 282, 294, 308, 309, 313, 314, 316, 322, 329, 332, 334, 336, 339, 340, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 409, 412, 422, 423, 442, 511, 512, 513, 514, 520, 521, 522, 524, 525, 526, 529, 530, 531, 537, 540, 541, 544, 546, 549, 550, 554, 555, 556, 557, 560, 561, 564, 702, 706, 710, 717, 722, 723, 728, 729, 734, 747, 751], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 362, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 683], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 113, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 151, 153, 154, 163, 169, 177, 184, 239, 243, 277, 282, 293, 295, 299, 301, 313, 314, 316, 322, 325, 326, 329, 334, 336, 350, 351, 358, 361, 369, 371, 372, 376, 378, 379, 385, 388, 392, 394, 395, 401, 402, 403, 406, 407, 408, 422, 423, 430, 437, 442, 450, 483, 587, 595, 670, 671, 673, 676, 692, 709, 711, 749], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 153, 154, 177, 178, 179, 180, 217, 221, 223, 244, 265, 269, 271, 282, 290, 313, 314, 318, 322, 329, 334, 336, 337, 349, 358, 361, 369, 370, 371, 372, 376, 388, 392, 394, 400, 401, 402, 403, 406, 407, 408, 422, 423, 442, 470, 472, 476, 488, 490, 494, 500, 511, 512, 521, 526, 595, 608, 659, 663, 670, 673, 676, 677, 678, 679, 687, 702, 703, 704, 706, 708, 710, 717, 719, 723, 725, 729, 731, 744, 747, 748, 751], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 113, 115, 121, 123, 127, 130, 131, 132, 135, 136, 137, 153, 154, 177, 183, 184, 218, 277, 282, 288, 294, 297, 313, 314, 315, 322, 327, 329, 334, 336, 355, 356, 358, 361, 363, 366, 369, 371, 372, 376, 388, 392, 394, 396, 398, 401, 402, 403, 406, 407, 408, 422, 423, 442, 449, 450, 473, 474, 475, 526, 581, 587, 660, 669, 671, 673, 685, 708, 751], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 185, 206, 258, 263, 267, 268, 269, 277, 282, 313, 314, 315, 322, 329, 334, 335, 336, 349, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 451, 460, 474, 475, 486, 488, 491, 499, 532, 540, 541, 542, 554, 558, 559, 650, 660, 663, 686, 706, 710, 712], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 115, 120, 121, 123, 124, 127, 130, 131, 132, 134, 135, 136, 137, 143, 153, 154, 163, 169, 170, 172, 174, 177, 180, 215, 217, 246, 282, 288, 294, 298, 307, 313, 314, 315, 316, 321, 322, 329, 334, 336, 358, 361, 369, 371, 372, 374, 376, 388, 392, 394, 395, 398, 401, 402, 403, 405, 406, 407, 408, 412, 422, 423, 430, 437, 439, 442, 462, 468, 469, 470, 473, 474, 475, 479, 483, 488, 507, 508, 511, 526, 528, 532, 564, 570, 589, 615, 664, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 703, 704, 706, 708, 710, 712, 735, 745, 747, 748, 750, 751, 753], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 165, 167, 177, 240, 251, 282, 313, 314, 315, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 432, 434, 442, 662, 665, 705, 706, 710, 744, 748, 753], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 115, 116, 117, 118, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 149, 152, 153, 154, 155, 157, 159, 162, 168, 177, 183, 221, 223, 245, 247, 250, 261, 263, 270, 271, 276, 282, 291, 299, 300, 311, 313, 314, 316, 322, 329, 332, 334, 335, 336, 339, 344, 358, 361, 364, 365, 368, 369, 371, 372, 376, 377, 380, 384, 386, 388, 389, 390, 392, 394, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 417, 419, 422, 423, 424, 427, 435, 442, 446, 449, 474, 481, 484, 485, 488, 489, 494, 497, 498, 500, 501, 505, 506, 509, 510, 527, 529, 532, 533, 534, 537, 540, 541, 544, 545, 546, 548, 550, 552, 553, 564, 565, 567, 571, 572, 579, 580, 581, 582, 583, 584, 585, 587, 591, 592, 593, 595, 600, 601, 602, 603, 604, 607, 609, 611, 612, 614, 616, 650, 656, 658, 660, 665, 672, 673, 675, 676, 677, 678, 681, 683, 684, 685, 702, 704, 706, 708, 710, 717, 723, 729, 748], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 613, 747], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 595, 703, 704, 706, 710, 744, 745], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 61, 62, 74, 85, 87, 94, 96, 98, 99, 102, 115, 121, 123, 124, 127, 130, 131, 132, 135, 136, 137, 138, 150, 153, 154, 177, 179, 238, 261, 282, 298, 313, 314, 322, 329, 334, 335, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 395, 398, 401, 402, 403, 406, 407, 408, 409, 418, 422, 423, 442, 475, 483, 488, 493, 494, 500, 528, 541, 548, 553, 554, 564, 587, 605, 659, 676, 677, 678, 682, 692, 703, 704, 706, 710, 711, 747, 748, 751, 753], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 113, 115, 121, 123, 124, 125, 127, 130, 131, 132, 133, 135, 136, 137, 138, 153, 154, 163, 169, 172, 177, 179, 238, 282, 288, 290, 313, 314, 322, 329, 334, 335, 336, 349, 358, 361, 362, 365, 369, 370, 371, 372, 376, 387, 388, 392, 394, 398, 401, 402, 403, 404, 406, 407, 408, 409, 422, 423, 430, 437, 442, 444, 446, 461, 483, 488, 489, 494, 500, 506, 526, 532, 548, 553, 608, 659, 660, 662, 665, 671, 673, 675, 676, 677, 678, 682, 683, 684, 686, 702, 704, 710, 744, 748, 751, 753], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 115, 120, 121, 123, 125, 128, 129, 130, 131, 132, 135, 136, 137, 144, 147, 149, 153, 154, 157, 177, 180, 208, 221, 227, 240, 247, 249, 255, 282, 297, 313, 314, 316, 322, 329, 334, 335, 336, 344, 358, 361, 364, 365, 368, 369, 371, 372, 376, 388, 392, 394, 399, 400, 401, 402, 403, 406, 407, 408, 415, 417, 422, 423, 442, 538, 547, 548, 553, 692, 706, 711, 747, 749], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 115, 121, 123, 125, 128, 130, 131, 132, 135, 136, 137, 149, 153, 154, 177, 179, 185, 208, 263, 282, 301, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 386, 388, 392, 394, 399, 401, 402, 403, 406, 407, 408, 417, 422, 423, 442, 451, 488, 493, 538, 541, 547, 548, 564, 641, 681, 683, 684, 703, 710, 745, 748, 751], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 115, 121, 123, 124, 128, 130, 131, 132, 135, 136, 137, 153, 154, 177, 218, 261, 282, 293, 295, 313, 314, 322, 326, 327, 329, 334, 336, 358, 361, 369, 371, 372, 376, 385, 386, 388, 392, 394, 399, 401, 402, 403, 406, 407, 408, 422, 423, 442, 461, 484, 487, 529, 537, 546, 565, 571, 572, 580, 581, 585, 587, 591, 592, 600, 607, 748, 749], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 127, 130, 131, 132, 135, 136, 137, 144, 153, 154, 167, 177, 243, 282, 313, 314, 316, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 398, 401, 402, 403, 406, 407, 408, 422, 423, 434, 442, 461, 664, 680, 703, 704, 710, 712, 746, 753], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 138, 153, 154, 177, 179, 277, 282, 313, 314, 322, 329, 334, 335, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 409, 422, 423, 442, 444, 461, 703, 751], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 115, 121, 123, 130, 131, 132, 135, 136, 137, 149, 153, 154, 177, 282, 283, 291, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 386, 388, 392, 394, 401, 402, 403, 406, 407, 408, 417, 422, 423, 442, 483, 538, 547, 552, 649, 662, 673, 676, 679, 693, 702, 706, 710, 744], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 115, 116, 117, 118, 119, 121, 122, 123, 130, 131, 132, 135, 136, 137, 148, 153, 154, 155, 177, 238, 240, 282, 291, 299, 301, 313, 314, 322, 329, 332, 334, 335, 336, 338, 355, 356, 358, 361, 364, 365, 366, 368, 369, 371, 372, 376, 386, 388, 389, 390, 391, 392, 393, 394, 401, 402, 403, 406, 407, 408, 416, 422, 423, 424, 442, 477, 481, 491, 492, 527, 539, 573, 582, 583, 584, 586, 593, 594, 595, 601, 602, 603, 604, 609, 611, 612, 614, 616, 659, 660, 663, 692, 703, 704, 710, 745, 748, 749], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 138, 144, 153, 154, 171, 177, 184, 223, 282, 294, 313, 314, 316, 322, 325, 327, 329, 334, 336, 358, 361, 362, 363, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 409, 422, 423, 438, 442, 444, 450, 483, 488, 490, 526, 540, 542, 587, 673, 676, 703, 704, 706, 708, 748], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 141, 153, 154, 177, 261, 263, 271, 282, 313, 314, 316, 322, 323, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 411, 422, 423, 442, 497, 534, 542, 558, 559, 672, 673, 676, 677, 678, 679, 703, 751], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 315, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442, 748, 751, 753], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 152, 153, 154, 177, 183, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 419, 422, 423, 442, 449, 485, 533, 534, 595, 611, 614, 656, 658], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 282, 313, 314, 322, 329, 334, 336, 358, 361, 369, 371, 372, 376, 388, 392, 394, 401, 402, 403, 406, 407, 408, 422, 423, 442], "361": [8, 121, 282, 392], "181": [8, 121, 282, 392], "prefix": [9, 10, 283, 284, 663, 665, 673, 702], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 122, 127, 128, 133, 134, 149, 162, 167, 168, 170, 172, 221, 271, 283, 284, 288, 307, 316, 323, 328, 335, 339, 357, 387, 393, 398, 399, 400, 404, 405, 417, 434, 435, 472, 494, 500, 548, 581, 590, 595, 650, 660, 665, 672, 673, 676, 677, 678, 679, 686, 702, 703, 704, 705, 706, 708, 710, 711, 717, 723, 729, 744, 745, 746, 747, 748, 750, 751, 753], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 113, 118, 120, 127, 128, 129, 134, 140, 141, 142, 144, 150, 157, 162, 163, 166, 167, 169, 170, 172, 185, 186, 191, 200, 202, 203, 221, 252, 254, 268, 269, 275, 277, 283, 284, 289, 318, 328, 344, 357, 386, 391, 398, 399, 400, 405, 411, 430, 433, 434, 437, 451, 458, 459, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 587, 589, 613, 615, 618, 624, 639, 641, 649, 650, 659, 660, 661, 663, 664, 665, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 697, 698, 704, 710, 735, 736, 744, 748, 750], "add": [9, 10, 43, 61, 71, 80, 167, 283, 284, 315, 335, 434, 462, 463, 663, 673, 704, 706, 707, 710, 748], "updat": [9, 10, 28, 73, 283, 284, 298, 344, 702, 703], "add_suffix": [9, 283], "suffix": [9, 10, 94, 283, 284, 702], "item_": [9, 283], "item_0": [9, 283], "item_1": [9, 283], "item_2": [9, 283], "item_3": [9, 283], "col_": [9, 283], "col_a": [9, 283], "col_b": [9, 283], "after": [10, 113, 127, 284, 288, 398, 420, 462, 538, 547, 552, 557, 671, 673, 676, 679, 702, 710, 748], "add_prefix": [10, 284], "_item": [10, 284], "0_item": [10, 284], "1_item": [10, 284], "2_item": [10, 284], "3_item": [10, 284], "_col": [10, 284], "a_col": [10, 284], "b_col": [10, 284], "aggreg": [11, 61, 113, 128, 335, 399, 589, 613, 651, 659, 671, 709, 710, 745, 749], "over": [11, 16, 17, 40, 77, 97, 118, 138, 250, 409, 579, 590, 605, 702, 703, 706, 747, 748, 753], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 103, 106, 107, 112, 118, 119, 124, 125, 127, 128, 133, 134, 138, 149, 150, 159, 167, 168, 172, 178, 186, 191, 200, 217, 218, 250, 265, 277, 297, 316, 327, 365, 391, 395, 398, 399, 404, 405, 409, 417, 418, 427, 434, 435, 451, 468, 469, 470, 471, 473, 474, 479, 483, 501, 506, 531, 540, 548, 549, 551, 552, 553, 555, 565, 567, 570, 581, 587, 589, 615, 618, 624, 639, 641, 650, 659, 660, 665, 670, 673, 675, 676, 677, 678, 681, 682, 683, 684, 685, 687, 702, 703, 704, 706, 710, 746, 747, 748, 751], "accept": [11, 18, 19, 40, 80, 138, 210, 276, 289, 311, 362, 409, 488, 493, 501, 554, 570, 579, 589, 595, 615, 686, 702, 704, 706, 708, 746, 747, 748, 753], "g": [11, 36, 111, 162, 170, 172, 307, 387, 470, 486, 488, 489, 494, 499, 500, 526, 532, 535, 562, 563, 641, 665, 672, 673, 676, 677, 678, 679, 702, 703, 704, 706, 708, 712, 717, 723, 729, 748], "sum": [11, 35, 61, 116, 117, 128, 133, 138, 156, 305, 335, 389, 390, 399, 404, 409, 425, 446, 570, 577, 589, 599, 615, 706, 710, 744, 745, 747, 749, 753], "min": [11, 33, 36, 122, 186, 191, 200, 249, 303, 307, 393, 570, 576, 578, 589, 598, 608, 615, 618, 624, 639, 747, 751], "max": [11, 32, 36, 61, 122, 133, 302, 307, 335, 393, 404, 570, 575, 578, 589, 597, 608, 613, 615, 710, 745, 747, 748], "per": [11, 16, 29, 70, 118, 149, 180, 296, 417, 476, 494, 509, 510, 540, 570, 589, 593, 595, 613, 615, 673, 676, 677, 678, 703, 710, 744, 747, 750], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 61, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 116, 117, 118, 119, 138, 148, 155, 168, 172, 179, 180, 208, 227, 255, 276, 290, 298, 307, 315, 316, 328, 335, 355, 356, 357, 364, 365, 366, 368, 377, 380, 387, 389, 390, 391, 400, 409, 416, 424, 435, 488, 489, 500, 502, 505, 506, 526, 541, 545, 548, 553, 586, 605, 660, 663, 665, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 702, 703, 704, 706, 707, 708, 711, 712, 717, 723, 729, 745, 746, 747, 748, 749, 750, 751, 752, 753], "sever": [11, 697, 698, 703, 748, 750], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 164, 166, 167, 168, 172, 288, 362, 387, 395, 398, 417, 431, 434, 435, 575, 576, 577, 582, 583, 584, 590, 597, 598, 599, 601, 602, 603, 604, 608, 609, 612, 616, 641, 651, 653, 654, 655, 657, 674, 675, 676, 678, 685, 686, 748], "bool_onli": [12, 13, 285, 286], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 116, 117, 148, 152, 155, 183, 285, 286, 302, 303, 304, 305, 355, 356, 364, 365, 366, 368, 389, 390, 416, 419, 424, 449, 751], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 116, 117, 142, 148, 152, 155, 183, 277, 285, 286, 294, 299, 301, 302, 303, 304, 305, 307, 355, 356, 364, 365, 366, 368, 389, 390, 416, 419, 424, 446, 449, 578, 593, 595, 751], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 152, 183, 285, 286, 290, 302, 303, 304, 305, 321, 419, 449, 678, 702, 744, 748], "empti": [12, 13, 75, 76, 81, 104, 105, 116, 117, 126, 142, 147, 155, 245, 285, 286, 318, 350, 351, 378, 379, 389, 390, 397, 415, 424, 483, 515, 526, 538, 547, 663, 673, 708, 748, 751], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 122, 127, 133, 138, 203, 216, 227, 254, 255, 285, 286, 322, 334, 344, 358, 376, 393, 398, 404, 409, 459, 526, 565, 660, 681, 682, 683, 684, 686, 708, 751, 753], "zero": [12, 13, 23, 285, 286, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 525, 673, 676, 708, 717, 723, 729, 748], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 116, 117, 124, 126, 127, 138, 144, 148, 152, 155, 162, 183, 218, 245, 277, 285, 286, 287, 297, 300, 344, 355, 356, 362, 364, 366, 368, 389, 390, 397, 398, 409, 416, 419, 424, 449, 454, 488, 489, 494, 500, 532, 564, 593, 613, 650, 679, 681, 682, 684, 694, 702, 703, 704, 706, 707, 710, 745, 748, 752], "ignore_index": [14, 45, 52, 138, 149, 150, 287, 317, 324, 409, 417, 418, 461, 478], "verify_integr": [14, 144, 263, 287], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 113, 141, 149, 150, 180, 215, 227, 240, 249, 255, 271, 277, 289, 317, 328, 335, 357, 370, 377, 380, 411, 417, 418, 446, 461, 478, 660, 671, 692, 702, 703, 710, 711, 745, 747, 753], "end": [14, 19, 149, 150, 186, 191, 200, 249, 289, 319, 417, 418, 478, 493, 498, 500, 505, 506, 536, 544, 545, 548, 551, 552, 554, 618, 623, 624, 626, 627, 629, 630, 633, 639, 673, 676, 679, 748], "caller": [14, 28, 55, 64, 73, 84, 88, 122, 126, 138, 184, 245, 247, 298, 328, 339, 344, 357, 362, 363, 393, 397, 409, 450, 483, 548, 553], "ad": [14, 462, 463, 470, 535, 702, 703, 704, 710], "do": [14, 15, 44, 46, 50, 124, 129, 144, 215, 227, 255, 271, 287, 288, 316, 318, 323, 395, 400, 469, 470, 608, 673, 677, 678, 702, 703, 704, 706, 708, 710, 711, 744, 745, 748, 751, 753], "concat": [14, 287, 483, 668, 692, 704, 749], "gener": [14, 15, 36, 37, 51, 70, 138, 143, 212, 246, 287, 307, 308, 409, 412, 485, 533, 534, 578, 595, 650, 651, 665, 692, 702, 703, 704, 706, 708, 709, 745, 748, 749], "concaten": [14, 287, 461, 472, 483, 490, 526, 677, 710, 747, 753], "unchang": [14, 28, 298, 565], "computation": 14, "intens": [14, 744], "than": [14, 15, 46, 60, 62, 70, 85, 87, 116, 117, 124, 138, 155, 172, 180, 294, 334, 336, 358, 361, 389, 390, 395, 409, 424, 446, 455, 456, 457, 470, 488, 492, 497, 500, 509, 510, 538, 541, 547, 564, 565, 582, 583, 584, 595, 601, 602, 603, 604, 609, 612, 616, 646, 648, 665, 702, 703, 704, 706, 708, 710, 711, 746, 748, 751, 753], "better": [14, 61, 138, 335, 409, 673, 677, 678, 703, 747], "solut": [14, 143, 246, 412, 702, 708, 745], "those": [14, 15, 36, 122, 288, 307, 393, 461, 526, 570, 589, 615, 693, 702, 703, 706, 708, 748], "origin": [14, 21, 28, 51, 88, 93, 125, 128, 140, 179, 184, 202, 203, 252, 254, 275, 290, 298, 319, 363, 399, 400, 444, 450, 458, 459, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 550, 649, 650, 652, 653, 654, 655, 656, 657, 658, 685, 702, 745], "onc": [14, 138, 409, 500, 676, 702, 704, 706, 710], "ab": [14, 261, 485, 494, 505, 529, 545, 546, 552, 748, 751], "df2": [14, 461, 665, 682, 710, 748, 751], "With": [14, 28, 70, 134, 199, 287, 294, 298, 317, 405, 446, 638, 676, 706, 708, 710, 744, 745, 748], "follow": [14, 15, 70, 106, 128, 162, 288, 311, 399, 400, 488, 526, 538, 547, 564, 570, 589, 615, 641, 650, 673, 678, 686, 691, 702, 703, 704, 706, 707, 708, 740, 745, 747, 748, 750, 753], "while": [14, 97, 162, 172, 296, 590, 665, 704, 706, 711, 748, 751], "recommend": [14, 124, 125, 703, 704], "show": [14, 70, 74, 75, 76, 104, 105, 128, 350, 351, 378, 379, 399, 681, 682, 683, 684, 703, 706, 710, 748], "wai": [14, 61, 127, 335, 398, 651, 685, 702, 703, 704, 706, 708, 740, 744, 746, 748, 751, 753], "sourc": [14, 16, 17, 165, 251, 432, 662, 672, 673, 677, 678, 703, 704, 711], "less": [14, 46, 85, 87, 294, 358, 361, 455, 456, 457, 470, 564, 565, 646, 648, 676, 703], "effici": [14, 16, 93, 174, 439, 705, 706, 751], "abov": [14, 15, 61, 144, 288, 335, 702, 706, 708, 745, 748, 751], "func": [15, 16, 17, 18, 111, 288, 387, 570, 589, 590, 608, 615, 651, 710], "raw": [15, 649, 672, 677, 678], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 122, 149, 150, 344, 364, 365, 368, 393, 417, 418, 461, 751], "reli": [15, 288, 705, 706, 710, 753], "numba": [15, 16, 120, 288, 651, 749, 753], "jit": [15, 16, 288, 748, 753], "compil": [15, 120, 288, 489, 532, 541, 543, 651, 704, 748, 753], "thu": [15, 288, 474, 705, 710, 746, 748], "within": [15, 55, 61, 84, 133, 288, 328, 335, 357, 404, 488, 497, 509, 510, 533, 534, 542, 582, 583, 584, 587, 601, 602, 603, 604, 609, 612, 616, 673, 676, 679, 697, 702, 704, 708, 748], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 124, 127, 288, 293, 295, 307, 326, 327, 344, 385, 386, 395, 398, 548, 553, 571, 572, 580, 581, 585, 590, 591, 592, 600, 607, 703, 711, 749], "cuda": [15, 16, 17, 288, 649, 650, 651, 705, 709, 710, 744, 748, 750], "python": [15, 18, 21, 43, 120, 247, 288, 290, 315, 420, 483, 493, 511, 512, 513, 514, 520, 521, 522, 525, 548, 553, 590, 641, 651, 672, 673, 676, 677, 678, 685, 702, 704, 705, 706, 709, 710, 746, 748, 751, 753], "target": [15, 124, 288, 491, 542, 702, 703], "see": [15, 16, 19, 28, 43, 48, 50, 61, 120, 162, 167, 170, 172, 186, 191, 200, 288, 289, 298, 315, 321, 323, 335, 434, 548, 553, 570, 589, 595, 615, 618, 624, 639, 665, 672, 673, 675, 676, 677, 678, 679, 685, 702, 703, 707, 710, 717, 723, 729, 745, 747, 748, 750, 752, 753], "guid": [15, 167, 288, 434, 570, 589, 615, 704, 707, 709, 748], "user": [15, 16, 17, 51, 167, 276, 288, 434, 570, 589, 615, 651, 686, 702, 703, 704, 706, 707, 709, 710, 745, 750, 753], "defin": [15, 17, 37, 46, 133, 143, 212, 246, 288, 308, 331, 404, 412, 537, 590, 650, 651, 660, 702, 706, 708, 709, 710, 744, 749, 753], "udf": [15, 288, 651, 744, 749, 753], "through": [15, 122, 288, 393, 488, 489, 494, 500, 532, 560, 692, 706, 748, 750, 751], "strings_udf": [15, 288, 748], "rapid": [15, 147, 288, 415, 501, 529, 532, 544, 546, 562, 563, 663, 672, 676, 704, 710, 744, 748, 751], "librari": [15, 167, 288, 434, 548, 553, 564, 641, 685, 705, 709, 744, 745, 749, 750, 753], "includ": [15, 28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 118, 134, 142, 168, 170, 172, 173, 180, 193, 277, 288, 294, 298, 307, 335, 350, 351, 364, 365, 367, 368, 370, 378, 379, 384, 391, 405, 435, 446, 462, 468, 469, 470, 502, 514, 521, 528, 531, 535, 549, 552, 555, 573, 578, 582, 583, 584, 594, 601, 602, 603, 604, 609, 612, 616, 626, 660, 665, 672, 673, 675, 676, 677, 678, 679, 702, 703, 704, 705, 706, 708, 710, 717, 723, 729, 746, 748, 750, 751, 753], "subset": [15, 45, 46, 55, 84, 142, 159, 167, 180, 250, 288, 328, 357, 427, 434, 673, 708, 745, 747, 748], "expect": [15, 26, 88, 111, 118, 149, 168, 184, 288, 297, 363, 387, 417, 435, 450, 488, 562, 608, 650, 676, 702, 703, 706, 708, 711, 744, 745, 748], "refer": [15, 28, 36, 43, 120, 288, 298, 307, 315, 502, 543, 707, 709, 746, 748, 751, 752], "caveat": [15, 288, 703, 749], "referenc": [15, 288, 751], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 128, 134, 142, 149, 159, 165, 167, 168, 170, 172, 174, 193, 199, 220, 239, 243, 250, 251, 259, 263, 278, 299, 301, 307, 312, 316, 318, 330, 333, 350, 351, 378, 379, 387, 399, 405, 417, 427, 432, 434, 435, 439, 441, 468, 470, 488, 490, 491, 535, 537, 538, 547, 595, 605, 626, 638, 641, 650, 660, 662, 663, 665, 678, 679, 681, 682, 684, 685, 702, 703, 704, 706, 708, 710, 735, 744, 745, 747, 748, 750, 751, 753], "expand": [15, 494, 538, 547, 548, 553, 705], "reduc": [15, 702], "argument": [15, 16, 17, 19, 20, 21, 31, 61, 90, 111, 124, 125, 144, 149, 152, 162, 167, 168, 178, 183, 249, 288, 289, 290, 335, 365, 387, 400, 417, 419, 434, 435, 449, 461, 570, 589, 608, 615, 650, 663, 673, 675, 676, 678, 685, 686, 687, 691, 702, 703, 706, 744, 752], "simpl": [15, 470, 659, 702, 706, 708, 710, 748], "variabl": [15, 46, 92, 94, 120, 133, 134, 318, 404, 405, 651, 660, 669, 702, 710, 750], "could": [15, 595, 706, 744, 748], "def": [15, 16, 17, 133, 288, 404, 526, 533, 590, 651, 673, 702, 704, 708, 710, 744, 746, 748], "f": [15, 36, 111, 271, 288, 307, 387, 501, 526, 541, 550, 562, 563, 685, 704, 748], "els": [15, 75, 76, 239, 288, 350, 351, 704, 710, 744, 748], "awar": [15, 296, 748], "manner": [15, 16, 288], "mai": [15, 16, 17, 21, 61, 138, 141, 167, 230, 271, 288, 290, 335, 362, 409, 411, 434, 488, 491, 509, 510, 581, 595, 673, 676, 677, 678, 679, 691, 694, 702, 703, 704, 705, 706, 708, 710, 711, 744, 747, 748], "condition": [15, 288, 702, 748], "mix": [15, 36, 118, 167, 230, 307, 434, 511, 686, 708, 711, 748], "common": [15, 36, 94, 143, 227, 246, 288, 307, 412, 685, 702, 703, 706, 708, 748], "rather": [15, 124, 163, 180, 395, 430, 446, 702, 704, 706, 708, 711, 748, 753], "howev": [15, 170, 172, 288, 488, 535, 595, 702, 703, 704, 706, 708, 710, 746, 748, 751], "promot": [15, 748], "safe": [15, 710, 748], "regardless": [15, 36, 120, 307, 686, 745, 748], "op": [15, 748], "against": [15, 16, 17, 50, 323, 491, 511], "v": [15, 149, 150, 417, 418, 543, 581, 705, 708, 711], "w": [15, 128, 167, 399, 434, 486, 673], "z": [15, 16, 17, 44, 54, 127, 162, 316, 327, 395, 398, 475, 496, 566, 745], "manipul": [15, 288, 692, 709, 710], "long": [15, 92, 288, 564, 669, 676, 702, 708], "neither": [15, 28, 259, 260, 271, 288, 294, 298, 711], "modifi": [15, 51, 129, 144, 179, 247, 288, 400, 444, 581, 676], "place": [15, 45, 73, 88, 124, 127, 129, 134, 143, 144, 149, 168, 179, 184, 246, 288, 344, 363, 398, 400, 405, 412, 417, 435, 444, 450, 462, 464, 470, 483, 495, 496, 497, 526, 673, 677, 678, 708, 750, 751], "nor": [15, 28, 167, 271, 288, 298, 434, 711, 753], "creat": [15, 28, 113, 124, 126, 128, 129, 144, 167, 202, 203, 208, 245, 247, 252, 254, 275, 288, 298, 330, 331, 332, 397, 399, 400, 434, 458, 459, 538, 543, 547, 595, 649, 671, 673, 702, 704, 710, 735, 737, 744, 745, 746, 747, 748], "st": [15, 288, 748], "str_col": [15, 748], "scale": [15, 710, 717, 718, 723, 724, 729, 730, 745, 746, 748], "len": [15, 16, 172, 288, 487, 650, 692, 710, 748], "elif": [15, 288, 708, 748], "startswith": [15, 288, 692, 748], "42": [15, 186, 288, 717, 723, 729, 747, 748], "abc": [15, 261, 288, 318, 362, 481, 485, 487, 492, 498, 505, 507, 508, 515, 517, 518, 526, 528, 533, 544, 545, 552, 673, 746, 748, 751], "some_exampl": [15, 288, 748], "sinc": [15, 168, 169, 172, 221, 288, 380, 435, 437, 651, 702, 703, 704, 706, 708, 748, 751], "requir": [15, 29, 37, 38, 39, 65, 66, 116, 117, 133, 138, 143, 155, 170, 172, 212, 213, 214, 225, 226, 246, 288, 308, 309, 310, 340, 341, 389, 390, 404, 409, 412, 424, 582, 583, 584, 593, 595, 601, 602, 603, 604, 609, 612, 616, 649, 659, 678, 679, 702, 703, 706, 708, 747, 748], "creation": [15, 38, 213, 288, 309, 749], "upper": [15, 26, 36, 288, 297, 307, 530, 535, 556, 557, 679, 692], "rais": [15, 21, 44, 55, 57, 58, 84, 125, 127, 142, 179, 185, 220, 266, 288, 290, 316, 319, 328, 330, 333, 349, 357, 398, 469, 474, 488, 505, 526, 538, 541, 545, 547, 564, 660, 664, 680, 685, 686, 703, 704, 706, 708, 744, 745, 746, 748], "attributeerror": [15, 288], "complet": [15, 288, 704, 710, 750], "http": [15, 43, 162, 170, 172, 288, 315, 491, 548, 553, 562, 563, 595, 651, 665, 672, 673, 676, 677, 678, 679, 685, 704], "doc": [15, 43, 288, 315, 548, 553, 641, 676, 685, 744, 753], "ai": [15, 103, 106, 147, 288, 415, 529, 532, 544, 546, 562, 563, 672], "api": [15, 16, 110, 119, 288, 386, 702, 703, 704, 705, 706, 707, 708, 709, 710, 744, 747, 748, 749, 750, 751, 752, 753], "stabl": [15, 19, 288, 289, 651, 750], "user_guid": [15, 288, 704], "html": [15, 43, 288, 315, 548, 553, 562, 563, 651, 685, 704], "incol": [16, 17, 748], "outcol": [16, 17, 748], "pessimistic_nul": [16, 17], "chunk": [16, 172, 590, 679], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 125, 324, 535, 590, 651, 710, 744, 748, 749], "execut": [16, 17, 172, 704, 708, 710, 748, 753], "Or": [16, 17, 124, 746, 748], "dictionari": [16, 17, 21, 111, 143, 246, 290, 387, 412, 569, 608, 663, 678, 706, 707, 746, 748], "map": [16, 17, 61, 75, 76, 104, 105, 111, 125, 170, 203, 239, 243, 254, 335, 350, 351, 378, 379, 387, 459, 496, 560, 569, 570, 589, 608, 615, 663, 673, 676, 703, 705, 706, 710, 740, 747, 748, 751], "col1": [16, 17, 748], "arg1": [16, 17, 111, 387, 748], "output": [16, 17, 36, 51, 61, 70, 109, 120, 138, 140, 162, 165, 168, 170, 172, 173, 174, 251, 277, 307, 335, 409, 432, 435, 439, 451, 472, 490, 497, 548, 553, 590, 650, 651, 663, 665, 676, 679, 681, 682, 683, 684, 692, 702, 704, 706, 709, 745, 747, 748, 749, 753], "extra": [16, 17, 21, 125, 162, 170, 172, 290, 536, 665, 672, 673, 676, 677, 678, 679], "These": [16, 17, 94, 651, 694, 695, 697, 698, 699, 702, 703, 704, 706, 746, 748, 751], "directli": [16, 17, 44, 179, 247, 316, 462, 693, 706, 710, 744, 748], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 122, 126, 127, 134, 138, 141, 149, 168, 170, 172, 179, 208, 212, 213, 214, 221, 225, 226, 245, 249, 307, 308, 309, 310, 340, 341, 393, 395, 397, 398, 405, 409, 411, 417, 435, 468, 470, 492, 524, 543, 587, 650, 660, 665, 678, 679, 693, 702, 703, 704, 706, 708, 710, 748, 753], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 116, 117, 118, 126, 133, 155, 160, 178, 179, 188, 190, 218, 243, 245, 249, 277, 300, 318, 321, 327, 378, 379, 389, 390, 397, 404, 424, 428, 444, 445, 446, 461, 495, 500, 526, 582, 583, 584, 595, 601, 602, 603, 604, 609, 612, 616, 620, 622, 650, 652, 660, 663, 673, 676, 686, 687, 702, 703, 706, 711, 751, 753], "underli": [16, 17, 125, 147, 182, 264, 375, 396, 415, 448, 692, 702, 706, 710, 751], "garbag": [16, 17, 332], "chunksiz": [16, 162, 675, 676], "offset": [16, 55, 84, 128, 133, 172, 328, 357, 399, 404, 673, 676, 679, 706], "start": [16, 23, 94, 120, 128, 147, 162, 170, 172, 276, 292, 319, 354, 399, 415, 498, 505, 506, 532, 535, 541, 544, 545, 550, 551, 552, 553, 554, 562, 563, 623, 626, 627, 629, 630, 633, 665, 672, 673, 675, 676, 677, 678, 679, 685, 705, 706], "span": 16, "th": [16, 325, 474, 475, 492], "size": [16, 26, 75, 76, 93, 104, 105, 133, 170, 172, 208, 239, 243, 297, 350, 351, 378, 379, 404, 483, 487, 492, 550, 613, 660, 665, 673, 676, 677, 678, 679, 702, 706, 747, 748, 750], "thread": [16, 17, 673, 677, 678, 710, 748], "block": [16, 535, 673, 677, 678, 679], "kernel": [16, 17, 120, 749], "foral": [16, 748], "built": [16, 535, 706, 709, 710, 744], "queri": [16, 167, 434, 502, 710, 745], "driver": [16, 710], "optim": [16, 70, 678, 750, 753], "launch": [16, 748], "configur": [16, 672, 673, 677, 678, 679, 703, 748, 752], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 212, 213, 214, 225, 226, 308, 309, 310, 340, 341, 692], "It": [16, 64, 97, 138, 149, 208, 221, 339, 362, 409, 417, 665, 702, 703, 705, 708, 748, 751, 753], "good": [16, 650, 660, 703, 705, 710], "point": [16, 73, 118, 119, 141, 168, 344, 391, 411, 435, 487, 534, 558, 559, 586, 673, 679, 705, 706, 717, 723, 729, 746, 748, 749, 751], "ineffici": 16, "Its": [16, 706], "maximum": [16, 26, 89, 170, 172, 261, 297, 364, 496, 564, 608, 650, 660, 673, 746, 750], "possibl": [16, 73, 167, 208, 344, 434, 676, 686, 702, 703, 704, 706, 708, 748, 750, 751, 753], "avail": [16, 167, 434, 489, 538, 547, 661, 672, 673, 677, 678, 691, 693, 697, 704, 710, 747, 748, 750, 751], "resourc": [16, 70, 702], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 116, 117, 124, 125, 126, 133, 134, 138, 147, 152, 155, 160, 168, 170, 172, 183, 242, 245, 265, 268, 269, 274, 291, 299, 300, 307, 325, 332, 339, 375, 381, 384, 386, 389, 390, 397, 404, 405, 409, 415, 419, 424, 428, 435, 445, 446, 449, 453, 455, 456, 457, 461, 481, 483, 485, 489, 492, 497, 501, 513, 528, 533, 534, 537, 541, 548, 553, 558, 573, 582, 583, 584, 587, 593, 594, 595, 601, 602, 603, 604, 605, 609, 612, 616, 623, 645, 646, 647, 648, 649, 650, 651, 656, 658, 659, 660, 663, 668, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 702, 703, 704, 706, 710, 717, 720, 723, 726, 729, 732, 746, 747, 748, 750], "concurr": [16, 17], "To": [16, 36, 45, 127, 172, 307, 398, 446, 538, 608, 673, 676, 677, 678, 702, 704, 706, 744, 747, 748, 751, 752, 753], "access": [16, 36, 167, 307, 434, 692, 695, 697, 698, 699, 706, 710, 748, 750], "count": [16, 36, 70, 89, 90, 95, 97, 107, 133, 160, 180, 307, 364, 365, 368, 370, 384, 404, 428, 446, 574, 578, 596, 651, 692, 710, 745, 747, 748], "threadidx": [16, 748], "blockdim": [16, 748], "respect": [16, 61, 94, 127, 168, 335, 398, 435, 470, 548, 553, 567, 660, 676, 682, 702, 744, 746], "document": [16, 548, 685, 702, 703, 705, 706, 707, 708, 710, 748, 753], "In": [16, 26, 61, 106, 125, 167, 288, 297, 335, 400, 434, 526, 548, 553, 590, 685, 702, 703, 704, 705, 706, 708, 711, 744, 746, 748, 749, 751, 753], "below": [16, 26, 28, 36, 48, 297, 298, 307, 321, 595, 702, 710, 717, 723, 729, 748, 753], "invok": [16, 17, 702, 706], "By": [16, 36, 45, 61, 70, 97, 122, 134, 167, 168, 180, 215, 307, 335, 393, 405, 434, 435, 483, 659, 665, 673, 678, 702, 706, 708, 710, 744, 748, 751, 753], "loop": [16, 17, 706, 744, 748], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 288, 537, 565, 677, 678, 706, 746, 747, 748, 751, 753], "so": [17, 133, 170, 172, 180, 271, 380, 404, 446, 702, 703, 704, 706, 708, 709, 744, 745, 748, 751, 753], "must": [17, 37, 50, 51, 74, 80, 94, 109, 125, 127, 128, 133, 134, 140, 141, 143, 150, 160, 167, 169, 170, 179, 186, 191, 200, 208, 212, 246, 247, 261, 277, 308, 323, 332, 398, 399, 404, 405, 411, 412, 418, 428, 434, 437, 468, 474, 475, 483, 489, 502, 618, 624, 639, 659, 660, 673, 676, 677, 678, 682, 683, 702, 703, 706, 708, 710, 712, 748, 751, 753], "independ": [17, 704, 748], "stride": [17, 170, 650], "improv": [17, 673, 677], "parallel": [17, 184, 450, 673, 677, 678, 710, 711, 745, 748, 750, 753], "resembl": 17, "code": [17, 44, 147, 157, 249, 263, 316, 325, 331, 415, 487, 702, 704, 705, 706, 708, 710, 748], "nelem": [17, 744], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 748], "zip": [17, 168, 435, 673, 676, 710, 748], "callabl": [18, 88, 111, 149, 168, 184, 363, 387, 417, 435, 450, 570, 589, 593, 608, 613, 615, 747], "na_act": [18, 362], "elementwis": [18, 651], "everi": [18, 46, 74, 541, 570, 589, 615, 706, 710, 748], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 125, 127, 134, 170, 179, 290, 307, 316, 344, 362, 367, 398, 400, 405, 461, 472, 483, 578, 663, 673, 675, 677, 681, 682, 684, 685, 686, 748, 751], "propag": [18, 21, 54, 290, 327, 362, 548, 553, 581, 748, 750, 751], "without": [18, 28, 36, 44, 70, 125, 247, 256, 298, 307, 316, 362, 483, 535, 548, 552, 553, 673, 682, 683, 684, 702, 703, 709, 744, 748], "them": [18, 61, 335, 362, 446, 490, 495, 497, 651, 685, 704, 706, 746, 747, 748, 753], "kind": [19, 94, 128, 149, 150, 223, 247, 289, 399, 417, 418, 478, 746], "quicksort": [19, 150, 289, 418, 478], "ascend": [19, 106, 122, 141, 149, 150, 180, 249, 289, 380, 393, 411, 417, 418, 446, 478, 605], "na_posit": [19, 141, 149, 150, 249, 289, 411, 417, 418, 478], "last": [19, 36, 45, 54, 64, 103, 106, 125, 141, 149, 150, 158, 216, 249, 289, 307, 317, 327, 339, 377, 380, 411, 417, 418, 426, 462, 478, 505, 538, 545, 547, 581, 627, 629, 631, 650, 673, 679, 685, 748], "would": [19, 141, 167, 249, 288, 289, 411, 434, 542, 605, 685, 702, 704, 710, 748, 751], "effect": [19, 61, 124, 289, 335, 395, 702, 711, 745], "compat": [19, 22, 67, 93, 178, 221, 289, 318, 367, 676, 687, 704, 705, 706, 709, 746, 749, 750], "mergesort": [19, 289], "heapsort": [19, 289], "choic": [19, 70, 289, 685, 704, 744], "algorithm": [19, 118, 289, 391, 491, 492, 539, 706], "descend": [19, 103, 141, 149, 150, 180, 249, 289, 377, 411, 417, 418, 446, 478], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 122, 128, 141, 143, 149, 150, 157, 168, 180, 185, 199, 216, 246, 249, 265, 288, 289, 307, 311, 317, 323, 335, 339, 377, 380, 393, 399, 400, 411, 412, 417, 418, 435, 446, 478, 494, 499, 524, 530, 538, 548, 553, 556, 557, 561, 565, 579, 605, 628, 630, 632, 638, 650, 660, 673, 676, 679, 685, 702, 703, 704, 706, 710, 748], "put": [19, 149, 150, 249, 289, 417, 418, 478, 705], "begin": [19, 149, 150, 249, 289, 417, 418, 478, 506, 536, 551, 552, 553, 630, 673, 676, 679, 710], "cupi": [19, 31, 61, 118, 138, 141, 163, 181, 238, 249, 262, 289, 325, 335, 409, 411, 430, 447, 650, 702, 706, 709, 710, 749, 751, 753], "ndarrai": [19, 59, 92, 138, 163, 169, 181, 182, 185, 193, 239, 243, 249, 262, 277, 289, 325, 409, 430, 437, 447, 448, 650, 660, 669, 686, 710, 744, 748], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 128, 133, 142, 203, 254, 277, 288, 289, 297, 316, 328, 339, 357, 380, 399, 404, 459, 479, 488, 492, 503, 504, 513, 528, 650, 670, 675, 676, 685, 702, 703, 706, 708, 710, 746, 748], "int32": [19, 21, 63, 141, 195, 249, 289, 290, 312, 338, 411, 446, 475, 477, 481, 487, 489, 491, 498, 505, 527, 539, 544, 545, 558, 634, 650, 660, 673, 706, 708, 710, 735, 740, 742, 743, 746, 748, 750], "foo": [19, 47, 162, 289, 400, 541, 659, 673, 702, 703, 704, 708, 710], "idx": [19, 75, 76, 104, 105, 210, 221, 228, 229, 230, 231, 232, 236, 237, 238, 247, 249, 250, 253, 265, 289, 332, 350, 351, 378, 379, 488, 538, 547, 710], "keyword": [20, 31, 90, 111, 124, 125, 240, 365, 387, 395, 461, 548, 553, 608, 675, 710, 748], "error": [21, 44, 125, 162, 167, 179, 288, 290, 316, 349, 434, 660, 675, 685, 686, 703, 746, 748, 750], "cast": [21, 51, 116, 117, 124, 155, 156, 290, 389, 390, 395, 424, 425, 471, 676, 711, 751], "altern": [21, 44, 46, 111, 290, 316, 387, 542, 608, 673, 702, 704, 708], "col": [21, 72, 290, 702, 744], "where": [21, 38, 44, 46, 51, 61, 70, 75, 76, 88, 103, 104, 105, 106, 111, 118, 124, 126, 141, 152, 170, 183, 213, 238, 245, 290, 309, 316, 335, 350, 351, 363, 378, 379, 380, 387, 391, 395, 397, 411, 419, 449, 485, 492, 498, 502, 505, 509, 510, 544, 545, 608, 647, 656, 658, 675, 702, 703, 704, 706, 708, 710, 711, 747, 750], "specif": [21, 45, 51, 94, 134, 290, 405, 691, 697, 702, 703, 704, 705, 706, 708, 710, 751, 752], "deep": [21, 28, 70, 93, 165, 211, 251, 290, 298, 367, 432, 662], "henc": [21, 290, 751], "chang": [21, 28, 110, 124, 152, 157, 179, 183, 290, 298, 317, 386, 395, 396, 419, 446, 449, 469, 470, 535, 556, 702, 703, 751], "warn": [21, 125, 290, 685, 703, 710, 751], "control": [21, 36, 125, 171, 290, 307, 438, 535, 650, 673, 702, 750], "except": [21, 45, 64, 125, 128, 193, 216, 227, 255, 290, 317, 339, 399, 505, 545, 563, 626, 651, 673, 676, 685, 705, 706, 708, 747, 750], "invalid": [21, 57, 58, 125, 220, 266, 290, 330, 333, 680, 685, 686], "suppress": [21, 44, 125, 290, 316], "On": [21, 125, 290, 470, 710, 745], "constructor": [21, 290, 692, 704, 706, 710, 744, 751], "float32": [21, 290, 446, 686, 735, 736, 738, 739, 746, 750], "custom": [21, 133, 290, 404, 651, 669, 678, 702, 703, 706, 745, 752, 753], "cat_dtyp": [21, 290], "enabl": [21, 290, 673, 676, 702, 704, 706, 746, 750], "s1": [21, 287, 290, 461, 472, 488, 511, 512, 521], "s2": [21, 287, 290, 400, 461, 471, 472, 488, 511, 521], "alia": [22, 67, 233, 345, 354], "cdf1": 23, "k2": [23, 676], "temp": [23, 267, 495, 710], "stop": [23, 110, 147, 276, 292, 354, 386, 415, 550, 551, 552, 675], "step": [23, 276, 292, 354, 470, 550], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 125, 127, 129, 144, 149, 150, 184, 244, 247, 293, 295, 296, 297, 316, 317, 318, 326, 327, 344, 363, 385, 396, 398, 400, 417, 418, 450, 462, 463, 464, 468, 469, 470, 478, 581, 751], "synonym": [24, 25, 53, 108, 293, 295, 326, 385], "fillna": [24, 25, 46, 53, 108, 127, 293, 295, 318, 326, 385, 398, 710, 711, 745, 749], "bfill": [24, 54, 128, 261, 293, 327, 399, 581], "lower": [26, 36, 118, 119, 297, 307, 391, 482, 535, 556, 557, 560, 561, 586, 679, 692, 706, 710], "trim": [26, 297, 536], "threshold": [26, 297, 595], "assign": [26, 51, 122, 125, 140, 296, 297, 393, 438, 710, 745, 751], "outsid": [26, 167, 297, 434, 461, 748], "boundari": [26, 133, 294, 297, 404, 748], "singular": [26, 297], "latter": [26, 297, 702, 703, 704, 744], "case": [26, 51, 64, 94, 118, 125, 149, 206, 227, 255, 258, 297, 339, 400, 417, 460, 488, 491, 526, 532, 535, 541, 548, 650, 685, 702, 703, 704, 706, 708, 711, 744, 747, 748, 751, 753], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 116, 117, 138, 149, 155, 167, 184, 186, 191, 200, 213, 225, 277, 291, 297, 309, 317, 335, 340, 363, 389, 390, 409, 417, 424, 434, 438, 450, 470, 535, 562, 563, 570, 582, 583, 584, 589, 601, 602, 603, 604, 609, 612, 615, 616, 618, 624, 639, 673, 677, 681, 682, 683, 684, 702, 703, 706, 708, 744, 747, 748, 749, 750, 751, 753], "array_lik": [26, 297], "minimum": [26, 29, 95, 133, 297, 299, 368, 404, 484, 496, 497, 529, 537, 546, 565, 593, 595, 608, 660, 702], "sr": [26, 128, 138, 288, 297, 354, 399, 409, 429, 446, 491, 497, 542, 748], "t": [28, 43, 55, 84, 93, 97, 107, 118, 125, 138, 170, 172, 180, 186, 191, 196, 200, 298, 315, 328, 357, 370, 384, 409, 446, 486, 493, 499, 516, 522, 526, 531, 535, 536, 549, 555, 573, 594, 618, 624, 635, 639, 676, 702, 710, 711, 744, 745, 748, 751], "modif": [28, 298], "reflect": [28, 43, 298, 315, 703], "shallow": [28, 298], "vice": [28, 298, 556], "versa": [28, 298, 556], "s_copi": [28, 298], "versu": [28, 298, 703, 751], "share": [28, 298, 461, 702, 703, 706, 708], "remain": [28, 112, 265, 298, 483, 530, 556, 557, 561, 565, 670, 702], "pearson": [29, 148, 291, 299, 416, 593, 747], "min_period": [29, 133, 299, 301, 404, 593, 595, 651, 748], "correl": [29, 291, 299, 593, 595], "matrix": [29, 31, 492, 593, 595, 749], "spearman": [29, 299, 593], "standard": [29, 152, 162, 194, 299, 419, 544, 548, 553, 560, 611, 633, 641, 656, 673, 702, 703, 704, 706, 708, 710, 745, 748], "coeffici": [29, 299, 593], "rank": [29, 299], "observ": [29, 61, 113, 133, 267, 299, 300, 335, 404, 581, 593, 595, 605, 652, 671, 710], "pair": [29, 77, 127, 162, 170, 172, 398, 593, 595, 665, 672, 673, 676, 677, 678, 679, 708], "have": [29, 36, 48, 50, 55, 61, 74, 84, 94, 97, 106, 109, 111, 122, 124, 128, 138, 142, 171, 172, 179, 180, 277, 299, 307, 321, 323, 328, 335, 357, 387, 393, 399, 409, 438, 467, 483, 492, 503, 504, 526, 593, 595, 651, 669, 676, 702, 703, 704, 706, 708, 710, 712, 715, 744, 747, 748, 751], "valid": [29, 46, 116, 117, 133, 134, 155, 263, 299, 318, 332, 389, 390, 404, 405, 424, 489, 502, 526, 581, 582, 583, 584, 593, 595, 601, 602, 603, 604, 609, 612, 616, 676, 680, 702, 704, 706, 707, 750], "request": [29, 90, 91, 162, 170, 172, 221, 261, 270, 365, 366, 665, 672, 673, 676, 677, 678, 679, 708], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 116, 117, 118, 122, 148, 152, 155, 183, 355, 356, 364, 365, 366, 368, 389, 390, 393, 416, 419, 424, 449, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616], "cell": [30, 744, 748], "nat": [30, 46, 75, 76, 97, 104, 105, 185, 350, 351, 370, 378, 379, 633, 685, 751], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 162, 216, 316, 318, 321, 323, 350, 351, 370, 378, 379, 470, 526, 651, 673, 702, 704, 706, 748, 751], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 162, 184, 239, 243, 317, 318, 350, 351, 363, 378, 379, 450, 526, 673, 676, 683, 702], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 350, 351, 378, 379], "24": [30, 32, 33, 34, 35, 61, 91, 93, 116, 117, 128, 129, 133, 302, 303, 304, 305, 335, 366, 389, 390, 399, 404, 486, 578, 710, 751], "21": [30, 128, 133, 134, 399, 404, 405, 486, 710, 747], "26": [30, 43, 61, 299, 301, 315, 335, 486, 578, 627, 629, 630, 710, 744], "covari": [31, 301, 595], "cumul": [32, 33, 34, 35, 302, 303, 304, 305, 574, 575, 576, 577, 596, 597, 598, 599, 751], "indexedfram": [32, 33, 34, 35, 706, 708], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 158, 184, 294, 300, 302, 303, 304, 305, 318, 327, 335, 339, 350, 351, 363, 366, 378, 379, 426, 438, 450, 486, 509, 510, 526, 534, 535, 536, 539, 558, 559, 633, 748], "cumsum": [32, 33, 34, 302, 303, 304, 706, 751], "15": [32, 33, 34, 35, 45, 55, 84, 128, 133, 141, 144, 253, 302, 303, 304, 305, 328, 354, 357, 399, 404, 411, 433, 486, 517, 518, 710, 748], "34": [32, 33, 34, 35, 155, 302, 303, 304, 305, 424, 495, 751], "product": [34, 43, 116, 155, 267, 268, 269, 304, 315, 389, 424, 702, 708, 749, 750], "percentil": [36, 122, 307, 393], "datetime_is_numer": [36, 307], "descript": [36, 70, 307, 578, 661, 692, 704, 707, 710, 752], "statist": [36, 70, 133, 170, 172, 277, 307, 404, 578, 665, 677, 678, 710], "summar": [36, 307, 578, 747], "central": [36, 307, 578], "tendenc": [36, 307, 578], "dispers": [36, 307, 578], "shape": [36, 50, 93, 141, 149, 307, 323, 411, 417, 578, 706, 744, 748, 751], "dataset": [36, 170, 172, 307, 370, 578, 665, 667, 672, 673, 676, 677, 678, 702, 748], "distribut": [36, 138, 307, 409, 578, 702, 710], "analyz": [36, 307, 578, 710], "well": [36, 103, 106, 118, 143, 221, 246, 307, 412, 466, 535, 659, 683, 704, 706, 744], "vari": [36, 307, 650, 681, 682, 683, 684, 710], "depend": [36, 51, 94, 125, 163, 168, 169, 171, 208, 240, 265, 307, 430, 435, 437, 438, 548, 553, 660, 662, 675, 676, 685, 686, 702, 706, 708, 710, 744, 750], "what": [36, 307, 479, 702, 703, 706, 748, 749, 753], "detail": [36, 162, 170, 172, 186, 191, 200, 288, 307, 595, 618, 624, 639, 641, 665, 672, 673, 676, 677, 678, 679, 702, 707, 709, 710, 747, 748, 752, 753], "fall": [36, 307, 623, 702, 706, 708, 750], "between": [36, 51, 73, 110, 118, 119, 122, 277, 291, 299, 301, 307, 344, 386, 391, 393, 490, 492, 498, 505, 526, 533, 534, 536, 544, 545, 579, 586, 595, 608, 679, 702, 703, 704, 706, 708, 709, 745, 747, 748, 749, 750, 751, 753], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 133, 291, 307, 335, 338, 350, 351, 366, 378, 379, 391, 404, 486, 578, 633, 683, 684, 710, 748], "75": [36, 70, 307, 391, 570, 578, 589, 615, 753], "25th": [36, 307], "50th": [36, 307], "75th": [36, 307], "submit": [36, 307], "instead": [36, 70, 111, 120, 128, 133, 170, 172, 193, 208, 247, 267, 307, 331, 349, 387, 399, 404, 461, 472, 493, 495, 505, 545, 608, 626, 702, 703, 706, 710, 750, 751], "style": [36, 45, 61, 94, 113, 124, 307, 335, 671, 704, 705, 710, 748], "select_dtyp": [36, 307], "o": [36, 307, 486, 499, 702, 706, 710, 740, 741, 742, 743, 749], "omit": [36, 44, 180, 307, 316, 483, 578, 675], "noth": [36, 172, 307, 506], "output_fram": [36, 307], "summari": [36, 70, 307, 578, 749], "mean": [36, 48, 61, 113, 116, 117, 128, 155, 288, 307, 321, 335, 389, 390, 399, 424, 489, 552, 570, 578, 589, 615, 671, 679, 702, 703, 708, 710, 744, 745, 747, 748, 751, 753], "std": [36, 307, 578, 744, 745, 747], "50": [36, 44, 63, 70, 127, 128, 210, 307, 316, 338, 391, 398, 399, 578, 682, 710, 744, 746, 748], "median": [36, 307, 747], "top": [36, 122, 307, 393, 472, 692, 702, 710], "freq": [36, 55, 84, 110, 128, 146, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 204, 205, 207, 307, 319, 328, 357, 386, 399, 414, 451, 587, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 634, 635, 636, 637, 639, 640, 641, 642, 643, 710], "most": [36, 97, 180, 307, 446, 505, 545, 651, 678, 693, 702, 703, 706, 708, 710, 745], "frequenc": [36, 97, 128, 180, 186, 191, 200, 307, 399, 446, 454, 618, 624, 639, 659], "timestamp": [36, 47, 75, 76, 104, 105, 133, 168, 172, 307, 350, 351, 378, 379, 404, 435, 523, 618, 624, 639, 676, 685, 710, 745, 751, 753], "highest": [36, 97, 122, 307, 393, 462, 544, 545, 702], "arbitrarili": [36, 307], "chosen": [36, 138, 307, 409], "among": [36, 43, 307, 315, 595, 753], "analysi": [36, 307, 595], "consist": [36, 141, 228, 229, 230, 231, 232, 236, 237, 263, 307, 411, 702, 703, 704, 706, 748], "union": [36, 94, 163, 169, 277, 307, 430, 437, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 488, 540, 541, 554, 650, 683, 735, 736], "00000": [36, 148, 307, 416, 744], "50000": [36, 307], "02765": [36, 307], "25000": [36, 307], "75000": [36, 307], "datetime64": [36, 46, 47, 75, 76, 104, 105, 120, 128, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 204, 205, 307, 350, 351, 378, 379, 399, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 685, 746, 750, 751], "2000": [36, 128, 187, 192, 195, 196, 197, 198, 201, 205, 307, 399, 619, 623, 625, 626, 627, 629, 630, 634, 635, 636, 637, 640, 641, 643], "2010": [36, 307, 626, 633, 744], "2006": [36, 307, 626], "09": [36, 55, 84, 128, 133, 307, 328, 357, 399, 404, 623, 627, 629, 630, 641, 744], "08": [36, 120, 124, 128, 133, 186, 188, 189, 190, 191, 194, 199, 204, 307, 399, 404, 620, 621, 622, 623, 627, 638, 642, 681, 682, 683, 684, 703], "2004": [36, 307, 626], "31": [36, 128, 186, 188, 189, 190, 191, 194, 197, 199, 204, 205, 307, 399, 620, 621, 622, 623, 626, 627, 631, 632, 636, 638, 641, 642, 643, 644, 645, 646, 648, 744], "field": [36, 172, 307, 502, 566, 650, 673, 679, 692, 706, 740], "classmethod": [37, 38, 57, 58, 59, 65, 212, 213, 219, 220, 225, 266, 267, 268, 269, 308, 309, 330, 331, 332, 333, 340, 712, 714, 717, 718, 723, 724, 729, 730, 735, 737, 740, 742], "header": [37, 38, 39, 50, 65, 66, 162, 170, 172, 212, 213, 214, 225, 226, 308, 309, 310, 323, 340, 341, 665, 672, 673, 676, 677, 678, 679, 706], "represent": [37, 70, 143, 181, 182, 212, 246, 262, 267, 308, 412, 447, 448, 483, 717, 723, 729, 746, 749], "subclass": [37, 38, 65, 133, 143, 208, 212, 213, 225, 246, 308, 309, 340, 362, 404, 412, 704, 706], "implement": [37, 90, 110, 143, 179, 212, 246, 276, 308, 365, 386, 412, 564, 675, 706, 710, 745, 748, 750], "how": [37, 46, 57, 80, 94, 110, 122, 134, 143, 167, 179, 212, 217, 240, 246, 308, 318, 386, 393, 405, 412, 434, 461, 675, 702, 703, 704, 707, 708, 710, 744, 748, 749, 750], "construct": [37, 112, 143, 185, 212, 246, 260, 308, 412, 451, 670, 706, 708, 717, 718, 723, 724, 729, 730, 740], "metadata": [37, 38, 39, 65, 66, 143, 170, 172, 212, 213, 214, 225, 226, 246, 308, 309, 310, 340, 341, 412, 650, 666, 668, 677, 678], "reconstruct": [37, 38, 39, 65, 66, 143, 212, 213, 214, 225, 226, 246, 308, 309, 310, 340, 341, 412], "buffer": [37, 38, 65, 66, 70, 143, 212, 213, 225, 226, 246, 306, 308, 309, 340, 341, 383, 412, 675, 750], "memoryview": [37, 38, 39, 65, 66, 143, 212, 213, 214, 225, 226, 246, 306, 308, 309, 310, 340, 341, 412], "serializ": [37, 38, 65, 143, 168, 212, 213, 225, 246, 308, 309, 340, 412, 435], "instanc": [37, 38, 55, 65, 84, 144, 212, 213, 225, 276, 308, 309, 328, 340, 357, 483, 491, 500, 533, 542, 673, 702, 706, 707, 708, 710], "cl": [37, 38, 65, 212, 213, 225, 308, 309, 340, 702], "wa": [37, 38, 65, 212, 213, 225, 249, 308, 309, 340, 745], "produc": [37, 38, 61, 65, 112, 124, 138, 212, 213, 225, 308, 309, 335, 340, 409, 472, 670, 676, 710, 747, 748, 753], "meta": [37, 38, 39, 65, 66, 143, 161, 212, 213, 214, 225, 226, 246, 308, 309, 310, 340, 341, 412], "privat": [37, 38, 39, 65, 66, 143, 212, 213, 214, 225, 226, 246, 308, 309, 310, 340, 341, 412], "devic": [38, 39, 65, 143, 169, 213, 214, 225, 246, 288, 309, 310, 340, 412, 437, 650, 706], "side": [38, 65, 94, 124, 128, 141, 213, 223, 225, 259, 260, 309, 340, 395, 399, 411, 484, 529, 531, 537, 546, 549, 555, 565, 660, 711], "deseri": [38, 65, 143, 213, 225, 246, 309, 340, 412], "task": [38, 65, 213, 225, 309, 340, 706, 710, 748, 753], "primari": [38, 213, 309, 702, 703, 706], "purpos": [38, 213, 309, 702, 703, 706, 708], "memori": [38, 39, 66, 70, 93, 162, 165, 169, 213, 214, 226, 251, 288, 309, 310, 341, 367, 432, 437, 649, 650, 662, 676, 678, 702, 703, 706, 708, 709, 710, 744, 750], "host": [38, 66, 162, 169, 170, 172, 182, 213, 226, 277, 309, 341, 437, 448, 665, 672, 673, 676, 677, 678, 679, 704, 706], "necessari": [38, 43, 163, 213, 309, 315, 430, 528, 702, 703, 704, 706, 708, 710, 748], "associ": [39, 66, 214, 226, 277, 310, 341, 679, 746, 753], "devicebufferlik": [39, 214, 310], "period": [40, 55, 84, 110, 128, 133, 146, 187, 192, 195, 196, 197, 198, 201, 205, 311, 328, 357, 386, 399, 404, 414, 579, 587, 619, 625, 631, 632, 634, 635, 636, 637, 640, 641, 643, 710], "discret": [40, 311, 660, 702], "calcul": [40, 70, 110, 133, 152, 183, 194, 223, 299, 311, 332, 386, 404, 419, 449, 579, 595, 633, 651, 652, 653, 654, 655, 656, 657, 658, 685, 710, 744, 749], "compar": [40, 50, 215, 227, 311, 323, 349, 590, 681, 682, 683, 684, 692, 705, 708, 711, 747, 751, 753], "previou": [40, 124, 261, 311], "shift": [40, 110, 291, 311, 386, 579], "neg": [40, 64, 126, 160, 245, 311, 339, 397, 428, 501, 506, 579, 717, 723, 729], "take": [40, 106, 111, 165, 251, 387, 432, 483, 526, 570, 579, 589, 615, 651, 662, 692, 702, 744, 748], "gdf": [40, 578, 581, 590, 593, 595, 710, 711, 746], "16": [40, 133, 141, 362, 404, 411, 486, 503, 504, 679, 685, 710, 744, 748, 750], "36": [40, 133, 404, 710, 748], "divis": [41, 42, 56, 123, 130, 137, 177, 193, 313, 314, 329, 394, 401, 408, 442, 626], "truediv": [41, 42, 313, 314], "inf": [41, 42, 75, 76, 104, 105, 123, 137, 177, 313, 314, 350, 351, 378, 379, 394, 408, 442, 708], "flexibl": [43, 167, 315, 434, 702, 703, 706, 708, 710, 744, 748, 751], "wrapper": [43, 315, 703, 706, 748], "sub": [43, 154, 315, 423, 487, 498, 505, 541, 544, 545], "mul": [43, 99, 315, 372], "div": [43, 315], "mod": [43, 315], "pow": [43, 315], "swap": [43, 157, 315, 702], "operand": [43, 315], "org": [43, 315, 548, 553, 595, 685], "datamodel": [43, 315], "__ror__": [43, 315], "70": [43, 315], "174": [43, 315], "remov": [44, 45, 129, 181, 182, 262, 265, 316, 317, 318, 400, 447, 448, 468, 470, 495, 496, 497, 531, 535, 536, 549, 555, 705, 706, 748], "multi": [44, 51, 80, 263, 316, 669, 709, 710, 749], "keyerror": [44, 316, 664, 680], "found": [44, 94, 141, 238, 271, 277, 316, 362, 411, 499, 500, 505, 538, 542, 543, 545, 547, 548, 553, 559, 641, 673, 706, 710, 711], "dropna": [44, 48, 61, 97, 107, 113, 151, 167, 180, 316, 321, 335, 337, 370, 384, 434, 446, 472, 573, 594, 659, 671, 749], "drop_dupl": [44, 316], "duplic": [44, 45, 103, 106, 125, 144, 216, 256, 316, 317, 377, 380, 540, 660, 673, 753], "certain": [44, 45, 94, 316, 535, 548, 553, 702, 707, 748], "reindex": [44, 316, 581, 692, 711], "midx": [44, 147, 157, 249, 264, 272, 316, 415], "from_product": [44, 247, 267, 269, 316], "40": [44, 128, 186, 194, 199, 316, 395, 399, 488, 638, 710], "lama": [44, 316, 317, 349], "falcon": [44, 61, 64, 74, 129, 157, 180, 316, 335, 339], "speed": [44, 61, 129, 157, 316, 335, 578, 673, 685, 703, 744], "weight": [44, 138, 157, 316, 409], "length": [44, 48, 55, 84, 88, 94, 127, 138, 140, 150, 157, 184, 238, 255, 277, 316, 321, 328, 357, 363, 398, 409, 418, 450, 474, 475, 477, 492, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 548, 553, 564, 565, 587, 650, 660, 663, 717, 719, 723, 725, 729, 731, 748], "big": [44, 70, 157, 316], "small": [44, 157, 316, 673, 677, 702, 704, 706, 744, 745, 747, 748], "45": [44, 157, 200, 316, 618, 624, 639, 685, 748], "200": [44, 124, 157, 210, 316, 744], "100": [44, 61, 118, 127, 128, 157, 193, 210, 249, 316, 335, 398, 399, 516, 518, 626, 682, 710, 748, 751], "250": [44, 157, 316], "150": [44, 157, 316], "320": [44, 157, 316], "keep": [45, 46, 88, 103, 106, 109, 122, 179, 184, 216, 317, 318, 363, 377, 380, 393, 450, 495, 496], "identifi": [45, 61, 75, 76, 92, 104, 105, 149, 167, 335, 350, 351, 378, 379, 417, 434, 490, 497, 542, 543, 641, 669, 675, 702], "drop": [45, 46, 48, 109, 114, 129, 144, 151, 216, 217, 265, 317, 318, 321, 400, 472, 660, 749, 753], "occurr": [45, 103, 106, 216, 317, 377, 380, 489, 499, 500, 526, 538, 541, 547, 710], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 116, 117, 155, 170, 172, 199, 317, 389, 390, 424, 473, 475, 498, 505, 544, 545, 550, 638, 681, 682, 683, 684, 702, 708, 710, 748], "guarante": [45, 138, 317, 409, 480, 595, 673, 702, 747, 753], "thresh": 46, "decid": [46, 217, 703], "least": [46, 109, 179, 217, 337, 472, 526, 708, 746, 748], "isna": [46, 76, 318, 351, 751], "notna": [46, 105, 318, 379, 751], "alfr": [46, 75, 76, 104, 105, 350, 351, 378, 379], "batman": [46, 75, 76, 104, 105, 350, 351, 378, 379], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 350, 351, 378, 379, 509, 510, 748], "batmobil": [46, 75, 76, 104, 105, 350, 351, 378, 379], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 350, 351, 378, 379], "1940": [46, 75, 76, 104, 105, 350, 351, 378, 379], "look": [46, 702, 703, 704, 706, 744, 745, 748], "20180310": 47, "u": [47, 168, 172, 186, 191, 195, 200, 435, 486, 501, 618, 624, 634, 639, 676, 685, 702, 703, 704, 706, 744, 746, 748, 750, 751], "ax": [48, 112, 167, 181, 182, 262, 321, 434, 447, 448, 461, 552, 670, 676, 688, 697], "still": [48, 321, 704], "we": [48, 61, 74, 106, 124, 125, 128, 208, 321, 335, 370, 399, 526, 673, 675, 677, 678, 702, 703, 704, 706, 708, 710, 744, 745, 746, 748, 751, 753], "our": [48, 321, 702, 703, 704, 706, 710, 744, 748, 753], "test": [50, 64, 323, 339, 349, 488, 493, 528, 536, 554, 673, 692, 703, 705, 707, 709, 710, 745, 753], "exactly_equ": [50, 323], "different_column_typ": [50, 323], "expr": [51, 120], "evalu": [51, 493, 511, 554, 710], "describ": [51, 70, 167, 168, 434, 435, 539, 677, 678, 747], "express": [51, 120, 488, 489, 493, 494, 500, 532, 541, 543, 548, 553, 554, 677, 678, 749], "mutat": 51, "typic": [51, 702, 706, 708, 753], "statement": [51, 710, 748], "bitwis": [51, 748], "logic": [51, 94, 288, 677, 678, 706, 708, 710, 748], "automat": [51, 57, 277, 332, 595, 676, 702, 703, 704, 710, 747, 751], "respons": 51, "suitabl": [51, 141, 168, 411, 435, 706], "later": 51, "condit": [51, 88, 120, 184, 363, 450, 710, 748], "upon": [51, 143, 246, 412], "earlier": 51, "though": [51, 710, 748], "line": [51, 64, 168, 339, 435, 505, 545, 564, 673, 676, 702, 703, 744], "replic": [52, 324], "22": [52, 128, 194, 245, 399, 486, 703, 710, 751], "44": [52, 191, 710, 748], "ffill": [54, 108, 110, 261, 327, 385, 386, 581], "forward": [54, 162, 170, 172, 327, 580, 581, 585, 600, 607, 665, 672, 673, 676, 677, 678, 679, 704], "next": [54, 261, 327, 500, 581, 702, 704, 706, 710, 744, 748], "backward": [54, 327, 571, 572, 591, 592], "initi": [55, 328, 706, 708, 710, 748], "time": [55, 84, 110, 126, 128, 133, 160, 162, 168, 245, 277, 328, 357, 386, 397, 399, 404, 428, 435, 475, 482, 489, 556, 557, 561, 595, 651, 673, 677, 678, 685, 692, 702, 703, 706, 708, 744, 745, 748, 749, 751], "date": [55, 84, 168, 185, 193, 199, 328, 357, 435, 623, 626, 627, 628, 629, 630, 631, 632, 638, 641, 673, 676, 685, 702, 710, 745], "few": [55, 84, 328, 357, 706, 748, 751, 753], "1m": [55, 328, 623], "displai": [55, 70, 84, 122, 328, 357, 393, 660, 704], "month": [55, 186, 191, 200, 328, 618, 623, 624, 627, 628, 639, 685], "typeerror": [55, 57, 58, 84, 127, 215, 220, 266, 319, 328, 330, 333, 349, 357, 398, 526, 686, 748], "datetimeindex": [55, 84, 328, 357, 685, 692], "date_rang": [55, 84, 128, 187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 205, 319, 328, 357, 399, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 710], "2d": [55, 84, 328, 357, 662], "3d": [55, 84, 328, 357], "9223372036854775807": [56, 130, 329, 401, 710], "tabl": [57, 72, 112, 113, 118, 119, 160, 161, 167, 168, 266, 428, 434, 435, 496, 560, 659, 670, 671, 676, 702, 706, 710, 747, 750], "pyarrow": [57, 161, 266, 330, 429, 677, 678, 710, 717, 718, 722, 723, 724, 728, 729, 730, 734, 735, 737, 739, 740, 742, 743], "doe": [57, 61, 74, 125, 157, 163, 167, 288, 319, 335, 430, 434, 470, 502, 548, 590, 651, 664, 669, 680, 686, 702, 703, 706, 708, 711, 746, 747, 748, 753], "similar": [57, 94, 149, 167, 170, 172, 288, 417, 434, 548, 553, 681, 682, 684, 702, 708, 745, 747, 748, 751, 753], "to_panda": [57, 710, 712, 745, 747, 748, 751, 753], "work": [57, 133, 404, 446, 649, 650, 702, 704, 706, 707, 709, 710, 746, 747, 748, 749], "pa": [57, 266, 330, 717, 718, 723, 724, 729, 730, 735, 737, 740, 742], "record": [59, 94, 122, 168, 393, 435, 533, 676, 702], "recarrai": [59, 173], "ndim": 59, "greater": [60, 62, 71, 294, 334, 336, 565, 595, 686, 746], "as_index": [61, 335], "group_kei": [61, 335], "squeez": [61, 335], "group": [61, 113, 122, 167, 170, 335, 393, 434, 446, 494, 543, 570, 574, 575, 576, 577, 579, 582, 583, 584, 586, 587, 588, 589, 590, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 659, 668, 671, 675, 677, 678, 702, 706, 708, 711, 745, 748, 749, 751, 753], "mapper": [61, 125, 335], "involv": [61, 277, 335, 706], "some": [61, 73, 124, 271, 335, 344, 420, 478, 489, 541, 590, 685, 702, 703, 706, 708, 710, 711, 747, 748, 750, 753], "combin": [61, 144, 180, 335, 461, 490, 531, 548, 549, 555, 570, 589, 615, 677, 678, 692, 702, 708, 710, 712, 750], "split": [61, 168, 260, 335, 435, 486, 534, 538, 547, 548, 558, 559, 676, 679, 692, 704, 710, 750], "larg": [61, 138, 335, 409, 673, 677, 678, 706, 745, 747], "amount": [61, 70, 335, 704, 706, 748], "notic": [61, 271, 335, 746, 748], "interpret": [61, 167, 335, 434, 503, 504, 548, 553, 673, 677, 678], "hierarch": [61, 89, 90, 95, 167, 178, 263, 335, 364, 365, 368, 434, 687, 706, 710], "particular": [61, 89, 90, 95, 162, 170, 172, 335, 364, 365, 368, 420, 489, 665, 672, 673, 676, 677, 678, 679, 702, 703, 704, 706, 708, 747, 753], "relev": [61, 335, 702], "sql": [61, 94, 335, 710], "influenc": [61, 335, 750], "preserv": [61, 127, 288, 335, 398, 565, 618, 624, 639, 673, 679, 751], "piec": [61, 335, 702, 704, 706], "dataframegroupbi": [61, 691], "about": [61, 70, 335, 595, 649, 650, 702, 705, 706, 710, 750], "390": [61, 335, 744], "350": [61, 335], "parrot": [61, 64, 129, 335, 339, 488], "370": [61, 335, 578], "anim": [61, 74, 317, 335, 349, 461], "380": [61, 335, 578], "375": [61, 335], "captiv": [61, 335], "wild": [61, 335], "from_arrai": [61, 227, 255, 335], "185": [61, 335], "210": [61, 335], "g1": [61, 335], "g2": [61, 335], "variou": [61, 335, 697, 702, 703, 704, 706], "lambda": [61, 335, 362, 570, 589, 590, 608, 615, 708, 711, 745, 747, 748], "333333": [61, 123, 128, 137, 335, 394, 399, 408, 446, 595], "666667": [61, 183, 335, 449], "000000": [61, 75, 76, 104, 105, 128, 139, 335, 350, 351, 378, 379, 399, 410, 593, 595, 634, 744, 747, 751], "murmur3": [63, 338], "hash": [63, 109, 338, 649], "md5": [63, 338], "murmurhash3": [63, 338], "120": [63, 338, 487], "1930516747": [63, 338], "422619251": [63, 338], "941520876": [63, 338], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 338], "947ca8d2c5f0f27437f156cfbfab0969": [63, 338], "d0580ef52d27c043c8e341fd5039b166": [63, 338], "330519225": [63, 338], "397962448": [63, 338], "1345834934": [63, 338], "57ce879751b5169c525907d5c563fae1": [63, 338], "948d6221a7c4963d4be411bcead7e32b": [63, 338], "fe061786ea286a515b772d91b0dfcd70": [63, 338], "quickli": [64, 339, 744], "your": [64, 124, 125, 339, 704, 710, 744, 748], "right": [64, 80, 94, 128, 133, 141, 223, 232, 240, 259, 260, 294, 312, 339, 399, 404, 411, 484, 498, 505, 529, 537, 544, 545, 549, 553, 555, 565, 660, 663, 681, 682, 683, 684, 717, 723, 729, 745, 746], "tail": [64, 339], "allig": [64, 339], "bee": [64, 339, 531, 549, 555], "lion": [64, 129, 339, 500], "monkei": [64, 129, 339, 461, 500], "shark": [64, 339], "whale": [64, 339], "zebra": [64, 339], "view": [64, 163, 169, 339, 430, 437, 581, 702, 706, 749], "three": [64, 106, 112, 339, 490, 660, 670, 706, 744, 748, 750], "verbos": [70, 708], "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 332], "print": [70, 125, 133, 174, 404, 439, 590, 661, 685, 744, 748, 752], "concis": 70, "usag": [70, 93, 367, 676, 702, 703, 707, 710, 748], "full": [70, 94, 167, 434, 608, 675, 704, 710, 744, 745, 748, 753], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 129, 208, 387, 400, 486, 496, 533, 608, 660, 703, 704, 706, 710, 744, 746, 747, 748, 751, 753], "further": 70, "process": [70, 174, 439, 710, 744, 747, 748], "switch": [70, 685], "truncat": [70, 650], "total": [70, 93, 367, 565, 623, 668, 672, 677, 717, 723, 729, 746, 748], "alwai": [70, 101, 122, 138, 250, 288, 370, 393, 409, 526, 673, 703, 706, 747, 748, 750, 753], "never": [70, 474, 706, 748], "introspect": 70, "shown": [70, 500], "human": 70, "readabl": 70, "unit": [70, 168, 435, 451, 676, 685], "estim": [70, 301, 595], "made": [70, 163, 175, 271, 430, 566, 702, 711, 751], "assum": [70, 312, 488, 492, 541, 548, 553, 595, 662, 702, 704, 705, 706, 748], "consum": [70, 702, 748], "real": 70, "cost": [70, 703], "smaller": [70, 93, 497], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 651], "delta": [70, 152, 183, 419, 449, 451, 595, 611, 614, 656, 658], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 171, 253, 266, 306, 438, 692, 704, 706, 710, 748, 751], "130": [70, 744], "byte": [70, 93, 367, 481, 563, 649, 665, 672, 673, 676, 677, 678, 679, 706, 717, 719, 723, 725, 729, 731, 750], "its": [70, 111, 161, 179, 291, 387, 685, 703, 704, 706, 707, 710, 750], "pipe": [70, 747], "content": [70, 167, 434, 526, 679, 705, 706, 748], "io": [70, 651, 673, 677, 678, 692, 749], "stringio": [70, 673, 676, 679], "getvalu": 70, "mode": [70, 167, 434, 675, 702, 750], "special": [70, 206, 258, 460, 489, 514, 526, 650, 706, 708, 746, 753], "fine": [70, 704], "tune": [70, 750], "random_strings_arrai": 70, "random": [70, 138, 172, 409, 595, 710, 744, 751, 753], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 170, 172, 717, 723, 729], "999999": 70, "mb": [70, 172, 665, 710], "num": [71, 710], "interleav": [72, 160, 428], "major": [72, 662, 753], "a1": [72, 494, 744], "a2": [72, 744], "a3": [72, 744], "b1": 72, "b2": [72, 494], "b3": 72, "linear": [73, 118, 344, 391, 586, 706, 744, 745], "limit_direct": [73, 344], "limit_area": [73, 344], "downcast": [73, 218, 344, 581, 686], "techniqu": [73, 344], "space": [73, 170, 172, 344, 490, 526, 534, 535, 538, 548, 557, 673], "linearli": [73, 344], "unsort": [73, 344, 745], "lead": [73, 162, 344, 531, 549, 555, 595, 744, 745, 748], "erron": [73, 344], "num_leg": [74, 180], "num_w": [74, 180], "check": [74, 144, 228, 229, 230, 231, 232, 236, 237, 238, 263, 312, 349, 470, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 532, 562, 563, 681, 682, 683, 684, 703, 744, 753], "present": [74, 116, 117, 155, 389, 390, 424, 472, 526, 548, 553, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 650, 703, 705, 748], "leg": [74, 97], "wing": [74, 97], "separ": [74, 483, 490, 533, 534, 538, 547, 548, 553, 663, 679, 697, 702, 704, 706, 708, 748], "spider": 74, "everyth": [75, 76, 89, 90, 95, 239, 350, 351, 364, 365, 368, 461, 552, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616], "timedelta64": [75, 76, 104, 105, 350, 351, 378, 379, 451, 644, 645, 646, 647, 648, 750, 751], "charact": [75, 76, 104, 105, 350, 351, 378, 379, 482, 483, 484, 485, 486, 487, 488, 489, 495, 496, 497, 503, 504, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 534, 535, 537, 541, 542, 546, 549, 553, 555, 556, 557, 558, 560, 561, 562, 563, 565, 649, 673, 679, 703, 706], "incas": [75, 76, 104, 105, 350, 351, 378, 379], "1939": [75, 76, 104, 105, 350, 351, 378, 379], "05": [75, 76, 104, 105, 128, 186, 188, 189, 190, 191, 194, 199, 200, 204, 291, 350, 351, 378, 379, 399, 618, 620, 621, 622, 623, 624, 638, 639, 642, 681, 682, 683, 684, 685, 710], "27": [75, 76, 104, 105, 350, 351, 378, 379, 486, 627, 629, 630, 710], "joker": [75, 76, 104, 105, 350, 351, 378, 379], "32": [75, 76, 104, 105, 134, 350, 351, 378, 379, 405, 708], "float64index": [75, 76, 104, 105, 147, 220, 350, 351, 378, 379, 415], "left": [80, 94, 125, 128, 134, 141, 179, 223, 232, 240, 259, 260, 294, 312, 399, 405, 411, 484, 498, 505, 531, 537, 541, 544, 545, 546, 555, 560, 565, 660, 681, 682, 683, 684, 702, 710, 745], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 240, 461, 677, 678], "outer": [80, 94, 240, 461, 678], "suffic": [80, 748], "avoid": [80, 288, 702, 703, 706, 708, 750, 753], "conflict": 80, "ensur": [80, 163, 169, 430, 437, 488, 678, 702, 703, 704, 710], "now": [80, 119, 663, 702, 706, 710, 744, 748], "due": [80, 590, 673, 703, 710, 711, 745, 748], "lack": 80, "five": [81, 651], "int64index": [81, 147, 210, 215, 218, 227, 238, 240, 244, 245, 247, 249, 253, 255, 265, 296, 415, 489, 683, 706], "fisher": [82, 83, 148, 355, 356, 416], "unbias": [82, 83, 148, 183, 301, 355, 356, 416, 449, 595], "kurtosi": [82, 355], "sampl": [82, 83, 148, 152, 299, 355, 356, 416, 419, 433, 710], "obtain": [82, 83, 355, 356, 476, 564, 651, 753], "definit": [82, 83, 278, 355, 356, 375, 441, 595], "normal": [82, 83, 138, 152, 180, 183, 185, 301, 355, 356, 409, 419, 446, 449, 535, 595, 611, 614, 659, 677, 678, 744], "1999999999999904": [82, 83, 355, 356], "kurt": [83, 356], "final": [84, 357, 677, 678, 706, 748], "dai": [84, 172, 185, 188, 189, 190, 193, 194, 204, 319, 357, 451, 452, 457, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 642, 644, 646, 648, 685, 748, 751], "cond": [88, 184, 363, 450], "dimens": [88, 101, 184, 363, 375, 450], "collaps": [89, 90, 95, 364, 365, 368], "attempt": [89, 90, 95, 208, 215, 271, 364, 365, 368, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616, 663, 673, 685, 703, 711, 748], "17": [91, 128, 133, 141, 291, 366, 399, 404, 411, 486, 710, 751], "unpivot": [92, 669], "wide": [92, 669, 702, 704, 748], "format": [92, 162, 166, 167, 168, 170, 172, 174, 434, 435, 439, 523, 524, 562, 563, 564, 581, 641, 669, 673, 676, 685, 703, 704, 706, 709, 710, 711, 744, 745, 746, 750], "id_var": [92, 669], "value_var": [92, 669], "var_nam": [92, 669], "value_nam": [92, 669], "whose": [93, 112, 566, 663, 670, 702, 706], "ones": [93, 469], "5000": 93, "astyp": [93, 229, 237, 692, 710, 712], "head": [93, 710, 744, 748, 753], "40000": 93, "storag": [93, 162, 170, 172, 665, 672, 673, 676, 677, 678, 679, 749], "mani": [93, 377, 380, 595, 693, 702, 704, 706, 708, 710, 745, 746, 748, 750, 753], "repeat": [93, 160, 428, 489, 692], "5008": 93, "43": [93, 647, 748], "give": [93, 277, 702, 703, 706, 744, 747], "rest": [93, 524, 552, 557, 704], "necessarili": [93, 178, 687], "left_on": 94, "right_on": 94, "left_index": [94, 745], "right_index": [94, 745], "_x": 94, "_y": 94, "databas": 94, "join": [94, 179, 461, 673, 692, 709, 745, 749, 753], "intersect": [94, 461, 708], "leftsemi": 94, "leftanti": 94, "exact": [94, 118, 138, 261, 391, 409, 660, 683, 685], "opposit": 94, "were": [94, 468, 559, 710, 748], "overlap": [94, 142, 179, 461, 496, 500, 650, 660], "determinist": [94, 753], "df_a": [94, 710], "vals_a": [94, 710], "df_b": [94, 710], "vals_b": [94, 710], "df_merg": 94, "sort_valu": [94, 692, 710], "typecast": 94, "ambigu": [94, 185], "exactli": [94, 681, 682, 683, 684, 703, 747], "extend": [94, 660, 702, 710, 748], "semi": [94, 595], "anti": 94, "modulo": [96, 131, 369, 402], "4294967295": [96, 131, 369, 402], "appear": [97, 122, 332, 377, 380, 393, 490, 565], "often": [97, 691, 702, 745, 748, 751], "search": [97, 167, 271, 434, 473, 475, 488, 498, 499, 500, 505, 542, 544, 545, 702, 709, 751, 753], "don": [97, 107, 125, 180, 370, 384, 446, 573, 594, 676, 702, 745, 748, 751], "value_count": [97, 710], "speci": [97, 247], "bird": [97, 129, 461], "mammal": [97, 129], "arthropod": 97, "multipli": [98, 371, 748], "largest": [103, 377], "priorit": [103, 748], "popul": [103, 106, 744, 748], "59000000": [103, 106, 377, 380], "65000000": [103, 106, 377, 380], "434000": [103, 106, 377, 380], "337000": [103, 106, 377, 380], "11300": [103, 106, 377, 380], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 156, 425, 746], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "itali": [103, 106, 377, 380], "franc": [103, 106, 377, 380], "malta": [103, 106, 377, 380], "maldiv": [103, 106, 377, 380], "brunei": [103, 106, 377, 380], "iceland": [103, 106, 377, 380], "nauru": [103, 106, 377, 380], "tuvalu": [103, 106, 377, 380], "anguilla": [103, 106, 377, 380], "smallest": [106, 122, 380, 393, 475, 686], "retriev": [106, 502, 675], "ti": [106, 122, 261, 393], "resolv": [106, 712], "revers": [106, 377, 380, 605, 710], "distinct": [107, 349, 706], "npart": 109, "keep_index": [109, 140], "partit": [109, 172, 665, 678, 692, 710], "fill_method": [110, 386], "percent": [110, 386], "sequenti": [110, 386, 747, 748, 753], "form": [110, 112, 122, 160, 227, 255, 386, 393, 428, 513, 516, 517, 518, 519, 665, 670, 677, 678, 706, 745], "handl": [110, 162, 167, 168, 179, 317, 386, 420, 434, 435, 461, 548, 553, 675, 686, 692, 705, 706, 708, 709, 750], "consecut": [110, 126, 245, 386, 397, 485, 533, 534, 673], "increment": [110, 386, 665], "data_keyword": [111, 387, 608], "chain": [111, 387], "groupbi": [111, 387, 692, 706, 709, 710, 711, 745, 749, 753], "write": [111, 162, 166, 167, 168, 170, 172, 387, 434, 435, 665, 667, 673, 675, 703, 705, 709, 710, 744, 748, 750], "arg2": [111, 387], "arg3": [111, 387], "sai": [111, 387, 502, 748], "suppos": [111, 387], "reshap": [112, 151, 670, 692, 744], "organ": [112, 670, 704, 705], "rearrang": [112, 670], "aggfunc": [113, 659, 671], "margin": [113, 659, 671], "margins_nam": [113, 659, 671], "spreadsheet": [113, 671], "pivot": [113, 178, 671, 687], "excel": [113, 671], "exponenti": [115, 135, 388, 406], "min_count": [116, 117, 155, 389, 390, 424, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616], "fewer": [116, 117, 155, 389, 390, 424, 582, 583, 584, 601, 602, 603, 604, 609, 612, 616], "5040": [116, 117, 389, 390], "q": [118, 119, 391, 586, 641], "interpol": [118, 119, 391, 586], "higher": [118, 119, 391, 586, 676, 706, 750], "midpoint": [118, 391, 586], "nearest": [118, 119, 261, 391, 586], "desir": [118, 119, 159, 250, 391, 427, 586, 673, 676, 703, 748, 753], "li": [118, 119, 391, 586], "j": [118, 119, 157, 391, 492, 748], "approxim": [118, 391], "One": [118, 124, 167, 168, 186, 191, 200, 277, 395, 434, 435, 618, 624, 639, 702, 708, 711, 744, 746, 751], "notabl": [118, 149, 417, 711], "doesn": [118, 138, 170, 172, 409, 526, 710, 711, 751], "under": [118, 678, 697, 702, 704, 705, 706, 710, 711], "cp": [118, 650, 710, 744, 748, 751, 753], "55": [118, 245, 748], "deprec": [119, 672, 677, 705], "pleas": [119, 162, 167, 170, 172, 362, 434, 665, 672, 673, 676, 677, 678, 679, 710, 748], "local_dict": [120, 710], "local": [120, 665, 672, 673, 675, 676, 677, 678, 679, 704, 710], "filter": [120, 496, 677, 678, 702, 708, 709, 710, 753], "search_dat": [120, 710], "search_date2": 120, "averag": [122, 393, 748], "na_opt": [122, 393], "pct": [122, 393], "direct": [122, 393, 587, 676, 704, 710, 750], "dens": [122, 393, 744], "lowest": [122, 393, 498, 505, 544, 706], "increas": [122, 235, 312, 345, 347, 380, 393, 673, 685, 708], "bottom": [122, 393, 673], "rtruediv": [123, 394], "002778": [123, 137, 394, 408], "005556": [123, 137, 394, 408], "250000": [123, 137, 394, 408], "toler": [124, 222, 261, 271, 395, 681, 682, 683, 684], "conform": [124, 240, 395, 704], "unless": [124, 420, 548, 553, 659, 702], "either": [124, 134, 138, 150, 171, 179, 221, 400, 405, 409, 418, 438, 475, 483, 488, 663, 672, 673, 676, 677, 678, 679, 704, 710, 744, 748, 750], "even": [124, 163, 288, 370, 430, 673, 676, 702, 703, 748, 751], "convent": [124, 125, 128, 399], "index_label": 124, "column_label": 124, "_highly_": 124, "clarifi": [124, 125], "intent": [124, 125], "fiction": [124, 502], "firefox": 124, "chrome": 124, "safari": 124, "ie10": 124, "konqueror": 124, "http_statu": [124, 711], "404": [124, 710, 744], "301": 124, "response_tim": 124, "new_index": 124, "iceweasel": 124, "comodo": 124, "dragon": 124, "retain": [124, 395, 497, 711, 751], "user_ag": 124, "alter": [125, 172, 244, 396], "throw": [125, 168, 435, 703, 750], "index_mapp": 125, "columns_mapp": 125, "highli": [125, 678, 753], "overwrit": [125, 179, 267], "postfix": 125, "repetit": [126, 245, 397], "newli": [126, 245, 397, 400, 587, 706], "to_replac": [127, 398], "regex": [127, 398, 488, 489, 494, 500, 532, 541, 543, 548, 553], "valueerror": [127, 142, 167, 168, 179, 398, 434, 435, 469, 505, 526, 545, 660, 704, 744, 747], "mismatch": [127, 398, 683, 684], "actual": [127, 398, 526, 703, 706, 710, 748, 751], "exhibit": [127, 398, 704], "silent": [127, 398], "rule": [128, 399, 702, 708], "close": [128, 185, 207, 259, 260, 294, 399, 451, 665, 675, 704, 706, 753], "loffset": [128, 399], "start_dai": [128, 399], "dateoffset": [128, 399], "bin": [128, 312, 399, 446, 660], "interv": [128, 228, 229, 230, 231, 232, 236, 237, 259, 260, 312, 399, 660, 706, 747], "edg": [128, 133, 312, 399, 404, 498, 505, 544, 545, 660, 703], "bucket": [128, 399], "closest": [128, 399], "nanosecond": [128, 168, 172, 399, 435, 452, 644, 676, 685], "millisecond": [128, 168, 399, 435, 452, 644, 676, 685], "minut": [128, 399, 452, 644, 685, 709, 749], "2001": [128, 200, 205, 319, 399, 618, 623, 624, 626, 639, 643, 745], "1t": [128, 399], "06": [128, 186, 188, 189, 190, 204, 399, 618, 620, 621, 622, 623, 641, 642, 644, 645, 646, 648, 710], "downsampl": [128, 399], "3t": [128, 399], "23": [128, 399, 486, 488, 513, 514, 521, 710, 746, 751], "57": [128, 399, 748], "upsampl": [128, 399], "asfreq": [128, 399], "price": [128, 399, 502, 748], "19": [128, 399, 486, 595, 706, 710, 744], "volum": [128, 399], "60": [128, 399, 710], "week_start": [128, 399], "7d": [128, 399], "29": [128, 197, 399, 486, 627, 629, 630, 633, 636, 710, 753], "28": [128, 399, 486, 623, 627, 629, 630, 710], "63": [128, 399, 747], "col_level": [129, 669], "col_fil": 129, "reset": [129, 287, 400, 461], "try": [129, 400, 676, 686, 702, 703], "389": 129, "80": [129, 578], "max_spe": 129, "from_tupl": [129, 267, 268, 271, 400, 710, 711], "fly": [129, 673, 676], "run": [129, 511, 512, 513, 514, 520, 521, 522, 525, 649, 650, 703, 704, 705, 708, 710, 744, 748, 753], "window": [133, 404, 692, 709, 749, 753], "center": [133, 404, 537, 565, 692, 703, 748], "win_typ": [133, 404], "baseindex": [133, 208, 211, 404, 706, 712, 713], "As": [133, 167, 404, 434, 702, 703, 706, 745, 748], "oppos": [133, 404, 710], "fix": [133, 167, 186, 191, 200, 362, 404, 434, 618, 624, 639, 706, 745, 746], "accommod": [133, 404], "get_window_bound": [133, 404], "20190101": [133, 404], "2019": [133, 247, 404], "01t09": [133, 404], "000": [133, 404, 511, 668, 673, 674, 677, 678], "math": [133, 404, 651, 748], "49": [133, 404, 748], "64": [133, 404, 706, 748], "81": [133, 404, 710, 748], "some_func": [133, 404], "sqrt": [133, 404, 748], "And": [133, 404, 748], "decim": [134, 168, 405, 435, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 673, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 747, 749, 753], "half_even": [134, 405], "half_up": [134, 405], "affect": [134, 170, 405, 702, 750], "67": [134, 405], "66": [134, 405], "subtract": [136, 153, 407, 422], "359": [136, 153, 154, 407, 422, 423], "179": [136, 153, 154, 407, 422, 423], "frac": [138, 409], "random_st": [138, 409], "reproduc": [138, 409], "ident": [138, 174, 409, 439, 461, 548, 553, 613, 681, 682, 683, 684, 708, 753], "fraction": [138, 409, 521, 717, 723, 729], "disallow": [138, 409], "state": [138, 267, 409], "uniform": [138, 409, 660], "probabl": [138, 409], "unlik": [138, 409, 679, 704, 747, 750, 753], "randomst": [138, 409], "seed": [138, 409, 710, 748], "stat": [138, 409, 692, 704, 749], "randomli": [138, 409, 710], "slow": [138, 409, 702, 747], "achiev": [138, 409, 564, 747], "especi": [138, 409, 702, 708, 747], "advis": [138, 409, 707], "826087": [139, 410], "913043": [139, 410], "043478": [139, 410], "map_index": 140, "map_siz": 140, "scatter": 140, "destin": [140, 748], "conserv": 140, "find": [141, 208, 261, 411, 489, 499, 500, 505, 544, 692, 702, 703, 704, 748], "maintain": [141, 411, 703, 710, 712], "hypothet": [141, 411], "monoton": [141, 234, 235, 261, 271, 276, 312, 345, 346, 347, 411], "wrong": [141, 411], "correct": [141, 411, 676, 748], "values_df": [141, 411], "reinterpret": [143, 246, 412], "lightweight": [143, 246, 412], "append": [144, 167, 434, 483, 548, 553, 663], "becom": [144, 744], "too": [144, 500, 702, 740, 748], "hello": [147, 415, 481, 482, 486, 490, 501, 529, 535, 536, 539, 544, 546, 551, 558, 559, 672, 676], "37037": [148, 416], "sort_remain": [149, 417], "quick": [149, 417], "builtin": [149, 417, 672, 673, 676, 677, 678, 679], "vector": [149, 294, 417, 420], "prescrib": 151, "ddof": [152, 183, 419, 449, 595, 611, 614, 656, 658], "deviat": [152, 271, 419, 611, 656, 703, 711, 745], "freedom": [152, 183, 419, 449, 595, 611, 614, 656, 658], "divisor": [152, 183, 419, 449, 611, 614, 656, 658], "290994": [152, 419], "squar": [156, 425], "249": [156, 425], "llama": 157, "cdf": 157, "unsupport": [159, 250, 427, 571, 572, 580, 581, 585, 587, 591, 592, 600, 607, 651, 747, 748], "preserve_index": 161, "save": [161, 170, 172, 665, 702, 706], "path_or_buf": [162, 167, 168, 434, 435, 675, 676], "sep": [162, 483, 526, 534, 538, 547, 673], "na_rep": [162, 483], "encod": [162, 167, 168, 325, 434, 435, 562, 563, 649, 650, 663, 675, 676, 706], "compress": [162, 167, 168, 170, 172, 434, 435, 665, 673, 676, 679, 750], "line_termin": 162, "storage_opt": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "csv": [162, 673, 692, 749, 750], "file": [162, 166, 167, 168, 170, 172, 434, 435, 505, 545, 649, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 679, 702, 705, 706, 708, 710, 746, 750], "path": [162, 166, 167, 168, 170, 172, 434, 435, 649, 665, 668, 672, 673, 674, 675, 676, 677, 678, 679, 702, 703, 704, 710, 750], "char": [162, 537, 673], "delimit": [162, 168, 435, 497, 526, 534, 542, 548, 553, 558, 559, 673, 676, 679], "utf": [162, 487, 562, 563, 676, 706], "scheme": [162, 702], "sens": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679, 706], "connect": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "port": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679, 704], "usernam": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "password": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "etc": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679, 691, 701, 702, 704, 746, 747], "url": [162, 170, 172, 548, 562, 563, 665, 672, 673, 676, 677, 678, 679], "urllib": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "s3": [162, 170, 172, 287, 513, 665, 672, 673, 676, 677, 678, 679], "gc": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "fsspec": [162, 170, 172, 665, 672, 673, 676, 677, 678, 679], "open": [162, 165, 167, 170, 172, 251, 294, 432, 434, 446, 662, 665, 666, 672, 673, 675, 676, 677, 678, 679, 704], "read_csv": [162, 710, 745], "quote_nonnumer": [162, 673], "filenam": [162, 168, 435, 665, 668, 673, 674, 677, 678, 702], "set_index": [162, 178, 240, 687, 747], "na_valu": [163, 169, 430, 437, 673], "asarrai": [163, 169, 430, 437, 744, 748], "strictli": [163, 430, 702, 706], "dlpack": [165, 251, 432, 662, 744, 750], "tensor": [165, 251, 432, 650, 662], "dmlc": [165, 251, 432, 662], "pycapsul": [165, 251, 432, 662], "pointer": [165, 251, 432, 662], "cudf_obj": [165, 251, 432], "pycapsule_obj": [165, 251, 432, 662], "encapsul": [165, 251, 432, 662, 706, 708], "feather": [166, 167, 434, 674, 692, 750], "read_feath": 166, "hdf5": [167, 434, 692], "hdfstore": [167, 434, 675, 692], "hdf": [167, 434, 675, 694, 750], "applic": [167, 434, 595, 692, 706, 708], "hold": [167, 228, 229, 230, 231, 232, 236, 237, 434], "relat": [167, 434, 692, 750], "individu": [167, 221, 434, 470, 486, 488, 706, 751], "r": [167, 420, 434, 486, 494, 499, 522, 535, 560, 564, 675], "delet": [167, 434], "read": [167, 434, 668, 672, 673, 674, 675, 676, 677, 678, 679, 706, 710, 746, 750], "alreadi": [167, 434, 461, 535, 706, 744, 745], "fast": [167, 434, 676, 706, 710, 745, 753], "searchabl": [167, 434], "pytabl": [167, 434, 692], "wors": [167, 434], "data_column": [167, 434], "disk": [167, 434, 673, 676, 746], "complevel": [167, 434], "disabl": [167, 434, 673, 750], "complib": [167, 434], "zlib": [167, 434], "lzo": [167, 434], "bzip2": [167, 434], "blosc": [167, 434], "v0": [167, 434], "compressor": [167, 434], "blosclz": [167, 434], "lz4": [167, 434], "lz4hc": [167, 434], "snappi": [167, 170, 172, 434, 665, 750], "zstd": [167, 170, 172, 434, 750], "issu": [167, 434, 702, 745, 748], "fletcher32": [167, 434], "checksum": [167, 434], "written": [167, 170, 172, 434, 665, 702, 704, 708, 748], "strict": [167, 434, 675, 681, 682, 683, 684, 685], "decod": [167, 434, 562, 675, 676], "read_hdf": [167, 434], "to_parquet": [167, 434, 678, 710, 746, 750], "parquet": [167, 172, 434, 677, 678, 692, 745, 749, 750], "to_feath": [167, 434, 674], "json": [168, 435, 502, 676, 692, 702, 750], "unix": [168, 435, 685], "orient": [168, 435, 676], "just": [168, 435, 552, 676, 702, 706, 744, 746, 748], "schema": [168, 435, 668, 676, 678], "compon": [168, 435, 501, 702, 704, 706], "date_format": [168, 435, 641], "epoch": [168, 435, 685], "iso": [168, 194, 435, 633], "convers": [168, 435, 438, 692, 706, 744], "iso8601": [168, 435], "double_precis": [168, 435], "force_ascii": [168, 435], "ascii": [168, 435, 482, 535, 556, 557, 561, 563], "date_unit": [168, 435, 676], "govern": [168, 435], "precis": [168, 435, 660, 676, 708, 717, 718, 723, 724, 729, 730, 746, 753], "microsecond": [168, 435, 452, 456, 644, 647, 648, 676], "default_handl": [168, 435], "handler": [168, 435, 672, 673, 676, 677, 678, 679], "receiv": [168, 435, 686], "incorrect": [168, 435], "gzip": [168, 435, 673, 676], "bz2": [168, 435, 676], "xz": [168, 435, 676], "read_json": [168, 435], "fname": [170, 668], "rowgroup": [170, 172, 665], "stripe_size_byt": 170, "stripe_size_row": 170, "row_index_strid": 170, "cols_as_map_typ": 170, "orc": [170, 677, 692, 749, 750], "stripe": [170, 172, 677], "granular": 170, "67108864": 170, "64mb": 170, "10000": [170, 744], "listdtyp": [170, 471, 492, 676, 706, 746], "much": [170, 172, 702, 703, 706, 710], "faster": [170, 172, 470, 677, 685, 702, 748], "read_orc": [170, 678, 710, 750], "nullabl": [171, 184, 438, 450, 702, 706, 711, 746, 753], "engin": [172, 488, 489, 494, 500, 532, 672, 676, 677, 678, 709], "partition_col": [172, 665], "partition_file_nam": 172, "partition_offset": 172, "metadata_file_path": 172, "int96_timestamp": 172, "row_group_size_byt": 172, "134217728": 172, "row_group_size_row": 172, "max_page_size_byt": 172, "max_page_size_row": 172, "return_metadata": [172, 666], "root": [172, 665, 703], "directori": [172, 665, 678, 702, 705, 708, 710], "uuid4": 172, "hex": [172, 503, 504, 517, 562, 563], "page": [172, 665, 692, 705, 709, 750, 753], "blob": [172, 666], "footer": [172, 666], "file_path": [172, 710], "int96": 172, "julian": 172, "midnight": 172, "1970": [172, 185], "128": [172, 706], "uncompress": [172, 679], "524288": 172, "512kb": 172, "20000": 172, "rel": [172, 446, 681, 682, 683, 684, 702], "root_path": 172, "read_parquet": [172, 668, 710, 746, 750], "intern": [174, 185, 208, 439, 451, 673, 681, 682, 683, 684, 702, 703, 705, 706, 707, 708, 750], "transpar": [174, 439], "dure": [174, 439, 548, 553, 686, 703, 708], "n0": [174, 439], "n1": [174, 439], "n2": [174, 439], "struct": [175, 676, 692, 706, 709, 740, 742, 743, 747, 749, 750, 753], "compos": [175, 679, 703, 706, 708, 746, 748], "innermost": [178, 476, 677, 678, 687], "filter_func": 179, "There": [179, 199, 318, 638, 703, 708, 744, 750, 753], "coercibl": [179, 444], "notimplementederror": [179, 488, 538, 541, 547, 564, 703, 706], "proport": 180, "frequent": [180, 446, 706], "occur": [180, 446, 488, 703, 710], "ant": [180, 531, 549, 555], "varianc": [183, 449, 595, 614, 658], "falsi": [184, 450, 711], "treatment": [184, 450, 711], "gsr": [184, 450, 711, 746], "tz": 185, "dayfirst": [185, 673, 685], "yearfirst": [185, 685], "immut": [185, 206, 258, 259, 276, 451, 460], "sliceabl": [185, 206, 258, 451, 460], "pytz": 185, "timezon": 185, "dateutil": [185, 685], "tzfile": 185, "pars": [185, 673, 676, 685, 686, 710, 744], "year": [185, 188, 190, 193, 194, 199, 247, 620, 622, 626, 631, 632, 633, 638, 685, 748], "000000001": [185, 198, 637], "000000002": [185, 198, 637], "000000003": 185, "000000004": 185, "l": [186, 191, 200, 486, 496, 618, 624, 639, 704], "me": [186, 191, 200, 497, 542, 618, 624, 639], "alias": [186, 191, 200, 618, 624, 639, 702], "gindex": [186, 191, 194, 199], "2020": [186, 191, 194, 199, 638], "1999": [186, 191, 194, 199, 638], "41": [186, 488], "datetime_index": [187, 188, 189, 190, 192, 195, 196, 197, 198, 201, 204, 205], "int16index": [187, 188, 189, 190, 192, 196, 197, 198, 201, 204, 205, 683], "int16": [187, 188, 189, 190, 192, 196, 197, 198, 201, 204, 205, 319, 619, 620, 621, 622, 623, 625, 635, 636, 637, 640, 642, 643, 686, 746, 750], "365": [188, 190, 193, 620, 622, 626], "leap": [188, 190, 193, 620, 622, 626], "366": [188, 190, 193, 620, 622, 626], "2016": [188, 189, 190, 204, 620, 621, 622, 642, 685], "2017": [188, 189, 190, 204, 620, 621, 622, 631, 632, 642, 685], "week": [189, 194, 204, 621, 633, 642], "mondai": [189, 204, 621, 642], "sundai": [189, 204, 621, 642], "59": [191, 668, 673, 674, 677, 678, 748], "belong": [193, 199, 312, 626, 638, 702], "29th": [193, 626], "februari": [193, 626], "intercalari": [193, 626], "four": [193, 626, 702, 750], "400": [193, 210, 626, 744], "datafram": [194, 202, 208, 240, 249, 251, 252, 262, 263, 264, 265, 267, 268, 269, 272, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 289, 290, 297, 298, 302, 303, 304, 305, 307, 313, 314, 315, 316, 318, 321, 322, 323, 327, 328, 329, 334, 335, 336, 338, 339, 342, 344, 350, 351, 355, 356, 357, 358, 360, 361, 363, 364, 365, 368, 369, 371, 372, 374, 376, 378, 379, 387, 388, 389, 390, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 437, 439, 442, 446, 447, 448, 449, 450, 452, 458, 461, 494, 500, 538, 547, 548, 553, 566, 570, 578, 579, 581, 582, 583, 584, 587, 589, 590, 593, 595, 601, 602, 603, 604, 605, 608, 609, 612, 613, 615, 616, 633, 644, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 687, 691, 692, 693, 701, 702, 704, 705, 706, 708, 709, 710, 711, 745, 746, 747, 749, 750, 751, 753], "accord": [194, 362, 633, 659, 702, 706], "8601": [194, 633], "52": 194, "000001": [195, 634], "000002": [195, 634], "int32index": [195, 683], "januari": [197, 199, 636, 638], "decemb": [197, 199, 636, 638], "march": [199, 638], "april": [199, 638], "june": [199, 638], "third": [199, 265, 638], "juli": [199, 638], "septemb": [199, 638], "fourth": [199, 638], "octob": [199, 638], "int8index": [199, 683], "int8": [199, 325, 638, 686, 746, 750], "dt_idx": 200, "58": [200, 618, 624, 639, 748], "2002": [205, 626, 643], "basic": [206, 208, 258, 288, 460, 570, 589, 615, 710, 747, 748], "pure": [206, 258, 460, 703, 706], "__init__": [207, 259, 704], "tupleize_col": 208, "best": [208, 271, 534, 650, 702, 703, 705, 708, 710, 711, 753], "fit": [208, 377, 380, 710], "design": [208, 263, 702, 703, 705, 709, 745], "factori": [208, 706], "re": [208, 488, 489, 494, 500, 532, 541, 551, 651, 710, 744, 748], "intim": 208, "familiar": [208, 702, 704, 705, 706, 709], "uint64": [208, 460, 746, 750], "uint64index": 208, "has_dupl": 208, "from_arrow": [208, 717, 723, 729, 735, 740, 753], "get_loc": [208, 711], "collect": [210, 362, 479, 704, 708, 710, 747, 753], "incompar": 215, "caught": 215, "catch": [215, 703], "idx1": [215, 227, 255], "idx2": [215, 227, 255], "nulls_are_equ": 216, "obj": [219, 461, 681, 682, 683, 684, 735, 737], "pdi": 220, "primarili": [221, 702], "stringindex": [221, 250, 325, 330, 354, 488, 538, 547, 710, 712, 713], "bound": [223, 260, 294, 474, 748], "leftmost": 223, "past": [223, 679, 748], "rightmost": [223, 660], "ix": 223, "getitem": 223, "red": [227, 255, 263, 269], "blue": [227, 255, 263, 269], "is_integ": [228, 229, 230, 232, 236, 237], "is_float": [228, 229, 231, 232, 236, 237], "is_numer": [228, 229, 230, 231, 232, 237], "is_object": [228, 229, 230, 231, 232, 236], "is_categor": [228, 230, 231, 232, 236, 237], "is_interv": [228, 229, 230, 231, 236, 237], "categoricalindex": [229, 296, 660, 692], "is_boolean": [229, 230, 231, 232, 236, 237], "watermelon": [229, 231, 237], "orang": [229, 237], "appl": [229, 231, 236, 237, 686], "peter": 229, "victor": 229, "elisabeth": 229, "mar": 229, "mango": [231, 237], "intervalindex": [232, 660, 692], "monotonic_increas": 233, "is_monotonic_increas": [233, 345], "decreas": [234, 346, 377, 708], "cold": 236, "sought": 238, "is_contain": 238, "detect": [239, 243, 673, 676, 702, 749], "return_index": [240, 249], "join_index": 240, "lexicograph": [240, 271, 711], "lh": 240, "rh": 240, "renamed_index": 244, "abl": [247, 744, 745], "partial": [247, 748], "renam": [247, 470], "quarter": [247, 629, 630], "cobra": 247, "frozenlist": 247, "itself": [249, 538, 547, 706], "sorted_index": 249, "1000": [249, 565, 706, 744, 748, 753], "allow_fil": 250, "green": [255, 268], "break": [260, 703], "pad": [261, 535, 548, 553, 565, 581, 650, 692, 706], "backfil": [261, 581], "distanc": [261, 491, 492], "broken": 261, "prefer": [261, 677, 678, 685, 702, 703, 708], "larger": [261, 509, 510, 650, 673, 677, 710, 750], "inexact": 261, "satisfi": [261, 702], "equat": 261, "unique_index": 261, "monotonic_index": 261, "abbc": 261, "non_monotonic_index": 261, "abcb": 261, "numeric_unique_index": 261, "sortord": 263, "from_fram": [264, 265, 268, 269, 272, 710], "cartesian": [267, 268, 269, 702, 708], "hi": [267, 710], "precip": 267, "nj": 267, "explicit": [267, 276, 748], "explicitli": [268, 651, 673, 704, 710, 744, 751, 753], "color": [268, 269], "purpl": 268, "effort": [271, 711], "fail": [271, 704, 750], "situat": [271, 590, 711, 753], "mi": 271, "non_monotonic_non_unique_idx": 271, "coerc": [271, 685, 686, 711, 744, 753], "unus": [276, 462, 470], "homogen": 276, "hashabl": 277, "been": [277, 706, 745, 750], "overridden": 277, "1d": [277, 332, 627, 629, 630, 651, 662, 706], "overrid": [277, 706], "extensiondtyp": [277, 735, 736, 753], "iteritem": 277, "to_list": 277, "tolist": 277, "to_append": 287, "convert_dtyp": 288, "cach": [288, 685], "recompil": 288, "incur": [288, 703], "overhead": [288, 702], "nest": [288, 472, 476, 708, 735, 740, 749], "decor": 288, "someth": [288, 538, 704, 708, 710, 748], "upcast": 288, "deriv": [288, 362], "lag": 291, "autocorrel": 291, "1438853844": 291, "9647548490": 291, "csf1": 292, "inclus": [294, 496, 660], "wherev": [294, 706], "gt": [294, 710, 748, 751], "lt": [294, 710, 748, 751], "alic": [294, 748], "bob": [294, 748], "carol": 294, "ev": 294, "anna": 294, "daniel": 294, "accessor": [296, 319, 692, 745], "Be": 296, "parent": [296, 706, 708, 710], "reorder_categori": 296, "remove_categori": 296, "set_categori": 296, "abcd": [296, 485, 552], "as_ord": [296, 464], "as_unord": 296, "ser1": [299, 301], "62": [299, 301], "ser2": [299, 301], "51": [299, 301], "20454263717316112": 299, "015750000000000004": 301, "uint8": [306, 663, 686, 710, 740, 750], "3rd": 311, "ind": [312, 429, 673], "beetl": [317, 349], "hippo": [317, 349], "discard": [317, 673], "kept": [318, 380, 702, 703, 708], "datetimelik": [319, 692], "1h": 319, "hour": [319, 452, 644], "na_sentinel": 325, "chunkedarrai": 330, "singlecolumnfram": [330, 706], "pd_categor": 331, "set_mask": 332, "skip": [332, 672, 673, 677, 686], "mark": [332, 703], "bit": [332, 679, 706], "_column": 332, "seriesgroupbi": [335, 691], "turn": [349, 679, 706], "therefor": [349, 470, 565, 702, 703, 706], "width": [362, 484, 529, 537, 546, 564, 565, 660, 706], "rabbit": [362, 500], "kitten": [362, 491], "puppi": [362, 491], "countries_popul": [377, 380], "montserrat": [377, 380], "5200": [377, 380], "quant_index": 391, "renamed_seri": 396, "numeric_seri": 396, "come": [400, 703, 704, 708], "bar": [400, 659, 704, 708], "baz": [400, 541, 704], "mimic": [420, 704], "interfac": [420, 706, 744, 748], "stai": 420, "pattern": [420, 488, 489, 493, 494, 499, 500, 528, 541, 548, 553, 554, 706], "inspir": 420, "stringr": [420, 564], "packag": [420, 702, 703, 710, 744, 745, 748, 751], "lib": [429, 710, 751], "stringarrai": 429, "0x7f796b0e7600": 429, "0x7f796b0e7750": 429, "half": 446, "divid": [446, 702], "500000": [446, 593, 595], "166667": 446, "996": [446, 744], "1132223": 451, "2023232": 451, "342234324": 451, "4234324": 451, "001132223": 451, "002023232": 451, "004234324": 451, "clear": [461, 706], "df1": [461, 665, 682, 710, 751], "letter": [461, 524, 557, 563], "df3": 461, "horizont": 461, "df4": 461, "polli": 461, "georg": [461, 538, 547, 748], "new_categori": [462, 469, 470], "seriesorindex": [462, 463, 464, 468, 469, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565], "genericindex": [465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 488, 706], "relationship": [467, 595, 706, 712, 715], "old": [468, 469, 470, 703], "reorder": [469, 470], "action": 470, "simultan": 470, "specialis": 470, "hand": [470, 708], "surpris": 470, "leaf": [471, 735, 738], "search_kei": [473, 475], "extract": [474, 501, 543, 551, 567, 692], "indexerror": 474, "possibli": [476, 708], "flat": 476, "criterion": 478, "lists_indic": 479, "ef": [481, 485], "bye": [481, 710], "thank": [481, 486, 748], "sentenc": [482, 530, 548, 553, 556, 557, 560, 561], "swapcas": [482, 530, 557, 560, 561, 692], "friend": 482, "goodby": [482, 486, 558, 559], "stringcolumn": [483, 706], "again": [483, 748], "aa": [483, 540], "bb": [483, 528, 540], "dd": [483, 673], "fillchar": [484, 529, 537, 546], "whitespac": [484, 497, 511, 512, 513, 514, 516, 518, 520, 521, 522, 525, 529, 531, 535, 536, 537, 538, 542, 546, 547, 548, 549, 553, 555, 558, 559, 673], "as_list": 485, "gram": [485, 533, 534], "bigram": [485, 533], "ngram": [485, 534, 692], "str_seri": [485, 533, 650], "efgh": 485, "xyz": [485, 487, 533], "bc": [485, 492], "cd": 485, "fg": 485, "gh": 485, "xy": 485, "yz": 485, "bcd": 485, "efg": 485, "fgh": 485, "world": [486, 490, 501, 529, 535, 536, 544, 546, 558, 559, 676], "k": [486, 526, 581, 676, 711], "\u00e9ee": 487, "97": 487, "121": 487, "122": [487, 744], "50089": 487, "101": [487, 650, 710], "98": 487, "99": [487, 502, 535], "pat": [488, 489, 493, 494, 500, 528, 532, 541, 543, 548, 553, 554], "flag": [488, 489, 494, 500, 532, 541, 744], "regular": [488, 489, 493, 494, 500, 532, 541, 548, 553, 554, 704, 749], "multilin": [488, 489, 494, 500, 532], "liter": [488, 489, 528, 541, 548, 553, 676], "anyth": [488, 538, 541, 547], "dotal": [488, 489, 494, 500, 532], "mous": 488, "hous": 488, "og": 488, "digit": [488, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 525, 563, 702, 717, 720, 723, 726, 729, 732, 746], "might": [488, 744, 748], "35": [488, 644, 645, 646, 648, 668, 673, 674, 677, 678, 744], "escap": [489, 528], "aaba": [489, 710], "baca": [489, 710], "caba": [489, 710], "dollar": 489, "sign": [489, 565, 686, 746], "aab": 489, "ca": 489, "token": [490, 497, 533, 534, 535, 536, 542, 558, 649, 650, 692], "measur": [491, 492, 539, 595, 702, 708], "levenshtein": [491, 492], "edit": [491, 492], "www": 491, "cuelog": 491, "com": [491, 562, 563], "blog": 491, "doggi": 491, "kitti": 491, "pup": 491, "dogi": 491, "tell": 492, "symmetr": 492, "diagon": [492, 744], "cba": 492, "nativ": [493, 703], "bat": [493, 554], "bear": [493, 554], "captur": [494, 702], "subject": [494, 748], "c3": 494, "repl": [495, 496, 506, 541, 543, 552], "alphanumer": [495, 511, 512, 513, 514, 516, 518, 520, 521, 522, 525], "pear": 495, "plum": 495, "72": [495, 710], "100k": 495, "unicod": [496, 514, 521, 535, 560], "ordin": [496, 560], "maketran": [496, 560], "helper": [496, 560, 706, 708, 744], "caus": 496, "undefin": [496, 650, 748], "aeiou": 496, "0123456789": [496, 506], "aei": 496, "ou": 496, "456": [496, 519, 668, 673, 674, 677, 678], "_": [496, 497, 506, 526, 528, 529, 533, 534, 542, 546, 563, 663], "___ou": 496, "aei__": 496, "0123___789": 496, "min_token_length": 497, "theme": [497, 542, 704], "music": [497, 542], "substr": [498, 505, 544, 545, 550, 551], "fulli": [498, 505, 544, 545, 710, 746, 748], "failur": [498, 544], "ddb": [498, 505, 545], "inn": 499, "sea": 499, "word": [500, 524, 530, 556, 561, 649, 650, 708], "json_path": 502, "allow_single_quot": 502, "strip_quotes_from_single_str": 502, "missing_fields_as_nul": 502, "jsonpath": 502, "quot": [502, 673, 676], "doubl": [502, 676], "strip": [502, 531, 549, 679, 692], "book": [502, 533, 534, 650], "author": 502, "nigel": 502, "ree": 502, "titl": [502, 524, 530, 556, 561, 692], "centuri": 502, "95": 502, "evelyn": 502, "waugh": 502, "sword": 502, "honour": 502, "1234": [503, 504], "abcdef": [503, 504], "1a2": [503, 504], "cafe": [503, 504], "htoi": [503, 692], "4660": [503, 504], "11259375": [503, 504], "418": [503, 504], "51966": [503, 504], "traceback": [505, 545], "recent": [505, 545], "stdin": [505, 545], "modul": [505, 545, 692, 702, 703, 707, 708, 710, 753], "abb": [505, 545], "abcdefghij": 506, "ab_cdefghij": 506, "01_23456789": 506, "abcdefghij_": 506, "0123456789_": 506, "ip": [507, 508, 704], "168": [507, 508], "212336897": [507, 508], "167772161": [507, 508], "ip2int": [508, 692], "conson": [509, 510], "troubl": [509, 510, 706], "vowel": 510, "isalpha": [511, 513, 514, 516, 518, 520, 521, 522, 525, 692, 748], "isdigit": [511, 512, 513, 516, 517, 518, 520, 521, 522, 525, 692, 748], "isnumer": [511, 512, 513, 514, 516, 517, 518, 520, 522, 525, 692], "isdecim": [511, 512, 514, 516, 517, 518, 520, 521, 522, 525, 692, 748], "alphabet": [511, 512, 513, 514, 516, 518, 520, 521, 522, 525], "isinteg": [511, 512, 513, 514, 516, 520, 521, 522, 525, 692], "isfloat": [511, 512, 513, 514, 517, 518, 520, 521, 522, 525, 692], "islow": [511, 512, 513, 514, 516, 518, 521, 522, 525, 692, 748], "lowercas": [511, 512, 513, 514, 516, 518, 520, 521, 522, 524, 525, 530, 556, 557, 561, 649], "isspac": [511, 512, 513, 514, 516, 518, 520, 521, 525, 692, 748], "isupp": [511, 512, 513, 514, 516, 518, 520, 521, 522, 692, 748], "uppercas": [511, 512, 513, 514, 516, 518, 520, 521, 522, 524, 525, 530, 556, 557, 561], "one1": [511, 512, 521], "punctuat": [511, 535], "isalnum": [512, 513, 514, 516, 518, 520, 521, 522, 525, 692, 748], "\u00b3": [513, 514, 521], "\u2155": [513, 514, 521], "superscript": 514, "subscript": 514, "123213": 516, "123": [516, 519, 531, 538, 547, 555, 644, 645, 646, 647, 648, 668, 673, 674, 677, 678], "0001": 516, "234": [516, 644, 645, 646, 647, 648, 746], "plain": 516, "text": [516, 518, 649, 650, 668, 672, 673, 674, 677, 678, 679, 692, 707], "123def": 517, "0x2d3": 517, "plan": [518, 703, 748], "ipv4": 519, "address": [519, 704, 706], "127": 519, "255": 519, "leopard": [520, 524, 525], "golden": [520, 524, 525], "eagl": [520, 524, 525], "snake": [520, 524, 525], "quantiti": 521, "20201101": 523, "192011": 523, "18200111": 523, "2120": 523, "string_na_rep": 526, "sep_na_rep": 526, "themselv": [526, 704, 740], "interven": 526, "suppli": [526, 663, 748], "ghi": [526, 673, 746], "a_b_c": 526, "d_e_f": 526, "g_h_i": 526, "a_b_k": 526, "c_d": 526, "esc": 528, "ddbc": 528, "b_": 528, "wildcard": [528, 706, 710], "ai_": 529, "__": [529, 546], "capit": [530, 556, 557, 560, 561, 692], "to_strip": [531, 549, 555], "trail": [531, 549, 555, 679, 717, 723, 729], "newlin": [531, 549, 555, 703], "rstrip": [531, 555, 692], "ac": 532, "my": 533, "favorit": 533, "my_favorit": 533, "hhh": 533, "abc_def": 533, "def_xyz": 533, "xyz_hhh": 533, "white": 534, "this_i": 534, "is_th": 534, "best_book": 534, "do_low": [535, 649], "subword_token": 535, "around": [535, 538, 548, 553, 703, 706, 748], "p": 535, "symbol": 535, "cjk": 535, "cc": [535, 540], "cf": 535, "do_lower_cas": [535, 649, 650], "accent": 535, "h\u00e9llo": 535, "tworld": 535, "\u0103\u0107c\u0117\u00f1ted": 535, "up": [537, 548, 553, 618, 624, 685, 702, 703, 707, 710, 748, 753], "rjust": [537, 565, 692], "ljust": [537, 565, 692], "zfill": [537, 692], "prepend": [537, 565], "carib": 537, "tiger": 537, "rpartit": [538, 692], "linda": [538, 547], "van": [538, 547], "der": [538, 547], "berg": [538, 547], "pitt": [538, 547], "river": [538, 547], "999": [538, 547, 710, 744], "porter": 539, "stemmer": 539, "super": 539, "ccc": 540, "fuz": 541, "ba": 541, "bao": 541, "insid": [542, 651, 673, 679, 704, 747, 748], "back": [543, 673, 677, 678, 706, 710, 750, 753], "ref": [543, 570, 589, 615], "templat": 543, "section": [543, 552, 702, 703, 704, 705, 708, 710, 747, 748, 751, 753], "a543": 543, "z756": 543, "av453": 543, "zv576": 543, "rfind": [545, 692, 748], "_________hello": 546, "___________rapid": 546, "version": [548, 553, 691, 703, 710, 744, 751], "tutori": [548, 710], "throughout": [548, 553], "slightli": [548, 673, 677, 678, 691, 702], "complex": [548, 651, 704, 706, 748], "lstrip": [549, 555, 692], "slice_replac": [550, 692], "koala": 550, "fox": 550, "chameleon": 550, "oala": 550, "ox": 550, "hameleon": 550, "ko": 550, "fo": 550, "ch": 550, "kaa": 550, "fx": 550, "caeen": 550, "kl": 550, "cm": 550, "ello": 551, "abdc": 552, "until": [552, 710], "xc": 552, "xdc": 552, "xcde": 552, "axc": 552, "axd": 552, "rsplit": [553, 692], "endswith": [554, 692, 748], "unmap": 560, "untouch": 560, "swapc1s": 560, "low": [560, 748], "nt": 560, "nc": 560, "swapc1": 560, "No": [562, 563, 650, 660, 706, 749], "2fb": [562, 563], "2fd": [562, 563], "20f": [562, 563], "2c6": [562, 563], "3a": [562, 563], "2f": [562, 563], "2frapid": [562, 563], "2fstart": [562, 563], "2fmedium": [562, 563], "medium": [562, 563, 660], "paragraph": 564, "expand_tabsbool": 564, "replace_whitespac": 564, "drop_whitespac": 564, "break_long_word": 564, "break_on_hyphen": 564, "str_wrap": 564, "expand_tab": 564, "nwrap": 564, "nto": 564, "reach": [565, 706, 708], "longer": [565, 704, 705], "001": 565, "children": [567, 706], "agg": [570, 613, 615, 710, 745, 747], "f1": [570, 589, 615], "quantil": [570, 589, 615, 711, 747], "__name__": [570, 589, 615], "q0": [570, 589, 615], "f2": [570, 589, 615], "score": 578, "90": [578, 710], "hole": 581, "gap": [581, 706], "introduc": [587, 703], "indetermin": 587, "mult": 590, "redund": [590, 711], "pairwis": [593, 595], "kendal": 593, "val1": [593, 595], "val2": [593, 595], "val3": [593, 595], "385727": 593, "714575": 593, "bia": 595, "comparison": [595, 702, 703, 708, 709, 749, 751], "understand": 595, "member": [595, 703], "invert": 595, "matric": [595, 744], "en": [595, 651], "wikipedia": 595, "wiki": 595, "estimation_of_covariance_matric": 595, "833333": 595, "enum": 605, "complement": [605, 752], "cumcount": 605, "seen": 605, "aaabba": 605, "round": [618, 624], "dt": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 697, 710, 745], "datetime_seri": [619, 620, 621, 622, 625, 634, 635, 636, 637, 640, 642, 643, 751], "2013": 626, "1y": 626, "2003": [626, 748], "2005": [626, 745], "2007": 626, "2008": 626, "2009": [626, 633], "2011": 626, "2012": [626, 685, 751], "2021": 633, "serindex": 633, "to_datetim": 633, "53": [633, 744], "000000000": [637, 685], "dt_sr": 639, "weekday_seri": 641, "12231312123": [644, 645, 646, 647, 648], "1231231231": [644, 645, 646, 647, 648], "1123236768712": [644, 645, 646, 647, 648], "2135656": [644, 645, 646, 647, 648], "3244334234": [644, 645, 646, 647, 648], "141": [644, 645, 646, 648], "231": [644, 645, 646, 647, 648], "13000": [644, 645, 646, 648], "48": [644, 645, 646, 648, 679, 753], "712": [644, 645, 646, 647, 648], "656": [644, 645, 646, 647, 648], "37": [644, 645, 646, 648, 751], "123000": [646, 648], "231000": [646, 648], "712000": [646, 648], "656000": [646, 648], "234000": [646, 648], "231312123": 647, "231231231": 647, "236768712": 647, "002135656": 647, "244334234": 647, "48912": 648, "21631": 648, "36768": 648, "2135": 648, "47534": 648, "hash_fil": 649, "bert": [649, 650], "subword": [649, 650], "vocabulari": [649, 650], "pretrain": [649, 650], "21x": 649, "util": [649, 650, 692, 709, 710], "hash_vocab_util": [649, 650], "hash_vocab": [649, 650], "max_length": 650, "max_num_row": 650, "add_special_token": 650, "return_tensor": 650, "return_token_type_id": 650, "batch": 650, "alloc": [650, 673, 677, 678, 706, 708, 748], "temporari": 650, "twice": [650, 702], "classif": 650, "model": [650, 706, 710], "do_not_trunc": 650, "huggingfac": 650, "pt": 650, "tf": 650, "tensorflow": 650, "pytorch": 650, "torch": 650, "input_id": 650, "fed": 650, "attention_mask": 650, "attend": 650, "vocab": 650, "txt": 650, "voc_hash": 650, "cudf_token": 650, "tokenizer_output": 650, "1142": 650, "1110": 650, "1103": 650, "102": [650, 710], "1436": 650, "1520": 650, "featur": [651, 702, 703, 704, 752], "readthedoc": 651, "cudapysupport": 651, "cmath": 651, "libcudf": [651, 705, 706], "ptx": 651, "sin": 651, "co": 651, "tan": 651, "lgamma": 651, "global": [651, 752], "known": [651, 685], "count_if_gt_3": 651, "rownam": 659, "colnam": 659, "cross": 659, "tabul": 659, "factor": 659, "dull": 659, "shini": 659, "retbin": 660, "include_lowest": 660, "segment": 660, "go": [660, 702, 704, 706, 709, 744, 748], "continu": [660, 679, 744], "criteria": [660, 675], "extens": [660, 673], "done": [660, 710], "994": [660, 744], "bad": 660, "unspecifi": 661, "fortran": [662, 744], "prefix_sep": 663, "dummy_na": 663, "spars": [663, 749], "drop_first": 663, "hot": 663, "dummi": 663, "value1": 663, "value2": 663, "a_value1": 663, "a_value2": 663, "a_non": 663, "a_1": 663, "a_2": 663, "a_nan": 663, "a_nul": 663, "max_file_s": 665, "file_name_prefix": 665, "exceed": 665, "writer": [665, 694, 702, 710, 750], "gb": 665, "mandatori": 665, "context": 665, "cw": 665, "write_t": 665, "manual": [665, 704], "num_row": [668, 672, 677, 702], "num_row_group": 668, "row_group": [668, 678], "num1": [668, 673, 674, 677, 678], "13t12": [668, 673, 674, 677, 678], "5451": [668, 673, 674, 677, 678], "14t12": [668, 673, 674, 677, 678], "5784": [668, 673, 674, 677, 678], "789": [668, 673, 674, 677, 678], "15t18": [668, 673, 674, 677, 678], "6117": [668, 673, 674, 677, 678], "myvarnam": 669, "myvalnam": 669, "filepath_or_buff": [672, 673, 677, 678, 679], "skiprow": [672, 673, 677], "load": [672, 673, 674, 676, 677, 678, 709, 710], "avro": [672, 692, 750], "pathlib": [672, 673, 675, 676, 677, 678, 679, 710], "py": [672, 673, 675, 676, 677, 678, 679, 702, 708, 710, 751], "_path": [672, 673, 675, 676, 677, 678, 679], "localpath": [672, 673, 675, 676, 677, 678, 679], "ftp": [672, 673, 676, 677, 678, 679], "bytesio": [672, 677, 678], "parser": [672, 676, 677, 678], "remot": [672, 673, 677, 678, 704], "pandavro": 672, "pandas_df": 672, "to_avro": 672, "index_col": 673, "usecol": 673, "mangle_dupe_col": 673, "true_valu": 673, "false_valu": 673, "skipinitialspac": 673, "skipfoot": 673, "keep_default_na": 673, "na_filt": 673, "skip_blank_lin": 673, "parse_d": 673, "thousand": [673, 744], "linetermin": 673, "quotechar": 673, "doublequot": 673, "comment": [673, 704], "delim_whitespac": 673, "byte_rang": [673, 676, 679], "use_python_file_object": [673, 677, 678], "bytes_per_thread": [673, 677, 678], "comma": 673, "seper": 673, "recogn": 673, "qnan": 673, "unusu": 673, "mm": 673, "european": 673, "decompress": [673, 676, 750], "gz": [673, 676], "quote_minim": 673, "quote_al": 673, "quote_non": 673, "altogeth": [673, 706], "arrow": [673, 677, 678, 706, 709, 749], "pythonfil": [673, 677, 678], "abstractbufferedfil": [673, 677, 678], "throughput": [673, 677, 678], "decompos": [673, 677, 678, 708], "transfer": [673, 677, 678, 750], "pool": [673, 677, 678], "268435456": [673, 677, 678], "to_csv": [673, 710, 750], "fp": 673, "__fspath__": 675, "protocol": 675, "term": [675, 676, 702, 748, 753], "to_hdf": 675, "auto": [676, 704], "keep_quot": 676, "cudf_experiment": 676, "to_json": 676, "typ": [676, 717, 718, 723, 724, 729, 730, 735, 737, 740, 742], "recov": 676, "convert_ax": 676, "proper": 676, "convert_d": 676, "datelik": 676, "_at": 676, "_time": 676, "keep_default_d": 676, "precise_float": 676, "strtod": 676, "py3": 676, "jsonread": 676, "wrap": [676, 692, 703, 710, 748], "json_str": 676, "v1": 676, "v2": 676, "k1": 676, "use_index": 677, "timestamp_typ": 677, "predic": [677, 678, 708], "disjunct": [677, 678], "dnf": [677, 678], "conjunct": [677, 678, 703, 748], "AND": [677, 678], "outermost": 677, "OR": [677, 678], "notat": [677, 678], "seek": 677, "to_orc": [677, 750], "strings_to_categor": 678, "use_pandas_metadata": 678, "categorical_partit": 678, "open_file_opt": 678, "gdf_categori": 678, "gdf_string": 678, "discourag": 678, "open_parquet_fil": 678, "deactiv": 678, "precach": 678, "precache_opt": 678, "open_file_func": 678, "read_parquet_metadata": 678, "strip_delimit": 679, "compression_offset": 679, "datasourc": 679, "bgzip": 679, "virtual": 679, "baseexcept": 680, "check_dtyp": [681, 682, 684], "check_column_typ": [681, 682], "equiv": [681, 682, 683, 684], "check_less_precis": [681, 683, 684], "check_exact": [681, 682, 683, 684], "check_datetimelike_compat": [681, 682, 684], "check_categor": [681, 682, 683, 684], "check_category_ord": [681, 684], "rtol": [681, 682, 683, 684], "1e": [681, 682, 683, 684], "atol": [681, 682, 683, 684], "columnbas": [681, 682, 683, 684, 706], "intend": [681, 682, 683, 684, 706, 748], "inferred_typ": [681, 682, 683, 684], "idl": [681, 682, 684], "check_datetime_like_compat": [681, 682, 684], "appropri": [681, 682, 683, 684, 704, 706], "assert": [681, 682, 683, 684, 708], "messag": [681, 682, 683, 684, 703], "check_index_typ": [682, 684], "check_frame_typ": 682, "check_nam": [682, 683, 684], "by_block": 682, "check_lik": 682, "assertionerror": [682, 683, 684], "hitch": [682, 683, 684], "check_ord": 683, "id1": 683, "id2": 683, "check_series_typ": 684, "sr1": 684, "sr2": 684, "utc": 685, "infer_datetime_format": 685, "eg": 685, "bug": [685, 703], "strftime": 685, "denot": 685, "off": [685, 704, 710, 750], "10x": 685, "succeed": 685, "assembl": 685, "abbrevi": 685, "plural": 685, "2015": 685, "1490195805": 685, "22t15": 685, "1490195805433502912": 685, "1780": 685, "20t01": 685, "494253056": 685, "polici": [686, 703], "notifi": 686, "encount": [686, 703], "unsign": [686, 746], "down": [686, 702], "datatyp": 686, "decoupl": 686, "3e3": 686, "3000": 686, "cudf": [691, 692, 701, 703, 705, 706, 707, 711, 746, 747, 749, 750, 752], "usual": [691, 702], "permit": 691, "restrict": 691, "publicli": 692, "namespac": [692, 697, 704], "merg": [692, 702, 706, 708, 710, 745, 753], "timedeltaindex": 692, "deal": 692, "roll": [692, 706, 745, 749], "subwordtoken": [692, 709], "stringmethod": 692, "byte_count": 692, "character_ngram": 692, "character_token": 692, "code_point": 692, "detoken": 692, "edit_dist": 692, "edit_distance_matrix": 692, "filter_alphanum": 692, "filter_charact": 692, "filter_token": 692, "findal": 692, "find_multipl": 692, "get_json_object": 692, "hex_to_int": 692, "ip_to_int": 692, "is_conson": 692, "is_vowel": 692, "isempti": 692, "ishex": 692, "isipv4": 692, "istimestamp": 692, "istitl": [692, 748], "ngrams_token": 692, "normalize_charact": 692, "normalize_spac": 692, "porter_stemmer_measur": 692, "replace_token": 692, "replace_with_backref": 692, "rindex": 692, "slice_from": 692, "token_count": 692, "translat": [692, 706], "url_decod": 692, "url_encod": 692, "listmethod": 692, "structmethod": 692, "explod": 692, "get_opt": [692, 707], "set_opt": [692, 752], "describe_opt": [692, 752], "variant": 693, "thereof": 693, "reader": [694, 710, 750], "acceler": [694, 705, 709, 710, 748, 750], "cpu": [694, 710, 745, 750, 753], "futur": [694, 702, 703, 705, 710, 748, 751], "goal": [702, 703, 705], "repositori": 702, "pytest": 702, "plugin": [702, 704, 708], "framework": 702, "seamless": 702, "experi": [702, 704, 748], "develop": [702, 703, 704, 706, 707, 708, 709, 744, 748, 749], "public": [702, 704], "former": [702, 704], "macro": 702, "vi": 702, "\u00e0": 702, "help": [702, 703, 704], "quantifi": 702, "minim": [702, 703, 704], "bind": [702, 706], "focu": [702, 744], "footprint": 702, "At": [702, 705, 706, 748], "stabil": [702, 703], "free": [702, 708], "bench_class": 702, "eval": 702, "bench_datafram": 702, "hierarchi": [702, 706], "bench_frame_or_index": 702, "trigger": 702, "veri": [702, 744, 747, 748], "characterist": 702, "_intern": 702, "_apply_boolean_mask": 702, "bench_dataframe_intern": 702, "broadli": 702, "speak": 702, "live": [702, 703], "bench_io": 702, "discov": 702, "test_": [702, 708], "bench_": 702, "instal": [702, 704, 748], "termin": 702, "autosav": 702, "xxxx_": 702, "xxxx": 702, "yyyi": 702, "command": [702, 704], "short": [702, 704, 710], "param": [702, 708], "config": [702, 703], "hard": 702, "advertis": [702, 745], "littl": [702, 706], "natur": [702, 751], "meaning": 702, "care": 702, "interchang": [702, 706], "demonstr": [702, 704, 748], "bench_foo": 702, "six": 702, "did": [702, 748], "interest": 702, "cover": [702, 704, 705, 708, 748], "baselin": [702, 710], "coverag": [702, 708], "tweak": 702, "debug": [702, 703, 706], "num_col": 702, "aspect": 702, "want": [702, 704, 710, 744, 748, 751], "quantit": 702, "easi": [702, 704, 744, 745], "environ": [702, 704, 750], "cudf_benchmarks_use_panda": 702, "easili": [702, 704, 709], "simpli": [702, 704, 706, 744], "remap": 702, "why": 702, "critic": 702, "ci": [702, 710], "significantli": 702, "cycl": [702, 703], "balanc": 702, "cudf_benchmarks_debug_onli": 702, "advantag": [702, 744], "redefin": [702, 748], "crucial": 702, "although": 702, "suit": 702, "guidelin": [702, 704], "spy": 702, "svg": 702, "invoc": 702, "tool": [702, 703, 705], "strength": 702, "somewhat": 702, "workflow": [702, 703, 709, 710, 749], "encourag": [702, 704, 744, 745], "discuss": [702, 704, 705, 706, 708, 710, 751], "hood": [702, 704, 705, 706, 710], "magic": 702, "pytest_cas": 702, "programat": 702, "unambigu": 702, "classnam": 702, "_dtype_": 702, "_nulls_": 702, "_cols_": 702, "_rows_": 702, "dataframe_dtype_int_rows_100": 702, "cumbersom": [702, 706], "moreov": 702, "embed": 702, "problem": [702, 708, 748], "essenti": [702, 706, 748], "dataframe_dtype_int_cols_6": 702, "focus": 703, "high": [703, 706], "overview": [703, 709, 749], "practic": [703, 705, 706, 708, 710], "subpackag": [703, 708], "_lib": 703, "emploi": 703, "linter": 703, "manag": [703, 706, 748], "pre": [703, 748], "commit": 703, "strongli": [703, 704], "prior": 703, "yaml": 703, "repo": 703, "truth": 703, "lint": [703, 704], "flake8": 703, "complianc": 703, "black": 703, "formatt": 703, "isort": 703, "mypi": 703, "static": 703, "hint": 703, "difficult": [703, 745, 748], "pydocstyl": [703, 704], "docstr": [703, 705], "pyproject": 703, "toml": 703, "setup": [703, 710], "cfg": 703, "project": [703, 706, 745], "parti": 703, "addition": [703, 705, 706, 745], "hook": 703, "overal": [703, 705], "releas": [703, 748], "prevent": 703, "unexpect": 703, "sure": [703, 744, 748], "emit": 703, "futurewarn": [703, 710, 751], "opportun": 703, "thing": [703, 745, 748], "new_foo": 703, "signal": 703, "deprecationwarn": 703, "hidden": 703, "__main__": 703, "analog": [703, 706], "sometim": [703, 710, 744, 748], "latest": 703, "reason": [703, 704, 706, 750], "exorbit": 703, "runtim": [703, 748], "premium": 703, "believ": 703, "perfect": 703, "infeas": [703, 706], "undesir": 703, "consult": 703, "team": 703, "assess": 703, "proce": [703, 710, 744, 748], "substanti": 703, "power": [703, 704, 717, 723, 729], "friendli": 703, "profil": [703, 705], "expos": [703, 706, 744, 748, 750], "pxd": [703, 706], "declar": [703, 706], "pyx": 703, "thin": [703, 748], "layer": [703, 705, 710], "rare": 703, "benefit": [703, 704, 708], "happen": [703, 748, 751], "quit": 703, "justifi": 703, "benchmark": [703, 705, 709], "suffici": [703, 704], "mention": [703, 706, 745, 748], "logic_error": 703, "cuda_error": 703, "runtimeerror": 703, "payload": 703, "brittl": 703, "compromis": 703, "adopt": 703, "strategi": 703, "roadmap": 703, "diversifi": 703, "inlin": 704, "restructuredtext": 704, "myst": 704, "sphinx": 704, "contribut": [704, 705, 709], "lieu": 704, "explan": [704, 707], "commonli": [704, 753], "brief": 704, "_strongly_": 704, "numpydoc": 704, "scenario": 704, "getter": 704, "That": 704, "inherit": [704, 706], "codebas": 704, "pull": 704, "aim": 704, "api_doc": 704, "rst": 704, "discover": 704, "autosummari": 704, "api1": 704, "api2": 704, "render": 704, "layout": [704, 706], "stub": 704, "currentmodul": 704, "autofunct": 704, "autodoc": 704, "approach": [704, 706, 708, 748], "facilit": [704, 706], "bodi": 704, "api_nam": 704, "dedic": 704, "superset": 704, "markdown": 704, "syntax": [704, 748], "link": 704, "anchor": 704, "instruct": 704, "nb": 704, "straightforward": 704, "navig": [704, 749], "shell": 704, "server": 704, "Then": 704, "web": 704, "browser": 704, "localhost": 704, "8000": 704, "machin": [704, 710, 745], "visibl": 704, "network": 704, "ssh": 704, "local_port": 704, "remote_port": 704, "remote_ip": 704, "enforc": [704, 710], "regard": 704, "main": [705, 706, 708, 748], "dask_cudf": [705, 710, 745], "cudf_kafka": 705, "custreamz": 705, "robustli": 705, "guidanc": 705, "topic": 705, "cython": 705, "publish": 705, "advanc": [705, 744, 745, 748], "serv": 706, "face": 706, "bridg": 706, "review": [706, 708], "role": 706, "requisit": 706, "tradeoff": 706, "tie": 706, "holist": 706, "diagram": 706, "princip": 706, "eponym": 706, "tabular": [706, 710, 748], "columnar": [706, 709, 710], "meanwhil": 706, "abstract": 706, "materi": 706, "preliminari": 706, "let": [706, 744, 748], "dive": 706, "deeper": 706, "surmis": 706, "diamond": 706, "simpler": [706, 748], "flatten": 706, "ve": [706, 710, 748], "highlight": [706, 748], "concret": [706, 748], "eventu": 706, "almost": 706, "rewrit": 706, "alon": 706, "reimplement": 706, "behav": 706, "instanti": 706, "unfortun": 706, "mimick": 706, "__new__": 706, "tree": 706, "masquerad": 706, "stack": 706, "glue": 706, "own": [706, 750], "semant": 706, "apach": [706, 709, 710], "conduc": 706, "concept": [706, 710], "extent": 706, "interoper": [706, 709, 749], "simplifi": 706, "numericalcolumn": 706, "datetimecolumn": 706, "decis": 706, "4000": 706, "sizeof": 706, "chees": 706, "preexist": 706, "knowledg": [706, 748], "structdtyp": [706, 746], "decimaldtyp": 706, "intervaldtyp": 706, "contigu": [706, 744], "rmm": 706, "devicebuff": 706, "interact": [706, 710, 748], "explanatori": 706, "column_view": 706, "table_view": 706, "question": [706, 748], "trivial": 706, "descent": 706, "whole": 706, "fact": [706, 751], "act": 706, "reduct": [706, 745], "scan": 706, "bypass": 706, "straight": 706, "resampl": 706, "composit": 706, "explain": 707, "_register_opt": 707, "yield": [707, 708, 710, 753], "fixtur": 707, "clean": 707, "cov": [708, 747], "report": [708, 745, 753], "upload": 708, "codecov": 708, "pr": 708, "subdirectori": 708, "test_index": 708, "verifi": 708, "_max": 708, "excess": 708, "branch": 708, "obfusc": 708, "Such": 708, "alongsid": 708, "virtu": 708, "signific": 708, "lazili": 708, "wherea": 708, "primit": 708, "mind": [708, 751], "ground": 708, "test_some_properti": 708, "some_property_of": 708, "aris": 708, "nonempti": 708, "capabl": [708, 748], "potenti": [708, 748], "get_valu": 708, "test_even": 708, "test_odd": 708, "basi": 708, "_util": 708, "assert_eq": 708, "biggest": 708, "hammer": 708, "assert_": 708, "_equal": 708, "assert_exceptions_equ": 708, "scientist": 709, "program": 709, "dask": [709, 749], "introduct": 710, "gear": 710, "mainli": 710, "smooth": [710, 749], "cluster": [710, 745], "enough": [710, 745, 748], "comfort": [710, 748], "spread": [710, 745], "portion": [710, 748], "borrow": 710, "adapt": [710, 748], "cheatsheet": 710, "from_cudf": 710, "npartit": [710, 745], "thread_load": 710, "cuh": 710, "jitifi": 710, "thread_stor": 710, "ddf": 710, "dask_gdf": 710, "met": 710, "cudf_compar": 710, "dask_cudf_compar": 710, "isin": 710, "gdf1": 710, "rand": [710, 751], "082654": 710, "967955": 710, "399417": 710, "441425": 710, "784297": 710, "793582": 710, "070303": 710, "271711": 710, "gdf2": 710, "opt": [710, 751], "conda": [710, 748, 751], "env": [710, 751], "python3": [710, 751], "site": [710, 751], "column_accessor": 710, "251": 710, "343382": 710, "003700": 710, "20043": 710, "581614": 710, "907812": 710, "101512": 710, "24179": 710, "224180": 710, "var": [710, 747], "666666666666666": 710, "6666666666666667": 710, "map_partit": [710, 745], "add_ten": 710, "progress": 710, "ds2": 710, "restor": 710, "post": [710, 747], "ddf_a": 710, "ddf_b": 710, "paradigm": 710, "agg_col1": 710, "agg_col2": 710, "54": 710, "73": 710, "date_df": 710, "986051": 710, "232034": 710, "397617": 710, "103839": 710, "date_ddf": 710, "grade": 710, "dgdf": 710, "to_numpi": 710, "to_arrow": [710, 717, 723, 729, 735, 740, 753], "example_output": 710, "mkdir": 710, "foo_dask": 710, "star": 710, "temp_parquet": 710, "ddf_parquet_fil": 710, "cudf_root": 710, "orc_fil": 710, "testorcfil": 710, "test1": 710, "boolean1": 710, "byte1": 710, "short1": 710, "int1": 710, "long1": 710, "float1": 710, "double1": 710, "bytes1": 710, "string1": 710, "middl": 710, "1024": 710, "65536": 710, "2048": 710, "100000000": 710, "chani": 710, "spark": 710, "lazi": 710, "moment": 710, "graph": 710, "delai": 710, "activ": 710, "background": [710, 748], "system": 710, "finish": 710, "downstream": [710, 744], "contract": 710, "upstream": 710, "snippet": 710, "localcudaclust": 710, "worker": 710, "beyond": 710, "scope": [710, 748], "client": 710, "dask_cuda": 710, "2022": 710, "247": 710, "preload": 710, "info": 710, "333": 710, "368": 710, "403": [710, 744], "451": 710, "528": 710, "10000000": 710, "ddf2": 710, "2000000": 710, "8000000": 710, "9999999": 710, "nvidia": 710, "smi": 710, "nov": 710, "495": 710, "bu": 710, "disp": 710, "volatil": 710, "uncorr": 710, "ecc": 710, "fan": 710, "perf": 710, "pwr": 710, "cap": 710, "mig": 710, "tesla": 710, "v100": 710, "pcie": 710, "00000000": 710, "25c": 710, "p0": 710, "34w": 710, "250w": 710, "1471mib": 710, "32510mib": 710, "26c": 710, "307mib": 710, "28c": 710, "2586mib": 710, "23c": 710, "84": 710, "22c": 710, "33w": 710, "85": 710, "2594mib": 710, "gi": 710, "pid": 710, "twenti": 710, "800": [710, 744], "sleep": 710, "1875mib": 710, "711mib": 710, "2990mib": 710, "proceed": 710, "ll": [710, 744, 748], "ddf1": 710, "randint": [710, 753], "spent": 710, "results_ddf": 710, "sooner": 710, "had": 710, "doneandnotdonefutur": 710, "a12ef34afceba4402a1daf4c879f9e89": 710, "not_don": 710, "ordered": 712, "categrocialdtyp": [712, 714], "pd_dtype": [712, 714], "cudf_dtyp": [712, 714], "decimal128": [717, 718, 723, 724, 729, 730, 746, 750], "0042": [717, 723, 729], "1729": [717, 723, 729], "4200": [717, 723, 729], "0051": [717, 723, 729], "decimal128_dtyp": 717, "pa_typ": [717, 718, 723, 724, 729, 730], "decimal32dtyp": [717, 718, 729, 730, 746], "decimal64dtyp": [717, 718, 723, 724, 746], "items": [717, 723, 729], "decimal32": [723, 750], "decimal32_dtyp": 723, "decimal128dtyp": [723, 724, 729, 730, 746], "decimal64": [729, 750], "decimal64_dtyp": 729, "element_typ": 735, "list_dtyp": [735, 737, 739], "nested_list_dtyp": 735, "deep_nested_typ": [735, 736, 738], "listtyp": [735, 737, 739], "arrow_typ": [735, 737], "infer_typ": [735, 737], "leaf_typ": 735, "struct_dtyp": [740, 741], "nested_struct_dtyp": 740, "dict_data": 740, "structtyp": [740, 742, 743], "pa_struct_typ": [740, 742], "struct_typ": [740, 743], "notebook": [744, 748], "introductori": 744, "algebra": 744, "timeit": 744, "__version__": 744, "cupy_from_dlpack": 744, "from_dlpack": 744, "fromdlpack": 744, "to_cupi": 744, "500": 744, "arr_cupi": 744, "to_dlpack": 744, "244": 744, "\u00b5": 744, "dev": 744, "811": 744, "829": 744, "501": 744, "1001": 744, "502": 744, "1002": 744, "9997": 744, "10497": 744, "10997": 744, "9998": 744, "10498": 744, "10998": 744, "9999": 744, "10499": 744, "10999": 744, "__cuda_array_interface__": [744, 748], "leverag": [744, 748, 753], "cola_cupi": 744, "282": 744, "267": 744, "norm": 744, "reshaped_arr": 744, "197": 744, "198": 744, "199": 744, "201": 744, "202": 744, "397": 744, "398": 744, "399": 744, "401": 744, "402": 744, "597": 744, "598": 744, "599": 744, "9400": 744, "9401": 744, "9402": 744, "9597": 744, "9598": 744, "9599": 744, "9600": 744, "9601": 744, "9602": 744, "9797": 744, "9798": 744, "9799": 744, "9800": 744, "9801": 744, "9802": 744, "603": 744, "804": 744, "1005": [744, 748], "1206": 744, "1407": 744, "1608": 744, "1809": 744, "2211": 744, "2412": 744, "2613": 744, "2814": 744, "3015": 744, "3216": 744, "3417": 744, "3618": 744, "3819": 744, "4020": 744, "4221": 744, "4422": 744, "4623": 744, "4824": 744, "5025": 744, "5226": 744, "5427": 744, "5628": 744, "5829": 744, "6030": 744, "6231": 744, "6432": 744, "6633": 744, "6834": 744, "7035": 744, "7236": 744, "7437": 744, "7638": 744, "7839": 744, "8040": 744, "8241": 744, "8442": 744, "8643": 744, "8844": 744, "9045": 744, "9246": 744, "9447": 744, "9648": 744, "9849": 744, "linalg": 744, "577306": 744, "967739": 744, "easiest": [744, 748], "beforehand": 744, "reshaped_df": 744, "716": 744, "190": 744, "191": 744, "192": 744, "193": 744, "194": 744, "195": 744, "196": 744, "203": 744, "204": 744, "205": 744, "206": 744, "207": 744, "208": 744, "209": 744, "391": 744, "392": 744, "393": 744, "394": 744, "395": 744, "396": 744, "405": 744, "406": 744, "407": 744, "408": 744, "409": 744, "590": 744, "591": 744, "592": 744, "593": 744, "594": 744, "595": 744, "596": 744, "600": 744, "601": 744, "602": 744, "604": 744, "605": 744, "606": 744, "607": 744, "608": 744, "609": 744, "790": 744, "791": 744, "792": 744, "793": 744, "794": 744, "795": 744, "796": 744, "797": 744, "798": 744, "799": 744, "801": 744, "802": 744, "803": 744, "805": 744, "806": 744, "807": 744, "808": 744, "809": 744, "990": 744, "991": 744, "992": 744, "993": 744, "995": 744, "997": [744, 748], "998": 744, "isfortran": 744, "fortran_arr": 744, "asfortranarrai": 744, "todlpack": 744, "86": 744, "ecosystem": [744, 748], "isn": 744, "matur": 744, "hundr": 744, "wouldn": 744, "previous": 744, "new_arr": 744, "19900": 744, "59900": 744, "99900": 744, "139900": 744, "179900": 744, "219900": 744, "259900": 744, "299900": 744, "339900": 744, "379900": 744, "419900": 744, "459900": 744, "499900": 744, "539900": 744, "579900": 744, "619900": 744, "659900": 744, "699900": 744, "739900": 744, "779900": 744, "819900": 744, "859900": 744, "899900": 744, "939900": 744, "979900": 744, "1019900": 744, "1059900": 744, "1099900": 744, "1139900": 744, "1179900": 744, "1219900": 744, "1259900": 744, "1299900": 744, "1339900": 744, "1379900": 744, "1419900": 744, "1459900": 744, "1499900": 744, "1539900": 744, "1579900": 744, "1619900": 744, "1659900": 744, "1699900": 744, "1739900": 744, "1779900": 744, "1819900": 744, "1859900": 744, "1899900": 744, "1939900": 744, "1979900": 744, "seamlessli": 744, "move": [744, 748], "enorm": 744, "sacrif": 744, "cleanli": 744, "cudf_to_cupy_sparse_matrix": 744, "sparseformat": 744, "_sparse_constructor": 744, "csc_matrix": 744, "csr_matrix": 744, "illustr": 744, "nonzero": 744, "arr": [744, 748], "a0": 744, "a4": 744, "a5": 744, "a6": 744, "a7": 744, "a8": 744, "a9": 744, "a10": 744, "a11": 744, "a12": 744, "a13": 744, "a14": 744, "a15": 744, "a16": 744, "a17": 744, "a18": 744, "a19": 744, "080977": 744, "934374": 744, "860512": 744, "469482": 744, "962056": 744, "089054": 744, "24483": 744, "976603": 744, "435271": 744, "465937": 744, "870824": 744, "231869": 744, "52003": 744, "987936": 744, "701975": 744, "sparse_data": 744, "384": 744, "01452760958629118": 744, "918372704765766": 744, "514": 744, "690558699247237": 744, "1154": 744, "164163960955147": 744, "1538": 744, "9798545382499584": 744, "2448300722922165": 744, "515": 744, "9919883553927267": 744, "1156": 744, "586387859563162": 744, "1413": 744, "2178939191967197": 744, "262": 744, "480320542600843": 744, "774": 744, "693191302399935": 744, "939435252109578": 744, "137": 744, "429029899742235": 744, "225171305803716": 744, "651": 744, "852093119188298": 744, "1548": 744, "5082380161259445": 744, "653": 744, "940072278916102": 744, "1037": 744, "030273337306957": 744, "112496511346529": 744, "1551": 744, "061458629039392": 744, "1296": 744, "82730153353013": 744, "1169": 744, "311364279183074": 744, "1553": 744, "288560377225819": 744, "1554": 744, "081912211913714": 744, "915": 744, "68178561466237": 744, "8810": 744, "220208846155952": 744, "9963": 744, "273708009353282": 744, "8172": 744, "07560927382481": 744, "8812": 744, "3474307272860813": 744, "8301": 744, "895970357308624": 744, "8046": 744, "20164118615350946": 744, "8559": 744, "046205119990503": 744, "8048": 744, "244410055702213": 744, "9456": 744, "442485390455961": 744, "7922": 744, "11999724997681": 744, "8179": 744, "5695850498313764": 744, "8308": 744, "095419437974637": 744, "9076": 744, "700149273902835": 744, "9205": 744, "4564596135406536": 744, "9461": 744, "4011698076362795": 744, "8182": 744, "009522382186291": 744, "8055": 744, "43308189818358": 744, "8439": 744, "8675561805383678": 744, "9850": 744, "8878331433137177": 744, "8699": 744, "473548547894447": 744, "9725": 744, "051871906692694": 744, "8190": 744, "169721278860506": 744, "8318": 744, "185423614653647": 744, "9470": 744, "6968294010588836": 744, "8447": 744, "604502243764017": 744, "orchestr": 745, "cohes": 745, "ingest": 745, "decent": 745, "dayofweek": 745, "expens": 745, "cudf_df": 745, "persist": 745, "visual": 745, "comprehens": 745, "track": 745, "certainli": 745, "slight": 745, "inconsist": 745, "tracker": 745, "reus": 745, "newer": 745, "mislead": [745, 746], "frustrat": 745, "apolog": 745, "uint32": [746, 750], "durat": 746, "023": 746, "max_precis": 746, "psr": 746, "pq": 746, "exclus": 747, "nuisanc": 747, "gb1": 747, "gb2": 747, "gb3": 747, "extern": 747, "penalti": 747, "disambigu": 747, "ok": 747, "corr": 747, "866025": 747, "idxmin": 747, "idxmax": 747, "nuniqu": 747, "nth": 747, "randomdata": 748, "box": 748, "broader": 748, "pydata": [748, 749], "varieti": 748, "devicendarrai": 748, "offer": 748, "const": 748, "unari": [748, 753], "singleton": 748, "f_null_sensit": 748, "experiment": [748, 750], "channel": 748, "restart": 748, "string_udfs_en": 748, "_string_udfs_en": 748, "some_str": 748, "__contains__": 748, "grid": 748, "in_col": 748, "out_col": 748, "guard": 748, "cuda_array_interfac": 748, "963": 748, "9630": 748, "977": 748, "1026": 748, "980": 748, "9770": 748, "1048": 748, "1019": 748, "10480": 748, "1078": 748, "960": 748, "985": 748, "10780": 748, "979": 748, "982": 748, "1011": 748, "9790": 748, "theoret": 748, "spot": 748, "area": 748, "pipelin": 748, "job": 748, "entrypoint": 748, "onto": 748, "fulfil": 748, "ultim": 748, "428571429": 748, "constraint": 748, "str_df": 748, "fairli": 748, "streamlin": 748, "walk": 748, "conditional_add": 748, "heart": 748, "readi": 748, "successfulli": 748, "pessimist": 748, "explor": 748, "gpu_add": 748, "matter": 748, "1968": 748, "1961": 748, "propog": 748, "slide": 748, "answer": 748, "stock": 748, "mathemat": 748, "example_func": 748, "65": 748, "56": 748, "549834435": 748, "615773106": 748, "681145748": 748, "745966692": 748, "810249676": 748, "874007874": 748, "937253933": 748, "apply_group": 748, "drawn": 748, "691674": 748, "dan": 748, "958380": 748, "480099": 748, "729580": 748, "473370": 748, "xavier": 748, "767454": 748, "067479": 748, "380205": 748, "970850": 748, "sarah": 748, "342905": 748, "rolling_avg_": 748, "rolling_avg": 748, "win_siz": 748, "801430": 748, "632337": 748, "081887": 748, "933157": 748, "quinn": 748, "420826": 748, "184805": 748, "702013": 748, "837494": 748, "wendi": 748, "057540": 748, "401733": 748, "913899": 748, "ursula": 748, "466252": 748, "009502": 748, "725581": 748, "405245": 748, "271319": 748, "multiply_by_5": 748, "empty_lik": 748, "nondecim": 748, "outlin": 748, "github": 748, "properli": 748, "lot": 748, "hopefulli": 748, "feel": 748, "applymap": 749, "histogram": 749, "tip": 749, "magnum": 749, "gpudirect": 749, "integr": 749, "nvcomp": 749, "interweav": 749, "writer\u00b9": 750, "reader\u00b9": 750, "uint16": 750, "\u00b9": 750, "gd": 750, "dma": 750, "bounc": 750, "sdk": 750, "download": 750, "toolkit": 750, "libcudf_cufile_polici": 750, "kvikio": 750, "rapidsai": 750, "read_avro": 750, "libcudf_cufile_thread_count": 750, "libcudf_cufile_slice_s": 750, "4mb": 750, "libcudf_nvcomp_polici": 750, "deem": 750, "whenev": 750, "deflat": 750, "20120101": 751, "cumprod": 751, "prod": 751, "wish": 751, "dff": 751, "randn": 751, "234927": 751, "276004": 751, "255685": 751, "524404": 751, "065083": 751, "166808": 751, "209426": 751, "836150": 751, "097520": 751, "821993": 751, "112931": 751, "025180": 751, "528843": 751, "069365": 751, "631184": 751, "220126": 751, "824596": 751, "987948": 751, "052364": 751, "939484": 751, "336440": 751, "103486": 751, "897318": 751, "589591": 751, "465847": 751, "499275": 751, "1165": 751, "silenc": 751, "dot": 751, "434853376": 751, "58429709": 751, "129609313": 751, "097650103": 751, "246250318": 751, "053560271": 751, "682069364": 751, "672505876": 751, "140284432": 751, "458068657": 751, "478584207": 751, "140085002": 751, "df00": 751, "434853": 751, "584297": 751, "129609": 751, "097650": 751, "246250": 751, "053560": 751, "682069": 751, "672506": 751, "140284": 751, "458069": 751, "478584": 751, "140085": 751, "behaviour": 753, "resid": 753, "extrem": 753, "poor": 753, "vast": 753, "accomplish": 753, "742": 753, "694": 753, "840": 753, "459": 753, "525": 753, "442": 753, "363": 753, "666": 753, "643": 753, "631": 753, "906": 753, "640": 753, "impact": 753, "compatibilti": 753, "impos": 753}, "objects": {"cudf": [[712, 0, 1, "", "CategoricalDtype"], [0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [185, 0, 1, "", "DatetimeIndex"], [717, 0, 1, "", "Decimal128Dtype"], [723, 0, 1, "", "Decimal32Dtype"], [729, 0, 1, "", "Decimal64Dtype"], [206, 0, 1, "", "Float64Index"], [207, 0, 1, "", "Grouper"], [208, 0, 1, "", "Index"], [258, 0, 1, "", "Int64Index"], [259, 0, 1, "", "IntervalIndex"], [735, 0, 1, "", "ListDtype"], [263, 0, 1, "", "MultiIndex"], [276, 0, 1, "", "RangeIndex"], [277, 0, 1, "", "Series"], [740, 0, 1, "", "StructDtype"], [451, 0, 1, "", "TimedeltaIndex"], [460, 0, 1, "", "UInt64Index"], [461, 3, 1, "", "concat"], [659, 3, 1, "", "crosstab"], [660, 3, 1, "", "cut"], [661, 3, 1, "", "describe_option"], [662, 3, 1, "", "from_dlpack"], [663, 3, 1, "", "get_dummies"], [664, 3, 1, "", "get_option"], [669, 3, 1, "", "melt"], [670, 3, 1, "", "pivot"], [671, 3, 1, "", "pivot_table"], [672, 3, 1, "", "read_avro"], [673, 3, 1, "", "read_csv"], [674, 3, 1, "", "read_feather"], [675, 3, 1, "", "read_hdf"], [676, 3, 1, "", "read_json"], [677, 3, 1, "", "read_orc"], [678, 3, 1, "", "read_parquet"], [679, 3, 1, "", "read_text"], [680, 3, 1, "", "set_option"], [685, 3, 1, "", "to_datetime"], [686, 3, 1, "", "to_numeric"], [687, 3, 1, "", "unstack"]], "cudf.CategoricalDtype": [[713, 1, 1, "", "categories"], [714, 2, 1, "", "from_pandas"], [715, 1, 1, "", "ordered"], [716, 2, 1, "", "to_pandas"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pivot_table"], [114, 2, 1, "", "pop"], [115, 2, 1, "", "pow"], [116, 2, 1, "", "prod"], [117, 2, 1, "", "product"], [118, 2, 1, "", "quantile"], [119, 2, 1, "", "quantiles"], [120, 2, 1, "", "query"], [121, 2, 1, "", "radd"], [122, 2, 1, "", "rank"], [123, 2, 1, "", "rdiv"], [124, 2, 1, "", "reindex"], [125, 2, 1, "", "rename"], [126, 2, 1, "", "repeat"], [127, 2, 1, "", "replace"], [128, 2, 1, "", "resample"], [129, 2, 1, "", "reset_index"], [130, 2, 1, "", "rfloordiv"], [131, 2, 1, "", "rmod"], [132, 2, 1, "", "rmul"], [133, 2, 1, "", "rolling"], [134, 2, 1, "", "round"], [135, 2, 1, "", "rpow"], [136, 2, 1, "", "rsub"], [137, 2, 1, "", "rtruediv"], [138, 2, 1, "", "sample"], [139, 2, 1, "", "scale"], [140, 2, 1, "", "scatter_by_map"], [141, 2, 1, "", "searchsorted"], [142, 2, 1, "", "select_dtypes"], [143, 2, 1, "", "serialize"], [144, 2, 1, "", "set_index"], [145, 1, 1, "", "shape"], [146, 2, 1, "", "shift"], [147, 1, 1, "", "size"], [148, 2, 1, "", "skew"], [149, 2, 1, "", "sort_index"], [150, 2, 1, "", "sort_values"], [151, 2, 1, "", "stack"], [152, 2, 1, "", "std"], [153, 2, 1, "", "sub"], [154, 2, 1, "", "subtract"], [155, 2, 1, "", "sum"], [156, 2, 1, "", "sum_of_squares"], [157, 2, 1, "", "swaplevel"], [158, 2, 1, "", "tail"], [159, 2, 1, "", "take"], [160, 2, 1, "", "tile"], [161, 2, 1, "", "to_arrow"], [162, 2, 1, "", "to_csv"], [163, 2, 1, "", "to_cupy"], [164, 2, 1, "", "to_dict"], [165, 2, 1, "", "to_dlpack"], [166, 2, 1, "", "to_feather"], [167, 2, 1, "", "to_hdf"], [168, 2, 1, "", "to_json"], [169, 2, 1, "", "to_numpy"], [170, 2, 1, "", "to_orc"], [171, 2, 1, "", "to_pandas"], [172, 2, 1, "", "to_parquet"], [173, 2, 1, "", "to_records"], [174, 2, 1, "", "to_string"], [175, 2, 1, "", "to_struct"], [176, 2, 1, "", "transpose"], [177, 2, 1, "", "truediv"], [178, 2, 1, "", "unstack"], [179, 2, 1, "", "update"], [180, 2, 1, "", "value_counts"], [181, 1, 1, "", "values"], [182, 1, 1, "", "values_host"], [183, 2, 1, "", "var"], [184, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[186, 2, 1, "", "ceil"], [187, 1, 1, "", "day"], [188, 1, 1, "", "day_of_year"], [189, 1, 1, "", "dayofweek"], [190, 1, 1, "", "dayofyear"], [191, 2, 1, "", "floor"], [192, 1, 1, "", "hour"], [193, 1, 1, "", "is_leap_year"], [194, 2, 1, "", "isocalendar"], [195, 1, 1, "", "microsecond"], [196, 1, 1, "", "minute"], [197, 1, 1, "", "month"], [198, 1, 1, "", "nanosecond"], [199, 1, 1, "", "quarter"], [200, 2, 1, "", "round"], [201, 1, 1, "", "second"], [202, 2, 1, "", "to_frame"], [203, 2, 1, "", "to_series"], [204, 1, 1, "", "weekday"], [205, 1, 1, "", "year"]], "cudf.Decimal128Dtype": [[718, 2, 1, "", "from_arrow"], [719, 1, 1, "", "itemsize"], [720, 1, 1, "", "precision"], [721, 1, 1, "", "scale"], [722, 2, 1, "", "to_arrow"]], "cudf.Decimal32Dtype": [[724, 2, 1, "", "from_arrow"], [725, 1, 1, "", "itemsize"], [726, 1, 1, "", "precision"], [727, 1, 1, "", "scale"], [728, 2, 1, "", "to_arrow"]], "cudf.Decimal64Dtype": [[730, 2, 1, "", "from_arrow"], [731, 1, 1, "", "itemsize"], [732, 1, 1, "", "precision"], [733, 1, 1, "", "scale"], [734, 2, 1, "", "to_arrow"]], "cudf.Grouper": [[207, 2, 1, "", "__init__"]], "cudf.Index": [[209, 2, 1, "", "any"], [210, 2, 1, "", "append"], [211, 2, 1, "", "copy"], [212, 2, 1, "", "deserialize"], [213, 2, 1, "", "device_deserialize"], [214, 2, 1, "", "device_serialize"], [215, 2, 1, "", "difference"], [216, 2, 1, "", "drop_duplicates"], [217, 2, 1, "", "dropna"], [218, 2, 1, "", "fillna"], [219, 2, 1, "", "from_arrow"], [220, 2, 1, "", "from_pandas"], [221, 2, 1, "", "get_level_values"], [222, 2, 1, "", "get_loc"], [223, 2, 1, "", "get_slice_bound"], [224, 1, 1, "", "has_duplicates"], [225, 2, 1, "", "host_deserialize"], [226, 2, 1, "", "host_serialize"], [227, 2, 1, "", "intersection"], [228, 2, 1, "", "is_boolean"], [229, 2, 1, "", "is_categorical"], [230, 2, 1, "", "is_floating"], [231, 2, 1, "", "is_integer"], [232, 2, 1, "", "is_interval"], [233, 1, 1, "", "is_monotonic"], [234, 1, 1, "", "is_monotonic_decreasing"], [235, 1, 1, "", "is_monotonic_increasing"], [236, 2, 1, "", "is_numeric"], [237, 2, 1, "", "is_object"], [238, 2, 1, "", "isin"], [239, 2, 1, "", "isna"], [240, 2, 1, "", "join"], [241, 1, 1, "", "names"], [242, 1, 1, "", "nlevels"], [243, 2, 1, "", "notna"], [244, 2, 1, "", "rename"], [245, 2, 1, "", "repeat"], [246, 2, 1, "", "serialize"], [247, 2, 1, "", "set_names"], [248, 1, 1, "", "size"], [249, 2, 1, "", "sort_values"], [250, 2, 1, "", "take"], [251, 2, 1, "", "to_dlpack"], [252, 2, 1, "", "to_frame"], [253, 2, 1, "", "to_pandas"], [254, 2, 1, "", "to_series"], [255, 2, 1, "", "union"], [256, 2, 1, "", "unique"], [257, 1, 1, "", "values"]], "cudf.IntervalIndex": [[259, 2, 1, "", "__init__"], [260, 2, 1, "", "from_breaks"], [261, 2, 1, "", "get_loc"], [262, 1, 1, "", "values"]], "cudf.ListDtype": [[736, 1, 1, "", "element_type"], [737, 2, 1, "", "from_arrow"], [738, 1, 1, "", "leaf_type"], [739, 2, 1, "", "to_arrow"]], "cudf.MultiIndex": [[264, 1, 1, "", "codes"], [265, 2, 1, "", "droplevel"], [266, 2, 1, "", "from_arrow"], [267, 2, 1, "", "from_frame"], [268, 2, 1, "", "from_product"], [269, 2, 1, "", "from_tuples"], [270, 2, 1, "", "get_level_values"], [271, 2, 1, "", "get_loc"], [272, 1, 1, "", "levels"], [273, 1, 1, "", "names"], [274, 1, 1, "", "nlevels"], [275, 2, 1, "", "to_frame"]], "cudf.Series": [[278, 1, 1, "", "T"], [279, 2, 1, "", "__array__"], [280, 2, 1, "", "__iter__"], [281, 2, 1, "", "abs"], [282, 2, 1, "", "add"], [283, 2, 1, "", "add_prefix"], [284, 2, 1, "", "add_suffix"], [285, 2, 1, "", "all"], [286, 2, 1, "", "any"], [287, 2, 1, "", "append"], [288, 2, 1, "", "apply"], [289, 2, 1, "", "argsort"], [290, 2, 1, "", "astype"], [291, 2, 1, "", "autocorr"], [292, 1, 1, "", "axes"], [293, 2, 1, "", "backfill"], [294, 2, 1, "", "between"], [295, 2, 1, "", "bfill"], [296, 1, 1, "", "cat"], [297, 2, 1, "", "clip"], [298, 2, 1, "", "copy"], [299, 2, 1, "", "corr"], [300, 2, 1, "", "count"], [301, 2, 1, "", "cov"], [302, 2, 1, "", "cummax"], [303, 2, 1, "", "cummin"], [304, 2, 1, "", "cumprod"], [305, 2, 1, "", "cumsum"], [306, 1, 1, "", "data"], [307, 2, 1, "", "describe"], [308, 2, 1, "", "deserialize"], [309, 2, 1, "", "device_deserialize"], [310, 2, 1, "", "device_serialize"], [311, 2, 1, "", "diff"], [312, 2, 1, "", "digitize"], [313, 2, 1, "", "div"], [314, 2, 1, "", "divide"], [315, 2, 1, "", "dot"], [316, 2, 1, "", "drop"], [317, 2, 1, "", "drop_duplicates"], [318, 2, 1, "", "dropna"], [319, 1, 1, "", "dt"], [320, 1, 1, "", "dtype"], [321, 1, 1, "", "empty"], [322, 2, 1, "", "eq"], [323, 2, 1, "", "equals"], [324, 2, 1, "", "explode"], [325, 2, 1, "", "factorize"], [326, 2, 1, "", "ffill"], [327, 2, 1, "", "fillna"], [328, 2, 1, "", "first"], [329, 2, 1, "", "floordiv"], [330, 2, 1, "", "from_arrow"], [331, 2, 1, "", "from_categorical"], [332, 2, 1, "", "from_masked_array"], [333, 2, 1, "", "from_pandas"], [334, 2, 1, "", "ge"], [335, 2, 1, "", "groupby"], [336, 2, 1, "", "gt"], [337, 1, 1, "", "has_nulls"], [338, 2, 1, "", "hash_values"], [339, 2, 1, "", "head"], [340, 2, 1, "", "host_deserialize"], [341, 2, 1, "", "host_serialize"], [342, 1, 1, "", "iloc"], [343, 1, 1, "", "index"], [344, 2, 1, "", "interpolate"], [345, 1, 1, "", "is_monotonic"], [346, 1, 1, "", "is_monotonic_decreasing"], [347, 1, 1, "", "is_monotonic_increasing"], [348, 1, 1, "", "is_unique"], [349, 2, 1, "", "isin"], [350, 2, 1, "", "isna"], [351, 2, 1, "", "isnull"], [352, 2, 1, "", "items"], [353, 2, 1, "", "iteritems"], [354, 2, 1, "", "keys"], [355, 2, 1, "", "kurt"], [356, 2, 1, "", "kurtosis"], [357, 2, 1, "", "last"], [358, 2, 1, "", "le"], [359, 1, 1, "", "list"], [360, 1, 1, "", "loc"], [361, 2, 1, "", "lt"], [362, 2, 1, "", "map"], [363, 2, 1, "", "mask"], [364, 2, 1, "", "max"], [365, 2, 1, "", "mean"], [366, 2, 1, "", "median"], [367, 2, 1, "", "memory_usage"], [368, 2, 1, "", "min"], [369, 2, 1, "", "mod"], [370, 2, 1, "", "mode"], [371, 2, 1, "", "mul"], [372, 2, 1, "", "multiply"], [373, 1, 1, "", "name"], [374, 2, 1, "", "nans_to_nulls"], [375, 1, 1, "", "ndim"], [376, 2, 1, "", "ne"], [377, 2, 1, "", "nlargest"], [378, 2, 1, "", "notna"], [379, 2, 1, "", "notnull"], [380, 2, 1, "", "nsmallest"], [381, 1, 1, "", "null_count"], [382, 1, 1, "", "nullable"], [383, 1, 1, "", "nullmask"], [384, 2, 1, "", "nunique"], [385, 2, 1, "", "pad"], [386, 2, 1, "", "pct_change"], [387, 2, 1, "", "pipe"], [388, 2, 1, "", "pow"], [389, 2, 1, "", "prod"], [390, 2, 1, "", "product"], [391, 2, 1, "", "quantile"], [392, 2, 1, "", "radd"], [393, 2, 1, "", "rank"], [394, 2, 1, "", "rdiv"], [395, 2, 1, "", "reindex"], [396, 2, 1, "", "rename"], [397, 2, 1, "", "repeat"], [398, 2, 1, "", "replace"], [399, 2, 1, "", "resample"], [400, 2, 1, "", "reset_index"], [401, 2, 1, "", "rfloordiv"], [402, 2, 1, "", "rmod"], [403, 2, 1, "", "rmul"], [404, 2, 1, "", "rolling"], [405, 2, 1, "", "round"], [406, 2, 1, "", "rpow"], [407, 2, 1, "", "rsub"], [408, 2, 1, "", "rtruediv"], [409, 2, 1, "", "sample"], [410, 2, 1, "", "scale"], [411, 2, 1, "", "searchsorted"], [412, 2, 1, "", "serialize"], [413, 1, 1, "", "shape"], [414, 2, 1, "", "shift"], [415, 1, 1, "", "size"], [416, 2, 1, "", "skew"], [417, 2, 1, "", "sort_index"], [418, 2, 1, "", "sort_values"], [419, 2, 1, "", "std"], [420, 1, 1, "", "str"], [421, 1, 1, "", "struct"], [422, 2, 1, "", "sub"], [423, 2, 1, "", "subtract"], [424, 2, 1, "", "sum"], [425, 2, 1, "", "sum_of_squares"], [426, 2, 1, "", "tail"], [427, 2, 1, "", "take"], [428, 2, 1, "", "tile"], [429, 2, 1, "", "to_arrow"], [430, 2, 1, "", "to_cupy"], [431, 2, 1, "", "to_dict"], [432, 2, 1, "", "to_dlpack"], [433, 2, 1, "", "to_frame"], [434, 2, 1, "", "to_hdf"], [435, 2, 1, "", "to_json"], [436, 2, 1, "", "to_list"], [437, 2, 1, "", "to_numpy"], [438, 2, 1, "", "to_pandas"], [439, 2, 1, "", "to_string"], [440, 2, 1, "", "tolist"], [441, 2, 1, "", "transpose"], [442, 2, 1, "", "truediv"], [443, 2, 1, "", "unique"], [444, 2, 1, "", "update"], [445, 1, 1, "", "valid_count"], [446, 2, 1, "", "value_counts"], [447, 1, 1, "", "values"], [448, 1, 1, "", "values_host"], [449, 2, 1, "", "var"], [450, 2, 1, "", "where"]], "cudf.StructDtype": [[741, 1, 1, "", "fields"], [742, 2, 1, "", "from_arrow"], [743, 2, 1, "", "to_arrow"]], "cudf.TimedeltaIndex": [[452, 1, 1, "", "components"], [453, 1, 1, "", "days"], [454, 1, 1, "", "inferred_freq"], [455, 1, 1, "", "microseconds"], [456, 1, 1, "", "nanoseconds"], [457, 1, 1, "", "seconds"], [458, 2, 1, "", "to_frame"], [459, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[462, 2, 1, "", "add_categories"], [463, 2, 1, "", "as_ordered"], [464, 2, 1, "", "as_unordered"], [465, 1, 1, "", "categories"], [466, 1, 1, "", "codes"], [467, 1, 1, "", "ordered"], [468, 2, 1, "", "remove_categories"], [469, 2, 1, "", "reorder_categories"], [470, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[471, 2, 1, "", "astype"], [472, 2, 1, "", "concat"], [473, 2, 1, "", "contains"], [474, 2, 1, "", "get"], [475, 2, 1, "", "index"], [476, 1, 1, "", "leaves"], [477, 2, 1, "", "len"], [478, 2, 1, "", "sort_values"], [479, 2, 1, "", "take"], [480, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[481, 2, 1, "", "byte_count"], [482, 2, 1, "", "capitalize"], [483, 2, 1, "", "cat"], [484, 2, 1, "", "center"], [485, 2, 1, "", "character_ngrams"], [486, 2, 1, "", "character_tokenize"], [487, 2, 1, "", "code_points"], [488, 2, 1, "", "contains"], [489, 2, 1, "", "count"], [490, 2, 1, "", "detokenize"], [491, 2, 1, "", "edit_distance"], [492, 2, 1, "", "edit_distance_matrix"], [493, 2, 1, "", "endswith"], [494, 2, 1, "", "extract"], [495, 2, 1, "", "filter_alphanum"], [496, 2, 1, "", "filter_characters"], [497, 2, 1, "", "filter_tokens"], [498, 2, 1, "", "find"], [499, 2, 1, "", "find_multiple"], [500, 2, 1, "", "findall"], [501, 2, 1, "", "get"], [502, 2, 1, "", "get_json_object"], [503, 2, 1, "", "hex_to_int"], [504, 2, 1, "", "htoi"], [505, 2, 1, "", "index"], [506, 2, 1, "", "insert"], [507, 2, 1, "", "ip2int"], [508, 2, 1, "", "ip_to_int"], [509, 2, 1, "", "is_consonant"], [510, 2, 1, "", "is_vowel"], [511, 2, 1, "", "isalnum"], [512, 2, 1, "", "isalpha"], [513, 2, 1, "", "isdecimal"], [514, 2, 1, "", "isdigit"], [515, 2, 1, "", "isempty"], [516, 2, 1, "", "isfloat"], [517, 2, 1, "", "ishex"], [518, 2, 1, "", "isinteger"], [519, 2, 1, "", "isipv4"], [520, 2, 1, "", "islower"], [521, 2, 1, "", "isnumeric"], [522, 2, 1, "", "isspace"], [523, 2, 1, "", "istimestamp"], [524, 2, 1, "", "istitle"], [525, 2, 1, "", "isupper"], [526, 2, 1, "", "join"], [527, 2, 1, "", "len"], [528, 2, 1, "", "like"], [529, 2, 1, "", "ljust"], [530, 2, 1, "", "lower"], [531, 2, 1, "", "lstrip"], [532, 2, 1, "", "match"], [533, 2, 1, "", "ngrams"], [534, 2, 1, "", "ngrams_tokenize"], [535, 2, 1, "", "normalize_characters"], [536, 2, 1, "", "normalize_spaces"], [537, 2, 1, "", "pad"], [538, 2, 1, "", "partition"], [539, 2, 1, "", "porter_stemmer_measure"], [540, 2, 1, "", "repeat"], [541, 2, 1, "", "replace"], [542, 2, 1, "", "replace_tokens"], [543, 2, 1, "", "replace_with_backrefs"], [544, 2, 1, "", "rfind"], [545, 2, 1, "", "rindex"], [546, 2, 1, "", "rjust"], [547, 2, 1, "", "rpartition"], [548, 2, 1, "", "rsplit"], [549, 2, 1, "", "rstrip"], [550, 2, 1, "", "slice"], [551, 2, 1, "", "slice_from"], [552, 2, 1, "", "slice_replace"], [553, 2, 1, "", "split"], [554, 2, 1, "", "startswith"], [555, 2, 1, "", "strip"], [556, 2, 1, "", "swapcase"], [557, 2, 1, "", "title"], [558, 2, 1, "", "token_count"], [559, 2, 1, "", "tokenize"], [560, 2, 1, "", "translate"], [561, 2, 1, "", "upper"], [562, 2, 1, "", "url_decode"], [563, 2, 1, "", "url_encode"], [564, 2, 1, "", "wrap"], [565, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[566, 2, 1, "", "explode"], [567, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[568, 2, 1, "", "__iter__"], [569, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[570, 2, 1, "", "aggregate"], [571, 2, 1, "", "backfill"], [572, 2, 1, "", "bfill"], [573, 2, 1, "", "count"], [574, 2, 1, "", "cumcount"], [575, 2, 1, "", "cummax"], [576, 2, 1, "", "cummin"], [577, 2, 1, "", "cumsum"], [578, 2, 1, "", "describe"], [579, 2, 1, "", "diff"], [580, 2, 1, "", "ffill"], [581, 2, 1, "", "fillna"], [582, 2, 1, "", "idxmax"], [583, 2, 1, "", "idxmin"], [584, 2, 1, "", "nunique"], [585, 2, 1, "", "pad"], [586, 2, 1, "", "quantile"], [587, 2, 1, "", "shift"], [588, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[589, 2, 1, "", "agg"], [590, 2, 1, "", "apply"], [591, 2, 1, "", "backfill"], [592, 2, 1, "", "bfill"], [593, 2, 1, "", "corr"], [594, 2, 1, "", "count"], [595, 2, 1, "", "cov"], [596, 2, 1, "", "cumcount"], [597, 2, 1, "", "cummax"], [598, 2, 1, "", "cummin"], [599, 2, 1, "", "cumsum"], [600, 2, 1, "", "ffill"], [601, 2, 1, "", "max"], [602, 2, 1, "", "mean"], [603, 2, 1, "", "median"], [604, 2, 1, "", "min"], [605, 2, 1, "", "ngroup"], [606, 2, 1, "", "nth"], [607, 2, 1, "", "pad"], [608, 2, 1, "", "pipe"], [609, 2, 1, "", "prod"], [610, 2, 1, "", "size"], [611, 2, 1, "", "std"], [612, 2, 1, "", "sum"], [613, 2, 1, "", "transform"], [614, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[615, 2, 1, "", "aggregate"], [616, 2, 1, "", "nunique"], [617, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[618, 2, 1, "", "ceil"], [619, 1, 1, "", "day"], [620, 1, 1, "", "day_of_year"], [621, 1, 1, "", "dayofweek"], [622, 1, 1, "", "dayofyear"], [623, 1, 1, "", "days_in_month"], [624, 2, 1, "", "floor"], [625, 1, 1, "", "hour"], [626, 1, 1, "", "is_leap_year"], [627, 1, 1, "", "is_month_end"], [628, 1, 1, "", "is_month_start"], [629, 1, 1, "", "is_quarter_end"], [630, 1, 1, "", "is_quarter_start"], [631, 1, 1, "", "is_year_end"], [632, 1, 1, "", "is_year_start"], [633, 2, 1, "", "isocalendar"], [634, 1, 1, "", "microsecond"], [635, 1, 1, "", "minute"], [636, 1, 1, "", "month"], [637, 1, 1, "", "nanosecond"], [638, 1, 1, "", "quarter"], [639, 2, 1, "", "round"], [640, 1, 1, "", "second"], [641, 2, 1, "", "strftime"], [642, 1, 1, "", "weekday"], [643, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[644, 1, 1, "", "components"], [645, 1, 1, "", "days"], [646, 1, 1, "", "microseconds"], [647, 1, 1, "", "nanoseconds"], [648, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[649, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[650, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[651, 2, 1, "", "apply"], [652, 2, 1, "", "count"], [653, 2, 1, "", "max"], [654, 2, 1, "", "mean"], [655, 2, 1, "", "min"], [656, 2, 1, "", "std"], [657, 2, 1, "", "sum"], [658, 2, 1, "", "var"]], "cudf.io.parquet": [[665, 0, 1, "", "ParquetDatasetWriter"], [668, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[666, 2, 1, "", "close"], [667, 2, 1, "", "write_table"]], "cudf.testing.testing": [[681, 3, 1, "", "assert_column_equal"], [682, 3, 1, "", "assert_frame_equal"], [683, 3, 1, "", "assert_index_equal"], [684, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 696, 702, 704, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 751, 753], "categoricalindex": [0, 1, 2, 3, 693], "categori": [1, 465, 713], "code": [2, 264, 466, 703], "equal": [3, 50, 323], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 688, 744, 748], "t": [5, 278], "__iter__": [6, 280, 568], "ab": [7, 281], "add": [8, 282], "add_prefix": [9, 283], "add_suffix": [10, 284], "agg": [11, 589], "all": [12, 285, 706], "ani": [13, 209, 286], "append": [14, 210, 287], "appli": [15, 288, 590, 651, 747, 748, 753], "apply_chunk": [16, 748], "apply_row": [17, 748], "applymap": [18, 710], "argsort": [19, 289], "assign": 20, "astyp": [21, 290, 471], "ax": [23, 292], "backfil": [24, 293, 571, 591], "bfill": [25, 295, 572, 592], "clip": [26, 297], "column": [27, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 706, 753], "copi": [28, 211, 298], "corr": [29, 299, 593], "count": [30, 300, 489, 573, 594, 652], "cov": [31, 301, 595], "cummax": [32, 302, 575, 597], "cummin": [33, 303, 576, 598], "cumprod": [34, 304], "cumsum": [35, 305, 577, 599], "describ": [36, 307, 578], "deseri": [37, 212, 308], "device_deseri": [38, 213, 309], "device_seri": [39, 214, 310], "diff": [40, 311, 579], "div": [41, 313], "divid": [42, 314], "dot": [43, 315], "drop": [44, 316, 751], "drop_dupl": [45, 216, 317], "dropna": [46, 217, 318, 751], "dtype": [47, 320, 750, 751], "empti": [48, 321], "eq": [49, 322], "eval": 51, "explod": [52, 324, 566], "ffill": [53, 326, 580, 600], "fillna": [54, 218, 327, 581, 751], "first": [55, 328], "floordiv": [56, 329], "from_arrow": [57, 219, 266, 330, 718, 724, 730, 737, 742], "from_panda": [58, 220, 333, 714], "from_record": 59, "ge": [60, 334], "groupbi": [61, 335, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 688, 691, 697, 747, 748, 751], "gt": [62, 336], "hash_valu": [63, 338], "head": [64, 339], "host_deseri": [65, 225, 340], "host_seri": [66, 226, 341], "iat": 67, "iloc": [68, 342], "index": [69, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 343, 475, 505, 688, 691, 693, 697, 706, 710, 747], "info": 70, "insert": [71, 506, 751], "interleave_column": 72, "interpol": [73, 344], "isin": [74, 238, 349], "isna": [75, 239, 350], "isnul": [76, 351], "item": [77, 352], "iterrow": 78, "itertupl": 79, "join": [80, 240, 526, 688, 693, 697, 710], "kei": [81, 354], "kurt": [82, 355], "kurtosi": [83, 356], "last": [84, 357], "le": [85, 358], "loc": [86, 360], "lt": [87, 361], "mask": [88, 363], "max": [89, 364, 601, 653], "mean": [90, 365, 602, 654], "median": [91, 366, 603], "melt": [92, 669], "memory_usag": [93, 367], "merg": [94, 688, 697], "min": [95, 368, 604, 655], "mod": [96, 369], "mode": [97, 370], "mul": [98, 371], "multipli": [99, 372], "nans_to_nul": [100, 374], "ndim": [101, 375], "ne": [102, 376], "nlargest": [103, 377], "notna": [104, 243, 378], "notnul": [105, 379], "nsmallest": [106, 380], "nuniqu": [107, 384, 584, 616], "pad": [108, 385, 537, 585, 607], "partition_by_hash": 109, "pct_chang": [110, 386], "pipe": [111, 387, 608], "pivot": [112, 670], "pivot_t": [113, 671], "pop": 114, "pow": [115, 388], "prod": [116, 389, 609], "product": [117, 390, 751], "quantil": [118, 119, 391, 586], "panda": [118, 124, 184, 271, 395, 450, 581, 590, 702, 703, 704, 710, 711, 753], "compat": [118, 124, 184, 271, 395, 450, 581, 590, 693, 703, 711], "note": [118, 124, 184, 271, 395, 450, 581, 590, 711, 746], "queri": 120, "radd": [121, 392], "rank": [122, 393], "rdiv": [123, 394], "reindex": [124, 395, 688, 697], "renam": [125, 244, 396], "repeat": [126, 245, 397, 540], "replac": [127, 398, 541, 751], "resampl": [128, 399], "reset_index": [129, 400], "rfloordiv": [130, 401], "rmod": [131, 402], "rmul": [132, 403], "roll": [133, 404, 651, 652, 653, 654, 655, 656, 657, 658, 701, 747, 748], "round": [134, 200, 405, 639], "rpow": [135, 406], "rsub": [136, 407], "rtruediv": [137, 408], "sampl": [138, 409], "scale": [139, 410, 721, 727, 733], "scatter_by_map": 140, "searchsort": [141, 411], "select_dtyp": 142, "serial": [143, 246, 412, 688, 697], "set_index": 144, "shape": [145, 413], "shift": [146, 414, 587], "size": [147, 248, 415, 588, 610], "skew": [148, 416], "sort_index": [149, 417], "sort_valu": [150, 249, 418, 478], "stack": 151, "std": [152, 419, 611, 656], "sub": [153, 422], "subtract": [154, 423], "sum": [155, 424, 612, 657, 751], "sum_of_squar": [156, 425], "swaplevel": 157, "tail": [158, 426], "take": [159, 250, 427, 479], "tile": [160, 428], "to_arrow": [161, 429, 722, 728, 734, 739, 743], "to_csv": 162, "to_cupi": [163, 430], "to_dict": [164, 431], "to_dlpack": [165, 251, 432], "to_feath": 166, "to_hdf": [167, 434], "to_json": [168, 435], "to_numpi": [169, 437], "to_orc": 170, "to_panda": [171, 253, 438, 716], "to_parquet": 172, "to_record": 173, "to_str": [174, 439], "to_struct": 175, "transpos": [176, 441, 688, 710], "truediv": [177, 442], "unstack": [178, 687], "updat": [179, 444], "value_count": [180, 446], "valu": [181, 257, 262, 447, 693, 751, 753], "values_host": [182, 448], "var": [183, 449, 614, 658], "where": [184, 450], "datetimeindex": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 693], "ceil": [186, 618], "dai": [187, 453, 619, 645], "day_of_year": [188, 620], "dayofweek": [189, 621], "dayofyear": [190, 622], "floor": [191, 624], "hour": [192, 625], "is_leap_year": [193, 626], "isocalendar": [194, 633], "microsecond": [195, 455, 634, 646], "minut": [196, 635, 710], "month": [197, 636], "nanosecond": [198, 456, 637, 647], "quarter": [199, 638], "second": [201, 457, 640, 648], "to_fram": [202, 252, 275, 433, 458], "to_seri": [203, 254, 459], "weekdai": [204, 642], "year": [205, 643], "float64index": 206, "grouper": [207, 747], "differ": [215, 750], "get_level_valu": [221, 270], "get_loc": [222, 261, 271], "get_slice_bound": 223, "has_dupl": 224, "intersect": 227, "is_boolean": 228, "is_categor": 229, "is_float": 230, "is_integ": 231, "is_interv": 232, "is_monoton": [233, 345], "is_monotonic_decreas": [234, 346], "is_monotonic_increas": [235, 347], "is_numer": 236, "is_object": 237, "name": [241, 273, 373, 703, 753], "nlevel": [242, 274], "set_nam": 247, "union": [255, 702], "uniqu": [256, 443, 480, 617], "int64index": 258, "intervalindex": [259, 260, 261, 262, 693], "from_break": 260, "multiindex": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 693, 710], "droplevel": 265, "from_fram": 267, "from_product": 268, "from_tupl": 269, "level": [272, 689, 747, 748], "rangeindex": 276, "seri": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 688, 697, 710, 744, 748], "__array__": 279, "autocorr": 291, "between": [294, 744], "cat": [296, 483], "data": [306, 688, 689, 697, 706, 710, 746, 748, 751, 753], "digit": 312, "dt": 319, "factor": 325, "from_categor": 331, "from_masked_arrai": 332, "has_nul": 337, "is_uniqu": 348, "iteritem": 353, "list": [359, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 695, 697, 746], "map": 362, "null_count": 381, "nullabl": [382, 748], "nullmask": 383, "str": 420, "struct": [421, 566, 567, 697, 699, 746], "to_list": 436, "tolist": 440, "valid_count": 445, "timedeltaindex": [451, 452, 453, 454, 455, 456, 457, 458, 459, 693], "compon": [452, 644, 693], "inferred_freq": 454, "uint64index": 460, "concat": [461, 472, 710], "core": [462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658], "categor": [462, 463, 464, 465, 466, 467, 468, 469, 470, 693, 697, 710], "categoricalaccessor": [462, 463, 464, 465, 466, 467, 468, 469, 470], "add_categori": 462, "as_ord": 463, "as_unord": 464, "order": [467, 715, 753], "remove_categori": 468, "reorder_categori": 469, "set_categori": 470, "listmethod": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "contain": [473, 488], "get": [474, 501, 710], "leav": 476, "len": [477, 527], "string": [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 697, 698, 710, 748, 751], "stringmethod": [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565], "byte_count": 481, "capit": 482, "center": 484, "character_ngram": 485, "character_token": 486, "code_point": 487, "detoken": 490, "edit_dist": 491, "edit_distance_matrix": 492, "endswith": 493, "extract": 494, "filter_alphanum": 495, "filter_charact": 496, "filter_token": 497, "find": 498, "find_multipl": 499, "findal": 500, "get_json_object": 502, "hex_to_int": 503, "htoi": 504, "ip2int": 507, "ip_to_int": 508, "is_conson": 509, "is_vowel": 510, "isalnum": 511, "isalpha": 512, "isdecim": 513, "isdigit": 514, "isempti": 515, "isfloat": 516, "ishex": 517, "isinteg": 518, "isipv4": 519, "islow": 520, "isnumer": 521, "isspac": 522, "istimestamp": 523, "istitl": 524, "isupp": 525, "like": 528, "ljust": 529, "lower": [530, 748], "lstrip": 531, "match": 532, "ngram": 533, "ngrams_token": 534, "normalize_charact": 535, "normalize_spac": 536, "partit": 538, "porter_stemmer_measur": 539, "replace_token": 542, "replace_with_backref": 543, "rfind": 544, "rindex": 545, "rjust": 546, "rpartit": 547, "rsplit": 548, "rstrip": 549, "slice": 550, "slice_from": 551, "slice_replac": 552, "split": 553, "startswith": 554, "strip": 555, "swapcas": 556, "titl": 557, "token_count": 558, "token": 559, "translat": 560, "upper": 561, "url_decod": 562, "url_encod": 563, "wrap": 564, "zfill": 565, "structmethod": [566, 567], "field": [567, 741], "group": [569, 710, 747], "dataframegroupbi": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588], "aggreg": [570, 615, 747], "cumcount": [574, 596], "idxmax": 582, "idxmin": 583, "ngroup": 605, "nth": 606, "transform": [613, 747], "seriesgroupbi": [615, 616, 617], "datetimeproperti": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643], "days_in_month": 623, "is_month_end": 627, "is_month_start": 628, "is_quarter_end": 629, "is_quarter_start": 630, "is_year_end": 631, "is_year_start": 632, "strftime": 641, "timedeltaproperti": [644, 645, 646, 647, 648], "subword_token": [649, 650], "subwordtoken": [649, 650, 700], "__call__": 650, "window": [651, 652, 653, 654, 655, 656, 657, 658, 688, 697, 701, 747, 748], "crosstab": 659, "cut": 660, "describe_opt": 661, "from_dlpack": 662, "get_dummi": 663, "get_opt": 664, "io": [665, 666, 667, 668, 688, 697, 750], "parquet": [665, 666, 667, 668, 694, 710], "parquetdatasetwrit": [665, 666, 667], "close": 666, "write_t": 667, "read_parquet_metadata": 668, "read_avro": 672, "read_csv": 673, "read_feath": 674, "read_hdf": 675, "read_json": 676, "Not": 676, "gpu": [676, 745], "acceler": 676, "experiment": 676, "featur": 676, "read_orc": 677, "read_parquet": 678, "read_text": 679, "set_opt": 680, "test": [681, 682, 683, 684, 690, 702, 708], "assert_column_equ": 681, "assert_frame_equ": 682, "assert_index_equ": 683, "assert_series_equ": 684, "to_datetim": 685, "to_numer": 686, "constructor": [688, 693, 697, 700], "attribut": [688, 697], "underli": 688, "convers": [688, 689, 693, 697], "iter": [688, 691, 697, 753], "binari": [688, 697], "oper": [688, 693, 697, 710, 747, 753], "function": [688, 689, 690, 691, 697, 701, 708, 748, 753], "applic": [688, 691, 697], "comput": [688, 691, 693, 697, 753], "descript": [688, 691, 697], "stat": [688, 691, 697, 710], "select": [688, 693, 697, 710], "label": [688, 697, 710, 751], "manipul": [688, 689, 697], "miss": [688, 693, 697, 710, 751, 753], "handl": [688, 695, 697, 698, 699, 703, 748], "reshap": [688, 697], "sort": [688, 693, 697], "combin": [688, 693, 697], "compar": [688, 697, 702, 704], "time": [688, 693, 697, 710], "relat": [688, 697], "gener": [689, 690, 751], "top": 689, "deal": 689, "datetimelik": [689, 697], "util": [690, 708], "api": [692, 745], "refer": 692, "document": [692, 704, 709], "object": [693, 710, 746, 747, 751, 753], "properti": [693, 697], "modifi": 693, "memori": 693, "usag": 693, "specif": 693, "set": 693, "numer": [693, 751], "date": 693, "input": [694, 750], "output": [694, 750], "csv": [694, 710], "text": 694, "json": 694, "orc": [694, 710], "hdfstore": 694, "pytabl": 694, "hdf5": 694, "feather": 694, "avro": 694, "option": [696, 707, 752], "accessor": 697, "datetim": [697, 751], "method": [697, 710], "timedelta": 697, "benchmark": 702, "organ": [702, 708], "run": 702, "content": [702, 708, 709], "configur": 702, "write": [702, 704, 708], "parametr": [702, 708], "profil": 702, "advanc": 702, "topic": 702, "understand": 702, "benchmark_with_object": 702, "fixtur": [702, 708], "The": [702, 706, 747], "decor": 702, "contribut": 703, "guid": [703, 705, 749], "directori": 703, "structur": 703, "file": 703, "style": 703, "deprec": 703, "remov": 703, "python": 703, "v": 703, "cython": [703, 706], "except": 703, "libcudf": 703, "docstr": 704, "publish": 704, "page": 704, "build": 704, "requir": 704, "view": [704, 710], "doc": 704, "intern": 704, "develop": [705, 745], "librari": [706, 710], "design": 706, "frame": 706, "layer": 706, "columnaccessor": 706, "type": [706, 746, 750, 753], "buffer": 706, "put": 706, "It": 706, "togeth": 706, "tool": 708, "custom": [708, 748], "pytest": 708, "mark": 708, "complex": 708, "welcom": 709, "": 709, "indic": 709, "tabl": 709, "10": 710, "dask": [710, 745], "what": [710, 745], "ar": 710, "when": 710, "us": [710, 750], "creation": 710, "posit": 710, "boolean": 710, "histogram": 710, "convert": [710, 744], "represent": 710, "numpi": [710, 746], "arrow": 710, "In": 710, "out": 710, "perform": 710, "tip": 710, "persist": 710, "wait": 710, "categoricaldtyp": [712, 713, 714, 715, 716], "decimal128dtyp": [717, 718, 719, 720, 721, 722], "items": [719, 725, 731], "precis": [720, 726, 732], "decimal32dtyp": [723, 724, 725, 726, 727, 728], "decimal64dtyp": [729, 730, 731, 732, 733, 734], "listdtyp": [735, 736, 737, 738, 739], "element_typ": 736, "leaf_typ": 738, "structdtyp": [740, 741, 742, 743], "interoper": 744, "cupi": [744, 748], "arrai": [744, 748], "interweav": 744, "smooth": 744, "pydata": 744, "workflow": 744, "spars": 744, "matrix": 744, "multi": 745, "work": [745, 751], "navig": 745, "support": [746, 747, 750, 753], "A": 746, "decim": 746, "nest": 746, "summari": [747, 748], "limit": [747, 753], "calcul": [747, 751], "overview": 748, "user": [748, 749], "defin": 748, "udf": 748, "addit": 748, "scalar": 748, "argument": 748, "control": 748, "numba": 748, "kernel": 748, "null": [748, 751, 753], "caveat": 748, "i": 750, "o": 750, "magnum": 750, "gpudirect": 750, "storag": 750, "integr": 750, "nvcomp": 750, "current": 750, "polici": 750, "how": 751, "detect": 751, "float": [751, 753], "nan": 751, "na": 751, "fill": 751, "axi": 751, "regular": 751, "express": 751, "comparison": 753, "result": 753, "point": 753, "No": 753, "true": 753}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [748, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_pandas": [[58, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[59, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[60, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[61, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[62, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[63, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[64, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[65, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[66, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[67, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[68, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[69, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[70, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[71, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[72, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[73, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[74, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[75, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[76, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[77, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[78, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[79, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[80, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[81, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[82, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[83, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[84, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[85, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[86, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[87, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[88, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[89, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[90, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[91, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[92, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[93, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[94, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[95, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[96, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[97, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[98, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[99, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[100, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[101, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[102, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[103, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[104, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[105, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[106, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[107, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[108, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[109, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[110, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[111, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[112, "cudf-dataframe-pivot"]], "cudf.DataFrame.pivot_table": [[113, "cudf-dataframe-pivot-table"]], "cudf.DataFrame.pop": [[114, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[115, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[116, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[117, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[118, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[118, "PandasCompat-0"], [124, "PandasCompat-0"], [184, "PandasCompat-0"], [271, "PandasCompat-0"], [395, "PandasCompat-0"], [450, "PandasCompat-0"], [581, "PandasCompat-0"], [590, "PandasCompat-0"], [711, null], [711, null], [711, null], [711, null], [711, null], [711, null], [711, null], [711, null]], "cudf.DataFrame.quantiles": [[119, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[120, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[121, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[122, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[123, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[124, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[125, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[126, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[127, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[128, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[129, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[130, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[131, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[132, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[133, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[134, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[135, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[136, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[137, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[138, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[139, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[140, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[141, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[142, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[143, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[144, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[145, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[146, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[147, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[148, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[149, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[150, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[151, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[152, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[153, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[154, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[155, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[156, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[157, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[158, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[159, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[160, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[161, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[162, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[163, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[164, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[165, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[166, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[167, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[168, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[169, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[170, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[171, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[172, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[173, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[174, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[175, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[176, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[177, "cudf-dataframe-truediv"]], "cudf.DataFrame.unstack": [[178, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[179, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[180, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[181, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[182, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[183, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[184, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[185, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[186, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[187, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[188, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[189, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[190, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[191, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[192, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[193, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[194, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[195, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[196, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[197, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[198, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[199, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[200, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[201, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[202, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[203, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[204, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[205, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[206, "cudf-float64index"]], "cudf.Grouper": [[207, "cudf-grouper"]], "cudf.Index": [[208, "cudf-index"]], "cudf.Index.any": [[209, "cudf-index-any"]], "cudf.Index.append": [[210, "cudf-index-append"]], "cudf.Index.copy": [[211, "cudf-index-copy"]], "cudf.Index.deserialize": [[212, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[213, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[214, "cudf-index-device-serialize"]], "cudf.Index.difference": [[215, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[216, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[217, "cudf-index-dropna"]], "cudf.Index.fillna": [[218, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[219, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[220, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[221, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[222, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[223, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[224, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[225, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[226, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[227, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[228, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[229, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[230, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[231, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[232, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[233, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[234, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[235, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[236, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[237, "cudf-index-is-object"]], "cudf.Index.isin": [[238, "cudf-index-isin"]], "cudf.Index.isna": [[239, "cudf-index-isna"]], "cudf.Index.join": [[240, "cudf-index-join"]], "cudf.Index.names": [[241, "cudf-index-names"]], "cudf.Index.nlevels": [[242, "cudf-index-nlevels"]], "cudf.Index.notna": [[243, "cudf-index-notna"]], "cudf.Index.rename": [[244, "cudf-index-rename"]], "cudf.Index.repeat": [[245, "cudf-index-repeat"]], "cudf.Index.serialize": [[246, "cudf-index-serialize"]], "cudf.Index.set_names": [[247, "cudf-index-set-names"]], "cudf.Index.size": [[248, "cudf-index-size"]], "cudf.Index.sort_values": [[249, "cudf-index-sort-values"]], "cudf.Index.take": [[250, "cudf-index-take"]], "cudf.Index.to_dlpack": [[251, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[252, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[253, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[254, "cudf-index-to-series"]], "cudf.Index.union": [[255, "cudf-index-union"]], "cudf.Index.unique": [[256, "cudf-index-unique"]], "cudf.Index.values": [[257, "cudf-index-values"]], "cudf.Int64Index": [[258, "cudf-int64index"]], "cudf.IntervalIndex": [[259, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[260, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[261, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[262, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[263, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[264, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[265, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[266, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[267, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[268, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[269, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[270, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[271, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[272, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[273, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[274, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[275, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[276, "cudf-rangeindex"]], "cudf.Series": [[277, "cudf-series"]], "cudf.Series.T": [[278, "cudf-series-t"]], "cudf.Series.__array__": [[279, "cudf-series-array"]], "cudf.Series.__iter__": [[280, "cudf-series-iter"]], "cudf.Series.abs": [[281, "cudf-series-abs"]], "cudf.Series.add": [[282, "cudf-series-add"]], "cudf.Series.add_prefix": [[283, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[284, "cudf-series-add-suffix"]], "cudf.Series.all": [[285, "cudf-series-all"]], "cudf.Series.any": [[286, "cudf-series-any"]], "cudf.Series.append": [[287, "cudf-series-append"]], "cudf.Series.apply": [[288, "cudf-series-apply"], [748, "cudf-series-apply"]], "cudf.Series.argsort": [[289, "cudf-series-argsort"]], "cudf.Series.astype": [[290, "cudf-series-astype"]], "cudf.Series.autocorr": [[291, "cudf-series-autocorr"]], "cudf.Series.axes": [[292, "cudf-series-axes"]], "cudf.Series.backfill": [[293, "cudf-series-backfill"]], "cudf.Series.between": [[294, "cudf-series-between"]], "cudf.Series.bfill": [[295, "cudf-series-bfill"]], "cudf.Series.cat": [[296, "cudf-series-cat"]], "cudf.Series.clip": [[297, "cudf-series-clip"]], "cudf.Series.copy": [[298, "cudf-series-copy"]], "cudf.Series.corr": [[299, "cudf-series-corr"]], "cudf.Series.count": [[300, "cudf-series-count"]], "cudf.Series.cov": [[301, "cudf-series-cov"]], "cudf.Series.cummax": [[302, "cudf-series-cummax"]], "cudf.Series.cummin": [[303, "cudf-series-cummin"]], "cudf.Series.cumprod": [[304, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[305, "cudf-series-cumsum"]], "cudf.Series.data": [[306, "cudf-series-data"]], "cudf.Series.describe": [[307, "cudf-series-describe"]], "cudf.Series.deserialize": [[308, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[309, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[310, "cudf-series-device-serialize"]], "cudf.Series.diff": [[311, "cudf-series-diff"]], "cudf.Series.digitize": [[312, "cudf-series-digitize"]], "cudf.Series.div": [[313, "cudf-series-div"]], "cudf.Series.divide": [[314, "cudf-series-divide"]], "cudf.Series.dot": [[315, "cudf-series-dot"]], "cudf.Series.drop": [[316, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[317, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[318, "cudf-series-dropna"]], "cudf.Series.dt": [[319, "cudf-series-dt"]], "cudf.Series.dtype": [[320, "cudf-series-dtype"]], "cudf.Series.empty": [[321, "cudf-series-empty"]], "cudf.Series.eq": [[322, "cudf-series-eq"]], "cudf.Series.equals": [[323, "cudf-series-equals"]], "cudf.Series.explode": [[324, "cudf-series-explode"]], "cudf.Series.factorize": [[325, "cudf-series-factorize"]], "cudf.Series.ffill": [[326, "cudf-series-ffill"]], "cudf.Series.fillna": [[327, "cudf-series-fillna"]], "cudf.Series.first": [[328, "cudf-series-first"]], "cudf.Series.floordiv": [[329, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[330, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[331, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[332, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[333, "cudf-series-from-pandas"]], "cudf.Series.ge": [[334, "cudf-series-ge"]], "cudf.Series.groupby": [[335, "cudf-series-groupby"]], "cudf.Series.gt": [[336, "cudf-series-gt"]], "cudf.Series.has_nulls": [[337, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[338, "cudf-series-hash-values"]], "cudf.Series.head": [[339, "cudf-series-head"]], "cudf.Series.host_deserialize": [[340, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[341, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[342, "cudf-series-iloc"]], "cudf.Series.index": [[343, "cudf-series-index"]], "cudf.Series.interpolate": [[344, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[345, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[346, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[347, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[348, "cudf-series-is-unique"]], "cudf.Series.isin": [[349, "cudf-series-isin"]], "cudf.Series.isna": [[350, "cudf-series-isna"]], "cudf.Series.isnull": [[351, "cudf-series-isnull"]], "cudf.Series.items": [[352, "cudf-series-items"]], "cudf.Series.iteritems": [[353, "cudf-series-iteritems"]], "cudf.Series.keys": [[354, "cudf-series-keys"]], "cudf.Series.kurt": [[355, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[356, "cudf-series-kurtosis"]], "cudf.Series.last": [[357, "cudf-series-last"]], "cudf.Series.le": [[358, "cudf-series-le"]], "cudf.Series.list": [[359, "cudf-series-list"]], "cudf.Series.loc": [[360, "cudf-series-loc"]], "cudf.Series.lt": [[361, "cudf-series-lt"]], "cudf.Series.map": [[362, "cudf-series-map"]], "cudf.Series.mask": [[363, "cudf-series-mask"]], "cudf.Series.max": [[364, "cudf-series-max"]], "cudf.Series.mean": [[365, "cudf-series-mean"]], "cudf.Series.median": [[366, "cudf-series-median"]], "cudf.Series.memory_usage": [[367, "cudf-series-memory-usage"]], "cudf.Series.min": [[368, "cudf-series-min"]], "cudf.Series.mod": [[369, "cudf-series-mod"]], "cudf.Series.mode": [[370, "cudf-series-mode"]], "cudf.Series.mul": [[371, "cudf-series-mul"]], "cudf.Series.multiply": [[372, "cudf-series-multiply"]], "cudf.Series.name": [[373, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[374, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[375, "cudf-series-ndim"]], "cudf.Series.ne": [[376, "cudf-series-ne"]], "cudf.Series.nlargest": [[377, "cudf-series-nlargest"]], "cudf.Series.notna": [[378, "cudf-series-notna"]], "cudf.Series.notnull": [[379, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[380, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[381, "cudf-series-null-count"]], "cudf.Series.nullable": [[382, "cudf-series-nullable"]], "cudf.Series.nullmask": [[383, "cudf-series-nullmask"]], "cudf.Series.nunique": [[384, "cudf-series-nunique"]], "cudf.Series.pad": [[385, "cudf-series-pad"]], "cudf.Series.pct_change": [[386, "cudf-series-pct-change"]], "cudf.Series.pipe": [[387, "cudf-series-pipe"]], "cudf.Series.pow": [[388, "cudf-series-pow"]], "cudf.Series.prod": [[389, "cudf-series-prod"]], "cudf.Series.product": [[390, "cudf-series-product"]], "cudf.Series.quantile": [[391, "cudf-series-quantile"]], "cudf.Series.radd": [[392, "cudf-series-radd"]], "cudf.Series.rank": [[393, "cudf-series-rank"]], "cudf.Series.rdiv": [[394, "cudf-series-rdiv"]], "cudf.Series.reindex": [[395, "cudf-series-reindex"]], "cudf.Series.rename": [[396, "cudf-series-rename"]], "cudf.Series.repeat": [[397, "cudf-series-repeat"]], "cudf.Series.replace": [[398, "cudf-series-replace"]], "cudf.Series.resample": [[399, "cudf-series-resample"]], "cudf.Series.reset_index": [[400, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[401, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[402, "cudf-series-rmod"]], "cudf.Series.rmul": [[403, "cudf-series-rmul"]], "cudf.Series.rolling": [[404, "cudf-series-rolling"]], "cudf.Series.round": [[405, "cudf-series-round"]], "cudf.Series.rpow": [[406, "cudf-series-rpow"]], "cudf.Series.rsub": [[407, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[408, "cudf-series-rtruediv"]], "cudf.Series.sample": [[409, "cudf-series-sample"]], "cudf.Series.scale": [[410, "cudf-series-scale"]], "cudf.Series.searchsorted": [[411, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[412, "cudf-series-serialize"]], "cudf.Series.shape": [[413, "cudf-series-shape"]], "cudf.Series.shift": [[414, "cudf-series-shift"]], "cudf.Series.size": [[415, "cudf-series-size"]], "cudf.Series.skew": [[416, "cudf-series-skew"]], "cudf.Series.sort_index": [[417, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[418, "cudf-series-sort-values"]], "cudf.Series.std": [[419, "cudf-series-std"]], "cudf.Series.str": [[420, "cudf-series-str"]], "cudf.Series.struct": [[421, "cudf-series-struct"]], "cudf.Series.sub": [[422, "cudf-series-sub"]], "cudf.Series.subtract": [[423, "cudf-series-subtract"]], "cudf.Series.sum": [[424, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[425, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[426, "cudf-series-tail"]], "cudf.Series.take": [[427, "cudf-series-take"]], "cudf.Series.tile": [[428, "cudf-series-tile"]], "cudf.Series.to_arrow": [[429, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[430, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[431, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[432, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[433, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[434, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[435, "cudf-series-to-json"]], "cudf.Series.to_list": [[436, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[437, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[438, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[439, "cudf-series-to-string"]], "cudf.Series.tolist": [[440, "cudf-series-tolist"]], "cudf.Series.transpose": [[441, "cudf-series-transpose"]], "cudf.Series.truediv": [[442, "cudf-series-truediv"]], "cudf.Series.unique": [[443, "cudf-series-unique"]], "cudf.Series.update": [[444, "cudf-series-update"]], "cudf.Series.valid_count": [[445, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[446, "cudf-series-value-counts"]], "cudf.Series.values": [[447, "cudf-series-values"]], "cudf.Series.values_host": [[448, "cudf-series-values-host"]], "cudf.Series.var": [[449, "cudf-series-var"]], "cudf.Series.where": [[450, "cudf-series-where"]], "cudf.TimedeltaIndex": [[451, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[452, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[453, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[454, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[455, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[456, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[457, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[458, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[459, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[460, "cudf-uint64index"]], "cudf.concat": [[461, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[462, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[463, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[464, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[465, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[466, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[467, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[468, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[469, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[470, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[471, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[472, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[473, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[474, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[475, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[476, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[477, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[478, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[479, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[480, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[481, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[482, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[483, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[484, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[485, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[486, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[487, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[488, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[489, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[490, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[491, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[492, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[493, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[494, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[495, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[496, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[497, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[498, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[499, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[500, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[501, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[502, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[503, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[504, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[505, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[506, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[507, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[508, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[509, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[510, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[511, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[512, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[513, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[514, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[515, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[516, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[517, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[518, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[519, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[520, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[521, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[522, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[523, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[524, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[525, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[526, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[527, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[528, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[529, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[530, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[531, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[532, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[533, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[534, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[535, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[536, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[537, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[538, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[539, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[540, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[541, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[542, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[543, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[544, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[545, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[546, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[547, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[548, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[549, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[550, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[551, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[552, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[553, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[554, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[555, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[556, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[557, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[558, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[559, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[560, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[561, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[562, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[563, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[564, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[565, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[566, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[567, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[568, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[569, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[570, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[571, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[572, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[573, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[574, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[575, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[576, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[577, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[578, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[579, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[580, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[581, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[582, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[583, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[584, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[585, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[586, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[587, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[588, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[589, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[590, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[591, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[592, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[593, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[594, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[595, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[596, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[597, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[598, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[599, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[600, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[601, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[602, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[603, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[604, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[605, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[606, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[607, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[608, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[609, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[610, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[611, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[612, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[613, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[614, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[615, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[616, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[617, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[618, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[619, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[620, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[621, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[622, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[623, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[624, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[625, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[626, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[627, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[628, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[629, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[630, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[631, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[632, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[633, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[634, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[635, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[636, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[637, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[638, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[639, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[640, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[641, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[642, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[643, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[644, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[645, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[646, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[647, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[648, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[649, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[650, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[651, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[652, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[653, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[654, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[655, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[656, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[657, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[658, "cudf-core-window-rolling-rolling-var"]], "cudf.crosstab": [[659, "cudf-crosstab"]], "cudf.cut": [[660, "cudf-cut"]], "cudf.describe_option": [[661, "cudf-describe-option"]], "cudf.from_dlpack": [[662, "cudf-from-dlpack"]], "cudf.get_dummies": [[663, "cudf-get-dummies"]], "cudf.get_option": [[664, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[665, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[666, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[667, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[668, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[669, "cudf-melt"]], "cudf.pivot": [[670, "cudf-pivot"]], "cudf.pivot_table": [[671, "cudf-pivot-table"]], "cudf.read_avro": [[672, "cudf-read-avro"]], "cudf.read_csv": [[673, "cudf-read-csv"]], "cudf.read_feather": [[674, "cudf-read-feather"]], "cudf.read_hdf": [[675, "cudf-read-hdf"]], "cudf.read_json": [[676, "cudf-read-json"]], "Not GPU-accelerated": [[676, null], [676, null], [676, null], [676, null], [676, null], [676, null], [676, null], [676, null], [676, null]], "GPU-accelerated": [[676, null]], "GPU-accelerated experimental feature": [[676, null]], "cudf.read_orc": [[677, "cudf-read-orc"]], "cudf.read_parquet": [[678, "cudf-read-parquet"]], "cudf.read_text": [[679, "cudf-read-text"]], "cudf.set_option": [[680, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[681, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[682, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[683, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[684, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[685, "cudf-to-datetime"]], "cudf.to_numeric": [[686, "cudf-to-numeric"]], "cudf.unstack": [[687, "cudf-unstack"]], "DataFrame": [[688, "dataframe"]], "Constructor": [[688, "constructor"], [697, "constructor"], [700, "constructor"]], "Attributes and underlying data": [[688, "attributes-and-underlying-data"]], "Conversion": [[688, "conversion"], [693, "conversion"], [693, "id3"], [693, "id4"], [697, "conversion"]], "Indexing, iteration": [[688, "indexing-iteration"], [691, "indexing-iteration"], [697, "indexing-iteration"]], "Binary operator functions": [[688, "binary-operator-functions"], [697, "binary-operator-functions"]], "Function application, GroupBy & window": [[688, "function-application-groupby-window"], [697, "function-application-groupby-window"]], "Computations / descriptive stats": [[688, "computations-descriptive-stats"], [691, "computations-descriptive-stats"], [697, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[688, "reindexing-selection-label-manipulation"], [697, "reindexing-selection-label-manipulation"]], "Missing data handling": [[688, "missing-data-handling"], [697, "missing-data-handling"]], "Reshaping, sorting, transposing": [[688, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[688, "combining-comparing-joining-merging"], [697, "combining-comparing-joining-merging"]], "Time Series-related": [[688, "time-series-related"], [697, "time-series-related"]], "Serialization / IO / conversion": [[688, "serialization-io-conversion"], [697, "serialization-io-conversion"]], "General Functions": [[689, "general-functions"]], "Data manipulations": [[689, "data-manipulations"]], "Top-level conversions": [[689, "top-level-conversions"]], "Top-level dealing with datetimelike": [[689, "top-level-dealing-with-datetimelike"]], "General Utilities": [[690, "general-utilities"]], "Testing functions": [[690, "testing-functions"]], "GroupBy": [[691, "groupby"], [747, "groupby"]], "Function application": [[691, "function-application"]], "API reference": [[692, "api-reference"]], "API Documentation": [[692, null]], "Index objects": [[693, "index-objects"]], "Index": [[693, "index"]], "Properties": [[693, "properties"]], "Modifying and computations": [[693, "modifying-and-computations"], [693, "id1"]], "Compatibility with MultiIndex": [[693, "compatibility-with-multiindex"]], "Missing values": [[693, "missing-values"]], "Memory usage": [[693, "memory-usage"]], "Sorting": [[693, "sorting"]], "Time-specific operations": [[693, "time-specific-operations"], [693, "id2"]], "Combining / joining / set operations": [[693, "combining-joining-set-operations"]], "Selecting": [[693, "selecting"]], "Numeric Index": [[693, "numeric-index"]], "CategoricalIndex": [[693, "categoricalindex"]], "Categorical components": [[693, "categorical-components"]], "IntervalIndex": [[693, "intervalindex"]], "IntervalIndex components": [[693, "intervalindex-components"]], "MultiIndex": [[693, "multiindex"], [710, "multiindex"]], "MultiIndex constructors": [[693, "multiindex-constructors"]], "MultiIndex properties": [[693, "multiindex-properties"]], "MultiIndex components": [[693, "multiindex-components"]], "MultiIndex selecting": [[693, "multiindex-selecting"]], "DatetimeIndex": [[693, "datetimeindex"]], "Time/date components": [[693, "time-date-components"]], "TimedeltaIndex": [[693, "timedeltaindex"]], "Components": [[693, "components"]], "Input/output": [[694, "input-output"]], "CSV": [[694, "csv"], [710, "csv"]], "Text": [[694, "text"]], "JSON": [[694, "json"]], "Parquet": [[694, "parquet"], [710, "parquet"]], "ORC": [[694, "orc"], [710, "orc"]], "HDFStore: PyTables (HDF5)": [[694, "hdfstore-pytables-hdf5"]], "Feather": [[694, "feather"]], "Avro": [[694, "avro"]], "List handling": [[695, "list-handling"], [697, "list-handling"]], "cudf Options": [[696, "cudf-options"]], "Series": [[697, "series"]], "Attributes": [[697, "attributes"]], "Reshaping, sorting": [[697, "reshaping-sorting"]], "Accessors": [[697, "accessors"]], "Datetimelike properties": [[697, "datetimelike-properties"]], "Datetime properties": [[697, "datetime-properties"]], "Datetime methods": [[697, "datetime-methods"]], "Timedelta properties": [[697, "timedelta-properties"]], "String handling": [[697, "string-handling"], [698, "string-handling"]], "Categorical accessor": [[697, "categorical-accessor"]], "Struct handling": [[697, "struct-handling"], [699, "struct-handling"]], "SubwordTokenizer": [[700, "subwordtokenizer"]], "Window": [[701, "window"]], "Rolling window functions": [[701, "rolling-window-functions"]], "Benchmarking cuDF": [[702, "benchmarking-cudf"]], "Benchmark organization": [[702, "benchmark-organization"]], "Running benchmarks": [[702, "running-benchmarks"]], "Benchmark contents": [[702, "benchmark-contents"]], "Benchmark configuration": [[702, "benchmark-configuration"]], "Writing benchmarks": [[702, "writing-benchmarks"]], "Parametrizing tests": [[702, "parametrizing-tests"]], "Comparing to pandas": [[702, "comparing-to-pandas"], [704, "comparing-to-pandas"]], "Testing benchmarks": [[702, "testing-benchmarks"]], "Profiling": [[702, "profiling"]], "Advanced Topics": [[702, "advanced-topics"]], "Understanding benchmark_with_object": [[702, "understanding-benchmark-with-object"]], "Fixture unions": [[702, "fixture-unions"]], "The benchmark_with_object decorator": [[702, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[703, "contributing-guide"]], "Directory structure and file naming": [[703, "directory-structure-and-file-naming"]], "Code style": [[703, "code-style"]], "Deprecating and removing code": [[703, "deprecating-and-removing-code"]], "pandas compatibility": [[703, "pandas-compatibility"]], "Python vs Cython": [[703, "python-vs-cython"]], "Exception handling": [[703, "exception-handling"]], "Handling libcudf Exceptions": [[703, "handling-libcudf-exceptions"]], "Writing documentation": [[704, "writing-documentation"]], "Docstrings": [[704, "docstrings"]], "Published documentation": [[704, "published-documentation"]], "Writing documentation pages": [[704, "writing-documentation-pages"]], "Building documentation": [[704, "building-documentation"]], "Requirements": [[704, "requirements"]], "Building and viewing docs": [[704, "building-and-viewing-docs"]], "Documenting cuDF internals": [[704, "documenting-cudf-internals"]], "Developer Guide": [[705, "developer-guide"]], "Library Design": [[706, "library-design"]], "The Frame layer": [[706, "the-frame-layer"]], "Frames": [[706, "frames"]], "Indexes": [[706, "indexes"]], "The Column layer": [[706, "the-column-layer"]], "ColumnAccessor": [[706, "columnaccessor"]], "Columns": [[706, "columns"]], "Data types": [[706, "data-types"], [753, "data-types"]], "Buffer": [[706, "buffer"]], "The Cython layer": [[706, "the-cython-layer"]], "Putting It All Together": [[706, "putting-it-all-together"]], "Options": [[707, "options"], [752, "options"]], "Testing cuDF": [[708, "testing-cudf"]], "Tooling": [[708, "tooling"]], "Test organization": [[708, "test-organization"]], "Test contents": [[708, "test-contents"]], "Writing tests": [[708, "writing-tests"]], "Parametrization: custom fixtures and pytest.mark.parametrize": [[708, "parametrization-custom-fixtures-and-pytest-mark-parametrize"]], "Complex parametrizations": [[708, "complex-parametrizations"]], "Testing utility functions": [[708, "testing-utility-functions"]], "Welcome to cuDF\u2019s documentation!": [[709, "welcome-to-cudf-s-documentation"]], "Contents:": [[709, null]], "Indices and tables": [[709, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[710, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[710, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[710, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[710, "object-creation"]], "Viewing Data": [[710, "viewing-data"]], "Selection": [[710, "selection"]], "Getting": [[710, "getting"]], "Selection by Label": [[710, "selection-by-label"]], "Selection by Position": [[710, "selection-by-position"]], "Boolean Indexing": [[710, "boolean-indexing"]], "Missing Data": [[710, "missing-data"]], "Operations": [[710, "operations"]], "Stats": [[710, "stats"]], "Applymap": [[710, "applymap"]], "Histogramming": [[710, "histogramming"]], "String Methods": [[710, "string-methods"]], "Concat": [[710, "concat"]], "Join": [[710, "join"]], "Grouping": [[710, "grouping"], [747, "grouping"]], "Transpose": [[710, "transpose"]], "Time Series": [[710, "time-series"]], "Categoricals": [[710, "categoricals"]], "Converting Data Representation": [[710, "converting-data-representation"]], "Pandas": [[710, "pandas"]], "Numpy": [[710, "numpy"]], "Arrow": [[710, "arrow"]], "Getting Data In/Out": [[710, "getting-data-in-out"]], "Dask Performance Tips": [[710, "dask-performance-tips"]], "Persisting Data": [[710, "persisting-data"]], "Wait": [[710, "wait"]], "Pandas Compatibility Notes": [[711, "pandas-compatibility-notes"]], "cudf.CategoricalDtype": [[712, "cudf-categoricaldtype"]], "cudf.CategoricalDtype.categories": [[713, "cudf-categoricaldtype-categories"]], "cudf.CategoricalDtype.from_pandas": [[714, "cudf-categoricaldtype-from-pandas"]], "cudf.CategoricalDtype.ordered": [[715, "cudf-categoricaldtype-ordered"]], "cudf.CategoricalDtype.to_pandas": [[716, "cudf-categoricaldtype-to-pandas"]], "cudf.Decimal128Dtype": [[717, "cudf-decimal128dtype"]], "cudf.Decimal128Dtype.from_arrow": [[718, "cudf-decimal128dtype-from-arrow"]], "cudf.Decimal128Dtype.itemsize": [[719, "cudf-decimal128dtype-itemsize"]], "cudf.Decimal128Dtype.precision": [[720, "cudf-decimal128dtype-precision"]], "cudf.Decimal128Dtype.scale": [[721, "cudf-decimal128dtype-scale"]], "cudf.Decimal128Dtype.to_arrow": [[722, "cudf-decimal128dtype-to-arrow"]], "cudf.Decimal32Dtype": [[723, "cudf-decimal32dtype"]], "cudf.Decimal32Dtype.from_arrow": [[724, "cudf-decimal32dtype-from-arrow"]], "cudf.Decimal32Dtype.itemsize": [[725, "cudf-decimal32dtype-itemsize"]], "cudf.Decimal32Dtype.precision": [[726, "cudf-decimal32dtype-precision"]], "cudf.Decimal32Dtype.scale": [[727, "cudf-decimal32dtype-scale"]], "cudf.Decimal32Dtype.to_arrow": [[728, "cudf-decimal32dtype-to-arrow"]], "cudf.Decimal64Dtype": [[729, "cudf-decimal64dtype"]], "cudf.Decimal64Dtype.from_arrow": [[730, "cudf-decimal64dtype-from-arrow"]], "cudf.Decimal64Dtype.itemsize": [[731, "cudf-decimal64dtype-itemsize"]], "cudf.Decimal64Dtype.precision": [[732, "cudf-decimal64dtype-precision"]], "cudf.Decimal64Dtype.scale": [[733, "cudf-decimal64dtype-scale"]], "cudf.Decimal64Dtype.to_arrow": [[734, "cudf-decimal64dtype-to-arrow"]], "cudf.ListDtype": [[735, "cudf-listdtype"]], "cudf.ListDtype.element_type": [[736, "cudf-listdtype-element-type"]], "cudf.ListDtype.from_arrow": [[737, "cudf-listdtype-from-arrow"]], "cudf.ListDtype.leaf_type": [[738, "cudf-listdtype-leaf-type"]], "cudf.ListDtype.to_arrow": [[739, "cudf-listdtype-to-arrow"]], "cudf.StructDtype": [[740, "cudf-structdtype"]], "cudf.StructDtype.fields": [[741, "cudf-structdtype-fields"]], "cudf.StructDtype.from_arrow": [[742, "cudf-structdtype-from-arrow"]], "cudf.StructDtype.to_arrow": [[743, "cudf-structdtype-to-arrow"]], "Interoperability between cuDF and CuPy": [[744, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[744, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[744, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[744, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[744, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[744, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[744, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Multi-GPU with Dask-cuDF": [[745, "multi-gpu-with-dask-cudf"]], "What works": [[745, "what-works"]], "Developing the API": [[745, "developing-the-api"]], "Navigating the API": [[745, "navigating-the-api"]], "Supported Data Types": [[746, "supported-data-types"]], "NumPy data types": [[746, "numpy-data-types"]], "A note on object": [[746, "a-note-on-object"]], "Decimal data types": [[746, "decimal-data-types"]], "Nested data types (List and Struct)": [[746, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[747, "summary-of-supported-operations"]], "Grouping by index levels": [[747, "grouping-by-index-levels"]], "The Grouper object": [[747, "the-grouper-object"]], "Aggregation": [[747, "aggregation"]], "GroupBy apply": [[747, "groupby-apply"]], "Limitations": [[747, "limitations"]], "Transform": [[747, "transform"]], "Rolling window calculations": [[747, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[748, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[748, "series-udfs"]], "Functions with Additional Scalar Arguments": [[748, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[748, "nullable-data"]], "String data": [[748, "string-data"]], "Lower level control with custom numba kernels": [[748, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[748, "dataframe-udfs"]], "String Data": [[748, "id1"]], "Numba kernels for DataFrames": [[748, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[748, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[748, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[748, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[748, "numba-kernels-on-cupy-arrays"]], "Caveats": [[748, "caveats"]], "Summary": [[748, "summary"]], "User Guide": [[749, "user-guide"]], "Input / Output": [[750, "input-output"]], "I/O Supported dtypes": [[750, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[750, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[750, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[750, "id1"]], "Working with missing data": [[751, "working-with-missing-data"]], "How to Detect missing values": [[751, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[751, "float-dtypes-and-missing-data"]], "Datetimes": [[751, "datetimes"]], "Calculations with missing data": [[751, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[751, "sum-product-of-null-nans"]], "NA values in GroupBy": [[751, "na-values-in-groupby"]], "Inserting missing data": [[751, "inserting-missing-data"]], "Filling missing values: fillna": [[751, "filling-missing-values-fillna"]], "Filling with cudf Object": [[751, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[751, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[751, "replacing-generic-values"]], "String/regular expression replacement": [[751, "string-regular-expression-replacement"]], "Numeric replacement": [[751, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[753, "comparison-of-cudf-and-pandas"]], "Supported operations": [[753, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[753, "null-or-missing-values"]], "Iteration": [[753, "iteration"]], "Result ordering": [[753, "result-ordering"]], "Floating-point computation": [[753, "floating-point-computation"]], "Column names": [[753, "column-names"]], "No true \"object\" data type": [[753, "no-true-object-data-type"]], ".apply() function limitations": [[753, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_pandas() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[60, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[61, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[62, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[63, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[64, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[65, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[66, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[67, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[68, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[69, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[70, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[71, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[72, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[73, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[74, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[75, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[76, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[77, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[78, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[79, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[80, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[81, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[82, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[84, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[85, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[86, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[87, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[88, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[89, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[90, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[91, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[92, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[93, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[94, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[95, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[96, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[97, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[98, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[99, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[100, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[101, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[102, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[103, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[104, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[105, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[106, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[107, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[108, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[109, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[110, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[111, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[112, "cudf.DataFrame.pivot"]], "pivot_table() (cudf.dataframe method)": [[113, "cudf.DataFrame.pivot_table"]], "pop() (cudf.dataframe method)": [[114, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[115, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[116, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[117, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[118, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[119, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[120, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[121, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[122, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[123, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[124, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[125, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[126, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[127, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[128, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[129, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[130, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[131, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[132, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[133, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[134, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[135, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[136, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[137, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[138, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[139, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[140, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[141, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[142, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[143, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[144, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[145, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[146, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[147, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[148, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[149, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[150, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[151, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[152, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[153, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[154, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[155, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[156, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[157, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[158, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[159, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[160, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[161, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[175, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[176, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[177, "cudf.DataFrame.truediv"]], "unstack() (cudf.dataframe method)": [[178, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[179, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[180, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[181, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[182, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[183, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[184, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[185, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[186, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[187, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[188, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[190, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[191, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[193, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[194, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[196, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[199, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[200, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[202, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[203, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[204, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[205, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[206, "cudf.Float64Index"]], "grouper (class in cudf)": [[207, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[207, "cudf.Grouper.__init__"]], "index (class in cudf)": [[208, "cudf.Index"]], "any() (cudf.index method)": [[209, "cudf.Index.any"]], "append() (cudf.index method)": [[210, "cudf.Index.append"]], "copy() (cudf.index method)": [[211, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[212, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[213, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[214, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[215, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[216, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[217, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[218, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[219, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[220, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[221, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[222, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[223, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[224, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[225, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[226, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[227, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[228, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[229, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[230, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[231, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[232, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[233, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[234, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[235, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[236, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[237, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[238, "cudf.Index.isin"]], "isna() (cudf.index method)": [[239, "cudf.Index.isna"]], "join() (cudf.index method)": [[240, "cudf.Index.join"]], "names (cudf.index property)": [[241, "cudf.Index.names"]], "nlevels (cudf.index property)": [[242, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[243, "cudf.Index.notna"]], "rename() (cudf.index method)": [[244, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[245, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[246, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[247, "cudf.Index.set_names"]], "size (cudf.index property)": [[248, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[249, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[250, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[251, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[252, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[253, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[254, "cudf.Index.to_series"]], "union() (cudf.index method)": [[255, "cudf.Index.union"]], "unique() (cudf.index method)": [[256, "cudf.Index.unique"]], "values (cudf.index property)": [[257, "cudf.Index.values"]], "int64index (class in cudf)": [[258, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[259, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[259, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[260, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[261, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[262, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[263, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[264, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[265, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[266, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[267, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[268, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[269, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[270, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[271, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[272, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[273, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[274, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[275, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[276, "cudf.RangeIndex"]], "series (class in cudf)": [[277, "cudf.Series"]], "t (cudf.series property)": [[278, "cudf.Series.T"]], "__array__() (cudf.series method)": [[279, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[280, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[281, "cudf.Series.abs"]], "add() (cudf.series method)": [[282, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[283, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[284, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[285, "cudf.Series.all"]], "any() (cudf.series method)": [[286, "cudf.Series.any"]], "append() (cudf.series method)": [[287, "cudf.Series.append"]], "apply() (cudf.series method)": [[288, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[289, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[290, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[291, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[292, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[293, "cudf.Series.backfill"]], "between() (cudf.series method)": [[294, "cudf.Series.between"]], "bfill() (cudf.series method)": [[295, "cudf.Series.bfill"]], "cat (cudf.series property)": [[296, "cudf.Series.cat"]], "clip() (cudf.series method)": [[297, "cudf.Series.clip"]], "copy() (cudf.series method)": [[298, "cudf.Series.copy"]], "corr() (cudf.series method)": [[299, "cudf.Series.corr"]], "count() (cudf.series method)": [[300, "cudf.Series.count"]], "cov() (cudf.series method)": [[301, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[302, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[303, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[304, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[305, "cudf.Series.cumsum"]], "data (cudf.series property)": [[306, "cudf.Series.data"]], "describe() (cudf.series method)": [[307, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[308, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[309, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[310, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[311, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[312, "cudf.Series.digitize"]], "div() (cudf.series method)": [[313, "cudf.Series.div"]], "divide() (cudf.series method)": [[314, "cudf.Series.divide"]], "dot() (cudf.series method)": [[315, "cudf.Series.dot"]], "drop() (cudf.series method)": [[316, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[317, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[318, "cudf.Series.dropna"]], "dt (cudf.series property)": [[319, "cudf.Series.dt"]], "dtype (cudf.series property)": [[320, "cudf.Series.dtype"]], "empty (cudf.series property)": [[321, "cudf.Series.empty"]], "eq() (cudf.series method)": [[322, "cudf.Series.eq"]], "equals() (cudf.series method)": [[323, "cudf.Series.equals"]], "explode() (cudf.series method)": [[324, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[325, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[326, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[327, "cudf.Series.fillna"]], "first() (cudf.series method)": [[328, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[329, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[330, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[331, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[332, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[333, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[334, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[335, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[336, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[337, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[338, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[339, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[340, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[341, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[342, "cudf.Series.iloc"]], "index (cudf.series property)": [[343, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[344, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[345, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[346, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[347, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[348, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[349, "cudf.Series.isin"]], "isna() (cudf.series method)": [[350, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[351, "cudf.Series.isnull"]], "items() (cudf.series method)": [[352, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[353, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[354, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[355, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[356, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[357, "cudf.Series.last"]], "le() (cudf.series method)": [[358, "cudf.Series.le"]], "list (cudf.series property)": [[359, "cudf.Series.list"]], "loc (cudf.series property)": [[360, "cudf.Series.loc"]], "lt() (cudf.series method)": [[361, "cudf.Series.lt"]], "map() (cudf.series method)": [[362, "cudf.Series.map"]], "mask() (cudf.series method)": [[363, "cudf.Series.mask"]], "max() (cudf.series method)": [[364, "cudf.Series.max"]], "mean() (cudf.series method)": [[365, "cudf.Series.mean"]], "median() (cudf.series method)": [[366, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[367, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[368, "cudf.Series.min"]], "mod() (cudf.series method)": [[369, "cudf.Series.mod"]], "mode() (cudf.series method)": [[370, "cudf.Series.mode"]], "mul() (cudf.series method)": [[371, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[372, "cudf.Series.multiply"]], "name (cudf.series property)": [[373, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[374, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[375, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[376, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[377, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[378, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[379, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[380, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[381, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[382, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[383, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[384, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[385, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[386, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[387, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[388, "cudf.Series.pow"]], "prod() (cudf.series method)": [[389, "cudf.Series.prod"]], "product() (cudf.series method)": [[390, "cudf.Series.product"]], "quantile() (cudf.series method)": [[391, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[392, "cudf.Series.radd"]], "rank() (cudf.series method)": [[393, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[394, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[395, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[396, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[397, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[398, "cudf.Series.replace"]], "resample() (cudf.series method)": [[399, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[400, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[401, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[402, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[403, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[404, "cudf.Series.rolling"]], "round() (cudf.series method)": [[405, "cudf.Series.round"]], "rpow() (cudf.series method)": [[406, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[407, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[408, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[409, "cudf.Series.sample"]], "scale() (cudf.series method)": [[410, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[411, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[412, "cudf.Series.serialize"]], "shape (cudf.series property)": [[413, "cudf.Series.shape"]], "shift() (cudf.series method)": [[414, "cudf.Series.shift"]], "size (cudf.series property)": [[415, "cudf.Series.size"]], "skew() (cudf.series method)": [[416, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[417, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[418, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[419, "cudf.Series.std"]], "str (cudf.series property)": [[420, "cudf.Series.str"]], "struct (cudf.series property)": [[421, "cudf.Series.struct"]], "sub() (cudf.series method)": [[422, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[423, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[424, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[425, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[426, "cudf.Series.tail"]], "take() (cudf.series method)": [[427, "cudf.Series.take"]], "tile() (cudf.series method)": [[428, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[429, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[430, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[431, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[432, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[433, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[434, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[435, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[436, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[437, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[438, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[439, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[440, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[441, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[442, "cudf.Series.truediv"]], "unique() (cudf.series method)": [[443, "cudf.Series.unique"]], "update() (cudf.series method)": [[444, "cudf.Series.update"]], "valid_count (cudf.series property)": [[445, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[446, "cudf.Series.value_counts"]], "values (cudf.series property)": [[447, "cudf.Series.values"]], "values_host (cudf.series property)": [[448, "cudf.Series.values_host"]], "var() (cudf.series method)": [[449, "cudf.Series.var"]], "where() (cudf.series method)": [[450, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[451, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[452, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[453, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[454, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[455, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[456, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[457, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[458, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[459, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[460, "cudf.UInt64Index"]], "concat() (in module cudf)": [[461, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[462, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[463, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[464, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[465, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[466, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[467, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[468, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[469, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[470, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[471, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[472, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[473, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[475, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[476, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[477, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[478, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[479, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[480, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[481, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[482, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[483, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[565, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[566, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[567, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[568, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[569, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[570, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[571, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[572, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[588, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[589, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[590, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[591, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[613, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[614, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[615, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[616, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[617, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[618, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[619, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[620, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[621, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[623, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[624, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[626, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[627, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[629, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[630, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[632, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[633, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[635, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[636, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[638, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[639, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[640, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[641, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[642, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[643, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[644, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[645, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[646, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[647, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[648, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[649, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[650, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[651, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[652, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[653, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[654, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[655, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[656, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[657, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[658, "cudf.core.window.rolling.Rolling.var"]], "crosstab() (in module cudf)": [[659, "cudf.crosstab"]], "cut() (in module cudf)": [[660, "cudf.cut"]], "describe_option() (in module cudf)": [[661, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[662, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[663, "cudf.get_dummies"]], "get_option() (in module cudf)": [[664, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[665, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[666, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[667, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[668, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[669, "cudf.melt"]], "pivot() (in module cudf)": [[670, "cudf.pivot"]], "pivot_table() (in module cudf)": [[671, "cudf.pivot_table"]], "read_avro() (in module cudf)": [[672, "cudf.read_avro"]], "read_csv() (in module cudf)": [[673, "cudf.read_csv"]], "read_feather() (in module cudf)": [[674, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[675, "cudf.read_hdf"]], "read_json() (in module cudf)": [[676, "cudf.read_json"]], "read_orc() (in module cudf)": [[677, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[678, "cudf.read_parquet"]], "read_text() (in module cudf)": [[679, "cudf.read_text"]], "set_option() (in module cudf)": [[680, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[681, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[682, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[683, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[684, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[685, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[686, "cudf.to_numeric"]], "unstack() (in module cudf)": [[687, "cudf.unstack"]], "categoricaldtype (class in cudf)": [[712, "cudf.CategoricalDtype"]], "categories (cudf.categoricaldtype property)": [[712, "cudf.CategoricalDtype.categories"], [713, "cudf.CategoricalDtype.categories"]], "from_pandas() (cudf.categoricaldtype class method)": [[712, "cudf.CategoricalDtype.from_pandas"], [714, "cudf.CategoricalDtype.from_pandas"]], "ordered (cudf.categoricaldtype property)": [[712, "cudf.CategoricalDtype.ordered"], [715, "cudf.CategoricalDtype.ordered"]], "to_pandas() (cudf.categoricaldtype method)": [[712, "cudf.CategoricalDtype.to_pandas"], [716, "cudf.CategoricalDtype.to_pandas"]], "decimal128dtype (class in cudf)": [[717, "cudf.Decimal128Dtype"]], "from_arrow() (cudf.decimal128dtype class method)": [[717, "cudf.Decimal128Dtype.from_arrow"], [718, "cudf.Decimal128Dtype.from_arrow"]], "itemsize (cudf.decimal128dtype property)": [[717, "cudf.Decimal128Dtype.itemsize"], [719, "cudf.Decimal128Dtype.itemsize"]], "precision (cudf.decimal128dtype property)": [[717, "cudf.Decimal128Dtype.precision"], [720, "cudf.Decimal128Dtype.precision"]], "scale (cudf.decimal128dtype property)": [[717, "cudf.Decimal128Dtype.scale"], [721, "cudf.Decimal128Dtype.scale"]], "to_arrow() (cudf.decimal128dtype method)": [[717, "cudf.Decimal128Dtype.to_arrow"], [722, "cudf.Decimal128Dtype.to_arrow"]], "decimal32dtype (class in cudf)": [[723, "cudf.Decimal32Dtype"]], "from_arrow() (cudf.decimal32dtype class method)": [[723, "cudf.Decimal32Dtype.from_arrow"], [724, "cudf.Decimal32Dtype.from_arrow"]], "itemsize (cudf.decimal32dtype property)": [[723, "cudf.Decimal32Dtype.itemsize"], [725, "cudf.Decimal32Dtype.itemsize"]], "precision (cudf.decimal32dtype property)": [[723, "cudf.Decimal32Dtype.precision"], [726, "cudf.Decimal32Dtype.precision"]], "scale (cudf.decimal32dtype property)": [[723, "cudf.Decimal32Dtype.scale"], [727, "cudf.Decimal32Dtype.scale"]], "to_arrow() (cudf.decimal32dtype method)": [[723, "cudf.Decimal32Dtype.to_arrow"], [728, "cudf.Decimal32Dtype.to_arrow"]], "decimal64dtype (class in cudf)": [[729, "cudf.Decimal64Dtype"]], "from_arrow() (cudf.decimal64dtype class method)": [[729, "cudf.Decimal64Dtype.from_arrow"], [730, "cudf.Decimal64Dtype.from_arrow"]], "itemsize (cudf.decimal64dtype property)": [[729, "cudf.Decimal64Dtype.itemsize"], [731, "cudf.Decimal64Dtype.itemsize"]], "precision (cudf.decimal64dtype property)": [[729, "cudf.Decimal64Dtype.precision"], [732, "cudf.Decimal64Dtype.precision"]], "scale (cudf.decimal64dtype property)": [[729, "cudf.Decimal64Dtype.scale"], [733, "cudf.Decimal64Dtype.scale"]], "to_arrow() (cudf.decimal64dtype method)": [[729, "cudf.Decimal64Dtype.to_arrow"], [734, "cudf.Decimal64Dtype.to_arrow"]], "listdtype (class in cudf)": [[735, "cudf.ListDtype"]], "element_type (cudf.listdtype property)": [[735, "cudf.ListDtype.element_type"], [736, "cudf.ListDtype.element_type"]], "from_arrow() (cudf.listdtype class method)": [[735, "cudf.ListDtype.from_arrow"], [737, "cudf.ListDtype.from_arrow"]], "leaf_type (cudf.listdtype property)": [[735, "cudf.ListDtype.leaf_type"], [738, "cudf.ListDtype.leaf_type"]], "to_arrow() (cudf.listdtype method)": [[735, "cudf.ListDtype.to_arrow"], [739, "cudf.ListDtype.to_arrow"]], "structdtype (class in cudf)": [[740, "cudf.StructDtype"]], "fields (cudf.structdtype property)": [[740, "cudf.StructDtype.fields"], [741, "cudf.StructDtype.fields"]], "from_arrow() (cudf.structdtype class method)": [[740, "cudf.StructDtype.from_arrow"], [742, "cudf.StructDtype.from_arrow"]], "to_arrow() (cudf.structdtype method)": [[740, "cudf.StructDtype.to_arrow"], [743, "cudf.StructDtype.to_arrow"]]}})