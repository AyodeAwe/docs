Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 128, 170, 184, 205, 206, 207, 211, 252, 257, 258, 262, 275, 276, 307, 437, 450, 459, 648, 663, 678, 679, 680, 681, 689, 699, 701, 703, 709], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 135, 136, 137, 142, 146, 152, 153, 154, 155, 156, 160, 164, 166, 167, 176, 178, 181, 183, 184, 185, 190, 199, 205, 207, 213, 219, 225, 227, 228, 229, 230, 231, 235, 236, 239, 245, 250, 257, 258, 259, 265, 276, 281, 287, 289, 295, 297, 306, 309, 312, 313, 314, 315, 321, 327, 328, 330, 331, 332, 333, 334, 335, 338, 340, 343, 356, 357, 360, 362, 363, 364, 367, 368, 370, 371, 374, 375, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 400, 401, 402, 405, 406, 407, 408, 411, 414, 421, 422, 423, 424, 431, 433, 434, 441, 445, 447, 449, 450, 459, 470, 481, 485, 487, 495, 523, 529, 552, 555, 556, 558, 559, 560, 561, 562, 563, 577, 581, 582, 583, 585, 586, 594, 600, 601, 602, 603, 608, 611, 615, 617, 623, 638, 658, 660, 661, 668, 669, 670, 673, 674, 675, 679, 688, 689, 699, 700, 705, 707, 708, 709, 713, 714], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 152, 153, 154, 155, 161, 162, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 183, 184, 201, 202, 205, 206, 207, 214, 217, 219, 221, 222, 226, 238, 239, 242, 244, 246, 248, 249, 251, 253, 254, 257, 258, 259, 260, 262, 266, 267, 268, 270, 274, 275, 276, 278, 281, 284, 285, 288, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 306, 312, 313, 315, 316, 317, 320, 321, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 349, 350, 354, 355, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 377, 378, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 413, 414, 415, 416, 418, 421, 422, 423, 424, 428, 429, 432, 434, 436, 437, 438, 441, 442, 445, 448, 449, 450, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 482, 483, 485, 487, 488, 492, 494, 495, 496, 497, 501, 504, 505, 514, 525, 526, 527, 530, 540, 541, 543, 544, 547, 548, 549, 551, 552, 553, 554, 559, 564, 570, 571, 577, 579, 580, 581, 582, 583, 584, 586, 590, 591, 599, 600, 601, 602, 603, 606, 608, 611, 615, 658, 659, 661, 663, 667, 668, 669, 670, 671, 673, 674, 675, 676, 682, 683, 684, 706, 707, 712, 715], "categori": [0, 2, 21, 36, 93, 94, 228, 236, 289, 295, 306, 324, 330, 461, 462, 463, 466, 467, 468, 469, 501, 534, 658, 661, 678, 681, 703, 706, 709, 710, 714, 717], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 121, 140, 142, 149, 156, 166, 171, 179, 184, 205, 239, 245, 248, 257, 288, 289, 314, 316, 324, 334, 369, 376, 379, 392, 410, 411, 417, 433, 445, 450, 459, 462, 463, 468, 469, 477, 479, 489, 558, 604, 658, 660, 663, 670, 673, 678, 679, 680, 681, 682, 699, 706, 711, 713], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 162, 168, 170, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 214, 217, 219, 220, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 243, 244, 246, 248, 249, 252, 253, 254, 257, 258, 259, 262, 264, 271, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 295, 296, 297, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 426, 429, 432, 436, 437, 441, 442, 443, 445, 448, 449, 450, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 604, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 658, 661, 670, 673, 675, 678, 679, 680, 681, 682, 683, 684, 694, 699, 703, 706, 707, 708, 710, 711, 712, 713, 717], "copi": [0, 5, 21, 44, 45, 46, 54, 123, 124, 162, 164, 168, 174, 175, 184, 205, 207, 248, 250, 257, 258, 259, 262, 275, 289, 315, 326, 394, 395, 429, 431, 436, 450, 459, 461, 462, 463, 467, 468, 469, 529, 540, 565, 660, 675, 701, 703, 714, 717], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 117, 121, 123, 124, 126, 128, 132, 137, 140, 141, 143, 148, 149, 158, 160, 162, 166, 167, 170, 171, 178, 179, 183, 184, 205, 207, 214, 215, 219, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 242, 243, 246, 248, 254, 257, 258, 259, 260, 262, 270, 275, 276, 284, 285, 286, 289, 293, 296, 297, 306, 311, 314, 315, 316, 317, 320, 321, 322, 323, 326, 332, 333, 334, 335, 336, 343, 348, 349, 350, 357, 360, 362, 366, 369, 373, 375, 377, 378, 392, 397, 399, 403, 408, 410, 416, 417, 426, 429, 433, 434, 437, 443, 445, 449, 450, 459, 460, 461, 462, 463, 467, 468, 469, 471, 472, 477, 484, 487, 492, 493, 494, 495, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 531, 534, 540, 547, 552, 553, 563, 580, 581, 582, 583, 600, 601, 602, 603, 604, 608, 611, 615, 625, 626, 628, 629, 630, 631, 649, 658, 661, 663, 664, 670, 673, 675, 678, 679, 680, 681, 682, 699, 704, 706, 707, 708, 711, 712, 715], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 114, 117, 119, 120, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 146, 148, 149, 152, 153, 161, 166, 169, 171, 174, 176, 177, 178, 184, 201, 202, 205, 207, 220, 239, 243, 246, 248, 251, 253, 257, 258, 259, 262, 263, 264, 266, 267, 268, 271, 274, 275, 276, 281, 288, 289, 306, 312, 313, 315, 316, 321, 328, 333, 334, 335, 341, 348, 349, 350, 357, 359, 360, 363, 364, 367, 368, 370, 371, 375, 377, 378, 387, 390, 391, 393, 395, 399, 400, 401, 402, 404, 405, 406, 407, 408, 414, 416, 421, 422, 432, 433, 441, 450, 457, 458, 459, 460, 547, 566, 569, 588, 614, 632, 659, 661, 662, 663, 666, 667, 668, 670, 672, 673, 677, 678, 679, 680, 681, 684, 699, 701, 702, 703, 704, 706, 710, 711, 712, 713, 715], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 119, 123, 124, 125, 126, 127, 132, 133, 137, 139, 142, 161, 166, 167, 169, 181, 183, 192, 211, 212, 219, 224, 238, 242, 244, 245, 262, 264, 282, 283, 286, 306, 307, 308, 311, 315, 318, 320, 326, 327, 330, 332, 334, 337, 339, 356, 362, 381, 386, 396, 397, 398, 403, 404, 408, 411, 433, 434, 442, 447, 449, 460, 470, 480, 482, 487, 488, 492, 493, 498, 505, 510, 526, 527, 529, 540, 550, 551, 553, 555, 556, 560, 561, 562, 569, 588, 594, 604, 607, 612, 614, 625, 649, 650, 658, 660, 663, 667, 670, 672, 683, 699, 700, 701, 703, 706, 711, 712, 713, 715], "categor": [0, 1, 2, 21, 36, 93, 94, 227, 228, 229, 230, 231, 235, 236, 289, 295, 306, 330, 658, 661, 675, 678, 679, 680, 681, 703, 710, 711, 713, 717], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 166, 167, 168, 170, 171, 173, 176, 178, 179, 181, 182, 183, 202, 207, 214, 216, 217, 219, 220, 226, 232, 233, 234, 237, 238, 242, 248, 249, 253, 255, 260, 269, 276, 280, 281, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 429, 433, 434, 436, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 458, 460, 467, 469, 470, 471, 472, 475, 477, 480, 482, 486, 487, 489, 495, 501, 502, 503, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 531, 537, 539, 540, 546, 547, 551, 552, 561, 563, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 599, 600, 601, 602, 603, 606, 607, 608, 610, 611, 613, 615, 616, 649, 650, 658, 661, 662, 667, 668, 670, 673, 675, 677, 679, 680, 681, 683, 692, 694, 695, 696, 699, 701, 703, 704, 706, 707, 708, 710, 711, 712, 713, 714, 716], "repres": [0, 23, 127, 144, 151, 161, 167, 182, 184, 276, 291, 293, 398, 412, 418, 434, 448, 450, 474, 482, 501, 502, 503, 520, 622, 655, 657, 658, 661, 699, 703, 710, 715, 717], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 140, 158, 167, 178, 192, 198, 209, 238, 242, 248, 249, 270, 288, 297, 311, 317, 320, 324, 326, 336, 343, 348, 349, 350, 377, 378, 381, 386, 410, 426, 434, 460, 472, 478, 480, 487, 489, 492, 498, 526, 527, 537, 542, 546, 553, 607, 625, 626, 627, 628, 629, 630, 631, 637, 649, 658, 661, 670, 673, 688, 700, 703, 707, 712], "anoth": [0, 40, 162, 166, 168, 178, 286, 310, 361, 429, 433, 436, 563, 703], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 146, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 193, 201, 250, 251, 266, 268, 274, 276, 281, 282, 283, 284, 285, 288, 289, 295, 301, 302, 303, 304, 306, 312, 313, 315, 317, 320, 321, 322, 326, 328, 333, 334, 335, 337, 338, 341, 354, 355, 357, 359, 360, 363, 364, 367, 368, 370, 371, 375, 383, 387, 388, 389, 390, 391, 392, 393, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 414, 416, 418, 421, 422, 423, 425, 427, 429, 431, 432, 433, 434, 436, 438, 441, 448, 457, 460, 569, 572, 578, 580, 581, 582, 583, 585, 586, 588, 592, 593, 594, 600, 601, 602, 603, 608, 610, 611, 613, 614, 615, 616, 632, 648, 649, 650, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 688, 689, 699, 702, 706, 707, 708, 709, 711, 712, 713, 715], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 185, 190, 199, 201, 202, 205, 207, 209, 211, 212, 214, 217, 219, 220, 222, 224, 226, 237, 239, 243, 244, 246, 248, 249, 250, 251, 253, 254, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 343, 348, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 379, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 441, 443, 445, 448, 449, 450, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 482, 483, 484, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 508, 509, 525, 527, 528, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 563, 564, 566, 569, 570, 571, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 617, 623, 638, 640, 648, 649, 650, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 699, 700, 701, 714, 715], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 75, 76, 88, 94, 104, 105, 117, 118, 119, 121, 123, 125, 126, 137, 140, 158, 162, 167, 168, 183, 184, 205, 207, 214, 226, 237, 238, 242, 244, 248, 249, 254, 257, 258, 259, 260, 262, 267, 270, 276, 286, 288, 296, 305, 311, 324, 329, 330, 331, 334, 349, 350, 362, 377, 378, 390, 392, 396, 397, 408, 410, 426, 428, 429, 434, 436, 449, 450, 459, 486, 490, 498, 525, 541, 585, 650, 658, 661, 673, 682, 703, 706, 707, 713], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 61, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 114, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 152, 153, 158, 166, 167, 176, 177, 179, 183, 184, 185, 190, 199, 205, 207, 214, 217, 226, 237, 249, 254, 257, 258, 259, 264, 266, 268, 276, 281, 286, 293, 296, 306, 312, 313, 314, 315, 318, 321, 323, 326, 328, 330, 331, 333, 334, 335, 348, 357, 360, 362, 368, 370, 371, 375, 387, 390, 391, 392, 393, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 421, 422, 426, 433, 434, 441, 449, 450, 459, 460, 461, 467, 468, 469, 478, 487, 490, 492, 498, 508, 509, 513, 525, 534, 540, 541, 547, 553, 577, 585, 617, 623, 638, 650, 658, 661, 669, 670, 673, 674, 675, 676, 678, 679, 681, 682, 684, 689, 690, 692, 694, 695, 696, 699, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 715, 717], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 171, 173, 176, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 205, 207, 209, 214, 217, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 243, 246, 248, 254, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 275, 276, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 348, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 437, 438, 441, 442, 443, 445, 448, 449, 450, 454, 455, 456, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 578, 580, 586, 588, 589, 592, 594, 604, 607, 610, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 657, 658, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 679, 680, 681, 682, 683, 684, 706, 707, 708, 710, 711, 712, 715, 717], "dimension": [0, 144, 184, 205, 207, 257, 258, 259, 262, 276, 412, 450, 459, 547, 552, 658], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 106, 107, 109, 110, 115, 116, 123, 125, 126, 127, 132, 141, 142, 148, 150, 151, 154, 156, 159, 162, 167, 168, 171, 179, 180, 182, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 202, 203, 204, 205, 207, 211, 212, 213, 224, 225, 229, 237, 244, 245, 246, 248, 249, 253, 257, 260, 261, 262, 266, 270, 276, 282, 283, 287, 288, 290, 305, 306, 307, 308, 309, 314, 316, 319, 322, 327, 330, 331, 338, 339, 340, 348, 356, 366, 376, 379, 382, 385, 388, 389, 396, 397, 398, 399, 403, 411, 416, 418, 423, 427, 429, 434, 436, 445, 446, 448, 458, 459, 460, 461, 464, 467, 468, 469, 479, 482, 484, 485, 487, 489, 490, 491, 493, 495, 496, 499, 501, 508, 509, 512, 513, 520, 523, 525, 531, 532, 533, 534, 537, 538, 540, 541, 546, 547, 550, 552, 557, 558, 563, 564, 581, 582, 583, 585, 586, 589, 594, 600, 601, 602, 603, 608, 610, 611, 613, 615, 617, 618, 619, 620, 621, 623, 624, 633, 634, 635, 636, 638, 639, 640, 641, 642, 649, 650, 655, 657, 658, 659, 662, 667, 670, 672, 673, 674, 675, 676, 677, 682, 683, 688, 700, 701, 702, 704, 706, 707, 708, 709, 710, 712, 714, 715, 717], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 170, 171, 176, 177, 178, 182, 184, 202, 207, 219, 239, 246, 253, 258, 259, 260, 266, 267, 270, 276, 281, 284, 285, 286, 288, 296, 301, 302, 303, 304, 306, 312, 313, 314, 315, 316, 317, 320, 321, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 348, 356, 357, 360, 361, 363, 364, 367, 368, 370, 371, 375, 386, 387, 388, 389, 390, 391, 393, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 416, 417, 418, 421, 422, 423, 433, 434, 437, 441, 443, 445, 448, 450, 458, 468, 469, 471, 473, 474, 477, 482, 487, 492, 493, 495, 498, 499, 501, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 530, 534, 537, 540, 546, 547, 548, 552, 553, 554, 572, 580, 581, 582, 583, 593, 600, 601, 602, 603, 604, 608, 611, 615, 648, 649, 658, 659, 660, 661, 662, 663, 668, 669, 670, 671, 673, 674, 675, 677, 679, 680, 682, 683, 684, 699, 700, 701, 706, 707, 708, 709, 712, 714, 717], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 115, 116, 117, 119, 121, 123, 126, 127, 132, 133, 137, 140, 141, 142, 147, 151, 154, 161, 166, 167, 171, 178, 179, 182, 183, 192, 198, 214, 215, 220, 226, 232, 233, 234, 237, 238, 242, 245, 254, 258, 259, 260, 262, 266, 276, 280, 282, 283, 284, 285, 287, 288, 293, 297, 306, 315, 317, 320, 322, 326, 330, 331, 334, 344, 345, 346, 347, 348, 349, 350, 354, 355, 361, 362, 363, 365, 367, 376, 377, 378, 379, 386, 388, 389, 390, 392, 397, 398, 403, 404, 408, 410, 411, 415, 418, 423, 433, 434, 443, 448, 449, 460, 468, 469, 471, 474, 482, 487, 490, 491, 492, 493, 495, 496, 499, 501, 505, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 525, 530, 531, 534, 540, 541, 547, 548, 550, 552, 553, 554, 559, 561, 562, 563, 564, 565, 581, 582, 583, 594, 600, 601, 602, 603, 604, 608, 611, 615, 625, 626, 627, 628, 629, 630, 631, 637, 640, 649, 650, 658, 661, 663, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 688, 690, 691, 694, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717], "given": [0, 21, 44, 103, 112, 117, 118, 125, 126, 127, 128, 133, 137, 140, 171, 222, 244, 266, 289, 315, 331, 390, 396, 397, 398, 399, 404, 408, 410, 468, 469, 473, 478, 482, 487, 492, 495, 498, 501, 522, 527, 537, 540, 547, 552, 553, 559, 563, 604, 663, 668, 670, 674, 675, 682, 699, 700, 703, 714], "replac": [0, 46, 88, 137, 148, 183, 317, 362, 408, 416, 449, 495, 496, 505, 525, 541, 549, 551, 689, 699, 700, 701, 706, 708, 713, 717], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 120, 121, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 148, 152, 153, 166, 167, 170, 176, 207, 219, 229, 235, 238, 242, 248, 276, 281, 288, 306, 312, 313, 321, 322, 328, 332, 333, 335, 343, 349, 350, 357, 360, 361, 368, 369, 370, 371, 373, 375, 377, 378, 383, 387, 391, 392, 393, 394, 400, 401, 402, 403, 405, 406, 407, 416, 421, 422, 433, 434, 437, 441, 443, 445, 471, 477, 479, 487, 540, 577, 651, 661, 670, 707, 712, 713, 717], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 114, 117, 120, 122, 124, 126, 128, 129, 130, 131, 134, 135, 136, 139, 141, 142, 143, 148, 149, 152, 153, 161, 166, 167, 169, 171, 176, 177, 179, 183, 209, 211, 212, 213, 217, 224, 225, 237, 245, 246, 260, 264, 266, 267, 268, 271, 276, 281, 286, 287, 288, 291, 293, 295, 306, 307, 308, 309, 312, 313, 314, 315, 321, 323, 328, 333, 334, 335, 339, 340, 341, 348, 357, 360, 362, 368, 370, 371, 375, 387, 390, 391, 393, 397, 399, 400, 401, 402, 405, 406, 407, 411, 416, 417, 421, 422, 433, 434, 441, 449, 460, 461, 467, 469, 482, 484, 487, 491, 492, 498, 499, 508, 509, 525, 540, 547, 552, 553, 557, 558, 569, 577, 586, 588, 604, 614, 616, 650, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 684, 689, 701, 703, 705, 706, 708, 709, 711, 712, 713, 714, 715, 717], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 121, 123, 124, 127, 132, 133, 137, 140, 148, 161, 162, 166, 167, 168, 169, 171, 173, 174, 179, 184, 202, 246, 248, 253, 258, 259, 260, 262, 266, 267, 268, 275, 276, 298, 306, 315, 317, 330, 331, 334, 385, 386, 390, 392, 395, 398, 399, 403, 404, 408, 410, 416, 429, 433, 434, 436, 438, 445, 450, 458, 460, 461, 462, 463, 467, 468, 469, 471, 473, 494, 495, 496, 549, 551, 577, 586, 592, 594, 607, 649, 658, 659, 661, 662, 664, 667, 668, 670, 672, 674, 675, 677, 689, 699, 702, 705, 712, 713, 714], "item": [0, 36, 48, 106, 113, 137, 143, 276, 306, 320, 324, 408, 468, 469, 670, 672], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 160, 176, 276, 281, 298, 312, 313, 320, 321, 322, 328, 333, 335, 357, 360, 368, 370, 371, 375, 381, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 468, 488, 650, 658, 699, 700, 701, 703, 706, 708, 710, 712, 717], "uniqu": [0, 36, 112, 124, 139, 179, 260, 262, 267, 270, 276, 306, 324, 347, 383, 445, 604, 658, 661, 668, 673, 689, 706, 707, 711, 717], "here": [0, 36, 306, 538, 669, 670, 674, 675, 699, 701, 703, 708, 712, 714], "also": [0, 15, 36, 54, 94, 123, 124, 126, 128, 132, 133, 248, 306, 326, 361, 395, 397, 399, 403, 404, 443, 487, 488, 490, 497, 500, 504, 505, 508, 509, 513, 520, 534, 537, 544, 546, 658, 663, 673, 674, 675, 699, 700, 701, 702, 703, 705, 706, 708, 710, 711, 712, 714, 715, 717], "thei": [0, 15, 50, 94, 97, 121, 126, 171, 276, 287, 322, 330, 331, 379, 392, 397, 482, 489, 501, 558, 563, 604, 663, 676, 699, 700, 701, 703, 705, 710, 711, 712, 717], "infer": [0, 4, 167, 184, 258, 259, 267, 276, 434, 453, 670, 673, 682, 706], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 113, 117, 123, 124, 127, 128, 137, 143, 148, 149, 150, 164, 166, 167, 171, 175, 178, 179, 183, 187, 189, 198, 211, 212, 214, 216, 219, 220, 250, 258, 259, 260, 264, 265, 266, 267, 268, 270, 276, 286, 287, 306, 307, 308, 315, 317, 329, 330, 332, 334, 361, 362, 385, 394, 395, 398, 399, 408, 416, 417, 419, 431, 433, 434, 443, 449, 460, 473, 475, 477, 478, 482, 484, 493, 494, 495, 496, 500, 501, 530, 532, 533, 534, 535, 536, 540, 547, 548, 549, 551, 552, 554, 577, 581, 582, 583, 589, 594, 600, 601, 602, 603, 604, 605, 608, 611, 615, 619, 621, 637, 648, 649, 650, 658, 660, 661, 667, 668, 669, 670, 671, 672, 673, 674, 682, 683, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 712, 717], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 115, 116, 117, 121, 126, 128, 132, 137, 139, 140, 141, 147, 148, 149, 150, 151, 154, 160, 161, 162, 166, 167, 168, 171, 172, 179, 182, 183, 184, 205, 207, 210, 215, 219, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 246, 248, 254, 257, 258, 259, 262, 275, 276, 284, 285, 286, 287, 288, 289, 293, 296, 297, 301, 302, 303, 304, 306, 311, 314, 315, 316, 317, 320, 321, 322, 323, 332, 333, 334, 335, 336, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 357, 360, 362, 363, 364, 365, 366, 367, 369, 375, 377, 378, 383, 388, 389, 392, 397, 399, 403, 408, 410, 415, 416, 417, 418, 423, 429, 433, 434, 436, 445, 448, 449, 450, 459, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 477, 484, 487, 492, 493, 494, 495, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 531, 534, 537, 540, 546, 547, 552, 553, 572, 580, 581, 582, 583, 593, 600, 601, 602, 603, 604, 608, 611, 615, 625, 626, 628, 629, 630, 631, 648, 649, 658, 663, 670, 672, 673, 674, 678, 679, 680, 681, 682, 712, 714, 715], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 117, 121, 143, 150, 160, 162, 167, 168, 170, 172, 183, 208, 214, 216, 226, 227, 229, 230, 231, 235, 236, 237, 254, 258, 259, 284, 285, 293, 306, 311, 315, 320, 322, 336, 348, 349, 350, 362, 377, 378, 381, 390, 392, 429, 434, 436, 437, 449, 461, 462, 463, 466, 467, 468, 469, 472, 487, 492, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 553, 649, 658, 670, 675, 678, 679, 680, 681, 688, 701, 708], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 152, 153, 154, 156, 164, 168, 169, 171, 173, 176, 182, 184, 201, 207, 211, 212, 214, 217, 220, 226, 232, 244, 245, 248, 250, 251, 270, 273, 274, 275, 276, 280, 281, 286, 287, 290, 293, 296, 297, 306, 307, 308, 311, 312, 313, 314, 321, 322, 327, 328, 330, 331, 333, 334, 335, 337, 338, 343, 344, 356, 357, 360, 368, 370, 371, 372, 375, 376, 379, 387, 388, 389, 390, 391, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 416, 417, 418, 419, 421, 422, 423, 431, 436, 438, 441, 442, 448, 450, 453, 457, 461, 462, 463, 464, 467, 468, 469, 473, 481, 482, 486, 488, 490, 491, 494, 495, 496, 499, 504, 506, 507, 510, 511, 512, 513, 515, 517, 519, 520, 521, 524, 525, 529, 530, 532, 533, 534, 537, 541, 542, 544, 546, 547, 548, 552, 554, 555, 556, 559, 560, 563, 565, 580, 586, 594, 604, 607, 648, 649, 658, 660, 661, 663, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 689, 691, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 184, 192, 205, 207, 208, 212, 214, 217, 219, 220, 227, 228, 229, 230, 231, 232, 235, 236, 237, 244, 245, 246, 248, 250, 257, 260, 266, 268, 270, 275, 276, 277, 281, 284, 285, 286, 287, 288, 289, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 327, 328, 331, 332, 333, 334, 335, 338, 343, 344, 348, 349, 350, 356, 357, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 377, 378, 379, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 414, 416, 417, 418, 421, 422, 423, 425, 429, 431, 433, 434, 436, 437, 438, 440, 441, 443, 445, 448, 449, 450, 453, 459, 460, 468, 469, 471, 472, 473, 474, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 533, 534, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 578, 586, 589, 592, 594, 604, 607, 610, 612, 613, 617, 623, 625, 626, 628, 629, 630, 631, 638, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717], "treat": [0, 12, 13, 73, 94, 183, 284, 285, 293, 343, 449, 468, 469, 487, 532, 540, 547, 552, 707, 712, 714, 715], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 115, 116, 117, 119, 123, 124, 125, 132, 133, 137, 142, 146, 148, 151, 154, 164, 166, 182, 192, 202, 211, 220, 232, 244, 245, 248, 250, 253, 254, 259, 267, 269, 270, 276, 284, 285, 287, 296, 301, 302, 303, 304, 306, 307, 334, 341, 343, 344, 348, 349, 350, 366, 377, 378, 388, 389, 390, 394, 396, 403, 404, 408, 411, 414, 416, 418, 423, 431, 433, 448, 458, 466, 472, 473, 483, 485, 486, 487, 489, 492, 501, 506, 507, 510, 514, 518, 525, 528, 532, 533, 536, 545, 553, 564, 594, 612, 625, 649, 650, 658, 659, 660, 669, 671, 672, 673, 674, 682, 683, 688, 690, 699, 700, 701, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 717], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 114, 115, 116, 117, 120, 122, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 143, 147, 150, 151, 152, 153, 154, 155, 161, 167, 170, 174, 176, 177, 179, 182, 202, 214, 226, 239, 253, 254, 260, 270, 276, 281, 284, 285, 287, 290, 298, 301, 302, 303, 304, 306, 312, 313, 314, 321, 323, 326, 328, 333, 334, 335, 343, 348, 354, 355, 357, 360, 363, 364, 365, 367, 368, 370, 371, 375, 387, 388, 389, 391, 393, 397, 398, 400, 401, 402, 403, 405, 406, 407, 408, 410, 415, 418, 421, 422, 423, 424, 434, 437, 441, 445, 448, 458, 460, 469, 471, 477, 482, 483, 495, 525, 528, 536, 545, 564, 569, 577, 580, 581, 582, 583, 588, 589, 592, 594, 600, 601, 602, 603, 607, 608, 611, 612, 614, 615, 658, 667, 668, 673, 676, 683, 684, 699, 700, 701, 703, 706, 707, 709, 710, 711, 712, 713, 715], "unord": [0, 94, 463, 658], "categoricaldtyp": [0, 21, 289, 703, 710], "cannot": [0, 54, 71, 137, 167, 217, 226, 326, 376, 379, 408, 434, 534, 580, 663, 699, 700, 710, 711], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 103, 106, 107, 110, 111, 112, 117, 118, 119, 123, 124, 126, 127, 128, 132, 133, 137, 139, 143, 148, 151, 161, 162, 166, 167, 168, 169, 170, 171, 173, 178, 179, 182, 201, 202, 205, 217, 220, 251, 253, 257, 260, 266, 274, 275, 276, 286, 287, 289, 298, 306, 315, 317, 326, 330, 334, 337, 338, 341, 343, 348, 354, 355, 359, 361, 363, 364, 366, 367, 385, 386, 390, 394, 397, 398, 399, 403, 404, 408, 416, 418, 429, 432, 433, 434, 436, 437, 438, 443, 448, 457, 458, 459, 469, 471, 482, 486, 487, 488, 490, 492, 494, 495, 496, 497, 504, 512, 522, 525, 527, 532, 533, 534, 540, 541, 542, 543, 544, 547, 550, 552, 557, 558, 562, 563, 569, 580, 581, 582, 583, 585, 586, 588, 594, 600, 601, 602, 603, 608, 610, 611, 613, 614, 615, 640, 648, 649, 655, 657, 658, 661, 663, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 690, 691, 692, 694, 695, 696, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717], "togeth": [0, 111, 209, 386, 701, 702, 708, 711, 712], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 160, 161, 162, 166, 167, 168, 169, 170, 171, 175, 176, 178, 179, 182, 183, 184, 201, 202, 207, 214, 215, 216, 217, 219, 226, 239, 243, 246, 248, 251, 253, 254, 258, 259, 260, 262, 274, 275, 276, 281, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 301, 302, 303, 304, 306, 310, 312, 313, 314, 315, 316, 317, 321, 323, 326, 328, 332, 333, 334, 335, 337, 338, 343, 354, 355, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 375, 376, 379, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 415, 416, 417, 418, 421, 422, 423, 429, 432, 433, 434, 436, 437, 441, 445, 448, 449, 450, 457, 458, 460, 461, 462, 463, 467, 468, 469, 471, 473, 477, 482, 483, 484, 487, 488, 489, 493, 495, 496, 499, 501, 505, 525, 528, 530, 531, 532, 533, 534, 536, 537, 540, 541, 545, 546, 547, 548, 550, 551, 552, 554, 557, 558, 570, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 594, 599, 600, 601, 602, 603, 604, 606, 608, 611, 615, 648, 649, 655, 657, 658, 661, 663, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 699, 700, 706, 711, 712, 714, 715, 716, 717], "make": [0, 28, 48, 161, 184, 205, 207, 257, 266, 267, 268, 297, 320, 443, 450, 459, 495, 540, 547, 552, 559, 670, 674, 699, 700, 701, 703, 706, 708, 712], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 114, 119, 120, 122, 129, 130, 131, 133, 134, 135, 136, 148, 152, 153, 159, 166, 176, 179, 184, 205, 207, 219, 257, 258, 259, 265, 281, 287, 288, 296, 306, 312, 313, 321, 324, 328, 329, 332, 333, 334, 335, 357, 360, 361, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 404, 405, 406, 407, 416, 421, 422, 427, 433, 441, 450, 459, 501, 525, 539, 612, 648, 649, 650, 658, 660, 663, 670, 673, 675, 676, 682, 683, 689, 699, 700, 703, 705, 708, 711, 712, 713], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 142, 143, 148, 152, 153, 158, 161, 164, 166, 167, 169, 170, 173, 176, 178, 184, 205, 207, 209, 211, 212, 213, 214, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 242, 244, 245, 246, 249, 250, 254, 257, 258, 259, 260, 262, 264, 270, 271, 275, 276, 281, 286, 287, 289, 292, 294, 295, 297, 306, 307, 308, 309, 312, 313, 314, 316, 317, 318, 321, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 349, 350, 353, 357, 360, 361, 366, 368, 370, 371, 372, 375, 377, 378, 384, 386, 387, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 411, 416, 421, 422, 426, 428, 431, 432, 433, 434, 438, 441, 442, 443, 445, 450, 459, 460, 481, 482, 483, 484, 485, 487, 489, 492, 493, 494, 495, 496, 498, 500, 501, 504, 505, 523, 525, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 580, 586, 604, 607, 632, 640, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 666, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 688, 689, 698, 699, 703, 704, 705, 708, 709, 712, 713], "store": [0, 166, 169, 171, 184, 205, 207, 257, 258, 259, 275, 276, 330, 433, 450, 459, 501, 658, 669, 670, 672, 674, 675, 699, 700, 701, 703, 704, 706, 710, 712, 717], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 164, 166, 167, 169, 171, 172, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 257, 258, 259, 260, 262, 264, 267, 268, 269, 270, 272, 274, 275, 276, 281, 286, 287, 288, 291, 296, 297, 301, 302, 303, 304, 306, 312, 313, 315, 317, 318, 320, 321, 323, 324, 326, 327, 328, 329, 331, 333, 334, 335, 341, 343, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 366, 367, 368, 370, 371, 375, 377, 378, 379, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 416, 417, 418, 419, 421, 422, 423, 427, 428, 431, 432, 433, 434, 437, 441, 443, 448, 450, 457, 458, 459, 460, 465, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 578, 580, 589, 617, 623, 638, 649, 658, 663, 667, 668, 670, 673, 674, 675, 679, 680, 681, 684, 689, 699, 701, 705, 707, 709, 712, 713, 715, 717], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 198, 199, 201, 202, 205, 207, 208, 209, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 436, 437, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 573, 577, 578, 580, 581, 582, 583, 586, 587, 588, 589, 592, 594, 595, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 614, 615, 617, 622, 623, 625, 626, 628, 629, 630, 631, 632, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 683, 684, 688, 694, 698, 701, 703, 704, 706, 707, 708, 711, 712], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 207, 209, 214, 217, 219, 220, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 243, 244, 246, 248, 249, 252, 254, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 348, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 432, 437, 438, 441, 442, 443, 445, 448, 449, 450, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 580, 588, 589, 592, 594, 604, 607, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 658, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 679, 680, 681, 682, 683, 684, 699, 700, 701, 703, 706, 707, 708, 710, 711, 712, 715, 717], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 115, 116, 117, 119, 124, 125, 126, 132, 137, 138, 141, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 170, 173, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 203, 204, 207, 209, 214, 217, 219, 220, 226, 227, 228, 229, 230, 231, 235, 236, 239, 243, 246, 248, 252, 254, 259, 262, 263, 264, 265, 266, 270, 271, 275, 276, 284, 285, 286, 288, 289, 290, 291, 293, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 314, 315, 317, 320, 322, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 341, 348, 349, 350, 353, 354, 355, 359, 362, 363, 364, 365, 367, 369, 373, 376, 377, 378, 379, 388, 389, 390, 394, 395, 396, 397, 403, 408, 409, 414, 415, 416, 417, 418, 423, 424, 425, 427, 428, 432, 437, 438, 442, 443, 445, 448, 449, 450, 460, 461, 462, 463, 467, 468, 469, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 577, 588, 589, 592, 594, 607, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 661, 666, 667, 669, 670, 671, 673, 674, 675, 679, 680, 681, 682, 683, 699, 700, 701, 706, 707, 708, 710, 711, 712, 715, 717], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 119, 124, 126, 132, 137, 148, 149, 161, 166, 170, 173, 175, 177, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 204, 219, 226, 231, 252, 254, 259, 287, 306, 330, 332, 334, 349, 350, 366, 377, 378, 395, 397, 403, 408, 416, 417, 419, 433, 437, 438, 477, 563, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 661, 667, 669, 672, 673, 675, 678, 679, 681, 683, 684, 691, 694, 702, 703, 705, 708, 709, 710, 711, 712, 713, 715, 716], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 132, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 204, 219, 226, 231, 254, 259, 270, 330, 332, 334, 349, 350, 377, 378, 403, 437, 520, 580, 589, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 669, 706, 707, 710, 712, 715, 717], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 124, 125, 126, 127, 128, 132, 133, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 170, 173, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 200, 203, 207, 209, 214, 217, 226, 227, 228, 229, 230, 235, 236, 237, 239, 243, 246, 248, 249, 254, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 310, 311, 314, 315, 316, 317, 320, 322, 323, 326, 327, 329, 330, 331, 332, 334, 336, 337, 338, 341, 348, 349, 350, 353, 354, 355, 356, 359, 361, 362, 363, 364, 365, 367, 369, 373, 377, 378, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 403, 404, 406, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 433, 437, 438, 442, 443, 445, 448, 449, 450, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 569, 577, 580, 588, 589, 592, 594, 604, 607, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 658, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 679, 680, 681, 682, 683, 684, 703, 706, 707, 708, 709, 710, 711, 712, 715, 717], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 204, 207, 214, 217, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 243, 246, 248, 249, 252, 254, 259, 260, 263, 264, 265, 266, 270, 271, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 338, 341, 348, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 437, 438, 441, 442, 443, 445, 448, 449, 450, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 494, 496, 497, 498, 502, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 539, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 564, 565, 566, 569, 577, 588, 589, 592, 594, 604, 607, 612, 614, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 658, 661, 663, 667, 668, 670, 673, 679, 680, 681, 682, 684, 706, 707, 708, 710, 711, 712, 715, 717], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 176, 179, 182, 183, 184, 187, 188, 189, 198, 203, 214, 217, 226, 229, 230, 235, 236, 237, 239, 246, 248, 249, 254, 265, 270, 276, 280, 281, 282, 283, 284, 285, 286, 287, 291, 293, 296, 297, 299, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 321, 323, 326, 327, 328, 331, 333, 334, 335, 336, 338, 341, 348, 349, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 377, 378, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 441, 442, 443, 445, 448, 449, 450, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 488, 490, 495, 498, 514, 515, 516, 517, 527, 551, 552, 558, 561, 562, 565, 566, 569, 580, 588, 589, 592, 594, 604, 607, 612, 614, 619, 620, 621, 622, 625, 626, 628, 629, 632, 637, 641, 643, 644, 645, 646, 647, 650, 658, 661, 663, 667, 668, 673, 680, 681, 682, 706, 707, 708, 710, 711, 712, 714, 715], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 114, 115, 116, 120, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 151, 152, 153, 154, 170, 176, 177, 178, 179, 182, 183, 217, 219, 238, 242, 281, 284, 285, 287, 293, 295, 299, 301, 302, 303, 304, 306, 310, 312, 313, 317, 320, 321, 323, 326, 328, 329, 331, 332, 333, 335, 336, 349, 350, 354, 355, 357, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 377, 378, 385, 387, 388, 389, 391, 393, 394, 397, 398, 400, 401, 402, 405, 406, 407, 414, 415, 418, 421, 422, 423, 432, 437, 441, 442, 443, 445, 448, 449, 460, 467, 469, 473, 474, 475, 476, 482, 483, 487, 488, 492, 493, 525, 526, 530, 531, 540, 547, 548, 552, 553, 554, 564, 570, 571, 577, 579, 580, 581, 582, 583, 584, 590, 591, 592, 594, 599, 600, 601, 602, 603, 606, 608, 611, 615, 632, 661, 668, 670, 683, 684, 706, 707, 711, 712, 713, 717], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 144, 146, 180, 181, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 200, 203, 204, 223, 232, 233, 234, 240, 241, 247, 256, 261, 263, 271, 272, 273, 277, 291, 295, 305, 318, 319, 320, 336, 341, 342, 344, 345, 346, 347, 358, 359, 372, 374, 380, 381, 382, 412, 414, 419, 420, 444, 446, 447, 451, 452, 453, 454, 455, 456, 464, 465, 466, 475, 568, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 692, 695, 696, 699, 701, 706], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 142, 148, 152, 153, 161, 167, 169, 171, 176, 178, 183, 209, 214, 215, 226, 239, 245, 254, 275, 281, 289, 293, 298, 300, 312, 313, 314, 321, 322, 328, 333, 335, 357, 360, 362, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 411, 416, 421, 422, 434, 441, 443, 449, 460, 469, 482, 487, 520, 537, 540, 546, 552, 580, 663, 670, 673, 699, 700, 701, 703, 706, 709, 712, 715, 717], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 115, 116, 139, 147, 151, 154, 163, 165, 166, 167, 169, 170, 171, 182, 207, 262, 284, 285, 287, 289, 299, 343, 354, 355, 363, 364, 365, 367, 386, 388, 389, 394, 397, 415, 416, 418, 423, 430, 433, 434, 437, 448, 563, 574, 575, 576, 581, 582, 583, 596, 597, 598, 600, 601, 602, 603, 607, 608, 611, 615, 640, 650, 652, 653, 654, 656, 663, 669, 671, 672, 673, 674, 675, 676, 712], "determin": [3, 16, 45, 61, 139, 287, 334, 486, 531, 547, 552, 670, 683, 700, 717], "two": [3, 14, 23, 50, 61, 97, 112, 117, 118, 123, 124, 214, 226, 243, 254, 276, 298, 322, 334, 390, 399, 460, 489, 537, 546, 585, 668, 670, 678, 679, 680, 681, 699, 700, 703, 708, 712], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 119, 124, 137, 142, 158, 159, 164, 166, 171, 178, 179, 199, 201, 211, 212, 213, 216, 224, 225, 240, 245, 249, 250, 251, 258, 269, 272, 274, 276, 291, 293, 306, 307, 308, 309, 311, 317, 318, 320, 322, 324, 330, 334, 336, 339, 340, 348, 399, 408, 411, 426, 427, 431, 433, 443, 445, 457, 468, 474, 482, 485, 491, 497, 501, 504, 525, 537, 542, 543, 544, 546, 547, 552, 553, 558, 569, 588, 614, 648, 649, 660, 670, 672, 673, 675, 676, 680, 689, 690, 699, 700, 701, 703, 706, 711, 712, 714, 717], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 121, 123, 125, 126, 133, 137, 148, 166, 171, 178, 183, 185, 190, 238, 242, 244, 246, 258, 276, 289, 306, 311, 317, 322, 343, 349, 350, 361, 362, 377, 378, 392, 396, 397, 404, 408, 416, 433, 449, 468, 473, 474, 482, 499, 504, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 539, 544, 553, 612, 640, 649, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 670, 673, 679, 680, 682, 699, 700, 701, 703, 706, 709, 711, 712, 714, 715, 717], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 114, 120, 121, 122, 125, 129, 130, 131, 133, 134, 135, 136, 140, 141, 142, 146, 151, 152, 153, 176, 179, 182, 208, 214, 215, 226, 244, 245, 267, 280, 281, 284, 285, 293, 296, 310, 312, 313, 314, 321, 322, 323, 328, 333, 335, 348, 349, 350, 357, 360, 368, 370, 371, 375, 376, 377, 378, 379, 385, 387, 391, 392, 393, 396, 400, 401, 402, 404, 405, 406, 407, 410, 411, 414, 418, 421, 422, 441, 445, 448, 452, 454, 455, 456, 471, 472, 473, 474, 475, 476, 478, 479, 482, 484, 487, 488, 491, 492, 500, 510, 511, 512, 513, 519, 520, 521, 524, 525, 526, 527, 537, 542, 546, 547, 549, 552, 553, 655, 657, 670, 680, 703, 706, 709, 712], "out": [3, 48, 92, 158, 161, 166, 167, 170, 249, 305, 320, 336, 426, 433, 434, 437, 473, 547, 552, 589, 658, 667, 674, 675, 699, 703, 708, 712, 713], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 115, 116, 117, 121, 123, 124, 126, 128, 132, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 184, 201, 207, 208, 210, 215, 219, 227, 228, 229, 230, 231, 235, 236, 237, 238, 242, 246, 248, 249, 251, 260, 262, 270, 274, 276, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 301, 302, 303, 304, 314, 316, 317, 320, 321, 322, 323, 325, 326, 332, 333, 334, 335, 336, 348, 349, 350, 354, 355, 357, 360, 362, 363, 364, 365, 366, 367, 369, 375, 377, 378, 383, 384, 388, 389, 390, 392, 394, 395, 397, 399, 403, 408, 410, 415, 416, 417, 418, 423, 426, 429, 433, 434, 436, 437, 445, 448, 449, 457, 460, 461, 462, 463, 467, 469, 471, 472, 477, 484, 487, 492, 493, 494, 495, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 531, 534, 537, 540, 546, 547, 552, 553, 563, 572, 580, 593, 604, 625, 626, 628, 629, 630, 631, 648, 649, 658, 661, 663, 670, 673, 674, 675, 678, 679, 680, 681, 682, 699, 704, 706, 707, 709, 711, 712, 713, 715], "ha": [3, 19, 57, 58, 61, 64, 70, 97, 177, 192, 219, 254, 267, 288, 329, 332, 334, 336, 338, 488, 493, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 625, 675, 684, 699, 700, 703, 704, 706, 709, 711, 712, 714, 715, 716], "call": [3, 11, 15, 17, 28, 61, 123, 124, 137, 156, 167, 178, 220, 287, 297, 334, 408, 434, 461, 504, 544, 663, 688, 690, 698, 699, 700, 703, 706, 711, 712, 714], "otherwis": [3, 19, 44, 50, 51, 61, 133, 140, 161, 167, 246, 260, 270, 287, 288, 315, 322, 331, 334, 390, 404, 410, 419, 434, 477, 482, 670, 673, 683, 700, 704, 705, 706], "nan_as_nul": [4, 58, 59, 71, 100, 207, 219, 229, 276, 332, 373, 443, 661, 715], "gpu": [4, 16, 17, 94, 119, 276, 305, 382, 649, 670, 691, 700, 701, 702, 703, 705, 706, 708, 712, 713, 714, 717], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 266, 267, 268, 276, 386, 604, 607, 672, 673, 689, 711, 712, 713], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 119, 124, 126, 133, 142, 161, 167, 211, 212, 213, 217, 224, 225, 245, 276, 289, 307, 308, 309, 326, 334, 339, 340, 361, 397, 404, 411, 434, 495, 559, 569, 580, 588, 614, 661, 670, 673, 675, 682, 703, 712, 715], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 119, 123, 126, 128, 132, 133, 137, 142, 151, 166, 170, 182, 211, 245, 270, 293, 296, 306, 307, 315, 316, 326, 327, 331, 334, 343, 356, 369, 386, 394, 397, 399, 403, 404, 408, 411, 418, 433, 437, 443, 445, 448, 469, 473, 482, 495, 497, 504, 520, 522, 525, 527, 532, 541, 544, 547, 552, 563, 569, 586, 588, 594, 607, 614, 640, 648, 649, 663, 667, 670, 672, 673, 675, 680, 682, 692, 694, 695, 696, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 715, 717], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 164, 166, 167, 174, 176, 177, 178, 179, 183, 202, 228, 248, 250, 253, 262, 271, 275, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 578, 580, 581, 582, 583, 586, 588, 594, 600, 601, 602, 603, 604, 607, 608, 611, 612, 614, 615, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 673, 676, 681, 682, 683, 684, 688, 689, 690, 692, 695, 696, 698, 699, 700, 703, 705, 707, 709, 710, 711, 713, 715, 717], "constant": [4, 649, 650, 661], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 140, 141, 148, 149, 152, 153, 158, 159, 162, 168, 170, 176, 211, 212, 213, 224, 225, 265, 281, 307, 308, 309, 312, 313, 314, 321, 328, 333, 335, 338, 339, 340, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 410, 416, 421, 422, 426, 427, 429, 436, 441, 667, 673, 699, 702, 715], "Will": [4, 167, 171, 276, 434, 663], "rangeindex": [4, 23, 70, 143, 146, 148, 171, 276, 291, 353, 414, 416, 663, 680, 703], "inform": [4, 15, 19, 43, 61, 70, 166, 287, 288, 314, 334, 433, 468, 469, 649, 673, 682, 699, 700, 702, 703, 706, 712, 714, 715], "part": [4, 61, 171, 334, 537, 546, 589, 699, 700, 707], "provid": [4, 15, 16, 21, 22, 36, 54, 67, 124, 132, 133, 137, 161, 168, 177, 207, 220, 262, 266, 267, 270, 275, 276, 287, 289, 306, 326, 403, 404, 408, 436, 460, 473, 496, 541, 557, 558, 577, 658, 661, 673, 676, 684, 689, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 716, 717], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 123, 124, 127, 137, 143, 148, 177, 178, 180, 181, 205, 206, 207, 222, 243, 246, 257, 260, 261, 262, 267, 269, 270, 276, 282, 283, 289, 315, 322, 323, 324, 334, 342, 359, 394, 398, 408, 416, 446, 447, 459, 477, 568, 658, 670, 673, 679, 684, 689, 703, 711, 713], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 166, 170, 173, 176, 177, 179, 182, 183, 188, 191, 194, 195, 197, 200, 203, 219, 220, 228, 229, 230, 231, 235, 236, 244, 246, 248, 249, 254, 259, 262, 263, 264, 265, 266, 267, 271, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 348, 349, 350, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 375, 377, 378, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 433, 437, 438, 441, 442, 443, 445, 448, 449, 450, 454, 455, 456, 460, 461, 462, 463, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 578, 580, 581, 582, 583, 585, 586, 588, 589, 592, 594, 600, 601, 602, 603, 604, 607, 608, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 658, 661, 663, 666, 667, 669, 670, 671, 673, 674, 675, 679, 680, 681, 682, 683, 684, 701, 703, 706, 707, 708, 709, 710, 711, 712, 715, 717], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 121, 137, 151, 157, 161, 167, 171, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 203, 204, 262, 276, 290, 300, 323, 324, 338, 354, 355, 376, 379, 392, 408, 418, 425, 434, 448, 450, 477, 484, 485, 491, 501, 515, 521, 526, 530, 532, 533, 534, 540, 547, 548, 549, 552, 554, 594, 605, 610, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 655, 657, 670, 673, 682, 701, 706, 708, 710, 714, 715], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 115, 116, 117, 121, 125, 126, 128, 133, 137, 154, 155, 167, 169, 170, 173, 183, 185, 190, 202, 219, 227, 228, 229, 230, 231, 235, 236, 239, 244, 246, 252, 253, 265, 270, 275, 276, 287, 289, 297, 306, 311, 322, 329, 332, 334, 338, 343, 349, 350, 361, 362, 377, 378, 386, 388, 389, 392, 396, 397, 404, 408, 423, 424, 434, 437, 438, 443, 449, 450, 458, 460, 470, 482, 525, 547, 550, 552, 577, 586, 607, 649, 651, 652, 653, 654, 655, 656, 657, 658, 670, 672, 673, 676, 682, 683, 688, 694, 699, 700, 705, 706, 707, 711, 712, 713, 715], "forc": [4, 167, 434, 673, 706], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 135, 136, 148, 149, 152, 153, 161, 166, 167, 169, 175, 176, 178, 180, 181, 183, 216, 220, 227, 228, 229, 230, 231, 235, 236, 260, 261, 280, 281, 288, 296, 297, 306, 312, 313, 315, 317, 320, 321, 328, 333, 334, 335, 343, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 387, 391, 392, 393, 395, 399, 400, 401, 402, 403, 405, 406, 407, 416, 417, 421, 422, 433, 434, 441, 442, 445, 446, 447, 449, 460, 481, 487, 488, 493, 494, 499, 501, 525, 531, 534, 547, 552, 555, 556, 560, 577, 578, 581, 582, 583, 586, 592, 600, 601, 602, 603, 608, 611, 615, 649, 658, 663, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 688, 694, 699, 700, 702, 703, 706, 709, 712, 714, 715], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 167, 176, 177, 270, 276, 281, 312, 313, 315, 321, 328, 333, 334, 335, 341, 348, 357, 359, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 434, 441, 482, 490, 501, 527, 539, 541, 586, 670, 672, 674, 675, 684, 700, 703, 706, 708, 709, 711, 712], "allow": [4, 15, 21, 50, 51, 70, 94, 124, 137, 166, 167, 276, 287, 289, 322, 408, 433, 434, 501, 658, 673, 674, 675, 678, 679, 680, 681, 699, 701, 703, 706, 710, 712, 714, 717], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 123, 127, 132, 142, 143, 160, 162, 164, 167, 168, 170, 171, 172, 173, 207, 219, 245, 250, 252, 265, 266, 267, 268, 270, 276, 289, 329, 332, 361, 373, 394, 398, 403, 411, 428, 429, 431, 432, 434, 436, 437, 438, 481, 506, 507, 522, 529, 555, 556, 560, 562, 564, 640, 660, 672, 673, 682, 683, 703, 709, 713, 715], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 119, 128, 132, 168, 170, 207, 219, 229, 235, 276, 305, 306, 311, 332, 349, 350, 361, 373, 377, 378, 403, 436, 437, 443, 445, 487, 658, 661, 670, 683, 710, 712, 715], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 115, 116, 119, 127, 132, 140, 147, 149, 151, 154, 161, 167, 170, 173, 182, 207, 215, 216, 217, 219, 276, 284, 285, 287, 299, 301, 302, 303, 304, 315, 317, 320, 326, 331, 332, 336, 349, 350, 354, 355, 363, 364, 365, 367, 373, 377, 378, 380, 381, 382, 388, 389, 398, 403, 410, 415, 417, 418, 419, 423, 428, 434, 437, 438, 444, 448, 460, 467, 469, 471, 474, 477, 482, 491, 501, 525, 572, 586, 592, 593, 594, 661, 670, 683, 699, 700, 703, 713], "leav": [4, 58, 71, 92, 207, 219, 276, 332, 470, 667, 683, 689, 712], "build": [4, 258, 702, 712], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 263, 266, 271, 276, 281, 282, 283, 284, 285, 288, 289, 296, 301, 302, 303, 304, 306, 312, 313, 314, 315, 320, 321, 322, 326, 328, 333, 334, 335, 337, 338, 341, 349, 350, 354, 355, 357, 359, 360, 362, 363, 364, 367, 368, 370, 371, 373, 375, 377, 378, 386, 387, 388, 389, 391, 393, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 410, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 427, 438, 441, 448, 449, 580, 589, 604, 607, 612, 661, 665, 666, 667, 671, 673, 674, 675, 682, 684, 706, 707, 708, 709, 711, 712, 715, 717], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 133, 143, 148, 157, 161, 166, 173, 178, 202, 206, 221, 239, 248, 253, 260, 270, 276, 334, 338, 404, 416, 425, 433, 438, 458, 474, 495, 566, 568, 573, 589, 595, 662, 670, 672, 675, 682, 703, 704, 706, 707, 711, 712], "val": [4, 23, 64, 157, 173, 338, 425, 438, 589, 677, 706], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 114, 117, 118, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 152, 153, 157, 167, 173, 176, 205, 227, 228, 229, 230, 231, 235, 236, 260, 281, 290, 300, 312, 313, 321, 328, 333, 335, 338, 349, 350, 357, 360, 363, 364, 367, 368, 370, 371, 375, 377, 378, 387, 390, 391, 393, 394, 400, 401, 402, 405, 406, 407, 408, 421, 422, 425, 434, 438, 441, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 581, 582, 583, 585, 600, 601, 602, 603, 608, 611, 615, 670, 673, 678, 679, 680, 681, 682, 683, 701, 703, 706, 707, 710, 712, 713], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 115, 116, 117, 119, 124, 125, 126, 127, 137, 138, 140, 143, 146, 147, 151, 154, 155, 157, 167, 173, 182, 183, 209, 219, 231, 244, 248, 252, 263, 271, 275, 276, 280, 284, 285, 289, 301, 302, 303, 304, 306, 311, 314, 315, 322, 331, 332, 337, 338, 341, 353, 354, 355, 359, 362, 363, 364, 365, 367, 373, 388, 389, 394, 395, 396, 397, 398, 399, 408, 409, 410, 414, 415, 418, 423, 424, 425, 432, 434, 437, 438, 448, 449, 462, 463, 467, 468, 469, 485, 500, 506, 507, 512, 517, 528, 536, 589, 622, 625, 628, 629, 643, 644, 645, 647, 658, 663, 669, 682, 700, 705, 708, 712, 713, 715, 717], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 127, 157, 171, 173, 275, 276, 315, 338, 341, 398, 399, 425, 438, 460, 495, 658, 666, 670, 673, 676, 699, 706, 708, 712, 715, 717], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 61, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 117, 118, 119, 120, 124, 126, 127, 128, 132, 137, 138, 140, 141, 143, 146, 147, 156, 157, 159, 160, 177, 183, 187, 188, 189, 193, 203, 214, 226, 228, 231, 244, 248, 254, 265, 270, 276, 281, 282, 283, 286, 287, 290, 295, 298, 299, 301, 302, 303, 304, 306, 310, 311, 314, 315, 316, 322, 323, 326, 331, 334, 338, 341, 348, 349, 350, 353, 359, 362, 364, 365, 369, 376, 377, 378, 379, 390, 391, 397, 398, 403, 408, 409, 410, 414, 415, 417, 425, 427, 442, 443, 445, 449, 461, 462, 463, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 480, 483, 484, 485, 486, 488, 496, 497, 498, 504, 510, 515, 543, 544, 549, 550, 558, 561, 562, 569, 585, 588, 589, 592, 594, 604, 612, 614, 619, 620, 621, 622, 625, 626, 628, 629, 632, 641, 650, 658, 663, 667, 673, 678, 679, 680, 681, 682, 684, 703, 706, 707, 708, 710, 711, 712, 715, 717], "insert": [4, 64, 128, 140, 157, 338, 399, 410, 425, 551, 689, 703, 713], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 127, 132, 138, 140, 143, 146, 173, 248, 263, 271, 276, 315, 327, 331, 338, 353, 356, 359, 398, 399, 403, 409, 410, 414, 432, 438, 480, 485, 522, 622, 625, 666, 670, 671, 674, 675, 682, 706, 708, 711, 712, 714, 715], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 127, 138, 140, 143, 146, 173, 185, 187, 188, 189, 190, 193, 196, 198, 203, 204, 263, 271, 276, 298, 300, 301, 302, 303, 304, 306, 315, 318, 331, 353, 359, 398, 399, 409, 410, 414, 432, 438, 485, 494, 501, 506, 507, 563, 589, 594, 619, 620, 621, 622, 625, 630, 631, 635, 637, 641, 642, 643, 644, 645, 646, 647, 682, 703, 706, 708, 712], "13": [4, 44, 55, 84, 94, 127, 140, 143, 157, 298, 300, 315, 318, 327, 331, 353, 356, 398, 399, 410, 425, 432, 485, 643, 644, 645, 647, 706, 708], "14": [4, 15, 70, 94, 100, 127, 140, 143, 157, 318, 331, 353, 373, 398, 410, 425, 485, 643, 644, 645, 647, 706, 708, 712], "via": [4, 36, 137, 166, 306, 408, 433, 469, 691, 703, 706, 708, 711], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 119, 132, 137, 162, 168, 172, 181, 205, 207, 219, 238, 242, 257, 275, 276, 288, 289, 306, 332, 349, 350, 373, 377, 378, 403, 408, 429, 436, 447, 450, 459, 658, 661, 673, 682, 699, 701, 712, 713, 715, 717], "datetim": [4, 36, 47, 117, 119, 127, 132, 167, 184, 186, 191, 194, 195, 197, 199, 200, 204, 306, 318, 398, 403, 434, 450, 618, 624, 633, 634, 636, 639, 642, 666, 670, 671, 674, 675, 678, 679, 681, 682, 703, 706, 710, 711, 712, 713, 717], "timedelta": [4, 117, 132, 403, 451, 643, 710, 712], "t0": 4, "strptime": [4, 119, 682, 706], "2018": [4, 47, 55, 84, 119, 127, 246, 327, 356, 398, 630, 631, 666, 670, 671, 674, 675, 706], "07": [4, 119, 123, 127, 132, 187, 188, 189, 203, 398, 403, 619, 620, 621, 622, 632, 641], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 123, 127, 132, 184, 185, 190, 191, 193, 194, 195, 197, 198, 199, 200, 280, 306, 318, 337, 349, 350, 377, 378, 398, 403, 450, 569, 588, 614, 617, 623, 624, 633, 634, 636, 637, 638, 639, 643, 644, 645, 646, 647, 666, 670, 671, 674, 675, 706, 715, 717], "y": [4, 15, 16, 17, 44, 119, 126, 146, 161, 204, 248, 315, 394, 397, 414, 474, 485, 522, 537, 546, 565, 640, 642, 682, 703, 706, 709, 712], "m": [4, 119, 127, 167, 171, 185, 190, 196, 199, 398, 434, 495, 522, 617, 623, 635, 637, 638, 640, 643, 644, 645, 647, 673, 682, 701, 706, 708, 710, 714], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 119, 120, 122, 126, 129, 130, 131, 134, 135, 136, 137, 140, 143, 148, 152, 153, 158, 161, 176, 177, 185, 186, 187, 188, 189, 190, 199, 203, 249, 270, 276, 281, 295, 296, 306, 311, 312, 313, 315, 321, 328, 333, 335, 357, 359, 360, 368, 370, 371, 375, 387, 391, 393, 394, 397, 399, 400, 401, 402, 405, 406, 407, 408, 410, 416, 421, 422, 426, 432, 441, 443, 460, 480, 482, 483, 485, 487, 493, 500, 522, 525, 542, 561, 562, 617, 618, 619, 620, 621, 623, 638, 640, 641, 658, 682, 684, 703, 706, 708, 712, 715], "h": [4, 111, 185, 190, 191, 199, 386, 485, 525, 617, 623, 624, 638, 703, 706], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 117, 118, 125, 126, 133, 137, 140, 141, 148, 150, 158, 161, 167, 171, 178, 185, 190, 199, 200, 228, 243, 246, 276, 280, 282, 283, 288, 289, 290, 293, 295, 296, 297, 301, 302, 303, 304, 306, 311, 314, 315, 316, 318, 320, 322, 323, 324, 332, 334, 341, 348, 354, 355, 361, 369, 379, 390, 396, 397, 404, 408, 410, 416, 417, 419, 426, 434, 443, 445, 450, 461, 462, 463, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 588, 589, 594, 607, 614, 617, 622, 623, 625, 626, 628, 629, 631, 637, 638, 639, 643, 644, 645, 646, 647, 650, 658, 661, 663, 666, 667, 668, 670, 673, 682, 683, 699, 700, 701, 702, 703, 706, 707, 708, 710, 712, 714, 715, 716, 717], "id": [4, 16, 592, 594, 648, 649, 706, 709], "arang": [4, 17, 706, 712], "second": [4, 44, 97, 111, 127, 142, 156, 167, 185, 190, 198, 199, 245, 264, 315, 318, 386, 398, 411, 434, 451, 454, 617, 623, 637, 638, 643, 645, 670, 673, 676, 682, 703, 706], "x": [4, 5, 15, 16, 17, 44, 61, 73, 146, 161, 175, 248, 270, 287, 315, 334, 343, 361, 414, 460, 474, 537, 546, 549, 551, 565, 569, 588, 589, 607, 614, 640, 658, 670, 674, 675, 701, 706, 707, 709, 711, 712], "01": [4, 36, 127, 132, 133, 184, 186, 187, 188, 189, 191, 194, 195, 196, 197, 199, 200, 203, 204, 306, 398, 403, 404, 450, 522, 564, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 666, 670, 671, 674, 675, 709, 710, 715], "02": [4, 123, 127, 132, 186, 187, 188, 189, 191, 195, 196, 200, 203, 318, 398, 403, 450, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 634, 635, 639, 641, 666, 670, 671, 674, 675, 682, 706, 709], "03": [4, 47, 127, 133, 186, 187, 188, 189, 196, 203, 318, 398, 404, 450, 618, 619, 620, 621, 622, 626, 628, 629, 635, 640, 641, 646, 682, 708], "04": [4, 46, 55, 75, 76, 84, 104, 105, 123, 127, 132, 187, 188, 189, 199, 203, 327, 349, 350, 356, 377, 378, 398, 403, 450, 617, 619, 620, 621, 622, 623, 638, 641, 682], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 123, 127, 137, 139, 148, 150, 151, 156, 157, 158, 159, 161, 166, 169, 171, 179, 182, 205, 207, 215, 216, 249, 257, 268, 276, 282, 283, 284, 285, 291, 301, 302, 303, 304, 310, 315, 316, 317, 323, 327, 334, 338, 341, 342, 356, 359, 394, 398, 408, 416, 418, 425, 426, 427, 433, 448, 459, 460, 471, 472, 474, 475, 478, 482, 487, 489, 491, 493, 501, 525, 547, 552, 568, 578, 586, 589, 604, 605, 649, 660, 666, 669, 670, 672, 673, 674, 675, 676, 679, 699, 706, 707, 708, 709, 711, 712, 715], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 128, 142, 144, 209, 240, 245, 266, 267, 268, 270, 272, 286, 287, 334, 386, 399, 411, 412, 607, 650, 667, 670, 673, 674, 675, 676, 682, 703, 706], "cat": [4, 133, 179, 324, 361, 404, 460, 461, 462, 463, 467, 468, 469, 488, 492, 501, 530, 548, 553, 554, 661, 689, 694, 706], "jump": [4, 128], "dog": [4, 74, 133, 179, 361, 404, 460, 487, 526, 706], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 115, 116, 117, 126, 127, 132, 133, 140, 147, 151, 154, 155, 159, 177, 182, 187, 189, 193, 228, 231, 276, 284, 285, 301, 302, 303, 304, 306, 314, 315, 338, 341, 354, 355, 359, 363, 364, 367, 369, 388, 389, 397, 398, 403, 404, 410, 415, 418, 423, 424, 427, 443, 445, 448, 471, 484, 485, 543, 592, 594, 619, 620, 621, 622, 625, 626, 628, 629, 632, 641, 658, 663, 684, 706, 708, 710, 712, 715, 717], "cow": [4, 44, 156, 315, 316, 348], "moo": 4, "occasion": [4, 700], "pdf": [4, 58, 170, 706, 710], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 170, 176, 177, 182, 183, 207, 220, 239, 249, 260, 263, 264, 265, 266, 270, 271, 276, 281, 282, 283, 284, 285, 289, 295, 296, 297, 301, 302, 303, 304, 306, 312, 313, 315, 321, 326, 328, 329, 330, 331, 333, 334, 335, 337, 341, 353, 354, 355, 357, 359, 360, 362, 363, 364, 367, 368, 370, 371, 373, 375, 386, 387, 388, 389, 391, 393, 394, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 414, 415, 416, 418, 421, 422, 423, 424, 426, 428, 432, 441, 442, 443, 448, 449, 460, 474, 482, 483, 485, 488, 493, 497, 499, 504, 510, 525, 527, 539, 544, 553, 561, 562, 565, 566, 569, 588, 589, 592, 594, 604, 607, 612, 614, 658, 661, 663, 667, 668, 670, 673, 679, 680, 681, 684, 706, 707, 708, 710, 711, 712, 715, 717], "from_panda": [4, 226, 231, 254, 270, 580, 589, 706, 707, 709, 710, 717], "attribut": [4, 36, 142, 178, 207, 245, 258, 267, 276, 306, 395, 411, 463, 679, 680, 681, 689, 703, 704, 706], "iloc": [4, 67, 276, 589, 706, 707, 712, 715], "select": [4, 36, 44, 55, 64, 68, 84, 86, 97, 106, 124, 166, 249, 276, 306, 315, 316, 327, 338, 341, 356, 359, 433, 672, 673, 674, 675, 689, 703, 709, 713], "posit": [4, 15, 64, 68, 111, 140, 145, 158, 220, 222, 249, 276, 287, 338, 341, 386, 410, 413, 426, 473, 500, 505, 508, 509, 525, 549, 550, 551, 564, 566, 586, 594, 607, 713], "20": [4, 21, 40, 44, 50, 61, 68, 124, 125, 156, 166, 219, 252, 276, 289, 315, 322, 332, 334, 341, 394, 395, 396, 433, 437, 485, 545, 669, 706, 708, 709, 712], "30": [4, 21, 43, 44, 61, 63, 68, 124, 125, 127, 156, 185, 219, 276, 289, 314, 315, 332, 334, 337, 341, 394, 395, 396, 398, 437, 577, 622, 626, 628, 629, 630, 631, 632, 640, 669, 682, 706], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 114, 115, 116, 120, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 150, 152, 153, 154, 155, 160, 170, 177, 179, 183, 184, 209, 214, 217, 226, 237, 239, 243, 244, 246, 248, 252, 254, 257, 264, 271, 276, 281, 282, 283, 286, 287, 288, 289, 295, 296, 297, 305, 306, 310, 314, 315, 317, 320, 323, 326, 328, 331, 336, 337, 341, 353, 359, 361, 362, 363, 365, 367, 368, 369, 370, 371, 376, 379, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 414, 415, 417, 421, 422, 423, 424, 437, 443, 449, 450, 461, 462, 463, 467, 468, 469, 470, 473, 475, 488, 491, 502, 503, 506, 507, 566, 604, 644, 645, 646, 647, 650, 661, 684, 706, 707, 708, 710, 712, 714, 715, 717], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 61, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 114, 120, 122, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 143, 146, 148, 152, 153, 158, 161, 176, 177, 220, 249, 270, 276, 281, 295, 296, 306, 312, 313, 315, 321, 324, 326, 328, 330, 333, 334, 335, 341, 353, 357, 359, 360, 368, 370, 371, 375, 386, 387, 391, 393, 394, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 414, 416, 421, 422, 426, 432, 441, 442, 443, 460, 474, 482, 488, 525, 531, 539, 561, 562, 569, 588, 589, 592, 594, 614, 640, 658, 667, 668, 670, 679, 684, 700, 702, 703, 706, 707, 708, 711, 712, 715], "integ": [4, 16, 19, 51, 56, 68, 123, 125, 128, 129, 133, 169, 171, 177, 198, 220, 227, 228, 229, 230, 231, 235, 236, 244, 257, 260, 262, 264, 270, 273, 275, 276, 288, 324, 328, 341, 348, 394, 396, 399, 400, 404, 459, 473, 474, 480, 486, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 526, 557, 622, 637, 658, 670, 673, 682, 683, 684, 699, 703, 706, 707, 710, 715], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 149, 152, 153, 176, 177, 192, 220, 264, 267, 276, 281, 306, 312, 313, 314, 321, 328, 333, 335, 341, 357, 359, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 417, 421, 422, 441, 474, 493, 499, 586, 625, 650, 670, 673, 674, 675, 682, 684, 701, 703, 706, 708, 709, 711, 712, 714], "9": [4, 32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 115, 116, 126, 127, 132, 133, 151, 154, 166, 177, 182, 276, 298, 300, 301, 302, 303, 304, 306, 341, 354, 355, 359, 361, 363, 364, 367, 388, 389, 397, 398, 403, 404, 418, 423, 433, 443, 448, 471, 477, 485, 515, 592, 594, 622, 625, 663, 684, 703, 706, 708, 710, 711, 712, 715, 717], "18": [4, 68, 127, 132, 133, 185, 190, 193, 198, 276, 341, 398, 403, 404, 485, 637, 646, 706, 710], "slice": [4, 68, 222, 260, 270, 276, 341, 551, 689, 703, 706, 707], "both": [4, 8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 141, 152, 153, 176, 178, 202, 253, 258, 259, 276, 281, 293, 297, 306, 312, 313, 321, 322, 328, 333, 335, 341, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 458, 536, 564, 594, 663, 679, 680, 681, 688, 699, 700, 703, 709, 710, 711, 712, 717], "set": [4, 11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 117, 121, 132, 143, 161, 171, 173, 178, 201, 214, 237, 243, 246, 251, 274, 276, 286, 289, 293, 296, 306, 316, 341, 348, 349, 350, 359, 377, 378, 392, 403, 437, 438, 445, 457, 460, 462, 463, 467, 469, 484, 487, 494, 530, 532, 534, 537, 540, 546, 547, 548, 552, 554, 563, 586, 594, 612, 648, 658, 667, 670, 673, 675, 677, 682, 683, 699, 700, 701, 703, 704, 706, 711, 714, 715, 716], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 61, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 124, 126, 127, 140, 146, 147, 160, 177, 179, 187, 188, 189, 203, 214, 226, 254, 265, 276, 282, 283, 286, 301, 302, 303, 304, 306, 310, 311, 314, 315, 326, 334, 338, 341, 349, 350, 353, 359, 365, 369, 377, 378, 397, 398, 410, 414, 415, 442, 443, 445, 462, 463, 467, 468, 471, 472, 473, 474, 475, 483, 484, 485, 486, 488, 495, 498, 561, 562, 589, 592, 594, 619, 620, 621, 622, 625, 626, 628, 629, 641, 643, 650, 658, 663, 667, 684, 699, 706, 708, 710, 711, 712, 715, 717], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 115, 116, 126, 127, 132, 147, 151, 154, 156, 159, 161, 177, 182, 183, 187, 189, 276, 293, 301, 302, 303, 304, 306, 310, 314, 315, 331, 338, 341, 354, 355, 359, 362, 363, 364, 367, 388, 389, 397, 398, 403, 415, 418, 423, 427, 443, 448, 449, 471, 477, 485, 486, 501, 561, 562, 589, 592, 594, 619, 620, 621, 622, 625, 626, 641, 649, 650, 658, 663, 673, 678, 679, 680, 681, 684, 703, 706, 708, 710, 712, 715], "more": [4, 11, 14, 15, 19, 21, 36, 43, 68, 70, 137, 161, 166, 177, 185, 190, 199, 264, 276, 287, 288, 289, 306, 314, 341, 408, 433, 469, 491, 499, 547, 594, 617, 623, 638, 670, 673, 674, 675, 676, 682, 684, 699, 700, 701, 702, 703, 704, 706, 711, 712, 714, 715, 716], "loc": [4, 22, 44, 71, 222, 260, 270, 276, 315, 706, 709, 712], "boolean": [4, 51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 117, 119, 123, 124, 143, 169, 170, 192, 201, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 251, 260, 270, 274, 276, 286, 293, 344, 345, 346, 347, 348, 349, 350, 359, 363, 364, 367, 377, 378, 381, 390, 394, 395, 437, 457, 472, 487, 492, 495, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 531, 553, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 625, 626, 627, 628, 629, 630, 631, 661, 670, 673, 674, 675, 704, 712, 713], "mask": [4, 75, 76, 86, 104, 105, 126, 260, 270, 276, 287, 331, 349, 350, 359, 377, 378, 381, 382, 397, 703, 715], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 114, 120, 122, 127, 129, 130, 131, 134, 135, 136, 152, 153, 161, 167, 171, 173, 176, 276, 281, 282, 283, 287, 306, 312, 313, 317, 321, 328, 333, 335, 348, 349, 350, 357, 359, 360, 368, 370, 371, 375, 377, 378, 386, 387, 391, 393, 398, 400, 401, 402, 405, 406, 407, 419, 421, 422, 434, 438, 441, 569, 588, 607, 614, 640, 648, 649, 650, 661, 666, 670, 671, 672, 673, 675, 676, 682, 689, 703, 705, 709, 710, 711, 713, 717], "e": [4, 8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 120, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 143, 152, 153, 158, 161, 171, 176, 177, 249, 270, 276, 281, 295, 306, 312, 313, 321, 328, 333, 335, 357, 359, 360, 368, 370, 371, 375, 387, 391, 392, 393, 397, 400, 401, 402, 403, 405, 406, 407, 421, 422, 426, 441, 443, 469, 485, 487, 488, 493, 499, 500, 525, 531, 534, 559, 561, 562, 640, 658, 663, 670, 676, 684, 699, 700, 701, 703, 706, 712], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 117, 118, 121, 123, 126, 127, 132, 137, 142, 148, 156, 178, 206, 207, 211, 212, 221, 245, 258, 260, 270, 276, 287, 290, 292, 294, 295, 298, 307, 308, 316, 325, 326, 334, 337, 343, 358, 384, 390, 392, 394, 397, 398, 403, 408, 411, 416, 419, 420, 469, 473, 486, 510, 511, 512, 513, 519, 520, 521, 524, 537, 546, 563, 580, 585, 592, 594, 612, 648, 663, 669, 670, 673, 674, 675, 676, 682, 683, 688, 689, 690, 692, 695, 696, 699, 703, 707, 709, 711, 712, 713, 715, 717], "iterrow": 4, "itertupl": 4, "to_dict": [4, 276], "transpos": [5, 277, 660, 689, 708, 713], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 157, 158, 159, 166, 175, 176, 211, 212, 214, 224, 226, 239, 243, 244, 246, 249, 281, 282, 283, 286, 287, 289, 295, 297, 307, 308, 311, 312, 313, 321, 328, 333, 335, 339, 357, 360, 368, 370, 371, 375, 376, 379, 387, 391, 393, 394, 396, 399, 400, 401, 402, 405, 406, 407, 408, 421, 422, 425, 426, 427, 433, 441, 460, 461, 468, 469, 470, 501, 505, 542, 551, 699, 700, 701, 703, 706, 709, 712, 714], "ncol": [5, 175], "nrow": [5, 175, 670, 706, 712], "self": [5, 14, 61, 88, 111, 117, 140, 159, 166, 175, 183, 226, 254, 277, 286, 290, 334, 362, 386, 399, 410, 427, 433, 440, 449, 492, 553, 701, 703], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 115, 116, 124, 126, 127, 137, 147, 148, 149, 151, 154, 161, 162, 167, 169, 174, 175, 179, 182, 220, 284, 285, 287, 289, 293, 297, 299, 300, 306, 311, 316, 320, 334, 354, 355, 361, 363, 365, 367, 388, 389, 395, 397, 398, 408, 415, 416, 417, 418, 423, 429, 434, 448, 453, 477, 487, 488, 492, 493, 499, 510, 531, 537, 540, 546, 547, 552, 563, 564, 565, 581, 582, 583, 586, 594, 600, 601, 602, 603, 604, 608, 611, 612, 615, 640, 650, 658, 660, 661, 669, 670, 673, 674, 675, 679, 682, 683, 699, 701, 703, 705, 706, 711, 712, 713, 714, 715, 717], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 117, 123, 124, 126, 148, 149, 166, 171, 175, 207, 270, 310, 315, 322, 326, 334, 394, 395, 397, 416, 417, 433, 477, 508, 509, 537, 539, 547, 578, 580, 581, 582, 583, 594, 600, 601, 602, 603, 607, 608, 611, 615, 649, 661, 667, 673, 678, 679, 680, 681, 683, 688, 699, 700, 701, 703, 707, 712, 715, 717], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 114, 120, 122, 123, 124, 129, 130, 131, 134, 135, 136, 148, 149, 152, 153, 166, 167, 175, 176, 262, 281, 287, 312, 313, 317, 321, 328, 333, 335, 357, 360, 364, 368, 370, 371, 375, 385, 387, 391, 393, 394, 395, 400, 401, 402, 405, 406, 407, 416, 417, 421, 422, 433, 434, 441, 477, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 678, 679, 680, 681, 699, 714], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 143, 147, 148, 149, 151, 152, 153, 154, 161, 166, 167, 173, 175, 176, 178, 182, 183, 184, 207, 262, 276, 281, 284, 285, 286, 287, 288, 296, 299, 300, 312, 313, 321, 326, 328, 333, 335, 343, 354, 355, 357, 360, 361, 362, 363, 365, 367, 368, 370, 371, 375, 387, 388, 389, 391, 393, 394, 395, 397, 398, 400, 401, 402, 405, 406, 407, 408, 415, 416, 417, 418, 421, 422, 423, 433, 434, 438, 441, 448, 449, 450, 453, 477, 487, 488, 492, 493, 499, 505, 531, 537, 540, 546, 547, 563, 569, 578, 580, 581, 582, 583, 586, 588, 592, 600, 601, 602, 603, 608, 611, 612, 614, 615, 640, 649, 650, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 699, 700, 701, 703, 705, 706, 707, 708, 709, 712, 713, 715], "becaus": [5, 12, 13, 97, 175, 284, 285, 287, 594, 667, 701, 706, 709, 710, 712, 715, 717], "behavior": [5, 126, 171, 175, 248, 270, 316, 397, 563, 649, 661, 670, 673, 682, 683, 699, 700, 703, 704, 706, 711, 712, 714, 716, 717], "absolut": [7, 207, 280, 594, 678, 679, 680, 681, 706, 717], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 117, 121, 126, 227, 228, 229, 230, 231, 235, 236, 252, 280, 306, 361, 363, 364, 367, 392, 397, 445, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 577, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 673, 683, 689, 700, 703, 706, 707, 710, 711, 712, 713, 717], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 125, 127, 132, 133, 139, 169, 171, 237, 244, 259, 262, 267, 268, 270, 280, 282, 283, 293, 306, 311, 316, 322, 323, 334, 348, 349, 350, 361, 377, 378, 396, 398, 403, 404, 452, 454, 455, 456, 460, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 535, 538, 539, 541, 543, 544, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 569, 572, 573, 574, 575, 576, 578, 581, 582, 583, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 649, 658, 670, 673, 674, 675, 683, 699, 700, 701, 703, 704, 706, 708, 710, 711, 712, 714, 717], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 115, 116, 117, 124, 132, 137, 148, 151, 154, 164, 171, 177, 182, 217, 248, 250, 270, 280, 286, 287, 293, 301, 302, 303, 304, 322, 327, 334, 337, 338, 354, 355, 356, 361, 363, 364, 367, 386, 388, 389, 403, 408, 416, 418, 419, 423, 431, 448, 482, 486, 488, 495, 525, 532, 534, 559, 563, 569, 580, 588, 589, 607, 612, 614, 648, 650, 658, 660, 661, 669, 670, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 689, 692, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 713, 715], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 115, 116, 124, 132, 148, 151, 154, 166, 182, 280, 290, 301, 302, 303, 304, 334, 354, 355, 363, 364, 367, 386, 388, 389, 403, 416, 418, 423, 433, 448, 481, 501, 555, 556, 560, 569, 588, 607, 612, 614, 658, 661, 670, 673, 692, 694, 695, 696, 706, 707, 713], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 115, 116, 127, 128, 142, 154, 161, 166, 167, 171, 177, 205, 207, 215, 216, 245, 246, 257, 280, 288, 289, 295, 296, 306, 315, 316, 322, 327, 338, 343, 356, 376, 379, 388, 389, 398, 399, 411, 423, 433, 434, 445, 459, 468, 482, 490, 494, 498, 499, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 530, 539, 540, 547, 548, 552, 554, 555, 556, 559, 560, 561, 562, 577, 586, 617, 623, 638, 659, 661, 664, 667, 668, 670, 673, 676, 682, 683, 684, 689, 699, 700, 701, 702, 706, 709, 710, 712, 714, 715, 716, 717], "33": [7, 30, 52, 244, 280], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 117, 122, 132, 133, 136, 138, 141, 146, 147, 151, 170, 176, 182, 205, 219, 280, 287, 306, 312, 313, 320, 332, 334, 349, 350, 354, 355, 364, 373, 377, 378, 390, 393, 403, 404, 407, 409, 414, 415, 418, 437, 441, 445, 448, 470, 670, 683, 706, 710, 712, 714, 715], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 145, 147, 148, 149, 151, 152, 153, 154, 156, 158, 176, 182, 244, 249, 281, 284, 285, 288, 292, 294, 296, 301, 302, 303, 304, 312, 313, 315, 317, 321, 325, 326, 328, 333, 334, 335, 343, 354, 355, 357, 360, 363, 364, 365, 367, 368, 370, 371, 375, 384, 387, 388, 389, 391, 392, 393, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 413, 415, 416, 417, 418, 421, 422, 423, 426, 441, 448, 460, 477, 578, 580, 586, 688, 706, 708, 712, 713], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 114, 115, 116, 120, 122, 123, 124, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 148, 150, 151, 152, 153, 154, 156, 166, 171, 176, 177, 179, 182, 206, 220, 239, 241, 246, 248, 262, 264, 267, 268, 269, 270, 273, 281, 284, 285, 299, 312, 313, 315, 321, 328, 333, 334, 335, 354, 355, 357, 360, 363, 364, 365, 367, 368, 370, 371, 375, 387, 388, 389, 391, 393, 394, 395, 398, 399, 400, 401, 402, 405, 406, 407, 414, 415, 416, 418, 421, 422, 423, 433, 441, 448, 471, 663, 684, 689, 699, 700, 703], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 145, 152, 153, 176, 177, 249, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 394, 400, 401, 402, 405, 406, 407, 413, 421, 422, 441, 586, 684], "get": [8, 41, 42, 43, 49, 56, 60, 61, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 104, 105, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 220, 238, 242, 248, 260, 270, 281, 312, 313, 314, 321, 328, 333, 334, 335, 342, 349, 350, 357, 360, 368, 370, 371, 372, 375, 377, 378, 387, 391, 393, 400, 401, 402, 405, 406, 407, 412, 421, 422, 441, 549, 578, 607, 616, 622, 661, 662, 670, 689, 704, 708, 712, 713], "addit": [8, 15, 51, 90, 120, 166, 281, 364, 391, 433, 483, 510, 528, 536, 545, 670, 672, 673, 678, 679, 680, 681, 699, 700, 701, 717], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 156, 176, 281, 296, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 460, 482, 578, 585, 586, 610, 613, 706, 708, 709], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 166, 171, 176, 281, 312, 313, 314, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 433, 441, 664, 669, 674, 675, 689, 712, 717], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 114, 115, 116, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 154, 166, 176, 183, 185, 190, 199, 276, 281, 287, 295, 312, 313, 314, 315, 316, 317, 321, 326, 328, 333, 334, 335, 357, 360, 362, 368, 370, 371, 375, 387, 388, 389, 391, 393, 400, 401, 402, 405, 406, 407, 416, 421, 422, 423, 433, 441, 449, 549, 569, 581, 582, 583, 588, 600, 601, 602, 603, 608, 611, 612, 614, 615, 617, 623, 638, 689, 699, 703, 708, 709, 712, 713, 714, 715], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 142, 152, 153, 176, 211, 212, 224, 245, 281, 293, 307, 308, 312, 313, 315, 321, 328, 331, 333, 335, 338, 339, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 408, 411, 421, 422, 441, 510, 511, 512, 513, 519, 520, 521, 523, 524, 525, 528, 529, 530, 536, 539, 540, 543, 545, 548, 549, 553, 554, 555, 556, 559, 560, 563, 699, 703, 706, 711, 715], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 361, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 680], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 150, 152, 153, 162, 168, 176, 183, 238, 242, 276, 281, 292, 294, 298, 300, 312, 313, 315, 321, 324, 325, 328, 333, 335, 349, 350, 357, 360, 368, 370, 371, 375, 377, 378, 384, 387, 391, 393, 394, 400, 401, 402, 405, 406, 407, 421, 422, 429, 436, 441, 449, 482, 586, 594, 668, 670, 673, 689, 705, 707, 713], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 152, 153, 176, 177, 178, 179, 216, 220, 222, 243, 264, 268, 270, 281, 289, 312, 313, 317, 321, 328, 333, 335, 336, 348, 357, 360, 368, 369, 370, 371, 375, 387, 391, 393, 399, 400, 401, 402, 405, 406, 407, 421, 422, 441, 469, 471, 475, 487, 489, 493, 499, 510, 511, 520, 525, 594, 607, 661, 668, 670, 673, 674, 675, 676, 684, 699, 700, 701, 703, 706, 708, 711, 712, 715], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 152, 153, 176, 182, 183, 217, 276, 281, 287, 293, 296, 312, 313, 314, 321, 326, 328, 333, 335, 354, 355, 357, 360, 362, 365, 368, 370, 371, 375, 387, 391, 393, 395, 397, 400, 401, 402, 405, 406, 407, 421, 422, 441, 448, 449, 472, 473, 474, 525, 580, 586, 658, 667, 670, 682, 715], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 184, 205, 257, 262, 266, 267, 268, 276, 281, 312, 313, 314, 321, 328, 333, 334, 335, 348, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 450, 459, 473, 474, 485, 487, 490, 498, 531, 539, 540, 541, 553, 557, 558, 649, 658, 661, 683, 703, 706], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 114, 119, 120, 122, 123, 126, 129, 130, 131, 133, 134, 135, 136, 142, 152, 153, 162, 168, 173, 176, 179, 214, 216, 245, 281, 287, 293, 297, 306, 312, 313, 314, 315, 320, 321, 328, 333, 335, 357, 360, 368, 370, 371, 373, 375, 387, 391, 393, 394, 397, 400, 401, 402, 404, 405, 406, 407, 411, 421, 422, 429, 436, 438, 441, 461, 467, 468, 469, 472, 473, 474, 478, 482, 487, 506, 507, 510, 525, 527, 531, 563, 569, 588, 614, 662, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 700, 701, 703, 706, 709, 711, 712, 714, 715, 717], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 164, 166, 176, 239, 250, 281, 312, 313, 314, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 431, 433, 441, 660, 663, 702, 703, 706, 708, 712, 717], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 148, 151, 152, 153, 154, 156, 158, 161, 167, 176, 182, 220, 222, 244, 246, 249, 260, 262, 269, 270, 275, 281, 290, 298, 299, 310, 312, 313, 315, 321, 328, 331, 333, 334, 335, 338, 343, 357, 360, 363, 364, 367, 368, 370, 371, 375, 376, 379, 383, 385, 387, 388, 389, 391, 393, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 418, 421, 422, 423, 426, 434, 441, 445, 448, 473, 480, 483, 484, 487, 488, 493, 496, 497, 499, 500, 504, 505, 508, 509, 526, 528, 531, 532, 533, 536, 539, 540, 543, 544, 545, 547, 549, 551, 552, 563, 564, 566, 570, 571, 578, 579, 580, 581, 582, 583, 584, 586, 590, 591, 592, 594, 599, 600, 601, 602, 603, 606, 608, 610, 611, 613, 615, 649, 655, 657, 658, 663, 669, 670, 672, 673, 674, 675, 678, 680, 681, 682, 699, 701, 703, 706, 712], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 612, 711], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 594, 700, 701, 703, 706, 708, 709], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 61, 62, 74, 85, 87, 94, 96, 98, 99, 102, 114, 120, 122, 123, 126, 129, 130, 131, 134, 135, 136, 137, 149, 152, 153, 176, 178, 237, 260, 281, 297, 312, 313, 321, 328, 333, 334, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 394, 397, 400, 401, 402, 405, 406, 407, 408, 417, 421, 422, 441, 474, 482, 487, 492, 493, 499, 527, 540, 547, 552, 553, 563, 586, 604, 673, 674, 675, 679, 689, 700, 701, 703, 706, 707, 711, 712, 715, 717], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 114, 120, 122, 123, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 152, 153, 162, 168, 171, 176, 178, 237, 281, 287, 289, 312, 313, 321, 328, 333, 334, 335, 348, 357, 360, 361, 364, 368, 369, 370, 371, 375, 386, 387, 391, 393, 397, 400, 401, 402, 403, 405, 406, 407, 408, 421, 422, 429, 436, 441, 443, 445, 460, 482, 487, 488, 493, 499, 505, 525, 531, 547, 552, 607, 658, 660, 663, 670, 672, 673, 674, 675, 679, 680, 681, 683, 699, 701, 706, 708, 712, 715, 717], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 114, 119, 120, 122, 124, 127, 128, 129, 130, 131, 134, 135, 136, 143, 146, 148, 152, 153, 156, 176, 179, 207, 220, 226, 239, 246, 248, 254, 281, 296, 312, 313, 315, 321, 328, 333, 334, 335, 343, 357, 360, 363, 364, 367, 368, 370, 371, 375, 387, 391, 393, 398, 399, 400, 401, 402, 405, 406, 407, 414, 416, 421, 422, 441, 537, 546, 547, 552, 689, 703, 707, 711, 713], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 124, 127, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 178, 184, 207, 262, 281, 300, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 385, 387, 391, 393, 398, 400, 401, 402, 405, 406, 407, 416, 421, 422, 441, 450, 487, 492, 537, 540, 546, 547, 563, 640, 678, 680, 681, 700, 706, 709, 712, 715], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 114, 120, 122, 123, 127, 129, 130, 131, 134, 135, 136, 152, 153, 176, 217, 260, 281, 292, 294, 312, 313, 321, 325, 326, 328, 333, 335, 357, 360, 368, 370, 371, 375, 384, 385, 387, 391, 393, 398, 400, 401, 402, 405, 406, 407, 421, 422, 441, 460, 483, 486, 528, 536, 545, 564, 570, 571, 579, 580, 584, 586, 590, 591, 599, 606, 712, 713], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 143, 152, 153, 166, 176, 242, 281, 312, 313, 315, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 397, 400, 401, 402, 405, 406, 407, 421, 422, 433, 441, 460, 662, 677, 700, 701, 706, 710, 717], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 152, 153, 176, 178, 276, 281, 312, 313, 321, 328, 333, 334, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 408, 421, 422, 441, 443, 460, 700, 715], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 281, 282, 290, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 385, 387, 391, 393, 400, 401, 402, 405, 406, 407, 416, 421, 422, 441, 482, 537, 546, 551, 648, 660, 670, 673, 676, 690, 699, 703, 706, 708], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 114, 115, 116, 117, 118, 120, 121, 122, 129, 130, 131, 134, 135, 136, 147, 152, 153, 154, 176, 237, 239, 281, 290, 298, 300, 312, 313, 321, 328, 331, 333, 334, 335, 337, 354, 355, 357, 360, 363, 364, 365, 367, 368, 370, 371, 375, 385, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 405, 406, 407, 415, 421, 422, 423, 441, 476, 480, 490, 491, 526, 538, 572, 581, 582, 583, 585, 592, 593, 594, 600, 601, 602, 603, 608, 610, 611, 613, 615, 658, 661, 689, 700, 701, 706, 709, 712, 713], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 170, 176, 183, 222, 281, 293, 312, 313, 315, 321, 324, 326, 328, 333, 335, 357, 360, 361, 362, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 408, 421, 422, 437, 441, 443, 449, 482, 487, 489, 525, 539, 541, 586, 670, 673, 700, 701, 703, 712], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 140, 152, 153, 176, 260, 262, 270, 281, 312, 313, 315, 321, 322, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 410, 421, 422, 441, 496, 533, 541, 557, 558, 669, 670, 673, 674, 675, 676, 700, 715], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 314, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441, 712, 715, 717], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 151, 152, 153, 176, 182, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 418, 421, 422, 441, 448, 484, 532, 533, 594, 610, 613, 655, 657], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 281, 312, 313, 321, 328, 333, 335, 357, 360, 368, 370, 371, 375, 387, 391, 393, 400, 401, 402, 405, 406, 407, 421, 422, 441], "361": [8, 120, 281, 391], "181": [8, 120, 281, 391], "prefix": [9, 10, 282, 283, 661, 663, 670, 699], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 121, 126, 127, 132, 133, 148, 161, 166, 167, 220, 270, 282, 283, 287, 306, 315, 322, 327, 334, 338, 356, 386, 392, 397, 398, 399, 403, 404, 416, 433, 434, 471, 493, 499, 547, 580, 589, 594, 649, 658, 670, 673, 676, 683, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 117, 119, 126, 127, 128, 133, 139, 140, 141, 143, 149, 156, 161, 162, 165, 166, 168, 169, 171, 184, 185, 190, 199, 201, 202, 220, 251, 253, 267, 268, 274, 276, 282, 283, 288, 317, 327, 343, 356, 385, 390, 397, 398, 399, 404, 410, 429, 432, 433, 436, 450, 457, 458, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 586, 588, 612, 614, 617, 623, 638, 640, 648, 649, 658, 659, 661, 662, 663, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 694, 695, 701, 706, 708, 712, 714], "add": [9, 10, 43, 61, 71, 80, 166, 282, 283, 314, 334, 433, 461, 462, 661, 670, 701, 703, 704, 706, 712], "updat": [9, 10, 28, 73, 282, 283, 297, 343, 699, 700], "add_suffix": [9, 282], "suffix": [9, 10, 94, 282, 283, 699], "item_": [9, 282], "item_0": [9, 282], "item_1": [9, 282], "item_2": [9, 282], "item_3": [9, 282], "col_": [9, 282], "col_a": [9, 282], "col_b": [9, 282], "after": [10, 126, 283, 287, 397, 419, 461, 537, 546, 551, 556, 670, 673, 676, 699, 706, 712], "add_prefix": [10, 283], "_item": [10, 283], "0_item": [10, 283], "1_item": [10, 283], "2_item": [10, 283], "3_item": [10, 283], "_col": [10, 283], "a_col": [10, 283], "b_col": [10, 283], "aggreg": [11, 61, 127, 334, 398, 588, 612, 650, 705, 706, 709, 713], "over": [11, 16, 17, 40, 77, 97, 137, 249, 408, 578, 589, 604, 699, 700, 703, 711, 712, 717], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 103, 106, 107, 112, 117, 118, 123, 124, 126, 127, 132, 133, 137, 148, 149, 158, 166, 167, 171, 177, 185, 190, 199, 216, 217, 249, 264, 276, 296, 315, 326, 364, 390, 394, 397, 398, 403, 404, 408, 416, 417, 426, 433, 434, 450, 467, 468, 469, 470, 472, 473, 478, 482, 500, 505, 530, 539, 547, 548, 550, 551, 552, 554, 564, 566, 569, 580, 586, 588, 614, 617, 623, 638, 640, 649, 658, 663, 668, 670, 672, 673, 674, 675, 678, 679, 680, 681, 682, 684, 699, 700, 701, 703, 706, 710, 711, 712, 715], "accept": [11, 18, 19, 40, 80, 137, 209, 275, 288, 310, 361, 408, 487, 492, 500, 553, 569, 578, 588, 594, 614, 683, 699, 701, 703, 710, 711, 712, 717], "g": [11, 36, 111, 161, 306, 386, 469, 485, 487, 488, 493, 498, 499, 525, 531, 534, 561, 562, 640, 670, 699, 700, 701, 703, 712], "sum": [11, 35, 61, 115, 116, 127, 132, 137, 155, 304, 334, 388, 389, 398, 403, 408, 424, 445, 569, 576, 588, 598, 614, 703, 706, 708, 709, 711, 713, 717], "min": [11, 33, 36, 121, 185, 190, 199, 248, 302, 306, 392, 569, 575, 577, 588, 597, 607, 614, 617, 623, 638, 711, 715], "max": [11, 32, 36, 61, 121, 132, 301, 306, 334, 392, 403, 569, 574, 577, 588, 596, 607, 612, 614, 706, 709, 711, 712], "per": [11, 16, 29, 70, 148, 179, 295, 416, 475, 493, 508, 509, 539, 569, 588, 592, 594, 612, 614, 670, 673, 700, 706, 708, 711, 714], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 61, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 115, 116, 117, 118, 137, 147, 154, 167, 171, 178, 179, 207, 226, 254, 275, 289, 297, 306, 314, 315, 327, 334, 354, 355, 356, 363, 364, 365, 367, 376, 379, 386, 388, 389, 390, 399, 408, 415, 423, 434, 487, 488, 499, 501, 504, 505, 525, 540, 544, 547, 552, 585, 604, 658, 661, 663, 670, 672, 673, 674, 678, 679, 680, 681, 683, 699, 700, 701, 703, 704, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717], "sever": [11, 694, 695, 700, 712, 714], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 163, 165, 166, 167, 169, 171, 287, 361, 386, 394, 397, 416, 430, 433, 434, 574, 575, 576, 581, 582, 583, 589, 596, 597, 598, 600, 601, 602, 603, 607, 608, 611, 615, 640, 650, 652, 653, 654, 656, 671, 672, 673, 675, 682, 683, 712], "bool_onli": [12, 13, 284, 285], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 115, 116, 147, 151, 154, 182, 284, 285, 301, 302, 303, 304, 354, 355, 363, 364, 365, 367, 388, 389, 415, 418, 423, 448, 715], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 115, 116, 141, 147, 151, 154, 182, 276, 284, 285, 293, 298, 300, 301, 302, 303, 304, 306, 354, 355, 363, 364, 365, 367, 388, 389, 415, 418, 423, 445, 448, 577, 592, 594, 715], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 151, 182, 284, 285, 289, 301, 302, 303, 304, 320, 418, 448, 675, 699, 708, 712], "empti": [12, 13, 75, 76, 81, 104, 105, 115, 116, 125, 141, 146, 154, 244, 284, 285, 317, 349, 350, 377, 378, 388, 389, 396, 414, 423, 482, 514, 525, 537, 546, 661, 670, 712, 715], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 121, 126, 132, 137, 202, 215, 226, 253, 254, 284, 285, 321, 333, 343, 357, 375, 392, 397, 403, 408, 458, 525, 564, 658, 678, 679, 680, 681, 683, 715, 717], "zero": [12, 13, 23, 284, 285, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 670, 673, 712], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 115, 116, 123, 125, 126, 137, 143, 147, 151, 154, 161, 182, 217, 244, 276, 284, 285, 286, 296, 299, 343, 354, 355, 361, 363, 365, 367, 388, 389, 396, 397, 408, 415, 418, 423, 448, 453, 487, 488, 493, 499, 531, 563, 592, 612, 649, 676, 678, 679, 681, 691, 699, 700, 701, 703, 704, 706, 709, 712, 716], "ignore_index": [14, 45, 52, 137, 148, 149, 286, 316, 323, 408, 416, 417, 460, 477], "verify_integr": [14, 143, 262, 286], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 140, 148, 149, 179, 214, 226, 239, 248, 254, 270, 276, 288, 316, 327, 334, 356, 369, 376, 379, 410, 416, 417, 445, 460, 477, 658, 689, 699, 700, 706, 707, 709, 711, 717], "end": [14, 19, 148, 149, 185, 190, 199, 248, 288, 318, 416, 417, 477, 492, 497, 499, 504, 505, 535, 543, 544, 547, 550, 551, 553, 617, 622, 623, 625, 626, 628, 629, 632, 638, 670, 673, 676, 712], "caller": [14, 28, 55, 64, 73, 84, 88, 121, 125, 137, 183, 244, 246, 297, 327, 338, 343, 356, 361, 362, 392, 396, 408, 449, 482, 547, 552], "ad": [14, 461, 462, 469, 534, 699, 700, 701, 706], "do": [14, 15, 44, 46, 50, 123, 128, 143, 214, 226, 254, 270, 286, 287, 315, 317, 322, 394, 399, 468, 469, 607, 670, 674, 675, 699, 700, 701, 703, 706, 707, 708, 709, 712, 715, 717], "concat": [14, 286, 482, 666, 689, 701, 713], "gener": [14, 15, 36, 37, 51, 70, 137, 142, 211, 245, 286, 306, 307, 408, 411, 484, 532, 533, 577, 594, 649, 650, 663, 689, 699, 700, 701, 703, 705, 709, 712, 713], "concaten": [14, 286, 460, 471, 482, 489, 525, 674, 706, 711, 717], "unchang": [14, 28, 297, 564], "computation": 14, "intens": [14, 708], "than": [14, 15, 46, 60, 62, 70, 85, 87, 115, 116, 123, 137, 154, 179, 293, 333, 335, 357, 360, 388, 389, 394, 408, 423, 445, 454, 455, 456, 469, 487, 491, 496, 499, 508, 509, 537, 540, 546, 563, 564, 581, 582, 583, 594, 600, 601, 602, 603, 608, 611, 615, 645, 647, 663, 699, 700, 701, 703, 706, 707, 710, 712, 715, 717], "better": [14, 61, 137, 334, 408, 670, 700, 711], "solut": [14, 142, 245, 411, 699, 709], "those": [14, 15, 36, 121, 287, 306, 392, 460, 525, 569, 588, 614, 690, 699, 700, 703, 712], "origin": [14, 21, 28, 51, 88, 93, 124, 127, 139, 178, 183, 201, 202, 251, 253, 274, 289, 297, 318, 362, 398, 399, 443, 449, 457, 458, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 549, 648, 649, 651, 652, 653, 654, 655, 656, 657, 682, 699, 709], "onc": [14, 137, 408, 499, 673, 699, 701, 703, 706], "ab": [14, 260, 484, 493, 504, 528, 544, 545, 551, 712, 715], "df2": [14, 460, 663, 679, 706, 712, 715], "With": [14, 28, 70, 133, 198, 286, 293, 297, 316, 404, 445, 637, 673, 703, 706, 708, 709, 712], "follow": [14, 15, 70, 106, 127, 161, 287, 310, 398, 399, 487, 525, 537, 546, 563, 569, 588, 614, 640, 649, 670, 675, 683, 688, 699, 700, 701, 703, 704, 709, 711, 712, 714, 717], "while": [14, 97, 161, 171, 295, 589, 663, 701, 703, 707, 712, 715], "recommend": [14, 123, 124, 700, 701], "show": [14, 70, 74, 75, 76, 104, 105, 127, 349, 350, 377, 378, 398, 678, 679, 680, 681, 700, 703, 706, 712], "wai": [14, 61, 126, 334, 397, 650, 682, 699, 700, 701, 703, 708, 710, 712, 715, 717], "sourc": [14, 16, 17, 164, 250, 431, 660, 669, 670, 674, 675, 700, 701, 707], "less": [14, 46, 85, 87, 293, 357, 360, 454, 455, 456, 469, 563, 564, 645, 647, 673, 700], "effici": [14, 16, 93, 173, 438, 702, 703, 715], "abov": [14, 15, 61, 143, 287, 334, 699, 703, 709, 712, 715], "func": [15, 16, 17, 18, 111, 287, 386, 569, 588, 589, 607, 614, 650, 706], "raw": [15, 648, 669, 674, 675], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 121, 148, 149, 343, 363, 364, 367, 392, 416, 417, 460, 715], "reli": [15, 287, 702, 703, 706, 717], "numba": [15, 16, 119, 287, 650, 713, 717], "jit": [15, 16, 287, 712, 717], "compil": [15, 119, 287, 488, 531, 540, 542, 650, 701, 712, 717], "thu": [15, 287, 473, 702, 710, 712], "within": [15, 55, 61, 84, 132, 287, 327, 334, 356, 403, 487, 496, 508, 509, 532, 533, 541, 581, 582, 583, 586, 600, 601, 602, 603, 608, 611, 615, 670, 673, 676, 694, 699, 701, 712], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 123, 126, 287, 292, 294, 306, 325, 326, 343, 384, 385, 394, 397, 547, 552, 570, 571, 579, 580, 584, 589, 590, 591, 599, 606, 700, 707, 713], "cuda": [15, 16, 17, 287, 648, 649, 650, 702, 705, 706, 708, 712, 714], "python": [15, 18, 21, 43, 119, 246, 287, 289, 314, 419, 482, 492, 510, 511, 512, 513, 519, 520, 521, 524, 547, 552, 589, 640, 650, 669, 670, 673, 674, 675, 682, 699, 701, 702, 703, 705, 706, 710, 712, 715, 717], "target": [15, 123, 287, 490, 541, 699, 700], "see": [15, 16, 19, 28, 43, 48, 50, 61, 119, 161, 166, 185, 190, 199, 287, 288, 297, 314, 320, 322, 334, 433, 547, 552, 569, 588, 594, 614, 617, 623, 638, 669, 670, 672, 673, 674, 675, 682, 699, 700, 704, 706, 709, 711, 712, 714, 716, 717], "guid": [15, 166, 287, 433, 569, 588, 614, 701, 704, 705, 712], "user": [15, 16, 17, 51, 166, 275, 287, 433, 569, 588, 614, 650, 683, 699, 700, 701, 703, 704, 705, 706, 709, 714, 717], "defin": [15, 17, 37, 46, 132, 142, 211, 245, 287, 307, 330, 403, 411, 536, 589, 649, 650, 658, 699, 703, 705, 706, 708, 713, 717], "udf": [15, 287, 650, 708, 713, 717], "through": [15, 121, 287, 392, 487, 488, 493, 499, 531, 559, 689, 703, 712, 714, 715], "strings_udf": [15, 287, 712], "rapid": [15, 146, 287, 414, 500, 528, 531, 543, 545, 561, 562, 661, 669, 673, 701, 706, 708, 712, 715], "librari": [15, 166, 287, 433, 547, 552, 563, 640, 682, 702, 705, 708, 709, 713, 714, 717], "includ": [15, 28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 117, 133, 141, 167, 171, 172, 179, 192, 276, 287, 293, 297, 306, 334, 349, 350, 363, 364, 366, 367, 369, 377, 378, 383, 390, 404, 434, 445, 461, 467, 468, 469, 501, 513, 520, 527, 530, 534, 548, 551, 554, 572, 577, 581, 582, 583, 593, 600, 601, 602, 603, 608, 611, 615, 625, 658, 663, 669, 670, 672, 673, 674, 675, 676, 699, 700, 701, 702, 703, 706, 710, 712, 714, 715, 717], "subset": [15, 45, 46, 55, 84, 141, 158, 166, 179, 249, 287, 327, 356, 426, 433, 670, 709, 711, 712], "expect": [15, 26, 88, 111, 117, 148, 167, 183, 287, 296, 362, 386, 416, 434, 449, 487, 561, 607, 649, 673, 699, 700, 703, 707, 708, 709, 712], "refer": [15, 28, 36, 43, 119, 287, 297, 306, 314, 501, 542, 704, 705, 710, 712, 715, 716], "caveat": [15, 287, 700, 713], "referenc": [15, 287, 715], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 127, 133, 141, 148, 158, 164, 166, 167, 169, 171, 173, 192, 198, 219, 238, 242, 249, 250, 258, 262, 277, 298, 300, 306, 311, 315, 317, 329, 332, 349, 350, 377, 378, 386, 398, 404, 416, 426, 431, 433, 434, 438, 440, 467, 469, 487, 489, 490, 534, 536, 537, 546, 594, 604, 625, 637, 640, 649, 658, 660, 661, 663, 675, 676, 678, 679, 681, 682, 699, 700, 701, 703, 706, 708, 709, 711, 712, 714, 715, 717], "expand": [15, 493, 537, 546, 547, 552, 702], "reduc": [15, 699], "argument": [15, 16, 17, 19, 20, 21, 31, 61, 90, 111, 123, 124, 143, 148, 151, 161, 166, 167, 177, 182, 248, 287, 288, 289, 334, 364, 386, 399, 416, 418, 433, 434, 448, 460, 569, 588, 607, 614, 649, 661, 670, 672, 673, 675, 682, 683, 684, 688, 699, 700, 703, 708, 716], "simpl": [15, 469, 699, 703, 706, 712], "variabl": [15, 46, 92, 94, 119, 132, 133, 317, 403, 404, 650, 658, 667, 699, 706, 714], "could": [15, 594, 703, 708, 712], "def": [15, 16, 17, 132, 287, 403, 525, 532, 589, 650, 670, 699, 701, 706, 708, 710, 712], "f": [15, 36, 111, 270, 287, 306, 386, 500, 525, 540, 549, 561, 562, 682, 701, 712], "els": [15, 75, 76, 238, 287, 349, 350, 701, 706, 708, 712], "awar": [15, 295, 712], "manner": [15, 16, 287], "mai": [15, 16, 17, 21, 61, 137, 140, 166, 229, 270, 287, 289, 334, 361, 408, 410, 433, 487, 490, 508, 509, 580, 594, 670, 673, 674, 675, 676, 688, 691, 699, 700, 701, 702, 703, 706, 707, 708, 711, 712], "condition": [15, 287, 699, 712], "mix": [15, 36, 117, 166, 229, 306, 433, 510, 683, 707, 712], "common": [15, 36, 94, 142, 226, 245, 287, 306, 411, 682, 699, 700, 703, 712], "rather": [15, 123, 162, 179, 394, 429, 445, 699, 701, 703, 707, 712, 717], "howev": [15, 171, 287, 487, 534, 594, 699, 700, 701, 703, 706, 710, 712, 715], "promot": [15, 712], "safe": [15, 706, 712], "regardless": [15, 36, 119, 306, 683, 709, 712], "op": [15, 712], "against": [15, 16, 17, 50, 322, 490, 510], "v": [15, 148, 149, 416, 417, 542, 580, 702, 707], "w": [15, 127, 166, 398, 433, 485, 670], "z": [15, 16, 17, 44, 54, 126, 161, 315, 326, 394, 397, 474, 495, 565, 709], "manipul": [15, 287, 689, 705, 706], "long": [15, 92, 287, 563, 667, 673, 699], "neither": [15, 28, 258, 259, 270, 287, 293, 297, 707], "modifi": [15, 51, 128, 143, 178, 246, 287, 399, 443, 580, 673], "place": [15, 45, 73, 88, 123, 126, 128, 133, 142, 143, 148, 167, 178, 183, 245, 287, 343, 362, 397, 399, 404, 411, 416, 434, 443, 449, 461, 463, 469, 482, 494, 495, 496, 525, 670, 674, 675, 714, 715], "nor": [15, 28, 166, 270, 287, 297, 433, 707, 717], "creat": [15, 28, 123, 125, 127, 128, 143, 166, 201, 202, 207, 244, 246, 251, 253, 274, 287, 297, 329, 330, 331, 396, 398, 399, 433, 457, 458, 537, 542, 546, 594, 648, 670, 699, 701, 706, 708, 709, 710, 711, 712], "st": [15, 287, 712], "str_col": [15, 712], "scale": [15, 706, 709, 710, 712], "len": [15, 16, 171, 287, 486, 649, 689, 706, 712], "elif": [15, 287, 712], "startswith": [15, 287, 689, 712], "42": [15, 185, 287, 708, 711, 712], "abc": [15, 260, 287, 317, 361, 480, 484, 486, 491, 497, 504, 506, 507, 514, 516, 517, 525, 527, 532, 543, 544, 551, 670, 710, 712, 715], "some_exampl": [15, 287, 712], "sinc": [15, 167, 168, 171, 220, 287, 379, 434, 436, 650, 699, 700, 701, 703, 712, 715], "requir": [15, 29, 37, 38, 39, 65, 66, 115, 116, 132, 137, 142, 154, 171, 211, 212, 213, 224, 225, 245, 287, 307, 308, 309, 339, 340, 388, 389, 403, 408, 411, 423, 581, 582, 583, 592, 594, 600, 601, 602, 603, 608, 611, 615, 648, 675, 676, 699, 700, 703, 711, 712], "creation": [15, 38, 212, 287, 308, 713], "upper": [15, 26, 36, 287, 296, 306, 529, 534, 555, 556, 676, 689], "rais": [15, 21, 44, 55, 57, 58, 84, 124, 126, 141, 178, 184, 219, 265, 287, 289, 315, 318, 327, 329, 332, 348, 356, 397, 468, 473, 487, 504, 525, 537, 540, 544, 546, 563, 658, 662, 677, 682, 683, 700, 701, 703, 708, 709, 710, 712], "attributeerror": [15, 287], "complet": [15, 287, 701, 706, 714], "http": [15, 43, 161, 287, 314, 490, 547, 552, 561, 562, 594, 650, 669, 670, 673, 674, 675, 676, 682, 701], "doc": [15, 43, 287, 314, 547, 552, 640, 673, 682, 708, 717], "ai": [15, 103, 106, 146, 287, 414, 528, 531, 543, 545, 561, 562, 669], "api": [15, 16, 110, 287, 385, 699, 700, 701, 702, 703, 704, 705, 706, 708, 711, 712, 713, 714, 715, 716, 717], "stabl": [15, 19, 287, 288, 650, 714], "user_guid": [15, 287, 701], "html": [15, 43, 287, 314, 547, 552, 561, 562, 650, 682, 701], "incol": [16, 17, 712], "outcol": [16, 17, 712], "pessimistic_nul": [16, 17], "chunk": [16, 171, 589, 676], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 124, 323, 534, 589, 650, 706, 708, 712, 713], "execut": [16, 17, 701, 706, 712, 717], "Or": [16, 17, 123, 710, 712], "dictionari": [16, 17, 21, 111, 142, 245, 289, 386, 411, 568, 607, 661, 675, 703, 704, 710, 712], "map": [16, 17, 61, 75, 76, 104, 105, 111, 124, 169, 202, 238, 242, 253, 334, 349, 350, 377, 378, 386, 458, 495, 559, 568, 569, 588, 607, 614, 661, 670, 673, 700, 702, 703, 706, 711, 712, 715], "col1": [16, 17, 712], "arg1": [16, 17, 111, 386, 712], "output": [16, 17, 36, 51, 61, 70, 109, 119, 137, 139, 161, 164, 167, 169, 171, 172, 173, 250, 276, 306, 334, 408, 431, 434, 438, 450, 471, 489, 496, 547, 552, 589, 649, 650, 661, 663, 673, 676, 678, 679, 680, 681, 689, 699, 701, 703, 705, 709, 711, 712, 713, 717], "extra": [16, 17, 21, 124, 161, 289, 535, 670], "These": [16, 17, 94, 650, 691, 692, 694, 695, 696, 699, 700, 701, 703, 710, 712, 715], "directli": [16, 17, 44, 178, 246, 315, 461, 690, 703, 706, 708, 712], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 121, 125, 126, 133, 137, 140, 148, 167, 169, 171, 178, 207, 211, 212, 213, 220, 224, 225, 244, 248, 306, 307, 308, 309, 339, 340, 392, 394, 396, 397, 404, 408, 410, 416, 434, 467, 469, 491, 523, 542, 586, 649, 658, 663, 675, 676, 690, 699, 700, 701, 703, 706, 712, 717], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 115, 116, 117, 125, 132, 154, 159, 177, 178, 187, 189, 217, 242, 244, 248, 276, 299, 317, 320, 326, 377, 378, 388, 389, 396, 403, 423, 427, 443, 444, 445, 460, 494, 499, 525, 581, 582, 583, 594, 600, 601, 602, 603, 608, 611, 615, 619, 621, 649, 651, 658, 661, 670, 673, 683, 684, 699, 700, 703, 707, 715, 717], "underli": [16, 17, 124, 146, 181, 263, 374, 395, 414, 447, 689, 699, 703, 706, 715], "garbag": [16, 17, 331], "chunksiz": [16, 161, 672, 673], "offset": [16, 55, 84, 127, 132, 171, 327, 356, 398, 403, 670, 673, 676, 703], "start": [16, 23, 94, 119, 127, 146, 161, 275, 291, 318, 353, 398, 414, 497, 504, 505, 531, 534, 540, 543, 544, 549, 550, 551, 552, 553, 561, 562, 622, 625, 626, 628, 629, 632, 669, 670, 672, 673, 674, 676, 682, 702, 703], "span": 16, "th": [16, 324, 473, 474, 491], "size": [16, 26, 75, 76, 93, 104, 105, 132, 169, 171, 207, 238, 242, 296, 349, 350, 377, 378, 403, 482, 486, 491, 549, 612, 658, 663, 670, 673, 676, 699, 703, 711, 712, 714], "thread": [16, 17, 670, 706, 712], "block": [16, 534, 670, 676], "kernel": [16, 17, 119, 713], "foral": [16, 712], "built": [16, 534, 703, 705, 706, 708], "queri": [16, 166, 433, 501, 706, 709], "driver": [16, 706], "optim": [16, 70, 675, 714, 717], "launch": [16, 712], "configur": [16, 669, 670, 674, 675, 676, 700, 712, 716], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 211, 212, 213, 224, 225, 307, 308, 309, 339, 340, 689], "It": [16, 64, 97, 137, 148, 207, 220, 338, 361, 408, 416, 663, 699, 700, 702, 712, 715, 717], "good": [16, 649, 658, 700, 702, 706], "point": [16, 73, 117, 118, 140, 167, 343, 390, 410, 434, 486, 533, 557, 558, 585, 670, 676, 702, 703, 710, 712, 713, 715], "ineffici": 16, "Its": [16, 703], "maximum": [16, 26, 89, 169, 171, 260, 296, 363, 495, 563, 607, 649, 658, 670, 710, 714], "possibl": [16, 73, 166, 207, 343, 433, 673, 683, 699, 700, 701, 703, 712, 714, 715, 717], "avail": [16, 166, 433, 488, 537, 546, 659, 669, 670, 674, 675, 688, 690, 694, 701, 706, 711, 712, 714, 715], "resourc": [16, 70, 699], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 115, 116, 123, 124, 125, 132, 133, 137, 146, 151, 154, 159, 167, 169, 171, 182, 241, 244, 264, 267, 268, 273, 290, 298, 299, 306, 324, 331, 338, 374, 380, 383, 385, 388, 389, 396, 403, 404, 408, 414, 418, 423, 427, 434, 444, 445, 448, 452, 454, 455, 456, 460, 480, 482, 484, 488, 491, 496, 500, 512, 527, 532, 533, 536, 540, 547, 552, 557, 572, 581, 582, 583, 586, 592, 593, 594, 600, 601, 602, 603, 604, 608, 611, 615, 622, 644, 645, 646, 647, 648, 649, 650, 655, 657, 658, 661, 666, 669, 670, 672, 673, 674, 676, 678, 679, 680, 681, 682, 699, 700, 701, 703, 706, 710, 711, 712, 714], "concurr": [16, 17], "To": [16, 36, 45, 126, 171, 306, 397, 445, 537, 607, 670, 673, 674, 675, 699, 701, 703, 708, 711, 712, 715, 716, 717], "access": [16, 36, 166, 306, 433, 689, 692, 694, 695, 696, 703, 706, 712, 714], "count": [16, 36, 70, 89, 90, 95, 97, 107, 132, 159, 179, 306, 363, 364, 367, 369, 383, 403, 427, 445, 573, 577, 595, 650, 689, 706, 709, 711, 712], "threadidx": [16, 712], "blockdim": [16, 712], "respect": [16, 61, 94, 126, 167, 334, 397, 434, 469, 547, 552, 566, 658, 673, 679, 699, 708, 710], "document": [16, 547, 682, 699, 700, 702, 703, 704, 706, 712, 717], "In": [16, 26, 61, 106, 124, 166, 287, 296, 334, 399, 433, 525, 547, 552, 589, 682, 699, 700, 701, 702, 703, 707, 708, 710, 712, 713, 715, 717], "below": [16, 26, 28, 36, 48, 296, 297, 306, 320, 594, 699, 706, 712, 717], "invok": [16, 17, 699, 703], "By": [16, 36, 45, 61, 70, 97, 121, 133, 166, 167, 179, 214, 306, 334, 392, 404, 433, 434, 482, 663, 670, 675, 699, 703, 706, 708, 712, 715, 717], "loop": [16, 17, 703, 708, 712], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 287, 536, 564, 674, 675, 703, 710, 711, 712, 715, 717], "so": [17, 132, 171, 179, 270, 379, 403, 445, 699, 700, 701, 703, 705, 708, 709, 712, 715, 717], "must": [17, 37, 50, 51, 74, 80, 94, 109, 124, 126, 127, 132, 133, 139, 140, 142, 149, 159, 166, 168, 178, 185, 190, 199, 207, 211, 245, 246, 260, 276, 307, 322, 331, 397, 398, 403, 404, 410, 411, 417, 427, 433, 436, 467, 473, 474, 482, 488, 501, 617, 623, 638, 658, 670, 673, 674, 675, 679, 680, 699, 700, 703, 706, 712, 715, 717], "independ": [17, 701, 712], "stride": [17, 169, 649], "improv": [17, 670, 674], "parallel": [17, 183, 449, 670, 706, 707, 709, 712, 714, 717], "resembl": 17, "code": [17, 44, 146, 156, 248, 262, 315, 324, 330, 414, 486, 699, 701, 702, 703, 706, 712], "nelem": [17, 708], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 712], "zip": [17, 167, 434, 670, 673, 706, 712], "callabl": [18, 88, 111, 148, 167, 183, 362, 386, 416, 434, 449, 569, 588, 592, 607, 612, 614, 711], "na_act": [18, 361], "elementwis": [18, 650], "everi": [18, 46, 74, 540, 569, 588, 614, 703, 706, 712], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 124, 126, 133, 169, 178, 289, 306, 315, 343, 361, 366, 397, 399, 404, 460, 471, 482, 577, 661, 670, 672, 674, 678, 679, 681, 682, 683, 712, 715], "propag": [18, 21, 54, 289, 326, 361, 547, 552, 580, 712, 714, 715], "without": [18, 28, 36, 44, 70, 124, 246, 255, 297, 306, 315, 361, 482, 534, 547, 551, 552, 670, 679, 680, 681, 699, 700, 705, 708, 712], "them": [18, 61, 334, 361, 445, 489, 494, 496, 650, 682, 701, 703, 710, 711, 712, 717], "kind": [19, 94, 127, 148, 149, 222, 246, 288, 398, 416, 417, 477, 710], "quicksort": [19, 149, 288, 417, 477], "ascend": [19, 106, 121, 140, 148, 149, 179, 248, 288, 379, 392, 410, 416, 417, 445, 477, 604], "na_posit": [19, 140, 148, 149, 248, 288, 410, 416, 417, 477], "last": [19, 36, 45, 54, 64, 103, 106, 124, 140, 148, 149, 157, 215, 248, 288, 306, 316, 326, 338, 376, 379, 410, 416, 417, 425, 461, 477, 504, 537, 544, 546, 580, 626, 628, 630, 649, 670, 676, 682, 712], "would": [19, 140, 166, 248, 287, 288, 410, 433, 541, 604, 682, 699, 701, 706, 712, 715], "effect": [19, 61, 123, 288, 334, 394, 699, 707, 709], "compat": [19, 22, 67, 93, 177, 220, 288, 317, 366, 673, 684, 701, 702, 703, 705, 710, 713, 714], "mergesort": [19, 288], "heapsort": [19, 288], "choic": [19, 70, 288, 682, 701, 708], "algorithm": [19, 117, 288, 390, 490, 491, 538, 703], "descend": [19, 103, 140, 148, 149, 179, 248, 288, 376, 410, 416, 417, 445, 477], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 121, 127, 140, 142, 148, 149, 156, 167, 179, 184, 198, 215, 245, 248, 264, 287, 288, 306, 310, 316, 322, 334, 338, 376, 379, 392, 398, 399, 410, 411, 416, 417, 434, 445, 477, 493, 498, 523, 529, 537, 547, 552, 555, 556, 560, 564, 578, 604, 627, 629, 631, 637, 649, 658, 670, 673, 676, 682, 699, 700, 701, 703, 706, 712], "put": [19, 148, 149, 248, 288, 416, 417, 477, 702], "begin": [19, 148, 149, 248, 288, 416, 417, 477, 505, 535, 550, 551, 552, 629, 670, 673, 676, 706], "cupi": [19, 31, 61, 117, 137, 140, 162, 180, 237, 248, 261, 288, 324, 334, 408, 410, 429, 446, 649, 699, 703, 705, 706, 713, 715, 717], "ndarrai": [19, 59, 92, 137, 162, 168, 180, 181, 184, 192, 238, 242, 248, 261, 276, 288, 324, 408, 429, 436, 446, 447, 649, 658, 667, 683, 706, 708, 712], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 127, 132, 141, 202, 253, 276, 287, 288, 296, 315, 327, 338, 356, 379, 398, 403, 458, 478, 487, 491, 502, 503, 512, 527, 649, 668, 672, 673, 682, 699, 700, 703, 706, 710, 712], "int32": [19, 21, 63, 140, 194, 248, 288, 289, 311, 337, 410, 445, 474, 476, 480, 486, 488, 490, 497, 504, 526, 538, 543, 544, 557, 633, 649, 658, 670, 703, 706, 710, 712, 714], "foo": [19, 47, 161, 288, 399, 540, 670, 699, 700, 701, 706], "idx": [19, 75, 76, 104, 105, 209, 220, 227, 228, 229, 230, 231, 235, 236, 237, 246, 248, 249, 252, 264, 288, 331, 349, 350, 377, 378, 487, 537, 546, 706], "keyword": [20, 31, 90, 111, 123, 124, 239, 364, 386, 394, 460, 547, 552, 607, 672, 706, 712], "error": [21, 44, 124, 161, 166, 178, 287, 289, 315, 348, 433, 658, 672, 682, 683, 700, 710, 712, 714], "cast": [21, 51, 115, 116, 123, 154, 155, 289, 388, 389, 394, 423, 424, 470, 673, 707, 715], "altern": [21, 44, 46, 111, 289, 315, 386, 541, 607, 670, 699, 701], "col": [21, 72, 289, 699, 708], "where": [21, 38, 44, 46, 51, 61, 70, 75, 76, 88, 103, 104, 105, 106, 111, 117, 123, 125, 140, 151, 169, 182, 212, 237, 244, 289, 308, 315, 334, 349, 350, 362, 377, 378, 379, 386, 390, 394, 396, 410, 418, 448, 484, 491, 497, 501, 504, 508, 509, 543, 544, 607, 646, 655, 657, 672, 699, 700, 701, 703, 706, 707, 711, 714], "specif": [21, 45, 51, 94, 133, 289, 404, 688, 694, 699, 700, 701, 702, 703, 706, 715, 716], "deep": [21, 28, 70, 93, 164, 210, 250, 289, 297, 366, 431, 660], "henc": [21, 289, 715], "chang": [21, 28, 110, 123, 151, 156, 178, 182, 289, 297, 316, 385, 394, 395, 418, 445, 448, 468, 469, 534, 555, 699, 700, 715], "warn": [21, 124, 289, 682, 700, 706, 715], "control": [21, 36, 124, 170, 289, 306, 437, 534, 649, 670, 699, 714], "except": [21, 45, 64, 124, 127, 192, 215, 226, 254, 289, 316, 338, 398, 504, 544, 562, 625, 650, 670, 682, 702, 703, 711, 714], "invalid": [21, 57, 58, 124, 219, 265, 289, 329, 332, 677, 682, 683], "suppress": [21, 44, 124, 289, 315], "On": [21, 124, 289, 469, 706, 709], "constructor": [21, 289, 689, 701, 703, 706, 708, 715], "float32": [21, 289, 445, 683, 710, 714], "custom": [21, 132, 289, 403, 650, 667, 675, 699, 700, 703, 709, 716, 717], "cat_dtyp": [21, 289], "enabl": [21, 169, 289, 670, 673, 699, 701, 703, 710, 714], "s1": [21, 286, 289, 460, 471, 487, 510, 511, 520], "s2": [21, 286, 289, 399, 460, 470, 471, 487, 510, 520], "alia": [22, 67, 232, 344, 353], "cdf1": 23, "k2": [23, 673], "temp": [23, 266, 494, 706], "stop": [23, 110, 146, 275, 291, 353, 385, 414, 549, 550, 551, 672], "step": [23, 275, 291, 353, 469, 549], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 124, 126, 128, 143, 148, 149, 183, 243, 246, 292, 294, 295, 296, 315, 316, 317, 325, 326, 343, 362, 384, 395, 397, 399, 416, 417, 449, 461, 462, 463, 467, 468, 469, 477, 580, 715], "synonym": [24, 25, 53, 108, 292, 294, 325, 384], "fillna": [24, 25, 46, 53, 108, 126, 292, 294, 317, 325, 384, 397, 706, 707, 709, 713], "bfill": [24, 54, 127, 260, 292, 326, 398, 580], "lower": [26, 36, 117, 118, 296, 306, 390, 481, 534, 555, 556, 559, 560, 585, 676, 689, 703, 706], "trim": [26, 296, 535], "threshold": [26, 296, 594], "assign": [26, 51, 121, 124, 139, 295, 296, 392, 437, 706, 709, 715], "outsid": [26, 166, 296, 433, 460, 712], "boundari": [26, 132, 293, 296, 403, 712], "singular": [26, 296], "latter": [26, 296, 699, 700, 701, 708], "case": [26, 51, 64, 94, 117, 124, 148, 205, 226, 254, 257, 296, 338, 399, 416, 459, 487, 490, 525, 531, 534, 540, 547, 649, 682, 699, 700, 701, 703, 707, 708, 711, 712, 715, 717], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 115, 116, 137, 148, 154, 166, 183, 185, 190, 199, 212, 224, 276, 290, 296, 308, 316, 334, 339, 362, 388, 389, 408, 416, 423, 433, 437, 449, 469, 534, 561, 562, 569, 581, 582, 583, 588, 600, 601, 602, 603, 608, 611, 614, 615, 617, 623, 638, 670, 674, 678, 679, 680, 681, 699, 700, 703, 708, 711, 712, 713, 714, 715, 717], "array_lik": [26, 296], "minimum": [26, 29, 95, 132, 296, 298, 367, 403, 483, 495, 496, 528, 536, 545, 564, 592, 594, 607, 658, 699], "sr": [26, 127, 137, 287, 296, 353, 398, 408, 428, 445, 490, 496, 541, 712], "t": [28, 43, 55, 84, 93, 97, 107, 117, 124, 137, 171, 179, 185, 190, 195, 199, 297, 314, 327, 356, 369, 383, 408, 445, 485, 492, 498, 515, 521, 525, 530, 534, 535, 548, 554, 572, 593, 617, 623, 634, 638, 673, 699, 706, 707, 708, 709, 712, 715], "modif": [28, 297], "reflect": [28, 43, 297, 314, 700], "shallow": [28, 297], "vice": [28, 297, 555], "versa": [28, 297, 555], "s_copi": [28, 297], "versu": [28, 297, 700, 715], "share": [28, 297, 460, 699, 700, 703], "remain": [28, 112, 264, 297, 482, 529, 555, 556, 560, 564, 668, 699], "pearson": [29, 147, 290, 298, 415, 592, 711], "min_period": [29, 132, 298, 300, 403, 592, 594, 650, 712], "correl": [29, 290, 298, 592, 594], "matrix": [29, 31, 491, 592, 594, 713], "spearman": [29, 298, 592], "standard": [29, 151, 161, 193, 298, 418, 543, 547, 552, 559, 610, 632, 640, 655, 670, 699, 700, 701, 703, 706, 709, 712], "coeffici": [29, 298, 592], "rank": [29, 298], "observ": [29, 61, 132, 266, 298, 299, 334, 403, 580, 592, 594, 604, 651, 706], "pair": [29, 77, 126, 161, 397, 592, 594, 670, 673, 675], "have": [29, 36, 48, 50, 55, 61, 74, 84, 94, 97, 106, 109, 111, 121, 123, 127, 137, 141, 170, 171, 178, 179, 276, 298, 306, 320, 322, 327, 334, 356, 386, 392, 398, 408, 437, 466, 482, 491, 502, 503, 525, 592, 594, 650, 667, 673, 699, 700, 701, 703, 706, 708, 711, 712, 715], "valid": [29, 46, 115, 116, 132, 133, 154, 262, 298, 317, 331, 388, 389, 403, 404, 423, 488, 501, 525, 580, 581, 582, 583, 592, 594, 600, 601, 602, 603, 608, 611, 615, 673, 677, 699, 701, 703, 704, 714], "request": [29, 90, 91, 161, 171, 220, 260, 269, 364, 365, 670], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 115, 116, 117, 121, 147, 151, 154, 182, 354, 355, 363, 364, 365, 367, 388, 389, 392, 415, 418, 423, 448, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615], "cell": [30, 708, 712], "nat": [30, 46, 75, 76, 97, 104, 105, 184, 349, 350, 369, 377, 378, 632, 682, 715], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 161, 215, 315, 317, 320, 322, 349, 350, 369, 377, 378, 469, 525, 650, 670, 699, 701, 703, 712, 715], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 161, 183, 238, 242, 316, 317, 349, 350, 362, 377, 378, 449, 525, 670, 673, 680, 699], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 349, 350, 377, 378], "24": [30, 32, 33, 34, 35, 61, 91, 93, 115, 116, 127, 128, 132, 301, 302, 303, 304, 334, 365, 388, 389, 398, 403, 485, 577, 706, 708, 715], "21": [30, 127, 132, 133, 398, 403, 404, 485, 706, 711], "26": [30, 43, 61, 298, 300, 314, 334, 485, 577, 626, 628, 629, 706, 708], "covari": [31, 300, 594], "cumul": [32, 33, 34, 35, 301, 302, 303, 304, 573, 574, 575, 576, 595, 596, 597, 598, 715], "indexedfram": [32, 33, 34, 35, 703], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 157, 183, 293, 299, 301, 302, 303, 304, 317, 326, 334, 338, 349, 350, 362, 365, 377, 378, 425, 437, 449, 485, 508, 509, 525, 533, 534, 535, 538, 557, 558, 632, 712], "cumsum": [32, 33, 34, 301, 302, 303, 703, 715], "15": [32, 33, 34, 35, 45, 55, 84, 127, 132, 140, 143, 252, 301, 302, 303, 304, 327, 353, 356, 398, 403, 410, 432, 485, 516, 517, 706, 712], "34": [32, 33, 34, 35, 154, 301, 302, 303, 304, 423, 494, 715], "product": [34, 43, 115, 154, 266, 267, 268, 303, 314, 388, 423, 699, 713, 714], "percentil": [36, 121, 306, 392], "datetime_is_numer": [36, 306], "descript": [36, 70, 306, 577, 659, 689, 701, 704, 706, 716], "statist": [36, 70, 132, 169, 171, 276, 306, 403, 577, 663, 674, 675, 706], "summar": [36, 306, 577, 711], "central": [36, 306, 577], "tendenc": [36, 306, 577], "dispers": [36, 306, 577], "shape": [36, 50, 93, 140, 148, 306, 322, 410, 416, 577, 703, 708, 712, 715], "dataset": [36, 169, 171, 306, 369, 577, 663, 665, 669, 670, 673, 674, 675, 699, 712], "distribut": [36, 137, 306, 408, 577, 699, 706], "analyz": [36, 306, 577, 706], "well": [36, 103, 106, 117, 142, 220, 245, 306, 411, 465, 534, 680, 701, 703, 708], "vari": [36, 306, 649, 678, 679, 680, 681, 706], "depend": [36, 51, 94, 124, 162, 167, 168, 170, 207, 239, 264, 306, 429, 434, 436, 437, 547, 552, 658, 660, 672, 673, 682, 683, 699, 703, 706, 708, 714], "what": [36, 306, 478, 699, 700, 703, 712, 713, 717], "detail": [36, 161, 185, 190, 199, 287, 306, 594, 617, 623, 638, 640, 669, 670, 674, 675, 699, 704, 705, 706, 711, 712, 716, 717], "fall": [36, 306, 622, 699, 703, 714], "between": [36, 51, 73, 110, 117, 118, 121, 276, 290, 298, 300, 306, 343, 385, 390, 392, 489, 491, 497, 504, 525, 532, 533, 535, 543, 544, 578, 585, 594, 607, 699, 700, 701, 703, 705, 709, 711, 712, 713, 714, 715, 717], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 132, 290, 306, 334, 337, 349, 350, 365, 377, 378, 390, 403, 485, 577, 632, 680, 681, 706, 712], "75": [36, 70, 306, 390, 569, 577, 588, 614, 717], "25th": [36, 306], "50th": [36, 306], "75th": [36, 306], "submit": [36, 306], "instead": [36, 70, 111, 119, 127, 132, 171, 192, 207, 246, 266, 306, 330, 348, 386, 398, 403, 460, 471, 492, 494, 504, 544, 607, 625, 699, 700, 703, 706, 714, 715], "style": [36, 45, 61, 94, 123, 306, 334, 701, 702, 706, 712], "select_dtyp": [36, 306], "o": [36, 306, 485, 498, 699, 703, 706, 713], "omit": [36, 44, 179, 306, 315, 482, 577, 672], "noth": [36, 171, 306, 505], "output_fram": [36, 306], "summari": [36, 70, 306, 577, 713], "mean": [36, 48, 61, 115, 116, 127, 154, 287, 306, 320, 334, 388, 389, 398, 423, 488, 551, 569, 577, 588, 614, 699, 700, 706, 708, 709, 711, 712, 715, 717], "std": [36, 306, 577, 708, 709, 711], "50": [36, 44, 63, 70, 126, 127, 209, 306, 315, 337, 390, 397, 398, 577, 679, 708, 710, 712], "median": [36, 306, 711], "top": [36, 121, 306, 392, 471, 689, 699, 706], "freq": [36, 55, 84, 110, 127, 145, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 203, 204, 206, 306, 318, 327, 356, 385, 398, 413, 450, 586, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 633, 634, 635, 636, 638, 639, 640, 641, 642, 706], "most": [36, 97, 179, 306, 445, 504, 544, 650, 675, 690, 699, 700, 703, 706, 709], "frequenc": [36, 97, 127, 179, 185, 190, 199, 306, 398, 445, 453, 617, 623, 638], "timestamp": [36, 47, 75, 76, 104, 105, 132, 167, 171, 306, 349, 350, 377, 378, 403, 434, 522, 617, 623, 638, 673, 682, 706, 709, 715, 717], "highest": [36, 97, 121, 306, 392, 461, 543, 544, 699], "arbitrarili": [36, 306], "chosen": [36, 137, 306, 408], "among": [36, 43, 306, 314, 594, 717], "analysi": [36, 306, 594], "consist": [36, 140, 227, 228, 229, 230, 231, 235, 236, 262, 306, 410, 699, 700, 701, 703, 712], "union": [36, 94, 162, 168, 276, 306, 429, 436, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 487, 539, 540, 553, 649, 680], "00000": [36, 147, 306, 415, 708], "50000": [36, 306], "02765": [36, 306], "25000": [36, 306], "75000": [36, 306], "datetime64": [36, 46, 47, 75, 76, 104, 105, 119, 127, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 203, 204, 306, 349, 350, 377, 378, 398, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 682, 710, 714, 715], "2000": [36, 127, 186, 191, 194, 195, 196, 197, 200, 204, 306, 398, 618, 622, 624, 625, 626, 628, 629, 633, 634, 635, 636, 639, 640, 642], "2010": [36, 306, 625, 632, 708], "2006": [36, 306, 625], "09": [36, 55, 84, 127, 132, 306, 327, 356, 398, 403, 622, 626, 628, 629, 640, 706], "08": [36, 119, 123, 127, 132, 185, 187, 188, 189, 190, 193, 198, 203, 306, 398, 403, 619, 620, 621, 622, 626, 637, 641, 678, 679, 680, 681, 700], "2004": [36, 306, 625], "31": [36, 127, 185, 187, 188, 189, 190, 193, 196, 198, 203, 204, 306, 398, 619, 620, 621, 622, 625, 626, 630, 631, 635, 637, 640, 641, 642, 643, 644, 645, 647], "field": [36, 171, 306, 501, 565, 649, 670, 689, 703], "classmethod": [37, 38, 57, 58, 59, 65, 211, 212, 218, 219, 224, 265, 266, 267, 268, 307, 308, 329, 330, 331, 332, 339], "header": [37, 38, 39, 50, 65, 66, 161, 211, 212, 213, 224, 225, 307, 308, 309, 322, 339, 340, 670, 703], "represent": [37, 70, 142, 180, 181, 211, 245, 261, 266, 307, 411, 446, 447, 482, 710, 713], "subclass": [37, 38, 65, 132, 142, 207, 211, 212, 224, 245, 307, 308, 339, 361, 403, 411, 701, 703], "implement": [37, 90, 110, 142, 178, 211, 245, 275, 307, 364, 385, 411, 563, 672, 703, 706, 709, 712, 714], "how": [37, 46, 57, 80, 94, 110, 121, 133, 142, 166, 178, 211, 216, 239, 245, 307, 317, 385, 392, 404, 411, 433, 460, 672, 699, 700, 701, 704, 706, 708, 712, 713, 714], "construct": [37, 112, 142, 184, 211, 245, 259, 307, 411, 450, 668, 703], "metadata": [37, 38, 39, 65, 66, 142, 171, 211, 212, 213, 224, 225, 245, 307, 308, 309, 339, 340, 411, 649, 664, 666, 674, 675], "reconstruct": [37, 38, 39, 65, 66, 142, 211, 212, 213, 224, 225, 245, 307, 308, 309, 339, 340, 411], "buffer": [37, 38, 65, 66, 70, 142, 211, 212, 224, 225, 245, 305, 307, 308, 339, 340, 382, 411, 672, 714], "memoryview": [37, 38, 39, 65, 66, 142, 211, 212, 213, 224, 225, 245, 305, 307, 308, 309, 339, 340, 411], "serializ": [37, 38, 65, 142, 167, 211, 212, 224, 245, 307, 308, 339, 411, 434], "instanc": [37, 38, 55, 65, 84, 143, 211, 212, 224, 275, 307, 308, 327, 339, 356, 482, 490, 499, 532, 541, 670, 699, 703, 704, 706], "cl": [37, 38, 65, 211, 212, 224, 307, 308, 339, 699], "wa": [37, 38, 65, 211, 212, 224, 248, 307, 308, 339, 709], "produc": [37, 38, 61, 65, 112, 123, 137, 211, 212, 224, 307, 308, 334, 339, 408, 471, 668, 673, 706, 711, 712, 717], "meta": [37, 38, 39, 65, 66, 142, 160, 211, 212, 213, 224, 225, 245, 307, 308, 309, 339, 340, 411], "privat": [37, 38, 39, 65, 66, 142, 211, 212, 213, 224, 225, 245, 307, 308, 309, 339, 340, 411], "devic": [38, 39, 65, 142, 168, 212, 213, 224, 245, 287, 308, 309, 339, 411, 436, 649, 703], "side": [38, 65, 94, 123, 127, 140, 212, 222, 224, 258, 259, 308, 339, 394, 398, 410, 483, 528, 530, 536, 545, 548, 554, 564, 658, 707], "deseri": [38, 65, 142, 212, 224, 245, 308, 339, 411], "task": [38, 65, 212, 224, 308, 339, 703, 706, 712, 717], "primari": [38, 212, 308, 699, 700, 703], "purpos": [38, 212, 308, 699, 700, 703], "memori": [38, 39, 66, 70, 93, 161, 164, 168, 212, 213, 225, 250, 287, 308, 309, 340, 366, 431, 436, 648, 649, 660, 673, 675, 699, 700, 703, 705, 706, 708, 714], "host": [38, 66, 161, 168, 181, 212, 225, 276, 308, 340, 436, 447, 670, 675, 701, 703], "necessari": [38, 43, 162, 212, 308, 314, 429, 527, 699, 700, 701, 703, 706, 712], "associ": [39, 66, 213, 225, 276, 309, 340, 676, 710, 717], "devicebufferlik": [39, 213, 309], "period": [40, 55, 84, 110, 127, 132, 145, 186, 191, 194, 195, 196, 197, 200, 204, 310, 327, 356, 385, 398, 403, 413, 578, 586, 618, 624, 630, 631, 633, 634, 635, 636, 639, 640, 642, 706], "discret": [40, 310, 658, 699], "calcul": [40, 70, 110, 132, 151, 182, 193, 222, 298, 310, 331, 385, 403, 418, 448, 578, 594, 632, 650, 651, 652, 653, 654, 655, 656, 657, 682, 706, 708, 713], "compar": [40, 50, 214, 226, 310, 322, 348, 589, 678, 679, 680, 681, 689, 702, 707, 711, 715, 717], "previou": [40, 123, 260, 310], "shift": [40, 110, 290, 310, 385, 578], "neg": [40, 64, 125, 159, 244, 310, 338, 396, 427, 500, 505, 578], "take": [40, 106, 111, 164, 250, 386, 431, 482, 525, 569, 578, 588, 614, 650, 660, 689, 699, 708, 712], "gdf": [40, 577, 580, 589, 592, 594, 706, 707, 710], "16": [40, 132, 140, 361, 403, 410, 485, 502, 503, 676, 682, 706, 708, 712, 714], "36": [40, 132, 403, 706, 712], "divis": [41, 42, 56, 122, 129, 136, 176, 192, 312, 313, 328, 393, 400, 407, 441, 625], "truediv": [41, 42, 312, 313], "inf": [41, 42, 75, 76, 104, 105, 122, 136, 176, 312, 313, 349, 350, 377, 378, 393, 407, 441], "flexibl": [43, 166, 314, 433, 699, 700, 703, 706, 708, 712, 715], "wrapper": [43, 314, 700, 703, 712], "sub": [43, 153, 314, 422, 486, 497, 504, 540, 543, 544], "mul": [43, 99, 314, 371], "div": [43, 314], "mod": [43, 314], "pow": [43, 314], "swap": [43, 156, 314, 699], "operand": [43, 314], "org": [43, 314, 547, 552, 594, 682], "datamodel": [43, 314], "__ror__": [43, 314], "70": [43, 314], "174": [43, 314], "remov": [44, 45, 128, 180, 181, 261, 264, 315, 316, 317, 399, 446, 447, 467, 469, 494, 495, 496, 530, 534, 535, 548, 554, 702, 703, 712], "multi": [44, 51, 80, 262, 315, 667, 705, 706, 713], "keyerror": [44, 315, 662, 677], "found": [44, 94, 140, 237, 270, 276, 315, 361, 410, 498, 499, 504, 537, 541, 542, 544, 546, 547, 552, 558, 640, 670, 703, 706, 707], "dropna": [44, 48, 61, 97, 107, 150, 166, 179, 315, 320, 334, 336, 369, 383, 433, 445, 471, 572, 593, 713], "drop_dupl": [44, 315], "duplic": [44, 45, 103, 106, 124, 143, 215, 255, 315, 316, 376, 379, 539, 658, 670, 717], "certain": [44, 45, 94, 315, 534, 547, 552, 699, 704, 712], "reindex": [44, 315, 580, 689, 707], "midx": [44, 146, 156, 248, 263, 271, 315, 414], "from_product": [44, 246, 266, 268, 315], "40": [44, 127, 185, 193, 198, 315, 394, 398, 487, 637, 706], "lama": [44, 315, 316, 348], "falcon": [44, 61, 64, 74, 128, 156, 179, 315, 334, 338], "speed": [44, 61, 128, 156, 315, 334, 577, 670, 682, 700, 708], "weight": [44, 137, 156, 315, 408], "length": [44, 48, 55, 84, 88, 94, 126, 137, 139, 149, 156, 183, 237, 254, 276, 315, 320, 327, 356, 362, 397, 408, 417, 449, 473, 474, 476, 491, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 547, 552, 563, 564, 586, 649, 658, 661, 712], "big": [44, 70, 156, 315], "small": [44, 156, 315, 670, 674, 699, 701, 703, 708, 709, 711, 712], "45": [44, 156, 199, 315, 617, 623, 638, 682, 708, 712], "200": [44, 123, 156, 209, 315, 708], "100": [44, 61, 117, 126, 127, 156, 192, 209, 248, 315, 334, 397, 398, 515, 517, 625, 679, 706, 708, 712, 715], "250": [44, 156, 315], "150": [44, 156, 315], "320": [44, 156, 315], "keep": [45, 46, 88, 103, 106, 109, 121, 178, 183, 215, 316, 317, 362, 376, 379, 392, 449, 494, 495], "identifi": [45, 61, 75, 76, 92, 104, 105, 148, 166, 334, 349, 350, 377, 378, 416, 433, 489, 496, 541, 542, 640, 667, 672, 699], "drop": [45, 46, 48, 109, 113, 128, 143, 150, 215, 216, 264, 316, 317, 320, 399, 471, 658, 713, 717], "occurr": [45, 103, 106, 215, 316, 376, 379, 488, 498, 499, 525, 537, 540, 546, 706], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 115, 116, 154, 171, 198, 316, 388, 389, 423, 472, 474, 497, 504, 543, 544, 549, 637, 678, 679, 680, 681, 699, 706, 712], "guarante": [45, 137, 316, 408, 479, 594, 670, 699, 711, 717], "thresh": 46, "decid": [46, 216, 700], "least": [46, 109, 178, 216, 336, 471, 525, 710, 712], "isna": [46, 76, 317, 350, 715], "notna": [46, 105, 317, 378, 715], "alfr": [46, 75, 76, 104, 105, 349, 350, 377, 378], "batman": [46, 75, 76, 104, 105, 349, 350, 377, 378], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 349, 350, 377, 378, 508, 509, 712], "batmobil": [46, 75, 76, 104, 105, 349, 350, 377, 378], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 349, 350, 377, 378], "1940": [46, 75, 76, 104, 105, 349, 350, 377, 378], "look": [46, 699, 700, 701, 703, 708, 709, 712], "20180310": 47, "u": [47, 167, 171, 185, 190, 194, 199, 434, 485, 500, 617, 623, 633, 638, 673, 682, 699, 700, 701, 703, 708, 710, 712, 714, 715], "ax": [48, 112, 166, 180, 181, 261, 320, 433, 446, 447, 460, 551, 668, 673, 685, 694], "still": [48, 320, 701], "we": [48, 61, 74, 106, 123, 124, 127, 207, 320, 334, 369, 398, 525, 670, 672, 699, 700, 701, 703, 706, 708, 709, 710, 712, 715, 717], "our": [48, 320, 699, 700, 701, 703, 706, 708, 712, 717], "test": [50, 64, 322, 338, 348, 487, 492, 527, 535, 553, 670, 689, 700, 702, 704, 706, 709, 717], "exactly_equ": [50, 322], "different_column_typ": [50, 322], "expr": [51, 119], "evalu": [51, 492, 510, 553, 706], "describ": [51, 70, 166, 167, 433, 434, 538, 674, 675, 711], "express": [51, 119, 487, 488, 492, 493, 499, 531, 540, 542, 547, 552, 553, 674, 675, 713], "mutat": 51, "typic": [51, 699, 703, 717], "statement": [51, 706, 712], "bitwis": [51, 712], "logic": [51, 94, 287, 674, 675, 703, 706, 712], "automat": [51, 57, 276, 331, 594, 673, 699, 700, 701, 706, 711, 715], "respons": 51, "suitabl": [51, 140, 167, 410, 434, 703], "later": 51, "condit": [51, 88, 119, 183, 362, 449, 706, 712], "upon": [51, 142, 245, 411], "earlier": 51, "though": [51, 706, 712], "line": [51, 64, 167, 338, 434, 504, 544, 563, 670, 673, 699, 700, 708], "replic": [52, 323], "22": [52, 127, 193, 244, 398, 485, 700, 706, 715], "44": [52, 190, 712], "ffill": [54, 108, 110, 260, 326, 384, 385, 580], "forward": [54, 161, 326, 579, 580, 584, 599, 606, 670, 701], "next": [54, 260, 326, 499, 580, 699, 701, 703, 706, 708, 712], "backward": [54, 326, 570, 571, 590, 591], "initi": [55, 327, 703, 706, 712], "time": [55, 84, 110, 125, 127, 132, 159, 161, 167, 244, 276, 327, 356, 385, 396, 398, 403, 427, 434, 474, 481, 488, 555, 556, 560, 594, 650, 670, 674, 675, 682, 689, 699, 700, 703, 708, 709, 712, 713, 715], "date": [55, 84, 167, 184, 192, 198, 327, 356, 434, 622, 625, 626, 627, 628, 629, 630, 631, 637, 640, 670, 673, 682, 699, 706, 709], "few": [55, 84, 327, 356, 703, 712, 715, 717], "1m": [55, 327, 622], "displai": [55, 70, 84, 121, 327, 356, 392, 658, 701], "month": [55, 185, 190, 199, 327, 617, 622, 623, 626, 627, 638, 682], "typeerror": [55, 57, 58, 84, 126, 214, 219, 265, 318, 327, 329, 332, 348, 356, 397, 525, 683, 712], "datetimeindex": [55, 84, 327, 356, 682, 689], "date_rang": [55, 84, 127, 186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 204, 318, 327, 356, 398, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 706], "2d": [55, 84, 327, 356, 660], "3d": [55, 84, 327, 356], "9223372036854775807": [56, 129, 328, 400, 706], "tabl": [57, 72, 112, 159, 160, 166, 167, 265, 427, 433, 434, 495, 559, 668, 673, 699, 703, 706, 711, 714], "pyarrow": [57, 160, 265, 329, 428, 674, 675, 706], "doe": [57, 61, 74, 124, 156, 162, 166, 287, 318, 334, 429, 433, 469, 501, 547, 589, 650, 662, 667, 677, 683, 699, 700, 703, 707, 710, 711, 712, 717], "similar": [57, 94, 148, 166, 287, 416, 433, 547, 552, 678, 679, 681, 699, 709, 711, 712, 715, 717], "to_panda": [57, 706, 709, 711, 712, 715, 717], "work": [57, 132, 403, 445, 648, 649, 699, 701, 703, 704, 705, 706, 710, 711, 712, 713], "pa": [57, 265, 329], "record": [59, 94, 121, 167, 392, 434, 532, 673, 699], "recarrai": [59, 172], "ndim": 59, "greater": [60, 62, 71, 293, 333, 335, 564, 594, 683, 710], "as_index": [61, 334], "group_kei": [61, 334], "squeez": [61, 334], "group": [61, 121, 166, 169, 334, 392, 433, 445, 493, 542, 569, 573, 574, 575, 576, 578, 581, 582, 583, 585, 586, 587, 588, 589, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 666, 672, 674, 675, 699, 703, 707, 709, 712, 713, 715, 717], "mapper": [61, 124, 334], "involv": [61, 276, 334, 703], "some": [61, 73, 123, 270, 334, 343, 419, 477, 488, 540, 589, 682, 699, 700, 703, 706, 707, 711, 712, 714, 717], "combin": [61, 143, 179, 334, 460, 489, 530, 547, 548, 554, 569, 588, 614, 674, 675, 689, 699, 706, 714], "split": [61, 167, 259, 334, 434, 485, 533, 537, 546, 547, 557, 558, 673, 676, 689, 701, 706, 714], "larg": [61, 137, 334, 408, 670, 703, 709, 711], "amount": [61, 70, 334, 701, 703, 712], "notic": [61, 270, 334, 710, 712], "interpret": [61, 166, 334, 433, 502, 503, 547, 552, 670, 674, 675], "hierarch": [61, 89, 90, 95, 166, 177, 262, 334, 363, 364, 367, 433, 684, 703, 706], "particular": [61, 89, 90, 95, 161, 334, 363, 364, 367, 419, 488, 670, 699, 700, 701, 703, 711, 717], "relev": [61, 334, 699], "sql": [61, 94, 334, 706], "influenc": [61, 334, 714], "preserv": [61, 126, 287, 334, 397, 564, 617, 623, 638, 670, 715], "piec": [61, 334, 699, 701, 703], "dataframegroupbi": [61, 688], "about": [61, 70, 334, 594, 648, 649, 699, 702, 703, 706, 714], "390": [61, 334, 708], "350": [61, 334], "parrot": [61, 64, 128, 334, 338, 487], "370": [61, 334, 577], "anim": [61, 74, 316, 334, 348, 460], "380": [61, 334, 577], "375": [61, 334], "captiv": [61, 334], "wild": [61, 334], "from_arrai": [61, 226, 254, 334], "185": [61, 334], "210": [61, 334], "g1": [61, 334], "g2": [61, 334], "variou": [61, 334, 694, 699, 700, 701, 703], "lambda": [61, 334, 361, 569, 588, 589, 607, 614, 707, 709, 711, 712], "333333": [61, 122, 127, 136, 334, 393, 398, 407, 445, 594], "666667": [61, 182, 334, 448], "000000": [61, 75, 76, 104, 105, 127, 138, 334, 349, 350, 377, 378, 398, 409, 592, 594, 633, 708, 711, 715], "murmur3": [63, 337], "hash": [63, 109, 337, 648], "md5": [63, 337], "murmurhash3": [63, 337], "120": [63, 337, 486], "1930516747": [63, 337], "422619251": [63, 337], "941520876": [63, 337], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 337], "947ca8d2c5f0f27437f156cfbfab0969": [63, 337], "d0580ef52d27c043c8e341fd5039b166": [63, 337], "330519225": [63, 337], "397962448": [63, 337], "1345834934": [63, 337], "57ce879751b5169c525907d5c563fae1": [63, 337], "948d6221a7c4963d4be411bcead7e32b": [63, 337], "fe061786ea286a515b772d91b0dfcd70": [63, 337], "quickli": [64, 338, 708], "your": [64, 123, 124, 338, 701, 706, 708, 712], "right": [64, 80, 94, 127, 132, 140, 222, 231, 239, 258, 259, 293, 311, 338, 398, 403, 410, 483, 497, 504, 528, 536, 543, 544, 548, 552, 554, 564, 658, 661, 678, 679, 680, 681, 709, 710], "tail": [64, 338], "allig": [64, 338], "bee": [64, 338, 530, 548, 554], "lion": [64, 128, 338, 499], "monkei": [64, 128, 338, 460, 499], "shark": [64, 338], "whale": [64, 338], "zebra": [64, 338], "view": [64, 162, 168, 338, 429, 436, 580, 699, 703, 713], "three": [64, 106, 112, 338, 489, 658, 668, 703, 708, 712, 714], "verbos": 70, "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 331], "print": [70, 124, 132, 173, 403, 438, 589, 659, 682, 708, 712, 716], "concis": 70, "usag": [70, 93, 366, 673, 699, 700, 704, 706, 712], "full": [70, 94, 166, 433, 607, 672, 701, 706, 708, 709, 712, 717], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 128, 207, 386, 399, 485, 495, 532, 607, 658, 700, 701, 703, 706, 708, 710, 711, 712, 715, 717], "further": 70, "process": [70, 173, 438, 706, 708, 711, 712], "switch": [70, 682], "truncat": [70, 649], "total": [70, 93, 366, 564, 622, 666, 669, 674, 710, 712], "alwai": [70, 101, 121, 137, 249, 287, 369, 392, 408, 525, 670, 700, 703, 711, 712, 714, 717], "never": [70, 473, 703, 712], "introspect": 70, "shown": [70, 499], "human": 70, "readabl": 70, "unit": [70, 167, 434, 450, 673, 682], "estim": [70, 300, 594], "made": [70, 162, 174, 270, 429, 565, 699, 707, 715], "assum": [70, 311, 487, 491, 540, 547, 552, 594, 660, 699, 701, 702, 703, 712], "consum": [70, 699, 712], "real": 70, "cost": [70, 700], "smaller": [70, 93, 496], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 650], "delta": [70, 151, 182, 418, 448, 450, 594, 610, 613, 655, 657], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 170, 252, 265, 305, 437, 689, 701, 703, 706, 712, 715], "130": 70, "byte": [70, 93, 366, 480, 562, 648, 663, 669, 670, 673, 674, 675, 676, 703, 714], "its": [70, 111, 160, 178, 290, 386, 682, 700, 701, 703, 704, 706, 714], "pipe": [70, 711], "content": [70, 166, 433, 525, 702, 703, 712], "io": [70, 650, 670, 674, 675, 689, 713], "stringio": [70, 670, 673, 676], "getvalu": 70, "mode": [70, 166, 433, 672, 699, 714], "special": [70, 205, 257, 459, 488, 513, 525, 649, 703, 710, 717], "fine": [70, 701], "tune": [70, 714], "random_strings_arrai": 70, "random": [70, 137, 171, 408, 594, 706, 708, 715, 717], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 169, 171], "999999": 70, "mb": [70, 663, 706], "num": [71, 706], "interleav": [72, 159, 427], "major": [72, 660, 717], "a1": [72, 493, 708], "a2": [72, 708], "a3": [72, 708], "b1": 72, "b2": [72, 493], "b3": 72, "linear": [73, 117, 343, 390, 585, 703, 708, 709], "limit_direct": [73, 343], "limit_area": [73, 343], "downcast": [73, 217, 343, 580, 683], "techniqu": [73, 343], "space": [73, 171, 343, 489, 525, 533, 534, 537, 547, 556, 670], "linearli": [73, 343], "unsort": [73, 343, 709], "lead": [73, 161, 343, 530, 548, 554, 594, 708, 709, 712], "erron": [73, 343], "num_leg": [74, 179], "num_w": [74, 179], "check": [74, 143, 227, 228, 229, 230, 231, 235, 236, 237, 262, 311, 348, 469, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 531, 561, 562, 678, 679, 680, 681, 700, 708, 717], "present": [74, 115, 116, 154, 388, 389, 423, 471, 525, 547, 552, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 649, 700, 702, 712], "leg": [74, 97], "wing": [74, 97], "separ": [74, 482, 489, 532, 533, 537, 546, 547, 552, 661, 676, 694, 699, 701, 703, 712], "spider": 74, "everyth": [75, 76, 89, 90, 95, 238, 349, 350, 363, 364, 367, 460, 551, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615], "timedelta64": [75, 76, 104, 105, 349, 350, 377, 378, 450, 643, 644, 645, 646, 647, 714, 715], "charact": [75, 76, 104, 105, 349, 350, 377, 378, 481, 482, 483, 484, 485, 486, 487, 488, 494, 495, 496, 502, 503, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 533, 534, 536, 540, 541, 545, 548, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 648, 670, 676, 700, 703], "incas": [75, 76, 104, 105, 349, 350, 377, 378], "1939": [75, 76, 104, 105, 349, 350, 377, 378], "05": [75, 76, 104, 105, 127, 185, 187, 188, 189, 190, 193, 198, 199, 203, 290, 349, 350, 377, 378, 398, 617, 619, 620, 621, 622, 623, 637, 638, 641, 678, 679, 680, 681, 682, 706], "27": [75, 76, 104, 105, 349, 350, 377, 378, 485, 626, 628, 629, 706], "joker": [75, 76, 104, 105, 349, 350, 377, 378], "32": [75, 76, 104, 105, 133, 349, 350, 377, 378, 404], "float64index": [75, 76, 104, 105, 146, 219, 349, 350, 377, 378, 414], "left": [80, 94, 124, 127, 133, 140, 178, 222, 231, 239, 258, 259, 293, 311, 398, 404, 410, 483, 497, 504, 530, 536, 540, 543, 544, 545, 554, 559, 564, 658, 678, 679, 680, 681, 699, 706, 709], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 239, 460, 674, 675], "outer": [80, 94, 239, 460, 675], "suffic": [80, 712], "avoid": [80, 287, 699, 700, 703, 714, 717], "conflict": 80, "ensur": [80, 162, 168, 429, 436, 487, 675, 699, 700, 701, 706], "now": [80, 661, 699, 703, 706, 708, 712], "due": [80, 589, 670, 700, 706, 707, 709, 712], "lack": 80, "five": [81, 650], "int64index": [81, 146, 209, 214, 217, 226, 237, 239, 243, 244, 246, 248, 252, 254, 264, 295, 414, 488, 680, 703], "fisher": [82, 83, 147, 354, 355, 415], "unbias": [82, 83, 147, 182, 300, 354, 355, 415, 448, 594], "kurtosi": [82, 354], "sampl": [82, 83, 147, 151, 298, 354, 355, 415, 418, 432, 706], "obtain": [82, 83, 354, 355, 475, 563, 650, 717], "definit": [82, 83, 277, 354, 355, 374, 440, 594], "normal": [82, 83, 137, 151, 179, 182, 184, 300, 354, 355, 408, 418, 445, 448, 534, 594, 610, 613, 674, 675, 708], "1999999999999904": [82, 83, 354, 355], "kurt": [83, 355], "final": [84, 356, 674, 675, 703, 712], "dai": [84, 171, 184, 187, 188, 189, 192, 193, 203, 318, 356, 450, 451, 456, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 641, 643, 645, 647, 682, 712, 715], "cond": [88, 183, 362, 449], "dimens": [88, 101, 183, 362, 374, 449], "collaps": [89, 90, 95, 363, 364, 367], "attempt": [89, 90, 95, 207, 214, 270, 363, 364, 367, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615, 661, 670, 682, 700, 707, 712], "17": [91, 127, 132, 140, 290, 365, 398, 403, 410, 485, 706, 715], "unpivot": [92, 667], "wide": [92, 667, 699, 701, 712], "format": [92, 161, 165, 166, 167, 169, 171, 173, 433, 434, 438, 522, 523, 561, 562, 563, 580, 640, 667, 670, 673, 682, 700, 701, 703, 705, 706, 707, 708, 709, 710, 714], "id_var": [92, 667], "value_var": [92, 667], "var_nam": [92, 667], "value_nam": [92, 667], "whose": [93, 112, 565, 661, 668, 699, 703], "ones": [93, 468], "5000": 93, "astyp": [93, 228, 236, 689, 706], "head": [93, 706, 708, 712, 717], "40000": 93, "storag": [93, 161, 670, 713], "mani": [93, 376, 379, 594, 690, 699, 701, 703, 706, 709, 710, 712, 714, 717], "repeat": [93, 159, 427, 488, 689], "5008": 93, "43": [93, 646, 712], "give": [93, 276, 699, 700, 703, 708, 711], "rest": [93, 523, 551, 556, 701], "necessarili": [93, 177, 684], "left_on": 94, "right_on": 94, "left_index": [94, 709], "right_index": [94, 709], "_x": 94, "_y": 94, "databas": 94, "join": [94, 178, 460, 670, 689, 705, 709, 713, 717], "intersect": [94, 460], "leftsemi": 94, "leftanti": 94, "exact": [94, 117, 137, 260, 390, 408, 658, 680, 682], "opposit": 94, "were": [94, 467, 558, 706, 712], "overlap": [94, 141, 178, 460, 495, 499, 649, 658], "determinist": [94, 717], "df_a": [94, 706], "vals_a": [94, 706], "df_b": [94, 706], "vals_b": [94, 706], "df_merg": 94, "sort_valu": [94, 689, 706], "typecast": 94, "ambigu": [94, 184], "exactli": [94, 678, 679, 680, 681, 700, 711], "extend": [94, 658, 699, 706, 712], "semi": [94, 594], "anti": 94, "modulo": [96, 130, 368, 401], "4294967295": [96, 130, 368, 401], "appear": [97, 121, 331, 376, 379, 392, 489, 564], "often": [97, 688, 699, 709, 712, 715], "search": [97, 166, 270, 433, 472, 474, 487, 497, 498, 499, 504, 541, 543, 544, 699, 705, 715, 717], "don": [97, 107, 124, 179, 369, 383, 445, 572, 593, 673, 699, 709, 712, 715], "value_count": [97, 706], "speci": [97, 246], "bird": [97, 128, 460], "mammal": [97, 128], "arthropod": 97, "multipli": [98, 370, 712], "largest": [103, 376], "priorit": [103, 712], "popul": [103, 106, 708, 712], "59000000": [103, 106, 376, 379], "65000000": [103, 106, 376, 379], "434000": [103, 106, 376, 379], "337000": [103, 106, 376, 379], "11300": [103, 106, 376, 379], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 155, 424, 710], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "itali": [103, 106, 376, 379], "franc": [103, 106, 376, 379], "malta": [103, 106, 376, 379], "maldiv": [103, 106, 376, 379], "brunei": [103, 106, 376, 379], "iceland": [103, 106, 376, 379], "nauru": [103, 106, 376, 379], "tuvalu": [103, 106, 376, 379], "anguilla": [103, 106, 376, 379], "smallest": [106, 121, 379, 392, 474, 683], "retriev": [106, 501, 672], "ti": [106, 121, 260, 392], "resolv": 106, "revers": [106, 376, 379, 604, 706], "distinct": [107, 348, 703], "npart": 109, "keep_index": [109, 139], "partit": [109, 171, 663, 675, 689, 706], "fill_method": [110, 385], "percent": [110, 385], "sequenti": [110, 385, 711, 712, 717], "form": [110, 112, 121, 159, 226, 254, 385, 392, 427, 512, 515, 516, 517, 518, 663, 668, 674, 675, 703, 709], "handl": [110, 161, 166, 167, 178, 316, 385, 419, 433, 434, 460, 547, 552, 672, 683, 689, 702, 703, 705, 714], "consecut": [110, 125, 244, 385, 396, 484, 532, 533, 670], "increment": [110, 385, 663], "data_keyword": [111, 386, 607], "chain": [111, 386], "groupbi": [111, 386, 689, 703, 705, 706, 707, 709, 713, 717], "write": [111, 161, 165, 166, 167, 169, 171, 386, 433, 434, 663, 665, 670, 672, 700, 702, 705, 706, 708, 712, 714], "arg2": [111, 386], "arg3": [111, 386], "sai": [111, 386, 501, 712], "suppos": [111, 386], "reshap": [112, 150, 668, 689, 708], "organ": [112, 668, 701, 702], "rearrang": [112, 668], "exponenti": [114, 134, 387, 405], "min_count": [115, 116, 154, 388, 389, 423, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615], "fewer": [115, 116, 154, 388, 389, 423, 581, 582, 583, 600, 601, 602, 603, 608, 611, 615], "5040": [115, 116, 388, 389], "q": [117, 118, 390, 585, 640], "interpol": [117, 118, 390, 585], "higher": [117, 118, 390, 585, 673, 703, 714], "midpoint": [117, 390, 585], "nearest": [117, 118, 260, 390, 585], "desir": [117, 118, 158, 249, 390, 426, 585, 670, 673, 700, 712, 717], "li": [117, 118, 390, 585], "j": [117, 118, 156, 390, 491, 712], "approxim": [117, 390], "One": [117, 123, 166, 167, 185, 190, 199, 276, 394, 433, 434, 617, 623, 638, 699, 707, 708, 710, 715], "notabl": [117, 148, 416, 707], "doesn": [117, 137, 171, 408, 525, 706, 707, 715], "under": [117, 675, 694, 699, 701, 702, 703, 706, 707], "cp": [117, 649, 706, 708, 712, 715, 717], "55": [117, 244, 712], "local_dict": [119, 706], "local": [119, 663, 669, 670, 672, 673, 674, 675, 676, 701, 706], "filter": [119, 495, 674, 675, 699, 705, 706, 717], "search_dat": [119, 706], "search_date2": 119, "averag": [121, 392, 712], "na_opt": [121, 392], "pct": [121, 392], "direct": [121, 392, 586, 673, 701, 706, 714], "dens": [121, 392, 708], "lowest": [121, 392, 497, 504, 543, 703], "increas": [121, 234, 311, 344, 346, 379, 392, 670, 682], "bottom": [121, 392, 670], "rtruediv": [122, 393], "002778": [122, 136, 393, 407], "005556": [122, 136, 393, 407], "250000": [122, 136, 393, 407], "toler": [123, 221, 260, 270, 394, 678, 679, 680, 681], "conform": [123, 239, 394, 701], "unless": [123, 419, 547, 552, 699], "either": [123, 133, 137, 149, 170, 178, 220, 399, 404, 408, 417, 437, 474, 482, 487, 661, 669, 670, 673, 674, 675, 676, 701, 706, 708, 712, 714], "even": [123, 162, 287, 369, 429, 670, 673, 699, 700, 712, 715], "convent": [123, 124, 127, 398], "index_label": 123, "column_label": 123, "_highly_": 123, "clarifi": [123, 124], "intent": [123, 124], "fiction": [123, 501], "firefox": 123, "chrome": 123, "safari": 123, "ie10": 123, "konqueror": 123, "http_statu": [123, 707], "404": [123, 708], "301": 123, "response_tim": 123, "new_index": 123, "iceweasel": 123, "comodo": 123, "dragon": 123, "retain": [123, 394, 496, 707, 715], "user_ag": 123, "alter": [124, 171, 243, 395], "throw": [124, 167, 434, 700, 714], "index_mapp": 124, "columns_mapp": 124, "highli": [124, 675, 717], "overwrit": [124, 178, 266], "postfix": 124, "repetit": [125, 244, 396], "newli": [125, 244, 396, 399, 586, 703], "to_replac": [126, 397], "regex": [126, 397, 487, 488, 493, 499, 531, 540, 542, 547, 552], "valueerror": [126, 141, 166, 167, 178, 397, 433, 434, 468, 504, 525, 544, 658, 701, 708, 711], "mismatch": [126, 397, 680, 681], "actual": [126, 397, 525, 700, 703, 706, 712, 715], "exhibit": [126, 397, 701], "silent": [126, 397], "rule": [127, 398, 699], "close": [127, 184, 206, 258, 259, 293, 398, 450, 663, 672, 701, 703, 717], "loffset": [127, 398], "start_dai": [127, 398], "dateoffset": [127, 398], "bin": [127, 311, 398, 445, 658], "interv": [127, 227, 228, 229, 230, 231, 235, 236, 258, 259, 311, 398, 658, 703, 711], "edg": [127, 132, 311, 398, 403, 497, 504, 543, 544, 658, 700], "bucket": [127, 398], "closest": [127, 398], "nanosecond": [127, 167, 171, 398, 434, 451, 643, 673, 682], "millisecond": [127, 167, 398, 434, 451, 643, 673, 682], "minut": [127, 398, 451, 643, 682, 705, 713], "2001": [127, 199, 204, 318, 398, 617, 622, 623, 625, 638, 642, 709], "1t": [127, 398], "06": [127, 185, 187, 188, 189, 203, 398, 617, 619, 620, 621, 622, 640, 641, 643, 644, 645, 647, 706], "downsampl": [127, 398], "3t": [127, 398], "23": [127, 398, 485, 487, 512, 513, 520, 706, 710, 715], "57": [127, 398, 712], "upsampl": [127, 398], "asfreq": [127, 398], "price": [127, 398, 501, 712], "19": [127, 398, 485, 594, 703, 706, 708], "volum": [127, 398], "60": [127, 398, 706], "week_start": [127, 398], "7d": [127, 398], "29": [127, 196, 398, 485, 626, 628, 629, 632, 635, 706, 717], "28": [127, 398, 485, 622, 626, 628, 629, 706], "63": [127, 398, 711], "col_level": [128, 667], "col_fil": 128, "reset": [128, 286, 399, 460], "try": [128, 399, 673, 683, 699, 700], "389": 128, "80": [128, 577], "max_spe": 128, "from_tupl": [128, 266, 267, 270, 399, 706, 707], "fly": [128, 670, 673], "run": [128, 510, 511, 512, 513, 519, 520, 521, 524, 648, 649, 700, 701, 702, 706, 708, 712, 717], "window": [132, 403, 689, 705, 713, 717], "center": [132, 403, 536, 564, 689, 700, 712], "win_typ": [132, 403], "baseindex": [132, 207, 210, 403, 703], "As": [132, 166, 403, 433, 699, 700, 703, 709, 712], "oppos": [132, 403, 706], "fix": [132, 166, 185, 190, 199, 361, 403, 433, 617, 623, 638, 703, 709, 710], "accommod": [132, 403], "get_window_bound": [132, 403], "20190101": [132, 403], "2019": [132, 246, 403], "01t09": [132, 403], "000": [132, 403, 510, 666, 670, 671, 674, 675], "math": [132, 403, 650, 712], "49": [132, 403, 712], "64": [132, 403, 703, 712], "81": [132, 403, 706, 712], "some_func": [132, 403], "sqrt": [132, 403, 712], "And": [132, 403, 712], "decim": [133, 167, 404, 434, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 670, 711, 713, 717], "half_even": [133, 404], "half_up": [133, 404], "affect": [133, 169, 404, 699, 714], "67": [133, 404], "66": [133, 404], "subtract": [135, 152, 406, 421], "359": [135, 152, 153, 406, 421, 422], "179": [135, 152, 153, 406, 421, 422], "frac": [137, 408], "random_st": [137, 408], "reproduc": [137, 408], "ident": [137, 173, 408, 438, 460, 547, 552, 612, 678, 679, 680, 681, 717], "fraction": [137, 408, 520], "disallow": [137, 408], "state": [137, 266, 408], "uniform": [137, 408, 658], "probabl": [137, 408], "unlik": [137, 408, 701, 711, 714, 717], "randomst": [137, 408], "seed": [137, 408, 706, 712], "stat": [137, 408, 689, 701, 713], "randomli": [137, 408, 706], "slow": [137, 408, 699, 711], "achiev": [137, 408, 563, 711], "especi": [137, 408, 699, 711], "advis": [137, 408, 704], "826087": [138, 409], "913043": [138, 409], "043478": [138, 409], "map_index": 139, "map_siz": 139, "scatter": 139, "destin": [139, 712], "conserv": 139, "find": [140, 207, 260, 410, 488, 498, 499, 504, 543, 689, 699, 700, 701, 712], "maintain": [140, 410, 700, 706], "hypothet": [140, 410], "monoton": [140, 233, 234, 260, 270, 275, 311, 344, 345, 346, 410], "wrong": [140, 410], "correct": [140, 410, 673, 712], "values_df": [140, 410], "reinterpret": [142, 245, 411], "lightweight": [142, 245, 411], "append": [143, 166, 433, 482, 547, 552, 661], "becom": [143, 708], "too": [143, 499, 699, 712], "hello": [146, 414, 480, 481, 485, 489, 500, 528, 534, 535, 538, 543, 545, 550, 557, 558, 669, 673], "37037": [147, 415], "sort_remain": [148, 416], "quick": [148, 416], "builtin": [148, 416, 669, 670, 673, 674, 675, 676], "vector": [148, 293, 416, 419], "prescrib": 150, "ddof": [151, 182, 418, 448, 594, 610, 613, 655, 657], "deviat": [151, 270, 418, 610, 655, 700, 707, 709], "freedom": [151, 182, 418, 448, 594, 610, 613, 655, 657], "divisor": [151, 182, 418, 448, 610, 613, 655, 657], "290994": [151, 418], "squar": [155, 424], "249": [155, 424], "llama": 156, "cdf": 156, "unsupport": [158, 249, 426, 570, 571, 579, 580, 584, 586, 590, 591, 599, 606, 650, 711, 712], "preserve_index": 160, "save": [160, 171, 663, 699, 703], "path_or_buf": [161, 166, 167, 433, 434, 672, 673], "sep": [161, 482, 525, 533, 537, 546, 670], "na_rep": [161, 482], "encod": [161, 166, 167, 324, 433, 434, 561, 562, 648, 649, 661, 672, 673, 703], "compress": [161, 166, 167, 169, 171, 433, 434, 663, 670, 673, 676, 714], "line_termin": 161, "storage_opt": [161, 670], "csv": [161, 670, 689, 713, 714], "file": [161, 165, 166, 167, 169, 171, 433, 434, 504, 544, 648, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 699, 702, 703, 706, 710, 714], "path": [161, 165, 166, 167, 169, 171, 433, 434, 648, 663, 666, 669, 670, 671, 672, 673, 674, 675, 676, 699, 700, 701, 706, 714], "char": [161, 536, 670], "delimit": [161, 167, 434, 496, 525, 533, 541, 547, 552, 557, 558, 670, 673, 676], "utf": [161, 486, 561, 562, 673, 703], "scheme": [161, 699], "sens": [161, 670, 703], "connect": [161, 670], "port": [161, 670, 701], "usernam": [161, 670], "password": [161, 670], "etc": [161, 663, 670, 688, 698, 699, 701, 710, 711], "url": [161, 547, 561, 562, 663, 669, 670, 673, 674, 675, 676], "urllib": [161, 670], "s3": [161, 286, 512, 663, 669, 670, 673, 674, 675, 676], "gc": [161, 670], "fsspec": [161, 670, 674, 675], "open": [161, 164, 166, 250, 293, 431, 433, 445, 660, 664, 669, 670, 672, 673, 674, 675, 676, 701], "pleas": [161, 166, 361, 433, 670, 706, 712], "read_csv": [161, 706, 709], "quote_nonnumer": [161, 670], "filenam": [161, 167, 434, 663, 666, 670, 671, 674, 675, 699], "set_index": [161, 177, 239, 684, 711], "na_valu": [162, 168, 429, 436, 670], "asarrai": [162, 168, 429, 436, 708, 712], "strictli": [162, 429, 699, 703], "dlpack": [164, 250, 431, 660, 708, 714], "tensor": [164, 250, 431, 649, 660], "dmlc": [164, 250, 431, 660], "pycapsul": [164, 250, 431, 660], "pointer": [164, 250, 431, 660], "cudf_obj": [164, 250, 431], "pycapsule_obj": [164, 250, 431, 660], "encapsul": [164, 250, 431, 660, 703], "feather": [165, 166, 433, 671, 689, 714], "read_feath": 165, "hdf5": [166, 433, 689], "hdfstore": [166, 433, 672, 689], "hdf": [166, 433, 672, 691, 714], "applic": [166, 433, 594, 689, 703], "hold": [166, 227, 228, 229, 230, 231, 235, 236, 433], "relat": [166, 433, 689, 714], "individu": [166, 220, 433, 469, 485, 487, 703, 715], "r": [166, 419, 433, 485, 493, 498, 521, 534, 559, 563, 672], "delet": [166, 433], "read": [166, 433, 666, 669, 670, 671, 672, 673, 674, 675, 676, 703, 706, 710, 714], "alreadi": [166, 433, 460, 534, 703, 708, 709], "fast": [166, 433, 673, 703, 706, 709, 717], "searchabl": [166, 433], "pytabl": [166, 433, 689], "wors": [166, 433], "data_column": [166, 433], "disk": [166, 433, 670, 673, 710], "complevel": [166, 433], "disabl": [166, 433, 670, 714], "complib": [166, 433], "zlib": [166, 433], "lzo": [166, 433], "bzip2": [166, 433], "blosc": [166, 433], "v0": [166, 433], "compressor": [166, 433], "blosclz": [166, 433], "lz4": [166, 433], "lz4hc": [166, 433], "snappi": [166, 169, 171, 433, 663, 714], "zstd": [166, 169, 171, 433, 714], "issu": [166, 433, 699, 709, 712], "fletcher32": [166, 433], "checksum": [166, 433], "written": [166, 169, 171, 433, 663, 699, 701, 712], "strict": [166, 433, 672, 678, 679, 680, 681, 682], "decod": [166, 433, 561, 672, 673], "read_hdf": [166, 433], "to_parquet": [166, 433, 675, 706, 710, 714], "parquet": [166, 171, 433, 674, 675, 689, 709, 713, 714], "to_feath": [166, 433, 671], "json": [167, 434, 501, 673, 689, 699, 714], "unix": [167, 434, 682], "orient": [167, 434, 673], "just": [167, 434, 551, 673, 699, 703, 708, 710, 712], "schema": [167, 434, 666, 673, 675], "compon": [167, 434, 500, 699, 701, 703], "date_format": [167, 434, 640], "epoch": [167, 434, 682], "iso": [167, 193, 434, 632], "convers": [167, 434, 437, 689, 703, 708], "iso8601": [167, 434], "double_precis": [167, 434], "force_ascii": [167, 434], "ascii": [167, 434, 481, 534, 555, 556, 560, 562], "date_unit": [167, 434, 673], "govern": [167, 434], "precis": [167, 434, 658, 673, 710, 717], "microsecond": [167, 434, 451, 455, 643, 646, 647, 673], "default_handl": [167, 434], "handler": [167, 434, 669, 670, 673, 674, 675, 676], "receiv": [167, 434, 683], "incorrect": [167, 434], "gzip": [167, 434, 670, 673], "bz2": [167, 434, 673], "xz": [167, 434, 673], "read_json": [167, 434], "fname": [169, 666], "orc": [169, 674, 689, 713, 714], "enable_statist": 169, "stripe_size_byt": 169, "stripe": [169, 171, 674], "67108864": 169, "64mb": 169, "stripe_size_row": 169, "row_index_strid": 169, "10000": [169, 708], "cols_as_map_typ": 169, "listdtyp": [169, 470, 491, 673, 703, 710], "read_orc": [169, 675, 706, 714], "nullabl": [170, 183, 437, 449, 699, 703, 707, 710, 717], "root": [171, 663, 700], "directori": [171, 663, 675, 699, 702, 706], "partition_offset": 171, "engin": [171, 487, 488, 493, 499, 531, 669, 673, 674, 675, 705], "much": [171, 699, 700, 703, 706], "faster": [171, 469, 674, 682, 699, 712], "partition_col": [171, 663], "partition_file_nam": 171, "uuid4": 171, "hex": [171, 502, 503, 516, 561, 562], "rowgroup": [171, 663], "page": [171, 663, 689, 702, 705, 714, 717], "metadata_file_path": 171, "blob": [171, 664], "footer": [171, 664], "file_path": [171, 706], "int96_timestamp": 171, "int96": 171, "julian": 171, "midnight": 171, "row_group_size_byt": 171, "134217728": 171, "128mb": 171, "row_group_size_row": 171, "max_page_size_byt": 171, "uncompress": [171, 676], "524288": 171, "512kb": 171, "max_page_size_row": 171, "20000": 171, "return_metadata": [171, 664], "read_parquet": [171, 666, 706, 710, 714], "intern": [173, 184, 207, 438, 450, 670, 678, 679, 680, 681, 699, 700, 702, 703, 704, 714], "transpar": [173, 438], "dure": [173, 438, 547, 552, 683, 700], "n0": [173, 438], "n1": [173, 438], "n2": [173, 438], "struct": [174, 673, 689, 703, 705, 711, 713, 714, 717], "compos": [174, 676, 700, 703, 710, 712], "pivot": [177, 684], "innermost": [177, 475, 674, 675, 684], "filter_func": 178, "There": [178, 198, 317, 637, 700, 708, 714, 717], "coercibl": [178, 443], "notimplementederror": [178, 487, 537, 540, 546, 563, 700, 703], "proport": 179, "frequent": [179, 445, 703], "occur": [179, 445, 487, 700, 706], "ant": [179, 530, 548, 554], "varianc": [182, 448, 594, 613, 657], "falsi": [183, 449, 707], "treatment": [183, 449, 707], "gsr": [183, 449, 707, 710], "tz": 184, "dayfirst": [184, 670, 682], "yearfirst": [184, 682], "immut": [184, 205, 257, 258, 275, 450, 459], "sliceabl": [184, 205, 257, 450, 459], "pytz": 184, "timezon": 184, "dateutil": [184, 682], "tzfile": 184, "pars": [184, 670, 673, 682, 683, 706, 708], "year": [184, 187, 189, 192, 193, 198, 246, 619, 621, 625, 630, 631, 632, 637, 682, 712], "1970": 184, "000000001": [184, 197, 636], "000000002": [184, 197, 636], "000000003": 184, "000000004": 184, "l": [185, 190, 199, 485, 495, 617, 623, 638, 701], "me": [185, 190, 199, 496, 541, 617, 623, 638], "alias": [185, 190, 199, 617, 623, 638, 699], "gindex": [185, 190, 193, 198], "2020": [185, 190, 193, 198, 637], "1999": [185, 190, 193, 198, 637], "41": [185, 487], "datetime_index": [186, 187, 188, 189, 191, 194, 195, 196, 197, 200, 203, 204], "int16index": [186, 187, 188, 189, 191, 195, 196, 197, 200, 203, 204, 680], "int16": [186, 187, 188, 189, 191, 195, 196, 197, 200, 203, 204, 318, 618, 619, 620, 621, 622, 624, 634, 635, 636, 639, 641, 642, 683, 710, 714], "365": [187, 189, 192, 619, 621, 625], "leap": [187, 189, 192, 619, 621, 625], "366": [187, 189, 192, 619, 621, 625], "2016": [187, 188, 189, 203, 619, 620, 621, 641, 682], "2017": [187, 188, 189, 203, 619, 620, 621, 630, 631, 641, 682], "week": [188, 193, 203, 620, 632, 641], "mondai": [188, 203, 620, 641], "sundai": [188, 203, 620, 641], "59": [190, 666, 670, 671, 674, 675, 712], "belong": [192, 198, 311, 625, 637, 699], "29th": [192, 625], "februari": [192, 625], "intercalari": [192, 625], "four": [192, 625, 699, 714], "400": [192, 209, 625, 708], "datafram": [193, 201, 207, 239, 248, 250, 251, 261, 262, 263, 264, 266, 267, 268, 271, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 288, 289, 296, 297, 301, 302, 303, 304, 306, 312, 313, 314, 315, 317, 320, 321, 322, 326, 327, 328, 333, 334, 335, 337, 338, 341, 343, 349, 350, 354, 355, 356, 357, 359, 360, 362, 363, 364, 367, 368, 370, 371, 373, 375, 377, 378, 386, 387, 388, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 436, 438, 441, 445, 446, 447, 448, 449, 451, 457, 460, 493, 499, 537, 546, 547, 552, 565, 569, 577, 578, 580, 581, 582, 583, 586, 588, 589, 592, 594, 600, 601, 602, 603, 604, 607, 608, 611, 612, 614, 615, 632, 643, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 682, 684, 688, 689, 690, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717], "accord": [193, 361, 632, 699, 703], "8601": [193, 632], "52": 193, "000001": [194, 633], "000002": [194, 633], "int32index": [194, 680], "januari": [196, 198, 635, 637], "decemb": [196, 198, 635, 637], "march": [198, 637], "april": [198, 637], "june": [198, 637], "third": [198, 264, 637], "juli": [198, 637], "septemb": [198, 637], "fourth": [198, 637], "octob": [198, 637], "int8index": [198, 680], "int8": [198, 324, 637, 683, 710, 714], "dt_idx": 199, "58": [199, 617, 623, 638, 712], "2002": [204, 625, 642], "basic": [205, 207, 257, 287, 459, 569, 588, 614, 706, 711, 712], "pure": [205, 257, 459, 700, 703], "__init__": [206, 258, 701], "tupleize_col": 207, "best": [207, 270, 533, 649, 699, 700, 702, 706, 707, 717], "fit": [207, 376, 379, 706], "design": [207, 262, 699, 700, 702, 705, 709], "factori": [207, 703], "re": [207, 487, 488, 493, 499, 531, 540, 550, 650, 706, 708, 712], "intim": 207, "familiar": [207, 699, 701, 702, 703, 705], "uint64": [207, 459, 710, 714], "uint64index": 207, "has_dupl": 207, "from_arrow": [207, 717], "get_loc": [207, 707], "collect": [209, 361, 478, 701, 706, 711, 717], "incompar": 214, "caught": 214, "catch": [214, 700], "idx1": [214, 226, 254], "idx2": [214, 226, 254], "nulls_are_equ": 215, "obj": [218, 460, 678, 679, 680, 681], "pdi": 219, "primarili": [220, 699], "stringindex": [220, 249, 324, 329, 353, 487, 537, 546, 706], "bound": [222, 259, 293, 473, 712], "leftmost": 222, "past": [222, 676, 712], "rightmost": [222, 658], "ix": 222, "getitem": 222, "red": [226, 254, 262, 268], "blue": [226, 254, 262, 268], "is_integ": [227, 228, 229, 231, 235, 236], "is_float": [227, 228, 230, 231, 235, 236], "is_numer": [227, 228, 229, 230, 231, 236], "is_object": [227, 228, 229, 230, 231, 235], "is_categor": [227, 229, 230, 231, 235, 236], "is_interv": [227, 228, 229, 230, 235, 236], "categoricalindex": [228, 295, 658, 689], "is_boolean": [228, 229, 230, 231, 235, 236], "watermelon": [228, 230, 236], "orang": [228, 236], "appl": [228, 230, 235, 236, 683], "peter": 228, "victor": 228, "elisabeth": 228, "mar": 228, "mango": [230, 236], "intervalindex": [231, 658, 689], "monotonic_increas": 232, "is_monotonic_increas": [232, 344], "decreas": [233, 345, 376], "cold": 235, "sought": 237, "is_contain": 237, "detect": [238, 242, 670, 673, 699, 713], "return_index": [239, 248], "join_index": 239, "lexicograph": [239, 270, 707], "lh": 239, "rh": 239, "renamed_index": 243, "abl": [246, 708, 709], "partial": [246, 712], "renam": [246, 469], "quarter": [246, 628, 629], "cobra": 246, "frozenlist": 246, "itself": [248, 537, 546, 703], "sorted_index": 248, "1000": [248, 564, 703, 708, 712, 717], "allow_fil": 249, "green": [254, 267], "break": [259, 700], "pad": [260, 534, 547, 552, 564, 580, 649, 689, 703], "backfil": [260, 580], "distanc": [260, 490, 491], "broken": 260, "prefer": [260, 674, 675, 682, 699, 700], "larger": [260, 508, 509, 649, 670, 674, 706, 714], "inexact": 260, "satisfi": [260, 699], "equat": 260, "unique_index": 260, "monotonic_index": 260, "abbc": 260, "non_monotonic_index": 260, "abcb": 260, "numeric_unique_index": 260, "sortord": 262, "from_fram": [263, 264, 267, 268, 271, 706], "cartesian": [266, 267, 268, 699], "hi": [266, 706], "precip": 266, "nj": 266, "explicit": [266, 275, 712], "explicitli": [267, 650, 670, 701, 706, 708, 715, 717], "color": [267, 268], "purpl": 267, "effort": [270, 707], "fail": [270, 701, 714], "situat": [270, 589, 707, 717], "mi": 270, "non_monotonic_non_unique_idx": 270, "coerc": [270, 682, 683, 707, 708, 717], "unus": [275, 461, 469], "homogen": 275, "hashabl": 276, "been": [276, 703, 709, 714], "overridden": 276, "1d": [276, 331, 626, 628, 629, 650, 660, 703], "overrid": [276, 703], "extensiondtyp": [276, 717], "iteritem": 276, "to_list": 276, "tolist": 276, "to_append": 286, "convert_dtyp": 287, "cach": [287, 682], "recompil": 287, "incur": [287, 700], "overhead": [287, 699], "nest": [287, 471, 475, 713], "decor": 287, "someth": [287, 537, 701, 706, 712], "upcast": 287, "deriv": [287, 361], "lag": 290, "autocorrel": 290, "1438853844": 290, "9647548490": 290, "csf1": 291, "inclus": [293, 495, 658], "wherev": [293, 703], "gt": [293, 706, 712, 715], "lt": [293, 706, 712, 715], "alic": [293, 712], "bob": [293, 712], "carol": 293, "ev": 293, "anna": 293, "daniel": 293, "accessor": [295, 318, 689, 709], "Be": 295, "parent": [295, 703, 706], "reorder_categori": 295, "remove_categori": 295, "set_categori": 295, "abcd": [295, 484, 551], "as_ord": [295, 463], "as_unord": 295, "ser1": [298, 300], "62": [298, 300], "ser2": [298, 300], "51": [298, 300], "20454263717316112": 298, "015750000000000004": 300, "uint8": [305, 661, 683, 706, 714], "3rd": 310, "ind": [311, 428, 670], "beetl": [316, 348], "hippo": [316, 348], "discard": [316, 670], "kept": [317, 379, 699, 700], "datetimelik": [318, 689], "1h": 318, "hour": [318, 451, 643], "na_sentinel": 324, "chunkedarrai": 329, "singlecolumnfram": [329, 703], "pd_categor": 330, "set_mask": 331, "skip": [331, 669, 670, 674, 683], "mark": [331, 700], "bit": [331, 676, 703], "_column": 331, "seriesgroupbi": [334, 688], "turn": [348, 703], "therefor": [348, 469, 564, 699, 700, 703], "width": [361, 483, 528, 536, 545, 563, 564, 658, 703], "rabbit": [361, 499], "kitten": [361, 490], "puppi": [361, 490], "countries_popul": [376, 379], "montserrat": [376, 379], "5200": [376, 379], "quant_index": 390, "renamed_seri": 395, "numeric_seri": 395, "come": [399, 700, 701], "bar": [399, 701], "baz": [399, 540, 701], "mimic": [419, 701], "interfac": [419, 703, 708, 712], "stai": 419, "pattern": [419, 487, 488, 492, 493, 498, 499, 527, 540, 547, 552, 553, 703], "inspir": 419, "stringr": [419, 563], "packag": [419, 699, 700, 706, 708, 709, 712, 715], "lib": [428, 706, 715], "stringarrai": 428, "0x7f796b0e7600": 428, "0x7f796b0e7750": 428, "rel": [445, 678, 679, 680, 681, 699], "half": 445, "divid": [445, 699], "500000": [445, 592, 594], "166667": 445, "996": [445, 708], "1132223": 450, "2023232": 450, "342234324": 450, "4234324": 450, "001132223": 450, "002023232": 450, "004234324": 450, "clear": [460, 703], "df1": [460, 663, 679, 706, 715], "letter": [460, 523, 556, 562], "df3": 460, "horizont": 460, "df4": 460, "polli": 460, "georg": [460, 537, 546, 712], "new_categori": [461, 468, 469], "seriesorindex": [461, 462, 463, 467, 468, 469, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564], "genericindex": [464, 471, 472, 473, 474, 475, 476, 477, 478, 479, 487, 703], "relationship": [466, 594, 703], "old": [467, 468, 469, 700], "reorder": [468, 469], "action": 469, "simultan": 469, "specialis": 469, "hand": 469, "surpris": 469, "leaf": 470, "search_kei": [472, 474], "extract": [473, 500, 542, 550, 566, 689], "indexerror": 473, "possibli": 475, "flat": 475, "criterion": 477, "lists_indic": 478, "ef": [480, 484], "bye": [480, 706], "thank": [480, 485, 712], "sentenc": [481, 529, 547, 552, 555, 556, 559, 560], "swapcas": [481, 529, 556, 559, 560, 689], "friend": 481, "goodby": [481, 485, 557, 558], "stringcolumn": [482, 703], "again": [482, 712], "aa": [482, 539], "bb": [482, 527, 539], "dd": [482, 670], "fillchar": [483, 528, 536, 545], "whitespac": [483, 496, 510, 511, 512, 513, 515, 517, 519, 520, 521, 524, 528, 530, 534, 535, 536, 537, 541, 545, 546, 547, 548, 552, 554, 557, 558, 670], "as_list": 484, "gram": [484, 532, 533], "bigram": [484, 532], "ngram": [484, 533, 689], "str_seri": [484, 532, 649], "efgh": 484, "xyz": [484, 486, 532], "bc": [484, 491], "cd": 484, "fg": 484, "gh": 484, "xy": 484, "yz": 484, "bcd": 484, "efg": 484, "fgh": 484, "world": [485, 489, 500, 528, 534, 535, 543, 545, 557, 558, 673], "k": [485, 525, 580, 673, 707], "\u00e9ee": 486, "97": 486, "121": 486, "122": 486, "50089": 486, "101": [486, 649, 706], "98": 486, "99": [486, 501, 534], "pat": [487, 488, 492, 493, 499, 527, 531, 540, 542, 547, 552, 553], "flag": [487, 488, 493, 499, 531, 540, 708], "regular": [487, 488, 492, 493, 499, 531, 540, 547, 552, 553, 701, 713], "multilin": [487, 488, 493, 499, 531], "liter": [487, 488, 527, 540, 547, 552, 673], "anyth": [487, 537, 540, 546], "dotal": [487, 488, 493, 499, 531], "mous": 487, "hous": 487, "og": 487, "digit": [487, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 524, 562, 699, 710], "might": [487, 708, 712], "35": [487, 643, 644, 645, 647, 666, 670, 671, 674, 675], "escap": [488, 527], "aaba": [488, 706], "baca": [488, 706], "caba": [488, 706], "dollar": 488, "sign": [488, 564, 683, 710], "aab": 488, "ca": 488, "token": [489, 496, 532, 533, 534, 535, 541, 557, 648, 649, 689], "measur": [490, 491, 538, 594, 699], "levenshtein": [490, 491], "edit": [490, 491], "www": 490, "cuelog": 490, "com": [490, 561, 562], "blog": 490, "doggi": 490, "kitti": 490, "pup": 490, "dogi": 490, "tell": 491, "symmetr": 491, "diagon": [491, 708], "cba": 491, "nativ": [492, 700], "bat": [492, 553], "bear": [492, 553], "captur": [493, 699], "subject": [493, 712], "c3": 493, "repl": [494, 495, 505, 540, 542, 551], "alphanumer": [494, 510, 511, 512, 513, 515, 517, 519, 520, 521, 524], "pear": 494, "plum": 494, "72": [494, 706], "100k": 494, "unicod": [495, 513, 520, 534, 559], "ordin": [495, 559], "maketran": [495, 559], "helper": [495, 559, 703, 708], "caus": 495, "undefin": [495, 649, 712], "aeiou": 495, "0123456789": [495, 505], "aei": 495, "ou": 495, "456": [495, 518, 666, 670, 671, 674, 675], "_": [495, 496, 505, 525, 527, 528, 532, 533, 541, 545, 562, 661], "___ou": 495, "aei__": 495, "0123___789": 495, "min_token_length": 496, "theme": [496, 541, 701], "music": [496, 541], "substr": [497, 504, 543, 544, 549, 550], "fulli": [497, 504, 543, 544, 706, 710, 712], "failur": [497, 543], "ddb": [497, 504, 544], "inn": 498, "sea": 498, "word": [499, 523, 529, 555, 560, 648, 649], "json_path": 501, "allow_single_quot": 501, "strip_quotes_from_single_str": 501, "missing_fields_as_nul": 501, "jsonpath": 501, "quot": [501, 670, 673], "doubl": [501, 673], "strip": [501, 530, 548, 689], "book": [501, 532, 533, 649], "author": 501, "nigel": 501, "ree": 501, "titl": [501, 523, 529, 555, 560, 689], "centuri": 501, "95": 501, "evelyn": 501, "waugh": 501, "sword": 501, "honour": 501, "1234": [502, 503], "abcdef": [502, 503], "1a2": [502, 503], "cafe": [502, 503], "htoi": [502, 689], "4660": [502, 503], "11259375": [502, 503], "418": [502, 503], "51966": [502, 503], "traceback": [504, 544], "recent": [504, 544], "stdin": [504, 544], "modul": [504, 544, 689, 699, 700, 704, 706, 717], "abb": [504, 544], "abcdefghij": 505, "ab_cdefghij": 505, "01_23456789": 505, "abcdefghij_": 505, "0123456789_": 505, "ip": [506, 507, 701], "168": [506, 507], "212336897": [506, 507], "167772161": [506, 507], "ip2int": [507, 689], "conson": [508, 509], "troubl": [508, 509, 703], "vowel": 509, "isalpha": [510, 512, 513, 515, 517, 519, 520, 521, 524, 689, 712], "isdigit": [510, 511, 512, 515, 516, 517, 519, 520, 521, 524, 689, 712], "isnumer": [510, 511, 512, 513, 515, 516, 517, 519, 521, 524, 689], "isdecim": [510, 511, 513, 515, 516, 517, 519, 520, 521, 524, 689, 712], "alphabet": [510, 511, 512, 513, 515, 517, 519, 520, 521, 524], "isinteg": [510, 511, 512, 513, 515, 519, 520, 521, 524, 689], "isfloat": [510, 511, 512, 513, 516, 517, 519, 520, 521, 524, 689], "islow": [510, 511, 512, 513, 515, 517, 520, 521, 524, 689, 712], "lowercas": [510, 511, 512, 513, 515, 517, 519, 520, 521, 523, 524, 529, 555, 556, 560, 648], "isspac": [510, 511, 512, 513, 515, 517, 519, 520, 524, 689, 712], "isupp": [510, 511, 512, 513, 515, 517, 519, 520, 521, 689, 712], "uppercas": [510, 511, 512, 513, 515, 517, 519, 520, 521, 523, 524, 529, 555, 556, 560], "one1": [510, 511, 520], "punctuat": [510, 534], "isalnum": [511, 512, 513, 515, 517, 519, 520, 521, 524, 689, 712], "\u00b3": [512, 513, 520], "\u2155": [512, 513, 520], "superscript": 513, "subscript": 513, "123213": 515, "123": [515, 518, 530, 537, 546, 554, 643, 644, 645, 646, 647, 666, 670, 671, 674, 675], "0001": 515, "234": [515, 643, 644, 645, 646, 647, 710], "plain": 515, "text": [515, 517, 648, 649, 666, 669, 670, 671, 674, 675, 676, 689, 704], "123def": 516, "0x2d3": 516, "plan": [517, 700, 712], "ipv4": 518, "address": [518, 701, 703], "127": 518, "255": 518, "leopard": [519, 523, 524], "golden": [519, 523, 524], "eagl": [519, 523, 524], "snake": [519, 523, 524], "quantiti": 520, "20201101": 522, "192011": 522, "18200111": 522, "2120": 522, "string_na_rep": 525, "sep_na_rep": 525, "themselv": [525, 701], "interven": 525, "suppli": [525, 661, 712], "ghi": [525, 670, 710], "a_b_c": 525, "d_e_f": 525, "g_h_i": 525, "a_b_k": 525, "c_d": 525, "esc": 527, "ddbc": 527, "b_": 527, "wildcard": [527, 703, 706], "ai_": 528, "__": [528, 545], "capit": [529, 555, 556, 559, 560, 689], "to_strip": [530, 548, 554], "trail": [530, 548, 554], "newlin": [530, 548, 554, 700], "rstrip": [530, 554, 689], "ac": 531, "my": 532, "favorit": 532, "my_favorit": 532, "hhh": 532, "abc_def": 532, "def_xyz": 532, "xyz_hhh": 532, "white": 533, "this_i": 533, "is_th": 533, "best_book": 533, "do_low": [534, 648], "subword_token": 534, "around": [534, 537, 547, 552, 700, 703, 712], "p": 534, "symbol": 534, "cjk": 534, "cc": [534, 539], "cf": 534, "do_lower_cas": [534, 648, 649], "accent": 534, "h\u00e9llo": 534, "tworld": 534, "\u0103\u0107c\u0117\u00f1ted": 534, "up": [536, 547, 552, 617, 623, 682, 699, 700, 704, 706, 712, 717], "rjust": [536, 564, 689], "ljust": [536, 564, 689], "zfill": [536, 689], "prepend": [536, 564], "carib": 536, "tiger": 536, "rpartit": [537, 689], "linda": [537, 546], "van": [537, 546], "der": [537, 546], "berg": [537, 546], "pitt": [537, 546], "river": [537, 546], "999": [537, 546, 706, 708], "porter": 538, "stemmer": 538, "super": 538, "ccc": 539, "fuz": 540, "ba": 540, "bao": 540, "insid": [541, 650, 670, 676, 701, 711, 712], "back": [542, 670, 674, 675, 703, 706, 714, 717], "ref": [542, 569, 588, 614], "templat": 542, "section": [542, 551, 699, 700, 701, 702, 706, 711, 712, 715, 717], "a543": 542, "z756": 542, "av453": 542, "zv576": 542, "rfind": [544, 689, 712], "_________hello": 545, "___________rapid": 545, "version": [547, 552, 688, 700, 706, 708, 715], "tutori": [547, 706], "throughout": [547, 552], "slightli": [547, 670, 688, 699], "complex": [547, 650, 701, 703, 712], "lstrip": [548, 554, 689], "slice_replac": [549, 689], "koala": 549, "fox": 549, "chameleon": 549, "oala": 549, "ox": 549, "hameleon": 549, "ko": 549, "fo": 549, "ch": 549, "kaa": 549, "fx": 549, "caeen": 549, "kl": 549, "cm": 549, "ello": 550, "abdc": 551, "until": [551, 706], "xc": 551, "xdc": 551, "xcde": 551, "axc": 551, "axd": 551, "rsplit": [552, 689], "endswith": [553, 689, 712], "unmap": 559, "untouch": 559, "swapc1s": 559, "low": [559, 712], "nt": 559, "nc": 559, "swapc1": 559, "No": [561, 562, 649, 658, 703, 713], "2fb": [561, 562], "2fd": [561, 562], "20f": [561, 562], "2c6": [561, 562], "3a": [561, 562], "2f": [561, 562], "2frapid": [561, 562], "2fstart": [561, 562], "2fmedium": [561, 562], "medium": [561, 562, 658], "paragraph": 563, "expand_tabsbool": 563, "replace_whitespac": 563, "drop_whitespac": 563, "break_long_word": 563, "break_on_hyphen": 563, "str_wrap": 563, "expand_tab": 563, "nwrap": 563, "nto": 563, "reach": [564, 703], "longer": [564, 701, 702], "001": 564, "children": [566, 703], "agg": [569, 612, 614, 706, 709, 711], "f1": [569, 588, 614], "quantil": [569, 588, 614, 707, 711], "__name__": [569, 588, 614], "q0": [569, 588, 614], "f2": [569, 588, 614], "score": 577, "90": [577, 706], "hole": 580, "gap": [580, 703], "introduc": [586, 700], "indetermin": 586, "mult": 589, "redund": [589, 707], "pairwis": [592, 594], "kendal": 592, "val1": [592, 594], "val2": [592, 594], "val3": [592, 594], "385727": 592, "714575": 592, "bia": 594, "comparison": [594, 699, 700, 705, 713, 715], "understand": 594, "member": [594, 700], "invert": 594, "matric": [594, 708], "en": [594, 650], "wikipedia": 594, "wiki": 594, "estimation_of_covariance_matric": 594, "833333": 594, "enum": 604, "complement": [604, 716], "cumcount": 604, "seen": 604, "aaabba": 604, "round": [617, 623], "dt": [617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 694, 706, 709], "datetime_seri": [618, 619, 620, 621, 624, 633, 634, 635, 636, 639, 641, 642, 715], "2013": 625, "1y": 625, "2003": [625, 712], "2005": [625, 709], "2007": 625, "2008": 625, "2009": [625, 632], "2011": 625, "2012": [625, 682, 715], "2021": 632, "serindex": 632, "to_datetim": 632, "53": 632, "000000000": [636, 682], "dt_sr": 638, "weekday_seri": 640, "12231312123": [643, 644, 645, 646, 647], "1231231231": [643, 644, 645, 646, 647], "1123236768712": [643, 644, 645, 646, 647], "2135656": [643, 644, 645, 646, 647], "3244334234": [643, 644, 645, 646, 647], "141": [643, 644, 645, 647], "231": [643, 644, 645, 646, 647], "13000": [643, 644, 645, 647], "48": [643, 644, 645, 647, 676, 717], "712": [643, 644, 645, 646, 647], "656": [643, 644, 645, 646, 647], "37": [643, 644, 645, 647, 715], "123000": [645, 647], "231000": [645, 647], "712000": [645, 647], "656000": [645, 647], "234000": [645, 647], "231312123": 646, "231231231": 646, "236768712": 646, "002135656": 646, "244334234": 646, "48912": 647, "21631": 647, "36768": 647, "2135": 647, "47534": 647, "hash_fil": 648, "bert": [648, 649], "subword": [648, 649], "vocabulari": [648, 649], "pretrain": [648, 649], "21x": 648, "util": [648, 649, 689, 705, 706], "hash_vocab_util": [648, 649], "hash_vocab": [648, 649], "max_length": 649, "max_num_row": 649, "add_special_token": 649, "return_tensor": 649, "return_token_type_id": 649, "batch": 649, "alloc": [649, 670, 703, 712], "temporari": 649, "twice": [649, 699], "classif": 649, "model": [649, 703, 706], "do_not_trunc": 649, "huggingfac": 649, "pt": 649, "tf": 649, "tensorflow": 649, "pytorch": 649, "torch": 649, "input_id": 649, "fed": 649, "attention_mask": 649, "attend": 649, "vocab": 649, "txt": 649, "voc_hash": 649, "cudf_token": 649, "tokenizer_output": 649, "1142": 649, "1110": 649, "1103": 649, "102": [649, 706], "1436": 649, "1520": 649, "featur": [650, 699, 700, 701, 716], "readthedoc": 650, "cudapysupport": 650, "cmath": 650, "libcudf": [650, 702, 703], "ptx": 650, "sin": 650, "co": 650, "tan": 650, "lgamma": 650, "global": [650, 716], "known": [650, 682], "count_if_gt_3": 650, "retbin": 658, "include_lowest": 658, "segment": 658, "go": [658, 699, 701, 703, 705, 708, 712], "continu": [658, 676, 708], "criteria": [658, 672], "extens": [658, 670], "done": [658, 706], "994": [658, 708], "bad": 658, "unspecifi": 659, "fortran": [660, 708], "prefix_sep": 661, "dummy_na": 661, "spars": [661, 713], "drop_first": 661, "hot": 661, "dummi": 661, "value1": 661, "value2": 661, "a_value1": 661, "a_value2": 661, "a_non": 661, "a_1": 661, "a_2": 661, "a_nan": 661, "a_nul": 661, "max_file_s": 663, "file_name_prefix": 663, "exceed": 663, "writer": [663, 691, 699, 714], "gb": 663, "mandatori": 663, "context": 663, "cw": 663, "write_t": 663, "manual": [663, 701], "num_row": [666, 669, 674, 699], "num_row_group": 666, "row_group": [666, 675], "num1": [666, 670, 671, 674, 675], "13t12": [666, 670, 671, 674, 675], "5451": [666, 670, 671, 674, 675], "14t12": [666, 670, 671, 674, 675], "5784": [666, 670, 671, 674, 675], "789": [666, 670, 671, 674, 675], "15t18": [666, 670, 671, 674, 675], "6117": [666, 670, 671, 674, 675], "myvarnam": 667, "myvalnam": 667, "filepath_or_buff": [669, 670, 674, 675, 676], "skiprow": [669, 670, 674], "load": [669, 670, 671, 673, 674, 675, 705, 706], "avro": [669, 689, 714], "pathlib": [669, 670, 672, 673, 674, 675, 676, 706], "py": [669, 670, 672, 673, 674, 675, 676, 699, 706, 715], "_path": [669, 670, 672, 673, 674, 675, 676], "localpath": [669, 670, 672, 673, 674, 675, 676], "ftp": [669, 670, 673, 674, 675, 676], "bytesio": [669, 674, 675], "parser": [669, 673, 674, 675], "remot": [669, 670, 674, 675, 701], "pandavro": 669, "pandas_df": 669, "to_avro": 669, "index_col": 670, "usecol": 670, "mangle_dupe_col": 670, "true_valu": 670, "false_valu": 670, "skipinitialspac": 670, "skipfoot": 670, "keep_default_na": 670, "na_filt": 670, "skip_blank_lin": 670, "parse_d": 670, "thousand": [670, 708], "linetermin": 670, "quotechar": 670, "doublequot": 670, "comment": [670, 701], "delim_whitespac": 670, "byte_rang": [670, 673, 676], "use_python_file_object": [670, 674, 675], "bytes_per_thread": 670, "comma": 670, "seper": 670, "recogn": 670, "qnan": 670, "unusu": 670, "mm": 670, "european": 670, "decompress": [670, 673, 714], "gz": [670, 673], "quote_minim": 670, "quote_al": 670, "quote_non": 670, "altogeth": [670, 703], "arrow": [670, 674, 675, 703, 705, 713], "pythonfil": [670, 674, 675], "abstractbufferedfil": [670, 674, 675], "throughput": 670, "decompos": 670, "transfer": [670, 714], "pool": 670, "256_000_000": 670, "to_csv": [670, 706, 714], "fp": 670, "__fspath__": 672, "protocol": 672, "term": [672, 673, 699, 712, 717], "to_hdf": 672, "auto": [673, 701], "keep_quot": 673, "cudf_experiment": 673, "to_json": 673, "typ": 673, "recov": 673, "convert_ax": 673, "proper": 673, "convert_d": 673, "datelik": 673, "_at": 673, "_time": 673, "keep_default_d": 673, "precise_float": 673, "strtod": 673, "py3": 673, "jsonread": 673, "wrap": [673, 689, 700, 706, 712], "json_str": 673, "v1": 673, "v2": 673, "k1": 673, "use_index": 674, "timestamp_typ": 674, "predic": [674, 675], "disjunct": [674, 675], "dnf": [674, 675], "conjunct": [674, 675, 700, 712], "AND": [674, 675], "outermost": 674, "OR": [674, 675], "notat": [674, 675], "deprec": [674, 702], "seek": 674, "to_orc": [674, 714], "strings_to_categor": 675, "use_pandas_metadata": 675, "categorical_partit": 675, "open_file_opt": 675, "gdf_categori": 675, "gdf_string": 675, "discourag": 675, "open_parquet_fil": 675, "deactiv": 675, "precach": 675, "precache_opt": 675, "open_file_func": 675, "read_parquet_metadata": 675, "compression_offset": 676, "datasourc": 676, "bgzip": 676, "virtual": 676, "baseexcept": 677, "check_dtyp": [678, 679, 681], "check_column_typ": [678, 679], "equiv": [678, 679, 680, 681], "check_less_precis": [678, 680, 681], "check_exact": [678, 679, 680, 681], "check_datetimelike_compat": [678, 679, 681], "check_categor": [678, 679, 680, 681], "check_category_ord": [678, 681], "rtol": [678, 679, 680, 681], "1e": [678, 679, 680, 681], "atol": [678, 679, 680, 681], "columnbas": [678, 679, 680, 681, 703], "intend": [678, 679, 680, 681, 703, 712], "inferred_typ": [678, 679, 680, 681], "idl": [678, 679, 681], "check_datetime_like_compat": [678, 679, 681], "appropri": [678, 679, 680, 681, 701, 703], "assert": [678, 679, 680, 681], "messag": [678, 679, 680, 681, 700], "check_index_typ": [679, 681], "check_frame_typ": 679, "check_nam": [679, 680, 681], "by_block": 679, "check_lik": 679, "assertionerror": [679, 680, 681], "hitch": [679, 680, 681], "check_ord": 680, "id1": 680, "id2": 680, "check_series_typ": 681, "sr1": 681, "sr2": 681, "utc": 682, "infer_datetime_format": 682, "eg": 682, "bug": [682, 700], "strftime": 682, "denot": 682, "off": [682, 701, 706, 714], "10x": 682, "succeed": 682, "assembl": 682, "abbrevi": 682, "plural": 682, "2015": 682, "1490195805": 682, "22t15": 682, "1490195805433502912": 682, "1780": 682, "20t01": 682, "494253056": 682, "polici": [683, 700], "notifi": 683, "encount": [683, 700], "unsign": [683, 710], "down": [683, 699], "datatyp": 683, "decoupl": 683, "3e3": 683, "3000": 683, "cudf": [688, 689, 698, 700, 702, 703, 704, 707, 710, 711, 713, 714, 716], "usual": [688, 699], "permit": 688, "restrict": 688, "publicli": 689, "namespac": [689, 694, 701], "merg": [689, 699, 703, 706, 709, 717], "timedeltaindex": 689, "deal": 689, "roll": [689, 703, 709, 713], "subwordtoken": [689, 705], "stringmethod": 689, "byte_count": 689, "character_ngram": 689, "character_token": 689, "code_point": 689, "detoken": 689, "edit_dist": 689, "edit_distance_matrix": 689, "filter_alphanum": 689, "filter_charact": 689, "filter_token": 689, "findal": 689, "find_multipl": 689, "get_json_object": 689, "hex_to_int": 689, "ip_to_int": 689, "is_conson": 689, "is_vowel": 689, "isempti": 689, "ishex": 689, "isipv4": 689, "istimestamp": 689, "istitl": [689, 712], "ngrams_token": 689, "normalize_charact": 689, "normalize_spac": 689, "porter_stemmer_measur": 689, "replace_token": 689, "replace_with_backref": 689, "rindex": 689, "slice_from": 689, "token_count": 689, "translat": [689, 703], "url_decod": 689, "url_encod": 689, "listmethod": 689, "structmethod": 689, "explod": 689, "get_opt": [689, 704], "set_opt": [689, 716], "describe_opt": [689, 716], "variant": 690, "thereof": 690, "reader": [691, 706, 714], "acceler": [691, 702, 705, 706, 712, 714], "cpu": [691, 706, 709, 714, 717], "futur": [691, 699, 700, 702, 706, 712, 715], "goal": [699, 700, 702], "repositori": 699, "pytest": 699, "plugin": [699, 701], "framework": 699, "seamless": 699, "experi": [699, 701, 712], "develop": [699, 700, 701, 703, 704, 705, 708, 712, 713], "public": [699, 701], "former": [699, 701], "macro": 699, "vi": 699, "\u00e0": 699, "help": [699, 700, 701], "quantifi": 699, "minim": [699, 700, 701], "bind": [699, 703], "focu": [699, 708], "footprint": 699, "At": [699, 702, 703, 712], "stabil": [699, 700], "free": 699, "bench_class": 699, "eval": 699, "bench_datafram": 699, "hierarchi": [699, 703], "bench_frame_or_index": 699, "trigger": 699, "veri": [699, 708, 711, 712], "characterist": 699, "_intern": 699, "_apply_boolean_mask": 699, "bench_dataframe_intern": 699, "broadli": 699, "speak": 699, "live": [699, 700], "bench_io": 699, "discov": 699, "test_": 699, "bench_": 699, "instal": [699, 701, 712], "termin": 699, "autosav": 699, "xxxx_": 699, "xxxx": 699, "yyyi": 699, "command": [699, 701], "short": [699, 701, 706], "param": 699, "config": [699, 700], "hard": 699, "advertis": [699, 709], "littl": [699, 703], "natur": [699, 715], "meaning": 699, "care": 699, "interchang": [699, 703], "demonstr": [699, 701, 712], "bench_foo": 699, "six": 699, "did": [699, 712], "interest": 699, "cover": [699, 701, 702, 712], "baselin": [699, 706], "coverag": 699, "tweak": 699, "debug": [699, 700, 703], "num_col": 699, "aspect": 699, "want": [699, 701, 706, 708, 712, 715], "quantit": 699, "easi": [699, 701, 708, 709], "environ": [699, 701, 714], "cudf_benchmarks_use_panda": 699, "easili": [699, 701, 705], "simpli": [699, 701, 703, 708], "remap": 699, "why": 699, "critic": 699, "ci": [699, 706], "significantli": 699, "cycl": [699, 700], "balanc": 699, "cudf_benchmarks_debug_onli": 699, "advantag": [699, 708], "redefin": [699, 712], "crucial": 699, "although": 699, "suit": 699, "guidelin": [699, 701], "spy": 699, "svg": 699, "invoc": 699, "tool": [699, 700], "strength": 699, "somewhat": 699, "workflow": [699, 700, 705, 706, 713], "encourag": [699, 701, 708, 709], "discuss": [699, 701, 702, 703, 706, 715], "hood": [699, 701, 702, 703, 706], "magic": 699, "pytest_cas": 699, "programat": 699, "unambigu": 699, "classnam": 699, "_dtype_": 699, "_nulls_": 699, "_cols_": 699, "_rows_": 699, "dataframe_dtype_int_rows_100": 699, "cumbersom": [699, 703], "moreov": 699, "embed": 699, "problem": [699, 712], "essenti": [699, 703, 712], "dataframe_dtype_int_cols_6": 699, "focus": 700, "high": [700, 703], "overview": [700, 705, 713], "practic": [700, 702, 703, 706], "subpackag": 700, "_lib": 700, "emploi": 700, "linter": 700, "manag": [700, 703, 712], "pre": [700, 712], "commit": 700, "strongli": [700, 701], "prior": 700, "yaml": 700, "repo": 700, "truth": 700, "lint": [700, 701], "flake8": 700, "complianc": 700, "black": 700, "formatt": 700, "isort": 700, "mypi": 700, "static": 700, "hint": 700, "difficult": [700, 709, 712], "pydocstyl": [700, 701], "docstr": [700, 702], "pyproject": 700, "toml": 700, "setup": [700, 706], "cfg": 700, "project": [700, 703, 709], "parti": 700, "addition": [700, 702, 703, 709], "hook": 700, "overal": [700, 702], "releas": [700, 712], "prevent": 700, "unexpect": 700, "sure": [700, 708, 712], "emit": 700, "futurewarn": [700, 706, 715], "opportun": 700, "thing": [700, 709, 712], "new_foo": 700, "signal": 700, "deprecationwarn": 700, "hidden": 700, "__main__": 700, "analog": [700, 703], "sometim": [700, 706, 708, 712], "latest": 700, "reason": [700, 701, 703, 714], "exorbit": 700, "runtim": [700, 712], "premium": 700, "believ": 700, "perfect": 700, "infeas": [700, 703], "undesir": 700, "consult": 700, "team": 700, "assess": 700, "proce": [700, 706, 708, 712], "substanti": 700, "power": [700, 701], "friendli": 700, "profil": [700, 702], "expos": [700, 703, 708, 712, 714], "pxd": [700, 703], "declar": [700, 703], "pyx": 700, "thin": [700, 712], "layer": [700, 702, 706], "rare": 700, "benefit": [700, 701], "happen": [700, 712, 715], "quit": 700, "justifi": 700, "benchmark": [700, 702, 705], "suffici": [700, 701], "mention": [700, 703, 709, 712], "logic_error": 700, "cuda_error": 700, "runtimeerror": 700, "payload": 700, "brittl": 700, "compromis": 700, "adopt": 700, "strategi": 700, "roadmap": 700, "diversifi": 700, "inlin": 701, "restructuredtext": 701, "myst": 701, "sphinx": 701, "contribut": [701, 702, 705], "lieu": 701, "explan": [701, 704], "commonli": [701, 717], "brief": 701, "_strongly_": 701, "numpydoc": 701, "scenario": 701, "getter": 701, "That": 701, "inherit": [701, 703], "codebas": 701, "pull": 701, "aim": 701, "api_doc": 701, "rst": 701, "discover": 701, "autosummari": 701, "api1": 701, "api2": 701, "render": 701, "layout": [701, 703], "stub": 701, "currentmodul": 701, "autofunct": 701, "autodoc": 701, "approach": [701, 703, 712], "facilit": [701, 703], "bodi": 701, "api_nam": 701, "dedic": 701, "superset": 701, "markdown": 701, "syntax": [701, 712], "link": 701, "anchor": 701, "instruct": 701, "nb": 701, "straightforward": 701, "navig": [701, 713], "shell": 701, "server": 701, "Then": 701, "web": 701, "browser": 701, "localhost": 701, "8000": 701, "machin": [701, 706, 709], "visibl": 701, "network": 701, "ssh": 701, "local_port": 701, "remote_port": 701, "remote_ip": 701, "enforc": [701, 706], "regard": 701, "main": [702, 703, 712], "dask_cudf": [702, 706, 709], "cudf_kafka": 702, "custreamz": 702, "robustli": 702, "guidanc": 702, "topic": 702, "cython": 702, "publish": 702, "advanc": [702, 708, 709, 712], "serv": 703, "face": 703, "bridg": 703, "review": 703, "role": 703, "requisit": 703, "tradeoff": 703, "tie": 703, "holist": 703, "diagram": 703, "princip": 703, "eponym": 703, "tabular": [703, 706, 712], "columnar": [703, 705, 706], "meanwhil": 703, "abstract": 703, "materi": 703, "preliminari": 703, "let": [703, 708, 712], "dive": 703, "deeper": 703, "surmis": 703, "diamond": 703, "simpler": [703, 712], "flatten": 703, "ve": [703, 706, 712], "highlight": [703, 712], "concret": [703, 712], "eventu": 703, "almost": 703, "rewrit": 703, "alon": 703, "reimplement": 703, "behav": 703, "instanti": 703, "unfortun": 703, "mimick": 703, "__new__": 703, "tree": 703, "masquerad": 703, "stack": 703, "glue": 703, "own": [703, 714], "semant": 703, "apach": [703, 705, 706], "conduc": 703, "concept": [703, 706], "extent": 703, "interoper": [703, 705, 713], "simplifi": 703, "numericalcolumn": 703, "datetimecolumn": 703, "decis": 703, "4000": 703, "sizeof": 703, "128": [703, 708], "chees": 703, "preexist": 703, "knowledg": [703, 712], "structdtyp": [703, 710], "decimaldtyp": 703, "intervaldtyp": 703, "contigu": [703, 708], "rmm": 703, "devicebuff": 703, "interact": [703, 706, 712], "explanatori": 703, "column_view": 703, "table_view": 703, "question": [703, 712], "trivial": 703, "descent": 703, "whole": 703, "fact": [703, 715], "act": 703, "reduct": [703, 709], "scan": 703, "bypass": 703, "straight": 703, "resampl": 703, "composit": 703, "explain": 704, "_register_opt": 704, "yield": [704, 706, 717], "fixtur": 704, "clean": 704, "scientist": 705, "program": 705, "dask": [705, 713], "introduct": 706, "gear": 706, "mainli": 706, "smooth": [706, 713], "cluster": [706, 709], "enough": [706, 709, 712], "comfort": [706, 712], "spread": [706, 709], "portion": [706, 712], "borrow": 706, "adapt": [706, 712], "cheatsheet": 706, "from_cudf": 706, "npartit": [706, 709], "thread_load": 706, "cuh": 706, "jitifi": 706, "thread_stor": 706, "ddf": 706, "dask_gdf": 706, "met": 706, "cudf_compar": 706, "dask_cudf_compar": 706, "isin": 706, "gdf1": 706, "rand": [706, 715], "082654": 706, "967955": 706, "399417": 706, "441425": 706, "784297": 706, "793582": 706, "070303": 706, "271711": 706, "gdf2": 706, "opt": [706, 715], "conda": [706, 712, 715], "env": [706, 715], "python3": [706, 715], "site": [706, 715], "column_accessor": 706, "251": 706, "343382": 706, "003700": 706, "20043": 706, "581614": 706, "907812": 706, "101512": 706, "24179": 706, "224180": 706, "var": [706, 711], "666666666666666": 706, "6666666666666667": 706, "map_partit": [706, 709], "add_ten": 706, "progress": 706, "ds2": 706, "restor": 706, "post": [706, 711], "ddf_a": 706, "ddf_b": 706, "paradigm": 706, "agg_col1": 706, "agg_col2": 706, "54": 706, "73": 706, "date_df": 706, "986051": 706, "232034": 706, "397617": 706, "103839": 706, "date_ddf": 706, "grade": 706, "dgdf": 706, "to_numpi": 706, "to_arrow": [706, 717], "example_output": 706, "mkdir": 706, "foo_dask": 706, "star": 706, "temp_parquet": 706, "example_fil": 706, "cudf_root": 706, "orc_fil": 706, "testorcfil": 706, "test1": 706, "boolean1": 706, "byte1": 706, "short1": 706, "int1": 706, "long1": 706, "float1": 706, "double1": 706, "bytes1": 706, "string1": 706, "middl": 706, "1024": 706, "65536": 706, "2048": 706, "100000000": 706, "chani": 706, "spark": 706, "lazi": 706, "moment": 706, "graph": 706, "delai": 706, "activ": 706, "background": [706, 712], "system": 706, "finish": 706, "downstream": [706, 708], "contract": 706, "upstream": 706, "snippet": 706, "localcudaclust": 706, "worker": 706, "beyond": 706, "scope": [706, 712], "client": 706, "dask_cuda": 706, "2022": 706, "032": 706, "preload": 706, "info": 706, "034": 706, "038": 706, "052": 706, "057": 706, "10000000": 706, "ddf2": 706, "2000000": 706, "8000000": 706, "9999999": 706, "nvidia": 706, "smi": 706, "mon": 706, "oct": 706, "495": 706, "bu": 706, "disp": 706, "volatil": 706, "uncorr": 706, "ecc": 706, "fan": 706, "perf": 706, "pwr": 706, "cap": 706, "mig": 706, "tesla": 706, "v100": 706, "pcie": 706, "00000000": 706, "26c": 706, "p0": 706, "32w": 706, "250w": 706, "1471mib": 706, "32510mib": 706, "33w": 706, "307mib": 706, "29c": 706, "2254mib": 706, "24c": 706, "85": 706, "25c": 706, "gi": 706, "pid": 706, "twenti": 706, "800": [706, 708], "sleep": 706, "1875mib": 706, "27c": 706, "711mib": 706, "2658mib": 706, "proceed": 706, "ll": [706, 708, 712], "ddf1": 706, "randint": [706, 717], "spent": 706, "results_ddf": 706, "sooner": 706, "had": 706, "doneandnotdonefutur": 706, "c7940c8e13ab4ede055cbadce5cad300": 706, "not_don": 706, "notebook": [708, 712], "introductori": 708, "algebra": 708, "timeit": 708, "__version__": 708, "cupy_from_dlpack": 708, "from_dlpack": 708, "fromdlpack": 708, "to_cupi": 708, "500": 708, "arr_cupi": 708, "to_dlpack": 708, "197": 708, "\u00b5": 708, "dev": 708, "616": 708, "626": 708, "501": 708, "1001": 708, "502": 708, "1002": 708, "9997": 708, "10497": 708, "10997": 708, "9998": 708, "10498": 708, "10998": 708, "9999": 708, "10499": 708, "10999": 708, "__cuda_array_interface__": [708, 712], "leverag": [708, 712, 717], "cola_cupi": 708, "92": 708, "227": 708, "840": [708, 717], "215": 708, "norm": 708, "reshaped_arr": 708, "198": 708, "199": 708, "201": 708, "202": 708, "397": 708, "398": 708, "399": 708, "401": 708, "402": 708, "597": 708, "598": 708, "599": 708, "9400": 708, "9401": 708, "9402": 708, "9597": 708, "9598": 708, "9599": 708, "9600": 708, "9601": 708, "9602": 708, "9797": 708, "9798": 708, "9799": 708, "9800": 708, "9801": 708, "9802": 708, "603": 708, "804": 708, "1005": [708, 712], "1206": 708, "1407": 708, "1608": 708, "1809": 708, "2211": 708, "2412": 708, "2613": 708, "2814": 708, "3015": 708, "3216": 708, "3417": 708, "3618": 708, "3819": 708, "4020": 708, "4221": 708, "4422": 708, "4623": 708, "4824": 708, "5025": 708, "5226": 708, "5427": 708, "5628": 708, "5829": 708, "6030": 708, "6231": 708, "6432": 708, "6633": 708, "6834": 708, "7035": 708, "7236": 708, "7437": 708, "7638": 708, "7839": 708, "8040": 708, "8241": 708, "8442": 708, "8643": 708, "8844": 708, "9045": 708, "9246": 708, "9447": 708, "9648": 708, "9849": 708, "linalg": 708, "577306": 708, "967739": 708, "easiest": [708, 712], "beforehand": 708, "reshaped_df": 708, "918": 708, "190": 708, "191": 708, "192": 708, "193": 708, "194": 708, "195": 708, "196": 708, "203": 708, "204": 708, "205": 708, "206": 708, "207": 708, "208": 708, "209": 708, "391": 708, "392": 708, "393": 708, "394": 708, "395": 708, "396": 708, "403": 708, "405": 708, "406": 708, "407": 708, "408": 708, "409": 708, "590": 708, "591": 708, "592": 708, "593": 708, "594": 708, "595": 708, "596": 708, "600": 708, "601": 708, "602": 708, "604": 708, "605": 708, "606": 708, "607": 708, "608": 708, "609": 708, "790": 708, "791": 708, "792": 708, "793": 708, "794": 708, "795": 708, "796": 708, "797": 708, "798": 708, "799": 708, "801": 708, "802": 708, "803": 708, "805": 708, "806": 708, "807": 708, "808": 708, "809": 708, "990": 708, "991": 708, "992": 708, "993": 708, "995": 708, "997": [708, 712], "998": 708, "isfortran": 708, "fortran_arr": 708, "asfortranarrai": 708, "164": 708, "todlpack": 708, "ecosystem": [708, 712], "isn": 708, "matur": 708, "hundr": 708, "wouldn": 708, "previous": 708, "new_arr": 708, "19900": 708, "59900": 708, "99900": 708, "139900": 708, "179900": 708, "219900": 708, "259900": 708, "299900": 708, "339900": 708, "379900": 708, "419900": 708, "459900": 708, "499900": 708, "539900": 708, "579900": 708, "619900": 708, "659900": 708, "699900": 708, "739900": 708, "779900": 708, "819900": 708, "859900": 708, "899900": 708, "939900": 708, "979900": 708, "1019900": 708, "1059900": 708, "1099900": 708, "1139900": 708, "1179900": 708, "1219900": 708, "1259900": 708, "1299900": 708, "1339900": 708, "1379900": 708, "1419900": 708, "1459900": 708, "1499900": 708, "1539900": 708, "1579900": 708, "1619900": 708, "1659900": 708, "1699900": 708, "1739900": 708, "1779900": 708, "1819900": 708, "1859900": 708, "1899900": 708, "1939900": 708, "1979900": 708, "seamlessli": 708, "move": [708, 712], "enorm": 708, "sacrif": 708, "cleanli": 708, "cudf_to_cupy_sparse_matrix": 708, "sparseformat": 708, "_sparse_constructor": 708, "csc_matrix": 708, "csr_matrix": 708, "illustr": 708, "nonzero": 708, "arr": [708, 712], "a0": 708, "a4": 708, "a5": 708, "a6": 708, "a7": 708, "a8": 708, "a9": 708, "a10": 708, "a11": 708, "a12": 708, "a13": 708, "a14": 708, "a15": 708, "a16": 708, "a17": 708, "a18": 708, "a19": 708, "202989": 708, "9076": 708, "926605": 708, "80954": 708, "0000": 708, "320443": 708, "741684": 708, "508024": 708, "591632": 708, "346376": 708, "652824": 708, "sparse_data": 708, "621420227270154": 708, "896": 708, "717712022563492": 708, "1664": 708, "367167371489813": 708, "1792": 708, "5658964585626975": 708, "809540352279532": 708, "386": 708, "7452590714637969": 708, "1538": 708, "8425348079004513": 708, "131": 708, "732665200067478": 708, "1795": 708, "3005118158104825": 708, "260": 708, "04646653591863448": 708, "1669": 708, "1307191856356464": 708, "519": 708, "27238293481509": 708, "136": 708, "143595179424447": 708, "264": 708, "665779935767757": 708, "1800": 708, "547436518645823": 708, "1674": 708, "8623706990294109": 708, "1291": 708, "70780668458424": 708, "524": 708, "570873313368912": 708, "780": 708, "666353870894742": 708, "269": 708, "357278506463952": 708, "653": 708, "229357966721713": 708, "783": 708, "362927064062607": 708, "1039": 708, "5570557472765947": 708, "1551": 708, "272746152995159": 708, "1807": 708, "115521839273558": 708, "8441": 708, "764795246819926": 708, "7802": 708, "933264516004423": 708, "9082": 708, "581308226683138": 708, "9086": 708, "776792942993404": 708, "9087": 708, "5267473655777346": 708, "9830": 708, "8438628737768206": 708, "9321": 708, "761567599668648": 708, "9577": 708, "293954083289945": 708, "9707": 708, "69034611304563": 708, "9837": 708, "570526248205145": 708, "9326": 708, "670331240545533": 708, "9968": 708, "761705787569591": 708, "9330": 708, "264240653009161": 708, "9714": 708, "595890506743353": 708, "9204": 708, "9300130927212744": 708, "9332": 708, "196801860777889": 708, "9716": 708, "1735381982273496": 708, "9978": 708, "771024854387658": 708, "9341": 708, "976493873051016": 708, "9853": 708, "119826927629443": 708, "9470": 708, "907863082673388": 708, "9854": 708, "6914053055425695": 708, "9215": 708, "9012276893126736": 708, "9471": 708, "9940252733507426": 708, "9983": 708, "258659197290017": 708, "orchestr": 709, "cohes": 709, "ingest": 709, "decent": 709, "dayofweek": 709, "expens": 709, "cudf_df": 709, "persist": 709, "visual": 709, "comprehens": 709, "track": 709, "certainli": 709, "slight": 709, "inconsist": 709, "tracker": 709, "report": [709, 717], "reus": 709, "newer": 709, "mislead": [709, 710], "frustrat": 709, "apolog": 709, "uint32": [710, 714], "durat": 710, "decimal32dtyp": 710, "decimal64dtyp": 710, "decimal128dtyp": 710, "023": 710, "max_precis": 710, "decimal128": [710, 714], "psr": 710, "pq": 710, "exclus": 711, "nuisanc": 711, "gb1": 711, "gb2": 711, "gb3": 711, "extern": 711, "penalti": 711, "disambigu": 711, "ok": 711, "corr": 711, "866025": 711, "idxmin": 711, "idxmax": 711, "nuniqu": 711, "nth": 711, "cov": 711, "randomdata": 712, "box": 712, "broader": 712, "pydata": [712, 713], "varieti": 712, "devicendarrai": 712, "offer": 712, "const": 712, "unari": [712, 717], "capabl": 712, "singleton": 712, "f_null_sensit": 712, "experiment": [712, 714], "channel": 712, "restart": 712, "string_udfs_en": 712, "_string_udfs_en": 712, "some_str": 712, "__contains__": 712, "grid": 712, "in_col": 712, "out_col": 712, "guard": 712, "cuda_array_interfac": 712, "963": 712, "9630": 712, "977": 712, "1026": 712, "980": 712, "9770": 712, "1048": 712, "1019": 712, "10480": 712, "1078": 712, "960": 712, "985": 712, "10780": 712, "979": 712, "982": 712, "1011": 712, "9790": 712, "theoret": 712, "potenti": 712, "spot": 712, "area": 712, "pipelin": 712, "job": 712, "entrypoint": 712, "onto": 712, "fulfil": 712, "ultim": 712, "428571429": 712, "constraint": 712, "str_df": 712, "fairli": 712, "streamlin": 712, "walk": 712, "conditional_add": 712, "heart": 712, "readi": 712, "successfulli": 712, "pessimist": 712, "explor": 712, "gpu_add": 712, "matter": 712, "1968": 712, "1961": 712, "propog": 712, "slide": 712, "answer": 712, "stock": 712, "mathemat": 712, "example_func": 712, "65": 712, "56": 712, "549834435": 712, "615773106": 712, "681145748": 712, "745966692": 712, "810249676": 712, "874007874": 712, "937253933": 712, "apply_group": 712, "drawn": 712, "691674": 712, "dan": 712, "958380": 712, "480099": 712, "729580": 712, "473370": 712, "xavier": 712, "767454": 712, "067479": 712, "380205": 712, "970850": 712, "sarah": 712, "342905": 712, "rolling_avg_": 712, "rolling_avg": 712, "win_siz": 712, "801430": 712, "632337": 712, "081887": 712, "933157": 712, "quinn": 712, "420826": 712, "184805": 712, "702013": 712, "837494": 712, "wendi": 712, "057540": 712, "401733": 712, "913899": 712, "ursula": 712, "466252": 712, "009502": 712, "725581": 712, "405245": 712, "271319": 712, "multiply_by_5": 712, "empty_lik": 712, "nondecim": 712, "outlin": 712, "github": 712, "properli": 712, "lot": 712, "hopefulli": 712, "feel": 712, "applymap": 713, "histogram": 713, "tip": 713, "magnum": 713, "gpudirect": 713, "integr": 713, "nvcomp": 713, "interweav": 713, "writer\u00b9": 714, "reader\u00b9": 714, "uint16": 714, "decimal32": 714, "decimal64": 714, "\u00b9": 714, "gd": 714, "dma": 714, "bounc": 714, "sdk": 714, "download": 714, "toolkit": 714, "libcudf_cufile_polici": 714, "kvikio": 714, "rapidsai": 714, "read_avro": 714, "libcudf_cufile_thread_count": 714, "libcudf_cufile_slice_s": 714, "4mb": 714, "libcudf_nvcomp_polici": 714, "deem": 714, "whenev": 714, "deflat": 714, "mind": 715, "20120101": 715, "cumprod": 715, "prod": 715, "wish": 715, "dff": 715, "randn": 715, "432523": 715, "177887": 715, "125914": 715, "541780": 715, "249659": 715, "636440": 715, "379773": 715, "660007": 715, "908230": 715, "060509": 715, "263621": 715, "709253": 715, "729286": 715, "201314": 715, "505672": 715, "449698": 715, "084547": 715, "493292": 715, "364418": 715, "024002": 715, "018207": 715, "032154": 715, "689010": 715, "490282": 715, "193210": 715, "103803": 715, "1182": 715, "silenc": 715, "dot": 715, "567739626": 715, "492504193": 715, "404456047": 715, "709407615": 715, "237160231": 715, "457734289": 715, "525516259": 715, "092308668": 715, "398226112": 715, "959693026": 715, "df00": 715, "492504": 715, "404456": 715, "709408": 715, "237160": 715, "457734": 715, "525516": 715, "092309": 715, "398226": 715, "959693": 715, "behaviour": 717, "resid": 717, "extrem": 717, "poor": 717, "vast": 717, "accomplish": 717, "742": 717, "694": 717, "459": 717, "525": 717, "442": 717, "363": 717, "666": 717, "643": 717, "631": 717, "906": 717, "640": 717, "impact": 717, "compatibilti": 717, "impos": 717}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [184, 0, 1, "", "DatetimeIndex"], [205, 0, 1, "", "Float64Index"], [206, 0, 1, "", "Grouper"], [207, 0, 1, "", "Index"], [257, 0, 1, "", "Int64Index"], [258, 0, 1, "", "IntervalIndex"], [262, 0, 1, "", "MultiIndex"], [275, 0, 1, "", "RangeIndex"], [276, 0, 1, "", "Series"], [450, 0, 1, "", "TimedeltaIndex"], [459, 0, 1, "", "UInt64Index"], [460, 3, 1, "", "concat"], [658, 3, 1, "", "cut"], [659, 3, 1, "", "describe_option"], [660, 3, 1, "", "from_dlpack"], [661, 3, 1, "", "get_dummies"], [662, 3, 1, "", "get_option"], [667, 3, 1, "", "melt"], [668, 3, 1, "", "pivot"], [669, 3, 1, "", "read_avro"], [670, 3, 1, "", "read_csv"], [671, 3, 1, "", "read_feather"], [672, 3, 1, "", "read_hdf"], [673, 3, 1, "", "read_json"], [674, 3, 1, "", "read_orc"], [675, 3, 1, "", "read_parquet"], [676, 3, 1, "", "read_text"], [677, 3, 1, "", "set_option"], [682, 3, 1, "", "to_datetime"], [683, 3, 1, "", "to_numeric"], [684, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pop"], [114, 2, 1, "", "pow"], [115, 2, 1, "", "prod"], [116, 2, 1, "", "product"], [117, 2, 1, "", "quantile"], [118, 2, 1, "", "quantiles"], [119, 2, 1, "", "query"], [120, 2, 1, "", "radd"], [121, 2, 1, "", "rank"], [122, 2, 1, "", "rdiv"], [123, 2, 1, "", "reindex"], [124, 2, 1, "", "rename"], [125, 2, 1, "", "repeat"], [126, 2, 1, "", "replace"], [127, 2, 1, "", "resample"], [128, 2, 1, "", "reset_index"], [129, 2, 1, "", "rfloordiv"], [130, 2, 1, "", "rmod"], [131, 2, 1, "", "rmul"], [132, 2, 1, "", "rolling"], [133, 2, 1, "", "round"], [134, 2, 1, "", "rpow"], [135, 2, 1, "", "rsub"], [136, 2, 1, "", "rtruediv"], [137, 2, 1, "", "sample"], [138, 2, 1, "", "scale"], [139, 2, 1, "", "scatter_by_map"], [140, 2, 1, "", "searchsorted"], [141, 2, 1, "", "select_dtypes"], [142, 2, 1, "", "serialize"], [143, 2, 1, "", "set_index"], [144, 1, 1, "", "shape"], [145, 2, 1, "", "shift"], [146, 1, 1, "", "size"], [147, 2, 1, "", "skew"], [148, 2, 1, "", "sort_index"], [149, 2, 1, "", "sort_values"], [150, 2, 1, "", "stack"], [151, 2, 1, "", "std"], [152, 2, 1, "", "sub"], [153, 2, 1, "", "subtract"], [154, 2, 1, "", "sum"], [155, 2, 1, "", "sum_of_squares"], [156, 2, 1, "", "swaplevel"], [157, 2, 1, "", "tail"], [158, 2, 1, "", "take"], [159, 2, 1, "", "tile"], [160, 2, 1, "", "to_arrow"], [161, 2, 1, "", "to_csv"], [162, 2, 1, "", "to_cupy"], [163, 2, 1, "", "to_dict"], [164, 2, 1, "", "to_dlpack"], [165, 2, 1, "", "to_feather"], [166, 2, 1, "", "to_hdf"], [167, 2, 1, "", "to_json"], [168, 2, 1, "", "to_numpy"], [169, 2, 1, "", "to_orc"], [170, 2, 1, "", "to_pandas"], [171, 2, 1, "", "to_parquet"], [172, 2, 1, "", "to_records"], [173, 2, 1, "", "to_string"], [174, 2, 1, "", "to_struct"], [175, 2, 1, "", "transpose"], [176, 2, 1, "", "truediv"], [177, 2, 1, "", "unstack"], [178, 2, 1, "", "update"], [179, 2, 1, "", "value_counts"], [180, 1, 1, "", "values"], [181, 1, 1, "", "values_host"], [182, 2, 1, "", "var"], [183, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[185, 2, 1, "", "ceil"], [186, 1, 1, "", "day"], [187, 1, 1, "", "day_of_year"], [188, 1, 1, "", "dayofweek"], [189, 1, 1, "", "dayofyear"], [190, 2, 1, "", "floor"], [191, 1, 1, "", "hour"], [192, 1, 1, "", "is_leap_year"], [193, 2, 1, "", "isocalendar"], [194, 1, 1, "", "microsecond"], [195, 1, 1, "", "minute"], [196, 1, 1, "", "month"], [197, 1, 1, "", "nanosecond"], [198, 1, 1, "", "quarter"], [199, 2, 1, "", "round"], [200, 1, 1, "", "second"], [201, 2, 1, "", "to_frame"], [202, 2, 1, "", "to_series"], [203, 1, 1, "", "weekday"], [204, 1, 1, "", "year"]], "cudf.Grouper": [[206, 2, 1, "", "__init__"]], "cudf.Index": [[208, 2, 1, "", "any"], [209, 2, 1, "", "append"], [210, 2, 1, "", "copy"], [211, 2, 1, "", "deserialize"], [212, 2, 1, "", "device_deserialize"], [213, 2, 1, "", "device_serialize"], [214, 2, 1, "", "difference"], [215, 2, 1, "", "drop_duplicates"], [216, 2, 1, "", "dropna"], [217, 2, 1, "", "fillna"], [218, 2, 1, "", "from_arrow"], [219, 2, 1, "", "from_pandas"], [220, 2, 1, "", "get_level_values"], [221, 2, 1, "", "get_loc"], [222, 2, 1, "", "get_slice_bound"], [223, 1, 1, "", "has_duplicates"], [224, 2, 1, "", "host_deserialize"], [225, 2, 1, "", "host_serialize"], [226, 2, 1, "", "intersection"], [227, 2, 1, "", "is_boolean"], [228, 2, 1, "", "is_categorical"], [229, 2, 1, "", "is_floating"], [230, 2, 1, "", "is_integer"], [231, 2, 1, "", "is_interval"], [232, 1, 1, "", "is_monotonic"], [233, 1, 1, "", "is_monotonic_decreasing"], [234, 1, 1, "", "is_monotonic_increasing"], [235, 2, 1, "", "is_numeric"], [236, 2, 1, "", "is_object"], [237, 2, 1, "", "isin"], [238, 2, 1, "", "isna"], [239, 2, 1, "", "join"], [240, 1, 1, "", "names"], [241, 1, 1, "", "nlevels"], [242, 2, 1, "", "notna"], [243, 2, 1, "", "rename"], [244, 2, 1, "", "repeat"], [245, 2, 1, "", "serialize"], [246, 2, 1, "", "set_names"], [247, 1, 1, "", "size"], [248, 2, 1, "", "sort_values"], [249, 2, 1, "", "take"], [250, 2, 1, "", "to_dlpack"], [251, 2, 1, "", "to_frame"], [252, 2, 1, "", "to_pandas"], [253, 2, 1, "", "to_series"], [254, 2, 1, "", "union"], [255, 2, 1, "", "unique"], [256, 1, 1, "", "values"]], "cudf.IntervalIndex": [[258, 2, 1, "", "__init__"], [259, 2, 1, "", "from_breaks"], [260, 2, 1, "", "get_loc"], [261, 1, 1, "", "values"]], "cudf.MultiIndex": [[263, 1, 1, "", "codes"], [264, 2, 1, "", "droplevel"], [265, 2, 1, "", "from_arrow"], [266, 2, 1, "", "from_frame"], [267, 2, 1, "", "from_product"], [268, 2, 1, "", "from_tuples"], [269, 2, 1, "", "get_level_values"], [270, 2, 1, "", "get_loc"], [271, 1, 1, "", "levels"], [272, 1, 1, "", "names"], [273, 1, 1, "", "nlevels"], [274, 2, 1, "", "to_frame"]], "cudf.Series": [[277, 1, 1, "", "T"], [278, 2, 1, "", "__array__"], [279, 2, 1, "", "__iter__"], [280, 2, 1, "", "abs"], [281, 2, 1, "", "add"], [282, 2, 1, "", "add_prefix"], [283, 2, 1, "", "add_suffix"], [284, 2, 1, "", "all"], [285, 2, 1, "", "any"], [286, 2, 1, "", "append"], [287, 2, 1, "", "apply"], [288, 2, 1, "", "argsort"], [289, 2, 1, "", "astype"], [290, 2, 1, "", "autocorr"], [291, 1, 1, "", "axes"], [292, 2, 1, "", "backfill"], [293, 2, 1, "", "between"], [294, 2, 1, "", "bfill"], [295, 1, 1, "", "cat"], [296, 2, 1, "", "clip"], [297, 2, 1, "", "copy"], [298, 2, 1, "", "corr"], [299, 2, 1, "", "count"], [300, 2, 1, "", "cov"], [301, 2, 1, "", "cummax"], [302, 2, 1, "", "cummin"], [303, 2, 1, "", "cumprod"], [304, 2, 1, "", "cumsum"], [305, 1, 1, "", "data"], [306, 2, 1, "", "describe"], [307, 2, 1, "", "deserialize"], [308, 2, 1, "", "device_deserialize"], [309, 2, 1, "", "device_serialize"], [310, 2, 1, "", "diff"], [311, 2, 1, "", "digitize"], [312, 2, 1, "", "div"], [313, 2, 1, "", "divide"], [314, 2, 1, "", "dot"], [315, 2, 1, "", "drop"], [316, 2, 1, "", "drop_duplicates"], [317, 2, 1, "", "dropna"], [318, 1, 1, "", "dt"], [319, 1, 1, "", "dtype"], [320, 1, 1, "", "empty"], [321, 2, 1, "", "eq"], [322, 2, 1, "", "equals"], [323, 2, 1, "", "explode"], [324, 2, 1, "", "factorize"], [325, 2, 1, "", "ffill"], [326, 2, 1, "", "fillna"], [327, 2, 1, "", "first"], [328, 2, 1, "", "floordiv"], [329, 2, 1, "", "from_arrow"], [330, 2, 1, "", "from_categorical"], [331, 2, 1, "", "from_masked_array"], [332, 2, 1, "", "from_pandas"], [333, 2, 1, "", "ge"], [334, 2, 1, "", "groupby"], [335, 2, 1, "", "gt"], [336, 1, 1, "", "has_nulls"], [337, 2, 1, "", "hash_values"], [338, 2, 1, "", "head"], [339, 2, 1, "", "host_deserialize"], [340, 2, 1, "", "host_serialize"], [341, 1, 1, "", "iloc"], [342, 1, 1, "", "index"], [343, 2, 1, "", "interpolate"], [344, 1, 1, "", "is_monotonic"], [345, 1, 1, "", "is_monotonic_decreasing"], [346, 1, 1, "", "is_monotonic_increasing"], [347, 1, 1, "", "is_unique"], [348, 2, 1, "", "isin"], [349, 2, 1, "", "isna"], [350, 2, 1, "", "isnull"], [351, 2, 1, "", "items"], [352, 2, 1, "", "iteritems"], [353, 2, 1, "", "keys"], [354, 2, 1, "", "kurt"], [355, 2, 1, "", "kurtosis"], [356, 2, 1, "", "last"], [357, 2, 1, "", "le"], [358, 1, 1, "", "list"], [359, 1, 1, "", "loc"], [360, 2, 1, "", "lt"], [361, 2, 1, "", "map"], [362, 2, 1, "", "mask"], [363, 2, 1, "", "max"], [364, 2, 1, "", "mean"], [365, 2, 1, "", "median"], [366, 2, 1, "", "memory_usage"], [367, 2, 1, "", "min"], [368, 2, 1, "", "mod"], [369, 2, 1, "", "mode"], [370, 2, 1, "", "mul"], [371, 2, 1, "", "multiply"], [372, 1, 1, "", "name"], [373, 2, 1, "", "nans_to_nulls"], [374, 1, 1, "", "ndim"], [375, 2, 1, "", "ne"], [376, 2, 1, "", "nlargest"], [377, 2, 1, "", "notna"], [378, 2, 1, "", "notnull"], [379, 2, 1, "", "nsmallest"], [380, 1, 1, "", "null_count"], [381, 1, 1, "", "nullable"], [382, 1, 1, "", "nullmask"], [383, 2, 1, "", "nunique"], [384, 2, 1, "", "pad"], [385, 2, 1, "", "pct_change"], [386, 2, 1, "", "pipe"], [387, 2, 1, "", "pow"], [388, 2, 1, "", "prod"], [389, 2, 1, "", "product"], [390, 2, 1, "", "quantile"], [391, 2, 1, "", "radd"], [392, 2, 1, "", "rank"], [393, 2, 1, "", "rdiv"], [394, 2, 1, "", "reindex"], [395, 2, 1, "", "rename"], [396, 2, 1, "", "repeat"], [397, 2, 1, "", "replace"], [398, 2, 1, "", "resample"], [399, 2, 1, "", "reset_index"], [400, 2, 1, "", "rfloordiv"], [401, 2, 1, "", "rmod"], [402, 2, 1, "", "rmul"], [403, 2, 1, "", "rolling"], [404, 2, 1, "", "round"], [405, 2, 1, "", "rpow"], [406, 2, 1, "", "rsub"], [407, 2, 1, "", "rtruediv"], [408, 2, 1, "", "sample"], [409, 2, 1, "", "scale"], [410, 2, 1, "", "searchsorted"], [411, 2, 1, "", "serialize"], [412, 1, 1, "", "shape"], [413, 2, 1, "", "shift"], [414, 1, 1, "", "size"], [415, 2, 1, "", "skew"], [416, 2, 1, "", "sort_index"], [417, 2, 1, "", "sort_values"], [418, 2, 1, "", "std"], [419, 1, 1, "", "str"], [420, 1, 1, "", "struct"], [421, 2, 1, "", "sub"], [422, 2, 1, "", "subtract"], [423, 2, 1, "", "sum"], [424, 2, 1, "", "sum_of_squares"], [425, 2, 1, "", "tail"], [426, 2, 1, "", "take"], [427, 2, 1, "", "tile"], [428, 2, 1, "", "to_arrow"], [429, 2, 1, "", "to_cupy"], [430, 2, 1, "", "to_dict"], [431, 2, 1, "", "to_dlpack"], [432, 2, 1, "", "to_frame"], [433, 2, 1, "", "to_hdf"], [434, 2, 1, "", "to_json"], [435, 2, 1, "", "to_list"], [436, 2, 1, "", "to_numpy"], [437, 2, 1, "", "to_pandas"], [438, 2, 1, "", "to_string"], [439, 2, 1, "", "tolist"], [440, 2, 1, "", "transpose"], [441, 2, 1, "", "truediv"], [442, 2, 1, "", "unique"], [443, 2, 1, "", "update"], [444, 1, 1, "", "valid_count"], [445, 2, 1, "", "value_counts"], [446, 1, 1, "", "values"], [447, 1, 1, "", "values_host"], [448, 2, 1, "", "var"], [449, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[451, 1, 1, "", "components"], [452, 1, 1, "", "days"], [453, 1, 1, "", "inferred_freq"], [454, 1, 1, "", "microseconds"], [455, 1, 1, "", "nanoseconds"], [456, 1, 1, "", "seconds"], [457, 2, 1, "", "to_frame"], [458, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[461, 2, 1, "", "add_categories"], [462, 2, 1, "", "as_ordered"], [463, 2, 1, "", "as_unordered"], [464, 1, 1, "", "categories"], [465, 1, 1, "", "codes"], [466, 1, 1, "", "ordered"], [467, 2, 1, "", "remove_categories"], [468, 2, 1, "", "reorder_categories"], [469, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[470, 2, 1, "", "astype"], [471, 2, 1, "", "concat"], [472, 2, 1, "", "contains"], [473, 2, 1, "", "get"], [474, 2, 1, "", "index"], [475, 1, 1, "", "leaves"], [476, 2, 1, "", "len"], [477, 2, 1, "", "sort_values"], [478, 2, 1, "", "take"], [479, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[480, 2, 1, "", "byte_count"], [481, 2, 1, "", "capitalize"], [482, 2, 1, "", "cat"], [483, 2, 1, "", "center"], [484, 2, 1, "", "character_ngrams"], [485, 2, 1, "", "character_tokenize"], [486, 2, 1, "", "code_points"], [487, 2, 1, "", "contains"], [488, 2, 1, "", "count"], [489, 2, 1, "", "detokenize"], [490, 2, 1, "", "edit_distance"], [491, 2, 1, "", "edit_distance_matrix"], [492, 2, 1, "", "endswith"], [493, 2, 1, "", "extract"], [494, 2, 1, "", "filter_alphanum"], [495, 2, 1, "", "filter_characters"], [496, 2, 1, "", "filter_tokens"], [497, 2, 1, "", "find"], [498, 2, 1, "", "find_multiple"], [499, 2, 1, "", "findall"], [500, 2, 1, "", "get"], [501, 2, 1, "", "get_json_object"], [502, 2, 1, "", "hex_to_int"], [503, 2, 1, "", "htoi"], [504, 2, 1, "", "index"], [505, 2, 1, "", "insert"], [506, 2, 1, "", "ip2int"], [507, 2, 1, "", "ip_to_int"], [508, 2, 1, "", "is_consonant"], [509, 2, 1, "", "is_vowel"], [510, 2, 1, "", "isalnum"], [511, 2, 1, "", "isalpha"], [512, 2, 1, "", "isdecimal"], [513, 2, 1, "", "isdigit"], [514, 2, 1, "", "isempty"], [515, 2, 1, "", "isfloat"], [516, 2, 1, "", "ishex"], [517, 2, 1, "", "isinteger"], [518, 2, 1, "", "isipv4"], [519, 2, 1, "", "islower"], [520, 2, 1, "", "isnumeric"], [521, 2, 1, "", "isspace"], [522, 2, 1, "", "istimestamp"], [523, 2, 1, "", "istitle"], [524, 2, 1, "", "isupper"], [525, 2, 1, "", "join"], [526, 2, 1, "", "len"], [527, 2, 1, "", "like"], [528, 2, 1, "", "ljust"], [529, 2, 1, "", "lower"], [530, 2, 1, "", "lstrip"], [531, 2, 1, "", "match"], [532, 2, 1, "", "ngrams"], [533, 2, 1, "", "ngrams_tokenize"], [534, 2, 1, "", "normalize_characters"], [535, 2, 1, "", "normalize_spaces"], [536, 2, 1, "", "pad"], [537, 2, 1, "", "partition"], [538, 2, 1, "", "porter_stemmer_measure"], [539, 2, 1, "", "repeat"], [540, 2, 1, "", "replace"], [541, 2, 1, "", "replace_tokens"], [542, 2, 1, "", "replace_with_backrefs"], [543, 2, 1, "", "rfind"], [544, 2, 1, "", "rindex"], [545, 2, 1, "", "rjust"], [546, 2, 1, "", "rpartition"], [547, 2, 1, "", "rsplit"], [548, 2, 1, "", "rstrip"], [549, 2, 1, "", "slice"], [550, 2, 1, "", "slice_from"], [551, 2, 1, "", "slice_replace"], [552, 2, 1, "", "split"], [553, 2, 1, "", "startswith"], [554, 2, 1, "", "strip"], [555, 2, 1, "", "swapcase"], [556, 2, 1, "", "title"], [557, 2, 1, "", "token_count"], [558, 2, 1, "", "tokenize"], [559, 2, 1, "", "translate"], [560, 2, 1, "", "upper"], [561, 2, 1, "", "url_decode"], [562, 2, 1, "", "url_encode"], [563, 2, 1, "", "wrap"], [564, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[565, 2, 1, "", "explode"], [566, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[567, 2, 1, "", "__iter__"], [568, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[569, 2, 1, "", "aggregate"], [570, 2, 1, "", "backfill"], [571, 2, 1, "", "bfill"], [572, 2, 1, "", "count"], [573, 2, 1, "", "cumcount"], [574, 2, 1, "", "cummax"], [575, 2, 1, "", "cummin"], [576, 2, 1, "", "cumsum"], [577, 2, 1, "", "describe"], [578, 2, 1, "", "diff"], [579, 2, 1, "", "ffill"], [580, 2, 1, "", "fillna"], [581, 2, 1, "", "idxmax"], [582, 2, 1, "", "idxmin"], [583, 2, 1, "", "nunique"], [584, 2, 1, "", "pad"], [585, 2, 1, "", "quantile"], [586, 2, 1, "", "shift"], [587, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[588, 2, 1, "", "agg"], [589, 2, 1, "", "apply"], [590, 2, 1, "", "backfill"], [591, 2, 1, "", "bfill"], [592, 2, 1, "", "corr"], [593, 2, 1, "", "count"], [594, 2, 1, "", "cov"], [595, 2, 1, "", "cumcount"], [596, 2, 1, "", "cummax"], [597, 2, 1, "", "cummin"], [598, 2, 1, "", "cumsum"], [599, 2, 1, "", "ffill"], [600, 2, 1, "", "max"], [601, 2, 1, "", "mean"], [602, 2, 1, "", "median"], [603, 2, 1, "", "min"], [604, 2, 1, "", "ngroup"], [605, 2, 1, "", "nth"], [606, 2, 1, "", "pad"], [607, 2, 1, "", "pipe"], [608, 2, 1, "", "prod"], [609, 2, 1, "", "size"], [610, 2, 1, "", "std"], [611, 2, 1, "", "sum"], [612, 2, 1, "", "transform"], [613, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[614, 2, 1, "", "aggregate"], [615, 2, 1, "", "nunique"], [616, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[617, 2, 1, "", "ceil"], [618, 1, 1, "", "day"], [619, 1, 1, "", "day_of_year"], [620, 1, 1, "", "dayofweek"], [621, 1, 1, "", "dayofyear"], [622, 1, 1, "", "days_in_month"], [623, 2, 1, "", "floor"], [624, 1, 1, "", "hour"], [625, 1, 1, "", "is_leap_year"], [626, 1, 1, "", "is_month_end"], [627, 1, 1, "", "is_month_start"], [628, 1, 1, "", "is_quarter_end"], [629, 1, 1, "", "is_quarter_start"], [630, 1, 1, "", "is_year_end"], [631, 1, 1, "", "is_year_start"], [632, 2, 1, "", "isocalendar"], [633, 1, 1, "", "microsecond"], [634, 1, 1, "", "minute"], [635, 1, 1, "", "month"], [636, 1, 1, "", "nanosecond"], [637, 1, 1, "", "quarter"], [638, 2, 1, "", "round"], [639, 1, 1, "", "second"], [640, 2, 1, "", "strftime"], [641, 1, 1, "", "weekday"], [642, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[643, 1, 1, "", "components"], [644, 1, 1, "", "days"], [645, 1, 1, "", "microseconds"], [646, 1, 1, "", "nanoseconds"], [647, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[648, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[649, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[650, 2, 1, "", "apply"], [651, 2, 1, "", "count"], [652, 2, 1, "", "max"], [653, 2, 1, "", "mean"], [654, 2, 1, "", "min"], [655, 2, 1, "", "std"], [656, 2, 1, "", "sum"], [657, 2, 1, "", "var"]], "cudf.io.parquet": [[663, 0, 1, "", "ParquetDatasetWriter"], [666, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[664, 2, 1, "", "close"], [665, 2, 1, "", "write_table"]], "cudf.testing.testing": [[678, 3, 1, "", "assert_column_equal"], [679, 3, 1, "", "assert_frame_equal"], [680, 3, 1, "", "assert_index_equal"], [681, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 699, 701, 705, 706, 708, 709, 712, 715, 717], "categoricalindex": [0, 1, 2, 3, 690], "categori": [1, 464], "code": [2, 263, 465, 700], "equal": [3, 50, 322], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 685, 708, 712], "t": [5, 277], "__iter__": [6, 279, 567], "ab": [7, 280], "add": [8, 281], "add_prefix": [9, 282], "add_suffix": [10, 283], "agg": [11, 588], "all": [12, 284, 703], "ani": [13, 208, 285], "append": [14, 209, 286], "appli": [15, 287, 589, 650, 711, 712, 717], "apply_chunk": [16, 712], "apply_row": [17, 712], "applymap": [18, 706], "argsort": [19, 288], "assign": 20, "astyp": [21, 289, 470], "ax": [23, 291], "backfil": [24, 292, 570, 590], "bfill": [25, 294, 571, 591], "clip": [26, 296], "column": [27, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 703, 717], "copi": [28, 210, 297], "corr": [29, 298, 592], "count": [30, 299, 488, 572, 593, 651], "cov": [31, 300, 594], "cummax": [32, 301, 574, 596], "cummin": [33, 302, 575, 597], "cumprod": [34, 303], "cumsum": [35, 304, 576, 598], "describ": [36, 306, 577], "deseri": [37, 211, 307], "device_deseri": [38, 212, 308], "device_seri": [39, 213, 309], "diff": [40, 310, 578], "div": [41, 312], "divid": [42, 313], "dot": [43, 314], "drop": [44, 315, 715], "drop_dupl": [45, 215, 316], "dropna": [46, 216, 317, 715], "dtype": [47, 319, 714, 715], "empti": [48, 320], "eq": [49, 321], "eval": 51, "explod": [52, 323, 565], "ffill": [53, 325, 579, 599], "fillna": [54, 217, 326, 580, 715], "first": [55, 327], "floordiv": [56, 328], "from_arrow": [57, 218, 265, 329], "from_panda": [58, 219, 332], "from_record": 59, "ge": [60, 333], "groupbi": [61, 334, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 685, 688, 694, 711, 712, 715], "gt": [62, 335], "hash_valu": [63, 337], "head": [64, 338], "host_deseri": [65, 224, 339], "host_seri": [66, 225, 340], "iat": 67, "iloc": [68, 341], "index": [69, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 342, 474, 504, 685, 688, 690, 694, 703, 706, 711], "info": 70, "insert": [71, 505, 715], "interleave_column": 72, "interpol": [73, 343], "isin": [74, 237, 348], "isna": [75, 238, 349], "isnul": [76, 350], "item": [77, 351], "iterrow": 78, "itertupl": 79, "join": [80, 239, 525, 685, 690, 694, 706], "kei": [81, 353], "kurt": [82, 354], "kurtosi": [83, 355], "last": [84, 356], "le": [85, 357], "loc": [86, 359], "lt": [87, 360], "mask": [88, 362], "max": [89, 363, 600, 652], "mean": [90, 364, 601, 653], "median": [91, 365, 602], "melt": [92, 667], "memory_usag": [93, 366], "merg": [94, 685, 694], "min": [95, 367, 603, 654], "mod": [96, 368], "mode": [97, 369], "mul": [98, 370], "multipli": [99, 371], "nans_to_nul": [100, 373], "ndim": [101, 374], "ne": [102, 375], "nlargest": [103, 376], "notna": [104, 242, 377], "notnul": [105, 378], "nsmallest": [106, 379], "nuniqu": [107, 383, 583, 615], "pad": [108, 384, 536, 584, 606], "partition_by_hash": 109, "pct_chang": [110, 385], "pipe": [111, 386, 607], "pivot": [112, 668], "pop": 113, "pow": [114, 387], "prod": [115, 388, 608], "product": [116, 389, 715], "quantil": [117, 118, 390, 585], "panda": [117, 123, 183, 270, 394, 449, 580, 589, 699, 700, 701, 706, 707, 717], "compat": [117, 123, 183, 270, 394, 449, 580, 589, 690, 700, 707], "note": [117, 123, 183, 270, 394, 449, 580, 589, 707, 710], "queri": 119, "radd": [120, 391], "rank": [121, 392], "rdiv": [122, 393], "reindex": [123, 394, 685, 694], "renam": [124, 243, 395], "repeat": [125, 244, 396, 539], "replac": [126, 397, 540, 715], "resampl": [127, 398], "reset_index": [128, 399], "rfloordiv": [129, 400], "rmod": [130, 401], "rmul": [131, 402], "roll": [132, 403, 650, 651, 652, 653, 654, 655, 656, 657, 698, 711, 712], "round": [133, 199, 404, 638], "rpow": [134, 405], "rsub": [135, 406], "rtruediv": [136, 407], "sampl": [137, 408], "scale": [138, 409], "scatter_by_map": 139, "searchsort": [140, 410], "select_dtyp": 141, "serial": [142, 245, 411, 685, 694], "set_index": 143, "shape": [144, 412], "shift": [145, 413, 586], "size": [146, 247, 414, 587, 609], "skew": [147, 415], "sort_index": [148, 416], "sort_valu": [149, 248, 417, 477], "stack": 150, "std": [151, 418, 610, 655], "sub": [152, 421], "subtract": [153, 422], "sum": [154, 423, 611, 656, 715], "sum_of_squar": [155, 424], "swaplevel": 156, "tail": [157, 425], "take": [158, 249, 426, 478], "tile": [159, 427], "to_arrow": [160, 428], "to_csv": 161, "to_cupi": [162, 429], "to_dict": [163, 430], "to_dlpack": [164, 250, 431], "to_feath": 165, "to_hdf": [166, 433], "to_json": [167, 434], "to_numpi": [168, 436], "to_orc": 169, "to_panda": [170, 252, 437], "to_parquet": 171, "to_record": 172, "to_str": [173, 438], "to_struct": 174, "transpos": [175, 440, 685, 706], "truediv": [176, 441], "unstack": [177, 684], "updat": [178, 443], "value_count": [179, 445], "valu": [180, 256, 261, 446, 690, 715, 717], "values_host": [181, 447], "var": [182, 448, 613, 657], "where": [183, 449], "datetimeindex": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 690], "ceil": [185, 617], "dai": [186, 452, 618, 644], "day_of_year": [187, 619], "dayofweek": [188, 620], "dayofyear": [189, 621], "floor": [190, 623], "hour": [191, 624], "is_leap_year": [192, 625], "isocalendar": [193, 632], "microsecond": [194, 454, 633, 645], "minut": [195, 634, 706], "month": [196, 635], "nanosecond": [197, 455, 636, 646], "quarter": [198, 637], "second": [200, 456, 639, 647], "to_fram": [201, 251, 274, 432, 457], "to_seri": [202, 253, 458], "weekdai": [203, 641], "year": [204, 642], "float64index": 205, "grouper": [206, 711], "differ": [214, 714], "get_level_valu": [220, 269], "get_loc": [221, 260, 270], "get_slice_bound": 222, "has_dupl": 223, "intersect": 226, "is_boolean": 227, "is_categor": 228, "is_float": 229, "is_integ": 230, "is_interv": 231, "is_monoton": [232, 344], "is_monotonic_decreas": [233, 345], "is_monotonic_increas": [234, 346], "is_numer": 235, "is_object": 236, "name": [240, 272, 372, 700, 717], "nlevel": [241, 273], "set_nam": 246, "union": [254, 699], "uniqu": [255, 442, 479, 616], "int64index": 257, "intervalindex": [258, 259, 260, 261, 690], "from_break": 259, "multiindex": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 690, 706], "droplevel": 264, "from_fram": 266, "from_product": 267, "from_tupl": 268, "level": [271, 686, 711, 712], "rangeindex": 275, "seri": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 685, 694, 706, 708, 712], "__array__": 278, "autocorr": 290, "between": [293, 708], "cat": [295, 482], "data": [305, 685, 686, 694, 703, 706, 710, 712, 715, 717], "digit": 311, "dt": 318, "factor": 324, "from_categor": 330, "from_masked_arrai": 331, "has_nul": 336, "is_uniqu": 347, "iteritem": 352, "list": [358, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 692, 694, 710], "map": 361, "null_count": 380, "nullabl": [381, 712], "nullmask": 382, "str": 419, "struct": [420, 565, 566, 694, 696, 710], "to_list": 435, "tolist": 439, "valid_count": 444, "timedeltaindex": [450, 451, 452, 453, 454, 455, 456, 457, 458, 690], "compon": [451, 643, 690], "inferred_freq": 453, "uint64index": 459, "concat": [460, 471, 706], "core": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657], "categor": [461, 462, 463, 464, 465, 466, 467, 468, 469, 690, 694, 706], "categoricalaccessor": [461, 462, 463, 464, 465, 466, 467, 468, 469], "add_categori": 461, "as_ord": 462, "as_unord": 463, "order": [466, 717], "remove_categori": 467, "reorder_categori": 468, "set_categori": 469, "listmethod": [470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "contain": [472, 487], "get": [473, 500, 706], "leav": 475, "len": [476, 526], "string": [480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 694, 695, 706, 712, 715], "stringmethod": [480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564], "byte_count": 480, "capit": 481, "center": 483, "character_ngram": 484, "character_token": 485, "code_point": 486, "detoken": 489, "edit_dist": 490, "edit_distance_matrix": 491, "endswith": 492, "extract": 493, "filter_alphanum": 494, "filter_charact": 495, "filter_token": 496, "find": 497, "find_multipl": 498, "findal": 499, "get_json_object": 501, "hex_to_int": 502, "htoi": 503, "ip2int": 506, "ip_to_int": 507, "is_conson": 508, "is_vowel": 509, "isalnum": 510, "isalpha": 511, "isdecim": 512, "isdigit": 513, "isempti": 514, "isfloat": 515, "ishex": 516, "isinteg": 517, "isipv4": 518, "islow": 519, "isnumer": 520, "isspac": 521, "istimestamp": 522, "istitl": 523, "isupp": 524, "like": 527, "ljust": 528, "lower": [529, 712], "lstrip": 530, "match": 531, "ngram": 532, "ngrams_token": 533, "normalize_charact": 534, "normalize_spac": 535, "partit": 537, "porter_stemmer_measur": 538, "replace_token": 541, "replace_with_backref": 542, "rfind": 543, "rindex": 544, "rjust": 545, "rpartit": 546, "rsplit": 547, "rstrip": 548, "slice": 549, "slice_from": 550, "slice_replac": 551, "split": 552, "startswith": 553, "strip": 554, "swapcas": 555, "titl": 556, "token_count": 557, "token": 558, "translat": 559, "upper": 560, "url_decod": 561, "url_encod": 562, "wrap": 563, "zfill": 564, "structmethod": [565, 566], "field": 566, "group": [568, 706, 711], "dataframegroupbi": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "aggreg": [569, 614, 711], "cumcount": [573, 595], "idxmax": 581, "idxmin": 582, "ngroup": 604, "nth": 605, "transform": [612, 711], "seriesgroupbi": [614, 615, 616], "datetimeproperti": [617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642], "days_in_month": 622, "is_month_end": 626, "is_month_start": 627, "is_quarter_end": 628, "is_quarter_start": 629, "is_year_end": 630, "is_year_start": 631, "strftime": 640, "timedeltaproperti": [643, 644, 645, 646, 647], "subword_token": [648, 649], "subwordtoken": [648, 649, 697], "__call__": 649, "window": [650, 651, 652, 653, 654, 655, 656, 657, 685, 694, 698, 711, 712], "cut": 658, "describe_opt": 659, "from_dlpack": 660, "get_dummi": 661, "get_opt": 662, "io": [663, 664, 665, 666, 685, 694, 714], "parquet": [663, 664, 665, 666, 691, 706], "parquetdatasetwrit": [663, 664, 665], "close": 664, "write_t": 665, "read_parquet_metadata": 666, "read_avro": 669, "read_csv": 670, "read_feath": 671, "read_hdf": 672, "read_json": 673, "Not": 673, "gpu": [673, 709], "acceler": 673, "experiment": 673, "featur": 673, "read_orc": 674, "read_parquet": 675, "read_text": 676, "set_opt": 677, "test": [678, 679, 680, 681, 687, 699], "assert_column_equ": 678, "assert_frame_equ": 679, "assert_index_equ": 680, "assert_series_equ": 681, "to_datetim": 682, "to_numer": 683, "constructor": [685, 690, 694, 697], "attribut": [685, 694], "underli": 685, "convers": [685, 686, 690, 694], "iter": [685, 688, 694, 717], "binari": [685, 694], "oper": [685, 690, 694, 706, 711, 717], "function": [685, 686, 687, 688, 694, 698, 712, 717], "applic": [685, 688, 694], "comput": [685, 688, 690, 694, 717], "descript": [685, 688, 694], "stat": [685, 688, 694, 706], "select": [685, 690, 694, 706], "label": [685, 694, 706, 715], "manipul": [685, 686, 694], "miss": [685, 690, 694, 706, 715, 717], "handl": [685, 692, 694, 695, 696, 700, 712], "reshap": [685, 694], "sort": [685, 690, 694], "combin": [685, 690, 694], "compar": [685, 694, 699, 701], "time": [685, 690, 694, 706], "relat": [685, 694], "gener": [686, 687, 715], "top": 686, "deal": 686, "datetimelik": [686, 694], "util": 687, "api": [689, 709], "refer": 689, "document": [689, 701, 705], "object": [690, 706, 710, 711, 715, 717], "properti": [690, 694], "modifi": 690, "memori": 690, "usag": 690, "specif": 690, "set": 690, "numer": [690, 715], "date": 690, "input": [691, 714], "output": [691, 714], "csv": [691, 706], "text": 691, "json": 691, "orc": [691, 706], "hdfstore": 691, "pytabl": 691, "hdf5": 691, "feather": 691, "avro": 691, "option": [693, 704, 716], "accessor": 694, "datetim": [694, 715], "method": [694, 706], "timedelta": 694, "benchmark": 699, "organ": 699, "run": 699, "content": [699, 705], "configur": 699, "write": [699, 701], "parametr": 699, "profil": 699, "advanc": 699, "topic": 699, "understand": 699, "benchmark_with_object": 699, "fixtur": 699, "The": [699, 703, 711], "decor": 699, "contribut": 700, "guid": [700, 702, 713], "directori": 700, "structur": 700, "file": 700, "style": 700, "deprec": 700, "remov": 700, "python": 700, "v": 700, "cython": [700, 703], "except": 700, "libcudf": 700, "docstr": 701, "publish": 701, "page": 701, "build": 701, "requir": 701, "view": [701, 706], "doc": 701, "intern": 701, "develop": [702, 709], "librari": [703, 706], "design": 703, "frame": 703, "layer": 703, "columnaccessor": 703, "type": [703, 710, 714, 717], "buffer": 703, "put": 703, "It": 703, "togeth": 703, "welcom": 705, "": 705, "indic": 705, "tabl": 705, "10": 706, "dask": [706, 709], "what": [706, 709], "ar": 706, "when": 706, "us": [706, 714], "creation": 706, "posit": 706, "boolean": 706, "histogram": 706, "convert": [706, 708], "represent": 706, "numpi": [706, 710], "arrow": 706, "In": 706, "out": 706, "perform": 706, "tip": 706, "persist": 706, "wait": 706, "interoper": 708, "cupi": [708, 712], "arrai": [708, 712], "interweav": 708, "smooth": 708, "pydata": 708, "workflow": 708, "spars": 708, "matrix": 708, "multi": 709, "work": [709, 715], "navig": 709, "support": [710, 711, 714, 717], "A": 710, "decim": 710, "nest": 710, "summari": [711, 712], "limit": [711, 717], "calcul": [711, 715], "overview": 712, "user": [712, 713], "defin": 712, "udf": 712, "addit": 712, "scalar": 712, "argument": 712, "control": 712, "custom": 712, "numba": 712, "kernel": 712, "null": [712, 715, 717], "caveat": 712, "i": 714, "o": 714, "magnum": 714, "gpudirect": 714, "storag": 714, "integr": 714, "nvcomp": 714, "current": 714, "polici": 714, "how": 715, "detect": 715, "float": [715, 717], "nan": 715, "na": 715, "fill": 715, "axi": 715, "regular": 715, "express": 715, "comparison": 717, "result": 717, "point": 717, "No": 717, "true": 717}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [712, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_pandas": [[58, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[59, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[60, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[61, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[62, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[63, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[64, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[65, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[66, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[67, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[68, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[69, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[70, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[71, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[72, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[73, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[74, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[75, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[76, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[77, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[78, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[79, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[80, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[81, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[82, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[83, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[84, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[85, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[86, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[87, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[88, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[89, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[90, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[91, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[92, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[93, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[94, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[95, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[96, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[97, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[98, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[99, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[100, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[101, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[102, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[103, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[104, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[105, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[106, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[107, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[108, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[109, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[110, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[111, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[112, "cudf-dataframe-pivot"]], "cudf.DataFrame.pop": [[113, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[114, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[115, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[116, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[117, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[117, "PandasCompat-0"], [123, "PandasCompat-0"], [183, "PandasCompat-0"], [270, "PandasCompat-0"], [394, "PandasCompat-0"], [449, "PandasCompat-0"], [580, "PandasCompat-0"], [589, "PandasCompat-0"], [707, null], [707, null], [707, null], [707, null], [707, null], [707, null], [707, null], [707, null]], "cudf.DataFrame.quantiles": [[118, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[119, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[120, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[121, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[122, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[123, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[124, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[125, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[126, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[127, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[128, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[129, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[130, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[131, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[132, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[133, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[134, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[135, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[136, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[137, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[138, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[139, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[140, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[141, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[142, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[143, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[144, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[145, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[146, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[147, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[148, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[149, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[150, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[151, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[152, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[153, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[154, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[155, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[156, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[157, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[158, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[159, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[160, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[161, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[162, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[163, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[164, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[165, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[166, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[167, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[168, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[169, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[170, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[171, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[172, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[173, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[174, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[175, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[176, "cudf-dataframe-truediv"]], "cudf.DataFrame.unstack": [[177, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[178, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[179, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[180, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[181, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[182, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[183, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[184, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[185, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[186, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[187, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[188, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[189, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[190, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[191, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[192, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[193, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[194, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[195, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[196, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[197, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[198, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[199, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[200, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[201, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[202, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[203, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[204, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[205, "cudf-float64index"]], "cudf.Grouper": [[206, "cudf-grouper"]], "cudf.Index": [[207, "cudf-index"]], "cudf.Index.any": [[208, "cudf-index-any"]], "cudf.Index.append": [[209, "cudf-index-append"]], "cudf.Index.copy": [[210, "cudf-index-copy"]], "cudf.Index.deserialize": [[211, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[212, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[213, "cudf-index-device-serialize"]], "cudf.Index.difference": [[214, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[215, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[216, "cudf-index-dropna"]], "cudf.Index.fillna": [[217, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[218, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[219, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[220, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[221, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[222, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[223, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[224, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[225, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[226, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[227, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[228, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[229, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[230, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[231, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[232, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[233, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[234, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[235, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[236, "cudf-index-is-object"]], "cudf.Index.isin": [[237, "cudf-index-isin"]], "cudf.Index.isna": [[238, "cudf-index-isna"]], "cudf.Index.join": [[239, "cudf-index-join"]], "cudf.Index.names": [[240, "cudf-index-names"]], "cudf.Index.nlevels": [[241, "cudf-index-nlevels"]], "cudf.Index.notna": [[242, "cudf-index-notna"]], "cudf.Index.rename": [[243, "cudf-index-rename"]], "cudf.Index.repeat": [[244, "cudf-index-repeat"]], "cudf.Index.serialize": [[245, "cudf-index-serialize"]], "cudf.Index.set_names": [[246, "cudf-index-set-names"]], "cudf.Index.size": [[247, "cudf-index-size"]], "cudf.Index.sort_values": [[248, "cudf-index-sort-values"]], "cudf.Index.take": [[249, "cudf-index-take"]], "cudf.Index.to_dlpack": [[250, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[251, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[252, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[253, "cudf-index-to-series"]], "cudf.Index.union": [[254, "cudf-index-union"]], "cudf.Index.unique": [[255, "cudf-index-unique"]], "cudf.Index.values": [[256, "cudf-index-values"]], "cudf.Int64Index": [[257, "cudf-int64index"]], "cudf.IntervalIndex": [[258, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[259, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[260, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[261, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[262, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[263, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[264, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[265, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[266, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[267, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[268, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[269, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[270, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[271, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[272, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[273, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[274, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[275, "cudf-rangeindex"]], "cudf.Series": [[276, "cudf-series"]], "cudf.Series.T": [[277, "cudf-series-t"]], "cudf.Series.__array__": [[278, "cudf-series-array"]], "cudf.Series.__iter__": [[279, "cudf-series-iter"]], "cudf.Series.abs": [[280, "cudf-series-abs"]], "cudf.Series.add": [[281, "cudf-series-add"]], "cudf.Series.add_prefix": [[282, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[283, "cudf-series-add-suffix"]], "cudf.Series.all": [[284, "cudf-series-all"]], "cudf.Series.any": [[285, "cudf-series-any"]], "cudf.Series.append": [[286, "cudf-series-append"]], "cudf.Series.apply": [[287, "cudf-series-apply"], [712, "cudf-series-apply"]], "cudf.Series.argsort": [[288, "cudf-series-argsort"]], "cudf.Series.astype": [[289, "cudf-series-astype"]], "cudf.Series.autocorr": [[290, "cudf-series-autocorr"]], "cudf.Series.axes": [[291, "cudf-series-axes"]], "cudf.Series.backfill": [[292, "cudf-series-backfill"]], "cudf.Series.between": [[293, "cudf-series-between"]], "cudf.Series.bfill": [[294, "cudf-series-bfill"]], "cudf.Series.cat": [[295, "cudf-series-cat"]], "cudf.Series.clip": [[296, "cudf-series-clip"]], "cudf.Series.copy": [[297, "cudf-series-copy"]], "cudf.Series.corr": [[298, "cudf-series-corr"]], "cudf.Series.count": [[299, "cudf-series-count"]], "cudf.Series.cov": [[300, "cudf-series-cov"]], "cudf.Series.cummax": [[301, "cudf-series-cummax"]], "cudf.Series.cummin": [[302, "cudf-series-cummin"]], "cudf.Series.cumprod": [[303, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[304, "cudf-series-cumsum"]], "cudf.Series.data": [[305, "cudf-series-data"]], "cudf.Series.describe": [[306, "cudf-series-describe"]], "cudf.Series.deserialize": [[307, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[308, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[309, "cudf-series-device-serialize"]], "cudf.Series.diff": [[310, "cudf-series-diff"]], "cudf.Series.digitize": [[311, "cudf-series-digitize"]], "cudf.Series.div": [[312, "cudf-series-div"]], "cudf.Series.divide": [[313, "cudf-series-divide"]], "cudf.Series.dot": [[314, "cudf-series-dot"]], "cudf.Series.drop": [[315, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[316, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[317, "cudf-series-dropna"]], "cudf.Series.dt": [[318, "cudf-series-dt"]], "cudf.Series.dtype": [[319, "cudf-series-dtype"]], "cudf.Series.empty": [[320, "cudf-series-empty"]], "cudf.Series.eq": [[321, "cudf-series-eq"]], "cudf.Series.equals": [[322, "cudf-series-equals"]], "cudf.Series.explode": [[323, "cudf-series-explode"]], "cudf.Series.factorize": [[324, "cudf-series-factorize"]], "cudf.Series.ffill": [[325, "cudf-series-ffill"]], "cudf.Series.fillna": [[326, "cudf-series-fillna"]], "cudf.Series.first": [[327, "cudf-series-first"]], "cudf.Series.floordiv": [[328, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[329, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[330, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[331, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[332, "cudf-series-from-pandas"]], "cudf.Series.ge": [[333, "cudf-series-ge"]], "cudf.Series.groupby": [[334, "cudf-series-groupby"]], "cudf.Series.gt": [[335, "cudf-series-gt"]], "cudf.Series.has_nulls": [[336, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[337, "cudf-series-hash-values"]], "cudf.Series.head": [[338, "cudf-series-head"]], "cudf.Series.host_deserialize": [[339, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[340, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[341, "cudf-series-iloc"]], "cudf.Series.index": [[342, "cudf-series-index"]], "cudf.Series.interpolate": [[343, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[344, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[345, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[346, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[347, "cudf-series-is-unique"]], "cudf.Series.isin": [[348, "cudf-series-isin"]], "cudf.Series.isna": [[349, "cudf-series-isna"]], "cudf.Series.isnull": [[350, "cudf-series-isnull"]], "cudf.Series.items": [[351, "cudf-series-items"]], "cudf.Series.iteritems": [[352, "cudf-series-iteritems"]], "cudf.Series.keys": [[353, "cudf-series-keys"]], "cudf.Series.kurt": [[354, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[355, "cudf-series-kurtosis"]], "cudf.Series.last": [[356, "cudf-series-last"]], "cudf.Series.le": [[357, "cudf-series-le"]], "cudf.Series.list": [[358, "cudf-series-list"]], "cudf.Series.loc": [[359, "cudf-series-loc"]], "cudf.Series.lt": [[360, "cudf-series-lt"]], "cudf.Series.map": [[361, "cudf-series-map"]], "cudf.Series.mask": [[362, "cudf-series-mask"]], "cudf.Series.max": [[363, "cudf-series-max"]], "cudf.Series.mean": [[364, "cudf-series-mean"]], "cudf.Series.median": [[365, "cudf-series-median"]], "cudf.Series.memory_usage": [[366, "cudf-series-memory-usage"]], "cudf.Series.min": [[367, "cudf-series-min"]], "cudf.Series.mod": [[368, "cudf-series-mod"]], "cudf.Series.mode": [[369, "cudf-series-mode"]], "cudf.Series.mul": [[370, "cudf-series-mul"]], "cudf.Series.multiply": [[371, "cudf-series-multiply"]], "cudf.Series.name": [[372, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[373, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[374, "cudf-series-ndim"]], "cudf.Series.ne": [[375, "cudf-series-ne"]], "cudf.Series.nlargest": [[376, "cudf-series-nlargest"]], "cudf.Series.notna": [[377, "cudf-series-notna"]], "cudf.Series.notnull": [[378, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[379, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[380, "cudf-series-null-count"]], "cudf.Series.nullable": [[381, "cudf-series-nullable"]], "cudf.Series.nullmask": [[382, "cudf-series-nullmask"]], "cudf.Series.nunique": [[383, "cudf-series-nunique"]], "cudf.Series.pad": [[384, "cudf-series-pad"]], "cudf.Series.pct_change": [[385, "cudf-series-pct-change"]], "cudf.Series.pipe": [[386, "cudf-series-pipe"]], "cudf.Series.pow": [[387, "cudf-series-pow"]], "cudf.Series.prod": [[388, "cudf-series-prod"]], "cudf.Series.product": [[389, "cudf-series-product"]], "cudf.Series.quantile": [[390, "cudf-series-quantile"]], "cudf.Series.radd": [[391, "cudf-series-radd"]], "cudf.Series.rank": [[392, "cudf-series-rank"]], "cudf.Series.rdiv": [[393, "cudf-series-rdiv"]], "cudf.Series.reindex": [[394, "cudf-series-reindex"]], "cudf.Series.rename": [[395, "cudf-series-rename"]], "cudf.Series.repeat": [[396, "cudf-series-repeat"]], "cudf.Series.replace": [[397, "cudf-series-replace"]], "cudf.Series.resample": [[398, "cudf-series-resample"]], "cudf.Series.reset_index": [[399, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[400, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[401, "cudf-series-rmod"]], "cudf.Series.rmul": [[402, "cudf-series-rmul"]], "cudf.Series.rolling": [[403, "cudf-series-rolling"]], "cudf.Series.round": [[404, "cudf-series-round"]], "cudf.Series.rpow": [[405, "cudf-series-rpow"]], "cudf.Series.rsub": [[406, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[407, "cudf-series-rtruediv"]], "cudf.Series.sample": [[408, "cudf-series-sample"]], "cudf.Series.scale": [[409, "cudf-series-scale"]], "cudf.Series.searchsorted": [[410, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[411, "cudf-series-serialize"]], "cudf.Series.shape": [[412, "cudf-series-shape"]], "cudf.Series.shift": [[413, "cudf-series-shift"]], "cudf.Series.size": [[414, "cudf-series-size"]], "cudf.Series.skew": [[415, "cudf-series-skew"]], "cudf.Series.sort_index": [[416, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[417, "cudf-series-sort-values"]], "cudf.Series.std": [[418, "cudf-series-std"]], "cudf.Series.str": [[419, "cudf-series-str"]], "cudf.Series.struct": [[420, "cudf-series-struct"]], "cudf.Series.sub": [[421, "cudf-series-sub"]], "cudf.Series.subtract": [[422, "cudf-series-subtract"]], "cudf.Series.sum": [[423, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[424, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[425, "cudf-series-tail"]], "cudf.Series.take": [[426, "cudf-series-take"]], "cudf.Series.tile": [[427, "cudf-series-tile"]], "cudf.Series.to_arrow": [[428, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[429, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[430, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[431, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[432, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[433, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[434, "cudf-series-to-json"]], "cudf.Series.to_list": [[435, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[436, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[437, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[438, "cudf-series-to-string"]], "cudf.Series.tolist": [[439, "cudf-series-tolist"]], "cudf.Series.transpose": [[440, "cudf-series-transpose"]], "cudf.Series.truediv": [[441, "cudf-series-truediv"]], "cudf.Series.unique": [[442, "cudf-series-unique"]], "cudf.Series.update": [[443, "cudf-series-update"]], "cudf.Series.valid_count": [[444, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[445, "cudf-series-value-counts"]], "cudf.Series.values": [[446, "cudf-series-values"]], "cudf.Series.values_host": [[447, "cudf-series-values-host"]], "cudf.Series.var": [[448, "cudf-series-var"]], "cudf.Series.where": [[449, "cudf-series-where"]], "cudf.TimedeltaIndex": [[450, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[451, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[452, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[453, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[454, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[455, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[456, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[457, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[458, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[459, "cudf-uint64index"]], "cudf.concat": [[460, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[461, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[462, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[463, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[464, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[465, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[466, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[467, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[468, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[469, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[470, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[471, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[472, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[473, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[474, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[475, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[476, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[477, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[478, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[479, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[480, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[481, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[482, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[483, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[484, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[485, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[486, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[487, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[488, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[489, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[490, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[491, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[492, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[493, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[494, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[495, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[496, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[497, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[498, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[499, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[500, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[501, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[502, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[503, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[504, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[505, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[506, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[507, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[508, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[509, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[510, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[511, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[512, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[513, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[514, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[515, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[516, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[517, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[518, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[519, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[520, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[521, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[522, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[523, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[524, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[525, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[526, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[527, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[528, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[529, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[530, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[531, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[532, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[533, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[534, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[535, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[536, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[537, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[538, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[539, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[540, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[541, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[542, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[543, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[544, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[545, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[546, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[547, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[548, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[549, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[550, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[551, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[552, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[553, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[554, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[555, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[556, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[557, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[558, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[559, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[560, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[561, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[562, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[563, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[564, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[565, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[566, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[567, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[568, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[569, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[570, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[571, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[572, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[573, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[574, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[575, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[576, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[577, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[578, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[579, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[580, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[581, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[582, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[583, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[584, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[585, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[586, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[587, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[588, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[589, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[590, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[591, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[592, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[593, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[594, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[595, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[596, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[597, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[598, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[599, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[600, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[601, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[602, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[603, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[604, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[605, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[606, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[607, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[608, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[609, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[610, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[611, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[612, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[613, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[614, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[615, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[616, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[617, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[618, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[619, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[620, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[621, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[622, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[623, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[624, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[625, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[626, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[627, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[628, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[629, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[630, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[631, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[632, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[633, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[634, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[635, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[636, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[637, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[638, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[639, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[640, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[641, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[642, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[643, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[644, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[645, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[646, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[647, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[648, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[649, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[650, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[651, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[652, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[653, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[654, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[655, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[656, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[657, "cudf-core-window-rolling-rolling-var"]], "cudf.cut": [[658, "cudf-cut"]], "cudf.describe_option": [[659, "cudf-describe-option"]], "cudf.from_dlpack": [[660, "cudf-from-dlpack"]], "cudf.get_dummies": [[661, "cudf-get-dummies"]], "cudf.get_option": [[662, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[663, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[664, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[665, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[666, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[667, "cudf-melt"]], "cudf.pivot": [[668, "cudf-pivot"]], "cudf.read_avro": [[669, "cudf-read-avro"]], "cudf.read_csv": [[670, "cudf-read-csv"]], "cudf.read_feather": [[671, "cudf-read-feather"]], "cudf.read_hdf": [[672, "cudf-read-hdf"]], "cudf.read_json": [[673, "cudf-read-json"]], "Not GPU-accelerated": [[673, null], [673, null], [673, null], [673, null], [673, null], [673, null], [673, null], [673, null], [673, null]], "GPU-accelerated": [[673, null]], "GPU-accelerated experimental feature": [[673, null]], "cudf.read_orc": [[674, "cudf-read-orc"]], "cudf.read_parquet": [[675, "cudf-read-parquet"]], "cudf.read_text": [[676, "cudf-read-text"]], "cudf.set_option": [[677, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[678, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[679, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[680, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[681, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[682, "cudf-to-datetime"]], "cudf.to_numeric": [[683, "cudf-to-numeric"]], "cudf.unstack": [[684, "cudf-unstack"]], "DataFrame": [[685, "dataframe"]], "Constructor": [[685, "constructor"], [694, "constructor"], [697, "constructor"]], "Attributes and underlying data": [[685, "attributes-and-underlying-data"]], "Conversion": [[685, "conversion"], [690, "conversion"], [690, "id3"], [690, "id4"], [694, "conversion"]], "Indexing, iteration": [[685, "indexing-iteration"], [688, "indexing-iteration"], [694, "indexing-iteration"]], "Binary operator functions": [[685, "binary-operator-functions"], [694, "binary-operator-functions"]], "Function application, GroupBy & window": [[685, "function-application-groupby-window"], [694, "function-application-groupby-window"]], "Computations / descriptive stats": [[685, "computations-descriptive-stats"], [688, "computations-descriptive-stats"], [694, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[685, "reindexing-selection-label-manipulation"], [694, "reindexing-selection-label-manipulation"]], "Missing data handling": [[685, "missing-data-handling"], [694, "missing-data-handling"]], "Reshaping, sorting, transposing": [[685, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[685, "combining-comparing-joining-merging"], [694, "combining-comparing-joining-merging"]], "Time Series-related": [[685, "time-series-related"], [694, "time-series-related"]], "Serialization / IO / conversion": [[685, "serialization-io-conversion"], [694, "serialization-io-conversion"]], "General Functions": [[686, "general-functions"]], "Data manipulations": [[686, "data-manipulations"]], "Top-level conversions": [[686, "top-level-conversions"]], "Top-level dealing with datetimelike": [[686, "top-level-dealing-with-datetimelike"]], "General Utilities": [[687, "general-utilities"]], "Testing functions": [[687, "testing-functions"]], "GroupBy": [[688, "groupby"], [711, "groupby"]], "Function application": [[688, "function-application"]], "API reference": [[689, "api-reference"]], "API Documentation": [[689, null]], "Index objects": [[690, "index-objects"]], "Index": [[690, "index"]], "Properties": [[690, "properties"]], "Modifying and computations": [[690, "modifying-and-computations"], [690, "id1"]], "Compatibility with MultiIndex": [[690, "compatibility-with-multiindex"]], "Missing values": [[690, "missing-values"]], "Memory usage": [[690, "memory-usage"]], "Sorting": [[690, "sorting"]], "Time-specific operations": [[690, "time-specific-operations"], [690, "id2"]], "Combining / joining / set operations": [[690, "combining-joining-set-operations"]], "Selecting": [[690, "selecting"]], "Numeric Index": [[690, "numeric-index"]], "CategoricalIndex": [[690, "categoricalindex"]], "Categorical components": [[690, "categorical-components"]], "IntervalIndex": [[690, "intervalindex"]], "IntervalIndex components": [[690, "intervalindex-components"]], "MultiIndex": [[690, "multiindex"], [706, "multiindex"]], "MultiIndex constructors": [[690, "multiindex-constructors"]], "MultiIndex properties": [[690, "multiindex-properties"]], "MultiIndex components": [[690, "multiindex-components"]], "MultiIndex selecting": [[690, "multiindex-selecting"]], "DatetimeIndex": [[690, "datetimeindex"]], "Time/date components": [[690, "time-date-components"]], "TimedeltaIndex": [[690, "timedeltaindex"]], "Components": [[690, "components"]], "Input/output": [[691, "input-output"]], "CSV": [[691, "csv"], [706, "csv"]], "Text": [[691, "text"]], "JSON": [[691, "json"]], "Parquet": [[691, "parquet"], [706, "parquet"]], "ORC": [[691, "orc"], [706, "orc"]], "HDFStore: PyTables (HDF5)": [[691, "hdfstore-pytables-hdf5"]], "Feather": [[691, "feather"]], "Avro": [[691, "avro"]], "List handling": [[692, "list-handling"], [694, "list-handling"]], "cudf Options": [[693, "cudf-options"]], "Series": [[694, "series"]], "Attributes": [[694, "attributes"]], "Reshaping, sorting": [[694, "reshaping-sorting"]], "Accessors": [[694, "accessors"]], "Datetimelike properties": [[694, "datetimelike-properties"]], "Datetime properties": [[694, "datetime-properties"]], "Datetime methods": [[694, "datetime-methods"]], "Timedelta properties": [[694, "timedelta-properties"]], "String handling": [[694, "string-handling"], [695, "string-handling"]], "Categorical accessor": [[694, "categorical-accessor"]], "Struct handling": [[694, "struct-handling"], [696, "struct-handling"]], "SubwordTokenizer": [[697, "subwordtokenizer"]], "Window": [[698, "window"]], "Rolling window functions": [[698, "rolling-window-functions"]], "Benchmarking cuDF": [[699, "benchmarking-cudf"]], "Benchmark organization": [[699, "benchmark-organization"]], "Running benchmarks": [[699, "running-benchmarks"]], "Benchmark contents": [[699, "benchmark-contents"]], "Benchmark configuration": [[699, "benchmark-configuration"]], "Writing benchmarks": [[699, "writing-benchmarks"]], "Parametrizing tests": [[699, "parametrizing-tests"]], "Comparing to pandas": [[699, "comparing-to-pandas"], [701, "comparing-to-pandas"]], "Testing benchmarks": [[699, "testing-benchmarks"]], "Profiling": [[699, "profiling"]], "Advanced Topics": [[699, "advanced-topics"]], "Understanding benchmark_with_object": [[699, "understanding-benchmark-with-object"]], "Fixture unions": [[699, "fixture-unions"]], "The benchmark_with_object decorator": [[699, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[700, "contributing-guide"]], "Directory structure and file naming": [[700, "directory-structure-and-file-naming"]], "Code style": [[700, "code-style"]], "Deprecating and removing code": [[700, "deprecating-and-removing-code"]], "pandas compatibility": [[700, "pandas-compatibility"]], "Python vs Cython": [[700, "python-vs-cython"]], "Exception handling": [[700, "exception-handling"]], "Handling libcudf Exceptions": [[700, "handling-libcudf-exceptions"]], "Writing documentation": [[701, "writing-documentation"]], "Docstrings": [[701, "docstrings"]], "Published documentation": [[701, "published-documentation"]], "Writing documentation pages": [[701, "writing-documentation-pages"]], "Building documentation": [[701, "building-documentation"]], "Requirements": [[701, "requirements"]], "Building and viewing docs": [[701, "building-and-viewing-docs"]], "Documenting cuDF internals": [[701, "documenting-cudf-internals"]], "Developer Guide": [[702, "developer-guide"]], "Library Design": [[703, "library-design"]], "The Frame layer": [[703, "the-frame-layer"]], "Frames": [[703, "frames"]], "Indexes": [[703, "indexes"]], "The Column layer": [[703, "the-column-layer"]], "ColumnAccessor": [[703, "columnaccessor"]], "Columns": [[703, "columns"]], "Data types": [[703, "data-types"], [717, "data-types"]], "Buffer": [[703, "buffer"]], "The Cython layer": [[703, "the-cython-layer"]], "Putting It All Together": [[703, "putting-it-all-together"]], "Options": [[704, "options"], [716, "options"]], "Welcome to cuDF\u2019s documentation!": [[705, "welcome-to-cudf-s-documentation"]], "Contents:": [[705, null]], "Indices and tables": [[705, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[706, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[706, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[706, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[706, "object-creation"]], "Viewing Data": [[706, "viewing-data"]], "Selection": [[706, "selection"]], "Getting": [[706, "getting"]], "Selection by Label": [[706, "selection-by-label"]], "Selection by Position": [[706, "selection-by-position"]], "Boolean Indexing": [[706, "boolean-indexing"]], "Missing Data": [[706, "missing-data"]], "Operations": [[706, "operations"]], "Stats": [[706, "stats"]], "Applymap": [[706, "applymap"]], "Histogramming": [[706, "histogramming"]], "String Methods": [[706, "string-methods"]], "Concat": [[706, "concat"]], "Join": [[706, "join"]], "Grouping": [[706, "grouping"], [711, "grouping"]], "Transpose": [[706, "transpose"]], "Time Series": [[706, "time-series"]], "Categoricals": [[706, "categoricals"]], "Converting Data Representation": [[706, "converting-data-representation"]], "Pandas": [[706, "pandas"]], "Numpy": [[706, "numpy"]], "Arrow": [[706, "arrow"]], "Getting Data In/Out": [[706, "getting-data-in-out"]], "Dask Performance Tips": [[706, "dask-performance-tips"]], "Persisting Data": [[706, "persisting-data"]], "Wait": [[706, "wait"]], "Pandas Compatibility Notes": [[707, "pandas-compatibility-notes"]], "Interoperability between cuDF and CuPy": [[708, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[708, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[708, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[708, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[708, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[708, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[708, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Multi-GPU with Dask-cuDF": [[709, "multi-gpu-with-dask-cudf"]], "What works": [[709, "what-works"]], "Developing the API": [[709, "developing-the-api"]], "Navigating the API": [[709, "navigating-the-api"]], "Supported Data Types": [[710, "supported-data-types"]], "NumPy data types": [[710, "numpy-data-types"]], "A note on object": [[710, "a-note-on-object"]], "Decimal data types": [[710, "decimal-data-types"]], "Nested data types (List and Struct)": [[710, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[711, "summary-of-supported-operations"]], "Grouping by index levels": [[711, "grouping-by-index-levels"]], "The Grouper object": [[711, "the-grouper-object"]], "Aggregation": [[711, "aggregation"]], "GroupBy apply": [[711, "groupby-apply"]], "Limitations": [[711, "limitations"]], "Transform": [[711, "transform"]], "Rolling window calculations": [[711, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[712, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[712, "series-udfs"]], "Functions with Additional Scalar Arguments": [[712, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[712, "nullable-data"]], "String data": [[712, "string-data"]], "Lower level control with custom numba kernels": [[712, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[712, "dataframe-udfs"]], "String Data": [[712, "id1"]], "Numba kernels for DataFrames": [[712, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[712, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[712, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[712, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[712, "numba-kernels-on-cupy-arrays"]], "Caveats": [[712, "caveats"]], "Summary": [[712, "summary"]], "User Guide": [[713, "user-guide"]], "Input / Output": [[714, "input-output"]], "I/O Supported dtypes": [[714, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[714, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[714, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[714, "id1"]], "Working with missing data": [[715, "working-with-missing-data"]], "How to Detect missing values": [[715, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[715, "float-dtypes-and-missing-data"]], "Datetimes": [[715, "datetimes"]], "Calculations with missing data": [[715, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[715, "sum-product-of-null-nans"]], "NA values in GroupBy": [[715, "na-values-in-groupby"]], "Inserting missing data": [[715, "inserting-missing-data"]], "Filling missing values: fillna": [[715, "filling-missing-values-fillna"]], "Filling with cudf Object": [[715, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[715, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[715, "replacing-generic-values"]], "String/regular expression replacement": [[715, "string-regular-expression-replacement"]], "Numeric replacement": [[715, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[717, "comparison-of-cudf-and-pandas"]], "Supported operations": [[717, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[717, "null-or-missing-values"]], "Iteration": [[717, "iteration"]], "Result ordering": [[717, "result-ordering"]], "Floating-point computation": [[717, "floating-point-computation"]], "Column names": [[717, "column-names"]], "No true \"object\" data type": [[717, "no-true-object-data-type"]], ".apply() function limitations": [[717, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_pandas() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[60, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[61, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[62, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[63, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[64, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[65, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[66, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[67, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[68, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[69, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[70, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[71, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[72, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[73, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[74, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[75, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[76, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[77, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[78, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[79, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[80, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[81, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[82, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[84, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[85, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[86, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[87, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[88, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[89, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[90, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[91, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[92, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[93, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[94, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[95, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[96, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[97, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[98, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[99, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[100, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[101, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[102, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[103, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[104, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[105, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[106, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[107, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[108, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[109, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[110, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[111, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[112, "cudf.DataFrame.pivot"]], "pop() (cudf.dataframe method)": [[113, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[114, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[115, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[116, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[117, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[118, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[119, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[120, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[121, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[122, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[123, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[124, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[125, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[126, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[127, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[128, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[129, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[130, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[131, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[132, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[133, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[134, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[135, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[136, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[137, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[138, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[139, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[140, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[141, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[142, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[143, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[144, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[145, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[146, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[147, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[148, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[149, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[150, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[151, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[152, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[153, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[154, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[155, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[156, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[157, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[158, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[159, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[160, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[161, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[175, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[176, "cudf.DataFrame.truediv"]], "unstack() (cudf.dataframe method)": [[177, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[178, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[179, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[180, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[181, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[182, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[183, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[184, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[185, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[186, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[187, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[188, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[190, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[196, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[199, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[200, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[201, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[202, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[203, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[204, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[205, "cudf.Float64Index"]], "grouper (class in cudf)": [[206, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[206, "cudf.Grouper.__init__"]], "index (class in cudf)": [[207, "cudf.Index"]], "any() (cudf.index method)": [[208, "cudf.Index.any"]], "append() (cudf.index method)": [[209, "cudf.Index.append"]], "copy() (cudf.index method)": [[210, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[211, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[212, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[213, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[214, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[215, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[216, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[217, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[218, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[219, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[220, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[221, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[222, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[223, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[224, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[225, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[226, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[227, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[228, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[229, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[230, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[231, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[232, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[233, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[234, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[235, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[236, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[237, "cudf.Index.isin"]], "isna() (cudf.index method)": [[238, "cudf.Index.isna"]], "join() (cudf.index method)": [[239, "cudf.Index.join"]], "names (cudf.index property)": [[240, "cudf.Index.names"]], "nlevels (cudf.index property)": [[241, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[242, "cudf.Index.notna"]], "rename() (cudf.index method)": [[243, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[244, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[245, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[246, "cudf.Index.set_names"]], "size (cudf.index property)": [[247, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[248, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[249, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[250, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[251, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[252, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[253, "cudf.Index.to_series"]], "union() (cudf.index method)": [[254, "cudf.Index.union"]], "unique() (cudf.index method)": [[255, "cudf.Index.unique"]], "values (cudf.index property)": [[256, "cudf.Index.values"]], "int64index (class in cudf)": [[257, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[258, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[258, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[259, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[260, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[261, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[262, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[263, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[264, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[265, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[266, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[267, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[268, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[269, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[270, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[271, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[272, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[273, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[274, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[275, "cudf.RangeIndex"]], "series (class in cudf)": [[276, "cudf.Series"]], "t (cudf.series property)": [[277, "cudf.Series.T"]], "__array__() (cudf.series method)": [[278, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[279, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[280, "cudf.Series.abs"]], "add() (cudf.series method)": [[281, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[282, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[283, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[284, "cudf.Series.all"]], "any() (cudf.series method)": [[285, "cudf.Series.any"]], "append() (cudf.series method)": [[286, "cudf.Series.append"]], "apply() (cudf.series method)": [[287, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[288, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[289, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[290, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[291, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[292, "cudf.Series.backfill"]], "between() (cudf.series method)": [[293, "cudf.Series.between"]], "bfill() (cudf.series method)": [[294, "cudf.Series.bfill"]], "cat (cudf.series property)": [[295, "cudf.Series.cat"]], "clip() (cudf.series method)": [[296, "cudf.Series.clip"]], "copy() (cudf.series method)": [[297, "cudf.Series.copy"]], "corr() (cudf.series method)": [[298, "cudf.Series.corr"]], "count() (cudf.series method)": [[299, "cudf.Series.count"]], "cov() (cudf.series method)": [[300, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[301, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[302, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[303, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[304, "cudf.Series.cumsum"]], "data (cudf.series property)": [[305, "cudf.Series.data"]], "describe() (cudf.series method)": [[306, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[307, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[308, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[309, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[310, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[311, "cudf.Series.digitize"]], "div() (cudf.series method)": [[312, "cudf.Series.div"]], "divide() (cudf.series method)": [[313, "cudf.Series.divide"]], "dot() (cudf.series method)": [[314, "cudf.Series.dot"]], "drop() (cudf.series method)": [[315, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[316, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[317, "cudf.Series.dropna"]], "dt (cudf.series property)": [[318, "cudf.Series.dt"]], "dtype (cudf.series property)": [[319, "cudf.Series.dtype"]], "empty (cudf.series property)": [[320, "cudf.Series.empty"]], "eq() (cudf.series method)": [[321, "cudf.Series.eq"]], "equals() (cudf.series method)": [[322, "cudf.Series.equals"]], "explode() (cudf.series method)": [[323, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[324, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[325, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[326, "cudf.Series.fillna"]], "first() (cudf.series method)": [[327, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[328, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[329, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[330, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[331, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[332, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[333, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[334, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[335, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[336, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[337, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[338, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[339, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[340, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[341, "cudf.Series.iloc"]], "index (cudf.series property)": [[342, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[343, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[344, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[345, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[346, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[347, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[348, "cudf.Series.isin"]], "isna() (cudf.series method)": [[349, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[350, "cudf.Series.isnull"]], "items() (cudf.series method)": [[351, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[352, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[353, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[354, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[355, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[356, "cudf.Series.last"]], "le() (cudf.series method)": [[357, "cudf.Series.le"]], "list (cudf.series property)": [[358, "cudf.Series.list"]], "loc (cudf.series property)": [[359, "cudf.Series.loc"]], "lt() (cudf.series method)": [[360, "cudf.Series.lt"]], "map() (cudf.series method)": [[361, "cudf.Series.map"]], "mask() (cudf.series method)": [[362, "cudf.Series.mask"]], "max() (cudf.series method)": [[363, "cudf.Series.max"]], "mean() (cudf.series method)": [[364, "cudf.Series.mean"]], "median() (cudf.series method)": [[365, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[366, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[367, "cudf.Series.min"]], "mod() (cudf.series method)": [[368, "cudf.Series.mod"]], "mode() (cudf.series method)": [[369, "cudf.Series.mode"]], "mul() (cudf.series method)": [[370, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[371, "cudf.Series.multiply"]], "name (cudf.series property)": [[372, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[373, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[374, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[375, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[376, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[377, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[378, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[379, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[380, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[381, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[382, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[383, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[384, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[385, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[386, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[387, "cudf.Series.pow"]], "prod() (cudf.series method)": [[388, "cudf.Series.prod"]], "product() (cudf.series method)": [[389, "cudf.Series.product"]], "quantile() (cudf.series method)": [[390, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[391, "cudf.Series.radd"]], "rank() (cudf.series method)": [[392, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[393, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[394, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[395, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[396, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[397, "cudf.Series.replace"]], "resample() (cudf.series method)": [[398, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[399, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[400, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[401, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[402, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[403, "cudf.Series.rolling"]], "round() (cudf.series method)": [[404, "cudf.Series.round"]], "rpow() (cudf.series method)": [[405, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[406, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[407, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[408, "cudf.Series.sample"]], "scale() (cudf.series method)": [[409, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[410, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[411, "cudf.Series.serialize"]], "shape (cudf.series property)": [[412, "cudf.Series.shape"]], "shift() (cudf.series method)": [[413, "cudf.Series.shift"]], "size (cudf.series property)": [[414, "cudf.Series.size"]], "skew() (cudf.series method)": [[415, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[416, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[417, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[418, "cudf.Series.std"]], "str (cudf.series property)": [[419, "cudf.Series.str"]], "struct (cudf.series property)": [[420, "cudf.Series.struct"]], "sub() (cudf.series method)": [[421, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[422, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[423, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[424, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[425, "cudf.Series.tail"]], "take() (cudf.series method)": [[426, "cudf.Series.take"]], "tile() (cudf.series method)": [[427, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[428, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[429, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[430, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[431, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[432, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[433, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[434, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[435, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[436, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[437, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[438, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[439, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[440, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[441, "cudf.Series.truediv"]], "unique() (cudf.series method)": [[442, "cudf.Series.unique"]], "update() (cudf.series method)": [[443, "cudf.Series.update"]], "valid_count (cudf.series property)": [[444, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[445, "cudf.Series.value_counts"]], "values (cudf.series property)": [[446, "cudf.Series.values"]], "values_host (cudf.series property)": [[447, "cudf.Series.values_host"]], "var() (cudf.series method)": [[448, "cudf.Series.var"]], "where() (cudf.series method)": [[449, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[450, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[451, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[452, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[453, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[454, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[455, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[456, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[457, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[458, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[459, "cudf.UInt64Index"]], "concat() (in module cudf)": [[460, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[461, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[462, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[463, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[464, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[465, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[466, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[467, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[468, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[469, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[470, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[471, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[472, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[473, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[475, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[476, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[477, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[478, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[479, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[480, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[481, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[482, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[483, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[565, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[566, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[567, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[568, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[569, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[570, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[571, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[572, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[588, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[589, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[590, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[591, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[613, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[614, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[615, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[616, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[617, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[618, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[619, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[620, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[621, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[623, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[624, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[626, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[627, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[629, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[630, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[632, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[633, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[635, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[636, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[638, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[639, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[640, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[641, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[642, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[643, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[644, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[645, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[646, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[647, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[648, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[649, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[650, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[651, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[652, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[653, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[654, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[655, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[656, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[657, "cudf.core.window.rolling.Rolling.var"]], "cut() (in module cudf)": [[658, "cudf.cut"]], "describe_option() (in module cudf)": [[659, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[660, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[661, "cudf.get_dummies"]], "get_option() (in module cudf)": [[662, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[663, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[664, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[665, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[666, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[667, "cudf.melt"]], "pivot() (in module cudf)": [[668, "cudf.pivot"]], "read_avro() (in module cudf)": [[669, "cudf.read_avro"]], "read_csv() (in module cudf)": [[670, "cudf.read_csv"]], "read_feather() (in module cudf)": [[671, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[672, "cudf.read_hdf"]], "read_json() (in module cudf)": [[673, "cudf.read_json"]], "read_orc() (in module cudf)": [[674, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[675, "cudf.read_parquet"]], "read_text() (in module cudf)": [[676, "cudf.read_text"]], "set_option() (in module cudf)": [[677, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[678, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[679, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[680, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[681, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[682, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[683, "cudf.to_numeric"]], "unstack() (in module cudf)": [[684, "cudf.unstack"]]}})