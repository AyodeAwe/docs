Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_dict", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pivot_table", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.truncate", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.truncate", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.crosstab", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.pivot_table", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "developer_guide/testing", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cudf.CategoricalDtype", "user_guide/cudf.CategoricalDtype.categories", "user_guide/cudf.CategoricalDtype.from_pandas", "user_guide/cudf.CategoricalDtype.ordered", "user_guide/cudf.CategoricalDtype.to_pandas", "user_guide/cudf.Decimal128Dtype", "user_guide/cudf.Decimal128Dtype.from_arrow", "user_guide/cudf.Decimal128Dtype.itemsize", "user_guide/cudf.Decimal128Dtype.precision", "user_guide/cudf.Decimal128Dtype.scale", "user_guide/cudf.Decimal128Dtype.to_arrow", "user_guide/cudf.Decimal32Dtype", "user_guide/cudf.Decimal32Dtype.from_arrow", "user_guide/cudf.Decimal32Dtype.itemsize", "user_guide/cudf.Decimal32Dtype.precision", "user_guide/cudf.Decimal32Dtype.scale", "user_guide/cudf.Decimal32Dtype.to_arrow", "user_guide/cudf.Decimal64Dtype", "user_guide/cudf.Decimal64Dtype.from_arrow", "user_guide/cudf.Decimal64Dtype.itemsize", "user_guide/cudf.Decimal64Dtype.precision", "user_guide/cudf.Decimal64Dtype.scale", "user_guide/cudf.Decimal64Dtype.to_arrow", "user_guide/cudf.ListDtype", "user_guide/cudf.ListDtype.element_type", "user_guide/cudf.ListDtype.from_arrow", "user_guide/cudf.ListDtype.leaf_type", "user_guide/cudf.ListDtype.to_arrow", "user_guide/cudf.StructDtype", "user_guide/cudf.StructDtype.fields", "user_guide/cudf.StructDtype.from_arrow", "user_guide/cudf.StructDtype.to_arrow", "user_guide/cupy-interop", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_dict.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pivot_table.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.truncate.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.truncate.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.crosstab.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.pivot_table.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "developer_guide/testing.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cudf.CategoricalDtype.rst", "user_guide/cudf.CategoricalDtype.categories.rst", "user_guide/cudf.CategoricalDtype.from_pandas.rst", "user_guide/cudf.CategoricalDtype.ordered.rst", "user_guide/cudf.CategoricalDtype.to_pandas.rst", "user_guide/cudf.Decimal128Dtype.rst", "user_guide/cudf.Decimal128Dtype.from_arrow.rst", "user_guide/cudf.Decimal128Dtype.itemsize.rst", "user_guide/cudf.Decimal128Dtype.precision.rst", "user_guide/cudf.Decimal128Dtype.scale.rst", "user_guide/cudf.Decimal128Dtype.to_arrow.rst", "user_guide/cudf.Decimal32Dtype.rst", "user_guide/cudf.Decimal32Dtype.from_arrow.rst", "user_guide/cudf.Decimal32Dtype.itemsize.rst", "user_guide/cudf.Decimal32Dtype.precision.rst", "user_guide/cudf.Decimal32Dtype.scale.rst", "user_guide/cudf.Decimal32Dtype.to_arrow.rst", "user_guide/cudf.Decimal64Dtype.rst", "user_guide/cudf.Decimal64Dtype.from_arrow.rst", "user_guide/cudf.Decimal64Dtype.itemsize.rst", "user_guide/cudf.Decimal64Dtype.precision.rst", "user_guide/cudf.Decimal64Dtype.scale.rst", "user_guide/cudf.Decimal64Dtype.to_arrow.rst", "user_guide/cudf.ListDtype.rst", "user_guide/cudf.ListDtype.element_type.rst", "user_guide/cudf.ListDtype.from_arrow.rst", "user_guide/cudf.ListDtype.leaf_type.rst", "user_guide/cudf.ListDtype.to_arrow.rst", "user_guide/cudf.StructDtype.rst", "user_guide/cudf.StructDtype.fields.rst", "user_guide/cudf.StructDtype.from_arrow.rst", "user_guide/cudf.StructDtype.to_arrow.rst", "user_guide/cupy-interop.ipynb", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_dict", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pivot_table", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.truncate", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.truncate", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.crosstab", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.pivot_table", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Testing cuDF", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "cudf.CategoricalDtype", "cudf.CategoricalDtype.categories", "cudf.CategoricalDtype.from_pandas", "cudf.CategoricalDtype.ordered", "cudf.CategoricalDtype.to_pandas", "cudf.Decimal128Dtype", "cudf.Decimal128Dtype.from_arrow", "cudf.Decimal128Dtype.itemsize", "cudf.Decimal128Dtype.precision", "cudf.Decimal128Dtype.scale", "cudf.Decimal128Dtype.to_arrow", "cudf.Decimal32Dtype", "cudf.Decimal32Dtype.from_arrow", "cudf.Decimal32Dtype.itemsize", "cudf.Decimal32Dtype.precision", "cudf.Decimal32Dtype.scale", "cudf.Decimal32Dtype.to_arrow", "cudf.Decimal64Dtype", "cudf.Decimal64Dtype.from_arrow", "cudf.Decimal64Dtype.itemsize", "cudf.Decimal64Dtype.precision", "cudf.Decimal64Dtype.scale", "cudf.Decimal64Dtype.to_arrow", "cudf.ListDtype", "cudf.ListDtype.element_type", "cudf.ListDtype.from_arrow", "cudf.ListDtype.leaf_type", "cudf.ListDtype.to_arrow", "cudf.StructDtype", "cudf.StructDtype.fields", "cudf.StructDtype.from_arrow", "cudf.StructDtype.to_arrow", "Interoperability between cuDF and CuPy", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 71, 130, 165, 172, 187, 208, 209, 210, 214, 255, 260, 261, 265, 278, 279, 310, 433, 440, 454, 463, 652, 668, 684, 685, 686, 687, 695, 705, 707, 709, 711, 715, 720, 726, 732, 738, 743], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 71, 74, 85, 86, 88, 89, 90, 91, 94, 96, 97, 99, 100, 102, 103, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 136, 137, 138, 139, 144, 148, 154, 155, 156, 157, 158, 162, 165, 166, 168, 169, 173, 178, 179, 181, 184, 186, 187, 188, 193, 202, 208, 210, 216, 222, 228, 230, 231, 232, 233, 234, 238, 239, 242, 248, 253, 260, 261, 262, 268, 279, 284, 290, 292, 298, 300, 309, 312, 315, 316, 317, 318, 324, 330, 331, 333, 334, 335, 336, 337, 338, 341, 343, 346, 359, 360, 363, 365, 366, 367, 370, 371, 373, 374, 377, 378, 389, 390, 391, 392, 393, 394, 395, 396, 398, 401, 403, 404, 405, 408, 409, 410, 411, 414, 417, 424, 425, 426, 427, 434, 436, 437, 444, 445, 449, 451, 453, 454, 463, 474, 485, 489, 491, 499, 527, 533, 556, 559, 560, 562, 563, 564, 565, 566, 567, 581, 585, 586, 587, 589, 590, 598, 604, 605, 606, 607, 612, 615, 619, 621, 627, 642, 662, 663, 665, 666, 673, 674, 675, 676, 679, 680, 681, 685, 694, 695, 705, 706, 711, 712, 714, 715, 720, 726, 732, 738, 743, 747, 751, 752], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 71, 72, 74, 76, 77, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 109, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 147, 148, 149, 150, 153, 154, 155, 156, 157, 163, 164, 165, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 204, 205, 208, 209, 210, 217, 220, 222, 224, 225, 229, 241, 242, 245, 247, 249, 251, 252, 254, 256, 257, 260, 261, 262, 263, 265, 269, 270, 271, 273, 277, 278, 279, 281, 284, 287, 288, 291, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 307, 309, 315, 316, 318, 319, 320, 323, 324, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 346, 352, 353, 357, 358, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 381, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 416, 417, 418, 419, 421, 424, 425, 426, 427, 431, 432, 435, 437, 439, 440, 441, 444, 445, 446, 449, 452, 453, 454, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 486, 487, 489, 491, 492, 496, 498, 499, 500, 501, 505, 508, 509, 518, 529, 530, 531, 534, 544, 545, 547, 548, 551, 552, 553, 555, 556, 557, 558, 563, 568, 574, 575, 581, 583, 584, 585, 586, 587, 588, 590, 594, 595, 603, 604, 605, 606, 607, 610, 612, 615, 619, 662, 663, 664, 666, 668, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 688, 689, 690, 713, 714, 715, 750, 753], "categori": [0, 2, 21, 36, 94, 95, 231, 239, 292, 298, 309, 327, 333, 465, 466, 467, 470, 471, 472, 473, 505, 538, 663, 666, 684, 687, 709, 713, 715, 717, 718, 719, 748, 752, 755], "order": [0, 14, 17, 19, 21, 43, 45, 62, 81, 95, 104, 107, 123, 142, 144, 151, 158, 168, 173, 182, 187, 208, 242, 248, 251, 260, 291, 292, 317, 319, 327, 337, 372, 379, 382, 395, 413, 414, 420, 436, 449, 454, 463, 466, 467, 472, 473, 481, 483, 493, 562, 608, 663, 665, 668, 676, 679, 684, 685, 686, 687, 688, 705, 709, 713, 715, 716, 717, 719, 743, 744, 749, 751], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 71, 73, 76, 77, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 105, 106, 108, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 164, 165, 170, 172, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 217, 220, 222, 223, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 246, 247, 249, 251, 252, 255, 256, 257, 260, 261, 262, 265, 267, 274, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 298, 299, 300, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 351, 352, 353, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 426, 427, 429, 432, 433, 435, 439, 440, 444, 445, 446, 447, 449, 452, 453, 454, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 662, 663, 666, 676, 679, 681, 684, 685, 686, 687, 688, 689, 690, 700, 705, 709, 711, 713, 714, 715, 716, 717, 719, 720, 721, 725, 726, 727, 731, 732, 733, 737, 738, 739, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755], "copi": [0, 5, 21, 44, 45, 46, 54, 125, 126, 164, 166, 170, 176, 177, 179, 187, 208, 210, 251, 253, 260, 261, 262, 265, 278, 292, 318, 329, 397, 398, 432, 434, 439, 445, 454, 463, 465, 466, 467, 471, 472, 473, 533, 544, 569, 665, 681, 707, 709, 714, 752, 755], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 59, 60, 61, 62, 63, 71, 72, 74, 75, 76, 77, 81, 86, 88, 89, 94, 95, 98, 101, 103, 105, 106, 114, 119, 123, 125, 126, 128, 130, 134, 139, 142, 143, 145, 150, 151, 160, 162, 164, 168, 169, 171, 172, 173, 179, 181, 182, 186, 187, 208, 210, 217, 218, 222, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 245, 246, 249, 251, 257, 260, 261, 262, 263, 265, 273, 278, 279, 287, 288, 289, 292, 296, 299, 300, 309, 314, 317, 318, 319, 320, 323, 324, 325, 326, 329, 335, 336, 337, 338, 339, 346, 351, 352, 353, 360, 363, 365, 369, 372, 376, 378, 380, 381, 395, 400, 402, 406, 411, 413, 419, 420, 429, 432, 436, 437, 440, 445, 447, 449, 453, 454, 463, 464, 465, 466, 467, 471, 472, 473, 475, 476, 481, 488, 491, 496, 497, 498, 499, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 535, 538, 544, 551, 556, 557, 567, 584, 585, 586, 587, 604, 605, 606, 607, 608, 612, 615, 619, 629, 630, 632, 633, 634, 635, 653, 662, 663, 666, 668, 669, 674, 676, 679, 680, 681, 682, 684, 685, 686, 687, 688, 705, 710, 713, 714, 715, 747, 749, 750, 753], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 58, 60, 61, 62, 63, 69, 72, 75, 76, 77, 78, 80, 81, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 107, 110, 113, 114, 116, 119, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 148, 150, 151, 154, 155, 163, 165, 168, 171, 173, 176, 178, 180, 181, 187, 204, 205, 208, 210, 223, 242, 246, 249, 251, 254, 256, 260, 261, 262, 265, 266, 267, 269, 270, 271, 274, 277, 278, 279, 284, 291, 292, 309, 315, 316, 318, 319, 324, 331, 336, 337, 338, 344, 351, 352, 353, 360, 362, 363, 366, 367, 370, 371, 373, 374, 378, 380, 381, 390, 393, 394, 396, 398, 402, 403, 404, 405, 407, 408, 409, 410, 411, 417, 419, 424, 425, 435, 436, 444, 454, 461, 462, 463, 464, 551, 570, 573, 592, 618, 636, 664, 666, 667, 668, 671, 672, 673, 674, 676, 678, 679, 683, 684, 685, 686, 687, 690, 705, 707, 708, 709, 710, 713, 743, 744, 748, 749, 750, 751, 753], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 59, 62, 64, 66, 71, 85, 89, 108, 112, 121, 125, 126, 127, 128, 129, 134, 135, 139, 141, 144, 163, 168, 169, 171, 179, 184, 186, 195, 214, 215, 222, 227, 241, 245, 247, 248, 265, 267, 285, 286, 289, 309, 310, 311, 314, 318, 321, 323, 329, 330, 333, 335, 337, 340, 342, 359, 365, 384, 389, 399, 400, 401, 406, 407, 411, 414, 436, 437, 445, 446, 451, 453, 464, 474, 484, 486, 491, 492, 496, 497, 502, 509, 514, 530, 531, 533, 544, 554, 555, 557, 559, 560, 564, 565, 566, 573, 592, 598, 608, 611, 616, 618, 629, 653, 654, 663, 665, 668, 672, 676, 678, 689, 705, 706, 707, 709, 713, 738, 740, 743, 749, 750, 751, 753], "categor": [0, 1, 2, 21, 36, 94, 95, 230, 231, 232, 233, 234, 238, 239, 292, 298, 309, 333, 663, 666, 681, 684, 685, 686, 687, 709, 715, 748, 749, 751, 755], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 59, 61, 62, 63, 64, 65, 69, 71, 72, 74, 75, 76, 77, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 178, 179, 181, 182, 184, 185, 186, 205, 210, 217, 219, 220, 222, 223, 229, 235, 236, 237, 240, 241, 245, 251, 252, 256, 258, 263, 272, 279, 283, 284, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 313, 314, 315, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 432, 433, 436, 437, 439, 440, 441, 444, 445, 446, 447, 448, 449, 451, 452, 453, 462, 464, 471, 473, 474, 475, 476, 479, 481, 484, 486, 490, 491, 493, 499, 505, 506, 507, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 535, 541, 543, 544, 550, 551, 555, 556, 565, 567, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 594, 595, 596, 597, 598, 603, 604, 605, 606, 607, 610, 611, 612, 614, 615, 617, 619, 620, 653, 654, 662, 663, 666, 667, 668, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 685, 686, 687, 689, 698, 700, 701, 702, 705, 707, 709, 710, 711, 713, 714, 715, 720, 726, 732, 738, 741, 743, 744, 747, 748, 749, 750, 751, 752, 754], "repres": [0, 23, 129, 146, 153, 163, 165, 169, 185, 187, 279, 294, 296, 401, 415, 421, 437, 452, 454, 478, 486, 505, 506, 507, 524, 626, 659, 661, 663, 666, 705, 709, 720, 726, 732, 738, 743, 748, 753, 755], "indic": [0, 19, 28, 46, 48, 54, 74, 76, 77, 95, 105, 106, 112, 142, 160, 165, 169, 181, 195, 201, 212, 241, 245, 251, 252, 273, 291, 300, 314, 320, 323, 327, 329, 339, 346, 351, 352, 353, 380, 381, 384, 389, 413, 429, 437, 464, 476, 482, 484, 491, 493, 496, 502, 530, 531, 541, 546, 550, 557, 611, 629, 630, 631, 632, 633, 634, 635, 641, 653, 663, 666, 676, 679, 694, 706, 709, 711, 714, 750], "anoth": [0, 40, 164, 168, 170, 181, 289, 313, 364, 432, 436, 439, 567, 709, 711], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 71, 72, 73, 75, 78, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 107, 108, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 143, 145, 148, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 196, 204, 253, 254, 269, 271, 277, 279, 284, 285, 286, 287, 288, 291, 292, 298, 304, 305, 306, 307, 309, 315, 316, 318, 320, 323, 324, 325, 329, 331, 336, 337, 338, 340, 341, 344, 357, 358, 360, 362, 363, 366, 367, 370, 371, 373, 374, 378, 386, 390, 391, 392, 393, 394, 395, 396, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 417, 419, 421, 424, 425, 426, 428, 430, 432, 434, 435, 436, 437, 439, 441, 444, 445, 452, 461, 464, 573, 576, 582, 584, 585, 586, 587, 589, 590, 592, 596, 597, 598, 604, 605, 606, 607, 612, 614, 615, 617, 618, 619, 620, 636, 652, 653, 654, 662, 665, 666, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 694, 695, 705, 708, 711, 713, 714, 720, 722, 726, 728, 732, 734, 743, 744, 747, 749, 750, 751, 753], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 193, 202, 204, 205, 208, 210, 212, 214, 215, 217, 220, 222, 223, 225, 227, 229, 240, 242, 246, 247, 249, 251, 252, 253, 254, 256, 257, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 346, 351, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 418, 419, 420, 421, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 439, 440, 444, 445, 447, 449, 452, 453, 454, 461, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 512, 513, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 567, 568, 570, 573, 574, 575, 576, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 621, 627, 642, 644, 652, 653, 654, 659, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 705, 706, 707, 709, 711, 714, 715, 720, 726, 732, 738, 740, 743, 752, 753], "arrai": [0, 4, 16, 17, 19, 26, 58, 60, 62, 72, 76, 77, 89, 95, 105, 106, 119, 120, 121, 123, 125, 127, 128, 139, 142, 160, 164, 169, 170, 186, 187, 208, 210, 217, 229, 240, 241, 245, 247, 251, 252, 257, 260, 261, 262, 263, 265, 270, 273, 279, 289, 291, 299, 308, 314, 327, 332, 333, 334, 337, 352, 353, 365, 380, 381, 393, 395, 399, 400, 411, 413, 429, 431, 432, 437, 439, 453, 454, 463, 490, 494, 502, 529, 545, 589, 654, 662, 663, 666, 679, 688, 709, 713, 714, 751], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 58, 60, 61, 62, 63, 72, 86, 88, 89, 95, 97, 98, 99, 100, 103, 116, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 154, 155, 160, 165, 168, 169, 178, 180, 182, 186, 187, 188, 193, 202, 208, 210, 217, 220, 229, 240, 252, 257, 260, 261, 262, 267, 269, 271, 279, 284, 289, 296, 299, 309, 315, 316, 317, 318, 321, 324, 326, 329, 331, 333, 334, 336, 337, 338, 351, 360, 363, 365, 371, 373, 374, 378, 390, 393, 394, 395, 396, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 424, 425, 429, 433, 436, 437, 444, 453, 454, 463, 464, 465, 471, 472, 473, 482, 491, 494, 496, 502, 512, 513, 517, 529, 538, 544, 545, 551, 557, 581, 589, 621, 627, 642, 654, 662, 663, 666, 675, 676, 679, 680, 681, 682, 684, 685, 687, 688, 690, 695, 696, 698, 700, 701, 702, 705, 707, 708, 709, 711, 712, 713, 747, 748, 749, 750, 753, 755], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 71, 72, 73, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 172, 173, 175, 178, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 208, 210, 212, 217, 220, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 246, 249, 251, 257, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 278, 279, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 433, 440, 441, 444, 445, 446, 447, 449, 452, 453, 454, 458, 459, 460, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 584, 590, 592, 593, 596, 598, 608, 611, 614, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 659, 661, 662, 663, 666, 668, 671, 672, 673, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 711, 713, 714, 715, 738, 740, 747, 748, 749, 750, 753, 755], "dimension": [0, 146, 187, 208, 210, 260, 261, 262, 265, 279, 415, 454, 463, 551, 556, 663], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 58, 60, 65, 66, 67, 71, 73, 75, 81, 85, 94, 98, 104, 107, 108, 110, 111, 117, 118, 125, 127, 128, 129, 134, 143, 144, 150, 152, 153, 156, 158, 161, 164, 165, 169, 170, 171, 173, 179, 182, 183, 185, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 214, 215, 216, 227, 228, 232, 240, 247, 248, 249, 251, 252, 256, 260, 263, 264, 265, 269, 273, 279, 285, 286, 290, 291, 293, 308, 309, 310, 311, 312, 317, 319, 322, 325, 330, 333, 334, 341, 342, 343, 351, 359, 369, 379, 382, 385, 388, 391, 392, 399, 400, 401, 402, 406, 414, 419, 421, 426, 430, 432, 433, 437, 439, 445, 449, 450, 452, 462, 463, 464, 465, 468, 471, 472, 473, 483, 486, 488, 489, 491, 493, 494, 495, 497, 499, 500, 503, 505, 512, 513, 516, 517, 524, 527, 529, 535, 536, 537, 538, 541, 542, 544, 545, 550, 551, 554, 556, 561, 562, 567, 568, 585, 586, 587, 589, 590, 593, 598, 604, 605, 606, 607, 612, 614, 615, 617, 619, 621, 622, 623, 624, 625, 627, 628, 637, 638, 639, 640, 642, 643, 644, 645, 646, 653, 654, 659, 661, 663, 664, 667, 672, 676, 678, 679, 680, 681, 682, 683, 688, 689, 694, 706, 707, 708, 710, 711, 713, 714, 715, 720, 723, 724, 726, 729, 730, 732, 735, 736, 747, 748, 750, 752, 753, 755], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 71, 72, 75, 85, 86, 88, 90, 91, 95, 96, 97, 98, 99, 100, 103, 112, 113, 114, 116, 117, 118, 119, 122, 124, 126, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 150, 151, 153, 154, 155, 156, 163, 165, 168, 169, 171, 172, 173, 178, 179, 180, 181, 185, 187, 205, 210, 222, 242, 249, 256, 261, 262, 263, 269, 270, 273, 279, 284, 287, 288, 289, 291, 299, 304, 305, 306, 307, 309, 315, 316, 317, 318, 319, 320, 323, 324, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 351, 359, 360, 363, 364, 366, 367, 370, 371, 373, 374, 378, 389, 390, 391, 392, 393, 394, 396, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 419, 420, 421, 424, 425, 426, 433, 436, 437, 440, 444, 445, 447, 449, 452, 454, 462, 472, 473, 475, 477, 478, 481, 486, 491, 496, 497, 499, 502, 503, 505, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 528, 529, 534, 538, 541, 544, 550, 551, 552, 556, 557, 558, 576, 584, 585, 586, 587, 597, 604, 605, 606, 607, 608, 612, 615, 619, 652, 653, 662, 663, 664, 665, 666, 667, 668, 673, 674, 675, 676, 677, 679, 680, 681, 683, 685, 686, 688, 689, 690, 705, 706, 707, 713, 714, 747, 750, 752, 755], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 62, 76, 77, 83, 84, 89, 90, 92, 93, 95, 96, 98, 104, 105, 106, 107, 112, 113, 117, 118, 119, 121, 123, 125, 128, 129, 134, 135, 139, 142, 143, 144, 149, 153, 156, 163, 165, 168, 169, 171, 173, 181, 182, 185, 186, 195, 201, 217, 218, 223, 229, 235, 236, 237, 240, 241, 245, 248, 257, 261, 262, 263, 265, 269, 279, 283, 285, 286, 287, 288, 290, 291, 296, 300, 309, 318, 320, 323, 325, 329, 333, 334, 337, 347, 348, 349, 350, 351, 352, 353, 357, 358, 364, 365, 366, 368, 370, 379, 380, 381, 382, 389, 391, 392, 393, 395, 400, 401, 406, 407, 411, 413, 414, 418, 421, 426, 436, 437, 447, 452, 453, 464, 472, 473, 475, 478, 486, 491, 494, 495, 496, 497, 499, 500, 503, 505, 509, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 529, 534, 535, 538, 544, 545, 551, 552, 554, 556, 557, 558, 563, 565, 566, 567, 568, 569, 585, 586, 587, 598, 604, 605, 606, 607, 608, 612, 615, 619, 629, 630, 631, 632, 633, 634, 635, 641, 644, 653, 654, 662, 663, 666, 668, 672, 673, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 694, 696, 697, 700, 704, 705, 706, 707, 708, 709, 710, 711, 715, 747, 748, 749, 750, 751, 752, 753, 754, 755], "given": [0, 21, 44, 104, 113, 119, 120, 127, 128, 129, 130, 135, 139, 142, 173, 225, 247, 269, 292, 318, 334, 393, 399, 400, 401, 402, 407, 411, 413, 472, 473, 477, 482, 486, 491, 496, 499, 502, 505, 526, 531, 541, 544, 551, 556, 557, 563, 567, 608, 668, 673, 676, 680, 681, 688, 705, 706, 709, 711, 752], "replac": [0, 46, 89, 114, 139, 150, 186, 320, 365, 411, 419, 453, 499, 500, 509, 529, 545, 553, 555, 674, 695, 705, 706, 707, 713, 747, 751, 755], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 59, 61, 63, 72, 74, 76, 77, 86, 88, 97, 98, 99, 100, 101, 103, 105, 106, 108, 116, 122, 123, 124, 125, 130, 131, 132, 133, 134, 136, 137, 138, 150, 154, 155, 168, 169, 172, 178, 210, 222, 232, 238, 241, 245, 251, 279, 284, 291, 309, 315, 316, 324, 325, 331, 335, 336, 338, 346, 352, 353, 360, 363, 364, 371, 372, 373, 374, 376, 378, 380, 381, 386, 390, 394, 395, 396, 397, 403, 404, 405, 406, 408, 409, 410, 419, 424, 425, 436, 437, 440, 444, 447, 449, 475, 481, 483, 491, 544, 581, 655, 666, 676, 711, 714, 750, 751, 755], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 58, 60, 61, 62, 63, 66, 67, 69, 75, 86, 88, 89, 93, 95, 97, 99, 100, 103, 104, 107, 110, 113, 114, 116, 119, 122, 124, 126, 128, 130, 131, 132, 133, 136, 137, 138, 141, 143, 144, 145, 150, 151, 154, 155, 163, 165, 168, 169, 171, 173, 178, 180, 182, 186, 212, 214, 215, 216, 220, 227, 228, 240, 248, 249, 263, 267, 269, 270, 271, 274, 279, 284, 289, 290, 291, 294, 296, 298, 309, 310, 311, 312, 315, 316, 317, 318, 324, 326, 331, 336, 337, 338, 342, 343, 344, 351, 360, 363, 365, 371, 373, 374, 378, 390, 393, 394, 396, 400, 402, 403, 404, 405, 408, 409, 410, 414, 419, 420, 424, 425, 433, 436, 437, 444, 453, 464, 465, 471, 473, 486, 488, 491, 495, 496, 502, 503, 512, 513, 529, 544, 551, 556, 557, 561, 562, 573, 581, 590, 592, 608, 618, 620, 654, 662, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 688, 690, 695, 707, 709, 711, 712, 713, 738, 740, 742, 747, 749, 750, 751, 752, 753, 755], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 62, 71, 93, 111, 112, 113, 114, 123, 125, 126, 129, 134, 135, 139, 142, 150, 163, 164, 168, 169, 170, 171, 173, 175, 176, 179, 182, 187, 205, 249, 251, 256, 261, 262, 263, 265, 269, 270, 271, 278, 279, 301, 309, 318, 320, 333, 334, 337, 388, 389, 393, 395, 398, 401, 402, 406, 407, 411, 413, 419, 432, 436, 437, 439, 441, 445, 449, 454, 462, 464, 465, 466, 467, 471, 472, 473, 475, 477, 498, 499, 500, 553, 555, 581, 590, 596, 598, 611, 653, 662, 663, 664, 666, 667, 668, 669, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 695, 705, 708, 709, 711, 712, 715, 720, 726, 732, 750, 751, 752], "item": [0, 36, 48, 107, 115, 139, 145, 279, 309, 323, 327, 411, 472, 473, 676, 678, 738, 740, 742], "need": [0, 8, 41, 42, 48, 49, 50, 56, 61, 63, 71, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 162, 165, 178, 279, 284, 301, 315, 316, 323, 324, 325, 331, 336, 338, 360, 363, 371, 373, 374, 378, 384, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 472, 492, 654, 663, 676, 705, 706, 707, 709, 711, 713, 747, 748, 750, 755], "uniqu": [0, 36, 113, 126, 141, 182, 263, 265, 270, 273, 279, 309, 327, 350, 386, 449, 608, 663, 666, 673, 679, 695, 713, 714, 715, 716, 749, 755], "here": [0, 36, 309, 542, 675, 676, 680, 681, 705, 707, 709, 711, 747, 750, 752], "also": [0, 15, 36, 54, 95, 125, 126, 128, 130, 134, 135, 165, 251, 309, 329, 364, 398, 400, 402, 406, 407, 447, 491, 492, 494, 501, 504, 508, 509, 512, 513, 517, 524, 538, 541, 548, 550, 663, 668, 679, 680, 681, 705, 706, 707, 708, 709, 711, 712, 713, 743, 747, 748, 749, 750, 752, 753, 755], "thei": [0, 15, 50, 95, 98, 123, 128, 171, 173, 279, 290, 325, 333, 334, 382, 395, 400, 486, 493, 505, 562, 567, 608, 668, 682, 705, 706, 707, 709, 711, 712, 748, 749, 750, 755], "infer": [0, 4, 58, 169, 187, 261, 262, 270, 279, 437, 457, 676, 679, 688, 713], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 59, 62, 71, 81, 89, 93, 95, 104, 107, 111, 113, 115, 119, 125, 126, 129, 130, 139, 145, 150, 151, 152, 165, 166, 168, 169, 173, 177, 181, 182, 186, 190, 192, 201, 214, 215, 217, 219, 222, 223, 253, 261, 262, 263, 267, 268, 269, 270, 271, 273, 279, 289, 290, 309, 310, 311, 318, 320, 332, 333, 335, 337, 364, 365, 388, 397, 398, 401, 402, 411, 419, 420, 422, 433, 434, 436, 437, 447, 453, 464, 477, 479, 481, 482, 486, 488, 497, 498, 499, 500, 504, 505, 534, 536, 537, 538, 539, 540, 544, 551, 552, 553, 555, 556, 558, 581, 585, 586, 587, 593, 598, 604, 605, 606, 607, 608, 609, 612, 615, 619, 623, 625, 641, 652, 653, 654, 663, 665, 666, 672, 673, 675, 676, 677, 678, 679, 680, 688, 689, 705, 706, 707, 709, 710, 711, 713, 714, 720, 721, 726, 727, 732, 733, 738, 740, 747, 748, 750, 755], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 59, 61, 62, 63, 71, 72, 74, 76, 77, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 103, 105, 106, 108, 117, 118, 119, 123, 128, 130, 134, 139, 141, 142, 143, 149, 150, 151, 152, 153, 156, 162, 163, 164, 168, 169, 170, 171, 173, 174, 179, 182, 185, 186, 187, 208, 210, 213, 218, 222, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 249, 251, 257, 260, 261, 262, 265, 278, 279, 287, 288, 289, 290, 291, 292, 296, 299, 300, 304, 305, 306, 307, 309, 314, 317, 318, 319, 320, 323, 324, 325, 326, 335, 336, 337, 338, 339, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 360, 363, 365, 366, 367, 368, 369, 370, 372, 378, 380, 381, 386, 391, 392, 395, 400, 402, 406, 411, 413, 418, 419, 420, 421, 426, 432, 436, 437, 439, 445, 449, 452, 453, 454, 463, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 481, 488, 491, 496, 497, 498, 499, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 535, 538, 541, 544, 550, 551, 556, 557, 576, 584, 585, 586, 587, 597, 604, 605, 606, 607, 608, 612, 615, 619, 629, 630, 632, 633, 634, 635, 652, 653, 663, 668, 676, 678, 679, 680, 684, 685, 686, 687, 688, 715, 718, 750, 752, 753], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 71, 75, 76, 77, 89, 94, 105, 106, 110, 119, 123, 145, 152, 162, 164, 169, 170, 172, 174, 186, 211, 217, 219, 229, 230, 232, 233, 234, 238, 239, 240, 257, 261, 262, 287, 288, 296, 309, 314, 318, 323, 325, 339, 351, 352, 353, 365, 380, 381, 384, 393, 395, 432, 437, 439, 440, 453, 465, 466, 467, 470, 471, 472, 473, 476, 491, 496, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 557, 653, 663, 676, 681, 684, 685, 686, 687, 694, 707, 711, 715, 718, 747], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 61, 62, 63, 64, 65, 71, 74, 82, 85, 86, 88, 95, 97, 99, 100, 103, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 150, 151, 153, 154, 155, 156, 158, 166, 170, 171, 173, 175, 178, 179, 185, 187, 204, 210, 214, 215, 217, 220, 223, 229, 235, 247, 248, 251, 253, 254, 273, 276, 277, 278, 279, 283, 284, 289, 290, 293, 296, 299, 300, 309, 310, 311, 314, 315, 316, 317, 324, 325, 330, 331, 333, 334, 336, 337, 338, 340, 341, 346, 347, 359, 360, 363, 371, 373, 374, 375, 378, 379, 382, 390, 391, 392, 393, 394, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 419, 420, 421, 422, 424, 425, 426, 434, 439, 441, 444, 445, 446, 452, 454, 457, 461, 465, 466, 467, 468, 471, 472, 473, 477, 485, 486, 490, 492, 494, 495, 498, 499, 500, 503, 508, 510, 511, 514, 515, 516, 517, 519, 521, 523, 524, 525, 528, 529, 533, 534, 536, 537, 538, 541, 545, 546, 548, 550, 551, 552, 556, 558, 559, 560, 563, 564, 567, 569, 584, 590, 598, 608, 611, 652, 653, 663, 665, 666, 668, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 695, 697, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 720, 726, 732, 747, 748, 749, 750, 752, 753, 754, 755], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 59, 60, 61, 62, 63, 65, 71, 72, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 144, 148, 150, 151, 153, 154, 155, 156, 158, 159, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 195, 208, 210, 211, 215, 217, 220, 222, 223, 230, 231, 232, 233, 234, 235, 238, 239, 240, 247, 248, 249, 251, 253, 260, 263, 269, 271, 273, 278, 279, 280, 284, 287, 288, 289, 290, 291, 292, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 330, 331, 334, 335, 336, 337, 338, 341, 346, 347, 351, 352, 353, 359, 360, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 378, 380, 381, 382, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 417, 419, 420, 421, 424, 425, 426, 428, 432, 434, 436, 437, 439, 440, 441, 443, 444, 445, 447, 449, 452, 453, 454, 457, 463, 464, 472, 473, 475, 476, 477, 478, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 536, 537, 538, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 582, 590, 593, 596, 598, 608, 611, 614, 616, 617, 621, 627, 629, 630, 632, 633, 634, 635, 642, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 671, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 726, 732, 747, 748, 749, 750, 751, 753, 754, 755], "treat": [0, 12, 13, 74, 95, 186, 287, 288, 296, 346, 453, 472, 473, 491, 536, 544, 551, 556, 714, 715, 750, 752, 753], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 62, 69, 74, 76, 77, 94, 95, 105, 106, 114, 117, 118, 119, 121, 125, 126, 127, 134, 135, 139, 144, 148, 150, 153, 156, 165, 166, 168, 185, 195, 205, 214, 223, 235, 247, 248, 251, 253, 256, 257, 262, 270, 272, 273, 279, 287, 288, 290, 299, 304, 305, 306, 307, 309, 310, 337, 344, 346, 347, 351, 352, 353, 369, 380, 381, 391, 392, 393, 397, 399, 406, 407, 411, 414, 417, 419, 421, 426, 433, 434, 436, 452, 462, 470, 476, 477, 487, 489, 490, 491, 493, 496, 505, 510, 511, 514, 518, 522, 529, 532, 536, 537, 540, 549, 557, 568, 598, 616, 629, 653, 654, 662, 663, 664, 665, 674, 675, 676, 677, 678, 679, 680, 688, 689, 694, 696, 705, 706, 707, 709, 710, 713, 714, 715, 716, 718, 720, 723, 724, 726, 729, 730, 732, 735, 736, 743, 744, 747, 748, 749, 750, 752, 753, 754, 755], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 58, 61, 62, 63, 74, 75, 83, 84, 86, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 113, 114, 116, 117, 118, 119, 122, 124, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 142, 145, 149, 152, 153, 154, 155, 156, 157, 163, 165, 169, 172, 176, 178, 180, 182, 185, 205, 217, 229, 242, 256, 257, 263, 273, 279, 284, 287, 288, 290, 293, 301, 304, 305, 306, 307, 309, 315, 316, 317, 324, 326, 329, 331, 336, 337, 338, 346, 351, 357, 358, 360, 363, 366, 367, 368, 370, 371, 373, 374, 378, 390, 391, 392, 394, 396, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 413, 418, 421, 424, 425, 426, 427, 437, 440, 444, 449, 452, 462, 464, 473, 475, 481, 486, 487, 499, 529, 532, 540, 549, 568, 573, 581, 584, 585, 586, 587, 592, 593, 596, 598, 604, 605, 606, 607, 611, 612, 615, 616, 618, 619, 663, 672, 673, 674, 679, 682, 689, 690, 705, 706, 707, 709, 711, 713, 714, 748, 749, 750, 751, 753], "unord": [0, 95, 467, 663], "categoricaldtyp": [0, 21, 292, 709, 748], "cannot": [0, 54, 72, 139, 169, 220, 229, 329, 379, 382, 411, 437, 538, 584, 668, 705, 706, 709, 748, 749], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 58, 60, 62, 64, 65, 69, 71, 74, 83, 84, 87, 90, 91, 93, 94, 95, 96, 104, 107, 108, 111, 112, 113, 119, 120, 121, 125, 126, 128, 129, 130, 134, 135, 139, 141, 145, 150, 153, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 179, 181, 182, 185, 204, 205, 208, 220, 223, 254, 256, 260, 263, 269, 277, 278, 279, 289, 290, 292, 301, 309, 318, 320, 329, 333, 337, 340, 341, 344, 346, 351, 357, 358, 362, 364, 366, 367, 369, 370, 388, 389, 393, 397, 400, 401, 402, 406, 407, 411, 419, 421, 432, 433, 435, 436, 437, 439, 440, 441, 445, 447, 452, 461, 462, 463, 473, 475, 486, 490, 491, 492, 494, 496, 498, 499, 500, 501, 508, 516, 526, 529, 531, 536, 537, 538, 544, 545, 546, 547, 548, 551, 554, 556, 561, 562, 566, 567, 573, 584, 585, 586, 587, 589, 590, 592, 598, 604, 605, 606, 607, 612, 614, 615, 617, 618, 619, 644, 652, 653, 659, 661, 663, 666, 668, 672, 673, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 696, 697, 698, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 714, 715, 747, 748, 749, 750, 751, 753, 754, 755], "togeth": [0, 112, 212, 389, 707, 708, 747, 749, 750], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 74, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 107, 108, 111, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 182, 185, 186, 187, 204, 205, 210, 217, 218, 219, 220, 222, 229, 242, 246, 249, 251, 254, 256, 257, 261, 262, 263, 265, 277, 278, 279, 284, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 304, 305, 306, 307, 309, 313, 315, 316, 317, 318, 319, 320, 324, 326, 329, 331, 335, 336, 337, 338, 340, 341, 346, 357, 358, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 378, 379, 382, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 418, 419, 420, 421, 424, 425, 426, 432, 433, 435, 436, 437, 439, 440, 444, 445, 449, 452, 453, 454, 461, 462, 464, 465, 466, 467, 471, 472, 473, 475, 477, 481, 486, 487, 488, 491, 492, 493, 497, 499, 500, 503, 505, 509, 529, 532, 534, 535, 536, 537, 538, 540, 541, 544, 545, 549, 550, 551, 552, 554, 555, 556, 558, 561, 562, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 594, 595, 596, 598, 603, 604, 605, 606, 607, 608, 610, 612, 615, 619, 652, 653, 659, 661, 662, 663, 666, 668, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 705, 706, 709, 713, 715, 749, 750, 752, 753, 754, 755], "make": [0, 28, 48, 163, 171, 173, 187, 208, 210, 260, 269, 270, 271, 300, 323, 447, 454, 463, 499, 544, 551, 556, 563, 668, 675, 676, 679, 680, 681, 682, 705, 706, 707, 709, 713, 747, 750], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 59, 61, 62, 63, 73, 86, 88, 97, 99, 100, 103, 116, 121, 122, 124, 131, 132, 133, 135, 136, 137, 138, 150, 154, 155, 161, 168, 178, 182, 187, 208, 210, 222, 260, 261, 262, 268, 284, 290, 291, 299, 309, 315, 316, 324, 327, 331, 332, 335, 336, 337, 338, 360, 363, 364, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 407, 408, 409, 410, 419, 424, 425, 430, 436, 444, 454, 463, 505, 529, 543, 616, 652, 653, 654, 663, 665, 668, 676, 679, 681, 682, 688, 689, 695, 705, 706, 709, 711, 712, 747, 749, 750, 751], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 76, 77, 82, 86, 88, 94, 95, 97, 99, 100, 103, 105, 106, 109, 112, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 144, 145, 150, 154, 155, 160, 163, 165, 166, 168, 169, 171, 172, 175, 178, 181, 187, 208, 210, 212, 214, 215, 216, 217, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 245, 247, 248, 249, 252, 253, 257, 260, 261, 262, 263, 265, 267, 273, 274, 278, 279, 284, 289, 290, 292, 295, 297, 298, 300, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 324, 325, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 346, 347, 348, 349, 350, 352, 353, 356, 360, 363, 364, 369, 371, 373, 374, 375, 378, 380, 381, 387, 389, 390, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 414, 419, 424, 425, 429, 431, 433, 434, 435, 436, 437, 441, 444, 446, 447, 449, 454, 463, 464, 485, 486, 487, 488, 489, 491, 493, 496, 497, 498, 499, 500, 502, 504, 505, 508, 509, 527, 529, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 584, 590, 608, 611, 636, 644, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 671, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 694, 695, 704, 705, 709, 710, 711, 712, 715, 716, 738, 747, 750, 751], "store": [0, 168, 171, 173, 187, 208, 210, 260, 261, 262, 278, 279, 333, 436, 454, 463, 505, 663, 675, 676, 678, 680, 681, 705, 706, 707, 709, 710, 713, 715, 748, 750, 755], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 69, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 166, 168, 169, 171, 173, 174, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 260, 261, 262, 263, 265, 267, 270, 271, 272, 273, 275, 277, 278, 279, 284, 289, 290, 291, 294, 299, 300, 304, 305, 306, 307, 309, 315, 316, 318, 320, 321, 323, 324, 326, 327, 329, 330, 331, 332, 334, 336, 337, 338, 344, 346, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 378, 380, 381, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 417, 419, 420, 421, 422, 424, 425, 426, 430, 431, 434, 435, 436, 437, 440, 444, 445, 447, 452, 454, 461, 462, 463, 464, 469, 472, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 582, 584, 593, 621, 627, 642, 653, 662, 663, 668, 672, 673, 674, 676, 679, 680, 681, 685, 686, 687, 690, 695, 705, 707, 711, 712, 714, 715, 716, 750, 751, 753, 755], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 195, 196, 201, 202, 204, 205, 208, 210, 211, 212, 214, 215, 216, 217, 220, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 577, 581, 582, 584, 585, 586, 587, 590, 591, 592, 593, 596, 598, 599, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 618, 619, 621, 626, 627, 629, 630, 632, 633, 634, 635, 636, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 688, 689, 690, 694, 700, 704, 707, 709, 710, 713, 714, 720, 725, 726, 731, 732, 737, 738, 739, 740, 741, 743, 744, 747, 749, 750], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 71, 73, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 112, 113, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 222, 223, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 246, 247, 249, 251, 252, 255, 257, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 440, 441, 444, 445, 446, 447, 449, 452, 453, 454, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 584, 592, 593, 596, 598, 608, 611, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 662, 663, 666, 668, 671, 672, 673, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 705, 706, 707, 709, 711, 713, 714, 715, 716, 717, 719, 720, 721, 726, 727, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 755], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 59, 62, 64, 69, 71, 73, 75, 76, 77, 82, 83, 84, 87, 89, 90, 91, 92, 95, 96, 98, 101, 104, 105, 106, 107, 108, 117, 118, 119, 121, 126, 127, 128, 134, 139, 140, 143, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 165, 172, 175, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 222, 223, 229, 230, 231, 232, 233, 234, 238, 239, 242, 246, 249, 251, 255, 257, 262, 265, 266, 267, 268, 269, 273, 274, 278, 279, 287, 288, 289, 291, 292, 293, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 317, 318, 320, 323, 325, 326, 327, 329, 332, 333, 334, 335, 337, 339, 340, 344, 351, 352, 353, 356, 357, 358, 362, 365, 366, 367, 368, 370, 372, 376, 379, 380, 381, 382, 391, 392, 393, 397, 398, 399, 400, 406, 411, 412, 417, 418, 419, 420, 421, 426, 427, 428, 430, 431, 433, 435, 440, 441, 445, 446, 447, 449, 452, 453, 454, 464, 465, 466, 467, 471, 472, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 581, 592, 593, 596, 598, 611, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 666, 671, 672, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 705, 706, 707, 713, 714, 715, 716, 717, 719, 720, 721, 726, 727, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 755], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 59, 62, 68, 71, 76, 77, 80, 81, 94, 104, 105, 106, 107, 121, 126, 128, 134, 139, 150, 151, 163, 168, 172, 175, 177, 180, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 222, 229, 234, 255, 257, 262, 290, 309, 333, 335, 337, 352, 353, 369, 380, 381, 398, 400, 406, 411, 419, 420, 422, 436, 440, 441, 481, 567, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 666, 672, 675, 678, 679, 681, 684, 685, 687, 689, 690, 697, 700, 708, 709, 711, 712, 715, 717, 719, 747, 748, 749, 750, 751, 753, 754], "pd": [0, 4, 47, 59, 62, 76, 77, 105, 106, 134, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 222, 229, 234, 257, 262, 273, 333, 335, 337, 352, 353, 380, 381, 406, 440, 524, 584, 593, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 675, 713, 714, 715, 717, 748, 750, 753, 755], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 62, 64, 65, 69, 71, 73, 75, 76, 77, 82, 83, 84, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 101, 102, 104, 105, 106, 107, 108, 113, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 134, 135, 137, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 172, 175, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 203, 206, 210, 212, 217, 220, 229, 230, 231, 232, 233, 238, 239, 240, 242, 246, 249, 251, 252, 257, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 313, 314, 317, 318, 319, 320, 323, 325, 326, 329, 330, 332, 333, 334, 335, 337, 339, 340, 341, 344, 351, 352, 353, 356, 357, 358, 359, 362, 364, 365, 366, 367, 368, 370, 372, 376, 380, 381, 390, 391, 392, 393, 394, 398, 399, 400, 401, 402, 406, 407, 409, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 433, 436, 440, 441, 445, 446, 447, 449, 452, 453, 454, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 581, 584, 592, 593, 596, 598, 608, 611, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 662, 663, 666, 668, 671, 672, 673, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 709, 711, 713, 714, 715, 720, 721, 726, 727, 732, 733, 747, 748, 749, 750, 753, 755], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 69, 71, 73, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 113, 116, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 172, 175, 178, 179, 180, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 210, 217, 220, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 246, 249, 251, 252, 255, 257, 262, 263, 266, 267, 268, 269, 273, 274, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 321, 324, 325, 326, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 344, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 382, 390, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 433, 440, 441, 444, 445, 446, 447, 449, 452, 453, 454, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 498, 500, 501, 502, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 568, 569, 570, 573, 581, 592, 593, 596, 598, 608, 611, 616, 618, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 663, 666, 668, 672, 673, 676, 679, 685, 686, 687, 688, 690, 713, 714, 715, 747, 748, 749, 750, 753, 755], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 69, 71, 73, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 113, 116, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 178, 179, 182, 185, 186, 187, 190, 191, 192, 201, 206, 217, 220, 229, 232, 233, 238, 239, 240, 242, 249, 251, 252, 257, 268, 273, 279, 283, 284, 285, 286, 287, 288, 289, 290, 294, 296, 299, 300, 302, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 324, 326, 329, 330, 331, 334, 336, 337, 338, 339, 341, 344, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 381, 390, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 433, 444, 445, 446, 447, 449, 452, 453, 454, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 491, 492, 494, 499, 502, 518, 519, 520, 521, 531, 555, 556, 562, 565, 566, 569, 570, 573, 584, 592, 593, 596, 598, 608, 611, 616, 618, 623, 624, 625, 626, 629, 630, 632, 633, 636, 641, 645, 647, 648, 649, 650, 651, 654, 663, 666, 668, 672, 673, 679, 686, 687, 688, 713, 714, 720, 726, 732, 747, 748, 749, 750, 752, 753], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 61, 63, 76, 77, 83, 84, 86, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 105, 106, 111, 113, 116, 117, 118, 122, 124, 125, 128, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 153, 154, 155, 156, 172, 178, 180, 181, 182, 185, 186, 220, 222, 241, 245, 284, 287, 288, 290, 296, 298, 302, 304, 305, 306, 307, 309, 313, 315, 316, 320, 323, 324, 326, 329, 331, 332, 334, 335, 336, 338, 339, 352, 353, 357, 358, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 381, 388, 390, 391, 392, 394, 396, 397, 400, 401, 403, 404, 405, 408, 409, 410, 417, 418, 421, 424, 425, 426, 435, 440, 444, 446, 447, 449, 452, 453, 464, 471, 473, 477, 478, 479, 480, 486, 487, 491, 492, 496, 497, 529, 530, 534, 535, 544, 551, 552, 556, 557, 558, 568, 574, 575, 581, 583, 584, 585, 586, 587, 588, 594, 595, 596, 598, 603, 604, 605, 606, 607, 610, 612, 615, 619, 636, 666, 673, 676, 689, 690, 713, 714, 715, 749, 750, 751, 755], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 68, 69, 70, 87, 102, 146, 148, 183, 184, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 206, 207, 226, 235, 236, 237, 243, 244, 250, 259, 264, 266, 274, 275, 276, 280, 294, 298, 308, 321, 322, 323, 339, 344, 345, 347, 348, 349, 350, 361, 362, 375, 377, 383, 384, 385, 415, 417, 422, 423, 448, 450, 451, 455, 456, 457, 458, 459, 460, 468, 469, 470, 479, 572, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 698, 701, 702, 705, 707, 713, 715, 716, 718, 720, 722, 723, 724, 726, 728, 729, 730, 732, 734, 735, 736, 738, 739, 741, 743, 744], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 61, 63, 75, 81, 86, 88, 89, 97, 98, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 144, 150, 154, 155, 163, 169, 171, 173, 178, 181, 186, 212, 217, 218, 229, 242, 248, 257, 278, 284, 292, 296, 301, 303, 315, 316, 317, 324, 325, 331, 336, 338, 360, 363, 365, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 414, 419, 424, 425, 437, 444, 447, 453, 464, 473, 486, 491, 524, 541, 544, 550, 556, 584, 668, 675, 676, 679, 680, 681, 682, 705, 706, 707, 709, 711, 713, 750, 753, 755], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 74, 83, 84, 90, 91, 92, 93, 96, 112, 117, 118, 141, 149, 153, 156, 167, 168, 169, 172, 173, 185, 210, 265, 287, 288, 290, 292, 302, 346, 357, 358, 366, 367, 368, 370, 389, 391, 392, 397, 400, 418, 419, 421, 426, 436, 437, 440, 452, 567, 578, 579, 580, 585, 586, 587, 600, 601, 602, 604, 605, 606, 607, 611, 612, 615, 619, 644, 654, 656, 657, 658, 660, 677, 678, 679, 681, 750], "determin": [3, 16, 45, 62, 141, 165, 290, 337, 490, 535, 551, 556, 676, 680, 681, 689, 706, 755], "two": [3, 14, 23, 50, 62, 98, 113, 119, 120, 125, 126, 217, 229, 246, 257, 279, 301, 325, 337, 393, 402, 464, 493, 541, 550, 589, 662, 673, 676, 684, 685, 686, 687, 705, 706, 709, 711, 747, 750], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 62, 66, 67, 73, 75, 98, 121, 126, 139, 144, 160, 161, 166, 168, 173, 179, 181, 182, 202, 204, 214, 215, 216, 219, 227, 228, 243, 248, 252, 253, 254, 261, 272, 275, 277, 279, 294, 296, 309, 310, 311, 312, 314, 320, 321, 323, 325, 327, 333, 337, 339, 342, 343, 351, 402, 411, 414, 429, 430, 434, 436, 445, 447, 449, 461, 472, 478, 486, 489, 495, 501, 505, 508, 529, 541, 546, 547, 548, 550, 551, 556, 557, 562, 573, 592, 618, 652, 653, 665, 676, 678, 679, 681, 682, 686, 695, 696, 705, 706, 707, 709, 711, 713, 715, 716, 749, 750, 752, 755], "same": [3, 21, 36, 46, 50, 51, 71, 74, 76, 77, 89, 105, 106, 123, 125, 127, 128, 135, 139, 150, 168, 173, 181, 186, 188, 193, 241, 245, 247, 249, 261, 279, 292, 309, 314, 320, 325, 346, 352, 353, 364, 365, 380, 381, 395, 399, 400, 407, 411, 419, 436, 453, 472, 477, 478, 486, 503, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 543, 548, 557, 616, 644, 653, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 676, 679, 685, 686, 688, 705, 706, 707, 709, 711, 713, 749, 750, 752, 753, 755], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 61, 63, 71, 75, 76, 77, 86, 88, 97, 98, 99, 100, 103, 105, 106, 108, 111, 116, 122, 123, 124, 127, 131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 148, 153, 154, 155, 178, 182, 185, 211, 217, 218, 229, 247, 248, 270, 283, 284, 287, 288, 296, 299, 313, 315, 316, 317, 324, 325, 326, 331, 336, 338, 351, 352, 353, 360, 363, 371, 373, 374, 378, 379, 380, 381, 382, 388, 390, 394, 395, 396, 399, 403, 404, 405, 407, 408, 409, 410, 413, 414, 417, 421, 424, 425, 444, 449, 452, 456, 458, 459, 460, 475, 476, 477, 478, 479, 480, 482, 483, 486, 488, 491, 492, 495, 496, 504, 514, 515, 516, 517, 523, 524, 525, 528, 529, 530, 531, 541, 546, 550, 551, 553, 556, 557, 659, 661, 676, 686, 709, 711, 713, 720, 722, 726, 728, 732, 734, 738, 739, 750], "out": [3, 48, 93, 160, 163, 168, 169, 172, 252, 308, 323, 339, 429, 436, 437, 440, 477, 551, 556, 593, 663, 672, 680, 681, 705, 709, 747, 750, 751], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 71, 72, 75, 76, 77, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 96, 98, 103, 105, 106, 108, 109, 110, 114, 117, 118, 119, 123, 125, 126, 128, 130, 134, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 156, 160, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181, 182, 185, 186, 187, 204, 210, 211, 213, 218, 222, 230, 231, 232, 233, 234, 238, 239, 240, 241, 245, 249, 251, 252, 254, 263, 265, 273, 277, 279, 287, 288, 289, 290, 291, 292, 295, 296, 297, 299, 300, 304, 305, 306, 307, 317, 319, 320, 323, 324, 325, 326, 328, 329, 335, 336, 337, 338, 339, 351, 352, 353, 357, 358, 360, 363, 365, 366, 367, 368, 369, 370, 372, 378, 380, 381, 386, 387, 391, 392, 393, 395, 397, 398, 400, 402, 406, 411, 413, 418, 419, 420, 421, 426, 429, 432, 436, 437, 439, 440, 445, 449, 452, 453, 461, 464, 465, 466, 467, 471, 473, 475, 476, 481, 488, 491, 496, 497, 498, 499, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 535, 538, 541, 544, 550, 551, 556, 557, 567, 576, 584, 597, 608, 629, 630, 632, 633, 634, 635, 652, 653, 663, 666, 668, 674, 676, 679, 680, 681, 682, 684, 685, 686, 687, 688, 705, 709, 710, 713, 714, 715, 716, 717, 719, 749, 750, 751, 753], "ha": [3, 19, 57, 59, 62, 65, 71, 98, 180, 195, 222, 257, 270, 291, 332, 335, 337, 339, 341, 492, 497, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 528, 629, 681, 690, 705, 706, 709, 710, 713, 738, 740, 749, 750, 752, 753, 754], "call": [3, 11, 15, 17, 28, 62, 125, 126, 139, 158, 169, 181, 223, 290, 300, 337, 411, 437, 465, 508, 548, 668, 694, 696, 704, 705, 706, 709, 711, 713, 749, 750, 752], "otherwis": [3, 19, 44, 50, 51, 58, 62, 135, 142, 163, 169, 249, 263, 273, 290, 291, 318, 325, 334, 337, 393, 407, 413, 422, 437, 481, 486, 676, 679, 689, 706, 710, 712, 713], "nan_as_nul": [4, 59, 60, 72, 101, 210, 222, 232, 279, 335, 376, 447, 666, 753], "gpu": [4, 16, 17, 95, 121, 279, 308, 385, 653, 676, 697, 706, 707, 708, 709, 711, 712, 713, 747, 750, 752, 755], "iter": [4, 11, 14, 17, 75, 78, 98, 112, 269, 270, 271, 279, 389, 608, 611, 678, 679, 695, 749, 750, 751], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 58, 62, 66, 67, 75, 94, 114, 121, 126, 128, 135, 144, 163, 165, 169, 171, 173, 214, 215, 216, 220, 227, 228, 248, 279, 292, 310, 311, 312, 329, 337, 342, 343, 364, 400, 407, 414, 433, 437, 499, 563, 573, 584, 592, 618, 666, 668, 674, 675, 676, 679, 680, 681, 682, 688, 709, 743, 744, 750, 753], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 58, 62, 74, 75, 85, 95, 98, 108, 112, 121, 125, 128, 130, 134, 135, 139, 144, 153, 165, 168, 172, 185, 214, 248, 273, 296, 299, 309, 310, 318, 319, 329, 330, 334, 337, 346, 359, 372, 389, 397, 400, 402, 406, 407, 411, 414, 421, 433, 436, 440, 447, 449, 452, 473, 477, 486, 499, 501, 508, 524, 526, 529, 531, 536, 545, 548, 551, 556, 567, 573, 590, 592, 598, 611, 618, 644, 652, 653, 668, 672, 676, 678, 679, 681, 686, 688, 698, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 713, 715, 720, 726, 732, 738, 743, 747, 748, 749, 750, 752, 753, 755], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 61, 62, 63, 64, 65, 69, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 111, 112, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 168, 169, 176, 178, 179, 180, 181, 182, 186, 205, 231, 251, 253, 256, 265, 274, 278, 462, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 584, 585, 586, 587, 590, 592, 598, 604, 605, 606, 607, 608, 611, 612, 615, 616, 618, 619, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 679, 682, 687, 688, 689, 690, 694, 695, 696, 698, 701, 702, 704, 705, 706, 709, 711, 712, 714, 715, 748, 749, 751, 753, 755], "constant": [4, 653, 654, 666], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 61, 63, 65, 66, 67, 71, 86, 88, 93, 95, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 142, 143, 150, 151, 154, 155, 160, 161, 164, 170, 172, 178, 214, 215, 216, 227, 228, 268, 284, 310, 311, 312, 315, 316, 317, 324, 331, 336, 338, 341, 342, 343, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 413, 419, 424, 425, 429, 430, 432, 439, 444, 672, 679, 705, 708, 711, 753], "Will": [4, 169, 173, 279, 437, 668], "rangeindex": [4, 23, 71, 145, 148, 150, 171, 173, 279, 294, 356, 417, 419, 668, 686, 709], "inform": [4, 15, 19, 43, 62, 71, 168, 290, 291, 317, 337, 436, 472, 473, 653, 679, 688, 705, 706, 708, 709, 713, 750, 752, 753], "part": [4, 62, 173, 337, 541, 550, 593, 705, 706, 714, 720, 726, 732], "provid": [4, 15, 16, 21, 22, 36, 54, 68, 126, 134, 135, 139, 163, 170, 180, 210, 223, 265, 269, 270, 273, 278, 279, 290, 292, 309, 329, 406, 407, 411, 439, 464, 477, 500, 545, 561, 562, 581, 663, 666, 679, 682, 690, 695, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 747, 748, 749, 750, 753, 754, 755], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 58, 62, 70, 72, 75, 87, 95, 104, 125, 126, 129, 139, 145, 150, 180, 181, 183, 184, 208, 209, 210, 225, 246, 249, 260, 263, 264, 265, 270, 272, 273, 279, 285, 286, 292, 318, 325, 326, 327, 337, 345, 362, 397, 401, 411, 419, 433, 450, 451, 463, 481, 572, 663, 676, 679, 685, 690, 695, 709, 749, 751], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 69, 71, 73, 74, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 168, 172, 173, 175, 178, 179, 180, 182, 185, 186, 191, 194, 197, 198, 200, 203, 206, 222, 223, 231, 232, 233, 234, 238, 239, 247, 249, 251, 252, 257, 262, 265, 266, 267, 268, 269, 270, 274, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 351, 352, 353, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 378, 380, 381, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 433, 436, 440, 441, 444, 445, 446, 447, 449, 452, 453, 454, 458, 459, 460, 464, 465, 466, 467, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 582, 584, 585, 586, 587, 589, 590, 592, 593, 596, 598, 604, 605, 606, 607, 608, 611, 612, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 662, 663, 666, 668, 671, 672, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 689, 690, 707, 709, 711, 713, 714, 715, 720, 726, 732, 747, 748, 749, 750, 753, 755], "n": [4, 15, 45, 52, 65, 83, 84, 104, 107, 123, 139, 153, 159, 163, 169, 173, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 265, 279, 293, 303, 326, 327, 341, 357, 358, 379, 382, 395, 411, 421, 428, 437, 445, 452, 454, 481, 488, 489, 495, 505, 519, 525, 530, 534, 536, 537, 538, 544, 551, 552, 553, 556, 558, 598, 609, 614, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 650, 659, 661, 676, 679, 688, 707, 713, 747, 748, 752, 753], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 59, 62, 65, 74, 76, 77, 89, 95, 98, 105, 106, 112, 117, 118, 119, 123, 127, 128, 130, 135, 139, 156, 157, 165, 169, 171, 172, 175, 186, 188, 193, 205, 222, 230, 231, 232, 233, 234, 238, 239, 242, 247, 249, 255, 256, 268, 273, 278, 279, 290, 292, 300, 309, 314, 325, 332, 335, 337, 341, 346, 352, 353, 364, 365, 380, 381, 389, 391, 392, 395, 399, 400, 407, 411, 426, 427, 433, 437, 440, 441, 447, 453, 454, 462, 464, 474, 486, 529, 551, 554, 556, 581, 590, 611, 653, 655, 656, 657, 658, 659, 660, 661, 663, 676, 678, 679, 682, 688, 689, 694, 700, 705, 706, 712, 713, 714, 715, 720, 726, 732, 738, 739, 741, 743, 749, 750, 751, 753], "forc": [4, 58, 169, 437, 679, 713], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 61, 62, 63, 71, 74, 75, 81, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 103, 104, 107, 116, 119, 122, 123, 124, 126, 130, 131, 132, 133, 134, 136, 137, 138, 150, 151, 154, 155, 163, 168, 169, 171, 177, 178, 179, 181, 183, 184, 186, 219, 223, 230, 231, 232, 233, 234, 238, 239, 263, 264, 283, 284, 291, 299, 300, 309, 315, 316, 318, 320, 323, 324, 331, 336, 337, 338, 346, 360, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 378, 390, 394, 395, 396, 398, 402, 403, 404, 405, 406, 408, 409, 410, 419, 420, 424, 425, 436, 437, 444, 445, 446, 449, 450, 451, 453, 464, 485, 491, 492, 497, 498, 503, 505, 529, 535, 538, 551, 556, 559, 560, 564, 581, 582, 585, 586, 587, 590, 596, 604, 605, 606, 607, 612, 615, 619, 653, 663, 668, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 694, 700, 705, 706, 708, 709, 711, 713, 714, 720, 726, 732, 750, 752, 753], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 61, 62, 63, 69, 73, 81, 86, 87, 88, 97, 99, 100, 103, 104, 107, 116, 119, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 169, 178, 180, 273, 279, 284, 315, 316, 318, 324, 331, 336, 337, 338, 344, 351, 360, 362, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 437, 444, 486, 494, 505, 531, 543, 545, 590, 676, 678, 680, 681, 690, 706, 709, 713, 747, 749, 750], "allow": [4, 15, 21, 50, 51, 58, 71, 95, 119, 126, 139, 165, 168, 169, 279, 290, 292, 325, 411, 436, 437, 505, 663, 679, 680, 681, 684, 685, 686, 687, 705, 707, 709, 711, 713, 715, 716, 748, 750, 752, 755], "convert": [4, 21, 57, 58, 59, 60, 72, 73, 101, 125, 129, 134, 144, 145, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 210, 222, 248, 253, 255, 268, 269, 270, 271, 273, 279, 292, 332, 335, 364, 376, 397, 401, 406, 414, 431, 432, 433, 434, 435, 437, 439, 440, 441, 485, 510, 511, 526, 533, 559, 560, 564, 566, 568, 644, 665, 678, 679, 688, 689, 709, 715, 717, 719, 738, 740, 742, 743, 745, 746, 751, 753], "np": [4, 17, 30, 36, 46, 59, 71, 72, 76, 77, 94, 101, 105, 106, 121, 130, 134, 170, 172, 210, 222, 232, 238, 279, 308, 309, 314, 335, 352, 353, 364, 376, 380, 381, 406, 439, 440, 447, 449, 491, 663, 666, 676, 689, 748, 750, 753], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 59, 71, 72, 76, 77, 83, 84, 90, 91, 92, 96, 101, 105, 106, 117, 118, 121, 129, 134, 142, 149, 151, 153, 156, 163, 169, 172, 175, 185, 210, 218, 219, 220, 222, 279, 287, 288, 290, 302, 304, 305, 306, 307, 318, 320, 323, 329, 334, 335, 339, 352, 353, 357, 358, 366, 367, 368, 370, 376, 380, 381, 383, 384, 385, 391, 392, 401, 406, 413, 418, 420, 421, 422, 426, 431, 437, 440, 441, 448, 452, 464, 471, 473, 475, 478, 481, 486, 495, 505, 529, 576, 590, 596, 597, 598, 666, 676, 689, 705, 706, 709, 711, 715, 751], "leav": [4, 59, 72, 93, 210, 222, 279, 335, 474, 672, 682, 689, 695, 750], "build": [4, 261, 708, 750], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 61, 62, 63, 64, 65, 69, 71, 73, 75, 76, 77, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 112, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 266, 269, 274, 279, 284, 285, 286, 287, 288, 291, 292, 299, 304, 305, 306, 307, 309, 315, 316, 317, 318, 323, 324, 325, 329, 331, 336, 337, 338, 340, 341, 344, 352, 353, 357, 358, 360, 362, 363, 365, 366, 367, 370, 371, 373, 374, 376, 378, 380, 381, 389, 390, 391, 392, 394, 396, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 413, 417, 418, 419, 421, 422, 424, 425, 426, 427, 428, 430, 441, 444, 445, 452, 453, 584, 593, 608, 611, 616, 666, 670, 671, 672, 677, 679, 680, 681, 688, 690, 713, 714, 747, 749, 750, 753, 755], "kei": [4, 14, 23, 58, 62, 65, 75, 81, 95, 114, 135, 145, 150, 159, 163, 165, 168, 171, 173, 175, 181, 205, 209, 224, 242, 251, 256, 263, 273, 279, 337, 341, 407, 419, 428, 433, 436, 441, 462, 478, 499, 570, 572, 577, 593, 599, 667, 668, 674, 675, 676, 678, 679, 680, 681, 682, 688, 709, 710, 713, 714, 743, 744, 749, 750], "val": [4, 23, 65, 159, 175, 341, 428, 441, 593, 683, 713], "float": [4, 8, 41, 42, 47, 49, 56, 61, 63, 65, 76, 77, 86, 88, 90, 91, 95, 96, 97, 99, 100, 103, 105, 106, 116, 119, 120, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 154, 155, 159, 169, 175, 178, 208, 230, 231, 232, 233, 234, 238, 239, 263, 284, 293, 303, 315, 316, 324, 331, 336, 338, 341, 352, 353, 360, 363, 366, 367, 370, 371, 373, 374, 378, 380, 381, 390, 393, 394, 396, 397, 403, 404, 405, 408, 409, 410, 411, 424, 425, 428, 437, 441, 444, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 585, 586, 587, 589, 604, 605, 606, 607, 612, 615, 619, 676, 679, 684, 685, 686, 687, 688, 689, 707, 709, 713, 714, 738, 742, 748, 750, 751], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 58, 64, 65, 69, 71, 83, 84, 87, 89, 90, 91, 92, 95, 96, 101, 117, 118, 119, 121, 126, 127, 128, 129, 139, 140, 142, 145, 148, 149, 153, 156, 157, 159, 169, 175, 179, 185, 186, 212, 222, 234, 247, 251, 255, 266, 274, 278, 279, 283, 287, 288, 292, 304, 305, 306, 307, 309, 314, 317, 318, 325, 334, 335, 340, 341, 344, 356, 357, 358, 362, 365, 366, 367, 368, 370, 376, 391, 392, 397, 398, 399, 400, 401, 402, 411, 412, 413, 417, 418, 421, 426, 427, 428, 435, 437, 440, 441, 445, 452, 453, 466, 467, 471, 472, 473, 489, 504, 510, 511, 516, 521, 532, 540, 593, 626, 629, 632, 633, 647, 648, 649, 651, 663, 668, 675, 688, 706, 711, 712, 720, 726, 732, 747, 750, 751, 753, 755], "rang": [4, 14, 16, 44, 51, 65, 69, 94, 95, 129, 159, 171, 173, 175, 179, 278, 279, 318, 341, 344, 401, 402, 428, 441, 445, 464, 499, 663, 671, 676, 679, 682, 705, 711, 713, 747, 750, 753, 755], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 62, 65, 69, 71, 73, 76, 77, 87, 89, 91, 92, 95, 105, 106, 108, 119, 120, 121, 122, 126, 128, 129, 130, 134, 139, 140, 142, 143, 145, 148, 149, 158, 159, 161, 162, 165, 179, 180, 186, 190, 191, 192, 196, 206, 217, 229, 231, 234, 247, 251, 257, 268, 273, 279, 284, 285, 286, 289, 290, 293, 298, 301, 302, 304, 305, 306, 307, 309, 313, 314, 317, 318, 319, 325, 326, 329, 334, 337, 341, 344, 351, 352, 353, 356, 362, 365, 367, 368, 372, 379, 380, 381, 382, 393, 394, 400, 401, 406, 411, 412, 413, 417, 418, 420, 428, 430, 445, 446, 447, 449, 453, 465, 466, 467, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 484, 487, 488, 489, 490, 492, 500, 501, 502, 508, 514, 519, 547, 548, 553, 554, 562, 565, 566, 573, 589, 592, 593, 596, 598, 608, 616, 618, 623, 624, 625, 626, 629, 630, 632, 633, 636, 645, 654, 663, 668, 672, 679, 684, 685, 686, 687, 688, 690, 709, 713, 714, 747, 748, 749, 750, 753, 755], "insert": [4, 65, 130, 142, 159, 341, 402, 413, 428, 555, 695, 709, 751], "11": [4, 44, 51, 52, 55, 58, 65, 85, 87, 95, 129, 134, 140, 142, 145, 148, 175, 179, 251, 266, 274, 279, 318, 330, 334, 341, 356, 359, 362, 401, 402, 406, 412, 413, 417, 435, 441, 445, 484, 489, 526, 626, 629, 671, 676, 677, 680, 681, 688, 713, 747, 749, 750, 752, 753], "12": [4, 32, 33, 34, 35, 36, 40, 44, 58, 87, 95, 129, 140, 142, 145, 148, 175, 179, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 266, 274, 279, 301, 303, 304, 305, 306, 307, 309, 318, 321, 334, 356, 362, 401, 402, 412, 413, 417, 435, 441, 445, 489, 498, 505, 510, 511, 567, 593, 598, 623, 624, 625, 626, 629, 634, 635, 639, 641, 645, 646, 647, 648, 649, 650, 651, 688, 709, 713, 747, 750], "13": [4, 44, 55, 58, 85, 95, 129, 142, 145, 159, 179, 301, 303, 318, 321, 330, 334, 356, 359, 401, 402, 413, 428, 435, 445, 489, 647, 648, 649, 651, 713, 720, 726, 732, 747], "14": [4, 15, 71, 95, 101, 129, 142, 145, 159, 179, 321, 334, 356, 376, 401, 413, 428, 445, 489, 647, 648, 649, 651, 713, 750], "via": [4, 36, 139, 168, 309, 411, 436, 473, 697, 709, 713, 747, 749], "numpi": [4, 17, 19, 21, 30, 36, 60, 71, 76, 77, 101, 105, 106, 121, 134, 139, 164, 170, 174, 184, 208, 210, 222, 241, 245, 260, 278, 279, 291, 292, 309, 335, 352, 353, 376, 380, 381, 406, 411, 432, 439, 451, 454, 463, 663, 666, 679, 688, 705, 707, 750, 751, 753, 755], "datetim": [4, 36, 47, 119, 121, 129, 134, 169, 179, 187, 189, 194, 197, 198, 200, 202, 203, 207, 309, 321, 401, 406, 437, 445, 454, 622, 628, 637, 638, 640, 643, 646, 671, 676, 677, 680, 681, 684, 685, 687, 688, 709, 713, 748, 749, 750, 751, 755], "timedelta": [4, 119, 134, 406, 455, 647, 748, 750], "t0": 4, "strptime": [4, 121, 688, 713], "2018": [4, 47, 55, 85, 121, 129, 249, 330, 359, 401, 634, 635, 671, 676, 677, 680, 681, 713], "07": [4, 121, 125, 129, 134, 179, 190, 191, 192, 206, 401, 406, 445, 623, 624, 625, 626, 636, 645], "00": [4, 7, 36, 46, 64, 71, 76, 77, 105, 106, 125, 129, 134, 179, 187, 188, 193, 194, 196, 197, 198, 200, 201, 202, 203, 283, 309, 321, 340, 352, 353, 380, 381, 401, 406, 445, 454, 573, 592, 618, 621, 627, 628, 637, 638, 640, 641, 642, 643, 647, 648, 649, 650, 651, 671, 676, 677, 680, 681, 713, 753, 755], "y": [4, 15, 16, 17, 44, 58, 121, 128, 148, 163, 207, 251, 318, 397, 400, 417, 478, 489, 526, 541, 550, 569, 644, 646, 688, 709, 713, 743, 745, 746, 750], "m": [4, 121, 129, 169, 173, 179, 188, 193, 199, 202, 401, 437, 445, 499, 526, 621, 627, 639, 641, 642, 644, 647, 648, 649, 651, 679, 688, 707, 713, 747, 748, 752], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 58, 61, 63, 86, 87, 88, 97, 99, 100, 103, 116, 121, 122, 124, 128, 131, 132, 133, 136, 137, 138, 139, 142, 145, 150, 154, 155, 160, 163, 178, 179, 180, 188, 189, 190, 191, 192, 193, 202, 206, 252, 273, 279, 284, 298, 299, 309, 314, 315, 316, 318, 324, 331, 336, 338, 360, 362, 363, 371, 373, 374, 378, 390, 394, 396, 397, 400, 402, 403, 404, 405, 408, 409, 410, 411, 413, 419, 424, 425, 429, 435, 444, 445, 447, 464, 484, 486, 487, 489, 491, 497, 504, 526, 529, 546, 565, 566, 621, 622, 623, 624, 625, 627, 642, 644, 645, 663, 688, 690, 709, 713, 747, 750, 753], "h": [4, 112, 179, 188, 193, 194, 202, 389, 445, 489, 529, 621, 627, 628, 642, 709, 713], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 62, 69, 75, 83, 84, 93, 94, 95, 98, 104, 113, 119, 120, 127, 128, 135, 139, 142, 143, 150, 152, 160, 163, 165, 169, 171, 173, 179, 181, 188, 193, 202, 203, 231, 246, 249, 279, 283, 285, 286, 291, 292, 293, 296, 298, 299, 300, 304, 305, 306, 307, 309, 314, 317, 318, 319, 321, 323, 325, 326, 327, 335, 337, 344, 351, 357, 358, 364, 372, 382, 393, 399, 400, 407, 411, 413, 419, 420, 422, 429, 433, 437, 445, 447, 449, 454, 465, 466, 467, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 581, 592, 593, 598, 611, 618, 621, 626, 627, 629, 630, 632, 633, 635, 641, 642, 643, 647, 648, 649, 650, 651, 654, 663, 666, 668, 671, 672, 673, 675, 676, 679, 680, 681, 682, 688, 689, 705, 706, 707, 708, 709, 713, 714, 747, 748, 750, 752, 753, 754, 755], "id": [4, 16, 596, 598, 652, 653, 713], "arang": [4, 17, 713, 750], "second": [4, 44, 98, 112, 129, 144, 158, 169, 188, 193, 201, 202, 248, 267, 318, 321, 389, 401, 414, 437, 455, 458, 621, 627, 641, 642, 647, 649, 676, 679, 682, 688, 709, 713], "x": [4, 5, 15, 16, 17, 44, 58, 62, 74, 148, 163, 177, 251, 273, 290, 318, 337, 346, 364, 417, 464, 478, 541, 550, 553, 555, 569, 573, 592, 593, 611, 618, 644, 663, 676, 680, 681, 707, 711, 713, 714, 743, 745, 746, 749, 750], "01": [4, 36, 129, 134, 135, 173, 179, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 206, 207, 309, 401, 406, 407, 445, 454, 526, 568, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 650, 671, 676, 677, 680, 681, 748, 753], "02": [4, 125, 129, 134, 179, 189, 190, 191, 192, 194, 198, 199, 203, 206, 321, 401, 406, 445, 454, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 638, 639, 643, 645, 671, 676, 677, 680, 681, 688], "03": [4, 47, 129, 135, 179, 189, 190, 191, 192, 199, 206, 321, 401, 407, 445, 454, 622, 623, 624, 625, 626, 630, 632, 633, 639, 644, 645, 650, 688, 713], "04": [4, 46, 55, 76, 77, 85, 105, 106, 125, 129, 134, 179, 190, 191, 192, 202, 206, 330, 352, 353, 359, 380, 381, 401, 406, 445, 454, 621, 623, 624, 625, 626, 627, 642, 645, 688], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 58, 62, 65, 69, 70, 71, 73, 85, 87, 95, 98, 104, 107, 108, 114, 125, 129, 139, 141, 150, 152, 153, 158, 159, 160, 161, 163, 168, 171, 173, 179, 182, 185, 208, 210, 218, 219, 252, 260, 271, 279, 285, 286, 287, 288, 294, 304, 305, 306, 307, 313, 318, 319, 320, 326, 330, 337, 341, 344, 345, 359, 362, 397, 401, 411, 419, 421, 428, 429, 430, 436, 445, 452, 463, 464, 475, 476, 478, 479, 482, 486, 491, 493, 495, 497, 505, 529, 551, 556, 572, 582, 590, 593, 608, 609, 653, 662, 665, 671, 674, 675, 676, 678, 679, 680, 681, 682, 685, 705, 711, 713, 714, 747, 749, 750, 753], "tupl": [4, 11, 15, 27, 58, 62, 93, 95, 112, 130, 144, 146, 212, 243, 248, 269, 270, 271, 273, 275, 289, 290, 337, 389, 402, 414, 415, 611, 654, 672, 676, 679, 680, 681, 682, 688, 709, 713], "cat": [4, 135, 182, 327, 364, 407, 464, 465, 466, 467, 471, 472, 473, 492, 496, 505, 534, 552, 557, 558, 666, 695, 700, 713], "jump": [4, 130], "dog": [4, 75, 135, 182, 364, 407, 464, 491, 530, 713], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 65, 69, 83, 84, 87, 90, 91, 96, 117, 118, 119, 128, 129, 134, 135, 142, 149, 153, 156, 157, 161, 179, 180, 185, 190, 192, 196, 231, 234, 279, 287, 288, 304, 305, 306, 307, 309, 317, 318, 341, 344, 357, 358, 362, 366, 367, 370, 372, 391, 392, 400, 401, 406, 407, 413, 418, 421, 426, 427, 430, 445, 447, 449, 452, 475, 488, 489, 547, 596, 598, 623, 624, 625, 626, 629, 630, 632, 633, 636, 645, 663, 668, 690, 713, 747, 748, 750, 753, 755], "cow": [4, 44, 158, 318, 319, 351], "moo": 4, "occasion": [4, 706], "pdf": [4, 59, 172, 713, 748], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 69, 71, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 96, 97, 99, 100, 101, 103, 108, 112, 113, 116, 117, 118, 119, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 172, 178, 179, 180, 185, 186, 210, 223, 242, 252, 263, 266, 267, 268, 269, 273, 274, 279, 284, 285, 286, 287, 288, 292, 298, 299, 300, 304, 305, 306, 307, 309, 315, 316, 318, 324, 329, 331, 332, 333, 334, 336, 337, 338, 340, 344, 356, 357, 358, 360, 362, 363, 365, 366, 367, 370, 371, 373, 374, 376, 378, 389, 390, 391, 392, 394, 396, 397, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 417, 418, 419, 421, 424, 425, 426, 427, 429, 431, 435, 444, 445, 446, 447, 452, 453, 464, 478, 486, 487, 489, 492, 497, 501, 503, 508, 514, 529, 531, 543, 548, 557, 565, 566, 569, 570, 573, 592, 593, 596, 598, 608, 611, 616, 618, 662, 663, 666, 668, 672, 673, 676, 679, 682, 685, 686, 687, 690, 711, 713, 714, 715, 716, 717, 719, 743, 744, 747, 748, 749, 750, 753, 755], "from_panda": [4, 229, 234, 257, 273, 584, 593, 713, 714, 715, 748, 755], "attribut": [4, 36, 144, 181, 210, 248, 261, 270, 279, 309, 398, 414, 467, 685, 686, 687, 695, 709, 710, 713, 715, 720, 726, 732, 738, 743], "iloc": [4, 68, 279, 593, 713, 714, 750, 753], "select": [4, 36, 44, 55, 65, 69, 85, 87, 98, 107, 126, 168, 252, 279, 309, 318, 319, 330, 341, 344, 359, 362, 436, 676, 678, 679, 680, 681, 695, 709, 751], "posit": [4, 15, 65, 69, 112, 142, 147, 160, 223, 225, 252, 279, 290, 341, 344, 389, 413, 416, 429, 477, 504, 509, 512, 513, 529, 553, 554, 555, 568, 570, 590, 598, 611, 720, 726, 732, 751], "20": [4, 21, 40, 44, 50, 62, 69, 126, 127, 158, 168, 179, 222, 255, 279, 292, 318, 325, 335, 337, 344, 397, 398, 399, 436, 440, 445, 489, 549, 675, 713, 747, 750], "30": [4, 21, 43, 44, 62, 64, 69, 126, 127, 129, 158, 188, 222, 279, 292, 317, 318, 335, 337, 340, 344, 397, 398, 399, 401, 440, 581, 626, 630, 632, 633, 634, 635, 636, 644, 675, 688, 713, 747], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 64, 69, 71, 82, 87, 89, 90, 92, 94, 96, 97, 99, 100, 108, 116, 117, 118, 122, 127, 128, 129, 131, 132, 133, 134, 136, 137, 139, 148, 149, 152, 154, 155, 156, 157, 162, 165, 172, 179, 180, 182, 186, 187, 212, 217, 220, 229, 240, 242, 246, 247, 249, 251, 255, 257, 260, 267, 274, 279, 284, 285, 286, 289, 290, 291, 292, 298, 299, 300, 308, 309, 313, 317, 318, 320, 323, 326, 329, 331, 334, 339, 340, 344, 356, 362, 364, 365, 366, 368, 370, 371, 372, 373, 374, 379, 382, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 417, 418, 420, 424, 425, 426, 427, 433, 440, 445, 447, 453, 454, 465, 466, 467, 471, 472, 473, 474, 477, 479, 492, 495, 506, 507, 510, 511, 570, 608, 648, 649, 650, 651, 654, 666, 690, 713, 714, 738, 740, 743, 744, 747, 748, 750, 752, 753, 755], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 58, 61, 62, 63, 69, 71, 82, 86, 87, 88, 94, 97, 99, 100, 103, 112, 113, 116, 122, 124, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 145, 148, 150, 154, 155, 160, 163, 178, 179, 180, 223, 252, 273, 279, 284, 298, 299, 309, 315, 316, 318, 324, 327, 329, 331, 333, 336, 337, 338, 344, 356, 360, 362, 363, 371, 373, 374, 378, 389, 390, 394, 396, 397, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 417, 419, 424, 425, 429, 435, 444, 445, 446, 447, 464, 478, 486, 492, 529, 535, 543, 565, 566, 573, 592, 593, 596, 598, 618, 644, 662, 663, 672, 673, 676, 682, 685, 690, 706, 708, 709, 713, 714, 715, 743, 747, 749, 750, 753], "integ": [4, 16, 19, 51, 56, 69, 125, 127, 130, 131, 135, 171, 173, 180, 201, 223, 230, 231, 232, 233, 234, 238, 239, 247, 260, 263, 265, 267, 273, 276, 278, 279, 291, 327, 331, 344, 351, 397, 399, 402, 403, 407, 463, 477, 478, 484, 490, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 530, 561, 626, 641, 663, 676, 679, 688, 689, 690, 705, 709, 711, 713, 714, 720, 723, 724, 726, 729, 730, 732, 735, 736, 748, 753], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 61, 63, 69, 86, 87, 88, 97, 98, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 151, 154, 155, 178, 180, 195, 223, 267, 270, 279, 284, 309, 315, 316, 317, 324, 331, 336, 338, 344, 360, 362, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 420, 424, 425, 444, 478, 497, 503, 590, 629, 654, 676, 679, 680, 681, 688, 690, 707, 709, 711, 713, 720, 726, 732, 747, 749, 750, 752], "9": [4, 32, 33, 34, 35, 36, 40, 51, 69, 83, 84, 87, 90, 91, 96, 117, 118, 128, 129, 134, 135, 153, 156, 168, 179, 180, 185, 279, 301, 303, 304, 305, 306, 307, 309, 344, 357, 358, 362, 364, 366, 367, 370, 391, 392, 400, 401, 406, 407, 421, 426, 436, 445, 447, 452, 475, 481, 489, 519, 596, 598, 626, 629, 668, 690, 709, 713, 720, 721, 726, 727, 732, 733, 747, 748, 749, 750, 753, 755], "18": [4, 69, 129, 134, 135, 179, 188, 193, 196, 201, 279, 344, 401, 406, 407, 445, 489, 641, 650, 713, 748], "slice": [4, 69, 225, 263, 273, 279, 344, 555, 695, 709, 713, 714], "both": [4, 8, 28, 36, 41, 42, 49, 50, 56, 61, 63, 69, 75, 86, 88, 95, 97, 98, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 143, 154, 155, 178, 181, 205, 256, 261, 262, 279, 284, 296, 300, 309, 315, 316, 324, 325, 331, 336, 338, 344, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 462, 540, 568, 598, 668, 685, 686, 687, 694, 705, 706, 709, 711, 748, 749, 750, 755], "set": [4, 11, 14, 17, 21, 26, 36, 57, 69, 71, 76, 77, 81, 87, 93, 98, 105, 106, 119, 123, 134, 145, 163, 173, 175, 181, 204, 217, 240, 246, 249, 254, 277, 279, 289, 292, 296, 299, 309, 319, 344, 351, 352, 353, 362, 380, 381, 395, 406, 440, 441, 449, 461, 464, 466, 467, 471, 473, 488, 491, 498, 534, 536, 538, 541, 544, 550, 551, 552, 556, 558, 567, 590, 598, 616, 652, 663, 672, 676, 679, 681, 682, 683, 688, 689, 705, 706, 707, 709, 710, 711, 713, 749, 752, 753, 754], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 62, 65, 69, 71, 76, 77, 87, 92, 105, 106, 108, 126, 128, 129, 142, 148, 149, 162, 179, 180, 182, 190, 191, 192, 206, 217, 229, 257, 268, 279, 285, 286, 289, 304, 305, 306, 307, 309, 313, 314, 317, 318, 329, 337, 341, 344, 352, 353, 356, 362, 368, 372, 380, 381, 400, 401, 413, 417, 418, 445, 446, 447, 449, 466, 467, 471, 472, 475, 476, 477, 478, 479, 487, 488, 489, 490, 492, 499, 502, 565, 566, 593, 596, 598, 623, 624, 625, 626, 629, 630, 632, 633, 645, 647, 654, 663, 668, 672, 690, 705, 713, 720, 726, 732, 747, 748, 749, 750, 753, 755], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 65, 69, 75, 83, 84, 87, 89, 90, 91, 96, 98, 117, 118, 128, 129, 134, 149, 153, 156, 158, 161, 163, 179, 180, 185, 186, 190, 192, 279, 296, 304, 305, 306, 307, 309, 313, 317, 318, 334, 341, 344, 357, 358, 362, 365, 366, 367, 370, 391, 392, 400, 401, 406, 418, 421, 426, 430, 445, 447, 452, 453, 475, 481, 489, 490, 505, 565, 566, 593, 596, 598, 623, 624, 625, 626, 629, 630, 645, 653, 654, 663, 668, 679, 684, 685, 686, 687, 690, 709, 713, 747, 748, 750, 753], "more": [4, 11, 14, 15, 19, 21, 36, 43, 69, 71, 139, 163, 168, 171, 173, 180, 188, 193, 202, 267, 279, 290, 291, 292, 309, 317, 344, 411, 436, 473, 495, 503, 551, 598, 621, 627, 642, 662, 668, 675, 676, 679, 680, 681, 682, 688, 690, 705, 706, 707, 708, 709, 710, 711, 713, 749, 750, 752, 753, 754], "loc": [4, 22, 44, 72, 225, 263, 273, 279, 318, 713, 750], "boolean": [4, 51, 75, 76, 77, 87, 90, 91, 96, 105, 106, 110, 119, 121, 125, 126, 145, 172, 179, 195, 204, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 254, 263, 273, 277, 279, 289, 296, 347, 348, 349, 350, 351, 352, 353, 362, 366, 367, 370, 380, 381, 384, 393, 397, 398, 440, 445, 461, 476, 491, 496, 499, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 535, 557, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 629, 630, 631, 632, 633, 634, 635, 666, 676, 679, 680, 681, 682, 710, 750, 751], "mask": [4, 76, 77, 87, 105, 106, 128, 263, 273, 279, 290, 334, 352, 353, 362, 380, 381, 384, 385, 400, 709, 753], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 61, 63, 72, 76, 77, 86, 87, 88, 97, 99, 100, 103, 105, 106, 112, 116, 122, 124, 129, 131, 132, 133, 136, 137, 138, 154, 155, 163, 169, 173, 175, 178, 179, 279, 284, 285, 286, 290, 309, 315, 316, 320, 324, 331, 336, 338, 351, 352, 353, 360, 362, 363, 371, 373, 374, 378, 380, 381, 389, 390, 394, 396, 401, 403, 404, 405, 408, 409, 410, 422, 424, 425, 437, 441, 444, 445, 573, 592, 611, 618, 644, 652, 653, 654, 666, 671, 676, 677, 678, 679, 681, 682, 688, 695, 709, 711, 712, 743, 744, 745, 746, 748, 749, 751, 755], "e": [4, 8, 11, 15, 36, 41, 42, 49, 51, 56, 61, 63, 86, 87, 88, 97, 99, 100, 103, 116, 122, 123, 124, 128, 131, 132, 133, 134, 136, 137, 138, 145, 154, 155, 160, 163, 171, 173, 178, 179, 180, 252, 273, 279, 284, 298, 309, 315, 316, 324, 331, 336, 338, 360, 362, 363, 371, 373, 374, 378, 390, 394, 395, 396, 400, 403, 404, 405, 406, 408, 409, 410, 424, 425, 429, 444, 445, 447, 473, 489, 491, 492, 497, 503, 504, 529, 535, 538, 563, 565, 566, 644, 663, 668, 675, 676, 679, 680, 681, 682, 690, 705, 706, 707, 709, 711, 713, 715, 720, 726, 732, 750], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 62, 64, 71, 74, 109, 119, 120, 123, 125, 128, 129, 134, 139, 144, 150, 158, 179, 181, 209, 210, 214, 215, 224, 248, 261, 263, 273, 279, 290, 293, 295, 297, 298, 301, 310, 311, 319, 328, 329, 337, 340, 346, 361, 387, 393, 395, 397, 400, 401, 406, 411, 414, 419, 422, 423, 445, 473, 477, 490, 514, 515, 516, 517, 523, 524, 525, 528, 541, 550, 567, 584, 589, 596, 598, 616, 652, 668, 675, 676, 679, 680, 681, 682, 688, 689, 694, 695, 696, 698, 701, 702, 705, 709, 711, 714, 715, 720, 726, 732, 738, 743, 749, 750, 751, 753, 755], "iterrow": 4, "itertupl": 4, "transpos": [5, 280, 665, 695, 747, 751], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 61, 63, 66, 86, 88, 97, 99, 100, 103, 116, 122, 124, 125, 126, 127, 130, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 159, 160, 161, 168, 177, 178, 214, 215, 217, 227, 229, 242, 246, 247, 249, 252, 284, 285, 286, 289, 290, 292, 298, 300, 310, 311, 314, 315, 316, 324, 331, 336, 338, 342, 360, 363, 371, 373, 374, 378, 379, 382, 390, 394, 396, 397, 399, 402, 403, 404, 405, 408, 409, 410, 411, 424, 425, 428, 429, 430, 436, 444, 464, 465, 472, 473, 474, 505, 509, 546, 555, 705, 706, 707, 709, 713, 750, 752], "ncol": [5, 177], "nrow": [5, 177, 676, 713, 750], "self": [5, 14, 62, 89, 112, 119, 142, 161, 168, 177, 186, 229, 257, 280, 289, 293, 337, 365, 389, 402, 413, 430, 436, 443, 453, 496, 557, 707, 709, 711], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 62, 75, 81, 83, 84, 90, 92, 95, 96, 98, 104, 107, 117, 118, 126, 128, 129, 139, 149, 150, 151, 153, 156, 163, 164, 169, 171, 176, 177, 182, 185, 223, 287, 288, 290, 292, 296, 300, 302, 303, 309, 314, 319, 323, 337, 357, 358, 364, 366, 368, 370, 391, 392, 398, 400, 401, 411, 418, 419, 420, 421, 426, 432, 437, 452, 457, 481, 491, 492, 496, 497, 503, 514, 535, 541, 544, 550, 551, 556, 567, 568, 569, 585, 586, 587, 590, 598, 604, 605, 606, 607, 608, 612, 615, 616, 619, 644, 654, 663, 665, 666, 675, 676, 679, 680, 681, 685, 688, 689, 705, 707, 709, 712, 713, 720, 726, 732, 749, 750, 751, 752, 753, 755], "differ": [5, 11, 40, 44, 50, 51, 54, 62, 81, 104, 107, 119, 125, 126, 128, 150, 151, 168, 173, 177, 210, 273, 313, 318, 325, 329, 337, 397, 398, 400, 419, 420, 436, 481, 512, 513, 541, 543, 551, 582, 584, 585, 586, 587, 598, 604, 605, 606, 607, 611, 612, 615, 619, 653, 666, 672, 679, 684, 685, 686, 687, 689, 694, 705, 706, 707, 709, 711, 714, 750, 753, 755], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 61, 63, 86, 88, 91, 94, 97, 99, 100, 103, 111, 114, 116, 122, 124, 125, 126, 131, 132, 133, 136, 137, 138, 150, 151, 154, 155, 168, 169, 177, 178, 265, 284, 290, 315, 316, 320, 324, 331, 336, 338, 360, 363, 367, 371, 373, 374, 378, 388, 390, 394, 396, 397, 398, 403, 404, 405, 408, 409, 410, 419, 420, 424, 425, 436, 437, 444, 481, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 662, 674, 684, 685, 686, 687, 705, 752], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 61, 63, 74, 81, 83, 84, 86, 88, 89, 90, 92, 95, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 145, 149, 150, 151, 153, 154, 155, 156, 163, 168, 169, 175, 177, 178, 179, 181, 185, 186, 187, 210, 265, 279, 284, 287, 288, 289, 290, 291, 299, 302, 303, 315, 316, 324, 329, 331, 336, 338, 346, 357, 358, 360, 363, 364, 365, 366, 368, 370, 371, 373, 374, 378, 390, 391, 392, 394, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 410, 411, 418, 419, 420, 421, 424, 425, 426, 436, 437, 441, 444, 445, 452, 453, 454, 457, 481, 491, 492, 496, 497, 503, 509, 535, 541, 544, 550, 551, 567, 573, 582, 584, 585, 586, 587, 590, 592, 596, 604, 605, 606, 607, 612, 615, 616, 618, 619, 644, 653, 654, 662, 672, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 705, 706, 707, 709, 712, 713, 714, 747, 750, 751, 753], "becaus": [5, 12, 13, 98, 177, 287, 288, 290, 598, 672, 707, 709, 713, 748, 750, 753, 755], "behavior": [5, 128, 177, 251, 273, 319, 400, 567, 653, 666, 676, 679, 688, 689, 705, 706, 709, 710, 713, 749, 750, 752, 754, 755], "absolut": [7, 210, 283, 598, 684, 685, 686, 687, 713, 755], "numer": [7, 36, 40, 51, 90, 91, 96, 98, 119, 123, 128, 230, 231, 232, 233, 234, 238, 239, 255, 283, 309, 364, 366, 367, 370, 395, 400, 449, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 581, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 679, 689, 695, 706, 709, 711, 713, 714, 748, 749, 750, 751, 755], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 62, 75, 76, 77, 94, 98, 105, 106, 127, 129, 134, 135, 141, 171, 173, 240, 247, 262, 265, 270, 271, 273, 283, 285, 286, 296, 309, 314, 319, 325, 326, 337, 351, 352, 353, 364, 380, 381, 399, 401, 406, 407, 456, 458, 459, 460, 464, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 542, 543, 545, 547, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 573, 576, 577, 578, 579, 580, 582, 585, 586, 587, 589, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 653, 663, 676, 679, 680, 681, 689, 705, 706, 707, 709, 710, 711, 713, 720, 726, 732, 747, 748, 749, 750, 752, 755], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 62, 64, 65, 83, 84, 85, 90, 91, 96, 112, 114, 117, 118, 119, 126, 134, 139, 150, 153, 156, 166, 173, 180, 185, 220, 251, 253, 273, 283, 289, 290, 296, 304, 305, 306, 307, 325, 330, 337, 340, 341, 357, 358, 359, 364, 366, 367, 370, 389, 391, 392, 406, 411, 419, 421, 422, 426, 434, 452, 486, 490, 492, 499, 529, 536, 538, 563, 567, 573, 584, 592, 593, 611, 616, 618, 652, 654, 662, 663, 665, 666, 674, 675, 676, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 695, 698, 701, 702, 705, 706, 707, 708, 709, 710, 712, 713, 714, 747, 749, 751, 753], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 62, 83, 84, 90, 91, 95, 96, 98, 112, 117, 118, 126, 134, 150, 153, 156, 168, 185, 283, 293, 304, 305, 306, 307, 337, 357, 358, 366, 367, 370, 389, 391, 392, 406, 419, 421, 426, 436, 452, 485, 505, 559, 560, 564, 573, 592, 611, 616, 618, 663, 666, 676, 679, 698, 700, 701, 702, 713, 714, 751], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 65, 71, 74, 75, 85, 93, 95, 113, 114, 117, 118, 119, 129, 130, 144, 156, 163, 165, 168, 169, 173, 179, 180, 208, 210, 218, 219, 248, 249, 260, 283, 291, 292, 298, 299, 309, 318, 319, 325, 330, 341, 346, 359, 379, 382, 391, 392, 401, 402, 414, 426, 436, 437, 445, 449, 463, 472, 486, 494, 498, 502, 503, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 533, 534, 543, 544, 551, 552, 556, 558, 559, 560, 563, 564, 565, 566, 581, 590, 621, 627, 642, 662, 664, 666, 669, 672, 673, 674, 676, 679, 682, 688, 689, 690, 695, 705, 706, 707, 708, 711, 713, 748, 750, 752, 753, 754, 755], "33": [7, 30, 52, 247, 283], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 62, 71, 76, 77, 83, 84, 91, 94, 101, 105, 106, 119, 124, 134, 135, 138, 140, 143, 148, 149, 153, 165, 172, 178, 185, 208, 222, 283, 290, 309, 315, 316, 323, 335, 337, 352, 353, 357, 358, 367, 376, 380, 381, 393, 396, 406, 407, 410, 412, 417, 418, 421, 440, 444, 449, 452, 474, 676, 689, 713, 748, 750, 752, 753], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 61, 62, 63, 74, 83, 84, 86, 88, 90, 91, 92, 96, 97, 98, 99, 100, 103, 108, 109, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 147, 149, 150, 151, 153, 154, 155, 156, 158, 160, 178, 179, 185, 247, 252, 284, 287, 288, 291, 295, 297, 299, 304, 305, 306, 307, 315, 316, 318, 320, 324, 328, 329, 331, 336, 337, 338, 346, 357, 358, 360, 363, 366, 367, 368, 370, 371, 373, 374, 378, 387, 390, 391, 392, 394, 395, 396, 399, 401, 403, 404, 405, 406, 408, 409, 410, 411, 416, 418, 419, 420, 421, 424, 425, 426, 429, 444, 445, 452, 464, 481, 582, 584, 590, 694, 713, 747, 750, 751], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 61, 62, 63, 83, 84, 86, 88, 90, 91, 92, 95, 96, 97, 99, 100, 103, 116, 117, 118, 122, 124, 125, 126, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 150, 152, 153, 154, 155, 156, 158, 168, 173, 178, 180, 182, 185, 209, 223, 242, 244, 249, 251, 265, 267, 270, 271, 272, 273, 276, 284, 287, 288, 302, 315, 316, 318, 324, 331, 336, 337, 338, 357, 358, 360, 363, 366, 367, 368, 370, 371, 373, 374, 378, 390, 391, 392, 394, 396, 397, 398, 401, 402, 403, 404, 405, 408, 409, 410, 417, 418, 419, 421, 424, 425, 426, 436, 444, 452, 475, 668, 690, 695, 705, 706, 709], "fill_valu": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 114, 116, 122, 124, 125, 131, 132, 133, 136, 137, 138, 147, 154, 155, 178, 180, 252, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 397, 403, 404, 405, 408, 409, 410, 416, 424, 425, 444, 590, 674, 690], "get": [8, 41, 42, 43, 49, 56, 61, 62, 63, 70, 76, 77, 82, 86, 88, 97, 98, 99, 100, 103, 105, 106, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 223, 241, 245, 251, 263, 273, 284, 315, 316, 317, 324, 331, 336, 337, 338, 345, 352, 353, 360, 363, 371, 373, 374, 375, 378, 380, 381, 390, 394, 396, 403, 404, 405, 408, 409, 410, 415, 424, 425, 444, 553, 582, 611, 620, 626, 666, 667, 676, 680, 681, 695, 709, 710, 747, 750, 751], "addit": [8, 15, 51, 91, 122, 168, 173, 284, 367, 394, 436, 487, 514, 532, 540, 549, 676, 678, 679, 684, 685, 686, 687, 705, 706, 707, 711, 755], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 108, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 158, 178, 284, 299, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 464, 486, 582, 589, 590, 614, 617, 713, 747], "binari": [8, 41, 42, 43, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 168, 173, 178, 284, 315, 316, 317, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 436, 444, 669, 675, 680, 681, 695, 711, 750, 755], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 61, 62, 63, 86, 88, 89, 95, 97, 99, 100, 103, 116, 117, 118, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 156, 168, 178, 186, 188, 193, 202, 279, 284, 290, 298, 315, 316, 317, 318, 319, 320, 324, 329, 331, 336, 337, 338, 360, 363, 365, 371, 373, 374, 378, 390, 391, 392, 394, 396, 403, 404, 405, 408, 409, 410, 419, 424, 425, 426, 436, 444, 453, 553, 573, 585, 586, 587, 592, 604, 605, 606, 607, 612, 615, 616, 618, 619, 621, 627, 642, 695, 705, 709, 711, 715, 747, 750, 751, 752, 753], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 61, 63, 65, 66, 71, 86, 88, 97, 99, 100, 103, 116, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 144, 154, 155, 178, 214, 215, 227, 248, 284, 296, 310, 311, 315, 316, 318, 324, 331, 334, 336, 338, 341, 342, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 411, 414, 424, 425, 444, 514, 515, 516, 517, 523, 524, 525, 527, 528, 529, 532, 533, 534, 540, 543, 544, 547, 549, 552, 553, 557, 558, 559, 560, 563, 564, 567, 705, 709, 713, 720, 725, 726, 731, 732, 737, 749, 753], "substitut": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 364, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 686], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 61, 63, 76, 77, 86, 88, 97, 98, 99, 100, 103, 105, 106, 109, 113, 114, 116, 122, 124, 125, 131, 132, 133, 136, 137, 138, 152, 154, 155, 164, 170, 178, 186, 241, 245, 279, 284, 295, 297, 301, 303, 315, 316, 318, 324, 327, 328, 331, 336, 338, 352, 353, 360, 363, 371, 373, 374, 378, 380, 381, 387, 390, 394, 396, 397, 403, 404, 405, 408, 409, 410, 424, 425, 432, 439, 444, 453, 486, 590, 598, 673, 674, 676, 679, 695, 712, 714, 751], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 61, 63, 82, 86, 88, 95, 97, 98, 99, 100, 103, 110, 113, 116, 122, 124, 125, 131, 132, 133, 136, 137, 138, 154, 155, 178, 180, 181, 182, 219, 223, 225, 246, 267, 271, 273, 284, 292, 315, 316, 320, 324, 331, 336, 338, 339, 351, 360, 363, 371, 372, 373, 374, 378, 390, 394, 396, 402, 403, 404, 405, 408, 409, 410, 424, 425, 444, 473, 475, 479, 491, 493, 497, 503, 514, 515, 524, 529, 598, 611, 662, 666, 673, 676, 679, 680, 681, 682, 690, 705, 706, 707, 709, 711, 713, 720, 722, 726, 728, 732, 734, 747, 749, 750, 753], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 61, 63, 83, 84, 86, 88, 89, 92, 93, 94, 97, 99, 100, 103, 114, 116, 122, 124, 128, 131, 132, 133, 136, 137, 138, 154, 155, 178, 185, 186, 220, 279, 284, 290, 296, 299, 315, 316, 317, 324, 329, 331, 336, 338, 357, 358, 360, 363, 365, 368, 371, 373, 374, 378, 390, 394, 396, 398, 400, 403, 404, 405, 408, 409, 410, 424, 425, 444, 452, 453, 476, 477, 478, 529, 584, 590, 663, 672, 674, 676, 688, 711, 753], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 58, 61, 62, 63, 86, 88, 97, 99, 100, 103, 110, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 187, 208, 260, 265, 269, 270, 271, 279, 284, 315, 316, 317, 324, 331, 336, 337, 338, 351, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 454, 463, 477, 478, 489, 491, 494, 502, 535, 543, 544, 545, 557, 561, 562, 653, 663, 666, 689, 709, 713, 715], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 61, 63, 86, 88, 97, 99, 100, 101, 103, 116, 121, 122, 124, 125, 128, 131, 132, 133, 135, 136, 137, 138, 144, 154, 155, 164, 170, 171, 173, 175, 178, 182, 217, 219, 248, 284, 290, 296, 300, 309, 315, 316, 317, 318, 323, 324, 331, 336, 338, 360, 363, 371, 373, 374, 376, 378, 390, 394, 396, 397, 400, 403, 404, 405, 407, 408, 409, 410, 414, 424, 425, 432, 439, 441, 444, 465, 471, 472, 473, 476, 477, 478, 482, 486, 491, 510, 511, 514, 529, 531, 535, 567, 573, 592, 618, 667, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 706, 707, 709, 711, 713, 715, 738, 749, 750, 752, 753, 755], "structur": [8, 41, 42, 43, 49, 56, 58, 60, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 166, 168, 178, 242, 253, 284, 315, 316, 317, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 434, 436, 444, 665, 668, 708, 709, 713, 747, 750, 755], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 59, 61, 62, 63, 65, 71, 72, 74, 86, 88, 90, 91, 96, 97, 99, 100, 103, 104, 107, 110, 111, 116, 117, 118, 119, 122, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 150, 153, 154, 155, 156, 158, 160, 163, 169, 178, 179, 185, 223, 225, 247, 249, 252, 263, 265, 272, 273, 278, 284, 293, 301, 302, 313, 315, 316, 318, 324, 331, 334, 336, 337, 338, 341, 346, 360, 363, 366, 367, 370, 371, 373, 374, 378, 379, 382, 386, 388, 390, 391, 392, 394, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 419, 421, 424, 425, 426, 429, 437, 444, 445, 449, 452, 477, 484, 487, 488, 491, 492, 497, 500, 501, 503, 504, 508, 509, 512, 513, 530, 532, 535, 536, 537, 540, 543, 544, 547, 548, 549, 551, 553, 555, 556, 567, 568, 570, 574, 575, 582, 583, 584, 585, 586, 587, 588, 590, 594, 595, 596, 598, 603, 604, 605, 606, 607, 610, 612, 614, 615, 617, 619, 653, 659, 661, 663, 668, 675, 676, 678, 679, 680, 681, 684, 686, 687, 688, 705, 707, 709, 711, 713, 720, 726, 732, 750], "broadcast": [8, 15, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 616, 749], "across": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 598, 706, 707, 709, 713, 747], "match": [8, 16, 17, 28, 41, 42, 49, 56, 61, 62, 63, 75, 86, 88, 95, 97, 99, 100, 103, 116, 122, 124, 125, 128, 131, 132, 133, 136, 137, 138, 139, 151, 154, 155, 178, 181, 240, 263, 284, 300, 315, 316, 324, 331, 336, 337, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 397, 400, 403, 404, 405, 408, 409, 410, 411, 420, 424, 425, 444, 478, 486, 491, 496, 497, 503, 531, 544, 551, 556, 557, 567, 590, 608, 662, 679, 680, 681, 685, 695, 706, 707, 709, 713, 714, 749, 750, 753, 755], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 58, 61, 62, 63, 71, 75, 86, 88, 91, 97, 99, 100, 103, 112, 114, 116, 122, 124, 125, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 154, 155, 164, 165, 170, 173, 178, 181, 240, 284, 290, 292, 315, 316, 324, 331, 336, 337, 338, 351, 360, 363, 364, 367, 371, 372, 373, 374, 378, 389, 390, 394, 396, 400, 403, 404, 405, 406, 408, 409, 410, 411, 424, 425, 432, 433, 439, 444, 447, 449, 464, 486, 491, 492, 497, 503, 509, 529, 535, 551, 556, 611, 662, 663, 665, 668, 674, 676, 678, 679, 680, 681, 685, 686, 687, 689, 705, 707, 713, 747, 750, 753, 755], "multiindex": [8, 26, 41, 42, 44, 49, 56, 61, 62, 63, 74, 86, 88, 90, 91, 96, 97, 99, 100, 103, 116, 121, 122, 124, 126, 129, 130, 131, 132, 133, 136, 137, 138, 145, 148, 150, 154, 155, 158, 178, 182, 210, 223, 229, 242, 249, 251, 257, 284, 299, 315, 316, 318, 324, 331, 336, 337, 338, 346, 360, 363, 366, 367, 370, 371, 373, 374, 378, 390, 394, 396, 401, 402, 403, 404, 405, 408, 409, 410, 417, 419, 424, 425, 444, 541, 550, 551, 556, 695, 709, 714, 749, 751], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 61, 63, 81, 86, 88, 97, 99, 100, 103, 111, 116, 122, 124, 126, 129, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 181, 187, 210, 265, 284, 303, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 388, 390, 394, 396, 401, 403, 404, 405, 408, 409, 410, 419, 424, 425, 444, 454, 491, 496, 541, 544, 550, 551, 567, 644, 684, 686, 687, 706, 713, 750, 753], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 61, 63, 86, 88, 97, 99, 100, 103, 109, 111, 116, 122, 124, 125, 129, 131, 132, 133, 136, 137, 138, 154, 155, 178, 220, 263, 284, 295, 297, 315, 316, 324, 328, 329, 331, 336, 338, 360, 363, 371, 373, 374, 378, 387, 388, 390, 394, 396, 401, 403, 404, 405, 408, 409, 410, 424, 425, 444, 464, 487, 490, 532, 540, 549, 568, 574, 575, 583, 584, 588, 590, 594, 595, 603, 610, 750, 751], "exist": [8, 41, 42, 44, 49, 51, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 128, 131, 132, 133, 136, 137, 138, 145, 154, 155, 168, 178, 245, 284, 315, 316, 318, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 400, 403, 404, 405, 408, 409, 410, 424, 425, 436, 444, 464, 667, 683, 706, 707, 713, 715, 748, 755], "success": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "align": [8, 14, 41, 42, 49, 56, 61, 62, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 139, 154, 155, 178, 181, 279, 284, 315, 316, 324, 331, 336, 337, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 411, 424, 425, 444, 447, 464, 706, 753], "befor": [8, 9, 41, 42, 49, 51, 56, 61, 63, 86, 88, 97, 99, 100, 103, 111, 116, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 179, 284, 285, 293, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 388, 390, 394, 396, 403, 404, 405, 408, 409, 410, 419, 424, 425, 444, 445, 486, 541, 550, 555, 652, 665, 676, 679, 682, 696, 705, 709, 713, 747], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 61, 62, 63, 64, 71, 83, 84, 86, 88, 90, 91, 92, 96, 97, 98, 99, 100, 103, 111, 116, 117, 118, 119, 120, 122, 123, 124, 131, 132, 133, 136, 137, 138, 149, 154, 155, 156, 178, 240, 242, 284, 293, 301, 303, 315, 316, 324, 331, 334, 336, 337, 338, 340, 357, 358, 360, 363, 366, 367, 368, 370, 371, 373, 374, 378, 388, 390, 391, 392, 393, 394, 395, 396, 403, 404, 405, 408, 409, 410, 418, 424, 425, 426, 444, 480, 484, 494, 495, 530, 542, 576, 585, 586, 587, 589, 596, 597, 598, 604, 605, 606, 607, 612, 614, 615, 617, 619, 662, 663, 666, 695, 706, 707, 709, 713, 750, 751], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 61, 63, 71, 86, 88, 89, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 172, 178, 186, 225, 284, 296, 315, 316, 318, 324, 327, 329, 331, 336, 338, 360, 363, 364, 365, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 411, 424, 425, 440, 444, 447, 453, 486, 491, 493, 529, 543, 545, 590, 676, 679, 706, 707, 709, 711, 750], "locat": [8, 41, 42, 44, 49, 50, 56, 61, 63, 72, 75, 86, 88, 97, 99, 100, 103, 116, 122, 124, 125, 131, 132, 133, 136, 137, 138, 142, 154, 155, 178, 263, 265, 273, 284, 315, 316, 318, 324, 325, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 413, 424, 425, 444, 500, 537, 545, 561, 562, 675, 676, 679, 680, 681, 682, 706, 753], "arithmet": [8, 41, 42, 43, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 317, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444, 750, 753, 755], "angl": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "degre": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 153, 154, 155, 178, 185, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 421, 424, 425, 444, 452, 488, 536, 537, 598, 614, 617, 659, 661], "360": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "180": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "circl": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "triangl": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "rectangl": [8, 41, 42, 49, 56, 61, 63, 86, 88, 97, 99, 100, 103, 116, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 284, 315, 316, 324, 331, 336, 338, 360, 363, 371, 373, 374, 378, 390, 394, 396, 403, 404, 405, 408, 409, 410, 424, 425, 444], "361": [8, 122, 284, 394], "181": [8, 122, 284, 394], "prefix": [9, 10, 285, 286, 666, 668, 676, 705], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 62, 65, 85, 94, 95, 112, 123, 128, 129, 134, 135, 150, 163, 168, 169, 171, 173, 223, 273, 285, 286, 290, 309, 318, 325, 330, 337, 341, 359, 389, 395, 400, 401, 402, 406, 407, 419, 436, 437, 475, 497, 503, 551, 584, 593, 598, 653, 663, 668, 675, 676, 679, 680, 681, 682, 689, 705, 706, 707, 708, 709, 711, 713, 714, 720, 726, 732, 747, 748, 749, 750, 752, 753, 755], "str": [9, 10, 18, 19, 51, 52, 55, 58, 60, 71, 74, 81, 85, 93, 95, 107, 110, 111, 114, 119, 121, 128, 129, 130, 135, 141, 142, 143, 145, 151, 158, 163, 164, 165, 167, 168, 170, 171, 173, 179, 187, 188, 193, 202, 204, 205, 223, 254, 256, 270, 271, 277, 279, 285, 286, 291, 320, 330, 346, 359, 388, 393, 400, 401, 402, 407, 413, 432, 435, 436, 439, 445, 454, 461, 462, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 590, 592, 616, 618, 621, 627, 642, 644, 652, 653, 662, 663, 664, 666, 667, 668, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 700, 701, 707, 713, 738, 739, 747, 750, 752], "add": [9, 10, 43, 62, 72, 81, 168, 285, 286, 317, 337, 436, 465, 466, 666, 676, 707, 709, 710, 713, 750], "updat": [9, 10, 28, 74, 285, 286, 300, 346, 705, 706], "add_suffix": [9, 285], "suffix": [9, 10, 95, 285, 286, 705], "item_": [9, 285], "item_0": [9, 285], "item_1": [9, 285], "item_2": [9, 285], "item_3": [9, 285], "col_": [9, 285], "col_a": [9, 285], "col_b": [9, 285], "after": [10, 114, 128, 179, 286, 290, 400, 422, 445, 465, 541, 550, 555, 560, 674, 676, 679, 682, 705, 713, 750], "add_prefix": [10, 286], "_item": [10, 286], "0_item": [10, 286], "1_item": [10, 286], "2_item": [10, 286], "3_item": [10, 286], "_col": [10, 286], "a_col": [10, 286], "b_col": [10, 286], "aggreg": [11, 62, 114, 129, 337, 401, 592, 616, 654, 662, 674, 712, 713, 751], "over": [11, 16, 17, 40, 78, 98, 119, 139, 252, 411, 582, 593, 608, 705, 706, 709, 749, 750, 755], "specifi": [11, 16, 26, 44, 46, 54, 58, 71, 72, 91, 94, 104, 107, 108, 113, 119, 120, 125, 126, 128, 129, 134, 135, 139, 150, 151, 160, 165, 168, 169, 173, 179, 180, 188, 193, 202, 219, 220, 252, 267, 279, 299, 318, 329, 367, 393, 397, 400, 401, 406, 407, 411, 419, 420, 429, 436, 437, 445, 454, 471, 472, 473, 474, 476, 477, 482, 486, 504, 509, 534, 543, 551, 552, 554, 555, 556, 558, 568, 570, 573, 584, 590, 592, 618, 621, 627, 642, 644, 653, 662, 663, 668, 673, 676, 678, 679, 680, 681, 684, 685, 686, 687, 688, 690, 705, 706, 707, 709, 713, 748, 749, 750, 753], "accept": [11, 18, 19, 40, 81, 139, 212, 278, 291, 313, 364, 411, 491, 496, 504, 557, 573, 582, 592, 598, 618, 689, 705, 707, 709, 711, 748, 749, 750, 755], "g": [11, 36, 112, 163, 171, 173, 179, 309, 389, 445, 473, 489, 491, 492, 497, 502, 503, 529, 535, 538, 565, 566, 644, 668, 675, 676, 679, 680, 681, 682, 705, 706, 707, 709, 711, 713, 715, 720, 726, 732, 750], "sum": [11, 35, 62, 117, 118, 129, 134, 139, 157, 307, 337, 391, 392, 401, 406, 411, 427, 449, 573, 580, 592, 602, 618, 709, 713, 747, 749, 751, 755], "min": [11, 33, 36, 123, 188, 193, 202, 251, 305, 309, 395, 573, 579, 581, 592, 601, 611, 618, 621, 627, 642, 749, 753], "max": [11, 32, 36, 62, 123, 134, 304, 309, 337, 395, 406, 573, 578, 581, 592, 600, 611, 616, 618, 713, 749, 750], "per": [11, 16, 29, 71, 119, 150, 182, 298, 419, 479, 497, 512, 513, 543, 573, 592, 596, 598, 616, 618, 676, 679, 680, 681, 706, 713, 747, 749, 752], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 58, 62, 71, 75, 81, 83, 84, 85, 90, 91, 92, 95, 96, 107, 112, 117, 118, 119, 120, 139, 149, 156, 169, 173, 181, 182, 210, 229, 257, 278, 292, 300, 309, 317, 318, 330, 337, 357, 358, 359, 366, 367, 368, 370, 379, 382, 389, 391, 392, 393, 402, 411, 418, 426, 437, 491, 492, 503, 505, 508, 509, 529, 544, 548, 551, 556, 589, 608, 663, 666, 668, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 705, 706, 707, 709, 710, 711, 714, 715, 720, 726, 732, 748, 749, 750, 751, 752, 753, 754, 755], "sever": [11, 700, 701, 706, 750, 752], "arg": [11, 15, 17, 32, 33, 34, 35, 112, 167, 168, 169, 173, 290, 364, 389, 397, 400, 419, 436, 437, 578, 579, 580, 585, 586, 587, 593, 600, 601, 602, 604, 605, 606, 607, 611, 612, 615, 619, 644, 654, 656, 657, 658, 660, 677, 678, 679, 681, 688, 689, 750], "bool_onli": [12, 13, 287, 288], "skipna": [12, 13, 32, 33, 34, 35, 83, 84, 90, 91, 92, 96, 117, 118, 149, 153, 156, 185, 287, 288, 304, 305, 306, 307, 357, 358, 366, 367, 368, 370, 391, 392, 418, 421, 426, 452, 753], "exclud": [12, 13, 32, 33, 34, 35, 36, 83, 84, 90, 91, 92, 96, 117, 118, 143, 149, 153, 156, 185, 279, 287, 288, 296, 301, 303, 304, 305, 306, 307, 309, 357, 358, 366, 367, 368, 370, 391, 392, 418, 421, 426, 449, 452, 581, 596, 598, 753], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 153, 185, 287, 288, 292, 304, 305, 306, 307, 323, 421, 452, 681, 705, 747, 750], "empti": [12, 13, 76, 77, 82, 105, 106, 117, 118, 127, 143, 148, 156, 165, 247, 287, 288, 320, 352, 353, 380, 381, 391, 392, 399, 417, 426, 433, 486, 518, 529, 541, 550, 666, 676, 711, 750, 753], "equal": [12, 13, 49, 61, 74, 86, 95, 103, 123, 128, 134, 139, 205, 218, 229, 256, 257, 287, 288, 324, 336, 346, 360, 378, 395, 400, 406, 411, 462, 529, 568, 663, 684, 685, 686, 687, 689, 711, 753, 755], "zero": [12, 13, 23, 287, 288, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 528, 676, 679, 711, 720, 726, 732, 750], "current": [12, 13, 14, 26, 30, 40, 51, 74, 83, 84, 90, 92, 96, 98, 117, 118, 125, 127, 128, 139, 145, 149, 153, 156, 163, 185, 220, 247, 279, 287, 288, 289, 299, 302, 346, 357, 358, 364, 366, 368, 370, 391, 392, 399, 400, 411, 418, 421, 426, 452, 457, 491, 492, 497, 503, 535, 567, 596, 616, 653, 682, 684, 685, 687, 697, 705, 706, 707, 709, 710, 713, 750, 754], "ignore_index": [14, 45, 52, 139, 150, 151, 289, 319, 326, 411, 419, 420, 464, 481], "verify_integr": [14, 145, 265, 289], "sort": [14, 19, 45, 55, 62, 81, 85, 95, 114, 142, 150, 151, 182, 217, 229, 242, 251, 257, 273, 279, 291, 319, 330, 337, 359, 372, 379, 382, 413, 419, 420, 449, 464, 481, 663, 674, 695, 705, 706, 713, 714, 749, 755], "end": [14, 19, 150, 151, 188, 193, 202, 251, 291, 321, 419, 420, 481, 496, 501, 503, 508, 509, 539, 547, 548, 551, 554, 555, 557, 621, 626, 627, 629, 630, 632, 633, 636, 642, 676, 679, 682, 750], "caller": [14, 28, 55, 65, 74, 85, 89, 123, 127, 139, 186, 247, 249, 300, 330, 341, 346, 359, 364, 365, 395, 399, 411, 453, 486, 551, 556], "ad": [14, 465, 466, 473, 538, 705, 706, 707, 713], "do": [14, 15, 44, 46, 50, 125, 130, 145, 217, 229, 257, 273, 289, 290, 318, 320, 325, 397, 402, 472, 473, 611, 676, 680, 681, 705, 706, 707, 709, 711, 713, 714, 747, 750, 753, 755], "concat": [14, 289, 486, 671, 695, 707, 751], "gener": [14, 15, 36, 37, 51, 71, 139, 144, 179, 214, 248, 289, 309, 310, 411, 414, 445, 488, 536, 537, 581, 598, 653, 654, 668, 695, 705, 706, 707, 709, 711, 712, 714, 750, 751], "concaten": [14, 289, 464, 475, 486, 493, 529, 680, 713, 749, 755], "unchang": [14, 28, 300, 568], "computation": 14, "intens": [14, 747], "than": [14, 15, 46, 61, 63, 71, 86, 88, 117, 118, 125, 139, 156, 173, 182, 296, 336, 338, 360, 363, 391, 392, 397, 411, 426, 449, 458, 459, 460, 473, 491, 495, 500, 503, 512, 513, 541, 544, 550, 567, 568, 585, 586, 587, 598, 604, 605, 606, 607, 612, 615, 619, 649, 651, 668, 676, 705, 706, 707, 709, 711, 713, 714, 748, 750, 753, 755], "better": [14, 62, 139, 337, 411, 676, 680, 681, 706, 749], "solut": [14, 144, 248, 414, 705, 711], "those": [14, 15, 36, 123, 290, 309, 395, 464, 529, 573, 592, 618, 696, 705, 706, 709, 711, 750], "origin": [14, 21, 28, 51, 89, 94, 126, 129, 141, 181, 186, 204, 205, 254, 256, 277, 292, 300, 321, 365, 401, 402, 447, 453, 461, 462, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 553, 652, 653, 655, 656, 657, 658, 659, 660, 661, 688, 705], "onc": [14, 139, 411, 503, 679, 705, 707, 709, 713], "ab": [14, 263, 488, 497, 508, 532, 548, 549, 555, 750, 753], "df2": [14, 179, 445, 464, 668, 685, 713, 750, 753], "With": [14, 28, 71, 135, 201, 289, 296, 300, 319, 407, 449, 641, 679, 709, 711, 713, 747, 750], "follow": [14, 15, 71, 107, 129, 163, 290, 313, 401, 402, 491, 529, 541, 550, 567, 573, 592, 618, 644, 653, 676, 681, 689, 694, 705, 706, 707, 709, 710, 711, 743, 749, 750, 752, 755], "while": [14, 98, 163, 173, 298, 593, 668, 707, 709, 714, 750, 753], "recommend": [14, 125, 126, 706, 707], "show": [14, 71, 75, 76, 77, 105, 106, 129, 352, 353, 380, 381, 401, 684, 685, 686, 687, 706, 709, 713, 750], "wai": [14, 62, 128, 337, 400, 654, 688, 705, 706, 707, 709, 711, 743, 747, 748, 750, 753, 755], "sourc": [14, 16, 17, 166, 253, 434, 665, 675, 676, 680, 681, 706, 707, 714], "less": [14, 46, 86, 88, 296, 360, 363, 458, 459, 460, 473, 567, 568, 649, 651, 679, 706], "effici": [14, 16, 94, 175, 441, 708, 709, 753], "abov": [14, 15, 62, 145, 179, 290, 337, 445, 705, 709, 711, 750, 753], "func": [15, 16, 17, 18, 112, 290, 389, 573, 592, 593, 611, 618, 654, 713], "raw": [15, 652, 675, 680, 681], "result_typ": 15, "along": [15, 74, 90, 91, 96, 98, 123, 150, 151, 346, 366, 367, 370, 395, 419, 420, 464, 753], "reli": [15, 290, 708, 709, 713, 755], "numba": [15, 16, 121, 290, 654, 751, 755], "jit": [15, 16, 290, 750, 755], "compil": [15, 121, 290, 492, 535, 544, 546, 654, 707, 750, 755], "thu": [15, 290, 477, 708, 713, 748, 750], "within": [15, 55, 62, 85, 134, 290, 330, 337, 359, 406, 491, 500, 512, 513, 536, 537, 545, 585, 586, 587, 590, 604, 605, 606, 607, 612, 615, 619, 676, 679, 682, 700, 705, 707, 711, 750], "limit": [15, 16, 24, 25, 36, 53, 54, 74, 109, 111, 125, 128, 290, 295, 297, 309, 328, 329, 346, 387, 388, 397, 400, 551, 556, 574, 575, 583, 584, 588, 593, 594, 595, 603, 610, 706, 709, 714, 751], "cuda": [15, 16, 17, 290, 652, 653, 654, 708, 712, 713, 747, 750, 752], "python": [15, 18, 21, 43, 121, 249, 290, 292, 317, 422, 486, 496, 514, 515, 516, 517, 523, 524, 525, 528, 551, 556, 593, 644, 654, 675, 676, 679, 680, 681, 688, 705, 707, 708, 709, 712, 713, 748, 750, 753, 755], "target": [15, 125, 290, 494, 545, 705, 706], "see": [15, 16, 19, 28, 43, 48, 50, 62, 121, 163, 165, 168, 171, 173, 188, 193, 202, 290, 291, 300, 317, 323, 325, 337, 436, 551, 556, 573, 592, 598, 618, 621, 627, 642, 668, 675, 676, 678, 679, 680, 681, 682, 688, 705, 706, 710, 713, 720, 726, 732, 749, 750, 752, 754, 755], "guid": [15, 168, 290, 436, 573, 592, 618, 707, 710, 712, 750], "user": [15, 16, 17, 51, 168, 278, 290, 436, 573, 592, 618, 654, 689, 705, 706, 707, 709, 710, 712, 713, 752, 755], "defin": [15, 17, 37, 46, 134, 144, 214, 248, 290, 310, 333, 406, 414, 540, 593, 653, 654, 663, 705, 709, 711, 712, 713, 747, 751, 755], "udf": [15, 290, 654, 747, 751, 755], "through": [15, 123, 290, 395, 491, 492, 497, 503, 535, 563, 695, 709, 750, 752, 753], "strings_udf": [15, 290, 750], "rapid": [15, 148, 290, 417, 504, 532, 535, 547, 549, 565, 566, 666, 675, 679, 707, 713, 747, 750, 753], "librari": [15, 168, 290, 436, 551, 556, 567, 644, 688, 708, 712, 747, 751, 752, 755], "includ": [15, 28, 36, 51, 60, 62, 71, 76, 77, 90, 91, 94, 96, 105, 106, 108, 119, 135, 143, 169, 171, 173, 174, 182, 195, 279, 290, 296, 300, 309, 337, 352, 353, 366, 367, 369, 370, 372, 380, 381, 386, 393, 407, 437, 449, 465, 471, 472, 473, 505, 517, 524, 531, 534, 538, 552, 555, 558, 576, 581, 585, 586, 587, 597, 604, 605, 606, 607, 612, 615, 619, 629, 663, 668, 675, 676, 678, 679, 680, 681, 682, 705, 706, 707, 708, 709, 711, 713, 720, 726, 732, 748, 750, 752, 753, 755], "subset": [15, 45, 46, 55, 85, 143, 160, 168, 182, 252, 290, 330, 359, 429, 436, 676, 711, 749, 750], "expect": [15, 26, 89, 112, 119, 150, 169, 186, 290, 299, 365, 389, 419, 437, 453, 491, 565, 611, 653, 679, 705, 706, 709, 711, 714, 747, 750], "refer": [15, 28, 36, 43, 121, 290, 300, 309, 317, 505, 546, 710, 712, 748, 750, 753, 754], "caveat": [15, 290, 706, 751], "referenc": [15, 290, 753], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 59, 75, 76, 77, 94, 105, 106, 112, 129, 135, 143, 150, 160, 166, 168, 169, 171, 173, 175, 195, 201, 222, 241, 245, 252, 253, 261, 265, 280, 301, 303, 309, 314, 318, 320, 332, 335, 352, 353, 380, 381, 389, 401, 407, 419, 429, 434, 436, 437, 441, 443, 471, 473, 491, 493, 494, 538, 540, 541, 550, 598, 608, 629, 641, 644, 653, 663, 665, 666, 668, 681, 682, 684, 685, 687, 688, 705, 706, 707, 709, 711, 713, 738, 747, 749, 750, 752, 753, 755], "expand": [15, 497, 541, 550, 551, 556, 708], "reduc": [15, 705], "argument": [15, 16, 17, 19, 20, 21, 31, 62, 91, 112, 125, 126, 145, 150, 153, 163, 168, 169, 180, 185, 251, 290, 291, 292, 337, 367, 389, 402, 419, 421, 436, 437, 452, 464, 573, 592, 611, 618, 653, 666, 676, 678, 679, 681, 688, 689, 690, 694, 705, 706, 709, 747, 754], "simpl": [15, 473, 662, 705, 709, 711, 713, 750], "variabl": [15, 46, 93, 95, 121, 134, 135, 320, 406, 407, 654, 663, 672, 705, 709, 713, 752], "could": [15, 598, 709, 747, 750], "def": [15, 16, 17, 134, 290, 406, 529, 536, 593, 654, 676, 705, 707, 711, 713, 747, 748, 750], "f": [15, 36, 112, 179, 273, 290, 309, 389, 445, 504, 529, 544, 553, 565, 566, 688, 707, 750], "els": [15, 76, 77, 241, 290, 352, 353, 707, 713, 747, 750], "awar": [15, 298, 750], "manner": [15, 16, 290], "mai": [15, 16, 17, 21, 62, 139, 142, 168, 179, 232, 273, 290, 292, 337, 364, 411, 413, 436, 445, 491, 494, 512, 513, 584, 598, 676, 679, 680, 681, 682, 694, 697, 705, 706, 707, 708, 709, 711, 713, 714, 747, 749, 750], "condition": [15, 290, 705, 750], "mix": [15, 36, 119, 168, 232, 309, 436, 514, 689, 711, 714, 750], "common": [15, 36, 95, 144, 229, 248, 290, 309, 414, 688, 705, 706, 709, 711, 750], "rather": [15, 125, 164, 182, 397, 432, 449, 705, 707, 709, 711, 714, 750, 755], "howev": [15, 171, 173, 290, 491, 538, 598, 705, 706, 707, 709, 711, 713, 748, 750, 753], "promot": [15, 750], "safe": [15, 713, 750], "regardless": [15, 36, 121, 309, 689, 750], "op": [15, 750], "against": [15, 16, 17, 50, 325, 494, 514], "v": [15, 150, 151, 419, 420, 546, 584, 708, 711, 714], "w": [15, 129, 168, 401, 436, 489, 676], "z": [15, 16, 17, 44, 54, 128, 163, 318, 329, 397, 400, 478, 499, 569], "manipul": [15, 290, 695, 712, 713], "long": [15, 93, 290, 567, 672, 679, 705, 709, 711], "neither": [15, 28, 261, 262, 273, 290, 296, 300, 714], "modifi": [15, 51, 130, 145, 181, 249, 290, 402, 447, 584, 679], "place": [15, 45, 74, 89, 125, 128, 130, 135, 144, 145, 150, 169, 181, 186, 248, 290, 346, 365, 400, 402, 407, 414, 419, 437, 447, 453, 465, 467, 473, 486, 498, 499, 500, 529, 676, 680, 681, 709, 711, 752, 753], "nor": [15, 28, 168, 273, 290, 300, 436, 714, 755], "creat": [15, 28, 58, 114, 125, 127, 129, 130, 145, 165, 168, 204, 205, 210, 247, 249, 254, 256, 277, 290, 300, 332, 333, 334, 399, 401, 402, 436, 461, 462, 541, 546, 550, 598, 652, 674, 676, 705, 707, 713, 738, 740, 747, 748, 749, 750], "st": [15, 290, 750], "str_col": [15, 750], "scale": [15, 713, 720, 721, 726, 727, 732, 733, 748, 750], "len": [15, 16, 173, 179, 290, 445, 490, 653, 695, 713, 750], "elif": [15, 290, 711, 750], "startswith": [15, 290, 695, 750], "42": [15, 188, 290, 720, 726, 732, 749, 750], "abc": [15, 165, 263, 290, 320, 364, 433, 484, 488, 490, 495, 501, 508, 510, 511, 518, 520, 521, 529, 531, 536, 547, 548, 555, 676, 748, 750, 753], "some_exampl": [15, 290, 750], "sinc": [15, 169, 170, 173, 223, 290, 382, 437, 439, 654, 705, 706, 707, 709, 711, 750, 753], "requir": [15, 29, 37, 38, 39, 66, 67, 117, 118, 134, 139, 144, 156, 171, 173, 214, 215, 216, 227, 228, 248, 290, 310, 311, 312, 342, 343, 391, 392, 406, 411, 414, 426, 585, 586, 587, 596, 598, 604, 605, 606, 607, 612, 615, 619, 652, 662, 681, 682, 705, 706, 709, 711, 749, 750], "creation": [15, 38, 58, 215, 290, 311, 751], "upper": [15, 26, 36, 290, 299, 309, 533, 538, 559, 560, 682, 695], "rais": [15, 21, 44, 55, 57, 58, 59, 85, 126, 128, 143, 181, 187, 222, 268, 290, 292, 318, 321, 330, 332, 335, 351, 359, 400, 472, 477, 491, 508, 529, 541, 544, 548, 550, 567, 663, 667, 683, 688, 689, 706, 707, 709, 711, 747, 748, 750], "attributeerror": [15, 290], "complet": [15, 290, 707, 713, 752], "http": [15, 43, 163, 171, 173, 290, 317, 494, 551, 556, 565, 566, 598, 654, 668, 675, 676, 679, 680, 681, 682, 688, 707], "doc": [15, 43, 290, 317, 551, 556, 644, 679, 688, 747, 755], "ai": [15, 104, 107, 148, 290, 417, 532, 535, 547, 549, 565, 566, 675], "api": [15, 16, 111, 120, 179, 290, 388, 445, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 747, 749, 750, 752, 753, 754, 755], "stabl": [15, 19, 290, 291, 654, 752], "user_guid": [15, 290, 707], "html": [15, 43, 290, 317, 551, 556, 565, 566, 654, 688, 707], "incol": [16, 17, 750], "outcol": [16, 17, 750], "pessimistic_nul": [16, 17], "chunk": [16, 173, 593, 682], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 126, 165, 326, 538, 593, 654, 713, 747, 750, 751], "execut": [16, 17, 173, 707, 711, 713, 750, 755], "Or": [16, 17, 125, 748, 750], "dictionari": [16, 17, 21, 58, 112, 144, 165, 248, 292, 389, 414, 572, 611, 666, 681, 709, 710, 748, 750], "map": [16, 17, 62, 76, 77, 105, 106, 112, 126, 165, 171, 205, 241, 245, 256, 337, 352, 353, 380, 381, 389, 433, 462, 499, 563, 572, 573, 592, 611, 618, 666, 676, 679, 706, 708, 709, 713, 743, 749, 750, 753], "col1": [16, 17, 165, 750], "arg1": [16, 17, 112, 389, 750], "output": [16, 17, 36, 51, 62, 71, 110, 121, 139, 141, 163, 166, 169, 171, 173, 174, 175, 253, 279, 309, 337, 411, 434, 437, 441, 454, 475, 493, 500, 551, 556, 593, 653, 654, 666, 668, 676, 679, 682, 684, 685, 686, 687, 695, 705, 707, 709, 712, 749, 750, 751, 755], "extra": [16, 17, 21, 126, 163, 171, 173, 292, 539, 668, 675, 676, 679, 680, 681, 682], "These": [16, 17, 95, 654, 697, 698, 700, 701, 702, 705, 706, 707, 709, 748, 750, 753], "directli": [16, 17, 44, 181, 249, 318, 465, 696, 709, 713, 747, 750], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 58, 66, 67, 71, 123, 127, 128, 135, 139, 142, 150, 169, 171, 173, 181, 210, 214, 215, 216, 223, 227, 228, 247, 251, 309, 310, 311, 312, 342, 343, 395, 397, 399, 400, 407, 411, 413, 419, 437, 471, 473, 495, 527, 546, 590, 653, 663, 668, 681, 682, 696, 705, 706, 707, 709, 711, 713, 750, 755], "non": [16, 17, 30, 46, 48, 54, 71, 95, 105, 106, 117, 118, 119, 127, 134, 156, 161, 180, 181, 190, 192, 220, 245, 247, 251, 279, 302, 320, 323, 329, 380, 381, 391, 392, 399, 406, 426, 430, 447, 448, 449, 464, 498, 503, 529, 585, 586, 587, 598, 604, 605, 606, 607, 612, 615, 619, 623, 625, 653, 655, 663, 666, 676, 679, 689, 690, 705, 706, 709, 714, 753, 755], "underli": [16, 17, 126, 148, 184, 266, 377, 398, 417, 451, 695, 705, 709, 713, 753], "garbag": [16, 17, 334], "chunksiz": [16, 163, 678, 679], "offset": [16, 55, 85, 129, 134, 173, 330, 359, 401, 406, 676, 679, 682, 709], "start": [16, 23, 95, 121, 129, 148, 163, 171, 173, 278, 294, 321, 356, 401, 417, 501, 508, 509, 535, 538, 544, 547, 548, 553, 554, 555, 556, 557, 565, 566, 626, 629, 630, 632, 633, 636, 668, 675, 676, 678, 679, 680, 681, 682, 688, 708, 709], "span": 16, "th": [16, 327, 477, 478, 495], "size": [16, 26, 76, 77, 94, 105, 106, 134, 171, 173, 210, 241, 245, 299, 352, 353, 380, 381, 406, 486, 490, 495, 553, 616, 663, 668, 676, 679, 680, 681, 682, 705, 709, 749, 750, 752], "thread": [16, 17, 676, 680, 681, 713, 750], "block": [16, 538, 676, 680, 681, 682], "kernel": [16, 17, 121, 751], "foral": [16, 750], "built": [16, 538, 709, 712, 713, 747], "queri": [16, 168, 436, 505, 713], "driver": [16, 713], "optim": [16, 71, 681, 752, 755], "launch": [16, 750], "configur": [16, 675, 676, 680, 681, 682, 706, 750, 754], "emul": 16, "serial": [16, 17, 37, 38, 39, 66, 67, 214, 215, 216, 227, 228, 310, 311, 312, 342, 343, 695], "It": [16, 65, 98, 139, 150, 210, 223, 341, 364, 411, 419, 668, 705, 706, 708, 711, 750, 753, 755], "good": [16, 653, 663, 706, 708, 713], "point": [16, 74, 119, 120, 142, 169, 346, 393, 413, 437, 490, 537, 561, 562, 589, 676, 682, 708, 709, 720, 726, 732, 748, 750, 751, 753], "ineffici": 16, "Its": [16, 709], "maximum": [16, 26, 90, 171, 173, 263, 299, 366, 499, 567, 611, 653, 663, 676, 748, 752], "possibl": [16, 74, 168, 210, 346, 436, 679, 689, 705, 706, 707, 709, 711, 750, 752, 753, 755], "avail": [16, 168, 436, 492, 541, 550, 664, 675, 676, 680, 681, 694, 696, 700, 707, 709, 713, 749, 750, 752, 753], "resourc": [16, 71, 705], "number": [16, 29, 30, 36, 65, 71, 72, 75, 104, 107, 108, 110, 111, 117, 118, 125, 126, 127, 134, 135, 139, 148, 153, 156, 161, 169, 171, 173, 185, 244, 247, 267, 270, 271, 276, 293, 301, 302, 309, 327, 334, 341, 377, 383, 386, 388, 391, 392, 399, 406, 407, 411, 417, 421, 426, 430, 437, 448, 449, 452, 456, 458, 459, 460, 464, 484, 486, 488, 492, 495, 500, 504, 516, 531, 536, 537, 540, 544, 551, 556, 561, 576, 585, 586, 587, 590, 596, 597, 598, 604, 605, 606, 607, 608, 612, 615, 619, 626, 648, 649, 650, 651, 652, 653, 654, 659, 661, 662, 663, 666, 671, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 705, 706, 707, 709, 713, 720, 723, 726, 729, 732, 735, 748, 749, 750, 752], "concurr": [16, 17], "To": [16, 36, 45, 128, 173, 309, 400, 449, 541, 611, 676, 679, 680, 681, 705, 707, 709, 747, 749, 750, 753, 754, 755], "access": [16, 36, 168, 309, 436, 695, 698, 700, 701, 702, 709, 713, 750, 752], "count": [16, 36, 71, 90, 91, 96, 98, 108, 134, 161, 182, 309, 366, 367, 370, 372, 386, 406, 430, 449, 577, 581, 599, 654, 695, 713, 749, 750], "threadidx": [16, 750], "blockdim": [16, 750], "respect": [16, 62, 95, 128, 169, 337, 400, 437, 473, 551, 556, 570, 663, 679, 685, 705, 747, 748], "document": [16, 551, 688, 705, 706, 708, 709, 710, 711, 713, 750, 755], "In": [16, 26, 62, 107, 126, 168, 290, 299, 337, 402, 436, 529, 551, 556, 593, 676, 688, 705, 706, 707, 708, 709, 711, 714, 747, 748, 750, 751, 753, 755], "below": [16, 26, 28, 36, 48, 165, 179, 299, 300, 309, 323, 445, 598, 705, 713, 720, 726, 732, 750, 755], "invok": [16, 17, 705, 709], "By": [16, 36, 45, 58, 62, 71, 98, 123, 135, 168, 169, 182, 217, 309, 337, 395, 407, 436, 437, 486, 662, 668, 676, 681, 705, 709, 711, 713, 747, 750, 753, 755], "loop": [16, 17, 709, 747, 750], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 290, 540, 568, 680, 681, 709, 748, 749, 750, 753, 755], "so": [17, 134, 171, 173, 182, 273, 382, 406, 449, 705, 706, 707, 709, 711, 712, 747, 750, 753, 755], "must": [17, 37, 50, 51, 75, 81, 95, 110, 126, 128, 129, 134, 135, 141, 142, 144, 151, 161, 165, 168, 170, 171, 181, 188, 193, 202, 210, 214, 248, 249, 263, 279, 310, 325, 334, 400, 401, 406, 407, 413, 414, 420, 430, 433, 436, 439, 471, 477, 478, 486, 492, 505, 621, 627, 642, 662, 663, 676, 679, 680, 681, 685, 686, 705, 706, 709, 711, 713, 715, 750, 753, 755], "independ": [17, 707, 750], "stride": [17, 171, 653], "improv": [17, 676, 680], "parallel": [17, 186, 453, 676, 680, 681, 713, 714, 750, 752, 755], "resembl": 17, "code": [17, 44, 148, 158, 251, 265, 318, 327, 333, 417, 490, 705, 707, 708, 709, 711, 713, 750], "nelem": [17, 747], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 750], "zip": [17, 169, 437, 676, 679, 713, 750], "callabl": [18, 89, 112, 150, 169, 186, 365, 389, 419, 437, 453, 573, 592, 596, 611, 616, 618, 749], "na_act": [18, 364], "elementwis": [18, 654], "everi": [18, 46, 75, 544, 573, 592, 618, 709, 713, 750], "ignor": [18, 21, 36, 44, 74, 94, 95, 98, 108, 126, 128, 135, 171, 181, 292, 309, 318, 346, 364, 369, 400, 402, 407, 464, 475, 486, 581, 666, 676, 678, 680, 684, 685, 687, 688, 689, 750, 753], "propag": [18, 21, 54, 292, 329, 364, 551, 556, 584, 750, 752, 753], "without": [18, 28, 36, 44, 71, 126, 249, 258, 300, 309, 318, 364, 486, 538, 551, 555, 556, 676, 685, 686, 687, 705, 706, 712, 747, 750], "them": [18, 62, 337, 364, 449, 493, 498, 500, 654, 688, 707, 709, 748, 749, 750, 755], "kind": [19, 95, 129, 150, 151, 225, 249, 291, 401, 419, 420, 481, 748], "quicksort": [19, 151, 291, 420, 481], "ascend": [19, 107, 123, 142, 150, 151, 182, 251, 291, 382, 395, 413, 419, 420, 449, 481, 608], "na_posit": [19, 142, 150, 151, 251, 291, 413, 419, 420, 481], "last": [19, 36, 45, 54, 65, 104, 107, 126, 142, 150, 151, 159, 218, 251, 291, 309, 319, 329, 341, 379, 382, 413, 419, 420, 428, 465, 481, 508, 541, 548, 550, 584, 630, 632, 634, 653, 676, 682, 688, 713, 750], "would": [19, 142, 168, 251, 290, 291, 413, 436, 545, 608, 688, 705, 707, 709, 713, 750, 753], "effect": [19, 62, 125, 291, 337, 397, 705, 714], "compat": [19, 22, 68, 94, 180, 223, 291, 320, 369, 679, 690, 707, 708, 709, 712, 748, 751, 752], "mergesort": [19, 291], "heapsort": [19, 291], "choic": [19, 71, 291, 688, 707, 747], "algorithm": [19, 119, 291, 393, 494, 495, 542, 709], "descend": [19, 104, 142, 150, 151, 182, 251, 291, 379, 413, 419, 420, 449, 481], "first": [19, 36, 40, 45, 50, 62, 65, 104, 107, 123, 129, 142, 144, 150, 151, 158, 169, 182, 187, 201, 218, 248, 251, 267, 290, 291, 309, 313, 319, 325, 337, 341, 379, 382, 395, 401, 402, 413, 414, 419, 420, 437, 449, 481, 497, 502, 527, 533, 541, 551, 556, 559, 560, 564, 568, 582, 608, 631, 633, 635, 641, 653, 663, 676, 679, 682, 688, 705, 706, 707, 709, 713, 750], "put": [19, 150, 151, 251, 291, 419, 420, 481, 708], "begin": [19, 150, 151, 251, 291, 419, 420, 481, 509, 539, 554, 555, 556, 633, 676, 679, 682, 713], "cupi": [19, 31, 62, 119, 139, 142, 164, 183, 240, 251, 264, 291, 327, 337, 411, 413, 432, 450, 653, 705, 709, 712, 713, 751, 753, 755], "ndarrai": [19, 58, 60, 93, 139, 164, 170, 183, 184, 187, 195, 241, 245, 251, 264, 279, 291, 327, 411, 432, 439, 450, 451, 653, 663, 672, 689, 713, 747, 750], "base": [19, 26, 44, 45, 55, 65, 71, 75, 85, 113, 129, 134, 143, 179, 205, 256, 279, 290, 291, 299, 318, 330, 341, 359, 382, 401, 406, 445, 462, 482, 491, 495, 506, 507, 516, 531, 653, 673, 678, 679, 688, 705, 706, 709, 711, 713, 748, 750], "int32": [19, 21, 64, 142, 197, 251, 291, 292, 314, 340, 413, 449, 478, 480, 484, 490, 492, 494, 501, 508, 530, 542, 547, 548, 561, 637, 653, 663, 676, 709, 711, 713, 738, 743, 745, 746, 748, 750, 752], "foo": [19, 47, 163, 291, 402, 544, 662, 676, 705, 706, 707, 711, 713], "idx": [19, 76, 77, 105, 106, 212, 223, 230, 231, 232, 233, 234, 238, 239, 240, 249, 251, 252, 255, 267, 291, 334, 352, 353, 380, 381, 491, 541, 550, 713], "keyword": [20, 31, 91, 112, 125, 126, 242, 367, 389, 397, 464, 551, 556, 611, 678, 713, 750], "error": [21, 44, 126, 163, 168, 181, 290, 292, 318, 351, 436, 663, 678, 688, 689, 706, 709, 748, 750, 752], "cast": [21, 51, 117, 118, 125, 156, 157, 292, 391, 392, 397, 426, 427, 474, 679, 714, 753], "altern": [21, 44, 46, 112, 292, 318, 389, 545, 611, 676, 705, 707, 711], "col": [21, 73, 292, 705, 747], "where": [21, 38, 44, 46, 51, 62, 71, 76, 77, 89, 104, 105, 106, 107, 112, 119, 125, 127, 142, 153, 171, 185, 215, 240, 247, 292, 311, 318, 337, 352, 353, 365, 380, 381, 382, 389, 393, 397, 399, 413, 421, 452, 488, 495, 501, 505, 508, 512, 513, 547, 548, 611, 650, 659, 661, 678, 705, 706, 707, 709, 711, 713, 714, 749, 752], "specif": [21, 45, 51, 58, 95, 135, 292, 407, 694, 700, 705, 706, 707, 708, 709, 711, 713, 753, 754], "deep": [21, 28, 71, 94, 166, 213, 253, 292, 300, 369, 434, 665], "henc": [21, 292, 753], "chang": [21, 28, 111, 125, 153, 158, 181, 185, 292, 300, 319, 388, 397, 398, 421, 449, 452, 472, 473, 538, 559, 705, 706, 753], "warn": [21, 126, 292, 688, 706, 713, 753], "control": [21, 36, 126, 172, 292, 309, 440, 538, 653, 676, 705, 752], "except": [21, 45, 65, 126, 129, 195, 218, 229, 257, 292, 319, 341, 401, 508, 548, 566, 629, 654, 676, 679, 688, 708, 709, 711, 749, 752], "invalid": [21, 57, 59, 126, 222, 268, 292, 332, 335, 683, 688, 689, 709], "suppress": [21, 44, 126, 292, 318], "On": [21, 126, 292, 473, 713], "constructor": [21, 58, 292, 695, 707, 709, 713, 747, 753], "float32": [21, 292, 449, 689, 738, 739, 741, 742, 748, 752], "custom": [21, 134, 165, 292, 406, 654, 672, 681, 705, 706, 709, 754, 755], "cat_dtyp": [21, 292], "enabl": [21, 292, 676, 679, 705, 707, 709, 748, 752], "s1": [21, 289, 292, 464, 475, 491, 514, 515, 524], "s2": [21, 289, 292, 402, 464, 474, 475, 491, 514, 524], "alia": [22, 68, 235, 347, 356], "cdf1": 23, "k2": [23, 679], "temp": [23, 269, 498, 713], "stop": [23, 111, 148, 278, 294, 356, 388, 417, 553, 554, 555, 678], "step": [23, 278, 294, 356, 473, 553], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 74, 89, 109, 126, 128, 130, 145, 150, 151, 186, 246, 249, 295, 297, 298, 299, 318, 319, 320, 328, 329, 346, 365, 387, 398, 400, 402, 419, 420, 453, 465, 466, 467, 471, 472, 473, 481, 584, 753], "synonym": [24, 25, 53, 109, 295, 297, 328, 387], "fillna": [24, 25, 46, 53, 109, 128, 295, 297, 320, 328, 387, 400, 713, 714, 751], "bfill": [24, 54, 129, 263, 295, 329, 401, 584], "lower": [26, 36, 119, 120, 299, 309, 393, 485, 538, 559, 560, 563, 564, 589, 682, 695, 709, 713], "trim": [26, 299, 539], "threshold": [26, 179, 299, 445, 598], "assign": [26, 51, 123, 126, 141, 298, 299, 395, 440, 713, 753], "outsid": [26, 168, 299, 436, 464, 750], "boundari": [26, 134, 296, 299, 406, 750], "singular": [26, 299], "latter": [26, 299, 705, 706, 707, 747], "case": [26, 51, 65, 95, 119, 126, 150, 208, 229, 257, 260, 299, 341, 402, 419, 463, 491, 494, 529, 535, 538, 544, 551, 653, 676, 688, 705, 706, 707, 709, 711, 714, 747, 749, 750, 753, 755], "perform": [26, 38, 51, 62, 66, 71, 89, 95, 117, 118, 139, 150, 156, 168, 186, 188, 193, 202, 215, 227, 279, 293, 299, 311, 319, 337, 342, 365, 391, 392, 411, 419, 426, 436, 440, 453, 473, 538, 565, 566, 573, 585, 586, 587, 592, 604, 605, 606, 607, 612, 615, 618, 619, 621, 627, 642, 676, 680, 684, 685, 686, 687, 705, 706, 709, 711, 747, 749, 750, 751, 752, 753, 755], "array_lik": [26, 299], "minimum": [26, 29, 96, 134, 299, 301, 370, 406, 487, 499, 500, 532, 540, 549, 568, 596, 598, 611, 663, 705], "sr": [26, 129, 139, 290, 299, 356, 401, 411, 431, 449, 494, 500, 545, 750], "t": [28, 43, 55, 85, 94, 98, 108, 119, 126, 139, 171, 173, 182, 188, 193, 198, 202, 300, 317, 330, 359, 372, 386, 411, 449, 489, 496, 502, 519, 525, 529, 534, 538, 539, 552, 558, 576, 597, 621, 627, 638, 642, 679, 705, 713, 714, 747, 750, 753], "modif": [28, 300], "reflect": [28, 43, 300, 317, 706], "shallow": [28, 300], "vice": [28, 300, 559], "versa": [28, 300, 559], "s_copi": [28, 300], "versu": [28, 300, 706, 753], "share": [28, 300, 464, 705, 706, 709, 711], "remain": [28, 113, 267, 300, 486, 533, 559, 560, 564, 568, 673, 705], "pearson": [29, 149, 293, 301, 418, 596, 749], "min_period": [29, 134, 301, 303, 406, 596, 598, 654, 750], "correl": [29, 293, 301, 596, 598], "matrix": [29, 31, 495, 596, 598, 751], "spearman": [29, 301, 596], "standard": [29, 153, 163, 196, 301, 421, 547, 551, 556, 563, 614, 636, 644, 659, 676, 705, 706, 707, 709, 711, 713, 750], "coeffici": [29, 301, 596], "rank": [29, 301], "observ": [29, 62, 114, 134, 269, 301, 302, 337, 406, 584, 596, 598, 608, 655, 674, 713], "pair": [29, 78, 128, 163, 165, 171, 173, 400, 596, 598, 668, 675, 676, 679, 680, 681, 682, 711], "have": [29, 36, 48, 50, 55, 62, 75, 85, 95, 98, 107, 110, 112, 123, 125, 129, 139, 143, 172, 173, 181, 182, 279, 301, 309, 323, 325, 330, 337, 359, 389, 395, 401, 411, 440, 470, 486, 495, 506, 507, 529, 596, 598, 654, 672, 679, 705, 706, 707, 709, 711, 713, 715, 718, 747, 749, 750, 753], "valid": [29, 46, 117, 118, 134, 135, 156, 265, 301, 320, 334, 391, 392, 406, 407, 426, 492, 505, 529, 584, 585, 586, 587, 596, 598, 604, 605, 606, 607, 612, 615, 619, 679, 683, 705, 707, 709, 710, 752], "request": [29, 91, 92, 163, 171, 173, 223, 263, 272, 367, 368, 668, 675, 676, 679, 680, 681, 682, 711], "numeric_onli": [30, 83, 84, 90, 91, 92, 96, 98, 117, 118, 119, 123, 149, 153, 156, 185, 357, 358, 366, 367, 368, 370, 391, 392, 395, 418, 421, 426, 452, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619], "cell": [30, 747, 750], "nat": [30, 46, 76, 77, 98, 105, 106, 187, 352, 353, 372, 380, 381, 636, 688, 753], "consid": [30, 44, 45, 46, 48, 50, 76, 77, 98, 105, 106, 163, 218, 318, 320, 323, 325, 352, 353, 372, 380, 381, 473, 529, 654, 676, 705, 707, 709, 750, 753], "entri": [30, 46, 71, 76, 77, 89, 105, 106, 163, 186, 241, 245, 319, 320, 352, 353, 365, 380, 381, 453, 529, 676, 679, 686, 705], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 76, 77, 105, 106, 352, 353, 380, 381], "24": [30, 32, 33, 34, 35, 62, 92, 94, 117, 118, 129, 130, 134, 179, 304, 305, 306, 307, 337, 368, 391, 392, 401, 406, 445, 489, 581, 713, 753], "21": [30, 129, 134, 135, 179, 401, 406, 407, 445, 489, 713, 749], "26": [30, 43, 62, 179, 301, 303, 317, 337, 445, 489, 581, 630, 632, 633, 713], "covari": [31, 303, 598], "cumul": [32, 33, 34, 35, 304, 305, 306, 307, 577, 578, 579, 580, 599, 600, 601, 602, 753], "indexedfram": [32, 33, 34, 35, 709, 711], "ser": [32, 33, 34, 35, 54, 62, 65, 76, 77, 89, 92, 105, 106, 159, 186, 296, 302, 304, 305, 306, 307, 320, 329, 337, 341, 352, 353, 365, 368, 380, 381, 428, 440, 453, 489, 512, 513, 529, 537, 538, 539, 542, 561, 562, 636, 750], "cumsum": [32, 33, 34, 304, 305, 306, 709, 753], "15": [32, 33, 34, 35, 45, 55, 85, 129, 134, 142, 145, 179, 255, 304, 305, 306, 307, 330, 356, 359, 401, 406, 413, 435, 445, 489, 520, 521, 713, 750], "34": [32, 33, 34, 35, 156, 304, 305, 306, 307, 426, 498, 753], "product": [34, 43, 117, 156, 269, 270, 271, 306, 317, 391, 426, 705, 711, 751, 752], "percentil": [36, 123, 309, 395], "datetime_is_numer": [36, 309], "descript": [36, 71, 309, 581, 664, 695, 707, 710, 713, 754], "statist": [36, 71, 134, 171, 173, 279, 309, 406, 581, 668, 680, 681, 713], "summar": [36, 309, 581, 749], "central": [36, 309, 581], "tendenc": [36, 309, 581], "dispers": [36, 309, 581], "shape": [36, 50, 94, 142, 150, 309, 325, 413, 419, 581, 709, 747, 750, 753], "dataset": [36, 171, 173, 309, 372, 581, 668, 670, 675, 676, 679, 680, 681, 705, 750], "distribut": [36, 139, 309, 411, 581, 705, 713], "analyz": [36, 309, 581, 713], "well": [36, 104, 107, 119, 144, 223, 248, 309, 414, 469, 538, 662, 686, 707, 709, 747], "vari": [36, 309, 653, 684, 685, 686, 687, 713], "depend": [36, 51, 95, 126, 164, 165, 169, 170, 172, 210, 242, 267, 309, 432, 437, 439, 440, 551, 556, 663, 665, 678, 679, 688, 689, 705, 709, 711, 713, 747, 752], "what": [36, 309, 482, 705, 706, 709, 750, 751, 755], "detail": [36, 163, 171, 173, 188, 193, 202, 290, 309, 598, 621, 627, 642, 644, 668, 675, 676, 679, 680, 681, 682, 705, 710, 712, 713, 749, 750, 754, 755], "fall": [36, 309, 626, 705, 709, 711, 752], "between": [36, 51, 74, 111, 119, 120, 123, 279, 293, 301, 303, 309, 346, 388, 393, 395, 493, 495, 501, 508, 529, 536, 537, 539, 547, 548, 582, 589, 598, 611, 682, 705, 706, 707, 709, 711, 712, 749, 750, 751, 752, 753, 755], "25": [36, 40, 46, 62, 64, 71, 76, 77, 92, 105, 106, 134, 179, 293, 309, 337, 340, 352, 353, 368, 380, 381, 393, 406, 445, 489, 581, 636, 686, 687, 713, 750], "75": [36, 71, 165, 309, 393, 573, 581, 592, 618, 755], "25th": [36, 309], "50th": [36, 309], "75th": [36, 309], "submit": [36, 309], "instead": [36, 71, 112, 121, 129, 134, 171, 173, 179, 195, 210, 249, 269, 309, 333, 351, 389, 401, 406, 445, 464, 475, 496, 498, 508, 548, 611, 629, 705, 706, 709, 713, 752, 753], "style": [36, 45, 62, 95, 114, 125, 309, 337, 674, 707, 708, 713, 750], "select_dtyp": [36, 309], "o": [36, 179, 309, 445, 489, 502, 705, 709, 713, 743, 744, 745, 746, 751], "omit": [36, 44, 182, 309, 318, 486, 581, 678], "noth": [36, 173, 309, 509], "output_fram": [36, 309], "summari": [36, 71, 309, 581, 751], "mean": [36, 48, 62, 114, 117, 118, 129, 156, 290, 309, 323, 337, 391, 392, 401, 426, 492, 555, 573, 581, 592, 618, 674, 682, 705, 706, 711, 713, 747, 749, 750, 753, 755], "std": [36, 309, 581, 747, 749], "50": [36, 44, 64, 71, 128, 129, 165, 212, 309, 318, 340, 393, 400, 401, 581, 685, 747, 748, 750], "median": [36, 309, 749], "top": [36, 123, 309, 395, 475, 695, 705, 713], "freq": [36, 55, 85, 111, 129, 147, 179, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 209, 309, 321, 330, 359, 388, 401, 416, 445, 454, 590, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 637, 638, 639, 640, 642, 643, 644, 645, 646, 713], "most": [36, 98, 182, 309, 449, 508, 548, 654, 681, 696, 705, 706, 709, 711, 713], "frequenc": [36, 98, 129, 182, 188, 193, 202, 309, 401, 449, 457, 621, 627, 642, 662], "timestamp": [36, 47, 76, 77, 105, 106, 134, 169, 173, 179, 309, 352, 353, 380, 381, 406, 437, 445, 526, 621, 627, 642, 679, 688, 713, 753, 755], "highest": [36, 98, 123, 309, 395, 465, 547, 548, 705], "arbitrarili": [36, 309], "chosen": [36, 139, 309, 411], "among": [36, 43, 309, 317, 598, 755], "analysi": [36, 309, 598], "consist": [36, 142, 230, 231, 232, 233, 234, 238, 239, 265, 309, 413, 705, 706, 707, 709, 750], "union": [36, 95, 164, 170, 279, 309, 432, 439, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 491, 543, 544, 557, 653, 686, 738, 739], "00000": [36, 149, 309, 418], "50000": [36, 309], "02765": [36, 309], "25000": [36, 309], "75000": [36, 309], "datetime64": [36, 46, 47, 76, 77, 105, 106, 121, 129, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 309, 352, 353, 380, 381, 401, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 688, 748, 752, 753], "2000": [36, 129, 189, 194, 197, 198, 199, 200, 203, 207, 309, 401, 622, 626, 628, 629, 630, 632, 633, 637, 638, 639, 640, 643, 644, 646], "2010": [36, 309, 629, 636, 747], "2006": [36, 309, 629], "09": [36, 55, 85, 129, 134, 179, 309, 330, 359, 401, 406, 445, 626, 630, 632, 633, 644], "08": [36, 121, 125, 129, 134, 179, 188, 190, 191, 192, 193, 196, 201, 206, 309, 401, 406, 445, 623, 624, 625, 626, 630, 641, 645, 684, 685, 686, 687, 706, 713, 747], "2004": [36, 309, 629], "31": [36, 129, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 309, 401, 623, 624, 625, 626, 629, 630, 634, 635, 639, 641, 644, 645, 646, 647, 648, 649, 651], "field": [36, 58, 173, 309, 505, 569, 653, 676, 682, 695, 709, 743], "classmethod": [37, 38, 57, 58, 59, 60, 66, 214, 215, 221, 222, 227, 268, 269, 270, 271, 310, 311, 332, 333, 334, 335, 342, 715, 717, 720, 721, 726, 727, 732, 733, 738, 740, 743, 745], "header": [37, 38, 39, 50, 66, 67, 163, 171, 173, 214, 215, 216, 227, 228, 310, 311, 312, 325, 342, 343, 668, 675, 676, 679, 680, 681, 682, 709], "represent": [37, 71, 144, 183, 184, 214, 248, 264, 269, 310, 414, 433, 450, 451, 486, 720, 726, 732, 748, 751], "subclass": [37, 38, 66, 134, 144, 165, 210, 214, 215, 227, 248, 310, 311, 342, 364, 406, 414, 433, 707, 709], "implement": [37, 91, 111, 144, 181, 214, 248, 278, 310, 367, 388, 414, 567, 678, 709, 713, 750, 752], "how": [37, 46, 57, 81, 95, 111, 123, 135, 144, 168, 181, 214, 219, 242, 248, 310, 320, 388, 395, 407, 414, 436, 464, 678, 705, 706, 707, 710, 711, 713, 747, 750, 751, 752], "construct": [37, 58, 113, 144, 187, 214, 248, 262, 310, 414, 454, 673, 709, 711, 720, 721, 726, 727, 732, 733, 743], "metadata": [37, 38, 39, 66, 67, 144, 171, 173, 214, 215, 216, 227, 228, 248, 310, 311, 312, 342, 343, 414, 653, 669, 671, 680, 681], "reconstruct": [37, 38, 39, 66, 67, 144, 214, 215, 216, 227, 228, 248, 310, 311, 312, 342, 343, 414], "buffer": [37, 38, 39, 66, 67, 71, 144, 214, 215, 216, 227, 228, 248, 308, 310, 311, 312, 342, 343, 385, 414, 678, 752], "memoryview": [37, 38, 39, 66, 67, 144, 214, 215, 216, 227, 228, 248, 308, 310, 311, 312, 342, 343, 414], "serializ": [37, 38, 66, 144, 169, 214, 215, 227, 248, 310, 311, 342, 414, 437], "instanc": [37, 38, 55, 66, 85, 145, 165, 214, 215, 227, 278, 310, 311, 330, 342, 359, 433, 486, 494, 503, 536, 545, 676, 705, 709, 710, 711, 713], "cl": [37, 38, 66, 214, 215, 227, 310, 311, 342, 705], "wa": [37, 38, 66, 214, 215, 227, 251, 310, 311, 342], "produc": [37, 38, 62, 66, 113, 125, 139, 214, 215, 227, 310, 311, 337, 342, 411, 475, 673, 679, 713, 749, 750, 755], "meta": [37, 38, 39, 66, 67, 144, 162, 214, 215, 216, 227, 228, 248, 310, 311, 312, 342, 343, 414], "privat": [37, 38, 39, 66, 67, 144, 214, 215, 216, 227, 228, 248, 310, 311, 312, 342, 343, 414], "devic": [38, 39, 66, 144, 170, 215, 216, 227, 248, 290, 311, 312, 342, 414, 439, 653, 709], "side": [38, 66, 95, 125, 129, 142, 215, 225, 227, 261, 262, 311, 342, 397, 401, 413, 487, 532, 534, 540, 549, 552, 558, 568, 663, 714], "deseri": [38, 66, 144, 215, 227, 248, 311, 342, 414], "task": [38, 66, 215, 227, 311, 342, 709, 713, 750, 755], "primari": [38, 215, 311, 705, 706, 709], "purpos": [38, 215, 311, 705, 706, 709, 711], "memori": [38, 39, 67, 71, 94, 163, 166, 170, 215, 216, 228, 253, 290, 311, 312, 343, 369, 434, 439, 652, 653, 665, 679, 681, 705, 706, 711, 712, 713, 747, 752], "host": [38, 67, 163, 170, 171, 173, 184, 215, 228, 279, 311, 343, 439, 451, 668, 675, 676, 679, 680, 681, 682, 707], "necessari": [38, 43, 164, 215, 311, 317, 432, 531, 705, 706, 707, 709, 711, 713, 750], "associ": [39, 67, 216, 228, 279, 312, 343, 682, 709, 748, 755], "period": [40, 55, 85, 111, 129, 134, 147, 189, 194, 197, 198, 199, 200, 203, 207, 313, 330, 359, 388, 401, 406, 416, 582, 590, 622, 628, 634, 635, 637, 638, 639, 640, 643, 644, 646, 713], "discret": [40, 313, 663, 705], "calcul": [40, 71, 111, 134, 153, 185, 196, 225, 301, 313, 334, 388, 406, 421, 452, 582, 598, 636, 654, 655, 656, 657, 658, 659, 660, 661, 688, 713, 747, 751], "compar": [40, 50, 217, 229, 313, 325, 351, 593, 684, 685, 686, 687, 695, 708, 711, 714, 749, 753, 755], "previou": [40, 125, 263, 313], "shift": [40, 111, 293, 313, 388, 582], "neg": [40, 65, 127, 161, 247, 313, 341, 399, 430, 504, 509, 582, 720, 726, 732], "take": [40, 107, 112, 166, 253, 389, 434, 486, 529, 573, 582, 592, 618, 654, 665, 695, 705, 747, 750], "gdf": [40, 581, 584, 593, 596, 598, 713, 714, 748], "16": [40, 134, 142, 179, 364, 406, 413, 445, 489, 506, 507, 682, 688, 713, 750, 752], "36": [40, 134, 406, 713, 750], "divis": [41, 42, 56, 124, 131, 138, 178, 195, 315, 316, 331, 396, 403, 410, 444, 629], "truediv": [41, 42, 315, 316], "inf": [41, 42, 76, 77, 105, 106, 124, 138, 178, 315, 316, 352, 353, 380, 381, 396, 410, 444, 711], "flexibl": [43, 168, 317, 436, 705, 706, 709, 711, 713, 747, 750, 753], "wrapper": [43, 317, 706, 709, 750], "sub": [43, 155, 317, 425, 490, 501, 508, 544, 547, 548, 709], "mul": [43, 100, 317, 374], "div": [43, 317], "mod": [43, 317], "pow": [43, 317], "swap": [43, 158, 317, 705], "operand": [43, 317], "org": [43, 317, 551, 556, 598, 688], "datamodel": [43, 317], "__ror__": [43, 317], "70": [43, 317], "174": [43, 317], "remov": [44, 45, 130, 183, 184, 264, 267, 318, 319, 320, 402, 450, 451, 471, 473, 498, 499, 500, 534, 538, 539, 552, 558, 708, 709, 750], "multi": [44, 51, 81, 265, 318, 672, 713], "keyerror": [44, 318, 667, 683], "found": [44, 95, 142, 240, 273, 279, 318, 364, 413, 502, 503, 508, 541, 545, 546, 548, 550, 551, 556, 562, 644, 676, 709, 713, 714], "dropna": [44, 48, 62, 98, 108, 114, 152, 168, 182, 318, 323, 337, 339, 372, 386, 436, 449, 475, 576, 597, 662, 674, 751], "drop_dupl": [44, 318], "duplic": [44, 45, 104, 107, 126, 145, 218, 258, 318, 319, 379, 382, 543, 663, 676, 755], "certain": [44, 45, 95, 179, 318, 445, 538, 551, 556, 705, 710, 750], "reindex": [44, 318, 584, 695, 714], "midx": [44, 148, 158, 251, 266, 274, 318, 417], "from_product": [44, 249, 269, 271, 318], "40": [44, 129, 188, 196, 201, 318, 397, 401, 491, 641, 713], "lama": [44, 318, 319, 351], "falcon": [44, 62, 65, 75, 130, 158, 182, 318, 337, 341], "speed": [44, 62, 130, 158, 318, 337, 581, 676, 688, 706, 747], "weight": [44, 139, 158, 318, 411], "length": [44, 48, 55, 85, 89, 95, 128, 139, 141, 151, 158, 186, 240, 257, 279, 318, 323, 330, 359, 365, 400, 411, 420, 453, 477, 478, 480, 495, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 551, 556, 567, 568, 590, 653, 663, 666, 720, 722, 726, 728, 732, 734, 750], "big": [44, 71, 158, 318], "small": [44, 158, 318, 676, 680, 705, 707, 709, 747, 749, 750], "45": [44, 158, 179, 202, 318, 445, 621, 627, 642, 688, 750], "200": [44, 125, 158, 212, 318, 747], "100": [44, 62, 119, 128, 129, 158, 195, 212, 251, 318, 337, 400, 401, 519, 521, 629, 685, 713, 747, 750, 753], "250": [44, 158, 318], "150": [44, 158, 318], "320": [44, 158, 318], "keep": [45, 46, 89, 104, 107, 110, 123, 181, 186, 218, 319, 320, 365, 379, 382, 395, 453, 498, 499], "identifi": [45, 62, 76, 77, 93, 105, 106, 150, 168, 337, 352, 353, 380, 381, 419, 436, 493, 500, 545, 546, 644, 672, 678, 705], "drop": [45, 46, 48, 110, 115, 130, 145, 152, 218, 219, 267, 319, 320, 323, 402, 475, 663, 751, 755], "occurr": [45, 104, 107, 218, 319, 379, 382, 492, 502, 503, 529, 541, 544, 550, 713], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 117, 118, 156, 171, 173, 179, 201, 319, 391, 392, 426, 445, 476, 478, 501, 508, 547, 548, 553, 641, 684, 685, 686, 687, 705, 709, 711, 713, 750], "guarante": [45, 139, 319, 411, 483, 598, 676, 705, 749, 755], "thresh": 46, "decid": [46, 219, 706], "least": [46, 110, 181, 219, 339, 475, 529, 711, 748, 750], "isna": [46, 77, 320, 353, 753], "notna": [46, 106, 320, 381, 753], "alfr": [46, 76, 77, 105, 106, 352, 353, 380, 381], "batman": [46, 76, 77, 105, 106, 352, 353, 380, 381], "catwoman": 46, "toi": [46, 76, 77, 105, 106, 352, 353, 380, 381, 512, 513, 750], "batmobil": [46, 76, 77, 105, 106, 352, 353, 380, 381], "bullwhip": 46, "born": [46, 76, 77, 105, 106, 352, 353, 380, 381], "1940": [46, 76, 77, 105, 106, 352, 353, 380, 381], "look": [46, 705, 706, 707, 709, 747, 750], "20180310": 47, "u": [47, 169, 173, 188, 193, 197, 202, 437, 489, 504, 621, 627, 637, 642, 679, 688, 705, 706, 707, 709, 747, 748, 750, 752, 753], "ax": [48, 113, 168, 183, 184, 264, 323, 436, 450, 451, 464, 555, 673, 679, 691, 700], "still": [48, 323, 707], "we": [48, 62, 75, 107, 125, 126, 129, 210, 323, 337, 372, 401, 529, 676, 678, 680, 681, 705, 706, 707, 709, 711, 713, 747, 748, 750, 753, 755], "our": [48, 323, 705, 706, 707, 709, 713, 747, 750, 755], "test": [50, 65, 325, 341, 351, 491, 496, 531, 539, 557, 676, 695, 706, 708, 710, 712, 713, 755], "exactly_equ": [50, 325], "different_column_typ": [50, 325], "expr": [51, 121], "evalu": [51, 496, 514, 557, 713], "describ": [51, 71, 168, 169, 436, 437, 542, 680, 681, 749], "express": [51, 121, 491, 492, 496, 497, 503, 535, 544, 546, 551, 556, 557, 680, 681, 751], "mutat": 51, "typic": [51, 705, 709, 711, 755], "statement": [51, 713, 750], "bitwis": [51, 750], "logic": [51, 95, 290, 680, 681, 709, 711, 713, 750], "automat": [51, 57, 279, 334, 598, 679, 705, 706, 707, 709, 713, 749, 753], "respons": 51, "suitabl": [51, 142, 169, 413, 437, 709], "later": 51, "condit": [51, 89, 121, 186, 365, 453, 713, 750], "upon": [51, 144, 248, 414], "earlier": 51, "though": [51, 713, 750], "line": [51, 65, 169, 341, 437, 508, 548, 567, 676, 679, 705, 706, 747], "replic": [52, 326], "22": [52, 129, 179, 196, 247, 401, 445, 489, 706, 713, 753], "44": [52, 193, 750], "ffill": [54, 109, 111, 263, 329, 387, 388, 584], "forward": [54, 163, 171, 173, 329, 583, 584, 588, 603, 610, 668, 675, 676, 679, 680, 681, 682, 707], "next": [54, 263, 329, 503, 584, 705, 707, 709, 713, 747, 750], "backward": [54, 329, 574, 575, 594, 595], "initi": [55, 165, 330, 433, 709, 711, 713, 750], "time": [55, 85, 111, 127, 129, 134, 161, 163, 169, 247, 279, 330, 359, 388, 399, 401, 406, 430, 437, 478, 485, 492, 559, 560, 564, 598, 654, 676, 680, 681, 688, 695, 705, 706, 709, 711, 747, 750, 751, 753], "date": [55, 85, 169, 179, 187, 195, 201, 330, 359, 437, 445, 626, 629, 630, 631, 632, 633, 634, 635, 641, 644, 676, 679, 688, 705, 713], "few": [55, 85, 330, 359, 709, 750, 753, 755], "1m": [55, 330, 626], "displai": [55, 71, 85, 123, 330, 359, 395, 663, 707], "month": [55, 188, 193, 202, 330, 621, 626, 627, 630, 631, 642, 688], "typeerror": [55, 57, 59, 85, 128, 217, 222, 268, 321, 330, 332, 335, 351, 359, 400, 529, 689, 750], "datetimeindex": [55, 85, 330, 359, 688, 695], "date_rang": [55, 85, 129, 179, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 321, 330, 359, 401, 445, 622, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 713], "2d": [55, 85, 330, 359, 665], "3d": [55, 85, 330, 359], "9223372036854775807": [56, 131, 331, 403, 713], "tabl": [57, 73, 113, 114, 119, 120, 161, 162, 168, 169, 268, 430, 436, 437, 499, 563, 662, 673, 674, 676, 679, 705, 709, 713, 749, 752], "pyarrow": [57, 162, 268, 332, 431, 680, 681, 713, 720, 721, 725, 726, 727, 731, 732, 733, 737, 738, 740, 742, 743, 745, 746], "doe": [57, 62, 75, 126, 158, 164, 168, 290, 321, 337, 432, 436, 473, 505, 551, 593, 654, 667, 672, 683, 689, 705, 706, 709, 711, 714, 748, 749, 750, 755], "similar": [57, 95, 150, 168, 171, 173, 290, 419, 436, 551, 556, 684, 685, 687, 705, 711, 749, 750, 753, 755], "to_panda": [57, 713, 715, 749, 750, 753, 755], "work": [57, 134, 406, 449, 652, 653, 705, 707, 709, 710, 712, 713, 748, 749, 750, 751], "pa": [57, 268, 332, 720, 721, 726, 727, 732, 733, 738, 740, 743, 745], "orient": [58, 165, 169, 437, 679], "Of": 58, "form": [58, 111, 113, 123, 161, 229, 257, 388, 395, 430, 516, 519, 520, 521, 522, 668, 673, 680, 681, 709], "tight": [58, 165], "assum": [58, 71, 314, 491, 495, 544, 551, 556, 598, 665, 705, 707, 708, 709, 750], "index_nam": [58, 165], "column_nam": [58, 165], "valueerror": [58, 128, 143, 168, 169, 181, 400, 436, 437, 472, 508, 529, 548, 663, 707, 747, 749], "from_record": 58, "to_dict": 58, "becom": [58, 145, 747], "col_1": 58, "col_2": 58, "row_1": 58, "row_2": 58, "manual": [58, 668, 707], "format": [58, 93, 163, 165, 167, 168, 169, 171, 173, 175, 436, 437, 441, 526, 527, 565, 566, 567, 584, 644, 672, 676, 679, 688, 706, 707, 709, 712, 713, 714, 747, 748, 752], "n1": [58, 175, 441], "n2": [58, 175, 441], "z1": 58, "z2": 58, "record": [60, 95, 123, 165, 169, 395, 437, 536, 679, 705], "recarrai": [60, 174], "ndim": 60, "greater": [61, 63, 72, 296, 336, 338, 568, 598, 689, 748], "as_index": [62, 337], "group_kei": [62, 337], "squeez": [62, 337], "group": [62, 114, 123, 168, 171, 337, 395, 436, 449, 497, 546, 573, 577, 578, 579, 580, 582, 585, 586, 587, 589, 590, 591, 592, 593, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 662, 671, 674, 678, 680, 681, 705, 709, 711, 714, 750, 751, 753, 755], "mapper": [62, 126, 337], "involv": [62, 279, 337, 709], "some": [62, 74, 125, 179, 273, 337, 346, 422, 445, 481, 492, 544, 593, 688, 705, 706, 709, 711, 713, 714, 749, 750, 752, 755], "combin": [62, 145, 182, 337, 464, 493, 534, 551, 552, 558, 573, 592, 618, 680, 681, 695, 705, 711, 713, 715, 752], "split": [62, 165, 169, 262, 337, 437, 489, 537, 541, 550, 551, 561, 562, 679, 682, 695, 707, 713, 752], "larg": [62, 139, 337, 411, 676, 680, 681, 709, 749], "amount": [62, 71, 337, 707, 709, 750], "notic": [62, 273, 337, 748, 750], "interpret": [62, 168, 337, 436, 506, 507, 551, 556, 676, 680, 681], "hierarch": [62, 90, 91, 96, 168, 180, 265, 337, 366, 367, 370, 436, 690, 709, 713], "particular": [62, 90, 91, 96, 163, 171, 173, 337, 366, 367, 370, 422, 492, 668, 675, 676, 679, 680, 681, 682, 705, 706, 707, 709, 711, 749, 755], "relev": [62, 337, 705], "sql": [62, 95, 337, 713], "influenc": [62, 337, 752], "preserv": [62, 128, 290, 337, 400, 568, 621, 627, 642, 676, 682, 753], "piec": [62, 337, 705, 707, 709], "dataframegroupbi": [62, 694], "about": [62, 71, 337, 598, 652, 653, 705, 708, 709, 713, 752], "390": [62, 337, 747], "350": [62, 337], "parrot": [62, 65, 130, 337, 341, 491], "370": [62, 337, 581], "anim": [62, 75, 319, 337, 351, 464], "380": [62, 337, 581], "375": [62, 337], "captiv": [62, 337], "wild": [62, 337], "from_arrai": [62, 229, 257, 337], "185": [62, 337], "210": [62, 337], "g1": [62, 337], "g2": [62, 337], "variou": [62, 337, 700, 705, 706, 707, 709], "lambda": [62, 337, 364, 573, 592, 593, 611, 618, 711, 714, 749, 750], "333333": [62, 124, 129, 138, 337, 396, 401, 410, 449, 598], "666667": [62, 185, 337, 452], "000000": [62, 76, 77, 105, 106, 129, 140, 337, 352, 353, 380, 381, 401, 412, 596, 598, 637, 747, 749, 753], "murmur3": [64, 340], "hash": [64, 110, 340, 652], "md5": [64, 340], "murmurhash3": [64, 340], "120": [64, 340, 490], "1930516747": [64, 340], "422619251": [64, 340], "941520876": [64, 340], "7be4bbacbfdb05fb3044e36c22b41e8b": [64, 340], "947ca8d2c5f0f27437f156cfbfab0969": [64, 340], "d0580ef52d27c043c8e341fd5039b166": [64, 340], "330519225": [64, 340], "397962448": [64, 340], "1345834934": [64, 340], "57ce879751b5169c525907d5c563fae1": [64, 340], "948d6221a7c4963d4be411bcead7e32b": [64, 340], "fe061786ea286a515b772d91b0dfcd70": [64, 340], "quickli": [65, 341, 747], "your": [65, 125, 126, 341, 707, 713, 747, 750], "right": [65, 81, 95, 129, 134, 142, 225, 234, 242, 261, 262, 296, 314, 341, 401, 406, 413, 487, 501, 508, 532, 540, 547, 548, 552, 556, 558, 568, 663, 666, 684, 685, 686, 687, 720, 726, 732, 748], "tail": [65, 341], "allig": [65, 341], "bee": [65, 341, 534, 552, 558], "lion": [65, 130, 341, 503], "monkei": [65, 130, 341, 464, 503], "shark": [65, 341], "whale": [65, 341], "zebra": [65, 341], "view": [65, 164, 170, 341, 432, 439, 584, 705, 709, 751], "three": [65, 107, 113, 341, 493, 663, 673, 709, 747, 750, 752], "verbos": [71, 711], "buf": 71, "max_col": 71, "memory_usag": 71, "null_count": [71, 334], "print": [71, 126, 134, 175, 406, 441, 593, 664, 688, 747, 750, 754], "concis": 71, "usag": [71, 94, 369, 679, 705, 706, 710, 713, 750], "full": [71, 95, 168, 436, 611, 678, 707, 713, 747, 750, 755], "max_info_column": 71, "writabl": 71, "sy": 71, "stdout": 71, "send": 71, "you": [71, 112, 130, 165, 210, 389, 402, 433, 489, 499, 536, 611, 663, 706, 707, 709, 713, 747, 748, 749, 750, 753, 755], "further": 71, "process": [71, 175, 441, 713, 747, 749, 750], "switch": [71, 688], "truncat": [71, 653, 714], "total": [71, 94, 369, 568, 626, 671, 675, 680, 720, 726, 732, 748, 750], "alwai": [71, 102, 123, 139, 179, 252, 290, 372, 395, 411, 445, 529, 676, 706, 709, 714, 749, 750, 752, 755], "never": [71, 477, 709, 750], "introspect": 71, "shown": [71, 503], "human": 71, "readabl": 71, "unit": [71, 169, 437, 454, 679, 688], "estim": [71, 303, 598], "made": [71, 164, 176, 273, 432, 569, 705, 714, 753], "consum": [71, 705, 750], "real": 71, "cost": [71, 706], "smaller": [71, 94, 500], "max_info_row": 71, "int_valu": 71, "text_valu": 71, "alpha": [71, 104, 107], "beta": 71, "gamma": [71, 654], "delta": [71, 153, 185, 421, 452, 454, 598, 614, 617, 659, 661], "epsilon": 71, "float_valu": 71, "int_col": 71, "text_col": 71, "float_col": 71, "core": [71, 172, 255, 268, 440, 695, 707, 709, 713, 750, 753], "130": 71, "byte": [71, 94, 369, 484, 566, 652, 668, 675, 676, 679, 680, 681, 682, 709, 720, 722, 726, 728, 732, 734, 752], "its": [71, 112, 162, 181, 293, 389, 688, 706, 707, 709, 710, 713, 752], "pipe": [71, 749], "content": [71, 168, 436, 529, 682, 708, 709, 750], "io": [71, 654, 676, 680, 681, 695, 751], "stringio": [71, 676, 679, 682], "getvalu": 71, "mode": [71, 168, 436, 678, 705, 752], "special": [71, 208, 260, 463, 492, 517, 529, 653, 709, 711, 748, 755], "fine": [71, 707], "tune": [71, 752], "random_strings_arrai": 71, "random": [71, 139, 173, 411, 598, 713, 747, 753, 755], "column_1": 71, "column_2": 71, "column_3": 71, "1000000": [71, 171, 173, 720, 726, 732], "999999": 71, "mb": [71, 173, 668, 713], "num": [72, 713], "interleav": [73, 161, 430], "major": [73, 665, 755], "a1": [73, 497, 747], "a2": [73, 747], "a3": [73, 747], "b1": 73, "b2": [73, 497], "b3": 73, "linear": [74, 119, 346, 393, 589, 709, 747], "limit_direct": [74, 346], "limit_area": [74, 346], "downcast": [74, 220, 346, 584, 689], "techniqu": [74, 346], "space": [74, 171, 173, 346, 493, 529, 537, 538, 541, 551, 560, 676], "linearli": [74, 346], "unsort": [74, 346], "lead": [74, 163, 346, 534, 552, 558, 598, 747, 750], "erron": [74, 346], "num_leg": [75, 182], "num_w": [75, 182], "check": [75, 145, 230, 231, 232, 233, 234, 238, 239, 240, 265, 314, 351, 473, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 535, 565, 566, 684, 685, 686, 687, 706, 747, 755], "present": [75, 117, 118, 156, 179, 391, 392, 426, 445, 475, 529, 551, 556, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 653, 706, 708, 714, 750], "leg": [75, 98], "wing": [75, 98], "separ": [75, 486, 493, 536, 537, 541, 550, 551, 556, 666, 682, 700, 705, 707, 709, 711, 750], "spider": 75, "everyth": [76, 77, 90, 91, 96, 241, 352, 353, 366, 367, 370, 464, 555, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619], "timedelta64": [76, 77, 105, 106, 352, 353, 380, 381, 454, 647, 648, 649, 650, 651, 752, 753], "charact": [76, 77, 105, 106, 352, 353, 380, 381, 485, 486, 487, 488, 489, 490, 491, 492, 498, 499, 500, 506, 507, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 537, 538, 540, 544, 545, 549, 552, 556, 558, 559, 560, 561, 563, 564, 565, 566, 568, 652, 676, 682, 706, 709], "incas": [76, 77, 105, 106, 352, 353, 380, 381], "1939": [76, 77, 105, 106, 352, 353, 380, 381], "05": [76, 77, 105, 106, 129, 179, 188, 190, 191, 192, 193, 196, 201, 202, 206, 293, 352, 353, 380, 381, 401, 445, 621, 623, 624, 625, 626, 627, 641, 642, 645, 684, 685, 686, 687, 688], "27": [76, 77, 105, 106, 179, 352, 353, 380, 381, 445, 489, 630, 632, 633, 713], "joker": [76, 77, 105, 106, 352, 353, 380, 381], "32": [76, 77, 105, 106, 135, 352, 353, 380, 381, 407, 711], "float64index": [76, 77, 105, 106, 148, 222, 352, 353, 380, 381, 417], "left": [81, 95, 126, 129, 135, 142, 181, 225, 234, 242, 261, 262, 296, 314, 401, 407, 413, 487, 501, 508, 534, 540, 544, 547, 548, 549, 558, 563, 568, 663, 684, 685, 686, 687, 705, 713], "lsuffix": [81, 95], "rsuffix": [81, 95], "inner": [81, 95, 242, 464, 680, 681], "outer": [81, 95, 242, 464, 681], "suffic": [81, 750], "avoid": [81, 290, 705, 706, 709, 711, 752, 755], "conflict": 81, "ensur": [81, 164, 170, 432, 439, 491, 681, 705, 706, 707, 713], "now": [81, 120, 666, 705, 709, 713, 747, 750], "due": [81, 593, 676, 706, 713, 714, 750], "lack": 81, "five": [82, 654], "int64index": [82, 148, 212, 217, 220, 229, 240, 242, 246, 247, 249, 251, 255, 257, 267, 298, 417, 492, 686, 709], "fisher": [83, 84, 149, 357, 358, 418], "unbias": [83, 84, 149, 185, 303, 357, 358, 418, 452, 598], "kurtosi": [83, 357], "sampl": [83, 84, 149, 153, 301, 357, 358, 418, 421, 435, 713], "obtain": [83, 84, 357, 358, 479, 567, 654, 755], "definit": [83, 84, 280, 357, 358, 377, 443, 598], "normal": [83, 84, 139, 153, 182, 185, 187, 303, 357, 358, 411, 421, 449, 452, 538, 598, 614, 617, 662, 680, 681, 747], "1999999999999904": [83, 84, 357, 358], "kurt": [84, 358], "final": [85, 359, 680, 681, 709, 750], "dai": [85, 173, 187, 190, 191, 192, 195, 196, 206, 321, 359, 454, 455, 460, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 645, 647, 649, 651, 688, 750, 753], "cond": [89, 186, 365, 453], "dimens": [89, 102, 186, 365, 377, 453], "collaps": [90, 91, 96, 366, 367, 370], "attempt": [90, 91, 96, 210, 217, 273, 366, 367, 370, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619, 666, 676, 688, 706, 714, 750], "17": [92, 129, 134, 142, 179, 293, 368, 401, 406, 413, 445, 489, 713, 753], "unpivot": [93, 672], "wide": [93, 672, 705, 707, 750], "id_var": [93, 672], "value_var": [93, 672], "var_nam": [93, 672], "value_nam": [93, 672], "whose": [94, 113, 569, 666, 673, 705, 709], "ones": [94, 472], "5000": 94, "astyp": [94, 231, 239, 695, 713, 715], "head": [94, 179, 445, 713, 747, 750, 755], "40000": 94, "storag": [94, 163, 171, 173, 668, 675, 676, 679, 680, 681, 682, 751], "mani": [94, 379, 382, 598, 696, 705, 707, 709, 711, 713, 748, 750, 752, 755], "repeat": [94, 161, 430, 492, 695], "5008": 94, "43": [94, 650, 750], "give": [94, 279, 705, 706, 709, 747, 749], "rest": [94, 527, 555, 560, 707], "necessarili": [94, 180, 690], "left_on": 95, "right_on": 95, "left_index": 95, "right_index": 95, "_x": 95, "_y": 95, "databas": 95, "join": [95, 181, 464, 676, 695, 712, 751, 755], "intersect": [95, 464, 711], "leftsemi": 95, "leftanti": 95, "exact": [95, 119, 139, 263, 393, 411, 663, 686, 688], "opposit": 95, "were": [95, 471, 562, 713, 750], "overlap": [95, 143, 181, 464, 499, 503, 653, 663], "determinist": [95, 755], "df_a": [95, 713], "vals_a": [95, 713], "df_b": [95, 713], "vals_b": [95, 713], "df_merg": 95, "sort_valu": [95, 695, 713], "typecast": 95, "ambigu": [95, 187], "exactli": [95, 684, 685, 686, 687, 706, 749], "extend": [95, 663, 705, 713, 750], "semi": [95, 598], "anti": 95, "modulo": [97, 132, 371, 404], "4294967295": [97, 132, 371, 404], "appear": [98, 123, 334, 379, 382, 395, 493, 568], "often": [98, 694, 705, 750, 753], "search": [98, 168, 273, 436, 476, 478, 491, 501, 502, 503, 508, 545, 547, 548, 705, 712, 753, 755], "don": [98, 108, 126, 182, 372, 386, 449, 576, 597, 679, 705, 750, 753], "value_count": [98, 713], "speci": [98, 249], "bird": [98, 130, 464], "mammal": [98, 130], "arthropod": 98, "multipli": [99, 373, 750], "largest": [104, 379], "priorit": [104, 750], "popul": [104, 107, 747, 750], "59000000": [104, 107, 379, 382], "65000000": [104, 107, 379, 382], "434000": [104, 107, 379, 382], "337000": [104, 107, 379, 382], "11300": [104, 107, 379, 382], "gdp": [104, 107], "1937894": [104, 107], "2583560": [104, 107], "12011": [104, 107], "4520": [104, 107], "12128": [104, 107], "17036": [104, 107], "182": [104, 107], "38": [104, 107, 157, 427, 748], "311": [104, 107], "IT": [104, 107], "fr": [104, 107], "mt": [104, 107], "mv": [104, 107], "bn": [104, 107], "nr": [104, 107], "tv": [104, 107], "itali": [104, 107, 379, 382], "franc": [104, 107, 379, 382], "malta": [104, 107, 379, 382], "maldiv": [104, 107, 379, 382], "brunei": [104, 107, 379, 382], "iceland": [104, 107, 379, 382], "nauru": [104, 107, 379, 382], "tuvalu": [104, 107, 379, 382], "anguilla": [104, 107, 379, 382], "smallest": [107, 123, 382, 395, 478, 689], "retriev": [107, 505, 678], "ti": [107, 123, 263, 395], "resolv": [107, 715], "revers": [107, 379, 382, 608, 713], "distinct": [108, 351, 709], "npart": 110, "keep_index": [110, 141], "partit": [110, 173, 668, 681, 695, 713], "fill_method": [111, 388], "percent": [111, 388], "sequenti": [111, 388, 749, 750, 755], "handl": [111, 163, 168, 169, 181, 319, 388, 422, 436, 437, 464, 551, 556, 678, 689, 695, 708, 709, 711, 712, 752], "consecut": [111, 127, 247, 388, 399, 488, 536, 537, 676], "increment": [111, 388, 668], "data_keyword": [112, 389, 611], "chain": [112, 389], "groupbi": [112, 389, 695, 709, 712, 713, 714, 751, 755], "write": [112, 163, 167, 168, 169, 171, 173, 389, 436, 437, 668, 670, 676, 678, 706, 708, 712, 713, 747, 750, 752], "arg2": [112, 389], "arg3": [112, 389], "sai": [112, 389, 505, 709, 750], "suppos": [112, 389], "reshap": [113, 152, 673, 695, 747], "organ": [113, 673, 707, 708], "rearrang": [113, 673], "aggfunc": [114, 662, 674], "margin": [114, 662, 674], "margins_nam": [114, 662, 674], "spreadsheet": [114, 674], "pivot": [114, 180, 674, 690], "excel": [114, 674], "exponenti": [116, 136, 390, 408], "min_count": [117, 118, 156, 391, 392, 426, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619], "fewer": [117, 118, 156, 391, 392, 426, 585, 586, 587, 604, 605, 606, 607, 612, 615, 619], "5040": [117, 118, 391, 392], "q": [119, 120, 393, 589, 644], "interpol": [119, 120, 393, 589], "higher": [119, 120, 393, 589, 679, 709, 752], "midpoint": [119, 393, 589], "nearest": [119, 120, 263, 393, 589], "desir": [119, 120, 160, 252, 393, 429, 589, 676, 679, 706, 750, 755], "li": [119, 120, 393, 589], "j": [119, 120, 158, 179, 393, 445, 495, 750], "approxim": [119, 393], "One": [119, 125, 168, 169, 188, 193, 202, 279, 397, 436, 437, 621, 627, 642, 705, 711, 714, 747, 748, 753], "notabl": [119, 150, 419, 714], "doesn": [119, 139, 171, 173, 411, 529, 713, 714, 753], "under": [119, 681, 700, 705, 707, 708, 709, 713, 714], "cp": [119, 653, 713, 747, 750, 753, 755], "55": [119, 247, 750], "deprec": [120, 675, 680, 708], "pleas": [120, 163, 168, 171, 173, 364, 436, 668, 675, 676, 679, 680, 681, 682, 713, 750], "local_dict": [121, 713], "local": [121, 668, 675, 676, 678, 679, 680, 681, 682, 707, 713], "filter": [121, 499, 680, 681, 705, 711, 712, 713, 755], "search_dat": [121, 713], "search_date2": 121, "averag": [123, 395, 750], "na_opt": [123, 395], "pct": [123, 395], "direct": [123, 395, 590, 679, 707, 713, 752], "dens": [123, 395, 747], "lowest": [123, 395, 501, 508, 547, 709], "increas": [123, 237, 314, 347, 349, 382, 395, 676, 688, 711], "bottom": [123, 395, 676], "rtruediv": [124, 396], "002778": [124, 138, 396, 410], "005556": [124, 138, 396, 410], "250000": [124, 138, 396, 410], "toler": [125, 224, 263, 273, 397, 684, 685, 686, 687], "conform": [125, 242, 397, 707], "unless": [125, 422, 551, 556, 662, 705], "either": [125, 135, 139, 151, 172, 181, 223, 402, 407, 411, 420, 440, 478, 486, 491, 666, 675, 676, 679, 680, 681, 682, 707, 709, 713, 747, 750, 752], "even": [125, 164, 290, 372, 432, 676, 679, 705, 706, 750, 753], "convent": [125, 126, 129, 401], "index_label": 125, "column_label": 125, "_highly_": 125, "clarifi": [125, 126], "intent": [125, 126], "fiction": [125, 505], "firefox": 125, "chrome": 125, "safari": 125, "ie10": 125, "konqueror": 125, "http_statu": [125, 714], "404": [125, 747], "301": 125, "response_tim": 125, "new_index": 125, "iceweasel": 125, "comodo": 125, "dragon": 125, "retain": [125, 397, 500, 714, 753], "user_ag": 125, "alter": [126, 173, 246, 398], "throw": [126, 169, 437, 706, 752], "index_mapp": 126, "columns_mapp": 126, "highli": [126, 681, 755], "overwrit": [126, 181, 269], "postfix": 126, "repetit": [127, 247, 399], "newli": [127, 247, 399, 402, 590, 709], "to_replac": [128, 400], "regex": [128, 400, 491, 492, 497, 503, 535, 544, 546, 551, 556], "mismatch": [128, 400, 686, 687], "actual": [128, 165, 400, 433, 529, 706, 709, 713, 750, 753], "exhibit": [128, 400, 707], "silent": [128, 400], "rule": [129, 401, 705, 711], "close": [129, 187, 209, 261, 262, 296, 401, 454, 668, 678, 707, 709, 755], "loffset": [129, 401], "start_dai": [129, 401], "dateoffset": [129, 401], "bin": [129, 314, 401, 449, 663], "interv": [129, 230, 231, 232, 233, 234, 238, 239, 261, 262, 314, 401, 663, 709, 749], "edg": [129, 134, 314, 401, 406, 501, 508, 547, 548, 663, 706], "bucket": [129, 401], "closest": [129, 401], "nanosecond": [129, 169, 173, 401, 437, 455, 647, 679, 688], "millisecond": [129, 169, 401, 437, 455, 647, 679, 688], "minut": [129, 401, 455, 647, 688, 712, 751], "2001": [129, 202, 207, 321, 401, 621, 626, 627, 629, 642, 646], "1t": [129, 401], "06": [129, 179, 188, 190, 191, 192, 206, 401, 445, 621, 623, 624, 625, 626, 644, 645, 647, 648, 649, 651], "downsampl": [129, 401], "3t": [129, 401], "23": [129, 179, 401, 445, 489, 491, 516, 517, 524, 713, 748, 753], "57": [129, 179, 401, 445, 750], "upsampl": [129, 401], "asfreq": [129, 401], "price": [129, 401, 505, 750], "19": [129, 179, 401, 445, 489, 598, 709, 713, 747], "volum": [129, 401], "60": [129, 401, 713], "week_start": [129, 401], "7d": [129, 401], "29": [129, 199, 401, 489, 630, 632, 633, 636, 639, 713, 755], "28": [129, 401, 489, 626, 630, 632, 633, 713], "63": [129, 401, 749], "col_level": [130, 672], "col_fil": 130, "reset": [130, 289, 402, 464], "try": [130, 402, 679, 689, 705, 706], "389": 130, "80": [130, 581], "max_spe": 130, "from_tupl": [130, 269, 270, 273, 402, 713, 714], "fly": [130, 676, 679], "run": [130, 514, 515, 516, 517, 523, 524, 525, 528, 652, 653, 706, 707, 708, 711, 713, 747, 750, 755], "window": [134, 406, 695, 712, 751, 755], "center": [134, 406, 540, 568, 695, 706, 750], "win_typ": [134, 406], "baseindex": [134, 210, 213, 406, 709, 715, 716], "As": [134, 168, 406, 436, 705, 706, 709, 750], "oppos": [134, 406, 713], "fix": [134, 168, 188, 193, 202, 364, 406, 436, 621, 627, 642, 709, 748], "accommod": [134, 406], "get_window_bound": [134, 406], "20190101": [134, 406], "2019": [134, 249, 406], "01t09": [134, 406], "000": [134, 406, 514, 671, 676, 677, 680, 681], "math": [134, 406, 654, 750], "49": [134, 406, 747, 750], "64": [134, 406, 709, 750], "81": [134, 406, 750], "some_func": [134, 406], "sqrt": [134, 406, 750], "And": [134, 406, 750], "decim": [135, 169, 407, 437, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 676, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 749, 751, 755], "half_even": [135, 407], "half_up": [135, 407], "affect": [135, 171, 407, 705, 752], "67": [135, 407], "66": [135, 407], "subtract": [137, 154, 409, 424], "359": [137, 154, 155, 409, 424, 425], "179": [137, 154, 155, 409, 424, 425], "frac": [139, 411], "random_st": [139, 411], "reproduc": [139, 411], "ident": [139, 175, 411, 441, 464, 551, 556, 616, 684, 685, 686, 687, 711, 755], "fraction": [139, 411, 524, 720, 726, 732], "disallow": [139, 411], "state": [139, 269, 411], "uniform": [139, 411, 663], "probabl": [139, 411], "unlik": [139, 411, 682, 707, 749, 752, 755], "randomst": [139, 411], "seed": [139, 411, 713, 750], "stat": [139, 411, 695, 707, 751], "randomli": [139, 411, 713], "slow": [139, 411, 705, 749], "achiev": [139, 411, 567, 749], "especi": [139, 411, 705, 711, 749], "advis": [139, 411, 710], "826087": [140, 412], "913043": [140, 412], "043478": [140, 412], "map_index": 141, "map_siz": 141, "scatter": 141, "destin": [141, 750], "conserv": 141, "find": [142, 210, 263, 413, 492, 502, 503, 508, 547, 695, 705, 706, 707, 750], "maintain": [142, 413, 706, 713, 715], "hypothet": [142, 413], "monoton": [142, 236, 237, 263, 273, 278, 314, 347, 348, 349, 413], "wrong": [142, 413], "correct": [142, 413, 679, 750], "values_df": [142, 413], "reinterpret": [144, 248, 414], "lightweight": [144, 248, 414], "append": [145, 168, 436, 486, 551, 556, 666], "too": [145, 503, 705, 743, 750], "hello": [148, 417, 484, 485, 489, 493, 504, 532, 538, 539, 542, 547, 549, 554, 561, 562, 675, 679], "37037": [149, 418], "sort_remain": [150, 419], "quick": [150, 419], "builtin": [150, 419, 675, 676, 679, 680, 681, 682], "vector": [150, 296, 419, 422], "prescrib": 152, "ddof": [153, 185, 421, 452, 598, 614, 617, 659, 661], "deviat": [153, 273, 421, 614, 659, 706, 714], "freedom": [153, 185, 421, 452, 598, 614, 617, 659, 661], "divisor": [153, 185, 421, 452, 614, 617, 659, 661], "290994": [153, 421], "squar": [157, 427], "249": [157, 427], "llama": 158, "cdf": 158, "unsupport": [160, 252, 429, 574, 575, 583, 584, 588, 590, 594, 595, 603, 610, 654, 749, 750], "preserve_index": 162, "save": [162, 171, 173, 668, 705, 709], "path_or_buf": [163, 168, 169, 436, 437, 678, 679], "sep": [163, 486, 529, 537, 541, 550, 676], "na_rep": [163, 486], "encod": [163, 168, 169, 327, 436, 437, 565, 566, 652, 653, 666, 678, 679, 709], "compress": [163, 168, 169, 171, 173, 436, 437, 668, 676, 679, 682, 752], "line_termin": 163, "storage_opt": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "csv": [163, 676, 695, 751, 752], "file": [163, 167, 168, 169, 171, 173, 436, 437, 508, 548, 652, 668, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 682, 705, 708, 709, 711, 713, 748, 752], "path": [163, 167, 168, 169, 171, 173, 436, 437, 652, 668, 671, 675, 676, 677, 678, 679, 680, 681, 682, 705, 706, 707, 713, 752], "char": [163, 540, 676], "delimit": [163, 169, 437, 500, 529, 537, 545, 551, 556, 561, 562, 676, 679, 682], "utf": [163, 490, 565, 566, 679, 709], "scheme": [163, 705], "sens": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682, 709], "connect": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "port": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682, 707], "usernam": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "password": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "etc": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682, 694, 704, 705, 707, 748, 749], "url": [163, 171, 173, 551, 565, 566, 668, 675, 676, 679, 680, 681, 682], "urllib": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "s3": [163, 171, 173, 289, 516, 668, 675, 676, 679, 680, 681, 682], "gc": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "fsspec": [163, 171, 173, 668, 675, 676, 679, 680, 681, 682], "open": [163, 166, 168, 171, 173, 253, 296, 434, 436, 449, 665, 668, 669, 675, 676, 678, 679, 680, 681, 682, 707], "read_csv": [163, 713], "quote_nonnumer": [163, 676], "filenam": [163, 169, 437, 668, 671, 676, 677, 680, 681, 705], "set_index": [163, 180, 242, 690, 749], "na_valu": [164, 170, 432, 439, 676], "asarrai": [164, 170, 432, 439, 747, 750], "strictli": [164, 432, 705, 709], "abbrevi": [165, 688], "sp": 165, "collect": [165, 212, 364, 433, 482, 707, 711, 713, 749, 755], "want": [165, 433, 705, 707, 713, 747, 750, 753], "defaultdict": [165, 433], "from_dict": 165, "to_json": [165, 679], "json": [165, 169, 437, 505, 679, 695, 705, 752], "col2": 165, "row1": 165, "row2": 165, "ordereddict": [165, 433], "dd": [165, 433, 486, 676], "dlpack": [166, 253, 434, 665, 747, 752], "tensor": [166, 253, 434, 653, 665], "dmlc": [166, 253, 434, 665], "pycapsul": [166, 253, 434, 665], "pointer": [166, 253, 434, 665, 709], "cudf_obj": [166, 253, 434], "pycapsule_obj": [166, 253, 434, 665], "encapsul": [166, 253, 434, 665, 709, 711], "feather": [167, 168, 436, 677, 695, 752], "read_feath": 167, "hdf5": [168, 436, 695], "hdfstore": [168, 436, 678, 695], "hdf": [168, 436, 678, 697, 752], "applic": [168, 436, 598, 695, 709, 711], "hold": [168, 230, 231, 232, 233, 234, 238, 239, 436, 676], "relat": [168, 436, 695, 752], "individu": [168, 223, 436, 473, 489, 491, 709, 753], "r": [168, 422, 436, 489, 497, 502, 525, 538, 563, 567, 678], "delet": [168, 436], "read": [168, 436, 671, 675, 676, 677, 678, 679, 680, 681, 682, 709, 713, 748, 752], "alreadi": [168, 436, 464, 538, 709, 747], "fast": [168, 436, 679, 709, 713, 755], "searchabl": [168, 436], "pytabl": [168, 436, 695], "wors": [168, 436], "data_column": [168, 436], "disk": [168, 436, 676, 679, 748], "complevel": [168, 436], "disabl": [168, 436, 676, 709, 752], "complib": [168, 436], "zlib": [168, 436], "lzo": [168, 436], "bzip2": [168, 436], "blosc": [168, 436], "v0": [168, 436], "compressor": [168, 436], "blosclz": [168, 436], "lz4": [168, 436], "lz4hc": [168, 436], "snappi": [168, 171, 173, 436, 668, 752], "zstd": [168, 171, 173, 436, 752], "issu": [168, 436, 705, 750], "fletcher32": [168, 436], "checksum": [168, 436], "written": [168, 171, 173, 436, 668, 705, 707, 711, 750], "strict": [168, 436, 678, 684, 685, 686, 687, 688], "decod": [168, 436, 565, 678, 679], "read_hdf": [168, 436], "to_parquet": [168, 436, 681, 713, 748, 752], "parquet": [168, 173, 436, 680, 681, 695, 751, 752], "to_feath": [168, 436, 677], "unix": [169, 437, 688], "just": [169, 437, 555, 679, 705, 709, 747, 748, 750], "schema": [169, 437, 671, 679, 681], "compon": [169, 437, 504, 705, 707, 709], "date_format": [169, 437, 644], "epoch": [169, 437, 688], "iso": [169, 196, 437, 636], "convers": [169, 437, 440, 695, 709, 747], "iso8601": [169, 437], "double_precis": [169, 437], "force_ascii": [169, 437], "ascii": [169, 437, 485, 538, 559, 560, 564, 566], "date_unit": [169, 437, 679], "govern": [169, 437], "precis": [169, 437, 663, 679, 711, 720, 721, 726, 727, 732, 733, 748, 755], "microsecond": [169, 437, 455, 459, 647, 650, 651, 679], "default_handl": [169, 437], "handler": [169, 437, 675, 676, 679, 680, 681, 682, 709], "receiv": [169, 437, 689], "incorrect": [169, 437], "gzip": [169, 437, 676, 679], "bz2": [169, 437, 679], "xz": [169, 437, 679], "read_json": [169, 437], "fname": [171, 671], "rowgroup": [171, 173, 668], "stripe_size_byt": 171, "stripe_size_row": 171, "row_index_strid": 171, "cols_as_map_typ": 171, "orc": [171, 680, 695, 751, 752], "stripe": [171, 173, 680], "granular": 171, "67108864": 171, "64mb": 171, "10000": [171, 747], "listdtyp": [171, 474, 495, 679, 709, 748], "much": [171, 173, 705, 706, 709, 713], "faster": [171, 173, 473, 680, 688, 705, 750], "read_orc": [171, 681, 713, 752], "nullabl": [172, 186, 440, 453, 705, 709, 714, 748, 755], "engin": [173, 491, 492, 497, 503, 535, 675, 679, 680, 681, 712], "partition_col": [173, 668], "partition_file_nam": 173, "partition_offset": 173, "metadata_file_path": 173, "int96_timestamp": 173, "row_group_size_byt": 173, "134217728": 173, "row_group_size_row": 173, "max_page_size_byt": 173, "max_page_size_row": 173, "return_metadata": [173, 669], "root": [173, 668, 706], "directori": [173, 668, 681, 705, 708, 711, 713], "uuid4": 173, "hex": [173, 506, 507, 520, 565, 566], "page": [173, 668, 695, 708, 712, 752, 755], "blob": [173, 669], "footer": [173, 669], "file_path": [173, 713], "int96": 173, "julian": 173, "midnight": 173, "1970": [173, 187], "128": [173, 709], "uncompress": [173, 682], "524288": 173, "512kb": 173, "20000": 173, "rel": [173, 449, 684, 685, 686, 687, 705], "root_path": 173, "read_parquet": [173, 671, 713, 748, 752], "intern": [175, 187, 210, 441, 454, 676, 684, 685, 686, 687, 705, 706, 708, 709, 710, 711, 752], "transpar": [175, 441], "dure": [175, 441, 551, 556, 689, 706, 711], "n0": [175, 441], "struct": [176, 679, 695, 709, 712, 743, 745, 746, 749, 751, 752, 755], "compos": [176, 682, 706, 709, 711, 748, 750], "shorthand": [179, 445], "section": [179, 445, 546, 555, 705, 706, 707, 708, 711, 713, 749, 750, 753, 755], "cs1": [179, 445], "2021": [179, 445, 636], "46": [179, 445], "cs2": [179, 445], "56": [179, 445, 750], "58": [179, 202, 445, 621, 627, 642, 750], "59": [179, 193, 445, 671, 676, 677, 680, 681, 750], "cs3": [179, 445], "k": [179, 445, 489, 529, 584, 679, 714], "l": [179, 188, 193, 202, 445, 489, 499, 621, 627, 642, 707], "innermost": [180, 479, 680, 681, 690], "filter_func": 181, "There": [181, 201, 320, 641, 706, 711, 747, 752, 755], "coercibl": [181, 447], "notimplementederror": [181, 491, 541, 544, 550, 567, 706, 709], "proport": 182, "frequent": [182, 449, 709], "occur": [182, 449, 491, 706, 713], "ant": [182, 534, 552, 558], "varianc": [185, 452, 598, 617, 661], "falsi": [186, 453, 714], "treatment": [186, 453, 714], "gsr": [186, 453, 714, 748], "tz": 187, "dayfirst": [187, 676, 688], "yearfirst": [187, 688], "immut": [187, 208, 260, 261, 278, 454, 463], "sliceabl": [187, 208, 260, 454, 463], "pytz": 187, "timezon": 187, "dateutil": [187, 688], "tzfile": 187, "pars": [187, 676, 679, 688, 689, 713, 747], "year": [187, 190, 192, 195, 196, 201, 249, 623, 625, 629, 634, 635, 636, 641, 688, 750], "000000001": [187, 200, 640], "000000002": [187, 200, 640], "000000003": 187, "000000004": 187, "me": [188, 193, 202, 500, 545, 621, 627, 642], "alias": [188, 193, 202, 621, 627, 642, 705], "gindex": [188, 193, 196, 201], "2020": [188, 193, 196, 201, 641], "1999": [188, 193, 196, 201, 641], "41": [188, 491, 713], "datetime_index": [189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207], "int16index": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 686], "int16": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 321, 622, 623, 624, 625, 626, 628, 638, 639, 640, 643, 645, 646, 689, 748, 752], "365": [190, 192, 195, 623, 625, 629], "leap": [190, 192, 195, 623, 625, 629], "366": [190, 192, 195, 623, 625, 629], "2016": [190, 191, 192, 206, 623, 624, 625, 645, 688], "2017": [190, 191, 192, 206, 623, 624, 625, 634, 635, 645, 688], "week": [191, 196, 206, 624, 636, 645], "mondai": [191, 206, 624, 645], "sundai": [191, 206, 624, 645], "belong": [195, 201, 314, 629, 641, 705], "29th": [195, 629], "februari": [195, 629], "intercalari": [195, 629], "four": [195, 629, 705, 752], "400": [195, 212, 629, 747], "datafram": [196, 204, 210, 242, 251, 253, 254, 264, 265, 266, 267, 269, 270, 271, 274, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 291, 292, 299, 300, 304, 305, 306, 307, 309, 315, 316, 317, 318, 320, 323, 324, 325, 329, 330, 331, 336, 337, 338, 340, 341, 344, 346, 352, 353, 357, 358, 359, 360, 362, 363, 365, 366, 367, 370, 371, 373, 374, 376, 378, 380, 381, 389, 390, 391, 392, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 441, 444, 445, 449, 450, 451, 452, 453, 455, 461, 464, 497, 503, 541, 550, 551, 556, 569, 573, 581, 582, 584, 585, 586, 587, 590, 592, 593, 596, 598, 604, 605, 606, 607, 608, 611, 612, 615, 616, 618, 619, 636, 647, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 688, 690, 694, 695, 696, 704, 705, 707, 708, 709, 711, 712, 713, 714, 748, 749, 751, 752, 753, 755], "accord": [196, 364, 636, 662, 705, 709], "8601": [196, 636], "52": 196, "000001": [197, 637], "000002": [197, 637], "int32index": [197, 686], "januari": [199, 201, 639, 641], "decemb": [199, 201, 639, 641], "march": [201, 641], "april": [201, 641], "june": [201, 641], "third": [201, 267, 641], "juli": [201, 641], "septemb": [201, 641], "fourth": [201, 641], "octob": [201, 641], "int8index": [201, 686], "int8": [201, 327, 641, 689, 748, 752], "dt_idx": 202, "2002": [207, 629, 646], "basic": [208, 210, 260, 290, 463, 573, 592, 618, 713, 749, 750], "pure": [208, 260, 463, 706, 709], "__init__": [209, 261, 707], "tupleize_col": 210, "best": [210, 273, 537, 653, 705, 706, 708, 711, 713, 714, 755], "fit": [210, 379, 382, 713], "design": [210, 265, 705, 706, 708, 712], "factori": [210, 709], "re": [210, 491, 492, 497, 503, 535, 544, 554, 654, 713, 747, 750], "intim": 210, "familiar": [210, 705, 707, 708, 709, 712], "uint64": [210, 463, 748, 752], "uint64index": 210, "has_dupl": 210, "from_arrow": [210, 720, 726, 732, 738, 743, 755], "get_loc": [210, 714], "incompar": 217, "caught": 217, "catch": [217, 706], "idx1": [217, 229, 257], "idx2": [217, 229, 257], "nulls_are_equ": 218, "obj": [221, 464, 684, 685, 686, 687, 738, 740], "pdi": 222, "primarili": [223, 705], "stringindex": [223, 252, 327, 332, 356, 491, 541, 550, 713, 715, 716], "bound": [225, 262, 296, 477, 709, 750], "leftmost": 225, "past": [225, 682, 750], "rightmost": [225, 663], "ix": 225, "getitem": 225, "red": [229, 257, 265, 271], "blue": [229, 257, 265, 271], "is_integ": [230, 231, 232, 234, 238, 239], "is_float": [230, 231, 233, 234, 238, 239], "is_numer": [230, 231, 232, 233, 234, 239], "is_object": [230, 231, 232, 233, 234, 238], "is_categor": [230, 232, 233, 234, 238, 239], "is_interv": [230, 231, 232, 233, 238, 239], "categoricalindex": [231, 298, 663, 695], "is_boolean": [231, 232, 233, 234, 238, 239], "watermelon": [231, 233, 239], "orang": [231, 239], "appl": [231, 233, 238, 239, 689], "peter": 231, "victor": 231, "elisabeth": 231, "mar": 231, "mango": [233, 239], "intervalindex": [234, 663, 695], "monotonic_increas": 235, "is_monotonic_increas": [235, 347], "decreas": [236, 348, 379, 711], "cold": 238, "sought": 240, "is_contain": 240, "detect": [241, 245, 676, 679, 705, 751], "return_index": [242, 251], "join_index": 242, "lexicograph": [242, 273, 714], "lh": 242, "rh": 242, "renamed_index": 246, "abl": [249, 747], "partial": [249, 750], "renam": [249, 473], "quarter": [249, 632, 633], "cobra": 249, "frozenlist": 249, "itself": [251, 541, 550, 709], "sorted_index": 251, "1000": [251, 568, 709, 747, 750, 755], "allow_fil": 252, "green": [257, 270], "break": [262, 706], "pad": [263, 538, 551, 556, 568, 584, 653, 695, 709], "backfil": [263, 584], "distanc": [263, 494, 495], "broken": 263, "prefer": [263, 680, 681, 688, 705, 706, 711], "larger": [263, 512, 513, 653, 676, 680, 713, 752], "inexact": 263, "satisfi": [263, 705], "equat": 263, "unique_index": 263, "monotonic_index": 263, "abbc": 263, "non_monotonic_index": 263, "abcb": 263, "numeric_unique_index": 263, "sortord": 265, "from_fram": [266, 267, 270, 271, 274, 713], "cartesian": [269, 270, 271, 705, 711], "hi": [269, 713], "precip": 269, "nj": 269, "explicit": [269, 278, 750], "explicitli": [270, 654, 676, 707, 713, 747, 753, 755], "color": [270, 271], "purpl": 270, "effort": [273, 714], "fail": [273, 707, 752], "situat": [273, 593, 714, 755], "mi": 273, "non_monotonic_non_unique_idx": 273, "coerc": [273, 688, 689, 714, 747, 755], "unus": [278, 465, 473], "homogen": 278, "hashabl": 279, "been": [279, 709, 752], "overridden": 279, "1d": [279, 334, 630, 632, 633, 654, 665, 709], "overrid": [279, 709], "extensiondtyp": [279, 738, 739, 755], "iteritem": 279, "to_list": 279, "tolist": 279, "to_append": 289, "convert_dtyp": 290, "cach": [290, 688], "recompil": 290, "incur": [290, 706], "overhead": [290, 705], "nest": [290, 475, 479, 711, 738, 743, 751], "decor": [290, 709], "someth": [290, 541, 707, 711, 713, 750], "upcast": 290, "deriv": [290, 364], "lag": 293, "autocorrel": 293, "1438853844": 293, "9647548490": 293, "csf1": 294, "inclus": [296, 499, 663], "wherev": [296, 709], "gt": [296, 713, 750, 753], "lt": [296, 713, 750, 753], "alic": [296, 750], "bob": [296, 750], "carol": 296, "ev": 296, "anna": 296, "daniel": 296, "accessor": [298, 321, 695], "Be": 298, "parent": [298, 709, 711, 713], "reorder_categori": 298, "remove_categori": 298, "set_categori": 298, "abcd": [298, 488, 555], "as_ord": [298, 467], "as_unord": 298, "ser1": [301, 303], "62": [301, 303], "ser2": [301, 303], "51": [301, 303], "20454263717316112": 301, "015750000000000004": 303, "uint8": [308, 666, 689, 713, 743, 752], "3rd": 313, "ind": [314, 431, 676], "beetl": [319, 351], "hippo": [319, 351], "discard": [319, 676], "kept": [320, 382, 705, 706, 711], "datetimelik": [321, 695], "1h": 321, "hour": [321, 455, 647], "na_sentinel": 327, "chunkedarrai": 332, "singlecolumnfram": [332, 709], "pd_categor": 333, "set_mask": 334, "skip": [334, 675, 676, 680, 689], "mark": [334, 706, 709], "bit": [334, 682, 709], "_column": 334, "seriesgroupbi": [337, 694], "turn": [351, 682, 709], "therefor": [351, 473, 568, 705, 706, 709], "width": [364, 487, 532, 540, 549, 567, 568, 663, 709], "rabbit": [364, 503], "kitten": [364, 494], "puppi": [364, 494], "countries_popul": [379, 382], "montserrat": [379, 382], "5200": [379, 382], "quant_index": 393, "renamed_seri": 398, "numeric_seri": 398, "come": [402, 706, 707, 711], "bar": [402, 662, 707, 711], "baz": [402, 544, 707], "mimic": [422, 707], "interfac": [422, 709, 747, 750], "stai": 422, "pattern": [422, 491, 492, 496, 497, 502, 503, 531, 544, 551, 556, 557, 709], "inspir": 422, "stringr": [422, 567], "packag": [422, 705, 706, 713, 747, 750, 753], "lib": [431, 713, 753], "stringarrai": 431, "0x7f796b0e7600": 431, "0x7f796b0e7750": 431, "half": 449, "divid": [449, 705], "500000": [449, 596, 598], "166667": 449, "996": [449, 747], "1132223": 454, "2023232": 454, "342234324": 454, "4234324": 454, "001132223": 454, "002023232": 454, "004234324": 454, "clear": [464, 709], "df1": [464, 668, 685, 713, 753], "letter": [464, 527, 560, 566], "df3": 464, "horizont": 464, "df4": 464, "polli": 464, "georg": [464, 541, 550, 750], "new_categori": [465, 472, 473], "seriesorindex": [465, 466, 467, 471, 472, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "genericindex": [468, 475, 476, 477, 478, 479, 480, 481, 482, 483, 491, 709], "relationship": [470, 598, 709, 715, 718], "old": [471, 472, 473, 706], "reorder": [472, 473], "action": 473, "simultan": 473, "specialis": 473, "hand": [473, 711], "surpris": 473, "leaf": [474, 738, 741], "search_kei": [476, 478], "extract": [477, 504, 546, 554, 570, 695], "indexerror": 477, "possibli": [479, 711], "flat": 479, "criterion": 481, "lists_indic": 482, "ef": [484, 488], "bye": [484, 713], "thank": [484, 489, 750], "sentenc": [485, 533, 551, 556, 559, 560, 563, 564], "swapcas": [485, 533, 560, 563, 564, 695], "friend": 485, "goodby": [485, 489, 561, 562], "stringcolumn": [486, 709], "again": [486, 750], "aa": [486, 543], "bb": [486, 531, 543], "fillchar": [487, 532, 540, 549], "whitespac": [487, 500, 514, 515, 516, 517, 519, 521, 523, 524, 525, 528, 532, 534, 538, 539, 540, 541, 545, 549, 550, 551, 552, 556, 558, 561, 562, 676], "as_list": 488, "gram": [488, 536, 537], "bigram": [488, 536], "ngram": [488, 537, 695], "str_seri": [488, 536, 653], "efgh": 488, "xyz": [488, 490, 536], "bc": [488, 495], "cd": 488, "fg": 488, "gh": 488, "xy": 488, "yz": 488, "bcd": 488, "efg": 488, "fgh": 488, "world": [489, 493, 504, 532, 538, 539, 547, 549, 561, 562, 679], "\u00e9ee": 490, "97": [490, 747], "121": 490, "122": [490, 747], "50089": 490, "101": [490, 653, 713], "98": 490, "99": [490, 505, 538], "pat": [491, 492, 496, 497, 503, 531, 535, 544, 546, 551, 556, 557], "flag": [491, 492, 497, 503, 535, 544, 747], "regular": [491, 492, 496, 497, 503, 535, 544, 551, 556, 557, 707, 751], "multilin": [491, 492, 497, 503, 535], "liter": [491, 492, 531, 544, 551, 556, 679], "anyth": [491, 541, 544, 550], "dotal": [491, 492, 497, 503, 535], "mous": 491, "hous": 491, "og": 491, "digit": [491, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 528, 566, 705, 720, 723, 726, 729, 732, 735, 748], "might": [491, 709, 747, 750], "35": [491, 647, 648, 649, 651, 671, 676, 677, 680, 681], "escap": [492, 531], "aaba": [492, 713], "baca": [492, 713], "caba": [492, 713], "dollar": 492, "sign": [492, 568, 689, 748], "aab": 492, "ca": 492, "token": [493, 500, 536, 537, 538, 539, 545, 561, 652, 653, 695], "measur": [494, 495, 542, 598, 705, 711], "levenshtein": [494, 495], "edit": [494, 495], "www": 494, "cuelog": 494, "com": [494, 565, 566], "blog": 494, "doggi": 494, "kitti": 494, "pup": 494, "dogi": 494, "tell": 495, "symmetr": 495, "diagon": [495, 747], "cba": 495, "nativ": [496, 706], "bat": [496, 557], "bear": [496, 557], "captur": [497, 705], "subject": [497, 750], "c3": 497, "repl": [498, 499, 509, 544, 546, 555], "alphanumer": [498, 514, 515, 516, 517, 519, 521, 523, 524, 525, 528], "pear": 498, "plum": 498, "72": [498, 713], "100k": 498, "unicod": [499, 517, 524, 538, 563], "ordin": [499, 563], "maketran": [499, 563], "helper": [499, 563, 709, 711, 747], "caus": 499, "undefin": [499, 653, 750], "aeiou": 499, "0123456789": [499, 509], "aei": 499, "ou": 499, "456": [499, 522, 671, 676, 677, 680, 681], "_": [499, 500, 509, 529, 531, 532, 536, 537, 545, 549, 566, 666], "___ou": 499, "aei__": 499, "0123___789": 499, "min_token_length": 500, "theme": [500, 545, 707], "music": [500, 545], "substr": [501, 508, 547, 548, 553, 554], "fulli": [501, 508, 547, 548, 713, 748, 750], "failur": [501, 547], "ddb": [501, 508, 548], "inn": 502, "sea": 502, "word": [503, 527, 533, 559, 564, 652, 653, 711], "json_path": 505, "allow_single_quot": 505, "strip_quotes_from_single_str": 505, "missing_fields_as_nul": 505, "jsonpath": 505, "quot": [505, 676, 679], "doubl": [505, 679], "strip": [505, 534, 552, 682, 695], "book": [505, 536, 537, 653], "author": 505, "nigel": 505, "ree": 505, "titl": [505, 527, 533, 559, 564, 695], "centuri": 505, "95": 505, "evelyn": 505, "waugh": 505, "sword": 505, "honour": 505, "1234": [506, 507], "abcdef": [506, 507], "1a2": [506, 507], "cafe": [506, 507], "htoi": [506, 695], "4660": [506, 507], "11259375": [506, 507], "418": [506, 507], "51966": [506, 507], "traceback": [508, 548, 713], "recent": [508, 548, 713], "stdin": [508, 548], "modul": [508, 548, 695, 705, 706, 710, 711, 713, 755], "abb": [508, 548], "abcdefghij": 509, "ab_cdefghij": 509, "01_23456789": 509, "abcdefghij_": 509, "0123456789_": 509, "ip": [510, 511, 707], "168": [510, 511], "212336897": [510, 511], "167772161": [510, 511], "ip2int": [511, 695], "conson": [512, 513], "troubl": [512, 513, 709], "vowel": 513, "isalpha": [514, 516, 517, 519, 521, 523, 524, 525, 528, 695, 750], "isdigit": [514, 515, 516, 519, 520, 521, 523, 524, 525, 528, 695, 750], "isnumer": [514, 515, 516, 517, 519, 520, 521, 523, 525, 528, 695], "isdecim": [514, 515, 517, 519, 520, 521, 523, 524, 525, 528, 695, 750], "alphabet": [514, 515, 516, 517, 519, 521, 523, 524, 525, 528], "isinteg": [514, 515, 516, 517, 519, 523, 524, 525, 528, 695], "isfloat": [514, 515, 516, 517, 520, 521, 523, 524, 525, 528, 695], "islow": [514, 515, 516, 517, 519, 521, 524, 525, 528, 695, 750], "lowercas": [514, 515, 516, 517, 519, 521, 523, 524, 525, 527, 528, 533, 559, 560, 564, 652], "isspac": [514, 515, 516, 517, 519, 521, 523, 524, 528, 695, 750], "isupp": [514, 515, 516, 517, 519, 521, 523, 524, 525, 695, 750], "uppercas": [514, 515, 516, 517, 519, 521, 523, 524, 525, 527, 528, 533, 559, 560, 564], "one1": [514, 515, 524], "punctuat": [514, 538], "isalnum": [515, 516, 517, 519, 521, 523, 524, 525, 528, 695, 750], "\u00b3": [516, 517, 524], "\u2155": [516, 517, 524], "superscript": 517, "subscript": 517, "123213": 519, "123": [519, 522, 534, 541, 550, 558, 647, 648, 649, 650, 651, 671, 676, 677, 680, 681], "0001": 519, "234": [519, 647, 648, 649, 650, 651, 748], "plain": 519, "text": [519, 521, 652, 653, 671, 675, 676, 677, 680, 681, 682, 695, 710], "123def": 520, "0x2d3": 520, "plan": [521, 706, 750], "ipv4": 522, "address": [522, 707, 709], "127": 522, "255": 522, "leopard": [523, 527, 528], "golden": [523, 527, 528], "eagl": [523, 527, 528], "snake": [523, 527, 528], "quantiti": 524, "20201101": 526, "192011": 526, "18200111": 526, "2120": 526, "string_na_rep": 529, "sep_na_rep": 529, "themselv": [529, 707, 743], "interven": 529, "suppli": [529, 666, 750], "ghi": [529, 676, 748], "a_b_c": 529, "d_e_f": 529, "g_h_i": 529, "a_b_k": 529, "c_d": 529, "esc": 531, "ddbc": 531, "b_": 531, "wildcard": [531, 709, 713], "ai_": 532, "__": [532, 549], "capit": [533, 559, 560, 563, 564, 695], "to_strip": [534, 552, 558], "trail": [534, 552, 558, 682, 720, 726, 732], "newlin": [534, 552, 558, 706], "rstrip": [534, 558, 695], "ac": 535, "my": 536, "favorit": 536, "my_favorit": 536, "hhh": 536, "abc_def": 536, "def_xyz": 536, "xyz_hhh": 536, "white": 537, "this_i": 537, "is_th": 537, "best_book": 537, "do_low": [538, 652], "subword_token": 538, "around": [538, 541, 551, 556, 706, 709, 750], "p": 538, "symbol": 538, "cjk": 538, "cc": [538, 543], "cf": 538, "do_lower_cas": [538, 652, 653], "accent": 538, "h\u00e9llo": 538, "tworld": 538, "\u0103\u0107c\u0117\u00f1ted": 538, "up": [540, 551, 556, 621, 627, 688, 705, 706, 709, 710, 713, 750, 755], "rjust": [540, 568, 695], "ljust": [540, 568, 695], "zfill": [540, 695], "prepend": [540, 568], "carib": 540, "tiger": 540, "rpartit": [541, 695], "linda": [541, 550], "van": [541, 550], "der": [541, 550], "berg": [541, 550], "pitt": [541, 550], "river": [541, 550], "999": [541, 550, 713, 747], "porter": 542, "stemmer": 542, "super": 542, "ccc": 543, "fuz": 544, "ba": 544, "bao": 544, "insid": [545, 654, 676, 682, 707, 749, 750], "back": [546, 676, 680, 681, 709, 713, 752, 755], "ref": [546, 573, 592, 618], "templat": 546, "a543": 546, "z756": 546, "av453": 546, "zv576": 546, "rfind": [548, 695, 750], "_________hello": 549, "___________rapid": 549, "version": [551, 556, 694, 706, 713, 747, 753], "tutori": [551, 713], "throughout": [551, 556, 709], "slightli": [551, 676, 680, 681, 694, 705], "complex": [551, 654, 707, 709, 750], "lstrip": [552, 558, 695], "slice_replac": [553, 695], "koala": 553, "fox": 553, "chameleon": 553, "oala": 553, "ox": 553, "hameleon": 553, "ko": 553, "fo": 553, "ch": 553, "kaa": 553, "fx": 553, "caeen": 553, "kl": 553, "cm": 553, "ello": 554, "abdc": 555, "until": [555, 713], "xc": 555, "xdc": 555, "xcde": 555, "axc": 555, "axd": 555, "rsplit": [556, 695], "endswith": [557, 695, 750], "unmap": 563, "untouch": 563, "swapc1s": 563, "low": [563, 750], "nt": 563, "nc": 563, "swapc1": 563, "No": [565, 566, 653, 663, 709, 713, 751], "2fb": [565, 566], "2fd": [565, 566], "20f": [565, 566], "2c6": [565, 566], "3a": [565, 566], "2f": [565, 566], "2frapid": [565, 566], "2fstart": [565, 566], "2fmedium": [565, 566], "medium": [565, 566, 663], "paragraph": 567, "expand_tabsbool": 567, "replace_whitespac": 567, "drop_whitespac": 567, "break_long_word": 567, "break_on_hyphen": 567, "str_wrap": 567, "expand_tab": 567, "nwrap": 567, "nto": 567, "reach": [568, 709, 711], "longer": [568, 707, 708], "001": 568, "children": [570, 709], "agg": [573, 616, 618, 713, 749], "f1": [573, 592, 618], "quantil": [573, 592, 618, 714, 749], "__name__": [573, 592, 618], "q0": [573, 592, 618], "f2": [573, 592, 618], "score": 581, "90": [581, 713], "hole": 584, "gap": [584, 709], "introduc": [590, 706], "indetermin": 590, "mult": 593, "redund": [593, 714], "pairwis": [596, 598], "kendal": 596, "val1": [596, 598], "val2": [596, 598], "val3": [596, 598], "385727": 596, "714575": 596, "bia": 598, "comparison": [598, 705, 706, 711, 712, 751, 753], "understand": 598, "member": [598, 706], "invert": 598, "matric": [598, 747], "en": [598, 654], "wikipedia": 598, "wiki": 598, "estimation_of_covariance_matric": 598, "833333": 598, "enum": 608, "complement": [608, 754], "cumcount": 608, "seen": 608, "aaabba": 608, "round": [621, 627], "dt": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 700, 713], "datetime_seri": [622, 623, 624, 625, 628, 637, 638, 639, 640, 643, 645, 646, 753], "2013": 629, "1y": 629, "2003": [629, 750], "2005": 629, "2007": 629, "2008": 629, "2009": [629, 636], "2011": 629, "2012": [629, 688, 753], "serindex": 636, "to_datetim": 636, "53": 636, "000000000": [640, 688], "dt_sr": 642, "weekday_seri": 644, "12231312123": [647, 648, 649, 650, 651], "1231231231": [647, 648, 649, 650, 651], "1123236768712": [647, 648, 649, 650, 651], "2135656": [647, 648, 649, 650, 651], "3244334234": [647, 648, 649, 650, 651], "141": [647, 648, 649, 651], "231": [647, 648, 649, 650, 651], "13000": [647, 648, 649, 651], "48": [647, 648, 649, 651, 682, 755], "712": [647, 648, 649, 650, 651], "656": [647, 648, 649, 650, 651, 747], "37": [647, 648, 649, 651, 753], "123000": [649, 651], "231000": [649, 651], "712000": [649, 651], "656000": [649, 651], "234000": [649, 651], "231312123": 650, "231231231": 650, "236768712": 650, "002135656": 650, "244334234": 650, "48912": 651, "21631": 651, "36768": 651, "2135": 651, "47534": 651, "hash_fil": 652, "bert": [652, 653], "subword": [652, 653], "vocabulari": [652, 653], "pretrain": [652, 653], "21x": 652, "util": [652, 653, 695, 712, 713], "hash_vocab_util": [652, 653], "hash_vocab": [652, 653], "max_length": 653, "max_num_row": 653, "add_special_token": 653, "return_tensor": 653, "return_token_type_id": 653, "batch": 653, "alloc": [653, 676, 680, 681, 709, 711, 750], "temporari": [653, 709], "twice": [653, 705], "classif": 653, "model": [653, 709, 713], "do_not_trunc": 653, "huggingfac": 653, "pt": 653, "tf": 653, "tensorflow": 653, "pytorch": 653, "torch": 653, "input_id": 653, "fed": 653, "attention_mask": 653, "attend": 653, "vocab": 653, "txt": 653, "voc_hash": 653, "cudf_token": 653, "tokenizer_output": 653, "1142": 653, "1110": 653, "1103": 653, "102": [653, 713], "1436": 653, "1520": 653, "featur": [654, 705, 706, 707, 754], "readthedoc": 654, "cudapysupport": 654, "cmath": 654, "libcudf": [654, 708, 709], "ptx": 654, "sin": 654, "co": 654, "tan": 654, "lgamma": 654, "global": [654, 709, 754], "known": [654, 688], "count_if_gt_3": 654, "rownam": 662, "colnam": 662, "cross": 662, "tabul": 662, "factor": 662, "dull": 662, "shini": 662, "retbin": 663, "include_lowest": 663, "segment": 663, "go": [663, 705, 707, 709, 712, 747, 750], "continu": [663, 682, 747], "criteria": [663, 678], "extens": [663, 676], "done": [663, 713], "994": [663, 747], "bad": 663, "unspecifi": 664, "fortran": [665, 747], "prefix_sep": 666, "dummy_na": 666, "spars": [666, 751], "drop_first": 666, "hot": 666, "dummi": 666, "value1": 666, "value2": 666, "a_value1": 666, "a_value2": 666, "a_non": 666, "a_1": 666, "a_2": 666, "a_nan": 666, "a_nul": 666, "max_file_s": 668, "file_name_prefix": 668, "exceed": 668, "writer": [668, 697, 705, 713, 752], "gb": 668, "mandatori": 668, "context": [668, 709], "cw": 668, "write_t": 668, "num_row": [671, 675, 680, 705], "num_row_group": 671, "row_group": [671, 681], "num1": [671, 676, 677, 680, 681], "13t12": [671, 676, 677, 680, 681], "5451": [671, 676, 677, 680, 681], "14t12": [671, 676, 677, 680, 681], "5784": [671, 676, 677, 680, 681], "789": [671, 676, 677, 680, 681], "15t18": [671, 676, 677, 680, 681], "6117": [671, 676, 677, 680, 681], "myvarnam": 672, "myvalnam": 672, "filepath_or_buff": [675, 676, 680, 681, 682], "skiprow": [675, 676, 680], "load": [675, 676, 677, 679, 680, 681, 712, 713], "avro": [675, 695, 752], "pathlib": [675, 676, 678, 679, 680, 681, 682, 713], "py": [675, 676, 678, 679, 680, 681, 682, 705, 711, 713, 753], "_path": [675, 676, 678, 679, 680, 681, 682], "localpath": [675, 676, 678, 679, 680, 681, 682], "ftp": [675, 676, 679, 680, 681, 682], "bytesio": [675, 680, 681], "parser": [675, 679, 680, 681], "remot": [675, 676, 680, 681, 707], "pandavro": 675, "pandas_df": 675, "to_avro": 675, "index_col": 676, "usecol": 676, "mangle_dupe_col": 676, "true_valu": 676, "false_valu": 676, "skipinitialspac": 676, "skipfoot": 676, "keep_default_na": 676, "na_filt": 676, "skip_blank_lin": 676, "parse_d": 676, "thousand": [676, 747], "linetermin": 676, "quotechar": 676, "doublequot": 676, "comment": [676, 707], "delim_whitespac": 676, "byte_rang": [676, 679, 682], "use_python_file_object": [676, 680, 681], "bytes_per_thread": [676, 680, 681], "comma": 676, "seper": 676, "recogn": 676, "qnan": 676, "unusu": 676, "mm": 676, "european": 676, "decompress": [676, 679, 752], "gz": [676, 679], "quote_minim": 676, "quote_al": 676, "quote_non": 676, "altogeth": [676, 709], "arrow": [676, 680, 681, 709, 712, 751], "pythonfil": [676, 680, 681], "abstractbufferedfil": [676, 680, 681], "throughput": [676, 680, 681], "decompos": [676, 680, 681, 711], "transfer": [676, 680, 681, 752], "pool": [676, 680, 681], "268435456": [676, 680, 681], "to_csv": [676, 713, 752], "fp": 676, "__fspath__": 678, "protocol": 678, "term": [678, 679, 705, 750, 755], "to_hdf": 678, "auto": [679, 707], "keep_quot": 679, "cudf_experiment": 679, "typ": [679, 720, 721, 726, 727, 732, 733, 738, 740, 743, 745], "recov": 679, "convert_ax": 679, "proper": 679, "convert_d": 679, "datelik": 679, "_at": 679, "_time": 679, "keep_default_d": 679, "precise_float": 679, "strtod": 679, "py3": 679, "jsonread": 679, "wrap": [679, 695, 706, 713, 750], "json_str": 679, "v1": 679, "v2": 679, "k1": 679, "use_index": 680, "timestamp_typ": 680, "predic": [680, 681, 711], "disjunct": [680, 681], "dnf": [680, 681], "conjunct": [680, 681, 706, 750], "AND": [680, 681], "outermost": 680, "OR": [680, 681], "notat": [680, 681], "seek": 680, "to_orc": [680, 752], "strings_to_categor": 681, "use_pandas_metadata": 681, "categorical_partit": 681, "open_file_opt": 681, "gdf_categori": 681, "gdf_string": 681, "discourag": 681, "open_parquet_fil": 681, "deactiv": 681, "precach": 681, "precache_opt": 681, "open_file_func": 681, "read_parquet_metadata": 681, "strip_delimit": 682, "compression_offset": 682, "datasourc": 682, "bgzip": 682, "virtual": 682, "baseexcept": 683, "check_dtyp": [684, 685, 687], "check_column_typ": [684, 685], "equiv": [684, 685, 686, 687], "check_less_precis": [684, 686, 687], "check_exact": [684, 685, 686, 687], "check_datetimelike_compat": [684, 685, 687], "check_categor": [684, 685, 686, 687], "check_category_ord": [684, 687], "rtol": [684, 685, 686, 687], "1e": [684, 685, 686, 687], "atol": [684, 685, 686, 687], "columnbas": [684, 685, 686, 687, 709], "intend": [684, 685, 686, 687, 709, 750], "inferred_typ": [684, 685, 686, 687], "idl": [684, 685, 687], "check_datetime_like_compat": [684, 685, 687], "appropri": [684, 685, 686, 687, 707, 709], "assert": [684, 685, 686, 687, 711], "messag": [684, 685, 686, 687, 706], "check_index_typ": [685, 687], "check_frame_typ": 685, "check_nam": [685, 686, 687], "by_block": 685, "check_lik": 685, "assertionerror": [685, 686, 687], "hitch": [685, 686, 687], "check_ord": 686, "id1": 686, "id2": 686, "check_series_typ": 687, "sr1": 687, "sr2": 687, "utc": 688, "infer_datetime_format": 688, "eg": 688, "bug": [688, 706], "strftime": 688, "denot": 688, "off": [688, 707, 713, 752], "10x": 688, "succeed": 688, "assembl": 688, "plural": 688, "2015": 688, "1490195805": 688, "22t15": 688, "1490195805433502912": 688, "1780": 688, "20t01": 688, "494253056": 688, "polici": [689, 706], "notifi": 689, "encount": [689, 706], "unsign": [689, 748], "down": [689, 705], "datatyp": 689, "decoupl": 689, "3e3": 689, "3000": 689, "cudf": [694, 695, 704, 706, 708, 709, 710, 714, 748, 749, 751, 752, 754], "usual": [694, 705], "permit": 694, "restrict": 694, "publicli": 695, "namespac": [695, 700, 707], "merg": [695, 705, 709, 711, 713, 755], "timedeltaindex": 695, "deal": 695, "roll": [695, 709, 751], "subwordtoken": [695, 712], "stringmethod": 695, "byte_count": 695, "character_ngram": 695, "character_token": 695, "code_point": 695, "detoken": 695, "edit_dist": 695, "edit_distance_matrix": 695, "filter_alphanum": 695, "filter_charact": 695, "filter_token": 695, "findal": 695, "find_multipl": 695, "get_json_object": 695, "hex_to_int": 695, "ip_to_int": 695, "is_conson": 695, "is_vowel": 695, "isempti": 695, "ishex": 695, "isipv4": 695, "istimestamp": 695, "istitl": [695, 750], "ngrams_token": 695, "normalize_charact": 695, "normalize_spac": 695, "porter_stemmer_measur": 695, "replace_token": 695, "replace_with_backref": 695, "rindex": 695, "slice_from": 695, "token_count": 695, "translat": [695, 709], "url_decod": 695, "url_encod": 695, "listmethod": 695, "structmethod": 695, "explod": 695, "get_opt": [695, 710], "set_opt": [695, 709, 754], "describe_opt": [695, 754], "variant": 696, "thereof": 696, "reader": [697, 713, 752], "acceler": [697, 708, 712, 713, 750, 752], "cpu": [697, 713, 752, 755], "futur": [697, 705, 706, 708, 713, 750, 753], "goal": [705, 706, 708], "repositori": 705, "pytest": 705, "plugin": [705, 707, 711], "framework": 705, "seamless": 705, "experi": [705, 707, 750], "develop": [705, 706, 707, 709, 710, 711, 712, 747, 750], "public": [705, 707], "former": [705, 707], "macro": 705, "vi": 705, "\u00e0": 705, "help": [705, 706, 707], "quantifi": 705, "minim": [705, 706, 707], "bind": [705, 709], "focu": [705, 747], "footprint": 705, "At": [705, 708, 709, 750], "stabil": [705, 706], "free": [705, 709, 711], "bench_class": 705, "eval": 705, "bench_datafram": 705, "hierarchi": [705, 709], "bench_frame_or_index": 705, "trigger": 705, "veri": [705, 747, 749, 750], "characterist": 705, "_intern": 705, "_apply_boolean_mask": 705, "bench_dataframe_intern": 705, "broadli": 705, "speak": 705, "live": [705, 706], "bench_io": 705, "discov": 705, "test_": [705, 711], "bench_": 705, "instal": [705, 707, 750], "termin": 705, "autosav": 705, "xxxx_": 705, "xxxx": 705, "yyyi": 705, "command": [705, 707], "short": [705, 707, 713], "param": [705, 711], "config": [705, 706], "hard": 705, "advertis": 705, "littl": [705, 709], "natur": [705, 753], "meaning": 705, "care": 705, "interchang": [705, 709], "demonstr": [705, 707, 750], "bench_foo": 705, "six": 705, "did": [705, 750], "interest": 705, "cover": [705, 707, 708, 711, 750], "baselin": [705, 713], "coverag": [705, 711], "tweak": 705, "debug": [705, 706, 709], "num_col": 705, "aspect": 705, "quantit": 705, "easi": [705, 707, 747], "environ": [705, 707, 709, 752], "cudf_benchmarks_use_panda": 705, "easili": [705, 707, 712], "simpli": [705, 707, 709, 747], "remap": 705, "why": 705, "critic": 705, "ci": [705, 713], "significantli": 705, "cycl": [705, 706], "balanc": 705, "cudf_benchmarks_debug_onli": 705, "advantag": [705, 747], "redefin": [705, 750], "crucial": 705, "although": 705, "suit": 705, "guidelin": [705, 707], "spy": 705, "svg": 705, "invoc": 705, "tool": [705, 706, 708], "strength": 705, "somewhat": 705, "workflow": [705, 706, 712, 713, 751], "encourag": [705, 707, 747], "discuss": [705, 707, 708, 709, 711, 713, 753], "hood": [705, 707, 708, 709, 713], "magic": 705, "pytest_cas": 705, "programat": 705, "unambigu": 705, "classnam": 705, "_dtype_": 705, "_nulls_": 705, "_cols_": 705, "_rows_": 705, "dataframe_dtype_int_rows_100": 705, "cumbersom": [705, 709], "moreov": 705, "embed": 705, "problem": [705, 711, 750], "essenti": [705, 709, 750], "dataframe_dtype_int_cols_6": 705, "focus": 706, "high": [706, 709], "overview": [706, 712, 751], "practic": [706, 708, 709, 711, 713], "subpackag": [706, 711], "_lib": 706, "emploi": 706, "linter": 706, "manag": [706, 709, 750], "pre": [706, 750], "commit": 706, "strongli": [706, 707], "prior": 706, "yaml": 706, "repo": 706, "truth": 706, "lint": [706, 707], "flake8": 706, "complianc": 706, "black": 706, "formatt": 706, "isort": 706, "mypi": 706, "static": 706, "hint": 706, "difficult": [706, 750], "pydocstyl": [706, 707], "docstr": [706, 708], "pyproject": 706, "toml": 706, "setup": [706, 713], "cfg": 706, "project": [706, 709], "parti": 706, "addition": [706, 708, 709], "hook": 706, "overal": [706, 708], "releas": [706, 750], "prevent": 706, "unexpect": 706, "sure": [706, 747, 750], "emit": 706, "futurewarn": [706, 713, 753], "opportun": 706, "thing": [706, 750], "new_foo": 706, "signal": 706, "deprecationwarn": 706, "hidden": 706, "__main__": 706, "analog": [706, 709], "sometim": [706, 713, 747, 750], "latest": 706, "reason": [706, 707, 709, 752], "exorbit": 706, "runtim": [706, 750], "premium": 706, "believ": 706, "perfect": 706, "infeas": [706, 709], "undesir": 706, "consult": 706, "team": 706, "assess": 706, "proce": [706, 713, 747, 750], "substanti": 706, "power": [706, 707, 720, 726, 732], "friendli": 706, "profil": [706, 708], "expos": [706, 709, 747, 750, 752], "pxd": [706, 709], "declar": [706, 709], "pyx": 706, "thin": [706, 750], "layer": [706, 708], "rare": 706, "benefit": [706, 707, 711], "happen": [706, 709, 750, 753], "quit": 706, "justifi": 706, "benchmark": [706, 708, 712], "suffici": [706, 707], "mention": [706, 709, 750], "logic_error": 706, "cuda_error": 706, "runtimeerror": 706, "payload": 706, "brittl": 706, "compromis": 706, "adopt": 706, "strategi": 706, "roadmap": 706, "diversifi": 706, "inlin": 707, "restructuredtext": 707, "myst": 707, "sphinx": 707, "contribut": [707, 708, 712], "lieu": 707, "explan": [707, 710], "commonli": [707, 755], "brief": 707, "_strongly_": 707, "numpydoc": 707, "scenario": 707, "getter": 707, "That": 707, "inherit": [707, 709], "codebas": 707, "pull": 707, "aim": 707, "api_doc": 707, "rst": 707, "discover": 707, "autosummari": 707, "api1": 707, "api2": 707, "render": 707, "layout": [707, 709], "stub": 707, "currentmodul": 707, "autofunct": 707, "autodoc": 707, "approach": [707, 709, 711, 750], "facilit": [707, 709], "bodi": 707, "api_nam": 707, "dedic": 707, "superset": 707, "markdown": 707, "syntax": [707, 750], "link": 707, "anchor": 707, "instruct": 707, "nb": 707, "straightforward": 707, "navig": 707, "shell": 707, "server": 707, "Then": 707, "web": 707, "browser": 707, "localhost": 707, "8000": 707, "machin": [707, 713], "visibl": 707, "network": 707, "ssh": 707, "local_port": 707, "remote_port": 707, "remote_ip": 707, "enforc": [707, 713], "regard": 707, "main": [708, 709, 711, 750], "dask_cudf": [708, 713], "cudf_kafka": 708, "custreamz": 708, "robustli": 708, "guidanc": 708, "topic": 708, "cython": 708, "publish": 708, "advanc": [708, 747, 750], "serv": 709, "face": 709, "bridg": 709, "review": [709, 711], "role": 709, "requisit": 709, "tradeoff": 709, "tie": 709, "holist": 709, "diagram": 709, "princip": 709, "eponym": 709, "tabular": [709, 713, 750], "columnar": [709, 712, 713], "meanwhil": 709, "abstract": 709, "materi": 709, "preliminari": 709, "let": [709, 747, 750], "dive": 709, "deeper": 709, "surmis": 709, "diamond": 709, "simpler": [709, 750], "flatten": 709, "ve": [709, 713, 750], "highlight": [709, 750], "concret": [709, 750], "eventu": 709, "almost": 709, "rewrit": 709, "alon": 709, "reimplement": 709, "behav": 709, "instanti": 709, "unfortun": 709, "mimick": 709, "__new__": 709, "tree": 709, "masquerad": 709, "stack": 709, "glue": 709, "own": [709, 752], "semant": 709, "apach": [709, 712, 713], "conduc": 709, "concept": [709, 713], "extent": 709, "interoper": [709, 712, 751], "simplifi": 709, "numericalcolumn": 709, "datetimecolumn": 709, "decis": 709, "4000": 709, "sizeof": 709, "chees": 709, "preexist": 709, "knowledg": [709, 750], "structdtyp": [709, 748], "decimaldtyp": 709, "intervaldtyp": 709, "contigu": [709, 747], "rmm": 709, "devicebuff": 709, "cudf_spil": 709, "unspil": 709, "occupi": 709, "cudf_spill_on_demand": 709, "ON": 709, "spill_on_demand": 709, "regist": 709, "cudf_spill_device_limit": 709, "spill_device_limit": 709, "spillablebuff": 709, "move": [709, 747, 750], "track": 709, "demand": 709, "as_buff": 709, "ptr": 709, "unproblemat": 709, "furthermor": 709, "perman": 709, "extern": [709, 749], "get_ptr": 709, "spilllock": 709, "aliv": 709, "conveni": 709, "with_spill_lock": 709, "lifetim": 709, "interact": [709, 713, 750], "explanatori": 709, "column_view": 709, "table_view": 709, "question": [709, 750], "trivial": 709, "descent": 709, "whole": 709, "fact": [709, 753], "act": 709, "reduct": 709, "scan": 709, "bypass": 709, "straight": 709, "resampl": 709, "composit": 709, "explain": 710, "_register_opt": 710, "yield": [710, 711, 713, 755], "fixtur": 710, "clean": 710, "cov": [711, 749], "report": [711, 755], "upload": 711, "codecov": 711, "pr": 711, "subdirectori": 711, "test_index": 711, "verifi": 711, "_max": 711, "excess": 711, "branch": 711, "obfusc": 711, "Such": 711, "alongsid": 711, "virtu": 711, "signific": 711, "lazili": 711, "wherea": 711, "primit": 711, "mind": [711, 753], "ground": 711, "test_some_properti": 711, "some_property_of": 711, "aris": 711, "nonempti": 711, "capabl": [711, 750], "potenti": [711, 750], "get_valu": 711, "test_even": 711, "test_odd": 711, "basi": 711, "_util": 711, "assert_eq": 711, "biggest": 711, "hammer": 711, "assert_": 711, "_equal": 711, "assert_exceptions_equ": 711, "scientist": 712, "program": 712, "dask": [712, 751], "introduct": 713, "gear": 713, "mainli": 713, "smooth": [713, 751], "cluster": 713, "enough": [713, 750], "comfort": [713, 750], "spread": 713, "portion": [713, 750], "borrow": 713, "adapt": [713, 750], "cheatsheet": 713, "from_cudf": 713, "npartit": 713, "thread_load": 713, "cuh": 713, "jitifi": 713, "thread_stor": 713, "ddf": 713, "dask_gdf": 713, "met": 713, "cudf_compar": 713, "dask_cudf_compar": 713, "isin": 713, "gdf1": 713, "rand": [713, 753], "082654": 713, "967955": 713, "399417": 713, "441425": 713, "784297": 713, "793582": 713, "070303": 713, "271711": 713, "gdf2": 713, "opt": [713, 753], "conda": [713, 750, 753], "env": [713, 753], "python3": [713, 753], "site": [713, 753], "column_accessor": 713, "251": 713, "343382": 713, "003700": 713, "20043": 713, "581614": 713, "907812": 713, "101512": 713, "24179": 713, "224180": 713, "var": [713, 749], "666666666666666": 713, "6666666666666667": 713, "map_partit": 713, "add_ten": 713, "progress": 713, "ds2": 713, "restor": 713, "post": [713, 749], "ddf_a": 713, "ddf_b": 713, "paradigm": 713, "agg_col1": 713, "agg_col2": 713, "54": 713, "73": 713, "date_df": 713, "986051": 713, "232034": 713, "397617": 713, "103839": 713, "date_ddf": 713, "grade": 713, "dgdf": 713, "to_numpi": 713, "to_arrow": [713, 720, 726, 732, 738, 743, 755], "example_output": 713, "mkdir": 713, "foo_dask": 713, "star": 713, "temp_parquet": 713, "ddf_parquet_fil": 713, "cudf_root": 713, "orc_fil": 713, "testorcfil": 713, "test1": 713, "boolean1": 713, "byte1": 713, "short1": 713, "int1": 713, "long1": 713, "float1": 713, "double1": 713, "bytes1": 713, "string1": 713, "middl": 713, "1024": 713, "65536": 713, "2048": 713, "100000000": 713, "chani": 713, "spark": 713, "lazi": 713, "moment": 713, "graph": 713, "delai": 713, "activ": 713, "background": [713, 750], "system": 713, "finish": 713, "downstream": [713, 747], "contract": 713, "upstream": 713, "snippet": 713, "localcudaclust": 713, "worker": 713, "beyond": 713, "scope": [713, 750], "client": 713, "dask_cuda": 713, "modulenotfounderror": 713, "tmp": 713, "ipykernel_538": 713, "3457759813": 713, "10000000": 713, "ddf2": 713, "2000000": 713, "8000000": 713, "9999999": 713, "nvidia": 713, "smi": 713, "2022": 713, "510": 713, "47": 713, "bu": 713, "disp": 713, "volatil": 713, "uncorr": 713, "ecc": 713, "fan": 713, "perf": 713, "pwr": 713, "cap": 713, "mig": 713, "rtx": 713, "a6000": 713, "00000000": 713, "65": [713, 750], "41c": 713, "p2": 713, "77w": 713, "300w": 713, "1380mib": 713, "49140mib": 713, "gi": 713, "pid": 713, "1674": 713, "159mib": 713, "1950": 713, "47mib": 713, "13521": 713, "132mib": 713, "304797": 713, "36mib": 713, "488366": 713, "743mib": 713, "488425": 713, "257mib": 713, "twenti": 713, "800": [713, 747], "sleep": 713, "42c": 713, "1942mib": 713, "819mib": 713, "proceed": 713, "ll": [713, 747, 750], "ddf1": 713, "randint": [713, 755], "spent": 713, "results_ddf": 713, "sooner": 713, "had": 713, "doneandnotdonefutur": 713, "e00276b0bab130532f4e193ca28e94ac": 713, "not_don": 713, "ordered": 715, "categrocialdtyp": [715, 717], "pd_dtype": [715, 717], "cudf_dtyp": [715, 717], "decimal128": [720, 721, 726, 727, 732, 733, 748, 752], "0042": [720, 726, 732], "1729": [720, 726, 732], "4200": [720, 726, 732], "0051": [720, 726, 732], "decimal128_dtyp": 720, "pa_typ": [720, 721, 726, 727, 732, 733], "decimal32dtyp": [720, 721, 732, 733, 748], "decimal64dtyp": [720, 721, 726, 727, 748], "items": [720, 726, 732], "decimal32": [726, 752], "decimal32_dtyp": 726, "decimal128dtyp": [726, 727, 732, 733, 748], "decimal64": [732, 752], "decimal64_dtyp": 732, "element_typ": 738, "list_dtyp": [738, 740, 742], "nested_list_dtyp": 738, "deep_nested_typ": [738, 739, 741], "listtyp": [738, 740, 742], "arrow_typ": [738, 740], "infer_typ": [738, 740], "leaf_typ": 738, "struct_dtyp": [743, 744], "nested_struct_dtyp": 743, "dict_data": 743, "structtyp": [743, 745, 746], "pa_struct_typ": [743, 745], "struct_typ": [743, 746], "notebook": [747, 750], "introductori": 747, "algebra": 747, "timeit": 747, "__version__": 747, "cupy_from_dlpack": 747, "from_dlpack": 747, "fromdlpack": 747, "to_cupi": 747, "500": 747, "arr_cupi": 747, "to_dlpack": 747, "206": 747, "\u00b5": 747, "dev": 747, "96": 747, "651": 747, "501": 747, "1001": 747, "502": 747, "1002": 747, "9997": 747, "10497": 747, "10997": 747, "9998": 747, "10498": 747, "10998": 747, "9999": 747, "10499": 747, "10999": 747, "__cuda_array_interface__": [747, 750], "leverag": [747, 750, 755], "cola_cupi": 747, "265": 747, "229": 747, "280": 747, "239": 747, "68": 747, "norm": 747, "reshaped_arr": 747, "197": 747, "198": 747, "199": 747, "201": 747, "202": 747, "397": 747, "398": 747, "399": 747, "401": 747, "402": 747, "597": 747, "598": 747, "599": 747, "9400": 747, "9401": 747, "9402": 747, "9597": 747, "9598": 747, "9599": 747, "9600": 747, "9601": 747, "9602": 747, "9797": 747, "9798": 747, "9799": 747, "9800": 747, "9801": 747, "9802": 747, "603": 747, "804": 747, "1005": [747, 750], "1206": 747, "1407": 747, "1608": 747, "1809": 747, "2211": 747, "2412": 747, "2613": 747, "2814": 747, "3015": 747, "3216": 747, "3417": 747, "3618": 747, "3819": 747, "4020": 747, "4221": 747, "4422": 747, "4623": 747, "4824": 747, "5025": 747, "5226": 747, "5427": 747, "5628": 747, "5829": 747, "6030": 747, "6231": 747, "6432": 747, "6633": 747, "6834": 747, "7035": 747, "7236": 747, "7437": 747, "7638": 747, "7839": 747, "8040": 747, "8241": 747, "8442": 747, "8643": 747, "8844": 747, "9045": 747, "9246": 747, "9447": 747, "9648": 747, "9849": 747, "linalg": 747, "577306": 747, "967739": 747, "easiest": [747, 750], "beforehand": 747, "reshaped_df": 747, "108": 747, "190": 747, "191": 747, "192": 747, "193": 747, "194": 747, "195": 747, "196": 747, "203": 747, "204": 747, "205": 747, "207": 747, "208": 747, "209": 747, "391": 747, "392": 747, "393": 747, "394": 747, "395": 747, "396": 747, "403": 747, "405": 747, "406": 747, "407": 747, "408": 747, "409": 747, "590": 747, "591": 747, "592": 747, "593": 747, "594": 747, "595": 747, "596": 747, "600": 747, "601": 747, "602": 747, "604": 747, "605": 747, "606": 747, "607": 747, "608": 747, "609": 747, "790": 747, "791": 747, "792": 747, "793": 747, "794": 747, "795": 747, "796": 747, "797": 747, "798": 747, "799": 747, "801": 747, "802": 747, "803": 747, "805": 747, "806": 747, "807": 747, "808": 747, "809": 747, "990": 747, "991": 747, "992": 747, "993": 747, "995": 747, "997": [747, 750], "998": 747, "isfortran": 747, "fortran_arr": 747, "asfortranarrai": 747, "todlpack": 747, "85": 747, "ecosystem": [747, 750], "isn": 747, "matur": 747, "hundr": 747, "wouldn": 747, "previous": 747, "new_arr": 747, "19900": 747, "59900": 747, "99900": 747, "139900": 747, "179900": 747, "219900": 747, "259900": 747, "299900": 747, "339900": 747, "379900": 747, "419900": 747, "459900": 747, "499900": 747, "539900": 747, "579900": 747, "619900": 747, "659900": 747, "699900": 747, "739900": 747, "779900": 747, "819900": 747, "859900": 747, "899900": 747, "939900": 747, "979900": 747, "1019900": 747, "1059900": 747, "1099900": 747, "1139900": 747, "1179900": 747, "1219900": 747, "1259900": 747, "1299900": 747, "1339900": 747, "1379900": 747, "1419900": 747, "1459900": 747, "1499900": 747, "1539900": 747, "1579900": 747, "1619900": 747, "1659900": 747, "1699900": 747, "1739900": 747, "1779900": 747, "1819900": 747, "1859900": 747, "1899900": 747, "1939900": 747, "1979900": 747, "seamlessli": 747, "enorm": 747, "sacrif": 747, "cleanli": 747, "cudf_to_cupy_sparse_matrix": 747, "sparseformat": 747, "_sparse_constructor": 747, "csc_matrix": 747, "csr_matrix": 747, "illustr": 747, "nonzero": 747, "arr": [747, 750], "a0": 747, "a4": 747, "a5": 747, "a6": 747, "a7": 747, "a8": 747, "a9": 747, "a10": 747, "a11": 747, "a12": 747, "a13": 747, "a14": 747, "a15": 747, "a16": 747, "a17": 747, "a18": 747, "a19": 747, "170311": 747, "164432": 747, "970631": 747, "725577": 747, "881639": 747, "157119": 747, "922874": 747, "622067": 747, "320459": 747, "sparse_data": 747, "17031118137402823": 747, "512": 747, "089795977656085": 747, "1280": 747, "5653596429100372": 747, "385": 747, "136084746400756": 747, "131": 747, "3673593640433044": 747, "260": 747, "771233640668274": 747, "645": 747, "144105705483": 747, "262": 747, "9636765493978228": 747, "646": 747, "49748259301063913": 747, "264": 747, "861825297319397": 747, "339939568813184": 747, "906": [747, 755], "232168840969551": 747, "267": 747, "217845498506158": 747, "140": 747, "1406997203650233": 747, "95433883127448": 747, "1292": 747, "3011336593259589": 747, "526": 747, "0720077193830706": 747, "1167": 747, "938399126622937": 747, "528": 747, "775495436740007": 747, "1297": 747, "3355343030452618": 747, "1298": 747, "1348294399458396": 747, "275": 747, "707681267289272": 747, "531": 747, "253186751245812": 747, "659": 747, "923794770306774": 747, "1299": 747, "569678329345439": 747, "7285": 747, "623405345202065": 747, "7158": 747, "233125168359464": 747, "7286": 747, "43580760127545026": 747, "8822": 747, "3324560206347646": 747, "8567": 747, "0205528986077417": 747, "9591": 747, "66252247499536": 747, "8440": 747, "745954631800431": 747, "9080": 747, "115008213125071": 747, "8057": 747, "596487193075416": 747, "7930": 747, "368170213250925": 747, "7163": 747, "192271909611926": 747, "9595": 747, "843253409704392": 747, "9212": 747, "6024015683867": 747, "9213": 747, "0745219115992644": 747, "9342": 747, "3934419745963644": 747, "9087": 747, "28602383318333313": 747, "014886074778707": 747, "9955": 747, "279836160595889": 747, "9956": 747, "46666148186043754": 747, "9706": 747, "010407944371878": 747, "9714": 747, "146874562654416": 747, "9715": 747, "055778229216071": 747, "9717": 747, "95559990115583": 747, "9846": 747, "301472559355748": 747, "9981": 747, "6668546100676895": 747, "uint32": [748, 752], "durat": 748, "mislead": 748, "023": 748, "max_precis": 748, "psr": 748, "pq": 748, "exclus": 749, "nuisanc": 749, "gb1": 749, "gb2": 749, "gb3": 749, "penalti": 749, "disambigu": 749, "ok": 749, "corr": 749, "866025": 749, "idxmin": 749, "idxmax": 749, "nuniqu": 749, "nth": 749, "randomdata": 750, "box": 750, "broader": 750, "pydata": [750, 751], "varieti": 750, "devicendarrai": 750, "offer": 750, "const": 750, "unari": [750, 755], "singleton": 750, "f_null_sensit": 750, "experiment": [750, 752], "channel": 750, "restart": 750, "string_udfs_en": 750, "_string_udfs_en": 750, "some_str": 750, "__contains__": 750, "grid": 750, "in_col": 750, "out_col": 750, "guard": 750, "cuda_array_interfac": 750, "963": 750, "9630": 750, "977": 750, "1026": 750, "980": 750, "9770": 750, "1048": 750, "1019": 750, "10480": 750, "1078": 750, "960": 750, "985": 750, "10780": 750, "979": 750, "982": 750, "1011": 750, "9790": 750, "theoret": 750, "spot": 750, "area": 750, "pipelin": 750, "job": 750, "entrypoint": 750, "onto": 750, "fulfil": 750, "ultim": 750, "428571429": 750, "constraint": 750, "str_df": 750, "fairli": 750, "streamlin": 750, "walk": 750, "conditional_add": 750, "heart": 750, "readi": 750, "successfulli": 750, "pessimist": 750, "explor": 750, "gpu_add": 750, "matter": 750, "1968": 750, "1961": 750, "propog": 750, "slide": 750, "answer": 750, "stock": 750, "mathemat": 750, "example_func": 750, "549834435": 750, "615773106": 750, "681145748": 750, "745966692": 750, "810249676": 750, "874007874": 750, "937253933": 750, "apply_group": 750, "drawn": 750, "691674": 750, "dan": 750, "958380": 750, "480099": 750, "729580": 750, "473370": 750, "xavier": 750, "767454": 750, "067479": 750, "380205": 750, "970850": 750, "sarah": 750, "342905": 750, "rolling_avg_": 750, "rolling_avg": 750, "win_siz": 750, "801430": 750, "632337": 750, "081887": 750, "933157": 750, "quinn": 750, "420826": 750, "184805": 750, "702013": 750, "837494": 750, "wendi": 750, "057540": 750, "401733": 750, "913899": 750, "ursula": 750, "466252": 750, "009502": 750, "725581": 750, "405245": 750, "271319": 750, "multiply_by_5": 750, "empty_lik": 750, "nondecim": 750, "outlin": 750, "github": 750, "properli": 750, "lot": 750, "hopefulli": 750, "feel": 750, "applymap": 751, "histogram": 751, "tip": 751, "magnum": 751, "gpudirect": 751, "integr": 751, "nvcomp": 751, "interweav": 751, "writer\u00b9": 752, "reader\u00b9": 752, "uint16": 752, "\u00b9": 752, "gd": 752, "dma": 752, "bounc": 752, "sdk": 752, "download": 752, "toolkit": 752, "libcudf_cufile_polici": 752, "kvikio": 752, "rapidsai": 752, "read_avro": 752, "libcudf_cufile_thread_count": 752, "libcudf_cufile_slice_s": 752, "4mb": 752, "libcudf_nvcomp_polici": 752, "deem": 752, "whenev": 752, "deflat": 752, "20120101": 753, "cumprod": 753, "prod": 753, "wish": 753, "dff": 753, "randn": 753, "763803": 753, "173705": 753, "961073": 753, "705648": 753, "174988": 753, "588720": 753, "284857": 753, "750882": 753, "867714": 753, "908525": 753, "933710": 753, "051794": 753, "291676": 753, "147652": 753, "521390": 753, "501841": 753, "318598": 753, "047099": 753, "905830": 753, "084205": 753, "068111": 753, "862500": 753, "541691": 753, "146121": 753, "026430": 753, "027699": 753, "1165": 753, "silenc": 753, "dot": 753, "096421924": 753, "125265165": 753, "110261569": 753, "377308331": 753, "58438037": 753, "663364736": 753, "865205122": 753, "8297251": 753, "389763931": 753, "763063318": 753, "df00": 753, "125265": 753, "110262": 753, "377308": 753, "584380": 753, "663365": 753, "865205": 753, "829725": 753, "389764": 753, "763063": 753, "behaviour": 755, "resid": 755, "extrem": 755, "poor": 755, "vast": 755, "accomplish": 755, "742": 755, "694": 755, "840": 755, "459": 755, "525": 755, "442": 755, "363": 755, "666": 755, "643": 755, "631": 755, "640": 755, "impact": 755, "compatibilti": 755, "impos": 755}, "objects": {"cudf": [[715, 0, 1, "", "CategoricalDtype"], [0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [187, 0, 1, "", "DatetimeIndex"], [720, 0, 1, "", "Decimal128Dtype"], [726, 0, 1, "", "Decimal32Dtype"], [732, 0, 1, "", "Decimal64Dtype"], [208, 0, 1, "", "Float64Index"], [209, 0, 1, "", "Grouper"], [210, 0, 1, "", "Index"], [260, 0, 1, "", "Int64Index"], [261, 0, 1, "", "IntervalIndex"], [738, 0, 1, "", "ListDtype"], [265, 0, 1, "", "MultiIndex"], [278, 0, 1, "", "RangeIndex"], [279, 0, 1, "", "Series"], [743, 0, 1, "", "StructDtype"], [454, 0, 1, "", "TimedeltaIndex"], [463, 0, 1, "", "UInt64Index"], [464, 3, 1, "", "concat"], [662, 3, 1, "", "crosstab"], [663, 3, 1, "", "cut"], [664, 3, 1, "", "describe_option"], [665, 3, 1, "", "from_dlpack"], [666, 3, 1, "", "get_dummies"], [667, 3, 1, "", "get_option"], [672, 3, 1, "", "melt"], [673, 3, 1, "", "pivot"], [674, 3, 1, "", "pivot_table"], [675, 3, 1, "", "read_avro"], [676, 3, 1, "", "read_csv"], [677, 3, 1, "", "read_feather"], [678, 3, 1, "", "read_hdf"], [679, 3, 1, "", "read_json"], [680, 3, 1, "", "read_orc"], [681, 3, 1, "", "read_parquet"], [682, 3, 1, "", "read_text"], [683, 3, 1, "", "set_option"], [688, 3, 1, "", "to_datetime"], [689, 3, 1, "", "to_numeric"], [690, 3, 1, "", "unstack"]], "cudf.CategoricalDtype": [[716, 1, 1, "", "categories"], [717, 2, 1, "", "from_pandas"], [718, 1, 1, "", "ordered"], [719, 2, 1, "", "to_pandas"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_dict"], [59, 2, 1, "", "from_pandas"], [60, 2, 1, "", "from_records"], [61, 2, 1, "", "ge"], [62, 2, 1, "", "groupby"], [63, 2, 1, "", "gt"], [64, 2, 1, "", "hash_values"], [65, 2, 1, "", "head"], [66, 2, 1, "", "host_deserialize"], [67, 2, 1, "", "host_serialize"], [68, 1, 1, "", "iat"], [69, 1, 1, "", "iloc"], [70, 1, 1, "", "index"], [71, 2, 1, "", "info"], [72, 2, 1, "", "insert"], [73, 2, 1, "", "interleave_columns"], [74, 2, 1, "", "interpolate"], [75, 2, 1, "", "isin"], [76, 2, 1, "", "isna"], [77, 2, 1, "", "isnull"], [78, 2, 1, "", "items"], [79, 2, 1, "", "iterrows"], [80, 2, 1, "", "itertuples"], [81, 2, 1, "", "join"], [82, 2, 1, "", "keys"], [83, 2, 1, "", "kurt"], [84, 2, 1, "", "kurtosis"], [85, 2, 1, "", "last"], [86, 2, 1, "", "le"], [87, 1, 1, "", "loc"], [88, 2, 1, "", "lt"], [89, 2, 1, "", "mask"], [90, 2, 1, "", "max"], [91, 2, 1, "", "mean"], [92, 2, 1, "", "median"], [93, 2, 1, "", "melt"], [94, 2, 1, "", "memory_usage"], [95, 2, 1, "", "merge"], [96, 2, 1, "", "min"], [97, 2, 1, "", "mod"], [98, 2, 1, "", "mode"], [99, 2, 1, "", "mul"], [100, 2, 1, "", "multiply"], [101, 2, 1, "", "nans_to_nulls"], [102, 1, 1, "", "ndim"], [103, 2, 1, "", "ne"], [104, 2, 1, "", "nlargest"], [105, 2, 1, "", "notna"], [106, 2, 1, "", "notnull"], [107, 2, 1, "", "nsmallest"], [108, 2, 1, "", "nunique"], [109, 2, 1, "", "pad"], [110, 2, 1, "", "partition_by_hash"], [111, 2, 1, "", "pct_change"], [112, 2, 1, "", "pipe"], [113, 2, 1, "", "pivot"], [114, 2, 1, "", "pivot_table"], [115, 2, 1, "", "pop"], [116, 2, 1, "", "pow"], [117, 2, 1, "", "prod"], [118, 2, 1, "", "product"], [119, 2, 1, "", "quantile"], [120, 2, 1, "", "quantiles"], [121, 2, 1, "", "query"], [122, 2, 1, "", "radd"], [123, 2, 1, "", "rank"], [124, 2, 1, "", "rdiv"], [125, 2, 1, "", "reindex"], [126, 2, 1, "", "rename"], [127, 2, 1, "", "repeat"], [128, 2, 1, "", "replace"], [129, 2, 1, "", "resample"], [130, 2, 1, "", "reset_index"], [131, 2, 1, "", "rfloordiv"], [132, 2, 1, "", "rmod"], [133, 2, 1, "", "rmul"], [134, 2, 1, "", "rolling"], [135, 2, 1, "", "round"], [136, 2, 1, "", "rpow"], [137, 2, 1, "", "rsub"], [138, 2, 1, "", "rtruediv"], [139, 2, 1, "", "sample"], [140, 2, 1, "", "scale"], [141, 2, 1, "", "scatter_by_map"], [142, 2, 1, "", "searchsorted"], [143, 2, 1, "", "select_dtypes"], [144, 2, 1, "", "serialize"], [145, 2, 1, "", "set_index"], [146, 1, 1, "", "shape"], [147, 2, 1, "", "shift"], [148, 1, 1, "", "size"], [149, 2, 1, "", "skew"], [150, 2, 1, "", "sort_index"], [151, 2, 1, "", "sort_values"], [152, 2, 1, "", "stack"], [153, 2, 1, "", "std"], [154, 2, 1, "", "sub"], [155, 2, 1, "", "subtract"], [156, 2, 1, "", "sum"], [157, 2, 1, "", "sum_of_squares"], [158, 2, 1, "", "swaplevel"], [159, 2, 1, "", "tail"], [160, 2, 1, "", "take"], [161, 2, 1, "", "tile"], [162, 2, 1, "", "to_arrow"], [163, 2, 1, "", "to_csv"], [164, 2, 1, "", "to_cupy"], [165, 2, 1, "", "to_dict"], [166, 2, 1, "", "to_dlpack"], [167, 2, 1, "", "to_feather"], [168, 2, 1, "", "to_hdf"], [169, 2, 1, "", "to_json"], [170, 2, 1, "", "to_numpy"], [171, 2, 1, "", "to_orc"], [172, 2, 1, "", "to_pandas"], [173, 2, 1, "", "to_parquet"], [174, 2, 1, "", "to_records"], [175, 2, 1, "", "to_string"], [176, 2, 1, "", "to_struct"], [177, 2, 1, "", "transpose"], [178, 2, 1, "", "truediv"], [179, 2, 1, "", "truncate"], [180, 2, 1, "", "unstack"], [181, 2, 1, "", "update"], [182, 2, 1, "", "value_counts"], [183, 1, 1, "", "values"], [184, 1, 1, "", "values_host"], [185, 2, 1, "", "var"], [186, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[188, 2, 1, "", "ceil"], [189, 1, 1, "", "day"], [190, 1, 1, "", "day_of_year"], [191, 1, 1, "", "dayofweek"], [192, 1, 1, "", "dayofyear"], [193, 2, 1, "", "floor"], [194, 1, 1, "", "hour"], [195, 1, 1, "", "is_leap_year"], [196, 2, 1, "", "isocalendar"], [197, 1, 1, "", "microsecond"], [198, 1, 1, "", "minute"], [199, 1, 1, "", "month"], [200, 1, 1, "", "nanosecond"], [201, 1, 1, "", "quarter"], [202, 2, 1, "", "round"], [203, 1, 1, "", "second"], [204, 2, 1, "", "to_frame"], [205, 2, 1, "", "to_series"], [206, 1, 1, "", "weekday"], [207, 1, 1, "", "year"]], "cudf.Decimal128Dtype": [[721, 2, 1, "", "from_arrow"], [722, 1, 1, "", "itemsize"], [723, 1, 1, "", "precision"], [724, 1, 1, "", "scale"], [725, 2, 1, "", "to_arrow"]], "cudf.Decimal32Dtype": [[727, 2, 1, "", "from_arrow"], [728, 1, 1, "", "itemsize"], [729, 1, 1, "", "precision"], [730, 1, 1, "", "scale"], [731, 2, 1, "", "to_arrow"]], "cudf.Decimal64Dtype": [[733, 2, 1, "", "from_arrow"], [734, 1, 1, "", "itemsize"], [735, 1, 1, "", "precision"], [736, 1, 1, "", "scale"], [737, 2, 1, "", "to_arrow"]], "cudf.Grouper": [[209, 2, 1, "", "__init__"]], "cudf.Index": [[211, 2, 1, "", "any"], [212, 2, 1, "", "append"], [213, 2, 1, "", "copy"], [214, 2, 1, "", "deserialize"], [215, 2, 1, "", "device_deserialize"], [216, 2, 1, "", "device_serialize"], [217, 2, 1, "", "difference"], [218, 2, 1, "", "drop_duplicates"], [219, 2, 1, "", "dropna"], [220, 2, 1, "", "fillna"], [221, 2, 1, "", "from_arrow"], [222, 2, 1, "", "from_pandas"], [223, 2, 1, "", "get_level_values"], [224, 2, 1, "", "get_loc"], [225, 2, 1, "", "get_slice_bound"], [226, 1, 1, "", "has_duplicates"], [227, 2, 1, "", "host_deserialize"], [228, 2, 1, "", "host_serialize"], [229, 2, 1, "", "intersection"], [230, 2, 1, "", "is_boolean"], [231, 2, 1, "", "is_categorical"], [232, 2, 1, "", "is_floating"], [233, 2, 1, "", "is_integer"], [234, 2, 1, "", "is_interval"], [235, 1, 1, "", "is_monotonic"], [236, 1, 1, "", "is_monotonic_decreasing"], [237, 1, 1, "", "is_monotonic_increasing"], [238, 2, 1, "", "is_numeric"], [239, 2, 1, "", "is_object"], [240, 2, 1, "", "isin"], [241, 2, 1, "", "isna"], [242, 2, 1, "", "join"], [243, 1, 1, "", "names"], [244, 1, 1, "", "nlevels"], [245, 2, 1, "", "notna"], [246, 2, 1, "", "rename"], [247, 2, 1, "", "repeat"], [248, 2, 1, "", "serialize"], [249, 2, 1, "", "set_names"], [250, 1, 1, "", "size"], [251, 2, 1, "", "sort_values"], [252, 2, 1, "", "take"], [253, 2, 1, "", "to_dlpack"], [254, 2, 1, "", "to_frame"], [255, 2, 1, "", "to_pandas"], [256, 2, 1, "", "to_series"], [257, 2, 1, "", "union"], [258, 2, 1, "", "unique"], [259, 1, 1, "", "values"]], "cudf.IntervalIndex": [[261, 2, 1, "", "__init__"], [262, 2, 1, "", "from_breaks"], [263, 2, 1, "", "get_loc"], [264, 1, 1, "", "values"]], "cudf.ListDtype": [[739, 1, 1, "", "element_type"], [740, 2, 1, "", "from_arrow"], [741, 1, 1, "", "leaf_type"], [742, 2, 1, "", "to_arrow"]], "cudf.MultiIndex": [[266, 1, 1, "", "codes"], [267, 2, 1, "", "droplevel"], [268, 2, 1, "", "from_arrow"], [269, 2, 1, "", "from_frame"], [270, 2, 1, "", "from_product"], [271, 2, 1, "", "from_tuples"], [272, 2, 1, "", "get_level_values"], [273, 2, 1, "", "get_loc"], [274, 1, 1, "", "levels"], [275, 1, 1, "", "names"], [276, 1, 1, "", "nlevels"], [277, 2, 1, "", "to_frame"]], "cudf.Series": [[280, 1, 1, "", "T"], [281, 2, 1, "", "__array__"], [282, 2, 1, "", "__iter__"], [283, 2, 1, "", "abs"], [284, 2, 1, "", "add"], [285, 2, 1, "", "add_prefix"], [286, 2, 1, "", "add_suffix"], [287, 2, 1, "", "all"], [288, 2, 1, "", "any"], [289, 2, 1, "", "append"], [290, 2, 1, "", "apply"], [291, 2, 1, "", "argsort"], [292, 2, 1, "", "astype"], [293, 2, 1, "", "autocorr"], [294, 1, 1, "", "axes"], [295, 2, 1, "", "backfill"], [296, 2, 1, "", "between"], [297, 2, 1, "", "bfill"], [298, 1, 1, "", "cat"], [299, 2, 1, "", "clip"], [300, 2, 1, "", "copy"], [301, 2, 1, "", "corr"], [302, 2, 1, "", "count"], [303, 2, 1, "", "cov"], [304, 2, 1, "", "cummax"], [305, 2, 1, "", "cummin"], [306, 2, 1, "", "cumprod"], [307, 2, 1, "", "cumsum"], [308, 1, 1, "", "data"], [309, 2, 1, "", "describe"], [310, 2, 1, "", "deserialize"], [311, 2, 1, "", "device_deserialize"], [312, 2, 1, "", "device_serialize"], [313, 2, 1, "", "diff"], [314, 2, 1, "", "digitize"], [315, 2, 1, "", "div"], [316, 2, 1, "", "divide"], [317, 2, 1, "", "dot"], [318, 2, 1, "", "drop"], [319, 2, 1, "", "drop_duplicates"], [320, 2, 1, "", "dropna"], [321, 1, 1, "", "dt"], [322, 1, 1, "", "dtype"], [323, 1, 1, "", "empty"], [324, 2, 1, "", "eq"], [325, 2, 1, "", "equals"], [326, 2, 1, "", "explode"], [327, 2, 1, "", "factorize"], [328, 2, 1, "", "ffill"], [329, 2, 1, "", "fillna"], [330, 2, 1, "", "first"], [331, 2, 1, "", "floordiv"], [332, 2, 1, "", "from_arrow"], [333, 2, 1, "", "from_categorical"], [334, 2, 1, "", "from_masked_array"], [335, 2, 1, "", "from_pandas"], [336, 2, 1, "", "ge"], [337, 2, 1, "", "groupby"], [338, 2, 1, "", "gt"], [339, 1, 1, "", "has_nulls"], [340, 2, 1, "", "hash_values"], [341, 2, 1, "", "head"], [342, 2, 1, "", "host_deserialize"], [343, 2, 1, "", "host_serialize"], [344, 1, 1, "", "iloc"], [345, 1, 1, "", "index"], [346, 2, 1, "", "interpolate"], [347, 1, 1, "", "is_monotonic"], [348, 1, 1, "", "is_monotonic_decreasing"], [349, 1, 1, "", "is_monotonic_increasing"], [350, 1, 1, "", "is_unique"], [351, 2, 1, "", "isin"], [352, 2, 1, "", "isna"], [353, 2, 1, "", "isnull"], [354, 2, 1, "", "items"], [355, 2, 1, "", "iteritems"], [356, 2, 1, "", "keys"], [357, 2, 1, "", "kurt"], [358, 2, 1, "", "kurtosis"], [359, 2, 1, "", "last"], [360, 2, 1, "", "le"], [361, 1, 1, "", "list"], [362, 1, 1, "", "loc"], [363, 2, 1, "", "lt"], [364, 2, 1, "", "map"], [365, 2, 1, "", "mask"], [366, 2, 1, "", "max"], [367, 2, 1, "", "mean"], [368, 2, 1, "", "median"], [369, 2, 1, "", "memory_usage"], [370, 2, 1, "", "min"], [371, 2, 1, "", "mod"], [372, 2, 1, "", "mode"], [373, 2, 1, "", "mul"], [374, 2, 1, "", "multiply"], [375, 1, 1, "", "name"], [376, 2, 1, "", "nans_to_nulls"], [377, 1, 1, "", "ndim"], [378, 2, 1, "", "ne"], [379, 2, 1, "", "nlargest"], [380, 2, 1, "", "notna"], [381, 2, 1, "", "notnull"], [382, 2, 1, "", "nsmallest"], [383, 1, 1, "", "null_count"], [384, 1, 1, "", "nullable"], [385, 1, 1, "", "nullmask"], [386, 2, 1, "", "nunique"], [387, 2, 1, "", "pad"], [388, 2, 1, "", "pct_change"], [389, 2, 1, "", "pipe"], [390, 2, 1, "", "pow"], [391, 2, 1, "", "prod"], [392, 2, 1, "", "product"], [393, 2, 1, "", "quantile"], [394, 2, 1, "", "radd"], [395, 2, 1, "", "rank"], [396, 2, 1, "", "rdiv"], [397, 2, 1, "", "reindex"], [398, 2, 1, "", "rename"], [399, 2, 1, "", "repeat"], [400, 2, 1, "", "replace"], [401, 2, 1, "", "resample"], [402, 2, 1, "", "reset_index"], [403, 2, 1, "", "rfloordiv"], [404, 2, 1, "", "rmod"], [405, 2, 1, "", "rmul"], [406, 2, 1, "", "rolling"], [407, 2, 1, "", "round"], [408, 2, 1, "", "rpow"], [409, 2, 1, "", "rsub"], [410, 2, 1, "", "rtruediv"], [411, 2, 1, "", "sample"], [412, 2, 1, "", "scale"], [413, 2, 1, "", "searchsorted"], [414, 2, 1, "", "serialize"], [415, 1, 1, "", "shape"], [416, 2, 1, "", "shift"], [417, 1, 1, "", "size"], [418, 2, 1, "", "skew"], [419, 2, 1, "", "sort_index"], [420, 2, 1, "", "sort_values"], [421, 2, 1, "", "std"], [422, 1, 1, "", "str"], [423, 1, 1, "", "struct"], [424, 2, 1, "", "sub"], [425, 2, 1, "", "subtract"], [426, 2, 1, "", "sum"], [427, 2, 1, "", "sum_of_squares"], [428, 2, 1, "", "tail"], [429, 2, 1, "", "take"], [430, 2, 1, "", "tile"], [431, 2, 1, "", "to_arrow"], [432, 2, 1, "", "to_cupy"], [433, 2, 1, "", "to_dict"], [434, 2, 1, "", "to_dlpack"], [435, 2, 1, "", "to_frame"], [436, 2, 1, "", "to_hdf"], [437, 2, 1, "", "to_json"], [438, 2, 1, "", "to_list"], [439, 2, 1, "", "to_numpy"], [440, 2, 1, "", "to_pandas"], [441, 2, 1, "", "to_string"], [442, 2, 1, "", "tolist"], [443, 2, 1, "", "transpose"], [444, 2, 1, "", "truediv"], [445, 2, 1, "", "truncate"], [446, 2, 1, "", "unique"], [447, 2, 1, "", "update"], [448, 1, 1, "", "valid_count"], [449, 2, 1, "", "value_counts"], [450, 1, 1, "", "values"], [451, 1, 1, "", "values_host"], [452, 2, 1, "", "var"], [453, 2, 1, "", "where"]], "cudf.StructDtype": [[744, 1, 1, "", "fields"], [745, 2, 1, "", "from_arrow"], [746, 2, 1, "", "to_arrow"]], "cudf.TimedeltaIndex": [[455, 1, 1, "", "components"], [456, 1, 1, "", "days"], [457, 1, 1, "", "inferred_freq"], [458, 1, 1, "", "microseconds"], [459, 1, 1, "", "nanoseconds"], [460, 1, 1, "", "seconds"], [461, 2, 1, "", "to_frame"], [462, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[465, 2, 1, "", "add_categories"], [466, 2, 1, "", "as_ordered"], [467, 2, 1, "", "as_unordered"], [468, 1, 1, "", "categories"], [469, 1, 1, "", "codes"], [470, 1, 1, "", "ordered"], [471, 2, 1, "", "remove_categories"], [472, 2, 1, "", "reorder_categories"], [473, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[474, 2, 1, "", "astype"], [475, 2, 1, "", "concat"], [476, 2, 1, "", "contains"], [477, 2, 1, "", "get"], [478, 2, 1, "", "index"], [479, 1, 1, "", "leaves"], [480, 2, 1, "", "len"], [481, 2, 1, "", "sort_values"], [482, 2, 1, "", "take"], [483, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[484, 2, 1, "", "byte_count"], [485, 2, 1, "", "capitalize"], [486, 2, 1, "", "cat"], [487, 2, 1, "", "center"], [488, 2, 1, "", "character_ngrams"], [489, 2, 1, "", "character_tokenize"], [490, 2, 1, "", "code_points"], [491, 2, 1, "", "contains"], [492, 2, 1, "", "count"], [493, 2, 1, "", "detokenize"], [494, 2, 1, "", "edit_distance"], [495, 2, 1, "", "edit_distance_matrix"], [496, 2, 1, "", "endswith"], [497, 2, 1, "", "extract"], [498, 2, 1, "", "filter_alphanum"], [499, 2, 1, "", "filter_characters"], [500, 2, 1, "", "filter_tokens"], [501, 2, 1, "", "find"], [502, 2, 1, "", "find_multiple"], [503, 2, 1, "", "findall"], [504, 2, 1, "", "get"], [505, 2, 1, "", "get_json_object"], [506, 2, 1, "", "hex_to_int"], [507, 2, 1, "", "htoi"], [508, 2, 1, "", "index"], [509, 2, 1, "", "insert"], [510, 2, 1, "", "ip2int"], [511, 2, 1, "", "ip_to_int"], [512, 2, 1, "", "is_consonant"], [513, 2, 1, "", "is_vowel"], [514, 2, 1, "", "isalnum"], [515, 2, 1, "", "isalpha"], [516, 2, 1, "", "isdecimal"], [517, 2, 1, "", "isdigit"], [518, 2, 1, "", "isempty"], [519, 2, 1, "", "isfloat"], [520, 2, 1, "", "ishex"], [521, 2, 1, "", "isinteger"], [522, 2, 1, "", "isipv4"], [523, 2, 1, "", "islower"], [524, 2, 1, "", "isnumeric"], [525, 2, 1, "", "isspace"], [526, 2, 1, "", "istimestamp"], [527, 2, 1, "", "istitle"], [528, 2, 1, "", "isupper"], [529, 2, 1, "", "join"], [530, 2, 1, "", "len"], [531, 2, 1, "", "like"], [532, 2, 1, "", "ljust"], [533, 2, 1, "", "lower"], [534, 2, 1, "", "lstrip"], [535, 2, 1, "", "match"], [536, 2, 1, "", "ngrams"], [537, 2, 1, "", "ngrams_tokenize"], [538, 2, 1, "", "normalize_characters"], [539, 2, 1, "", "normalize_spaces"], [540, 2, 1, "", "pad"], [541, 2, 1, "", "partition"], [542, 2, 1, "", "porter_stemmer_measure"], [543, 2, 1, "", "repeat"], [544, 2, 1, "", "replace"], [545, 2, 1, "", "replace_tokens"], [546, 2, 1, "", "replace_with_backrefs"], [547, 2, 1, "", "rfind"], [548, 2, 1, "", "rindex"], [549, 2, 1, "", "rjust"], [550, 2, 1, "", "rpartition"], [551, 2, 1, "", "rsplit"], [552, 2, 1, "", "rstrip"], [553, 2, 1, "", "slice"], [554, 2, 1, "", "slice_from"], [555, 2, 1, "", "slice_replace"], [556, 2, 1, "", "split"], [557, 2, 1, "", "startswith"], [558, 2, 1, "", "strip"], [559, 2, 1, "", "swapcase"], [560, 2, 1, "", "title"], [561, 2, 1, "", "token_count"], [562, 2, 1, "", "tokenize"], [563, 2, 1, "", "translate"], [564, 2, 1, "", "upper"], [565, 2, 1, "", "url_decode"], [566, 2, 1, "", "url_encode"], [567, 2, 1, "", "wrap"], [568, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[569, 2, 1, "", "explode"], [570, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[571, 2, 1, "", "__iter__"], [572, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[573, 2, 1, "", "aggregate"], [574, 2, 1, "", "backfill"], [575, 2, 1, "", "bfill"], [576, 2, 1, "", "count"], [577, 2, 1, "", "cumcount"], [578, 2, 1, "", "cummax"], [579, 2, 1, "", "cummin"], [580, 2, 1, "", "cumsum"], [581, 2, 1, "", "describe"], [582, 2, 1, "", "diff"], [583, 2, 1, "", "ffill"], [584, 2, 1, "", "fillna"], [585, 2, 1, "", "idxmax"], [586, 2, 1, "", "idxmin"], [587, 2, 1, "", "nunique"], [588, 2, 1, "", "pad"], [589, 2, 1, "", "quantile"], [590, 2, 1, "", "shift"], [591, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[592, 2, 1, "", "agg"], [593, 2, 1, "", "apply"], [594, 2, 1, "", "backfill"], [595, 2, 1, "", "bfill"], [596, 2, 1, "", "corr"], [597, 2, 1, "", "count"], [598, 2, 1, "", "cov"], [599, 2, 1, "", "cumcount"], [600, 2, 1, "", "cummax"], [601, 2, 1, "", "cummin"], [602, 2, 1, "", "cumsum"], [603, 2, 1, "", "ffill"], [604, 2, 1, "", "max"], [605, 2, 1, "", "mean"], [606, 2, 1, "", "median"], [607, 2, 1, "", "min"], [608, 2, 1, "", "ngroup"], [609, 2, 1, "", "nth"], [610, 2, 1, "", "pad"], [611, 2, 1, "", "pipe"], [612, 2, 1, "", "prod"], [613, 2, 1, "", "size"], [614, 2, 1, "", "std"], [615, 2, 1, "", "sum"], [616, 2, 1, "", "transform"], [617, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[618, 2, 1, "", "aggregate"], [619, 2, 1, "", "nunique"], [620, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[621, 2, 1, "", "ceil"], [622, 1, 1, "", "day"], [623, 1, 1, "", "day_of_year"], [624, 1, 1, "", "dayofweek"], [625, 1, 1, "", "dayofyear"], [626, 1, 1, "", "days_in_month"], [627, 2, 1, "", "floor"], [628, 1, 1, "", "hour"], [629, 1, 1, "", "is_leap_year"], [630, 1, 1, "", "is_month_end"], [631, 1, 1, "", "is_month_start"], [632, 1, 1, "", "is_quarter_end"], [633, 1, 1, "", "is_quarter_start"], [634, 1, 1, "", "is_year_end"], [635, 1, 1, "", "is_year_start"], [636, 2, 1, "", "isocalendar"], [637, 1, 1, "", "microsecond"], [638, 1, 1, "", "minute"], [639, 1, 1, "", "month"], [640, 1, 1, "", "nanosecond"], [641, 1, 1, "", "quarter"], [642, 2, 1, "", "round"], [643, 1, 1, "", "second"], [644, 2, 1, "", "strftime"], [645, 1, 1, "", "weekday"], [646, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[647, 1, 1, "", "components"], [648, 1, 1, "", "days"], [649, 1, 1, "", "microseconds"], [650, 1, 1, "", "nanoseconds"], [651, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[652, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[653, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[654, 2, 1, "", "apply"], [655, 2, 1, "", "count"], [656, 2, 1, "", "max"], [657, 2, 1, "", "mean"], [658, 2, 1, "", "min"], [659, 2, 1, "", "std"], [660, 2, 1, "", "sum"], [661, 2, 1, "", "var"]], "cudf.io.parquet": [[668, 0, 1, "", "ParquetDatasetWriter"], [671, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[669, 2, 1, "", "close"], [670, 2, 1, "", "write_table"]], "cudf.testing.testing": [[684, 3, 1, "", "assert_column_equal"], [685, 3, 1, "", "assert_frame_equal"], [686, 3, 1, "", "assert_index_equal"], [687, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 699, 705, 707, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 753, 755], "categoricalindex": [0, 1, 2, 3, 696], "categori": [1, 468, 716], "code": [2, 266, 469, 706], "equal": [3, 50, 325], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 691, 747, 750], "t": [5, 280], "__iter__": [6, 282, 571], "ab": [7, 283], "add": [8, 284], "add_prefix": [9, 285], "add_suffix": [10, 286], "agg": [11, 592], "all": [12, 287, 709], "ani": [13, 211, 288], "append": [14, 212, 289], "appli": [15, 290, 593, 654, 749, 750, 755], "apply_chunk": [16, 750], "apply_row": [17, 750], "applymap": [18, 713], "argsort": [19, 291], "assign": 20, "astyp": [21, 292, 474], "ax": [23, 294], "backfil": [24, 295, 574, 594], "bfill": [25, 297, 575, 595], "clip": [26, 299], "column": [27, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 709, 755], "copi": [28, 213, 300], "corr": [29, 301, 596], "count": [30, 302, 492, 576, 597, 655], "cov": [31, 303, 598], "cummax": [32, 304, 578, 600], "cummin": [33, 305, 579, 601], "cumprod": [34, 306], "cumsum": [35, 307, 580, 602], "describ": [36, 309, 581], "deseri": [37, 214, 310], "device_deseri": [38, 215, 311], "device_seri": [39, 216, 312], "diff": [40, 313, 582], "div": [41, 315], "divid": [42, 316], "dot": [43, 317], "drop": [44, 318, 753], "drop_dupl": [45, 218, 319], "dropna": [46, 219, 320, 753], "dtype": [47, 322, 752, 753], "empti": [48, 323], "eq": [49, 324], "eval": 51, "explod": [52, 326, 569], "ffill": [53, 328, 583, 603], "fillna": [54, 220, 329, 584, 753], "first": [55, 330], "floordiv": [56, 331], "from_arrow": [57, 221, 268, 332, 721, 727, 733, 740, 745], "from_dict": 58, "from_panda": [59, 222, 335, 717], "from_record": 60, "ge": [61, 336], "groupbi": [62, 337, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 691, 694, 700, 749, 750, 753], "gt": [63, 338], "hash_valu": [64, 340], "head": [65, 341], "host_deseri": [66, 227, 342], "host_seri": [67, 228, 343], "iat": 68, "iloc": [69, 344], "index": [70, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 345, 478, 508, 691, 694, 696, 700, 709, 713, 749], "info": 71, "insert": [72, 509, 753], "interleave_column": 73, "interpol": [74, 346], "isin": [75, 240, 351], "isna": [76, 241, 352], "isnul": [77, 353], "item": [78, 354], "iterrow": 79, "itertupl": 80, "join": [81, 242, 529, 691, 696, 700, 713], "kei": [82, 356], "kurt": [83, 357], "kurtosi": [84, 358], "last": [85, 359], "le": [86, 360], "loc": [87, 362], "lt": [88, 363], "mask": [89, 365], "max": [90, 366, 604, 656], "mean": [91, 367, 605, 657], "median": [92, 368, 606], "melt": [93, 672], "memory_usag": [94, 369], "merg": [95, 691, 700], "min": [96, 370, 607, 658], "mod": [97, 371], "mode": [98, 372], "mul": [99, 373], "multipli": [100, 374], "nans_to_nul": [101, 376], "ndim": [102, 377], "ne": [103, 378], "nlargest": [104, 379], "notna": [105, 245, 380], "notnul": [106, 381], "nsmallest": [107, 382], "nuniqu": [108, 386, 587, 619], "pad": [109, 387, 540, 588, 610], "partition_by_hash": 110, "pct_chang": [111, 388], "pipe": [112, 389, 611], "pivot": [113, 673], "pivot_t": [114, 674], "pop": 115, "pow": [116, 390], "prod": [117, 391, 612], "product": [118, 392, 753], "quantil": [119, 120, 393, 589], "panda": [119, 125, 179, 186, 273, 397, 445, 453, 584, 593, 705, 706, 707, 713, 714, 755], "compat": [119, 125, 179, 186, 273, 397, 445, 453, 584, 593, 696, 706, 714], "note": [119, 125, 179, 186, 273, 397, 445, 453, 584, 593, 714, 748], "queri": 121, "radd": [122, 394], "rank": [123, 395], "rdiv": [124, 396], "reindex": [125, 397, 691, 700], "renam": [126, 246, 398], "repeat": [127, 247, 399, 543], "replac": [128, 400, 544, 753], "resampl": [129, 401], "reset_index": [130, 402], "rfloordiv": [131, 403], "rmod": [132, 404], "rmul": [133, 405], "roll": [134, 406, 654, 655, 656, 657, 658, 659, 660, 661, 704, 749, 750], "round": [135, 202, 407, 642], "rpow": [136, 408], "rsub": [137, 409], "rtruediv": [138, 410], "sampl": [139, 411], "scale": [140, 412, 724, 730, 736], "scatter_by_map": 141, "searchsort": [142, 413], "select_dtyp": 143, "serial": [144, 248, 414, 691, 700], "set_index": 145, "shape": [146, 415], "shift": [147, 416, 590], "size": [148, 250, 417, 591, 613], "skew": [149, 418], "sort_index": [150, 419], "sort_valu": [151, 251, 420, 481], "stack": 152, "std": [153, 421, 614, 659], "sub": [154, 424], "subtract": [155, 425], "sum": [156, 426, 615, 660, 753], "sum_of_squar": [157, 427], "swaplevel": 158, "tail": [159, 428], "take": [160, 252, 429, 482], "tile": [161, 430], "to_arrow": [162, 431, 725, 731, 737, 742, 746], "to_csv": 163, "to_cupi": [164, 432], "to_dict": [165, 433], "to_dlpack": [166, 253, 434], "to_feath": 167, "to_hdf": [168, 436], "to_json": [169, 437], "to_numpi": [170, 439], "to_orc": 171, "to_panda": [172, 255, 440, 719], "to_parquet": 173, "to_record": 174, "to_str": [175, 441], "to_struct": 176, "transpos": [177, 443, 691, 713], "truediv": [178, 444], "truncat": [179, 445], "unstack": [180, 690], "updat": [181, 447], "value_count": [182, 449], "valu": [183, 259, 264, 450, 696, 753, 755], "values_host": [184, 451], "var": [185, 452, 617, 661], "where": [186, 453], "datetimeindex": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 696], "ceil": [188, 621], "dai": [189, 456, 622, 648], "day_of_year": [190, 623], "dayofweek": [191, 624], "dayofyear": [192, 625], "floor": [193, 627], "hour": [194, 628], "is_leap_year": [195, 629], "isocalendar": [196, 636], "microsecond": [197, 458, 637, 649], "minut": [198, 638, 713], "month": [199, 639], "nanosecond": [200, 459, 640, 650], "quarter": [201, 641], "second": [203, 460, 643, 651], "to_fram": [204, 254, 277, 435, 461], "to_seri": [205, 256, 462], "weekdai": [206, 645], "year": [207, 646], "float64index": 208, "grouper": [209, 749], "differ": [217, 752], "get_level_valu": [223, 272], "get_loc": [224, 263, 273], "get_slice_bound": 225, "has_dupl": 226, "intersect": 229, "is_boolean": 230, "is_categor": 231, "is_float": 232, "is_integ": 233, "is_interv": 234, "is_monoton": [235, 347], "is_monotonic_decreas": [236, 348], "is_monotonic_increas": [237, 349], "is_numer": 238, "is_object": 239, "name": [243, 275, 375, 706, 755], "nlevel": [244, 276], "set_nam": 249, "union": [257, 705], "uniqu": [258, 446, 483, 620], "int64index": 260, "intervalindex": [261, 262, 263, 264, 696], "from_break": 262, "multiindex": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 696, 713], "droplevel": 267, "from_fram": 269, "from_product": 270, "from_tupl": 271, "level": [274, 692, 749, 750], "rangeindex": 278, "seri": [279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 691, 700, 713, 747, 750], "__array__": 281, "autocorr": 293, "between": [296, 747], "cat": [298, 486], "data": [308, 691, 692, 700, 709, 713, 748, 750, 753, 755], "digit": 314, "dt": 321, "factor": 327, "from_categor": 333, "from_masked_arrai": 334, "has_nul": 339, "is_uniqu": 350, "iteritem": 355, "list": [361, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 698, 700, 748], "map": 364, "null_count": 383, "nullabl": [384, 750], "nullmask": 385, "str": 422, "struct": [423, 569, 570, 700, 702, 748], "to_list": 438, "tolist": 442, "valid_count": 448, "timedeltaindex": [454, 455, 456, 457, 458, 459, 460, 461, 462, 696], "compon": [455, 647, 696], "inferred_freq": 457, "uint64index": 463, "concat": [464, 475, 713], "core": [465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "categor": [465, 466, 467, 468, 469, 470, 471, 472, 473, 696, 700, 713], "categoricalaccessor": [465, 466, 467, 468, 469, 470, 471, 472, 473], "add_categori": 465, "as_ord": 466, "as_unord": 467, "order": [470, 718, 755], "remove_categori": 471, "reorder_categori": 472, "set_categori": 473, "listmethod": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "contain": [476, 491], "get": [477, 504, 713], "leav": 479, "len": [480, 530], "string": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 700, 701, 713, 750, 753], "stringmethod": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "byte_count": 484, "capit": 485, "center": 487, "character_ngram": 488, "character_token": 489, "code_point": 490, "detoken": 493, "edit_dist": 494, "edit_distance_matrix": 495, "endswith": 496, "extract": 497, "filter_alphanum": 498, "filter_charact": 499, "filter_token": 500, "find": 501, "find_multipl": 502, "findal": 503, "get_json_object": 505, "hex_to_int": 506, "htoi": 507, "ip2int": 510, "ip_to_int": 511, "is_conson": 512, "is_vowel": 513, "isalnum": 514, "isalpha": 515, "isdecim": 516, "isdigit": 517, "isempti": 518, "isfloat": 519, "ishex": 520, "isinteg": 521, "isipv4": 522, "islow": 523, "isnumer": 524, "isspac": 525, "istimestamp": 526, "istitl": 527, "isupp": 528, "like": 531, "ljust": 532, "lower": [533, 750], "lstrip": 534, "match": 535, "ngram": 536, "ngrams_token": 537, "normalize_charact": 538, "normalize_spac": 539, "partit": 541, "porter_stemmer_measur": 542, "replace_token": 545, "replace_with_backref": 546, "rfind": 547, "rindex": 548, "rjust": 549, "rpartit": 550, "rsplit": 551, "rstrip": 552, "slice": 553, "slice_from": 554, "slice_replac": 555, "split": 556, "startswith": 557, "strip": 558, "swapcas": 559, "titl": 560, "token_count": 561, "token": 562, "translat": 563, "upper": 564, "url_decod": 565, "url_encod": 566, "wrap": 567, "zfill": 568, "structmethod": [569, 570], "field": [570, 744], "group": [572, 713, 749], "dataframegroupbi": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591], "aggreg": [573, 618, 749], "cumcount": [577, 599], "idxmax": 585, "idxmin": 586, "ngroup": 608, "nth": 609, "transform": [616, 749], "seriesgroupbi": [618, 619, 620], "datetimeproperti": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646], "days_in_month": 626, "is_month_end": 630, "is_month_start": 631, "is_quarter_end": 632, "is_quarter_start": 633, "is_year_end": 634, "is_year_start": 635, "strftime": 644, "timedeltaproperti": [647, 648, 649, 650, 651], "subword_token": [652, 653], "subwordtoken": [652, 653, 703], "__call__": 653, "window": [654, 655, 656, 657, 658, 659, 660, 661, 691, 700, 704, 749, 750], "crosstab": 662, "cut": 663, "describe_opt": 664, "from_dlpack": 665, "get_dummi": 666, "get_opt": 667, "io": [668, 669, 670, 671, 691, 700, 752], "parquet": [668, 669, 670, 671, 697, 713], "parquetdatasetwrit": [668, 669, 670], "close": 669, "write_t": 670, "read_parquet_metadata": 671, "read_avro": 675, "read_csv": 676, "read_feath": 677, "read_hdf": 678, "read_json": 679, "Not": 679, "gpu": 679, "acceler": 679, "experiment": 679, "featur": 679, "read_orc": 680, "read_parquet": 681, "read_text": 682, "set_opt": 683, "test": [684, 685, 686, 687, 693, 705, 711], "assert_column_equ": 684, "assert_frame_equ": 685, "assert_index_equ": 686, "assert_series_equ": 687, "to_datetim": 688, "to_numer": 689, "constructor": [691, 696, 700, 703], "attribut": [691, 700], "underli": 691, "convers": [691, 692, 696, 700], "iter": [691, 694, 700, 755], "binari": [691, 700], "oper": [691, 696, 700, 713, 749, 755], "function": [691, 692, 693, 694, 700, 704, 711, 750, 755], "applic": [691, 694, 700], "comput": [691, 694, 696, 700, 755], "descript": [691, 694, 700], "stat": [691, 694, 700, 713], "select": [691, 696, 700, 713], "label": [691, 700, 713, 753], "manipul": [691, 692, 700], "miss": [691, 696, 700, 713, 753, 755], "handl": [691, 698, 700, 701, 702, 706, 750], "reshap": [691, 700], "sort": [691, 696, 700], "combin": [691, 696, 700], "compar": [691, 700, 705, 707], "time": [691, 696, 700, 713], "relat": [691, 700], "gener": [692, 693, 753], "top": 692, "deal": 692, "datetimelik": [692, 700], "util": [693, 711], "api": 695, "refer": 695, "document": [695, 707, 712], "object": [696, 713, 748, 749, 753, 755], "properti": [696, 700], "modifi": 696, "memori": [696, 709], "usag": 696, "specif": 696, "set": 696, "numer": [696, 753], "date": 696, "input": [697, 752], "output": [697, 752], "csv": [697, 713], "text": 697, "json": 697, "orc": [697, 713], "hdfstore": 697, "pytabl": 697, "hdf5": 697, "feather": 697, "avro": 697, "option": [699, 710, 754], "accessor": 700, "datetim": [700, 753], "method": [700, 713], "timedelta": 700, "benchmark": 705, "organ": [705, 711], "run": 705, "content": [705, 711, 712], "configur": 705, "write": [705, 707, 711], "parametr": [705, 711], "profil": 705, "advanc": 705, "topic": 705, "understand": 705, "benchmark_with_object": 705, "fixtur": [705, 711], "The": [705, 709, 749], "decor": 705, "contribut": 706, "guid": [706, 708, 751], "directori": 706, "structur": 706, "file": 706, "style": 706, "deprec": 706, "remov": 706, "python": 706, "v": 706, "cython": [706, 709], "except": 706, "libcudf": 706, "docstr": 707, "publish": 707, "page": 707, "build": 707, "requir": 707, "view": [707, 713], "doc": 707, "intern": 707, "develop": 708, "librari": [709, 713], "design": 709, "frame": 709, "layer": 709, "columnaccessor": 709, "type": [709, 748, 752, 755], "buffer": 709, "spill": 709, "host": 709, "put": 709, "It": 709, "togeth": 709, "tool": 711, "custom": [711, 750], "pytest": 711, "mark": 711, "complex": 711, "welcom": 712, "": 712, "indic": 712, "tabl": 712, "10": 713, "dask": 713, "what": 713, "ar": 713, "when": 713, "us": [713, 752], "creation": 713, "posit": 713, "boolean": 713, "histogram": 713, "convert": [713, 747], "represent": 713, "numpi": [713, 748], "arrow": 713, "In": 713, "out": 713, "perform": 713, "tip": 713, "persist": 713, "wait": 713, "categoricaldtyp": [715, 716, 717, 718, 719], "decimal128dtyp": [720, 721, 722, 723, 724, 725], "items": [722, 728, 734], "precis": [723, 729, 735], "decimal32dtyp": [726, 727, 728, 729, 730, 731], "decimal64dtyp": [732, 733, 734, 735, 736, 737], "listdtyp": [738, 739, 740, 741, 742], "element_typ": 739, "leaf_typ": 741, "structdtyp": [743, 744, 745, 746], "interoper": 747, "cupi": [747, 750], "arrai": [747, 750], "interweav": 747, "smooth": 747, "pydata": 747, "workflow": 747, "spars": 747, "matrix": 747, "support": [748, 749, 752, 755], "A": 748, "decim": 748, "nest": 748, "summari": [749, 750], "limit": [749, 755], "calcul": [749, 753], "overview": 750, "user": [750, 751], "defin": 750, "udf": 750, "addit": 750, "scalar": 750, "argument": 750, "control": 750, "numba": 750, "kernel": 750, "null": [750, 753, 755], "caveat": 750, "i": 752, "o": 752, "magnum": 752, "gpudirect": 752, "storag": 752, "integr": 752, "nvcomp": 752, "current": 752, "polici": 752, "work": 753, "how": 753, "detect": 753, "float": [753, 755], "nan": 753, "na": 753, "fill": 753, "axi": 753, "regular": 753, "express": 753, "comparison": 755, "result": 755, "point": 755, "No": 755, "true": 755}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [750, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_dict": [[58, "cudf-dataframe-from-dict"]], "cudf.DataFrame.from_pandas": [[59, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[60, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[61, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[62, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[63, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[64, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[65, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[66, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[67, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[68, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[69, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[70, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[71, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[72, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[73, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[74, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[75, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[76, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[77, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[78, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[79, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[80, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[81, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[82, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[83, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[84, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[85, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[86, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[87, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[88, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[89, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[90, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[91, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[92, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[93, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[94, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[95, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[96, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[97, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[98, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[99, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[100, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[101, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[102, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[103, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[104, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[105, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[106, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[107, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[108, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[109, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[110, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[111, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[112, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[113, "cudf-dataframe-pivot"]], "cudf.DataFrame.pivot_table": [[114, "cudf-dataframe-pivot-table"]], "cudf.DataFrame.pop": [[115, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[116, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[117, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[118, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[119, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[119, "PandasCompat-0"], [125, "PandasCompat-0"], [179, "PandasCompat-0"], [186, "PandasCompat-0"], [273, "PandasCompat-0"], [397, "PandasCompat-0"], [445, "PandasCompat-0"], [453, "PandasCompat-0"], [584, "PandasCompat-0"], [593, "PandasCompat-0"], [714, null], [714, null], [714, null], [714, null], [714, null], [714, null], [714, null], [714, null], [714, null], [714, null]], "cudf.DataFrame.quantiles": [[120, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[121, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[122, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[123, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[124, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[125, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[126, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[127, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[128, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[129, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[130, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[131, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[132, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[133, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[134, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[135, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[136, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[137, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[138, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[139, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[140, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[141, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[142, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[143, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[144, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[145, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[146, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[147, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[148, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[149, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[150, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[151, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[152, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[153, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[154, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[155, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[156, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[157, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[158, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[159, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[160, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[161, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[162, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[163, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[164, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[165, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[166, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[167, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[168, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[169, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[170, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[171, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[172, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[173, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[174, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[175, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[176, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[177, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[178, "cudf-dataframe-truediv"]], "cudf.DataFrame.truncate": [[179, "cudf-dataframe-truncate"]], "cudf.DataFrame.unstack": [[180, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[181, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[182, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[183, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[184, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[185, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[186, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[187, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[188, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[189, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[190, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[191, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[192, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[193, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[194, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[195, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[196, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[197, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[198, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[199, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[200, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[201, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[202, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[203, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[204, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[205, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[206, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[207, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[208, "cudf-float64index"]], "cudf.Grouper": [[209, "cudf-grouper"]], "cudf.Index": [[210, "cudf-index"]], "cudf.Index.any": [[211, "cudf-index-any"]], "cudf.Index.append": [[212, "cudf-index-append"]], "cudf.Index.copy": [[213, "cudf-index-copy"]], "cudf.Index.deserialize": [[214, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[215, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[216, "cudf-index-device-serialize"]], "cudf.Index.difference": [[217, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[218, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[219, "cudf-index-dropna"]], "cudf.Index.fillna": [[220, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[221, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[222, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[223, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[224, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[225, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[226, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[227, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[228, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[229, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[230, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[231, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[232, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[233, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[234, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[235, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[236, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[237, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[238, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[239, "cudf-index-is-object"]], "cudf.Index.isin": [[240, "cudf-index-isin"]], "cudf.Index.isna": [[241, "cudf-index-isna"]], "cudf.Index.join": [[242, "cudf-index-join"]], "cudf.Index.names": [[243, "cudf-index-names"]], "cudf.Index.nlevels": [[244, "cudf-index-nlevels"]], "cudf.Index.notna": [[245, "cudf-index-notna"]], "cudf.Index.rename": [[246, "cudf-index-rename"]], "cudf.Index.repeat": [[247, "cudf-index-repeat"]], "cudf.Index.serialize": [[248, "cudf-index-serialize"]], "cudf.Index.set_names": [[249, "cudf-index-set-names"]], "cudf.Index.size": [[250, "cudf-index-size"]], "cudf.Index.sort_values": [[251, "cudf-index-sort-values"]], "cudf.Index.take": [[252, "cudf-index-take"]], "cudf.Index.to_dlpack": [[253, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[254, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[255, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[256, "cudf-index-to-series"]], "cudf.Index.union": [[257, "cudf-index-union"]], "cudf.Index.unique": [[258, "cudf-index-unique"]], "cudf.Index.values": [[259, "cudf-index-values"]], "cudf.Int64Index": [[260, "cudf-int64index"]], "cudf.IntervalIndex": [[261, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[262, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[263, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[264, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[265, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[266, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[267, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[268, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[269, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[270, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[271, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[272, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[273, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[274, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[275, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[276, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[277, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[278, "cudf-rangeindex"]], "cudf.Series": [[279, "cudf-series"]], "cudf.Series.T": [[280, "cudf-series-t"]], "cudf.Series.__array__": [[281, "cudf-series-array"]], "cudf.Series.__iter__": [[282, "cudf-series-iter"]], "cudf.Series.abs": [[283, "cudf-series-abs"]], "cudf.Series.add": [[284, "cudf-series-add"]], "cudf.Series.add_prefix": [[285, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[286, "cudf-series-add-suffix"]], "cudf.Series.all": [[287, "cudf-series-all"]], "cudf.Series.any": [[288, "cudf-series-any"]], "cudf.Series.append": [[289, "cudf-series-append"]], "cudf.Series.apply": [[290, "cudf-series-apply"], [750, "cudf-series-apply"]], "cudf.Series.argsort": [[291, "cudf-series-argsort"]], "cudf.Series.astype": [[292, "cudf-series-astype"]], "cudf.Series.autocorr": [[293, "cudf-series-autocorr"]], "cudf.Series.axes": [[294, "cudf-series-axes"]], "cudf.Series.backfill": [[295, "cudf-series-backfill"]], "cudf.Series.between": [[296, "cudf-series-between"]], "cudf.Series.bfill": [[297, "cudf-series-bfill"]], "cudf.Series.cat": [[298, "cudf-series-cat"]], "cudf.Series.clip": [[299, "cudf-series-clip"]], "cudf.Series.copy": [[300, "cudf-series-copy"]], "cudf.Series.corr": [[301, "cudf-series-corr"]], "cudf.Series.count": [[302, "cudf-series-count"]], "cudf.Series.cov": [[303, "cudf-series-cov"]], "cudf.Series.cummax": [[304, "cudf-series-cummax"]], "cudf.Series.cummin": [[305, "cudf-series-cummin"]], "cudf.Series.cumprod": [[306, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[307, "cudf-series-cumsum"]], "cudf.Series.data": [[308, "cudf-series-data"]], "cudf.Series.describe": [[309, "cudf-series-describe"]], "cudf.Series.deserialize": [[310, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[311, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[312, "cudf-series-device-serialize"]], "cudf.Series.diff": [[313, "cudf-series-diff"]], "cudf.Series.digitize": [[314, "cudf-series-digitize"]], "cudf.Series.div": [[315, "cudf-series-div"]], "cudf.Series.divide": [[316, "cudf-series-divide"]], "cudf.Series.dot": [[317, "cudf-series-dot"]], "cudf.Series.drop": [[318, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[319, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[320, "cudf-series-dropna"]], "cudf.Series.dt": [[321, "cudf-series-dt"]], "cudf.Series.dtype": [[322, "cudf-series-dtype"]], "cudf.Series.empty": [[323, "cudf-series-empty"]], "cudf.Series.eq": [[324, "cudf-series-eq"]], "cudf.Series.equals": [[325, "cudf-series-equals"]], "cudf.Series.explode": [[326, "cudf-series-explode"]], "cudf.Series.factorize": [[327, "cudf-series-factorize"]], "cudf.Series.ffill": [[328, "cudf-series-ffill"]], "cudf.Series.fillna": [[329, "cudf-series-fillna"]], "cudf.Series.first": [[330, "cudf-series-first"]], "cudf.Series.floordiv": [[331, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[332, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[333, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[334, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[335, "cudf-series-from-pandas"]], "cudf.Series.ge": [[336, "cudf-series-ge"]], "cudf.Series.groupby": [[337, "cudf-series-groupby"]], "cudf.Series.gt": [[338, "cudf-series-gt"]], "cudf.Series.has_nulls": [[339, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[340, "cudf-series-hash-values"]], "cudf.Series.head": [[341, "cudf-series-head"]], "cudf.Series.host_deserialize": [[342, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[343, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[344, "cudf-series-iloc"]], "cudf.Series.index": [[345, "cudf-series-index"]], "cudf.Series.interpolate": [[346, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[347, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[348, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[349, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[350, "cudf-series-is-unique"]], "cudf.Series.isin": [[351, "cudf-series-isin"]], "cudf.Series.isna": [[352, "cudf-series-isna"]], "cudf.Series.isnull": [[353, "cudf-series-isnull"]], "cudf.Series.items": [[354, "cudf-series-items"]], "cudf.Series.iteritems": [[355, "cudf-series-iteritems"]], "cudf.Series.keys": [[356, "cudf-series-keys"]], "cudf.Series.kurt": [[357, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[358, "cudf-series-kurtosis"]], "cudf.Series.last": [[359, "cudf-series-last"]], "cudf.Series.le": [[360, "cudf-series-le"]], "cudf.Series.list": [[361, "cudf-series-list"]], "cudf.Series.loc": [[362, "cudf-series-loc"]], "cudf.Series.lt": [[363, "cudf-series-lt"]], "cudf.Series.map": [[364, "cudf-series-map"]], "cudf.Series.mask": [[365, "cudf-series-mask"]], "cudf.Series.max": [[366, "cudf-series-max"]], "cudf.Series.mean": [[367, "cudf-series-mean"]], "cudf.Series.median": [[368, "cudf-series-median"]], "cudf.Series.memory_usage": [[369, "cudf-series-memory-usage"]], "cudf.Series.min": [[370, "cudf-series-min"]], "cudf.Series.mod": [[371, "cudf-series-mod"]], "cudf.Series.mode": [[372, "cudf-series-mode"]], "cudf.Series.mul": [[373, "cudf-series-mul"]], "cudf.Series.multiply": [[374, "cudf-series-multiply"]], "cudf.Series.name": [[375, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[376, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[377, "cudf-series-ndim"]], "cudf.Series.ne": [[378, "cudf-series-ne"]], "cudf.Series.nlargest": [[379, "cudf-series-nlargest"]], "cudf.Series.notna": [[380, "cudf-series-notna"]], "cudf.Series.notnull": [[381, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[382, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[383, "cudf-series-null-count"]], "cudf.Series.nullable": [[384, "cudf-series-nullable"]], "cudf.Series.nullmask": [[385, "cudf-series-nullmask"]], "cudf.Series.nunique": [[386, "cudf-series-nunique"]], "cudf.Series.pad": [[387, "cudf-series-pad"]], "cudf.Series.pct_change": [[388, "cudf-series-pct-change"]], "cudf.Series.pipe": [[389, "cudf-series-pipe"]], "cudf.Series.pow": [[390, "cudf-series-pow"]], "cudf.Series.prod": [[391, "cudf-series-prod"]], "cudf.Series.product": [[392, "cudf-series-product"]], "cudf.Series.quantile": [[393, "cudf-series-quantile"]], "cudf.Series.radd": [[394, "cudf-series-radd"]], "cudf.Series.rank": [[395, "cudf-series-rank"]], "cudf.Series.rdiv": [[396, "cudf-series-rdiv"]], "cudf.Series.reindex": [[397, "cudf-series-reindex"]], "cudf.Series.rename": [[398, "cudf-series-rename"]], "cudf.Series.repeat": [[399, "cudf-series-repeat"]], "cudf.Series.replace": [[400, "cudf-series-replace"]], "cudf.Series.resample": [[401, "cudf-series-resample"]], "cudf.Series.reset_index": [[402, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[403, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[404, "cudf-series-rmod"]], "cudf.Series.rmul": [[405, "cudf-series-rmul"]], "cudf.Series.rolling": [[406, "cudf-series-rolling"]], "cudf.Series.round": [[407, "cudf-series-round"]], "cudf.Series.rpow": [[408, "cudf-series-rpow"]], "cudf.Series.rsub": [[409, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[410, "cudf-series-rtruediv"]], "cudf.Series.sample": [[411, "cudf-series-sample"]], "cudf.Series.scale": [[412, "cudf-series-scale"]], "cudf.Series.searchsorted": [[413, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[414, "cudf-series-serialize"]], "cudf.Series.shape": [[415, "cudf-series-shape"]], "cudf.Series.shift": [[416, "cudf-series-shift"]], "cudf.Series.size": [[417, "cudf-series-size"]], "cudf.Series.skew": [[418, "cudf-series-skew"]], "cudf.Series.sort_index": [[419, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[420, "cudf-series-sort-values"]], "cudf.Series.std": [[421, "cudf-series-std"]], "cudf.Series.str": [[422, "cudf-series-str"]], "cudf.Series.struct": [[423, "cudf-series-struct"]], "cudf.Series.sub": [[424, "cudf-series-sub"]], "cudf.Series.subtract": [[425, "cudf-series-subtract"]], "cudf.Series.sum": [[426, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[427, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[428, "cudf-series-tail"]], "cudf.Series.take": [[429, "cudf-series-take"]], "cudf.Series.tile": [[430, "cudf-series-tile"]], "cudf.Series.to_arrow": [[431, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[432, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[433, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[434, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[435, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[436, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[437, "cudf-series-to-json"]], "cudf.Series.to_list": [[438, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[439, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[440, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[441, "cudf-series-to-string"]], "cudf.Series.tolist": [[442, "cudf-series-tolist"]], "cudf.Series.transpose": [[443, "cudf-series-transpose"]], "cudf.Series.truediv": [[444, "cudf-series-truediv"]], "cudf.Series.truncate": [[445, "cudf-series-truncate"]], "cudf.Series.unique": [[446, "cudf-series-unique"]], "cudf.Series.update": [[447, "cudf-series-update"]], "cudf.Series.valid_count": [[448, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[449, "cudf-series-value-counts"]], "cudf.Series.values": [[450, "cudf-series-values"]], "cudf.Series.values_host": [[451, "cudf-series-values-host"]], "cudf.Series.var": [[452, "cudf-series-var"]], "cudf.Series.where": [[453, "cudf-series-where"]], "cudf.TimedeltaIndex": [[454, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[455, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[456, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[457, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[458, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[459, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[460, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[461, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[462, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[463, "cudf-uint64index"]], "cudf.concat": [[464, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[465, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[466, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[467, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[468, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[469, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[470, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[471, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[472, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[473, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[474, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[475, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[476, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[477, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[478, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[479, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[480, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[481, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[482, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[483, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[484, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[485, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[486, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[487, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[488, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[489, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[490, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[491, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[492, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[493, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[494, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[495, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[496, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[497, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[498, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[499, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[500, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[501, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[502, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[503, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[504, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[505, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[506, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[507, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[508, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[509, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[510, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[511, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[512, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[513, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[514, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[515, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[516, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[517, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[518, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[519, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[520, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[521, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[522, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[523, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[524, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[525, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[526, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[527, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[528, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[529, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[530, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[531, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[532, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[533, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[534, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[535, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[536, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[537, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[538, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[539, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[540, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[541, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[542, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[543, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[544, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[545, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[546, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[547, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[548, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[549, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[550, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[551, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[552, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[553, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[554, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[555, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[556, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[557, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[558, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[559, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[560, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[561, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[562, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[563, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[564, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[565, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[566, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[567, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[568, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[569, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[570, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[571, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[572, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[573, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[574, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[575, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[576, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[577, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[578, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[579, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[580, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[581, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[582, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[583, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[584, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[585, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[586, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[587, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[588, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[589, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[590, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[591, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[592, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[593, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[594, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[595, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[596, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[597, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[598, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[599, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[600, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[601, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[602, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[603, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[604, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[605, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[606, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[607, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[608, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[609, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[610, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[611, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[612, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[613, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[614, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[615, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[616, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[617, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[618, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[619, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[620, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[621, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[622, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[623, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[624, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[625, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[626, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[627, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[628, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[629, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[630, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[631, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[632, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[633, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[634, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[635, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[636, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[637, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[638, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[639, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[640, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[641, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[642, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[643, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[644, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[645, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[646, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[647, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[648, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[649, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[650, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[651, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[652, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[653, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[654, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[655, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[656, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[657, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[658, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[659, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[660, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[661, "cudf-core-window-rolling-rolling-var"]], "cudf.crosstab": [[662, "cudf-crosstab"]], "cudf.cut": [[663, "cudf-cut"]], "cudf.describe_option": [[664, "cudf-describe-option"]], "cudf.from_dlpack": [[665, "cudf-from-dlpack"]], "cudf.get_dummies": [[666, "cudf-get-dummies"]], "cudf.get_option": [[667, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[668, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[669, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[670, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[671, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[672, "cudf-melt"]], "cudf.pivot": [[673, "cudf-pivot"]], "cudf.pivot_table": [[674, "cudf-pivot-table"]], "cudf.read_avro": [[675, "cudf-read-avro"]], "cudf.read_csv": [[676, "cudf-read-csv"]], "cudf.read_feather": [[677, "cudf-read-feather"]], "cudf.read_hdf": [[678, "cudf-read-hdf"]], "cudf.read_json": [[679, "cudf-read-json"]], "Not GPU-accelerated": [[679, null], [679, null], [679, null], [679, null], [679, null], [679, null], [679, null], [679, null], [679, null]], "GPU-accelerated": [[679, null]], "GPU-accelerated experimental feature": [[679, null]], "cudf.read_orc": [[680, "cudf-read-orc"]], "cudf.read_parquet": [[681, "cudf-read-parquet"]], "cudf.read_text": [[682, "cudf-read-text"]], "cudf.set_option": [[683, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[684, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[685, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[686, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[687, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[688, "cudf-to-datetime"]], "cudf.to_numeric": [[689, "cudf-to-numeric"]], "cudf.unstack": [[690, "cudf-unstack"]], "DataFrame": [[691, "dataframe"]], "Constructor": [[691, "constructor"], [700, "constructor"], [703, "constructor"]], "Attributes and underlying data": [[691, "attributes-and-underlying-data"]], "Conversion": [[691, "conversion"], [696, "conversion"], [696, "id3"], [696, "id4"], [700, "conversion"]], "Indexing, iteration": [[691, "indexing-iteration"], [694, "indexing-iteration"], [700, "indexing-iteration"]], "Binary operator functions": [[691, "binary-operator-functions"], [700, "binary-operator-functions"]], "Function application, GroupBy & window": [[691, "function-application-groupby-window"], [700, "function-application-groupby-window"]], "Computations / descriptive stats": [[691, "computations-descriptive-stats"], [694, "computations-descriptive-stats"], [700, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[691, "reindexing-selection-label-manipulation"], [700, "reindexing-selection-label-manipulation"]], "Missing data handling": [[691, "missing-data-handling"], [700, "missing-data-handling"]], "Reshaping, sorting, transposing": [[691, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[691, "combining-comparing-joining-merging"], [700, "combining-comparing-joining-merging"]], "Time Series-related": [[691, "time-series-related"], [700, "time-series-related"]], "Serialization / IO / conversion": [[691, "serialization-io-conversion"], [700, "serialization-io-conversion"]], "General Functions": [[692, "general-functions"]], "Data manipulations": [[692, "data-manipulations"]], "Top-level conversions": [[692, "top-level-conversions"]], "Top-level dealing with datetimelike": [[692, "top-level-dealing-with-datetimelike"]], "General Utilities": [[693, "general-utilities"]], "Testing functions": [[693, "testing-functions"]], "GroupBy": [[694, "groupby"], [749, "groupby"]], "Function application": [[694, "function-application"]], "API reference": [[695, "api-reference"]], "API Documentation": [[695, null]], "Index objects": [[696, "index-objects"]], "Index": [[696, "index"]], "Properties": [[696, "properties"]], "Modifying and computations": [[696, "modifying-and-computations"], [696, "id1"]], "Compatibility with MultiIndex": [[696, "compatibility-with-multiindex"]], "Missing values": [[696, "missing-values"]], "Memory usage": [[696, "memory-usage"]], "Sorting": [[696, "sorting"]], "Time-specific operations": [[696, "time-specific-operations"], [696, "id2"]], "Combining / joining / set operations": [[696, "combining-joining-set-operations"]], "Selecting": [[696, "selecting"]], "Numeric Index": [[696, "numeric-index"]], "CategoricalIndex": [[696, "categoricalindex"]], "Categorical components": [[696, "categorical-components"]], "IntervalIndex": [[696, "intervalindex"]], "IntervalIndex components": [[696, "intervalindex-components"]], "MultiIndex": [[696, "multiindex"], [713, "multiindex"]], "MultiIndex constructors": [[696, "multiindex-constructors"]], "MultiIndex properties": [[696, "multiindex-properties"]], "MultiIndex components": [[696, "multiindex-components"]], "MultiIndex selecting": [[696, "multiindex-selecting"]], "DatetimeIndex": [[696, "datetimeindex"]], "Time/date components": [[696, "time-date-components"]], "TimedeltaIndex": [[696, "timedeltaindex"]], "Components": [[696, "components"]], "Input/output": [[697, "input-output"]], "CSV": [[697, "csv"], [713, "csv"]], "Text": [[697, "text"]], "JSON": [[697, "json"]], "Parquet": [[697, "parquet"], [713, "parquet"]], "ORC": [[697, "orc"], [713, "orc"]], "HDFStore: PyTables (HDF5)": [[697, "hdfstore-pytables-hdf5"]], "Feather": [[697, "feather"]], "Avro": [[697, "avro"]], "List handling": [[698, "list-handling"], [700, "list-handling"]], "cudf Options": [[699, "cudf-options"]], "Series": [[700, "series"]], "Attributes": [[700, "attributes"]], "Reshaping, sorting": [[700, "reshaping-sorting"]], "Accessors": [[700, "accessors"]], "Datetimelike properties": [[700, "datetimelike-properties"]], "Datetime properties": [[700, "datetime-properties"]], "Datetime methods": [[700, "datetime-methods"]], "Timedelta properties": [[700, "timedelta-properties"]], "String handling": [[700, "string-handling"], [701, "string-handling"]], "Categorical accessor": [[700, "categorical-accessor"]], "Struct handling": [[700, "struct-handling"], [702, "struct-handling"]], "SubwordTokenizer": [[703, "subwordtokenizer"]], "Window": [[704, "window"]], "Rolling window functions": [[704, "rolling-window-functions"]], "Benchmarking cuDF": [[705, "benchmarking-cudf"]], "Benchmark organization": [[705, "benchmark-organization"]], "Running benchmarks": [[705, "running-benchmarks"]], "Benchmark contents": [[705, "benchmark-contents"]], "Benchmark configuration": [[705, "benchmark-configuration"]], "Writing benchmarks": [[705, "writing-benchmarks"]], "Parametrizing tests": [[705, "parametrizing-tests"]], "Comparing to pandas": [[705, "comparing-to-pandas"], [707, "comparing-to-pandas"]], "Testing benchmarks": [[705, "testing-benchmarks"]], "Profiling": [[705, "profiling"]], "Advanced Topics": [[705, "advanced-topics"]], "Understanding benchmark_with_object": [[705, "understanding-benchmark-with-object"]], "Fixture unions": [[705, "fixture-unions"]], "The benchmark_with_object decorator": [[705, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[706, "contributing-guide"]], "Directory structure and file naming": [[706, "directory-structure-and-file-naming"]], "Code style": [[706, "code-style"]], "Deprecating and removing code": [[706, "deprecating-and-removing-code"]], "pandas compatibility": [[706, "pandas-compatibility"]], "Python vs Cython": [[706, "python-vs-cython"]], "Exception handling": [[706, "exception-handling"]], "Handling libcudf Exceptions": [[706, "handling-libcudf-exceptions"]], "Writing documentation": [[707, "writing-documentation"]], "Docstrings": [[707, "docstrings"]], "Published documentation": [[707, "published-documentation"]], "Writing documentation pages": [[707, "writing-documentation-pages"]], "Building documentation": [[707, "building-documentation"]], "Requirements": [[707, "requirements"]], "Building and viewing docs": [[707, "building-and-viewing-docs"]], "Documenting cuDF internals": [[707, "documenting-cudf-internals"]], "Developer Guide": [[708, "developer-guide"]], "Library Design": [[709, "library-design"]], "The Frame layer": [[709, "the-frame-layer"]], "Frames": [[709, "frames"]], "Indexes": [[709, "indexes"]], "The Column layer": [[709, "the-column-layer"]], "ColumnAccessor": [[709, "columnaccessor"]], "Columns": [[709, "columns"]], "Data types": [[709, "data-types"], [755, "data-types"]], "Buffer": [[709, "buffer"]], "Spilling to host memory": [[709, "spilling-to-host-memory"]], "Design": [[709, "design"]], "The Cython layer": [[709, "the-cython-layer"]], "Putting It All Together": [[709, "putting-it-all-together"]], "Options": [[710, "options"], [754, "options"]], "Testing cuDF": [[711, "testing-cudf"]], "Tooling": [[711, "tooling"]], "Test organization": [[711, "test-organization"]], "Test contents": [[711, "test-contents"]], "Writing tests": [[711, "writing-tests"]], "Parametrization: custom fixtures and pytest.mark.parametrize": [[711, "parametrization-custom-fixtures-and-pytest-mark-parametrize"]], "Complex parametrizations": [[711, "complex-parametrizations"]], "Testing utility functions": [[711, "testing-utility-functions"]], "Welcome to cuDF\u2019s documentation!": [[712, "welcome-to-cudf-s-documentation"]], "Contents:": [[712, null]], "Indices and tables": [[712, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[713, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[713, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[713, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[713, "object-creation"]], "Viewing Data": [[713, "viewing-data"]], "Selection": [[713, "selection"]], "Getting": [[713, "getting"]], "Selection by Label": [[713, "selection-by-label"]], "Selection by Position": [[713, "selection-by-position"]], "Boolean Indexing": [[713, "boolean-indexing"]], "Missing Data": [[713, "missing-data"]], "Operations": [[713, "operations"]], "Stats": [[713, "stats"]], "Applymap": [[713, "applymap"]], "Histogramming": [[713, "histogramming"]], "String Methods": [[713, "string-methods"]], "Concat": [[713, "concat"]], "Join": [[713, "join"]], "Grouping": [[713, "grouping"], [749, "grouping"]], "Transpose": [[713, "transpose"]], "Time Series": [[713, "time-series"]], "Categoricals": [[713, "categoricals"]], "Converting Data Representation": [[713, "converting-data-representation"]], "Pandas": [[713, "pandas"]], "Numpy": [[713, "numpy"]], "Arrow": [[713, "arrow"]], "Getting Data In/Out": [[713, "getting-data-in-out"]], "Dask Performance Tips": [[713, "dask-performance-tips"]], "Persisting Data": [[713, "persisting-data"]], "Wait": [[713, "wait"]], "Pandas Compatibility Notes": [[714, "pandas-compatibility-notes"]], "cudf.CategoricalDtype": [[715, "cudf-categoricaldtype"]], "cudf.CategoricalDtype.categories": [[716, "cudf-categoricaldtype-categories"]], "cudf.CategoricalDtype.from_pandas": [[717, "cudf-categoricaldtype-from-pandas"]], "cudf.CategoricalDtype.ordered": [[718, "cudf-categoricaldtype-ordered"]], "cudf.CategoricalDtype.to_pandas": [[719, "cudf-categoricaldtype-to-pandas"]], "cudf.Decimal128Dtype": [[720, "cudf-decimal128dtype"]], "cudf.Decimal128Dtype.from_arrow": [[721, "cudf-decimal128dtype-from-arrow"]], "cudf.Decimal128Dtype.itemsize": [[722, "cudf-decimal128dtype-itemsize"]], "cudf.Decimal128Dtype.precision": [[723, "cudf-decimal128dtype-precision"]], "cudf.Decimal128Dtype.scale": [[724, "cudf-decimal128dtype-scale"]], "cudf.Decimal128Dtype.to_arrow": [[725, "cudf-decimal128dtype-to-arrow"]], "cudf.Decimal32Dtype": [[726, "cudf-decimal32dtype"]], "cudf.Decimal32Dtype.from_arrow": [[727, "cudf-decimal32dtype-from-arrow"]], "cudf.Decimal32Dtype.itemsize": [[728, "cudf-decimal32dtype-itemsize"]], "cudf.Decimal32Dtype.precision": [[729, "cudf-decimal32dtype-precision"]], "cudf.Decimal32Dtype.scale": [[730, "cudf-decimal32dtype-scale"]], "cudf.Decimal32Dtype.to_arrow": [[731, "cudf-decimal32dtype-to-arrow"]], "cudf.Decimal64Dtype": [[732, "cudf-decimal64dtype"]], "cudf.Decimal64Dtype.from_arrow": [[733, "cudf-decimal64dtype-from-arrow"]], "cudf.Decimal64Dtype.itemsize": [[734, "cudf-decimal64dtype-itemsize"]], "cudf.Decimal64Dtype.precision": [[735, "cudf-decimal64dtype-precision"]], "cudf.Decimal64Dtype.scale": [[736, "cudf-decimal64dtype-scale"]], "cudf.Decimal64Dtype.to_arrow": [[737, "cudf-decimal64dtype-to-arrow"]], "cudf.ListDtype": [[738, "cudf-listdtype"]], "cudf.ListDtype.element_type": [[739, "cudf-listdtype-element-type"]], "cudf.ListDtype.from_arrow": [[740, "cudf-listdtype-from-arrow"]], "cudf.ListDtype.leaf_type": [[741, "cudf-listdtype-leaf-type"]], "cudf.ListDtype.to_arrow": [[742, "cudf-listdtype-to-arrow"]], "cudf.StructDtype": [[743, "cudf-structdtype"]], "cudf.StructDtype.fields": [[744, "cudf-structdtype-fields"]], "cudf.StructDtype.from_arrow": [[745, "cudf-structdtype-from-arrow"]], "cudf.StructDtype.to_arrow": [[746, "cudf-structdtype-to-arrow"]], "Interoperability between cuDF and CuPy": [[747, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[747, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[747, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[747, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[747, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[747, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[747, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Supported Data Types": [[748, "supported-data-types"]], "NumPy data types": [[748, "numpy-data-types"]], "A note on object": [[748, "a-note-on-object"]], "Decimal data types": [[748, "decimal-data-types"]], "Nested data types (List and Struct)": [[748, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[749, "summary-of-supported-operations"]], "Grouping by index levels": [[749, "grouping-by-index-levels"]], "The Grouper object": [[749, "the-grouper-object"]], "Aggregation": [[749, "aggregation"]], "GroupBy apply": [[749, "groupby-apply"]], "Limitations": [[749, "limitations"]], "Transform": [[749, "transform"]], "Rolling window calculations": [[749, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[750, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[750, "series-udfs"]], "Functions with Additional Scalar Arguments": [[750, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[750, "nullable-data"]], "String data": [[750, "string-data"]], "Lower level control with custom numba kernels": [[750, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[750, "dataframe-udfs"]], "String Data": [[750, "id1"]], "Numba kernels for DataFrames": [[750, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[750, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[750, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[750, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[750, "numba-kernels-on-cupy-arrays"]], "Caveats": [[750, "caveats"]], "Summary": [[750, "summary"]], "User Guide": [[751, "user-guide"]], "Input / Output": [[752, "input-output"]], "I/O Supported dtypes": [[752, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[752, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[752, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[752, "id1"]], "Working with missing data": [[753, "working-with-missing-data"]], "How to Detect missing values": [[753, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[753, "float-dtypes-and-missing-data"]], "Datetimes": [[753, "datetimes"]], "Calculations with missing data": [[753, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[753, "sum-product-of-null-nans"]], "NA values in GroupBy": [[753, "na-values-in-groupby"]], "Inserting missing data": [[753, "inserting-missing-data"]], "Filling missing values: fillna": [[753, "filling-missing-values-fillna"]], "Filling with cudf Object": [[753, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[753, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[753, "replacing-generic-values"]], "String/regular expression replacement": [[753, "string-regular-expression-replacement"]], "Numeric replacement": [[753, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[755, "comparison-of-cudf-and-pandas"]], "Supported operations": [[755, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[755, "null-or-missing-values"]], "Iteration": [[755, "iteration"]], "Result ordering": [[755, "result-ordering"]], "Floating-point computation": [[755, "floating-point-computation"]], "Column names": [[755, "column-names"]], "No true \"object\" data type": [[755, "no-true-object-data-type"]], ".apply() function limitations": [[755, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_dict() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_dict"]], "from_pandas() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[60, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[61, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[62, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[63, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[64, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[65, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[66, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[67, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[68, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[69, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[70, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[71, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[72, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[73, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[74, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[75, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[76, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[77, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[78, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[79, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[80, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[81, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[82, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[84, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[85, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[86, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[87, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[88, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[89, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[90, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[91, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[92, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[93, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[94, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[95, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[96, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[97, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[98, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[99, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[100, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[101, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[102, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[103, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[104, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[105, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[106, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[107, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[108, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[109, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[110, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[111, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[112, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[113, "cudf.DataFrame.pivot"]], "pivot_table() (cudf.dataframe method)": [[114, "cudf.DataFrame.pivot_table"]], "pop() (cudf.dataframe method)": [[115, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[116, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[117, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[118, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[119, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[120, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[121, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[122, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[123, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[124, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[125, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[126, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[127, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[128, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[129, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[130, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[131, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[132, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[133, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[134, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[135, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[136, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[137, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[138, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[139, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[140, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[141, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[142, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[143, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[144, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[145, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[146, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[147, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[148, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[149, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[150, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[151, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[152, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[153, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[154, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[155, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[156, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[157, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[158, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[159, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[160, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[161, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[175, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[176, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[177, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[178, "cudf.DataFrame.truediv"]], "truncate() (cudf.dataframe method)": [[179, "cudf.DataFrame.truncate"]], "unstack() (cudf.dataframe method)": [[180, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[181, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[182, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[183, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[184, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[185, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[186, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[187, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[188, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[190, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[196, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[199, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[200, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[202, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[203, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[204, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[205, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[206, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[207, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[208, "cudf.Float64Index"]], "grouper (class in cudf)": [[209, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[209, "cudf.Grouper.__init__"]], "index (class in cudf)": [[210, "cudf.Index"]], "any() (cudf.index method)": [[211, "cudf.Index.any"]], "append() (cudf.index method)": [[212, "cudf.Index.append"]], "copy() (cudf.index method)": [[213, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[214, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[215, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[216, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[217, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[218, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[219, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[220, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[221, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[222, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[223, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[224, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[225, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[226, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[227, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[228, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[229, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[230, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[231, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[232, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[233, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[234, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[235, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[236, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[237, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[238, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[239, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[240, "cudf.Index.isin"]], "isna() (cudf.index method)": [[241, "cudf.Index.isna"]], "join() (cudf.index method)": [[242, "cudf.Index.join"]], "names (cudf.index property)": [[243, "cudf.Index.names"]], "nlevels (cudf.index property)": [[244, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[245, "cudf.Index.notna"]], "rename() (cudf.index method)": [[246, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[247, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[248, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[249, "cudf.Index.set_names"]], "size (cudf.index property)": [[250, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[251, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[252, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[253, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[254, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[255, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[256, "cudf.Index.to_series"]], "union() (cudf.index method)": [[257, "cudf.Index.union"]], "unique() (cudf.index method)": [[258, "cudf.Index.unique"]], "values (cudf.index property)": [[259, "cudf.Index.values"]], "int64index (class in cudf)": [[260, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[261, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[261, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[262, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[263, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[264, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[265, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[266, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[267, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[268, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[269, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[270, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[271, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[272, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[273, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[274, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[275, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[276, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[277, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[278, "cudf.RangeIndex"]], "series (class in cudf)": [[279, "cudf.Series"]], "t (cudf.series property)": [[280, "cudf.Series.T"]], "__array__() (cudf.series method)": [[281, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[282, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[283, "cudf.Series.abs"]], "add() (cudf.series method)": [[284, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[285, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[286, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[287, "cudf.Series.all"]], "any() (cudf.series method)": [[288, "cudf.Series.any"]], "append() (cudf.series method)": [[289, "cudf.Series.append"]], "apply() (cudf.series method)": [[290, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[291, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[292, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[293, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[294, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[295, "cudf.Series.backfill"]], "between() (cudf.series method)": [[296, "cudf.Series.between"]], "bfill() (cudf.series method)": [[297, "cudf.Series.bfill"]], "cat (cudf.series property)": [[298, "cudf.Series.cat"]], "clip() (cudf.series method)": [[299, "cudf.Series.clip"]], "copy() (cudf.series method)": [[300, "cudf.Series.copy"]], "corr() (cudf.series method)": [[301, "cudf.Series.corr"]], "count() (cudf.series method)": [[302, "cudf.Series.count"]], "cov() (cudf.series method)": [[303, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[304, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[305, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[306, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[307, "cudf.Series.cumsum"]], "data (cudf.series property)": [[308, "cudf.Series.data"]], "describe() (cudf.series method)": [[309, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[310, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[311, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[312, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[313, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[314, "cudf.Series.digitize"]], "div() (cudf.series method)": [[315, "cudf.Series.div"]], "divide() (cudf.series method)": [[316, "cudf.Series.divide"]], "dot() (cudf.series method)": [[317, "cudf.Series.dot"]], "drop() (cudf.series method)": [[318, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[319, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[320, "cudf.Series.dropna"]], "dt (cudf.series property)": [[321, "cudf.Series.dt"]], "dtype (cudf.series property)": [[322, "cudf.Series.dtype"]], "empty (cudf.series property)": [[323, "cudf.Series.empty"]], "eq() (cudf.series method)": [[324, "cudf.Series.eq"]], "equals() (cudf.series method)": [[325, "cudf.Series.equals"]], "explode() (cudf.series method)": [[326, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[327, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[328, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[329, "cudf.Series.fillna"]], "first() (cudf.series method)": [[330, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[331, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[332, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[333, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[334, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[335, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[336, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[337, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[338, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[339, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[340, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[341, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[342, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[343, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[344, "cudf.Series.iloc"]], "index (cudf.series property)": [[345, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[346, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[347, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[348, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[349, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[350, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[351, "cudf.Series.isin"]], "isna() (cudf.series method)": [[352, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[353, "cudf.Series.isnull"]], "items() (cudf.series method)": [[354, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[355, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[356, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[357, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[358, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[359, "cudf.Series.last"]], "le() (cudf.series method)": [[360, "cudf.Series.le"]], "list (cudf.series property)": [[361, "cudf.Series.list"]], "loc (cudf.series property)": [[362, "cudf.Series.loc"]], "lt() (cudf.series method)": [[363, "cudf.Series.lt"]], "map() (cudf.series method)": [[364, "cudf.Series.map"]], "mask() (cudf.series method)": [[365, "cudf.Series.mask"]], "max() (cudf.series method)": [[366, "cudf.Series.max"]], "mean() (cudf.series method)": [[367, "cudf.Series.mean"]], "median() (cudf.series method)": [[368, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[369, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[370, "cudf.Series.min"]], "mod() (cudf.series method)": [[371, "cudf.Series.mod"]], "mode() (cudf.series method)": [[372, "cudf.Series.mode"]], "mul() (cudf.series method)": [[373, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[374, "cudf.Series.multiply"]], "name (cudf.series property)": [[375, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[376, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[377, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[378, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[379, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[380, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[381, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[382, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[383, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[384, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[385, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[386, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[387, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[388, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[389, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[390, "cudf.Series.pow"]], "prod() (cudf.series method)": [[391, "cudf.Series.prod"]], "product() (cudf.series method)": [[392, "cudf.Series.product"]], "quantile() (cudf.series method)": [[393, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[394, "cudf.Series.radd"]], "rank() (cudf.series method)": [[395, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[396, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[397, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[398, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[399, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[400, "cudf.Series.replace"]], "resample() (cudf.series method)": [[401, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[402, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[403, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[404, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[405, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[406, "cudf.Series.rolling"]], "round() (cudf.series method)": [[407, "cudf.Series.round"]], "rpow() (cudf.series method)": [[408, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[409, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[410, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[411, "cudf.Series.sample"]], "scale() (cudf.series method)": [[412, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[413, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[414, "cudf.Series.serialize"]], "shape (cudf.series property)": [[415, "cudf.Series.shape"]], "shift() (cudf.series method)": [[416, "cudf.Series.shift"]], "size (cudf.series property)": [[417, "cudf.Series.size"]], "skew() (cudf.series method)": [[418, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[419, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[420, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[421, "cudf.Series.std"]], "str (cudf.series property)": [[422, "cudf.Series.str"]], "struct (cudf.series property)": [[423, "cudf.Series.struct"]], "sub() (cudf.series method)": [[424, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[425, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[426, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[427, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[428, "cudf.Series.tail"]], "take() (cudf.series method)": [[429, "cudf.Series.take"]], "tile() (cudf.series method)": [[430, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[431, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[432, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[433, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[434, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[435, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[436, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[437, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[438, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[439, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[440, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[441, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[442, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[443, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[444, "cudf.Series.truediv"]], "truncate() (cudf.series method)": [[445, "cudf.Series.truncate"]], "unique() (cudf.series method)": [[446, "cudf.Series.unique"]], "update() (cudf.series method)": [[447, "cudf.Series.update"]], "valid_count (cudf.series property)": [[448, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[449, "cudf.Series.value_counts"]], "values (cudf.series property)": [[450, "cudf.Series.values"]], "values_host (cudf.series property)": [[451, "cudf.Series.values_host"]], "var() (cudf.series method)": [[452, "cudf.Series.var"]], "where() (cudf.series method)": [[453, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[454, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[455, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[456, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[457, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[458, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[459, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[460, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[461, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[462, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[463, "cudf.UInt64Index"]], "concat() (in module cudf)": [[464, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[465, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[466, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[467, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[468, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[469, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[470, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[471, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[472, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[473, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[475, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[476, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[477, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[478, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[479, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[480, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[481, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[482, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[483, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[565, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[566, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[567, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[568, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[569, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[570, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[571, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[572, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[588, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[589, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[590, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[591, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[613, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[614, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[615, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[616, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[617, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[618, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[619, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[620, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[621, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[623, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[624, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[626, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[627, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[629, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[630, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[632, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[633, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[635, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[636, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[638, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[639, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[640, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[641, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[642, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[643, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[644, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[645, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[646, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[647, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[648, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[649, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[650, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[651, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[652, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[653, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[654, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[655, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[656, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[657, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[658, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[659, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[660, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[661, "cudf.core.window.rolling.Rolling.var"]], "crosstab() (in module cudf)": [[662, "cudf.crosstab"]], "cut() (in module cudf)": [[663, "cudf.cut"]], "describe_option() (in module cudf)": [[664, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[665, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[666, "cudf.get_dummies"]], "get_option() (in module cudf)": [[667, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[668, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[669, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[670, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[671, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[672, "cudf.melt"]], "pivot() (in module cudf)": [[673, "cudf.pivot"]], "pivot_table() (in module cudf)": [[674, "cudf.pivot_table"]], "read_avro() (in module cudf)": [[675, "cudf.read_avro"]], "read_csv() (in module cudf)": [[676, "cudf.read_csv"]], "read_feather() (in module cudf)": [[677, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[678, "cudf.read_hdf"]], "read_json() (in module cudf)": [[679, "cudf.read_json"]], "read_orc() (in module cudf)": [[680, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[681, "cudf.read_parquet"]], "read_text() (in module cudf)": [[682, "cudf.read_text"]], "set_option() (in module cudf)": [[683, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[684, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[685, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[686, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[687, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[688, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[689, "cudf.to_numeric"]], "unstack() (in module cudf)": [[690, "cudf.unstack"]], "categoricaldtype (class in cudf)": [[715, "cudf.CategoricalDtype"]], "categories (cudf.categoricaldtype property)": [[715, "cudf.CategoricalDtype.categories"], [716, "cudf.CategoricalDtype.categories"]], "from_pandas() (cudf.categoricaldtype class method)": [[715, "cudf.CategoricalDtype.from_pandas"], [717, "cudf.CategoricalDtype.from_pandas"]], "ordered (cudf.categoricaldtype property)": [[715, "cudf.CategoricalDtype.ordered"], [718, "cudf.CategoricalDtype.ordered"]], "to_pandas() (cudf.categoricaldtype method)": [[715, "cudf.CategoricalDtype.to_pandas"], [719, "cudf.CategoricalDtype.to_pandas"]], "decimal128dtype (class in cudf)": [[720, "cudf.Decimal128Dtype"]], "from_arrow() (cudf.decimal128dtype class method)": [[720, "cudf.Decimal128Dtype.from_arrow"], [721, "cudf.Decimal128Dtype.from_arrow"]], "itemsize (cudf.decimal128dtype property)": [[720, "cudf.Decimal128Dtype.itemsize"], [722, "cudf.Decimal128Dtype.itemsize"]], "precision (cudf.decimal128dtype property)": [[720, "cudf.Decimal128Dtype.precision"], [723, "cudf.Decimal128Dtype.precision"]], "scale (cudf.decimal128dtype property)": [[720, "cudf.Decimal128Dtype.scale"], [724, "cudf.Decimal128Dtype.scale"]], "to_arrow() (cudf.decimal128dtype method)": [[720, "cudf.Decimal128Dtype.to_arrow"], [725, "cudf.Decimal128Dtype.to_arrow"]], "decimal32dtype (class in cudf)": [[726, "cudf.Decimal32Dtype"]], "from_arrow() (cudf.decimal32dtype class method)": [[726, "cudf.Decimal32Dtype.from_arrow"], [727, "cudf.Decimal32Dtype.from_arrow"]], "itemsize (cudf.decimal32dtype property)": [[726, "cudf.Decimal32Dtype.itemsize"], [728, "cudf.Decimal32Dtype.itemsize"]], "precision (cudf.decimal32dtype property)": [[726, "cudf.Decimal32Dtype.precision"], [729, "cudf.Decimal32Dtype.precision"]], "scale (cudf.decimal32dtype property)": [[726, "cudf.Decimal32Dtype.scale"], [730, "cudf.Decimal32Dtype.scale"]], "to_arrow() (cudf.decimal32dtype method)": [[726, "cudf.Decimal32Dtype.to_arrow"], [731, "cudf.Decimal32Dtype.to_arrow"]], "decimal64dtype (class in cudf)": [[732, "cudf.Decimal64Dtype"]], "from_arrow() (cudf.decimal64dtype class method)": [[732, "cudf.Decimal64Dtype.from_arrow"], [733, "cudf.Decimal64Dtype.from_arrow"]], "itemsize (cudf.decimal64dtype property)": [[732, "cudf.Decimal64Dtype.itemsize"], [734, "cudf.Decimal64Dtype.itemsize"]], "precision (cudf.decimal64dtype property)": [[732, "cudf.Decimal64Dtype.precision"], [735, "cudf.Decimal64Dtype.precision"]], "scale (cudf.decimal64dtype property)": [[732, "cudf.Decimal64Dtype.scale"], [736, "cudf.Decimal64Dtype.scale"]], "to_arrow() (cudf.decimal64dtype method)": [[732, "cudf.Decimal64Dtype.to_arrow"], [737, "cudf.Decimal64Dtype.to_arrow"]], "listdtype (class in cudf)": [[738, "cudf.ListDtype"]], "element_type (cudf.listdtype property)": [[738, "cudf.ListDtype.element_type"], [739, "cudf.ListDtype.element_type"]], "from_arrow() (cudf.listdtype class method)": [[738, "cudf.ListDtype.from_arrow"], [740, "cudf.ListDtype.from_arrow"]], "leaf_type (cudf.listdtype property)": [[738, "cudf.ListDtype.leaf_type"], [741, "cudf.ListDtype.leaf_type"]], "to_arrow() (cudf.listdtype method)": [[738, "cudf.ListDtype.to_arrow"], [742, "cudf.ListDtype.to_arrow"]], "structdtype (class in cudf)": [[743, "cudf.StructDtype"]], "fields (cudf.structdtype property)": [[743, "cudf.StructDtype.fields"], [744, "cudf.StructDtype.fields"]], "from_arrow() (cudf.structdtype class method)": [[743, "cudf.StructDtype.from_arrow"], [745, "cudf.StructDtype.from_arrow"]], "to_arrow() (cudf.structdtype method)": [[743, "cudf.StructDtype.to_arrow"], [746, "cudf.StructDtype.to_arrow"]]}})