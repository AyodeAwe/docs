Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 128, 170, 184, 203, 204, 205, 209, 250, 255, 256, 260, 273, 274, 305, 435, 448, 457, 643, 658, 673, 674, 675, 676, 684, 694, 696, 698, 704], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 135, 136, 137, 142, 146, 152, 153, 154, 155, 156, 160, 164, 166, 167, 176, 178, 181, 183, 184, 185, 190, 197, 203, 205, 211, 217, 223, 225, 226, 227, 228, 229, 233, 234, 237, 243, 248, 255, 256, 257, 263, 274, 279, 285, 287, 293, 295, 304, 307, 310, 311, 312, 313, 319, 325, 326, 328, 329, 330, 331, 332, 333, 336, 338, 341, 354, 355, 358, 360, 361, 362, 365, 366, 368, 369, 372, 373, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 398, 399, 400, 403, 404, 405, 406, 409, 412, 419, 420, 421, 422, 429, 431, 432, 439, 443, 445, 447, 448, 457, 468, 479, 483, 485, 493, 520, 526, 549, 552, 553, 555, 556, 557, 558, 559, 560, 574, 578, 579, 580, 582, 583, 591, 597, 598, 599, 600, 605, 608, 612, 614, 620, 633, 653, 655, 656, 663, 664, 665, 668, 669, 670, 674, 683, 684, 694, 695, 700, 702, 703, 704, 708, 709], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 152, 153, 154, 155, 161, 162, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 183, 184, 199, 200, 203, 204, 205, 212, 215, 217, 219, 220, 224, 236, 237, 240, 242, 244, 246, 247, 249, 251, 252, 255, 256, 257, 258, 260, 264, 265, 266, 268, 272, 273, 274, 276, 279, 282, 283, 286, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 304, 310, 311, 313, 314, 315, 318, 319, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 341, 347, 348, 352, 353, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 375, 376, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 411, 412, 413, 414, 416, 419, 420, 421, 422, 426, 427, 430, 432, 434, 435, 436, 439, 440, 443, 446, 447, 448, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 480, 481, 483, 485, 486, 490, 492, 493, 494, 495, 498, 501, 502, 511, 522, 523, 524, 527, 537, 538, 540, 541, 544, 545, 546, 548, 549, 550, 551, 556, 561, 567, 568, 574, 576, 577, 578, 579, 580, 581, 583, 587, 588, 596, 597, 598, 599, 600, 603, 605, 608, 612, 653, 654, 656, 658, 662, 663, 664, 665, 666, 668, 669, 670, 671, 677, 678, 679, 701, 702, 707, 710], "categori": [0, 2, 21, 36, 93, 94, 226, 234, 287, 293, 304, 322, 328, 459, 460, 461, 464, 465, 466, 467, 498, 531, 653, 656, 673, 676, 698, 701, 704, 705, 709, 712], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 121, 140, 142, 149, 156, 166, 171, 179, 184, 203, 237, 243, 246, 255, 286, 287, 312, 314, 322, 332, 367, 374, 377, 390, 408, 409, 415, 431, 443, 448, 457, 460, 461, 466, 467, 475, 477, 487, 555, 601, 653, 655, 658, 665, 668, 673, 674, 675, 676, 677, 694, 701, 706, 708], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 162, 168, 170, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 241, 242, 244, 246, 247, 250, 251, 252, 255, 256, 257, 260, 262, 269, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 293, 294, 295, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 346, 347, 348, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 419, 420, 421, 422, 424, 427, 430, 434, 435, 439, 440, 441, 443, 446, 447, 448, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 574, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 653, 656, 665, 668, 670, 673, 674, 675, 676, 677, 678, 679, 689, 694, 698, 701, 702, 703, 705, 706, 707, 708, 712], "copi": [0, 5, 21, 44, 45, 46, 54, 123, 124, 162, 164, 168, 174, 175, 184, 203, 205, 246, 248, 255, 256, 257, 260, 273, 287, 313, 324, 392, 393, 427, 429, 434, 448, 457, 459, 460, 461, 465, 466, 467, 526, 537, 562, 655, 670, 696, 698, 709, 712], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 117, 121, 123, 124, 126, 128, 132, 137, 140, 141, 143, 148, 149, 158, 160, 162, 166, 167, 170, 171, 178, 179, 183, 184, 203, 205, 212, 213, 217, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 240, 241, 244, 246, 252, 255, 256, 257, 258, 260, 268, 273, 274, 282, 283, 284, 287, 291, 294, 295, 304, 309, 312, 313, 314, 315, 318, 319, 320, 321, 324, 330, 331, 332, 333, 334, 341, 346, 347, 348, 355, 358, 360, 364, 367, 371, 373, 375, 376, 390, 395, 397, 401, 406, 408, 414, 415, 424, 427, 431, 432, 435, 441, 443, 447, 448, 457, 458, 459, 460, 461, 465, 466, 467, 469, 470, 475, 482, 485, 490, 491, 492, 493, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 528, 531, 537, 544, 549, 550, 560, 577, 578, 579, 580, 597, 598, 599, 600, 601, 605, 608, 612, 622, 623, 625, 626, 627, 628, 644, 653, 656, 658, 659, 665, 668, 670, 673, 674, 675, 676, 677, 694, 699, 701, 702, 703, 706, 707, 710], "name": [0, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 114, 117, 119, 120, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 146, 148, 149, 152, 153, 161, 166, 169, 171, 174, 176, 177, 178, 184, 199, 200, 203, 205, 218, 237, 241, 244, 246, 249, 251, 255, 256, 257, 260, 261, 262, 264, 265, 266, 269, 272, 273, 274, 279, 286, 287, 304, 310, 311, 313, 314, 319, 326, 331, 332, 333, 339, 346, 347, 348, 355, 357, 358, 361, 362, 365, 366, 368, 369, 373, 375, 376, 385, 388, 389, 391, 393, 397, 398, 399, 400, 402, 403, 404, 405, 406, 412, 414, 419, 420, 430, 431, 439, 448, 455, 456, 457, 458, 544, 563, 566, 585, 611, 629, 654, 656, 657, 658, 661, 662, 663, 665, 667, 668, 672, 673, 674, 675, 676, 679, 694, 696, 697, 698, 699, 701, 705, 706, 707, 708, 710], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 119, 123, 124, 125, 126, 127, 132, 133, 137, 139, 142, 161, 166, 167, 169, 181, 183, 192, 209, 210, 217, 222, 236, 240, 242, 243, 260, 262, 280, 281, 284, 304, 305, 306, 309, 313, 316, 318, 324, 325, 328, 330, 332, 335, 337, 354, 360, 379, 384, 394, 395, 396, 401, 402, 406, 409, 431, 432, 440, 445, 447, 458, 468, 478, 480, 485, 486, 490, 491, 502, 507, 523, 524, 526, 537, 547, 548, 550, 552, 553, 557, 558, 559, 566, 585, 591, 601, 604, 609, 611, 622, 644, 645, 653, 655, 658, 662, 665, 667, 678, 694, 695, 696, 698, 701, 706, 707, 708, 710], "categor": [0, 1, 2, 21, 36, 93, 94, 225, 226, 227, 228, 229, 233, 234, 287, 293, 304, 328, 653, 656, 670, 673, 674, 675, 676, 698, 705, 706, 708, 712], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 166, 167, 168, 170, 171, 173, 176, 178, 179, 181, 182, 183, 200, 205, 212, 214, 215, 217, 218, 224, 230, 231, 232, 235, 236, 240, 246, 247, 251, 253, 258, 267, 274, 278, 279, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 427, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 445, 446, 447, 456, 458, 465, 467, 468, 469, 470, 473, 475, 478, 480, 484, 485, 487, 493, 498, 499, 500, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 528, 534, 536, 537, 543, 544, 548, 549, 558, 560, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 596, 597, 598, 599, 600, 603, 604, 605, 607, 608, 610, 612, 613, 644, 645, 653, 656, 657, 662, 663, 665, 668, 670, 672, 674, 675, 676, 678, 687, 689, 690, 691, 694, 696, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 711], "repres": [0, 23, 127, 144, 151, 161, 167, 182, 184, 274, 289, 291, 396, 410, 416, 432, 446, 448, 472, 480, 498, 499, 500, 517, 619, 650, 652, 653, 656, 694, 698, 705, 710, 712], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 140, 158, 167, 178, 192, 196, 207, 236, 240, 246, 247, 268, 286, 295, 309, 315, 318, 322, 324, 334, 341, 346, 347, 348, 375, 376, 379, 384, 408, 424, 432, 458, 470, 476, 478, 485, 487, 490, 523, 524, 534, 539, 543, 550, 604, 622, 623, 624, 625, 626, 627, 628, 632, 644, 653, 656, 665, 668, 683, 695, 698, 702, 707], "anoth": [0, 40, 162, 166, 168, 178, 284, 308, 359, 427, 431, 434, 560, 698], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 146, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 193, 199, 248, 249, 264, 266, 272, 274, 279, 280, 281, 282, 283, 286, 287, 293, 299, 300, 301, 302, 304, 310, 311, 313, 315, 318, 319, 320, 324, 326, 331, 332, 333, 335, 336, 339, 352, 353, 355, 357, 358, 361, 362, 365, 366, 368, 369, 373, 381, 385, 386, 387, 388, 389, 390, 391, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 412, 414, 416, 419, 420, 421, 423, 425, 427, 429, 430, 431, 432, 434, 436, 439, 446, 455, 458, 566, 569, 575, 577, 578, 579, 580, 582, 583, 585, 589, 590, 591, 597, 598, 599, 600, 605, 607, 608, 610, 611, 612, 613, 629, 643, 644, 645, 655, 656, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 683, 684, 694, 697, 701, 702, 703, 704, 706, 707, 708, 710], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 185, 190, 197, 199, 200, 203, 205, 207, 209, 210, 212, 215, 217, 218, 220, 222, 224, 235, 237, 241, 242, 244, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 341, 346, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 377, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 413, 414, 415, 416, 419, 420, 421, 422, 424, 425, 427, 429, 430, 431, 432, 434, 435, 439, 441, 443, 446, 447, 448, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 505, 506, 522, 524, 525, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 560, 561, 563, 566, 567, 568, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 620, 633, 635, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 694, 695, 696, 709, 710], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 75, 76, 88, 94, 104, 105, 117, 118, 119, 121, 123, 125, 126, 137, 140, 158, 162, 167, 168, 183, 184, 203, 205, 212, 224, 235, 236, 240, 242, 246, 247, 252, 255, 256, 257, 258, 260, 265, 268, 274, 284, 286, 294, 303, 309, 322, 327, 328, 329, 332, 347, 348, 360, 375, 376, 388, 390, 394, 395, 406, 408, 424, 426, 427, 432, 434, 447, 448, 457, 484, 488, 522, 538, 582, 645, 653, 656, 668, 677, 698, 701, 702, 708], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 61, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 114, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 152, 153, 158, 166, 167, 176, 177, 179, 183, 184, 185, 190, 197, 203, 205, 212, 215, 224, 235, 247, 252, 255, 256, 257, 262, 264, 266, 274, 279, 284, 291, 294, 304, 310, 311, 312, 313, 316, 319, 321, 324, 326, 328, 329, 331, 332, 333, 346, 355, 358, 360, 366, 368, 369, 373, 385, 388, 389, 390, 391, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 419, 420, 424, 431, 432, 439, 447, 448, 457, 458, 459, 465, 466, 467, 476, 485, 488, 490, 505, 506, 510, 522, 531, 537, 538, 544, 550, 574, 582, 614, 620, 633, 645, 653, 656, 664, 665, 668, 669, 670, 671, 673, 674, 676, 677, 679, 684, 685, 687, 689, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 710, 712], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 171, 173, 176, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 203, 205, 207, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 241, 244, 246, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 273, 274, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 435, 436, 439, 440, 441, 443, 446, 447, 448, 452, 453, 454, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 575, 577, 583, 585, 586, 589, 591, 601, 604, 607, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 650, 652, 653, 656, 658, 661, 662, 663, 664, 665, 666, 668, 669, 670, 674, 675, 676, 677, 678, 679, 701, 702, 703, 705, 706, 707, 710, 712], "dimension": [0, 144, 184, 203, 205, 255, 256, 257, 260, 274, 410, 448, 457, 544, 549, 653], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 107, 109, 110, 115, 116, 123, 125, 126, 127, 132, 141, 142, 148, 150, 151, 154, 156, 159, 162, 167, 168, 171, 179, 180, 182, 186, 187, 188, 189, 191, 194, 195, 198, 200, 201, 202, 203, 205, 209, 210, 211, 222, 223, 227, 235, 242, 243, 244, 246, 247, 251, 255, 258, 259, 260, 264, 268, 274, 280, 281, 285, 286, 288, 303, 304, 305, 306, 307, 312, 314, 317, 320, 325, 328, 329, 336, 337, 338, 346, 354, 364, 374, 377, 380, 383, 386, 387, 394, 395, 396, 397, 401, 409, 414, 416, 421, 425, 427, 432, 434, 443, 444, 446, 456, 457, 458, 459, 462, 465, 466, 467, 477, 480, 482, 483, 485, 487, 488, 489, 491, 493, 494, 496, 498, 505, 506, 509, 510, 517, 520, 522, 528, 529, 530, 531, 534, 535, 537, 538, 543, 544, 547, 549, 554, 555, 560, 561, 578, 579, 580, 582, 583, 586, 591, 597, 598, 599, 600, 605, 607, 608, 610, 612, 614, 615, 616, 617, 618, 620, 621, 630, 631, 633, 634, 635, 636, 637, 644, 645, 650, 652, 653, 654, 657, 662, 665, 667, 668, 669, 670, 671, 672, 677, 678, 683, 695, 696, 697, 699, 701, 702, 703, 704, 705, 707, 709, 710, 712], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 170, 171, 176, 177, 178, 182, 184, 200, 205, 217, 237, 244, 251, 256, 257, 258, 264, 265, 268, 274, 279, 282, 283, 284, 286, 294, 299, 300, 301, 302, 304, 310, 311, 312, 313, 314, 315, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 346, 354, 355, 358, 359, 361, 362, 365, 366, 368, 369, 373, 384, 385, 386, 387, 388, 389, 391, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 414, 415, 416, 419, 420, 421, 431, 432, 435, 439, 441, 443, 446, 448, 456, 466, 467, 469, 471, 472, 475, 480, 485, 490, 491, 493, 496, 498, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 521, 522, 527, 531, 534, 537, 543, 544, 545, 549, 550, 551, 569, 577, 578, 579, 580, 590, 597, 598, 599, 600, 601, 605, 608, 612, 643, 644, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 668, 669, 670, 672, 674, 675, 677, 678, 679, 694, 695, 696, 701, 702, 703, 704, 707, 709, 712], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 115, 116, 117, 119, 121, 123, 126, 127, 132, 133, 137, 140, 141, 142, 147, 151, 154, 161, 166, 167, 171, 178, 179, 182, 183, 192, 196, 212, 213, 218, 224, 230, 231, 232, 235, 236, 240, 243, 252, 256, 257, 258, 260, 264, 274, 278, 280, 281, 282, 283, 285, 286, 291, 295, 304, 313, 315, 318, 320, 324, 328, 329, 332, 342, 343, 344, 345, 346, 347, 348, 352, 353, 359, 360, 361, 363, 365, 374, 375, 376, 377, 384, 386, 387, 388, 390, 395, 396, 401, 402, 406, 408, 409, 413, 416, 421, 431, 432, 441, 446, 447, 458, 466, 467, 469, 472, 480, 485, 488, 489, 490, 491, 493, 494, 496, 498, 502, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 522, 527, 528, 531, 537, 538, 544, 545, 547, 549, 550, 551, 556, 558, 559, 560, 561, 562, 578, 579, 580, 591, 597, 598, 599, 600, 601, 605, 608, 612, 622, 623, 624, 625, 626, 627, 628, 632, 635, 644, 645, 653, 656, 658, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 683, 685, 686, 689, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712], "given": [0, 21, 44, 103, 112, 117, 118, 125, 126, 127, 128, 133, 137, 140, 171, 220, 242, 264, 287, 313, 329, 388, 394, 395, 396, 397, 402, 406, 408, 466, 467, 471, 476, 480, 485, 490, 493, 498, 519, 524, 534, 537, 544, 549, 550, 556, 560, 601, 658, 663, 665, 669, 670, 677, 694, 695, 698, 709], "replac": [0, 46, 88, 137, 148, 183, 315, 360, 406, 414, 447, 493, 494, 502, 522, 538, 546, 548, 684, 694, 695, 696, 701, 703, 708, 712], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 120, 121, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 148, 152, 153, 166, 167, 170, 176, 205, 217, 227, 233, 236, 240, 246, 274, 279, 286, 304, 310, 311, 319, 320, 326, 330, 331, 333, 341, 347, 348, 355, 358, 359, 366, 367, 368, 369, 371, 373, 375, 376, 381, 385, 389, 390, 391, 392, 398, 399, 400, 401, 403, 404, 405, 414, 419, 420, 431, 432, 435, 439, 441, 443, 469, 475, 477, 485, 537, 574, 646, 656, 665, 702, 707, 708, 712], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 114, 117, 120, 122, 124, 126, 128, 129, 130, 131, 134, 135, 136, 139, 141, 142, 143, 148, 149, 152, 153, 161, 166, 167, 169, 171, 176, 177, 179, 183, 207, 209, 210, 211, 215, 222, 223, 235, 243, 244, 258, 262, 264, 265, 266, 269, 279, 284, 285, 286, 289, 291, 293, 304, 305, 306, 307, 310, 311, 312, 313, 319, 321, 326, 331, 332, 333, 337, 338, 339, 346, 355, 358, 360, 366, 368, 369, 373, 385, 388, 389, 391, 395, 397, 398, 399, 400, 403, 404, 405, 409, 414, 415, 419, 420, 431, 432, 439, 447, 458, 459, 465, 467, 480, 482, 485, 489, 490, 496, 505, 506, 522, 537, 544, 549, 550, 554, 555, 566, 574, 583, 585, 601, 611, 613, 645, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 677, 679, 684, 696, 698, 700, 701, 703, 704, 706, 707, 708, 709, 710, 712], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 121, 123, 124, 127, 132, 133, 137, 140, 148, 161, 162, 166, 167, 168, 169, 171, 173, 174, 179, 184, 200, 244, 246, 251, 256, 257, 258, 260, 264, 265, 266, 273, 274, 296, 304, 313, 315, 328, 329, 332, 383, 384, 388, 390, 393, 396, 397, 401, 402, 406, 408, 414, 427, 431, 432, 434, 436, 443, 448, 456, 458, 459, 460, 461, 465, 466, 467, 469, 471, 492, 493, 494, 546, 548, 574, 583, 589, 591, 604, 644, 653, 654, 656, 657, 659, 662, 663, 665, 667, 669, 670, 672, 684, 694, 697, 700, 707, 708, 709], "item": [0, 36, 48, 106, 113, 137, 143, 274, 304, 318, 322, 406, 466, 467, 665, 667], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 160, 176, 274, 279, 296, 310, 311, 318, 319, 320, 326, 331, 333, 355, 358, 366, 368, 369, 373, 379, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 466, 486, 645, 653, 694, 695, 696, 698, 701, 703, 705, 707, 712], "uniqu": [0, 36, 112, 124, 139, 179, 258, 260, 265, 268, 274, 304, 322, 345, 381, 443, 601, 653, 656, 663, 668, 684, 701, 702, 706, 712], "here": [0, 36, 304, 535, 664, 665, 669, 670, 694, 696, 698, 703, 707, 709], "also": [0, 15, 36, 54, 94, 123, 124, 126, 128, 132, 133, 246, 304, 324, 359, 393, 395, 397, 401, 402, 441, 485, 486, 488, 495, 497, 501, 502, 505, 506, 510, 517, 531, 534, 541, 543, 653, 658, 668, 669, 670, 694, 695, 696, 697, 698, 700, 701, 703, 705, 706, 707, 709, 710, 712], "thei": [0, 15, 50, 94, 97, 121, 126, 171, 274, 285, 320, 328, 329, 377, 390, 395, 480, 487, 498, 555, 560, 601, 658, 671, 694, 695, 696, 698, 700, 705, 706, 707, 712], "infer": [0, 4, 167, 184, 256, 257, 265, 274, 432, 451, 665, 668, 677, 701], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 113, 117, 123, 124, 127, 128, 137, 143, 148, 149, 150, 164, 166, 167, 171, 175, 178, 179, 183, 187, 189, 196, 209, 210, 212, 214, 217, 218, 248, 256, 257, 258, 262, 263, 264, 265, 266, 268, 274, 284, 285, 304, 305, 306, 313, 315, 327, 328, 330, 332, 359, 360, 383, 392, 393, 396, 397, 406, 414, 415, 417, 429, 431, 432, 441, 447, 458, 471, 473, 475, 476, 480, 482, 491, 492, 493, 494, 497, 498, 527, 529, 530, 531, 532, 533, 537, 544, 545, 546, 548, 549, 551, 574, 578, 579, 580, 586, 591, 597, 598, 599, 600, 601, 602, 605, 608, 612, 616, 618, 632, 643, 644, 645, 653, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 707, 712], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 115, 116, 117, 121, 126, 128, 132, 137, 139, 140, 141, 147, 148, 149, 150, 151, 154, 160, 161, 162, 166, 167, 168, 171, 172, 179, 182, 183, 184, 203, 205, 208, 213, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 244, 246, 252, 255, 256, 257, 260, 273, 274, 282, 283, 284, 285, 286, 287, 291, 294, 295, 299, 300, 301, 302, 304, 309, 312, 313, 314, 315, 318, 319, 320, 321, 330, 331, 332, 333, 334, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 358, 360, 361, 362, 363, 364, 365, 367, 373, 375, 376, 381, 386, 387, 390, 395, 397, 401, 406, 408, 413, 414, 415, 416, 421, 427, 431, 432, 434, 443, 446, 447, 448, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 475, 482, 485, 490, 491, 492, 493, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 528, 531, 534, 537, 543, 544, 549, 550, 569, 577, 578, 579, 580, 590, 597, 598, 599, 600, 601, 605, 608, 612, 622, 623, 625, 626, 627, 628, 643, 644, 653, 658, 665, 667, 668, 669, 673, 674, 675, 676, 677, 707, 709, 710], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 117, 121, 143, 150, 160, 162, 167, 168, 170, 172, 183, 206, 212, 214, 224, 225, 227, 228, 229, 233, 234, 235, 252, 256, 257, 282, 283, 291, 304, 309, 313, 318, 320, 334, 346, 347, 348, 360, 375, 376, 379, 388, 390, 427, 432, 434, 435, 447, 459, 460, 461, 464, 465, 466, 467, 470, 485, 490, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 550, 644, 653, 665, 670, 673, 674, 675, 676, 683, 696, 703], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 152, 153, 154, 156, 164, 168, 169, 171, 173, 176, 182, 184, 199, 205, 209, 210, 212, 215, 218, 224, 230, 242, 243, 246, 248, 249, 268, 271, 272, 273, 274, 278, 279, 284, 285, 288, 291, 294, 295, 304, 305, 306, 309, 310, 311, 312, 319, 320, 325, 326, 328, 329, 331, 332, 333, 335, 336, 341, 342, 354, 355, 358, 366, 368, 369, 370, 373, 374, 377, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 414, 415, 416, 417, 419, 420, 421, 429, 434, 436, 439, 440, 446, 448, 451, 455, 459, 460, 461, 462, 465, 466, 467, 471, 479, 480, 484, 486, 488, 489, 492, 493, 494, 496, 501, 503, 504, 507, 508, 509, 510, 512, 514, 516, 517, 518, 521, 522, 526, 527, 529, 530, 531, 534, 538, 539, 541, 543, 544, 545, 549, 551, 552, 553, 556, 557, 560, 562, 577, 583, 591, 601, 604, 643, 644, 653, 655, 656, 658, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 684, 686, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 184, 192, 203, 205, 206, 210, 212, 215, 217, 218, 225, 226, 227, 228, 229, 230, 233, 234, 235, 242, 243, 244, 246, 248, 255, 258, 264, 266, 268, 273, 274, 275, 279, 282, 283, 284, 285, 286, 287, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 325, 326, 329, 330, 331, 332, 333, 336, 341, 342, 346, 347, 348, 354, 355, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 373, 375, 376, 377, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 412, 414, 415, 416, 419, 420, 421, 423, 427, 429, 431, 432, 434, 435, 436, 438, 439, 441, 443, 446, 447, 448, 451, 457, 458, 466, 467, 469, 470, 471, 472, 477, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 575, 583, 586, 589, 591, 601, 604, 607, 609, 610, 614, 620, 622, 623, 625, 626, 627, 628, 633, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 661, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712], "treat": [0, 12, 13, 73, 94, 183, 282, 283, 291, 341, 447, 466, 467, 485, 529, 537, 544, 549, 702, 707, 709, 710], "an": [0, 3, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 115, 116, 117, 119, 123, 124, 125, 132, 133, 137, 142, 146, 148, 151, 154, 164, 166, 182, 192, 200, 209, 218, 230, 242, 243, 246, 248, 251, 252, 257, 265, 267, 268, 282, 283, 285, 294, 299, 300, 301, 302, 304, 305, 332, 339, 341, 342, 346, 347, 348, 364, 375, 376, 386, 387, 388, 392, 394, 401, 402, 406, 409, 412, 414, 416, 421, 429, 431, 446, 456, 464, 470, 471, 481, 483, 484, 485, 487, 490, 498, 503, 504, 507, 511, 515, 522, 525, 529, 530, 533, 542, 550, 561, 591, 609, 622, 644, 645, 653, 654, 655, 664, 666, 667, 668, 669, 677, 678, 683, 685, 694, 695, 696, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 114, 115, 116, 117, 120, 122, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 143, 147, 150, 151, 152, 153, 154, 155, 161, 167, 170, 174, 176, 177, 179, 182, 200, 212, 224, 237, 251, 252, 258, 268, 274, 279, 282, 283, 285, 288, 296, 299, 300, 301, 302, 304, 310, 311, 312, 319, 321, 324, 326, 331, 332, 333, 341, 346, 352, 353, 355, 358, 361, 362, 363, 365, 366, 368, 369, 373, 385, 386, 387, 389, 391, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 408, 413, 416, 419, 420, 421, 422, 432, 435, 439, 443, 446, 456, 458, 467, 469, 475, 480, 481, 493, 522, 525, 533, 542, 561, 566, 574, 577, 578, 579, 580, 585, 586, 589, 591, 597, 598, 599, 600, 604, 605, 608, 609, 611, 612, 653, 662, 663, 668, 671, 678, 679, 694, 695, 696, 698, 701, 702, 704, 705, 706, 707, 708, 710], "unord": [0, 94, 461, 653], "categoricaldtyp": [0, 21, 287, 698, 705], "cannot": [0, 54, 71, 137, 167, 215, 224, 324, 374, 377, 406, 432, 531, 577, 658, 694, 695, 705, 706], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 106, 107, 110, 111, 112, 117, 118, 119, 123, 124, 126, 127, 128, 132, 133, 137, 139, 143, 148, 151, 161, 162, 166, 167, 168, 169, 170, 171, 173, 178, 179, 182, 199, 200, 203, 215, 218, 249, 251, 255, 258, 264, 272, 273, 274, 284, 285, 287, 296, 304, 313, 315, 324, 328, 332, 335, 336, 339, 341, 346, 352, 353, 357, 359, 361, 362, 364, 365, 383, 384, 388, 392, 395, 396, 397, 401, 402, 406, 414, 416, 427, 430, 431, 432, 434, 435, 436, 441, 446, 455, 456, 457, 467, 469, 480, 484, 485, 486, 488, 490, 492, 493, 494, 495, 501, 509, 519, 522, 524, 529, 530, 531, 537, 538, 539, 540, 541, 544, 547, 549, 554, 555, 559, 560, 566, 577, 578, 579, 580, 582, 583, 585, 591, 597, 598, 599, 600, 605, 607, 608, 610, 611, 612, 635, 643, 644, 650, 652, 653, 656, 658, 662, 663, 664, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 685, 686, 687, 689, 690, 691, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712], "togeth": [0, 111, 207, 384, 696, 697, 703, 706, 707], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 160, 161, 162, 166, 167, 168, 169, 170, 171, 175, 176, 178, 179, 182, 183, 184, 199, 200, 205, 212, 213, 214, 215, 217, 224, 237, 241, 244, 246, 249, 251, 252, 256, 257, 258, 260, 272, 273, 274, 279, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 295, 296, 299, 300, 301, 302, 304, 308, 310, 311, 312, 313, 314, 315, 319, 321, 324, 326, 330, 331, 332, 333, 335, 336, 341, 352, 353, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 373, 374, 377, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 413, 414, 415, 416, 419, 420, 421, 427, 430, 431, 432, 434, 435, 439, 443, 446, 447, 448, 455, 456, 458, 459, 460, 461, 465, 466, 467, 469, 471, 475, 480, 481, 482, 485, 486, 487, 491, 493, 494, 496, 498, 502, 522, 525, 527, 528, 529, 530, 531, 533, 534, 537, 538, 542, 543, 544, 545, 547, 548, 549, 551, 554, 555, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 591, 596, 597, 598, 599, 600, 601, 603, 605, 608, 612, 643, 644, 650, 652, 653, 656, 658, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 694, 695, 701, 706, 707, 709, 710, 711, 712], "make": [0, 28, 48, 161, 184, 203, 205, 255, 264, 265, 266, 295, 318, 441, 448, 457, 493, 537, 544, 549, 556, 665, 669, 694, 695, 696, 698, 701, 703, 707], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 114, 119, 120, 122, 129, 130, 131, 133, 134, 135, 136, 148, 152, 153, 159, 166, 176, 179, 184, 203, 205, 217, 255, 256, 257, 263, 279, 285, 286, 294, 304, 310, 311, 319, 322, 326, 327, 330, 331, 332, 333, 355, 358, 359, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 402, 403, 404, 405, 414, 419, 420, 425, 431, 439, 448, 457, 498, 522, 536, 609, 643, 644, 645, 653, 655, 658, 665, 668, 670, 671, 677, 678, 684, 694, 695, 698, 700, 703, 706, 707, 708], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 142, 143, 148, 152, 153, 158, 161, 164, 166, 167, 169, 170, 173, 176, 178, 184, 203, 205, 207, 209, 210, 211, 212, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 240, 242, 243, 244, 247, 248, 252, 255, 256, 257, 258, 260, 262, 268, 269, 273, 274, 279, 284, 285, 287, 290, 292, 293, 295, 304, 305, 306, 307, 310, 311, 312, 314, 315, 316, 319, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 345, 347, 348, 351, 355, 358, 359, 364, 366, 368, 369, 370, 373, 375, 376, 382, 384, 385, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 414, 419, 420, 424, 426, 429, 430, 431, 432, 436, 439, 440, 441, 443, 448, 457, 458, 479, 480, 481, 482, 483, 485, 487, 490, 491, 492, 493, 494, 497, 498, 501, 502, 520, 522, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 577, 583, 601, 604, 629, 635, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 661, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 683, 684, 693, 694, 698, 699, 700, 703, 704, 707, 708], "store": [0, 166, 169, 171, 184, 203, 205, 255, 256, 257, 273, 274, 328, 431, 448, 457, 498, 653, 664, 665, 667, 669, 670, 694, 695, 696, 698, 699, 701, 705, 707, 712], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 164, 166, 167, 169, 171, 172, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 255, 256, 257, 258, 260, 262, 265, 266, 267, 268, 270, 272, 273, 274, 279, 284, 285, 286, 289, 294, 295, 299, 300, 301, 302, 304, 310, 311, 313, 315, 316, 318, 319, 321, 322, 324, 325, 326, 327, 329, 331, 332, 333, 339, 341, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 364, 365, 366, 368, 369, 373, 375, 376, 377, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 414, 415, 416, 417, 419, 420, 421, 425, 426, 429, 430, 431, 432, 435, 439, 441, 446, 448, 455, 456, 457, 458, 463, 466, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 575, 577, 586, 614, 620, 633, 644, 653, 658, 662, 663, 665, 668, 669, 670, 674, 675, 676, 679, 684, 694, 696, 700, 702, 704, 707, 708, 710, 712], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 199, 200, 203, 205, 206, 207, 209, 210, 211, 212, 215, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 434, 435, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 570, 574, 575, 577, 578, 579, 580, 583, 584, 585, 586, 589, 591, 592, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 611, 612, 614, 619, 620, 622, 623, 625, 626, 627, 628, 629, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 677, 678, 679, 683, 689, 693, 696, 698, 699, 701, 702, 703, 706, 707], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 241, 242, 244, 246, 247, 250, 252, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 273, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 430, 435, 436, 439, 440, 441, 443, 446, 447, 448, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 577, 585, 586, 589, 591, 601, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 653, 656, 658, 661, 662, 663, 664, 665, 666, 668, 669, 670, 674, 675, 676, 677, 678, 679, 694, 695, 696, 698, 701, 702, 703, 705, 706, 707, 710, 712], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 115, 116, 117, 119, 124, 125, 126, 132, 137, 138, 141, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 170, 173, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 237, 241, 244, 246, 250, 252, 257, 260, 261, 262, 263, 264, 268, 269, 273, 282, 283, 284, 286, 287, 288, 289, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 312, 313, 315, 318, 320, 321, 322, 324, 327, 328, 329, 330, 332, 334, 335, 339, 346, 347, 348, 351, 352, 353, 357, 360, 361, 362, 363, 365, 367, 371, 374, 375, 376, 377, 386, 387, 388, 392, 393, 394, 395, 401, 406, 407, 412, 413, 414, 415, 416, 421, 422, 423, 425, 426, 430, 435, 436, 440, 441, 443, 446, 447, 448, 458, 459, 460, 461, 465, 466, 467, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 574, 585, 586, 589, 591, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 656, 661, 662, 664, 665, 666, 668, 669, 670, 674, 675, 676, 677, 678, 694, 695, 696, 701, 702, 703, 705, 706, 707, 710, 712], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 119, 124, 126, 132, 137, 148, 149, 161, 166, 170, 173, 175, 177, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 250, 252, 257, 285, 304, 328, 330, 332, 347, 348, 364, 375, 376, 393, 395, 401, 406, 414, 415, 417, 431, 435, 436, 475, 560, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 630, 631, 634, 635, 636, 637, 656, 662, 664, 667, 668, 670, 673, 674, 676, 678, 679, 686, 689, 697, 698, 700, 703, 704, 705, 706, 707, 708, 710, 711], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 252, 257, 268, 328, 330, 332, 347, 348, 375, 376, 401, 435, 517, 577, 586, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 664, 701, 702, 705, 707, 710, 712], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 124, 125, 126, 127, 128, 132, 133, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 170, 173, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 198, 201, 205, 207, 212, 215, 224, 225, 226, 227, 228, 233, 234, 235, 237, 241, 244, 246, 247, 252, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 308, 309, 312, 313, 314, 315, 318, 320, 321, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 339, 346, 347, 348, 351, 352, 353, 354, 357, 359, 360, 361, 362, 363, 365, 367, 371, 375, 376, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 401, 402, 404, 406, 407, 408, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 431, 435, 436, 440, 441, 443, 446, 447, 448, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 566, 574, 577, 585, 586, 589, 591, 601, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 653, 656, 658, 661, 662, 663, 664, 665, 666, 668, 669, 670, 674, 675, 676, 677, 678, 679, 698, 701, 702, 703, 704, 705, 706, 707, 710, 712], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 205, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 241, 244, 246, 247, 250, 252, 257, 258, 261, 262, 263, 264, 268, 269, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 339, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 385, 386, 387, 388, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 435, 436, 439, 440, 441, 443, 446, 447, 448, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 490, 492, 494, 495, 499, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 534, 536, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 561, 562, 563, 566, 574, 585, 586, 589, 591, 601, 604, 609, 611, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 653, 656, 658, 662, 663, 665, 668, 674, 675, 676, 677, 679, 701, 702, 703, 705, 706, 707, 710, 712], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 176, 179, 182, 183, 184, 187, 188, 189, 196, 201, 212, 215, 224, 227, 228, 233, 234, 235, 237, 244, 246, 247, 252, 263, 268, 278, 279, 280, 281, 282, 283, 284, 285, 289, 291, 294, 295, 297, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 319, 321, 324, 325, 326, 329, 331, 332, 333, 334, 336, 339, 346, 347, 348, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 375, 376, 385, 386, 387, 388, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 439, 440, 441, 443, 446, 447, 448, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 486, 488, 493, 511, 512, 513, 514, 524, 548, 549, 555, 558, 559, 562, 563, 566, 577, 585, 586, 589, 591, 601, 604, 609, 611, 616, 617, 618, 619, 622, 623, 625, 626, 629, 632, 636, 638, 639, 640, 641, 642, 645, 653, 656, 658, 662, 663, 668, 675, 676, 677, 701, 702, 703, 705, 706, 707, 709, 710], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 114, 115, 116, 120, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 151, 152, 153, 154, 170, 176, 177, 178, 179, 182, 183, 215, 217, 236, 240, 279, 282, 283, 285, 291, 293, 297, 299, 300, 301, 302, 304, 308, 310, 311, 315, 318, 319, 321, 324, 326, 327, 329, 330, 331, 333, 334, 347, 348, 352, 353, 355, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 375, 376, 383, 385, 386, 387, 389, 391, 392, 395, 396, 398, 399, 400, 403, 404, 405, 412, 413, 416, 419, 420, 421, 430, 435, 439, 440, 441, 443, 446, 447, 458, 465, 467, 471, 472, 473, 474, 480, 481, 485, 486, 490, 491, 522, 523, 527, 528, 537, 544, 545, 549, 550, 551, 561, 567, 568, 574, 576, 577, 578, 579, 580, 581, 587, 588, 589, 591, 596, 597, 598, 599, 600, 603, 605, 608, 612, 629, 656, 663, 665, 678, 679, 701, 702, 706, 707, 708, 712], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 144, 146, 180, 181, 186, 187, 188, 189, 191, 192, 194, 195, 196, 198, 201, 202, 221, 230, 231, 232, 238, 239, 245, 254, 259, 261, 269, 270, 271, 275, 289, 293, 303, 316, 317, 318, 334, 339, 340, 342, 343, 344, 345, 356, 357, 370, 372, 378, 379, 380, 410, 412, 417, 418, 442, 444, 445, 449, 450, 451, 452, 453, 454, 462, 463, 464, 473, 565, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 687, 690, 691, 694, 696, 701], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 142, 148, 152, 153, 161, 167, 169, 171, 176, 178, 183, 207, 212, 213, 224, 237, 243, 252, 273, 279, 287, 291, 296, 298, 310, 311, 312, 319, 320, 326, 331, 333, 355, 358, 360, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 409, 414, 419, 420, 432, 439, 441, 447, 458, 467, 480, 485, 517, 534, 537, 543, 549, 577, 658, 665, 668, 694, 695, 696, 698, 701, 704, 707, 710, 712], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 115, 116, 139, 147, 151, 154, 163, 165, 166, 167, 169, 170, 171, 182, 205, 260, 282, 283, 285, 287, 297, 341, 352, 353, 361, 362, 363, 365, 384, 386, 387, 392, 395, 413, 414, 416, 421, 428, 431, 432, 435, 446, 560, 571, 572, 573, 578, 579, 580, 593, 594, 595, 597, 598, 599, 600, 604, 605, 608, 612, 635, 645, 647, 648, 649, 651, 658, 664, 666, 667, 668, 669, 670, 671, 707], "determin": [3, 16, 45, 61, 139, 285, 332, 484, 528, 544, 549, 665, 678, 695, 712], "two": [3, 14, 23, 50, 61, 97, 112, 117, 118, 123, 124, 212, 224, 241, 252, 274, 296, 320, 332, 388, 397, 458, 487, 534, 543, 582, 663, 665, 673, 674, 675, 676, 694, 695, 698, 703, 707], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 119, 124, 137, 142, 158, 159, 164, 166, 171, 178, 179, 197, 199, 209, 210, 211, 214, 222, 223, 238, 243, 247, 248, 249, 256, 267, 270, 272, 274, 289, 291, 304, 305, 306, 307, 309, 315, 316, 318, 320, 322, 328, 332, 334, 337, 338, 346, 397, 406, 409, 424, 425, 429, 431, 441, 443, 455, 466, 472, 480, 483, 489, 495, 498, 501, 522, 534, 539, 540, 541, 543, 544, 549, 550, 555, 566, 585, 611, 643, 644, 655, 665, 667, 668, 670, 671, 675, 684, 685, 694, 695, 696, 698, 701, 706, 707, 709, 712], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 121, 123, 125, 126, 133, 137, 148, 166, 171, 178, 183, 185, 190, 236, 240, 242, 244, 256, 274, 287, 304, 309, 315, 320, 341, 347, 348, 359, 360, 375, 376, 390, 394, 395, 402, 406, 414, 431, 447, 466, 471, 472, 480, 496, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 536, 541, 550, 609, 635, 644, 646, 647, 648, 649, 650, 651, 652, 653, 656, 658, 665, 668, 674, 675, 677, 694, 695, 696, 698, 701, 704, 706, 707, 709, 710, 712], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 114, 120, 121, 122, 125, 129, 130, 131, 133, 134, 135, 136, 140, 141, 142, 146, 151, 152, 153, 176, 179, 182, 206, 212, 213, 224, 242, 243, 265, 278, 279, 282, 283, 291, 294, 308, 310, 311, 312, 319, 320, 321, 326, 331, 333, 346, 347, 348, 355, 358, 366, 368, 369, 373, 374, 375, 376, 377, 383, 385, 389, 390, 391, 394, 398, 399, 400, 402, 403, 404, 405, 408, 409, 412, 416, 419, 420, 439, 443, 446, 450, 452, 453, 454, 469, 470, 471, 472, 473, 474, 476, 477, 480, 482, 485, 486, 489, 490, 497, 507, 508, 509, 510, 516, 517, 518, 521, 522, 523, 524, 534, 539, 543, 544, 546, 549, 550, 650, 652, 665, 675, 698, 701, 704, 707], "out": [3, 48, 92, 158, 161, 166, 167, 170, 247, 303, 318, 334, 424, 431, 432, 435, 471, 544, 549, 586, 653, 662, 669, 670, 694, 698, 703, 707, 708], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 115, 116, 117, 121, 123, 124, 126, 128, 132, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 184, 199, 205, 206, 208, 213, 217, 225, 226, 227, 228, 229, 233, 234, 235, 236, 240, 244, 246, 247, 249, 258, 260, 268, 272, 274, 282, 283, 284, 285, 286, 287, 290, 291, 292, 294, 295, 299, 300, 301, 302, 312, 314, 315, 318, 319, 320, 321, 323, 324, 330, 331, 332, 333, 334, 346, 347, 348, 352, 353, 355, 358, 360, 361, 362, 363, 364, 365, 367, 373, 375, 376, 381, 382, 386, 387, 388, 390, 392, 393, 395, 397, 401, 406, 408, 413, 414, 415, 416, 421, 424, 427, 431, 432, 434, 435, 443, 446, 447, 455, 458, 459, 460, 461, 465, 467, 469, 470, 475, 482, 485, 490, 491, 492, 493, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 528, 531, 534, 537, 543, 544, 549, 550, 560, 569, 577, 590, 601, 622, 623, 625, 626, 627, 628, 643, 644, 653, 656, 658, 665, 668, 669, 670, 673, 674, 675, 676, 677, 694, 699, 701, 702, 704, 706, 707, 708, 710], "ha": [3, 19, 57, 58, 61, 64, 70, 97, 177, 192, 217, 252, 265, 286, 327, 330, 332, 334, 336, 486, 491, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 521, 622, 670, 679, 694, 695, 698, 699, 701, 704, 706, 707, 709, 710, 711], "call": [3, 11, 15, 17, 28, 61, 123, 124, 137, 156, 167, 178, 218, 285, 295, 332, 406, 432, 459, 501, 541, 658, 683, 685, 693, 694, 695, 698, 701, 706, 707, 709], "otherwis": [3, 19, 44, 50, 51, 61, 133, 140, 161, 167, 244, 258, 268, 285, 286, 313, 320, 329, 332, 388, 402, 408, 417, 432, 475, 480, 665, 668, 678, 695, 699, 700, 701], "nan_as_nul": [4, 58, 59, 71, 100, 205, 217, 227, 274, 330, 371, 441, 656, 710], "gpu": [4, 16, 17, 94, 119, 274, 303, 380, 644, 665, 686, 695, 696, 697, 698, 700, 701, 703, 707, 708, 709, 712], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 264, 265, 266, 274, 384, 601, 604, 667, 668, 684, 706, 707, 708], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 119, 124, 126, 133, 142, 161, 167, 209, 210, 211, 215, 222, 223, 243, 274, 287, 305, 306, 307, 324, 332, 337, 338, 359, 395, 402, 409, 432, 493, 556, 566, 577, 585, 611, 656, 665, 668, 670, 677, 698, 707, 710], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 119, 123, 126, 128, 132, 133, 137, 142, 151, 166, 170, 182, 209, 243, 268, 291, 294, 304, 305, 313, 314, 324, 325, 329, 332, 341, 354, 367, 384, 392, 395, 397, 401, 402, 406, 409, 416, 431, 435, 441, 443, 446, 467, 471, 480, 493, 495, 501, 517, 519, 522, 524, 529, 538, 541, 544, 549, 560, 566, 583, 585, 591, 604, 611, 635, 643, 644, 658, 662, 665, 667, 668, 670, 675, 677, 687, 689, 690, 691, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 712], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 164, 166, 167, 174, 176, 177, 178, 179, 183, 200, 226, 246, 248, 251, 260, 269, 273, 456, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 575, 577, 578, 579, 580, 583, 585, 591, 597, 598, 599, 600, 601, 604, 605, 608, 609, 611, 612, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 668, 671, 676, 677, 678, 679, 683, 684, 685, 687, 690, 691, 693, 694, 695, 698, 700, 702, 704, 705, 706, 708, 710, 712], "constant": [4, 644, 645, 656], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 140, 141, 148, 149, 152, 153, 158, 159, 162, 168, 170, 176, 209, 210, 211, 222, 223, 263, 279, 305, 306, 307, 310, 311, 312, 319, 326, 331, 333, 336, 337, 338, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 408, 414, 419, 420, 424, 425, 427, 434, 439, 662, 668, 694, 697, 710], "Will": [4, 167, 171, 274, 432, 658], "rangeindex": [4, 23, 70, 143, 146, 148, 171, 274, 289, 351, 412, 414, 658, 675, 698], "inform": [4, 15, 19, 43, 61, 70, 166, 285, 286, 312, 332, 431, 466, 467, 644, 668, 677, 694, 695, 697, 698, 701, 707, 709, 710], "part": [4, 61, 171, 332, 534, 543, 586, 694, 695, 702], "provid": [4, 15, 16, 21, 22, 36, 54, 67, 124, 132, 133, 137, 161, 168, 177, 205, 218, 260, 264, 265, 268, 273, 274, 285, 287, 304, 324, 401, 402, 406, 434, 458, 471, 494, 538, 554, 555, 574, 653, 656, 668, 671, 679, 684, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 711, 712], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 123, 124, 127, 137, 143, 148, 177, 178, 180, 181, 203, 204, 205, 220, 241, 244, 255, 258, 259, 260, 265, 267, 268, 274, 280, 281, 287, 313, 320, 321, 322, 332, 340, 357, 392, 396, 406, 414, 444, 445, 457, 475, 565, 653, 665, 668, 674, 679, 684, 698, 706, 708], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 166, 170, 173, 176, 177, 179, 182, 183, 188, 191, 194, 198, 201, 217, 218, 226, 227, 228, 229, 233, 234, 242, 244, 246, 247, 252, 257, 260, 261, 262, 263, 264, 265, 269, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 346, 347, 348, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 375, 376, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 431, 435, 436, 439, 440, 441, 443, 446, 447, 448, 452, 453, 454, 458, 459, 460, 461, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586, 589, 591, 597, 598, 599, 600, 601, 604, 605, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 653, 656, 658, 661, 662, 664, 665, 666, 668, 669, 670, 674, 675, 676, 677, 678, 679, 696, 698, 701, 702, 703, 704, 705, 706, 707, 710, 712], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 121, 137, 151, 157, 161, 167, 171, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 260, 274, 288, 298, 321, 322, 336, 352, 353, 374, 377, 390, 406, 416, 423, 432, 446, 448, 475, 482, 483, 489, 498, 512, 518, 523, 527, 529, 530, 531, 537, 544, 545, 546, 549, 551, 591, 602, 607, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 641, 650, 652, 665, 668, 677, 696, 701, 705, 709, 710], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 115, 116, 117, 121, 125, 126, 128, 133, 137, 154, 155, 167, 169, 170, 173, 183, 185, 190, 200, 217, 225, 226, 227, 228, 229, 233, 234, 237, 242, 244, 250, 251, 263, 268, 273, 274, 285, 287, 295, 304, 309, 320, 327, 330, 332, 336, 341, 347, 348, 359, 360, 375, 376, 384, 386, 387, 390, 394, 395, 402, 406, 421, 422, 432, 435, 436, 441, 447, 448, 456, 458, 468, 480, 522, 544, 547, 549, 574, 583, 604, 644, 646, 647, 648, 649, 650, 651, 652, 653, 665, 667, 668, 671, 677, 678, 683, 689, 694, 695, 700, 701, 702, 706, 707, 708, 710], "forc": [4, 167, 432, 668, 701], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 135, 136, 148, 149, 152, 153, 161, 166, 167, 169, 175, 176, 178, 180, 181, 183, 214, 218, 225, 226, 227, 228, 229, 233, 234, 258, 259, 278, 279, 286, 294, 295, 304, 310, 311, 313, 315, 318, 319, 326, 331, 332, 333, 341, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 373, 385, 389, 390, 391, 393, 397, 398, 399, 400, 401, 403, 404, 405, 414, 415, 419, 420, 431, 432, 439, 440, 443, 444, 445, 447, 458, 479, 485, 486, 491, 492, 496, 498, 522, 528, 531, 544, 549, 552, 553, 557, 574, 575, 578, 579, 580, 583, 589, 597, 598, 599, 600, 605, 608, 612, 644, 653, 658, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 683, 689, 694, 695, 697, 698, 701, 704, 707, 709, 710], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 167, 176, 177, 268, 279, 310, 311, 313, 319, 326, 331, 332, 333, 339, 346, 355, 357, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 432, 439, 480, 488, 498, 524, 536, 538, 583, 665, 667, 669, 670, 679, 695, 698, 701, 703, 704, 706, 707], "allow": [4, 15, 21, 50, 51, 70, 94, 124, 137, 166, 167, 274, 285, 287, 320, 406, 431, 432, 498, 653, 668, 669, 670, 673, 674, 675, 676, 694, 696, 698, 701, 705, 707, 709, 712], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 123, 127, 132, 142, 143, 160, 162, 164, 167, 168, 170, 171, 172, 173, 205, 217, 243, 248, 250, 263, 264, 265, 266, 268, 274, 287, 327, 330, 359, 371, 392, 396, 401, 409, 426, 427, 429, 430, 432, 434, 435, 436, 479, 503, 504, 519, 526, 552, 553, 557, 559, 561, 635, 655, 667, 668, 677, 678, 698, 704, 708, 710], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 119, 128, 132, 168, 170, 205, 217, 227, 233, 274, 303, 304, 309, 330, 347, 348, 359, 371, 375, 376, 401, 434, 435, 441, 443, 485, 653, 656, 665, 678, 705, 707, 710], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 115, 116, 119, 127, 132, 140, 147, 149, 151, 154, 161, 167, 170, 173, 182, 205, 213, 214, 215, 217, 274, 282, 283, 285, 297, 299, 300, 301, 302, 313, 315, 318, 324, 329, 330, 334, 347, 348, 352, 353, 361, 362, 363, 365, 371, 375, 376, 378, 379, 380, 386, 387, 396, 401, 408, 413, 415, 416, 417, 421, 426, 432, 435, 436, 442, 446, 458, 465, 467, 469, 472, 475, 480, 489, 498, 522, 569, 583, 589, 590, 591, 656, 665, 678, 694, 695, 698, 708], "leav": [4, 58, 71, 92, 205, 217, 274, 330, 468, 662, 678, 684, 707], "build": [4, 256, 697, 707], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 261, 264, 269, 279, 280, 281, 282, 283, 286, 287, 294, 299, 300, 301, 302, 304, 310, 311, 312, 313, 318, 319, 320, 324, 326, 331, 332, 333, 335, 336, 339, 347, 348, 352, 353, 355, 357, 358, 360, 361, 362, 365, 366, 368, 369, 371, 373, 375, 376, 384, 385, 386, 387, 389, 391, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 408, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 425, 436, 439, 446, 447, 577, 586, 601, 604, 609, 656, 660, 661, 662, 666, 668, 669, 670, 677, 679, 701, 702, 703, 704, 706, 707, 710, 712], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 133, 143, 148, 157, 161, 166, 173, 178, 200, 204, 219, 237, 246, 251, 258, 268, 274, 332, 336, 402, 414, 423, 431, 436, 456, 472, 493, 563, 565, 570, 586, 592, 657, 665, 667, 670, 677, 698, 699, 701, 702, 706, 707], "val": [4, 23, 64, 157, 173, 336, 423, 436, 586, 672, 701], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 114, 117, 118, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 152, 153, 157, 167, 173, 176, 203, 225, 226, 227, 228, 229, 233, 234, 258, 279, 288, 298, 310, 311, 319, 326, 331, 333, 336, 347, 348, 355, 358, 361, 362, 365, 366, 368, 369, 373, 375, 376, 385, 388, 389, 391, 392, 398, 399, 400, 403, 404, 405, 406, 419, 420, 423, 432, 436, 439, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 578, 579, 580, 582, 597, 598, 599, 600, 605, 608, 612, 665, 668, 673, 674, 675, 676, 677, 678, 696, 698, 701, 702, 705, 707, 708], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 115, 116, 117, 119, 124, 125, 126, 127, 137, 138, 140, 143, 146, 147, 151, 154, 155, 157, 167, 173, 182, 183, 207, 217, 229, 242, 246, 250, 261, 269, 273, 278, 282, 283, 287, 299, 300, 301, 302, 304, 309, 312, 313, 320, 329, 330, 335, 336, 339, 351, 352, 353, 357, 360, 361, 362, 363, 365, 371, 386, 387, 392, 393, 394, 395, 396, 397, 406, 407, 408, 412, 413, 416, 421, 422, 423, 430, 432, 435, 436, 446, 447, 460, 461, 465, 466, 467, 483, 497, 503, 504, 509, 514, 525, 533, 586, 619, 622, 625, 626, 638, 639, 640, 642, 653, 658, 664, 677, 695, 700, 703, 707, 708, 710, 712], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 127, 157, 171, 173, 273, 313, 336, 339, 396, 397, 423, 436, 458, 493, 653, 661, 665, 668, 671, 694, 701, 703, 707, 710, 712], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 61, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 117, 118, 119, 120, 124, 126, 127, 128, 132, 137, 138, 140, 141, 143, 146, 147, 156, 157, 159, 160, 177, 183, 187, 188, 189, 193, 201, 212, 224, 226, 229, 242, 246, 252, 263, 268, 279, 280, 281, 284, 285, 288, 293, 296, 297, 299, 300, 301, 302, 304, 308, 309, 312, 313, 314, 320, 321, 324, 329, 332, 336, 339, 346, 347, 348, 351, 357, 360, 362, 363, 367, 374, 375, 376, 377, 388, 389, 395, 396, 401, 406, 407, 408, 412, 413, 415, 423, 425, 440, 441, 443, 447, 459, 460, 461, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 478, 481, 482, 483, 484, 486, 494, 495, 501, 507, 512, 540, 541, 546, 547, 555, 558, 559, 566, 582, 585, 586, 589, 591, 601, 609, 611, 616, 617, 618, 619, 622, 623, 625, 626, 629, 636, 645, 653, 658, 662, 668, 673, 674, 675, 676, 677, 679, 698, 701, 702, 703, 705, 706, 707, 710, 712], "insert": [4, 64, 128, 140, 157, 336, 397, 408, 423, 548, 684, 698, 708], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 127, 132, 138, 140, 143, 146, 173, 246, 261, 269, 313, 325, 329, 336, 351, 354, 357, 396, 397, 401, 407, 408, 412, 430, 436, 478, 483, 519, 619, 622, 661, 665, 666, 669, 670, 677, 701, 703, 706, 707, 709, 710], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 127, 138, 140, 143, 146, 173, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 261, 269, 296, 298, 299, 300, 301, 302, 304, 313, 316, 329, 351, 357, 396, 397, 407, 408, 412, 430, 436, 483, 492, 498, 503, 504, 560, 586, 591, 616, 617, 618, 619, 622, 627, 628, 631, 632, 636, 637, 638, 639, 640, 641, 642, 677, 698, 701, 707], "13": [4, 44, 55, 84, 94, 127, 140, 143, 157, 296, 298, 313, 316, 325, 329, 351, 354, 396, 397, 408, 423, 430, 483, 638, 639, 640, 642, 701, 703], "14": [4, 15, 70, 94, 100, 127, 140, 143, 157, 316, 329, 351, 371, 396, 408, 423, 483, 638, 639, 640, 642, 701, 707], "via": [4, 36, 137, 166, 304, 406, 431, 467, 686, 698, 701, 703, 706], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 119, 132, 137, 162, 168, 172, 181, 203, 205, 217, 236, 240, 255, 273, 274, 286, 287, 304, 330, 347, 348, 371, 375, 376, 401, 406, 427, 434, 445, 448, 457, 653, 656, 668, 677, 694, 696, 707, 708, 710, 712], "datetim": [4, 36, 47, 117, 119, 127, 132, 167, 184, 186, 191, 194, 197, 198, 202, 304, 316, 396, 401, 432, 448, 615, 621, 630, 634, 637, 661, 665, 666, 669, 670, 673, 674, 676, 677, 698, 701, 705, 706, 707, 708, 712], "timedelta": [4, 117, 132, 401, 449, 638, 705, 707], "t0": 4, "strptime": [4, 119, 677, 701], "2018": [4, 47, 55, 84, 119, 127, 244, 325, 354, 396, 627, 628, 661, 665, 666, 669, 670, 701], "07": [4, 119, 123, 127, 132, 187, 188, 189, 201, 396, 401, 616, 617, 618, 619, 629, 636], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 123, 127, 132, 184, 185, 190, 191, 193, 194, 196, 197, 198, 278, 304, 316, 335, 347, 348, 375, 376, 396, 401, 448, 566, 585, 611, 614, 620, 621, 630, 632, 633, 634, 638, 639, 640, 641, 642, 661, 665, 666, 669, 670, 701, 710, 712], "y": [4, 15, 16, 17, 44, 119, 126, 146, 161, 202, 246, 313, 392, 395, 412, 472, 483, 519, 534, 543, 562, 635, 637, 677, 698, 701, 704, 707], "m": [4, 119, 127, 167, 171, 185, 190, 195, 197, 396, 432, 493, 519, 614, 620, 631, 632, 633, 635, 638, 639, 640, 642, 668, 677, 696, 701, 703, 705, 709], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 119, 120, 122, 126, 129, 130, 131, 134, 135, 136, 137, 140, 143, 148, 152, 153, 158, 161, 176, 177, 185, 186, 187, 188, 189, 190, 197, 201, 247, 268, 279, 293, 294, 304, 309, 310, 311, 313, 319, 326, 331, 333, 355, 357, 358, 366, 368, 369, 373, 385, 389, 391, 392, 395, 397, 398, 399, 400, 403, 404, 405, 406, 408, 414, 419, 420, 424, 430, 439, 441, 458, 478, 480, 481, 483, 485, 491, 497, 519, 522, 539, 558, 559, 614, 615, 616, 617, 618, 620, 633, 635, 636, 653, 677, 679, 698, 701, 703, 707, 710], "h": [4, 111, 185, 190, 191, 197, 384, 483, 522, 614, 620, 621, 633, 698, 701], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 117, 118, 125, 126, 133, 137, 140, 141, 148, 150, 158, 161, 167, 171, 178, 185, 190, 197, 198, 226, 241, 244, 278, 280, 281, 286, 287, 288, 291, 293, 294, 295, 299, 300, 301, 302, 304, 309, 312, 313, 314, 316, 318, 320, 321, 322, 330, 332, 339, 346, 352, 353, 359, 367, 377, 388, 394, 395, 402, 406, 408, 414, 415, 417, 424, 432, 441, 443, 448, 459, 460, 461, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 574, 585, 586, 591, 604, 611, 614, 619, 620, 622, 623, 625, 626, 628, 632, 633, 634, 638, 639, 640, 641, 642, 645, 653, 656, 658, 661, 662, 663, 665, 668, 677, 678, 694, 695, 696, 697, 698, 701, 702, 703, 705, 707, 709, 710, 711, 712], "id": [4, 16, 589, 591, 643, 644, 701, 704], "arang": [4, 17, 701, 707], "second": [4, 44, 97, 111, 127, 142, 156, 167, 185, 190, 196, 197, 243, 262, 313, 316, 384, 396, 409, 432, 449, 452, 614, 620, 632, 633, 638, 640, 665, 668, 671, 677, 698, 701], "x": [4, 5, 15, 16, 17, 44, 61, 73, 146, 161, 175, 246, 268, 285, 313, 332, 341, 359, 412, 458, 472, 534, 543, 546, 548, 562, 566, 585, 586, 604, 611, 635, 653, 665, 669, 670, 696, 701, 702, 704, 706, 707], "01": [4, 36, 127, 132, 133, 184, 186, 187, 188, 189, 191, 194, 195, 197, 198, 201, 202, 304, 396, 401, 402, 448, 519, 561, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 641, 661, 665, 666, 669, 670, 703, 704, 705, 710], "02": [4, 123, 127, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 316, 396, 401, 448, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 630, 631, 634, 636, 661, 665, 666, 669, 670, 677, 701, 704], "03": [4, 47, 127, 133, 186, 187, 188, 189, 195, 201, 316, 396, 402, 448, 615, 616, 617, 618, 619, 623, 625, 626, 631, 635, 636, 641, 677], "04": [4, 46, 55, 75, 76, 84, 104, 105, 123, 127, 132, 187, 188, 189, 197, 201, 325, 347, 348, 354, 375, 376, 396, 401, 448, 614, 616, 617, 618, 619, 620, 633, 636, 677], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 123, 127, 137, 139, 148, 150, 151, 156, 157, 158, 159, 161, 166, 169, 171, 179, 182, 203, 205, 213, 214, 247, 255, 266, 280, 281, 282, 283, 289, 299, 300, 301, 302, 308, 313, 314, 315, 321, 325, 332, 336, 339, 340, 354, 357, 392, 396, 406, 414, 416, 423, 424, 425, 431, 446, 457, 458, 469, 470, 472, 473, 476, 480, 485, 487, 489, 491, 498, 522, 544, 549, 565, 575, 583, 586, 601, 602, 644, 655, 661, 664, 665, 667, 668, 669, 670, 671, 674, 694, 701, 702, 703, 704, 706, 707, 710], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 128, 142, 144, 207, 238, 243, 264, 265, 266, 268, 270, 284, 285, 332, 384, 397, 409, 410, 604, 645, 662, 665, 668, 669, 670, 671, 677, 698, 701], "cat": [4, 133, 179, 322, 359, 402, 458, 459, 460, 461, 465, 466, 467, 486, 490, 498, 527, 545, 550, 551, 656, 684, 689, 701], "jump": [4, 128], "dog": [4, 74, 133, 179, 359, 402, 458, 485, 523, 701], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 115, 116, 117, 126, 127, 132, 133, 140, 147, 151, 154, 155, 159, 177, 182, 187, 189, 193, 226, 229, 282, 283, 299, 300, 301, 302, 304, 312, 313, 336, 339, 352, 353, 357, 361, 362, 365, 367, 386, 387, 395, 396, 401, 402, 408, 413, 416, 421, 422, 425, 441, 443, 446, 469, 482, 483, 540, 589, 591, 616, 617, 618, 619, 622, 623, 625, 626, 629, 636, 653, 658, 679, 701, 703, 705, 707, 710, 712], "cow": [4, 44, 156, 313, 314, 346], "moo": 4, "occasion": [4, 695], "pdf": [4, 58, 170, 701, 705], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 170, 176, 177, 182, 183, 205, 218, 237, 247, 258, 261, 262, 263, 264, 268, 269, 279, 280, 281, 282, 283, 287, 293, 294, 295, 299, 300, 301, 302, 304, 310, 311, 313, 319, 324, 326, 327, 328, 329, 331, 332, 333, 335, 339, 351, 352, 353, 355, 357, 358, 360, 361, 362, 365, 366, 368, 369, 371, 373, 384, 385, 386, 387, 389, 391, 392, 394, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 412, 413, 414, 416, 419, 420, 421, 422, 424, 426, 430, 439, 440, 441, 446, 447, 458, 472, 480, 481, 483, 486, 491, 495, 496, 501, 507, 522, 524, 536, 541, 550, 558, 559, 562, 563, 566, 585, 586, 589, 591, 601, 604, 609, 611, 653, 656, 658, 662, 663, 665, 668, 674, 675, 676, 679, 701, 702, 703, 705, 706, 707, 710, 712], "from_panda": [4, 224, 229, 252, 268, 577, 586, 701, 702, 704, 705, 712], "attribut": [4, 36, 142, 178, 205, 243, 256, 265, 274, 304, 393, 409, 461, 674, 675, 676, 684, 698, 699, 701], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 117, 118, 121, 123, 126, 127, 132, 137, 142, 148, 156, 178, 204, 205, 209, 210, 219, 243, 256, 258, 268, 274, 285, 288, 290, 292, 293, 296, 305, 306, 314, 323, 324, 332, 335, 341, 356, 382, 388, 390, 392, 395, 396, 401, 406, 409, 414, 417, 418, 467, 471, 484, 507, 508, 509, 510, 516, 517, 518, 521, 534, 543, 560, 577, 582, 589, 591, 609, 643, 658, 664, 665, 668, 669, 670, 671, 677, 678, 683, 684, 685, 687, 690, 691, 694, 698, 702, 704, 706, 707, 708, 710, 712], "iterrow": 4, "itertupl": 4, "to_dict": [4, 274], "transpos": [5, 275, 655, 684, 703, 708], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 157, 158, 159, 166, 175, 176, 209, 210, 212, 222, 224, 237, 241, 242, 244, 247, 279, 280, 281, 284, 285, 287, 293, 295, 305, 306, 309, 310, 311, 319, 326, 331, 333, 337, 355, 358, 366, 368, 369, 373, 374, 377, 385, 389, 391, 392, 394, 397, 398, 399, 400, 403, 404, 405, 406, 419, 420, 423, 424, 425, 431, 439, 458, 459, 466, 467, 468, 498, 502, 539, 548, 694, 695, 696, 698, 701, 704, 707, 709], "ncol": [5, 175], "nrow": [5, 175, 665, 701, 707], "self": [5, 14, 61, 88, 111, 117, 140, 159, 166, 175, 183, 224, 252, 275, 284, 288, 332, 360, 384, 397, 408, 425, 431, 438, 447, 490, 550, 696, 698], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 115, 116, 124, 126, 127, 137, 147, 148, 149, 151, 154, 161, 162, 167, 169, 174, 175, 179, 182, 218, 282, 283, 285, 287, 291, 295, 297, 298, 304, 309, 314, 318, 332, 352, 353, 359, 361, 363, 365, 386, 387, 393, 395, 396, 406, 413, 414, 415, 416, 421, 427, 432, 446, 451, 475, 485, 486, 490, 491, 496, 507, 528, 534, 537, 543, 544, 549, 560, 561, 562, 578, 579, 580, 583, 591, 597, 598, 599, 600, 601, 605, 608, 609, 612, 635, 645, 653, 655, 656, 664, 665, 668, 669, 670, 674, 677, 678, 694, 696, 698, 700, 701, 706, 707, 708, 709, 710, 712], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 117, 123, 124, 126, 148, 149, 166, 171, 175, 205, 268, 308, 313, 320, 324, 332, 392, 393, 395, 414, 415, 431, 475, 505, 506, 534, 536, 544, 575, 577, 578, 579, 580, 591, 597, 598, 599, 600, 604, 605, 608, 612, 644, 656, 662, 668, 673, 674, 675, 676, 678, 683, 694, 695, 696, 698, 702, 707, 710, 712], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 114, 120, 122, 123, 124, 129, 130, 131, 134, 135, 136, 148, 149, 152, 153, 166, 167, 175, 176, 260, 279, 285, 310, 311, 315, 319, 326, 331, 333, 355, 358, 362, 366, 368, 369, 373, 383, 385, 389, 391, 392, 393, 398, 399, 400, 403, 404, 405, 414, 415, 419, 420, 431, 432, 439, 475, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 673, 674, 675, 676, 694, 709], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 143, 147, 148, 149, 151, 152, 153, 154, 161, 166, 167, 173, 175, 176, 178, 182, 183, 184, 205, 260, 274, 279, 282, 283, 284, 285, 286, 294, 297, 298, 310, 311, 319, 324, 326, 331, 333, 341, 352, 353, 355, 358, 359, 360, 361, 363, 365, 366, 368, 369, 373, 385, 386, 387, 389, 391, 392, 393, 395, 396, 398, 399, 400, 403, 404, 405, 406, 413, 414, 415, 416, 419, 420, 421, 431, 432, 436, 439, 446, 447, 448, 451, 475, 485, 486, 490, 491, 496, 502, 528, 534, 537, 543, 544, 560, 566, 575, 577, 578, 579, 580, 583, 585, 589, 597, 598, 599, 600, 605, 608, 609, 611, 612, 635, 644, 645, 662, 664, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 694, 695, 696, 698, 700, 701, 702, 703, 704, 707, 708, 710], "becaus": [5, 12, 13, 97, 175, 282, 283, 285, 591, 662, 696, 701, 704, 705, 707, 710, 712], "behavior": [5, 126, 171, 175, 246, 268, 314, 395, 560, 644, 656, 665, 668, 677, 678, 694, 695, 698, 699, 701, 706, 707, 709, 711, 712], "absolut": [7, 205, 278, 591, 673, 674, 675, 676, 701, 712], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 117, 121, 126, 225, 226, 227, 228, 229, 233, 234, 250, 278, 304, 359, 361, 362, 365, 390, 395, 443, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 574, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 668, 678, 684, 695, 698, 701, 702, 705, 706, 707, 708, 712], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 125, 127, 132, 133, 139, 169, 171, 235, 242, 257, 260, 265, 266, 268, 278, 280, 281, 291, 304, 309, 314, 320, 321, 332, 346, 347, 348, 359, 375, 376, 394, 396, 401, 402, 450, 452, 453, 454, 458, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 535, 536, 538, 540, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 566, 569, 570, 571, 572, 573, 575, 578, 579, 580, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 644, 653, 665, 668, 669, 670, 678, 694, 695, 696, 698, 699, 701, 703, 705, 706, 707, 709, 712], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 115, 116, 117, 124, 132, 137, 148, 151, 154, 164, 171, 177, 182, 215, 246, 248, 268, 278, 284, 285, 291, 299, 300, 301, 302, 320, 325, 332, 335, 336, 352, 353, 354, 359, 361, 362, 365, 384, 386, 387, 401, 406, 414, 416, 417, 421, 429, 446, 480, 484, 486, 493, 522, 529, 531, 556, 560, 566, 577, 585, 586, 604, 609, 611, 643, 645, 653, 655, 656, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 684, 687, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 710], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 115, 116, 124, 132, 148, 151, 154, 166, 182, 278, 288, 299, 300, 301, 302, 332, 352, 353, 361, 362, 365, 384, 386, 387, 401, 414, 416, 421, 431, 446, 479, 498, 552, 553, 557, 566, 585, 604, 609, 611, 653, 656, 665, 668, 687, 689, 690, 691, 701, 702, 708], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 115, 116, 127, 128, 142, 154, 161, 166, 167, 171, 177, 203, 205, 213, 214, 243, 244, 255, 278, 286, 287, 293, 294, 304, 313, 314, 320, 325, 336, 341, 354, 374, 377, 386, 387, 396, 397, 409, 421, 431, 432, 443, 457, 466, 480, 488, 492, 496, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 526, 527, 536, 537, 544, 545, 549, 551, 552, 553, 556, 557, 558, 559, 574, 583, 614, 620, 633, 654, 656, 659, 662, 663, 665, 668, 671, 677, 678, 679, 684, 694, 695, 696, 697, 701, 704, 705, 707, 709, 710, 711, 712], "33": [7, 30, 52, 242, 278], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 117, 122, 132, 133, 136, 138, 141, 146, 147, 151, 170, 176, 182, 203, 217, 278, 285, 304, 310, 311, 318, 330, 332, 347, 348, 352, 353, 362, 371, 375, 376, 388, 391, 401, 402, 405, 407, 412, 413, 416, 435, 439, 443, 446, 468, 665, 678, 701, 705, 707, 709, 710], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 145, 147, 148, 149, 151, 152, 153, 154, 156, 158, 176, 182, 242, 247, 279, 282, 283, 286, 290, 292, 294, 299, 300, 301, 302, 310, 311, 313, 315, 319, 323, 324, 326, 331, 332, 333, 341, 352, 353, 355, 358, 361, 362, 363, 365, 366, 368, 369, 373, 382, 385, 386, 387, 389, 390, 391, 394, 396, 398, 399, 400, 401, 403, 404, 405, 406, 411, 413, 414, 415, 416, 419, 420, 421, 424, 439, 446, 458, 475, 575, 577, 583, 683, 701, 703, 707, 708], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 114, 115, 116, 120, 122, 123, 124, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 148, 150, 151, 152, 153, 154, 156, 166, 171, 176, 177, 179, 182, 204, 218, 237, 239, 244, 246, 260, 262, 265, 266, 267, 268, 271, 279, 282, 283, 297, 310, 311, 313, 319, 326, 331, 332, 333, 352, 353, 355, 358, 361, 362, 363, 365, 366, 368, 369, 373, 385, 386, 387, 389, 391, 392, 393, 396, 397, 398, 399, 400, 403, 404, 405, 412, 413, 414, 416, 419, 420, 421, 431, 439, 446, 469, 658, 679, 684, 694, 695, 698], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 145, 152, 153, 176, 177, 247, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 392, 398, 399, 400, 403, 404, 405, 411, 419, 420, 439, 583, 679], "get": [8, 41, 42, 43, 49, 56, 60, 61, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 103, 104, 105, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 218, 236, 240, 246, 258, 268, 279, 310, 311, 312, 319, 326, 331, 332, 333, 340, 347, 348, 355, 358, 366, 368, 369, 370, 373, 375, 376, 385, 389, 391, 398, 399, 400, 403, 404, 405, 410, 419, 420, 439, 546, 575, 604, 613, 619, 656, 657, 665, 684, 699, 703, 707, 708], "addit": [8, 15, 51, 90, 120, 166, 279, 362, 389, 431, 481, 507, 525, 533, 542, 665, 667, 668, 673, 674, 675, 676, 694, 695, 696, 712], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 156, 176, 279, 294, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 458, 480, 575, 582, 583, 607, 610, 701, 703, 704], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 166, 171, 176, 279, 310, 311, 312, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 431, 439, 659, 664, 669, 670, 684, 707, 712], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 114, 115, 116, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 154, 166, 176, 183, 185, 190, 197, 274, 279, 285, 293, 310, 311, 312, 313, 314, 315, 319, 324, 326, 331, 332, 333, 355, 358, 360, 366, 368, 369, 373, 385, 386, 387, 389, 391, 398, 399, 400, 403, 404, 405, 414, 419, 420, 421, 431, 439, 447, 546, 566, 578, 579, 580, 585, 597, 598, 599, 600, 605, 608, 609, 611, 612, 614, 620, 633, 684, 694, 698, 703, 704, 707, 708, 709, 710], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 142, 152, 153, 176, 209, 210, 222, 243, 279, 291, 305, 306, 310, 311, 313, 319, 326, 329, 331, 333, 336, 337, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 406, 409, 419, 420, 439, 507, 508, 509, 510, 516, 517, 518, 520, 521, 522, 525, 526, 527, 533, 536, 537, 540, 542, 545, 546, 550, 551, 552, 553, 556, 557, 560, 694, 698, 701, 706, 710], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 359, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 675], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 150, 152, 153, 162, 168, 176, 183, 236, 240, 274, 279, 290, 292, 296, 298, 310, 311, 313, 319, 322, 323, 326, 331, 333, 347, 348, 355, 358, 366, 368, 369, 373, 375, 376, 382, 385, 389, 391, 392, 398, 399, 400, 403, 404, 405, 419, 420, 427, 434, 439, 447, 480, 583, 591, 663, 665, 668, 684, 700, 702, 708], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 152, 153, 176, 177, 178, 179, 214, 218, 220, 241, 262, 266, 268, 279, 287, 310, 311, 315, 319, 326, 331, 333, 334, 346, 355, 358, 366, 367, 368, 369, 373, 385, 389, 391, 397, 398, 399, 400, 403, 404, 405, 419, 420, 439, 467, 469, 473, 485, 487, 491, 496, 507, 508, 517, 522, 591, 604, 656, 663, 665, 668, 669, 670, 671, 679, 694, 695, 696, 698, 701, 703, 706, 707, 710], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 152, 153, 176, 182, 183, 215, 274, 279, 285, 291, 294, 310, 311, 312, 319, 324, 326, 331, 333, 352, 353, 355, 358, 360, 363, 366, 368, 369, 373, 385, 389, 391, 393, 395, 398, 399, 400, 403, 404, 405, 419, 420, 439, 446, 447, 470, 471, 472, 522, 577, 583, 653, 662, 665, 677, 710], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 184, 203, 255, 260, 264, 265, 266, 274, 279, 310, 311, 312, 319, 326, 331, 332, 333, 346, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 448, 457, 471, 472, 483, 485, 488, 528, 536, 537, 538, 550, 554, 555, 644, 653, 656, 678, 698, 701], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 114, 119, 120, 122, 123, 126, 129, 130, 131, 133, 134, 135, 136, 142, 152, 153, 162, 168, 173, 176, 179, 212, 214, 243, 279, 285, 291, 295, 304, 310, 311, 312, 313, 318, 319, 326, 331, 333, 355, 358, 366, 368, 369, 371, 373, 385, 389, 391, 392, 395, 398, 399, 400, 402, 403, 404, 405, 409, 419, 420, 427, 434, 436, 439, 459, 465, 466, 467, 470, 471, 472, 476, 480, 485, 503, 504, 507, 522, 524, 528, 560, 566, 585, 611, 657, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 695, 696, 698, 701, 704, 706, 707, 709, 710, 712], "multipl": [8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 149, 152, 153, 176, 177, 192, 218, 262, 265, 279, 304, 310, 311, 312, 319, 326, 331, 333, 339, 355, 357, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 415, 419, 420, 439, 472, 491, 496, 583, 622, 645, 665, 668, 669, 670, 677, 679, 696, 698, 701, 703, 704, 706, 707, 709], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 164, 166, 176, 237, 248, 279, 310, 311, 312, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 429, 431, 439, 655, 658, 697, 698, 701, 703, 707, 712], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 148, 151, 152, 153, 154, 156, 158, 161, 167, 176, 182, 218, 220, 242, 244, 247, 258, 260, 267, 268, 273, 279, 288, 296, 297, 308, 310, 311, 313, 319, 326, 329, 331, 332, 333, 336, 341, 355, 358, 361, 362, 365, 366, 368, 369, 373, 374, 377, 381, 383, 385, 386, 387, 389, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414, 416, 419, 420, 421, 424, 432, 439, 443, 446, 471, 478, 481, 482, 485, 486, 491, 494, 495, 496, 497, 501, 502, 505, 506, 523, 525, 528, 529, 530, 533, 536, 537, 540, 541, 542, 544, 546, 548, 549, 560, 561, 563, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 587, 588, 589, 591, 596, 597, 598, 599, 600, 603, 605, 607, 608, 610, 612, 644, 650, 652, 653, 658, 664, 665, 667, 668, 669, 670, 673, 675, 676, 677, 694, 696, 698, 701, 707], "string": [8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 114, 120, 122, 127, 129, 130, 131, 134, 135, 136, 152, 153, 161, 167, 171, 173, 176, 279, 280, 281, 285, 304, 310, 311, 315, 319, 326, 331, 333, 346, 347, 348, 355, 357, 358, 366, 368, 369, 373, 375, 376, 384, 385, 389, 391, 396, 398, 399, 400, 403, 404, 405, 417, 419, 420, 432, 436, 439, 566, 585, 604, 611, 635, 643, 644, 645, 656, 661, 665, 666, 667, 668, 670, 671, 677, 684, 698, 700, 704, 705, 706, 708, 712], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 609, 706], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 591, 695, 696, 698, 701, 703, 704], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 61, 62, 74, 85, 87, 94, 96, 98, 99, 102, 114, 120, 122, 123, 126, 129, 130, 131, 134, 135, 136, 137, 149, 152, 153, 176, 178, 235, 258, 279, 295, 310, 311, 319, 326, 331, 332, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 392, 395, 398, 399, 400, 403, 404, 405, 406, 415, 419, 420, 439, 472, 480, 485, 490, 491, 496, 524, 537, 544, 549, 550, 560, 583, 601, 668, 669, 670, 674, 684, 695, 696, 698, 701, 702, 706, 707, 710, 712], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 114, 120, 122, 123, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 152, 153, 162, 168, 171, 176, 178, 235, 279, 285, 287, 310, 311, 319, 326, 331, 332, 333, 346, 355, 358, 359, 362, 366, 367, 368, 369, 373, 384, 385, 389, 391, 395, 398, 399, 400, 401, 403, 404, 405, 406, 419, 420, 427, 434, 439, 441, 443, 458, 480, 485, 486, 491, 496, 502, 522, 528, 544, 549, 604, 653, 655, 658, 665, 667, 668, 669, 670, 674, 675, 676, 678, 694, 696, 701, 703, 707, 710, 712], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 114, 119, 120, 122, 124, 127, 128, 129, 130, 131, 134, 135, 136, 143, 146, 148, 152, 153, 156, 176, 179, 205, 218, 224, 237, 244, 246, 252, 279, 294, 310, 311, 313, 319, 326, 331, 332, 333, 341, 355, 358, 361, 362, 365, 366, 368, 369, 373, 385, 389, 391, 396, 397, 398, 399, 400, 403, 404, 405, 412, 414, 419, 420, 439, 534, 543, 544, 549, 684, 698, 702, 706, 708], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 124, 127, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 178, 184, 205, 260, 279, 298, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 383, 385, 389, 391, 396, 398, 399, 400, 403, 404, 405, 414, 419, 420, 439, 448, 485, 490, 534, 537, 543, 544, 560, 635, 673, 675, 676, 695, 701, 704, 707, 710], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 114, 120, 122, 123, 127, 129, 130, 131, 134, 135, 136, 152, 153, 176, 215, 258, 279, 290, 292, 310, 311, 319, 323, 324, 326, 331, 333, 355, 358, 366, 368, 369, 373, 382, 383, 385, 389, 391, 396, 398, 399, 400, 403, 404, 405, 419, 420, 439, 458, 481, 484, 525, 533, 542, 561, 567, 568, 576, 577, 581, 583, 587, 588, 596, 603, 707, 708], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 143, 152, 153, 166, 176, 240, 279, 310, 311, 313, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 395, 398, 399, 400, 403, 404, 405, 419, 420, 431, 439, 458, 657, 672, 695, 696, 701, 705, 712], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 152, 153, 176, 178, 274, 279, 310, 311, 319, 326, 331, 332, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 406, 419, 420, 439, 441, 458, 695, 710], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 279, 280, 288, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 383, 385, 389, 391, 398, 399, 400, 403, 404, 405, 414, 419, 420, 439, 480, 534, 543, 548, 643, 655, 665, 668, 671, 685, 694, 698, 701, 703], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 114, 115, 116, 117, 118, 120, 121, 122, 129, 130, 131, 134, 135, 136, 147, 152, 153, 154, 176, 235, 237, 279, 288, 296, 298, 310, 311, 319, 326, 329, 331, 332, 333, 335, 352, 353, 355, 358, 361, 362, 363, 365, 366, 368, 369, 373, 383, 385, 386, 387, 388, 389, 390, 391, 398, 399, 400, 403, 404, 405, 413, 419, 420, 421, 439, 474, 478, 488, 489, 523, 535, 569, 578, 579, 580, 582, 589, 590, 591, 597, 598, 599, 600, 605, 607, 608, 610, 612, 653, 656, 684, 695, 696, 701, 704, 707, 708], "both": [8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 141, 152, 153, 176, 178, 200, 251, 256, 257, 274, 279, 291, 295, 304, 310, 311, 319, 320, 326, 331, 333, 339, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 456, 533, 561, 591, 658, 674, 675, 676, 683, 694, 695, 698, 704, 705, 706, 707, 712], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 170, 176, 183, 220, 279, 291, 310, 311, 313, 319, 322, 324, 326, 331, 333, 355, 358, 359, 360, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 406, 419, 420, 435, 439, 441, 447, 480, 485, 487, 522, 536, 538, 583, 665, 668, 695, 696, 698, 707], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 140, 152, 153, 176, 258, 260, 268, 279, 310, 311, 313, 319, 320, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 408, 419, 420, 439, 494, 530, 538, 554, 555, 664, 665, 668, 669, 670, 671, 695, 710], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 312, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439, 707, 710, 712], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 151, 152, 153, 176, 182, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 416, 419, 420, 439, 446, 482, 529, 530, 591, 607, 610, 650, 652], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 279, 310, 311, 319, 326, 331, 333, 355, 358, 366, 368, 369, 373, 385, 389, 391, 398, 399, 400, 403, 404, 405, 419, 420, 439], "361": [8, 120, 279, 389], "181": [8, 120, 279, 389], "c": [8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 61, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 114, 120, 122, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 143, 146, 148, 152, 153, 158, 161, 176, 177, 218, 247, 268, 279, 293, 294, 304, 310, 311, 313, 319, 322, 324, 326, 328, 331, 332, 333, 339, 351, 355, 357, 358, 366, 368, 369, 373, 384, 385, 389, 391, 392, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 412, 414, 419, 420, 424, 430, 439, 440, 441, 458, 472, 480, 486, 522, 528, 536, 558, 559, 566, 585, 586, 589, 591, 611, 635, 653, 662, 663, 665, 674, 679, 695, 697, 698, 701, 702, 703, 706, 707, 710], "e": [8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 120, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 143, 152, 153, 158, 161, 171, 176, 177, 247, 268, 279, 293, 304, 310, 311, 319, 326, 331, 333, 355, 357, 358, 366, 368, 369, 373, 385, 389, 390, 391, 395, 398, 399, 400, 401, 403, 404, 405, 419, 420, 424, 439, 441, 467, 483, 485, 486, 491, 496, 497, 522, 528, 531, 556, 558, 559, 635, 653, 658, 665, 671, 679, 694, 695, 696, 698, 701, 707], "int64": [8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 114, 115, 116, 120, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 150, 152, 153, 154, 155, 160, 170, 177, 179, 183, 184, 207, 212, 215, 224, 235, 237, 241, 242, 244, 246, 250, 252, 255, 262, 269, 279, 280, 281, 284, 285, 286, 287, 293, 294, 295, 303, 304, 308, 312, 313, 315, 318, 321, 324, 326, 329, 334, 335, 339, 351, 357, 359, 360, 361, 363, 365, 366, 367, 368, 369, 374, 377, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 412, 413, 415, 419, 420, 421, 422, 435, 441, 447, 448, 459, 460, 461, 465, 466, 467, 468, 471, 473, 486, 489, 499, 500, 503, 504, 563, 601, 639, 640, 641, 642, 645, 656, 679, 701, 702, 703, 705, 707, 709, 710, 712], "prefix": [9, 10, 280, 281, 656, 658, 665, 694], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 121, 126, 127, 132, 133, 148, 161, 166, 167, 218, 268, 280, 281, 285, 304, 313, 320, 325, 332, 336, 354, 384, 390, 395, 396, 397, 401, 402, 414, 431, 432, 469, 491, 496, 544, 577, 586, 591, 644, 653, 665, 668, 671, 678, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 117, 119, 126, 127, 128, 133, 139, 140, 141, 143, 149, 156, 161, 162, 165, 166, 168, 169, 171, 184, 185, 190, 197, 199, 200, 218, 249, 251, 265, 266, 272, 274, 280, 281, 286, 315, 325, 341, 354, 383, 388, 395, 396, 397, 402, 408, 427, 430, 431, 434, 448, 455, 456, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 583, 585, 609, 611, 614, 620, 633, 635, 643, 644, 653, 654, 656, 657, 658, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 689, 690, 696, 701, 703, 707, 709], "add": [9, 10, 43, 61, 71, 80, 166, 280, 281, 312, 332, 431, 459, 460, 656, 665, 696, 698, 699, 701, 707], "updat": [9, 10, 28, 73, 280, 281, 295, 341, 694, 695], "add_suffix": [9, 280], "suffix": [9, 10, 94, 280, 281, 694], "item_": [9, 280], "item_0": [9, 280], "item_1": [9, 280], "item_2": [9, 280], "item_3": [9, 280], "6": [9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 61, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 124, 126, 127, 140, 146, 147, 160, 177, 179, 187, 188, 189, 201, 212, 224, 252, 263, 280, 281, 284, 299, 300, 301, 302, 304, 308, 309, 312, 313, 324, 332, 336, 339, 347, 348, 351, 357, 363, 367, 375, 376, 395, 396, 408, 412, 413, 440, 441, 443, 460, 461, 465, 466, 469, 470, 471, 472, 473, 481, 482, 483, 484, 486, 493, 558, 559, 586, 589, 591, 616, 617, 618, 619, 622, 623, 625, 626, 636, 638, 645, 653, 658, 662, 679, 694, 701, 703, 705, 706, 707, 710, 712], "col_": [9, 280], "col_a": [9, 280], "col_b": [9, 280], "after": [10, 126, 281, 285, 395, 417, 459, 534, 543, 548, 553, 665, 668, 671, 694, 701, 707], "add_prefix": [10, 281], "_item": [10, 281], "0_item": [10, 281], "1_item": [10, 281], "2_item": [10, 281], "3_item": [10, 281], "_col": [10, 281], "a_col": [10, 281], "b_col": [10, 281], "aggreg": [11, 61, 127, 332, 396, 585, 609, 645, 700, 701, 704, 708], "more": [11, 14, 15, 19, 21, 36, 43, 68, 70, 137, 161, 166, 177, 185, 190, 197, 262, 285, 286, 287, 304, 312, 339, 406, 431, 467, 489, 496, 544, 591, 614, 620, 633, 665, 668, 669, 670, 671, 677, 679, 694, 695, 696, 697, 698, 699, 701, 706, 707, 709, 710, 711], "over": [11, 16, 17, 40, 77, 97, 137, 247, 406, 575, 586, 601, 694, 695, 698, 706, 707, 712], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 107, 112, 117, 118, 123, 124, 126, 127, 132, 133, 137, 148, 149, 158, 166, 167, 171, 177, 185, 190, 197, 214, 215, 247, 262, 274, 294, 313, 324, 362, 388, 392, 395, 396, 401, 402, 406, 414, 415, 424, 431, 432, 448, 465, 466, 467, 468, 470, 471, 476, 480, 497, 502, 527, 536, 544, 545, 547, 548, 549, 551, 561, 563, 566, 577, 583, 585, 611, 614, 620, 633, 635, 644, 653, 658, 663, 665, 667, 668, 669, 670, 673, 674, 675, 676, 677, 679, 694, 695, 696, 698, 701, 705, 706, 707, 710], "set": [11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 117, 121, 132, 143, 161, 171, 173, 178, 199, 212, 235, 241, 244, 249, 272, 284, 287, 291, 294, 304, 314, 339, 346, 347, 348, 357, 375, 376, 390, 401, 435, 436, 443, 455, 458, 460, 461, 465, 467, 482, 485, 492, 527, 529, 531, 534, 537, 543, 544, 545, 549, 551, 560, 583, 591, 609, 643, 653, 662, 665, 668, 670, 672, 677, 678, 694, 695, 696, 698, 699, 701, 706, 709, 710, 711], "accept": [11, 18, 19, 40, 80, 137, 207, 273, 286, 308, 359, 406, 485, 490, 497, 550, 566, 575, 585, 591, 611, 678, 694, 696, 698, 705, 706, 707, 712], "g": [11, 36, 111, 161, 304, 384, 467, 483, 485, 486, 491, 496, 522, 528, 531, 558, 559, 635, 665, 694, 695, 696, 698, 707], "sum": [11, 35, 61, 115, 116, 127, 132, 137, 155, 302, 332, 386, 387, 396, 401, 406, 422, 443, 566, 573, 585, 595, 611, 698, 701, 703, 704, 706, 708, 712], "min": [11, 33, 36, 121, 185, 190, 197, 246, 300, 304, 390, 566, 572, 574, 585, 594, 604, 611, 614, 620, 633, 706, 710], "max": [11, 32, 36, 61, 121, 132, 299, 304, 332, 390, 401, 566, 571, 574, 585, 593, 604, 609, 611, 701, 704, 706, 707], "per": [11, 16, 29, 70, 148, 179, 293, 414, 473, 491, 505, 506, 536, 566, 585, 589, 591, 609, 611, 665, 668, 695, 701, 703, 706, 709], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 61, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 115, 116, 117, 118, 137, 147, 154, 167, 171, 178, 179, 205, 224, 252, 273, 287, 295, 304, 312, 313, 325, 332, 352, 353, 354, 361, 362, 363, 365, 374, 377, 384, 386, 387, 388, 397, 406, 413, 421, 432, 485, 486, 496, 498, 501, 502, 522, 537, 541, 544, 549, 582, 601, 653, 656, 658, 665, 667, 668, 669, 673, 674, 675, 676, 678, 694, 695, 696, 698, 699, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712], "sever": [11, 689, 690, 695, 707, 709], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 163, 165, 166, 167, 169, 171, 285, 359, 384, 392, 395, 414, 428, 431, 432, 571, 572, 573, 578, 579, 580, 586, 593, 594, 595, 597, 598, 599, 600, 604, 605, 608, 612, 635, 645, 647, 648, 649, 651, 666, 667, 668, 670, 677, 678, 707], "bool_onli": [12, 13, 282, 283], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 115, 116, 147, 151, 154, 182, 282, 283, 299, 300, 301, 302, 352, 353, 361, 362, 363, 365, 386, 387, 413, 416, 421, 446, 710], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 115, 116, 141, 147, 151, 154, 182, 274, 282, 283, 291, 296, 298, 299, 300, 301, 302, 304, 352, 353, 361, 362, 363, 365, 386, 387, 413, 416, 421, 443, 446, 574, 589, 591, 710], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 151, 182, 282, 283, 287, 299, 300, 301, 302, 318, 416, 446, 670, 694, 703, 707], "empti": [12, 13, 75, 76, 81, 104, 105, 115, 116, 125, 141, 146, 154, 242, 282, 283, 315, 347, 348, 375, 376, 386, 387, 394, 412, 421, 480, 511, 522, 534, 543, 656, 665, 707, 710], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 121, 126, 132, 137, 200, 213, 224, 251, 252, 282, 283, 319, 331, 341, 355, 373, 390, 395, 401, 406, 456, 522, 561, 653, 673, 674, 675, 676, 678, 710, 712], "zero": [12, 13, 23, 282, 283, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 521, 665, 668, 707], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 115, 116, 123, 125, 126, 137, 143, 147, 151, 154, 161, 182, 215, 242, 274, 282, 283, 284, 294, 297, 341, 352, 353, 359, 361, 363, 365, 386, 387, 394, 395, 406, 413, 416, 421, 446, 451, 485, 486, 491, 496, 528, 560, 589, 609, 644, 671, 673, 674, 676, 686, 694, 695, 696, 698, 699, 701, 704, 707, 711], "ignore_index": [14, 45, 52, 137, 148, 149, 284, 314, 321, 406, 414, 415, 458, 475], "verify_integr": [14, 143, 260, 284], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 103, 106, 140, 148, 149, 179, 212, 224, 237, 246, 252, 268, 274, 286, 314, 325, 332, 354, 367, 374, 377, 408, 414, 415, 443, 458, 475, 653, 684, 694, 695, 701, 702, 704, 706, 712], "end": [14, 19, 148, 149, 185, 190, 197, 246, 286, 316, 414, 415, 475, 490, 495, 496, 501, 502, 532, 540, 541, 544, 547, 548, 550, 614, 619, 620, 622, 623, 625, 626, 629, 633, 665, 668, 671, 707], "caller": [14, 28, 55, 64, 73, 84, 88, 121, 125, 137, 183, 242, 244, 295, 325, 336, 341, 354, 359, 360, 390, 394, 406, 447, 480, 544, 549], "ad": [14, 459, 460, 467, 531, 694, 695, 696, 701], "do": [14, 15, 44, 46, 50, 123, 128, 143, 212, 224, 252, 268, 284, 285, 313, 315, 320, 392, 397, 466, 467, 604, 665, 669, 670, 694, 695, 696, 698, 701, 702, 703, 704, 707, 710, 712], "concat": [14, 284, 480, 661, 684, 696, 708], "gener": [14, 15, 36, 37, 51, 70, 137, 142, 209, 243, 284, 304, 305, 406, 409, 482, 529, 530, 574, 591, 644, 645, 658, 684, 694, 695, 696, 698, 700, 704, 707, 708], "concaten": [14, 284, 458, 469, 480, 487, 522, 669, 701, 706, 712], "unchang": [14, 28, 295, 561], "computation": 14, "intens": [14, 703], "than": [14, 15, 46, 60, 62, 70, 85, 87, 115, 116, 123, 137, 154, 179, 291, 331, 333, 355, 358, 386, 387, 392, 406, 421, 443, 452, 453, 454, 467, 485, 489, 494, 496, 505, 506, 534, 537, 543, 560, 561, 578, 579, 580, 591, 597, 598, 599, 600, 605, 608, 612, 640, 642, 658, 694, 695, 696, 698, 701, 702, 705, 707, 710, 712], "better": [14, 61, 137, 332, 406, 665, 695, 706], "solut": [14, 142, 243, 409, 694, 704], "those": [14, 15, 36, 121, 285, 304, 390, 458, 522, 566, 585, 611, 685, 694, 695, 698, 707], "origin": [14, 21, 28, 51, 88, 93, 124, 127, 139, 178, 183, 199, 200, 249, 251, 272, 287, 295, 316, 360, 396, 397, 441, 447, 455, 456, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 546, 643, 644, 646, 647, 648, 649, 650, 651, 652, 677, 694, 704], "onc": [14, 137, 406, 496, 668, 694, 696, 698, 701], "ab": [14, 258, 482, 491, 501, 525, 541, 542, 548, 707, 710], "df2": [14, 458, 658, 674, 701, 707, 710], "8": [14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 115, 116, 126, 127, 132, 147, 151, 154, 156, 159, 161, 177, 182, 183, 187, 189, 291, 299, 300, 301, 302, 304, 308, 312, 313, 329, 336, 339, 352, 353, 357, 360, 361, 362, 365, 386, 387, 395, 396, 401, 413, 416, 421, 425, 441, 446, 447, 469, 475, 483, 484, 498, 558, 559, 586, 589, 591, 616, 617, 618, 619, 622, 623, 636, 644, 645, 653, 658, 668, 673, 674, 675, 676, 679, 698, 701, 703, 705, 707, 710], "With": [14, 28, 70, 133, 196, 284, 291, 295, 314, 402, 443, 632, 668, 698, 701, 703, 704, 707], "follow": [14, 15, 70, 106, 127, 161, 285, 308, 396, 397, 485, 522, 534, 543, 560, 566, 585, 611, 635, 644, 665, 670, 678, 683, 694, 695, 696, 698, 699, 704, 706, 707, 709, 712], "while": [14, 97, 161, 171, 293, 586, 658, 696, 698, 702, 707, 710], "recommend": [14, 123, 124, 695, 696], "show": [14, 70, 74, 75, 76, 104, 105, 127, 347, 348, 375, 376, 396, 673, 674, 675, 676, 695, 698, 701, 707], "wai": [14, 61, 126, 332, 395, 645, 677, 694, 695, 696, 698, 703, 705, 707, 710, 712], "sourc": [14, 16, 17, 164, 248, 429, 655, 664, 665, 669, 670, 695, 696, 702], "less": [14, 46, 85, 87, 291, 355, 358, 452, 453, 454, 467, 560, 561, 640, 642, 668, 695], "effici": [14, 16, 93, 173, 436, 697, 698, 710], "abov": [14, 15, 61, 143, 285, 332, 694, 698, 704, 707, 710], "func": [15, 16, 17, 18, 111, 285, 384, 566, 585, 586, 604, 611, 645, 701], "raw": [15, 643, 664, 669, 670], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 121, 148, 149, 341, 361, 362, 365, 390, 414, 415, 458, 710], "reli": [15, 285, 697, 698, 701, 712], "numba": [15, 16, 119, 285, 645, 708, 712], "jit": [15, 16, 285, 707, 712], "compil": [15, 119, 285, 486, 528, 537, 539, 645, 696, 707, 712], "thu": [15, 285, 471, 697, 705, 707], "within": [15, 55, 61, 84, 132, 285, 325, 332, 354, 401, 485, 494, 505, 506, 529, 530, 538, 578, 579, 580, 583, 597, 598, 599, 600, 605, 608, 612, 665, 668, 671, 689, 694, 696, 707], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 123, 126, 285, 290, 292, 304, 323, 324, 341, 382, 383, 392, 395, 544, 549, 567, 568, 576, 577, 581, 586, 587, 588, 596, 603, 695, 702, 708], "cuda": [15, 16, 17, 285, 643, 644, 645, 697, 700, 701, 703, 707, 709], "python": [15, 18, 21, 43, 119, 244, 285, 287, 312, 417, 480, 490, 507, 508, 509, 510, 516, 517, 518, 521, 544, 549, 586, 635, 645, 664, 665, 668, 669, 670, 677, 694, 696, 697, 698, 700, 701, 705, 707, 710, 712], "target": [15, 123, 285, 488, 538, 694, 695], "see": [15, 16, 19, 28, 43, 48, 50, 61, 119, 161, 166, 185, 190, 197, 285, 286, 295, 312, 318, 320, 332, 431, 544, 549, 566, 585, 591, 611, 614, 620, 633, 664, 665, 667, 668, 669, 670, 677, 694, 695, 699, 701, 704, 706, 707, 709, 711, 712], "guid": [15, 166, 285, 431, 566, 585, 611, 696, 699, 700, 707], "user": [15, 16, 17, 51, 166, 273, 285, 431, 566, 585, 611, 645, 678, 694, 695, 696, 698, 699, 700, 701, 704, 709, 712], "defin": [15, 17, 37, 46, 132, 142, 209, 243, 285, 305, 328, 401, 409, 533, 586, 644, 645, 653, 694, 698, 700, 701, 703, 708, 712], "udf": [15, 285, 645, 703, 708, 712], "through": [15, 121, 285, 390, 485, 486, 491, 496, 528, 556, 684, 698, 707, 709, 710], "strings_udf": [15, 285, 707], "rapid": [15, 146, 285, 412, 497, 525, 528, 540, 542, 558, 559, 656, 664, 668, 696, 701, 703, 707, 710], "librari": [15, 166, 285, 431, 544, 549, 560, 635, 677, 697, 700, 703, 704, 708, 709, 712], "includ": [15, 28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 117, 133, 141, 167, 171, 172, 179, 192, 274, 285, 291, 295, 304, 332, 347, 348, 361, 362, 364, 365, 367, 375, 376, 381, 388, 402, 432, 443, 459, 465, 466, 467, 498, 510, 517, 524, 527, 531, 545, 548, 551, 569, 574, 578, 579, 580, 590, 597, 598, 599, 600, 605, 608, 612, 622, 653, 658, 664, 665, 667, 668, 669, 670, 671, 694, 695, 696, 697, 698, 701, 705, 707, 709, 710, 712], "subset": [15, 45, 46, 55, 84, 141, 158, 166, 179, 247, 285, 325, 354, 424, 431, 665, 704, 706, 707], "expect": [15, 26, 88, 111, 117, 148, 167, 183, 285, 294, 360, 384, 414, 432, 447, 485, 558, 604, 644, 668, 694, 695, 698, 702, 703, 704, 707], "refer": [15, 28, 36, 43, 119, 285, 295, 304, 312, 498, 539, 699, 700, 705, 707, 710, 711], "caveat": [15, 285, 695, 708], "referenc": [15, 285, 710], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 127, 133, 141, 148, 158, 164, 166, 167, 169, 171, 173, 192, 196, 217, 236, 240, 247, 248, 256, 260, 275, 296, 298, 304, 309, 313, 315, 327, 330, 347, 348, 375, 376, 384, 396, 402, 414, 424, 429, 431, 432, 436, 438, 465, 467, 485, 487, 488, 531, 533, 534, 543, 591, 601, 622, 632, 635, 644, 653, 655, 656, 658, 670, 671, 673, 674, 676, 677, 694, 695, 696, 698, 701, 703, 704, 706, 707, 709, 710, 712], "expand": [15, 491, 534, 543, 544, 549, 697], "reduc": [15, 694], "posit": [15, 64, 68, 111, 140, 145, 158, 218, 220, 247, 285, 336, 339, 384, 408, 411, 424, 471, 497, 502, 505, 506, 522, 546, 547, 548, 561, 563, 583, 591, 604, 708], "argument": [15, 16, 17, 19, 20, 21, 31, 61, 90, 111, 123, 124, 143, 148, 151, 161, 166, 167, 177, 182, 246, 285, 286, 287, 332, 362, 384, 397, 414, 416, 431, 432, 446, 458, 566, 585, 604, 611, 644, 656, 665, 667, 668, 670, 677, 678, 679, 683, 694, 695, 698, 703, 711], "simpl": [15, 467, 694, 698, 701, 707], "variabl": [15, 46, 92, 94, 119, 132, 133, 315, 401, 402, 645, 653, 662, 694, 701, 709], "could": [15, 591, 698, 703, 707], "def": [15, 16, 17, 132, 285, 401, 522, 529, 586, 645, 665, 694, 696, 701, 703, 705, 707], "f": [15, 36, 111, 268, 285, 304, 384, 497, 522, 537, 546, 558, 559, 677, 696, 707], "els": [15, 75, 76, 236, 285, 347, 348, 696, 701, 703, 707], "awar": [15, 293, 707], "manner": [15, 16, 285], "mai": [15, 16, 17, 21, 61, 137, 140, 166, 227, 268, 285, 287, 332, 359, 406, 408, 431, 485, 488, 505, 506, 577, 591, 665, 668, 669, 670, 671, 683, 686, 694, 695, 696, 697, 698, 701, 702, 703, 706, 707], "condition": [15, 285, 694, 707], "mix": [15, 36, 117, 166, 227, 304, 431, 507, 678, 702, 707], "common": [15, 36, 94, 142, 224, 243, 285, 304, 409, 677, 694, 695, 698, 707], "rather": [15, 123, 162, 179, 392, 427, 443, 694, 696, 698, 702, 707, 712], "howev": [15, 171, 285, 485, 531, 591, 694, 695, 696, 698, 701, 705, 707, 710], "promot": [15, 707], "safe": [15, 701, 707], "regardless": [15, 36, 119, 304, 678, 704, 707], "op": [15, 707], "against": [15, 16, 17, 50, 320, 488, 507], "v": [15, 148, 149, 414, 415, 539, 577, 697, 702], "w": [15, 127, 166, 396, 431, 483, 665], "z": [15, 16, 17, 44, 54, 126, 161, 313, 324, 392, 395, 472, 493, 562, 704], "manipul": [15, 285, 684, 700, 701], "long": [15, 92, 285, 560, 662, 668, 694], "neither": [15, 28, 256, 257, 268, 285, 291, 295, 702], "modifi": [15, 51, 128, 143, 178, 244, 285, 397, 441, 577, 668], "place": [15, 45, 73, 88, 123, 126, 128, 133, 142, 143, 148, 167, 178, 183, 243, 285, 341, 360, 395, 397, 402, 409, 414, 432, 441, 447, 459, 461, 467, 480, 492, 493, 494, 522, 665, 669, 670, 709, 710], "nor": [15, 28, 166, 268, 285, 295, 431, 702, 712], "creat": [15, 28, 123, 125, 127, 128, 143, 166, 199, 200, 205, 242, 244, 249, 251, 272, 285, 295, 327, 328, 329, 394, 396, 397, 431, 455, 456, 534, 539, 543, 591, 643, 665, 694, 696, 701, 703, 704, 705, 706, 707], "st": [15, 285, 707], "str_col": [15, 707], "scale": [15, 701, 704, 705, 707], "len": [15, 16, 171, 285, 484, 644, 684, 701, 707], "elif": [15, 285, 707], "startswith": [15, 285, 684, 707], "42": [15, 185, 285, 706, 707], "abc": [15, 258, 285, 315, 359, 478, 482, 484, 489, 495, 501, 503, 504, 511, 513, 514, 522, 524, 529, 540, 541, 548, 665, 705, 707, 710], "some_exampl": [15, 285, 707], "sinc": [15, 167, 168, 171, 218, 285, 377, 432, 434, 645, 694, 695, 696, 698, 707, 710], "requir": [15, 29, 37, 38, 39, 65, 66, 115, 116, 132, 137, 142, 154, 171, 209, 210, 211, 222, 223, 243, 285, 305, 306, 307, 337, 338, 386, 387, 401, 406, 409, 421, 578, 579, 580, 589, 591, 597, 598, 599, 600, 605, 608, 612, 643, 670, 671, 694, 695, 698, 706, 707], "creation": [15, 38, 210, 285, 306, 708], "upper": [15, 26, 36, 285, 294, 304, 526, 531, 552, 553, 671, 684], "rais": [15, 21, 44, 55, 57, 58, 84, 124, 126, 141, 178, 184, 217, 263, 285, 287, 313, 316, 325, 327, 330, 346, 354, 395, 466, 471, 485, 501, 522, 534, 537, 541, 543, 560, 653, 657, 672, 677, 678, 695, 696, 698, 703, 704, 705, 707], "attributeerror": [15, 285], "complet": [15, 285, 696, 701, 709], "http": [15, 43, 161, 285, 312, 488, 544, 549, 558, 559, 591, 645, 664, 665, 668, 669, 670, 671, 677, 696, 709], "doc": [15, 43, 285, 312, 544, 549, 635, 668, 677, 703, 712], "ai": [15, 103, 106, 146, 285, 412, 525, 528, 540, 542, 558, 559, 664], "api": [15, 16, 110, 285, 383, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 709, 710, 711, 712], "stabl": [15, 19, 285, 286, 645, 709], "user_guid": [15, 285, 696], "html": [15, 43, 285, 312, 544, 549, 558, 559, 645, 677, 696], "incol": [16, 17, 707], "outcol": [16, 17, 707], "pessimistic_nul": [16, 17], "chunk": [16, 171, 586, 671], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 124, 321, 531, 586, 645, 701, 703, 707, 708], "execut": [16, 17, 696, 701, 707, 712], "Or": [16, 17, 123, 705, 707], "dictionari": [16, 17, 21, 111, 142, 243, 287, 384, 409, 565, 604, 656, 670, 698, 699, 705, 707], "map": [16, 17, 61, 75, 76, 104, 105, 111, 124, 169, 200, 236, 240, 251, 332, 347, 348, 375, 376, 384, 456, 493, 556, 565, 566, 585, 604, 611, 656, 665, 668, 695, 697, 698, 701, 706, 707, 710], "col1": [16, 17, 707], "arg1": [16, 17, 111, 384, 707], "output": [16, 17, 36, 51, 61, 70, 109, 119, 137, 139, 161, 164, 167, 169, 171, 172, 173, 248, 274, 304, 332, 406, 429, 432, 436, 448, 469, 487, 494, 544, 549, 586, 644, 645, 656, 658, 668, 671, 673, 674, 675, 676, 684, 694, 696, 698, 700, 704, 706, 707, 708, 712], "extra": [16, 17, 21, 124, 161, 287, 532, 665], "These": [16, 17, 94, 645, 686, 687, 689, 690, 691, 694, 695, 696, 698, 705, 707, 710], "directli": [16, 17, 44, 178, 244, 313, 459, 685, 698, 701, 703, 707], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 121, 125, 126, 133, 137, 140, 148, 167, 169, 171, 178, 205, 209, 210, 211, 218, 222, 223, 242, 246, 304, 305, 306, 307, 337, 338, 390, 392, 394, 395, 402, 406, 408, 414, 432, 465, 467, 489, 520, 539, 583, 644, 653, 658, 670, 671, 685, 694, 695, 696, 698, 701, 707, 712], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 115, 116, 117, 125, 132, 154, 159, 177, 178, 187, 189, 215, 240, 242, 246, 274, 297, 315, 318, 324, 375, 376, 386, 387, 394, 401, 421, 425, 441, 442, 443, 458, 492, 496, 522, 578, 579, 580, 591, 597, 598, 599, 600, 605, 608, 612, 616, 618, 644, 646, 653, 656, 665, 668, 678, 679, 694, 695, 698, 702, 710, 712], "underli": [16, 17, 124, 146, 181, 261, 372, 393, 412, 445, 684, 694, 698, 701, 710], "garbag": [16, 17, 329], "chunksiz": [16, 161, 667, 668], "integ": [16, 19, 51, 56, 68, 123, 125, 128, 129, 133, 169, 171, 177, 196, 218, 225, 226, 227, 228, 229, 233, 234, 242, 255, 258, 260, 262, 268, 271, 273, 274, 286, 322, 326, 339, 346, 392, 394, 397, 398, 402, 457, 471, 472, 478, 484, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 523, 554, 619, 632, 653, 665, 668, 677, 678, 679, 694, 698, 701, 702, 705, 710], "offset": [16, 55, 84, 127, 132, 171, 325, 354, 396, 401, 665, 668, 671, 698], "start": [16, 23, 94, 119, 127, 146, 161, 273, 289, 316, 351, 396, 412, 495, 501, 502, 528, 531, 537, 540, 541, 546, 547, 548, 549, 550, 558, 559, 619, 622, 623, 625, 626, 629, 664, 665, 667, 668, 669, 671, 677, 697, 698], "span": 16, "th": [16, 322, 471, 472, 489], "size": [16, 26, 75, 76, 93, 104, 105, 132, 169, 171, 205, 236, 240, 294, 347, 348, 375, 376, 401, 480, 484, 489, 546, 609, 653, 658, 665, 668, 671, 694, 698, 706, 707, 709], "thread": [16, 17, 665, 701, 707], "block": [16, 531, 665, 671], "kernel": [16, 17, 119, 708], "foral": [16, 707], "built": [16, 531, 698, 700, 701, 703], "queri": [16, 166, 431, 498, 701, 704], "driver": [16, 701], "optim": [16, 70, 670, 709, 712], "launch": [16, 707], "configur": [16, 664, 665, 669, 670, 671, 695, 707, 711], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 209, 210, 211, 222, 223, 305, 306, 307, 337, 338, 684], "It": [16, 64, 97, 137, 148, 205, 218, 336, 359, 406, 414, 658, 694, 695, 697, 707, 710, 712], "good": [16, 644, 653, 695, 697, 701], "point": [16, 73, 117, 118, 140, 167, 341, 388, 408, 432, 484, 530, 554, 555, 582, 665, 671, 697, 698, 705, 707, 708, 710], "ineffici": 16, "Its": [16, 698], "maximum": [16, 26, 89, 169, 171, 258, 294, 361, 493, 560, 604, 644, 653, 665, 705, 709], "possibl": [16, 73, 166, 205, 341, 431, 668, 678, 694, 695, 696, 698, 707, 709, 710, 712], "avail": [16, 166, 431, 486, 534, 543, 654, 664, 665, 669, 670, 683, 685, 689, 696, 701, 706, 707, 709, 710], "resourc": [16, 70, 694], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 115, 116, 123, 124, 125, 132, 133, 137, 146, 151, 154, 159, 167, 169, 171, 182, 239, 242, 262, 265, 266, 271, 288, 296, 297, 304, 322, 329, 336, 372, 378, 381, 383, 386, 387, 394, 401, 402, 406, 412, 416, 421, 425, 432, 442, 443, 446, 450, 452, 453, 454, 458, 478, 480, 482, 486, 489, 494, 497, 509, 524, 529, 530, 533, 537, 544, 549, 554, 569, 578, 579, 580, 583, 589, 590, 591, 597, 598, 599, 600, 601, 605, 608, 612, 619, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 656, 661, 664, 665, 667, 668, 669, 671, 673, 674, 675, 676, 677, 694, 695, 696, 698, 701, 705, 706, 707, 709], "concurr": [16, 17], "To": [16, 36, 45, 126, 171, 304, 395, 443, 534, 604, 665, 668, 669, 670, 694, 696, 698, 703, 706, 707, 710, 711, 712], "access": [16, 36, 166, 304, 431, 684, 687, 689, 690, 691, 698, 701, 707, 709], "count": [16, 36, 70, 89, 90, 95, 97, 107, 132, 159, 179, 304, 361, 362, 365, 367, 381, 401, 425, 443, 570, 574, 592, 645, 684, 701, 704, 706, 707], "threadidx": [16, 707], "blockdim": [16, 707], "respect": [16, 61, 94, 126, 167, 332, 395, 432, 467, 544, 549, 563, 653, 668, 674, 694, 703, 705], "document": [16, 544, 677, 694, 695, 697, 698, 699, 701, 707, 712], "In": [16, 26, 61, 106, 124, 166, 285, 294, 332, 397, 431, 522, 544, 549, 586, 677, 694, 695, 696, 697, 698, 702, 703, 705, 707, 708, 710, 712], "below": [16, 26, 28, 36, 48, 294, 295, 304, 318, 591, 694, 701, 707, 712], "invok": [16, 17, 694, 698], "By": [16, 36, 45, 61, 70, 97, 121, 133, 166, 167, 179, 212, 304, 332, 390, 402, 431, 432, 480, 658, 665, 670, 694, 698, 701, 703, 707, 710, 712], "loop": [16, 17, 698, 703, 707], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 285, 533, 561, 669, 670, 698, 705, 706, 707, 710, 712], "so": [17, 132, 171, 179, 268, 377, 401, 443, 694, 695, 696, 698, 700, 703, 704, 707, 710, 712], "must": [17, 37, 50, 51, 74, 80, 94, 109, 124, 126, 127, 132, 133, 139, 140, 142, 149, 159, 166, 168, 178, 185, 190, 197, 205, 209, 243, 244, 258, 274, 305, 320, 329, 395, 396, 401, 402, 408, 409, 415, 425, 431, 434, 465, 471, 472, 480, 486, 498, 614, 620, 633, 653, 665, 668, 669, 670, 674, 675, 694, 695, 698, 701, 707, 710, 712], "independ": [17, 696, 707], "stride": [17, 169, 644], "improv": [17, 665, 669], "parallel": [17, 183, 447, 665, 701, 702, 704, 707, 709, 712], "resembl": 17, "code": [17, 44, 146, 156, 246, 260, 313, 322, 328, 412, 484, 694, 696, 697, 698, 701, 707], "nelem": [17, 703], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 707], "zip": [17, 167, 432, 665, 668, 701, 707], "callabl": [18, 88, 111, 148, 167, 183, 360, 384, 414, 432, 447, 566, 585, 589, 604, 609, 611, 706], "na_act": [18, 359], "elementwis": [18, 645], "everi": [18, 46, 74, 537, 566, 585, 611, 698, 701, 707], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 124, 126, 133, 169, 178, 287, 304, 313, 341, 359, 364, 395, 397, 402, 458, 469, 480, 574, 656, 665, 667, 669, 673, 674, 676, 677, 678, 707, 710], "propag": [18, 21, 54, 287, 324, 359, 544, 549, 577, 707, 709, 710], "without": [18, 28, 36, 44, 70, 124, 244, 253, 295, 304, 313, 359, 480, 531, 544, 548, 549, 665, 674, 675, 676, 694, 695, 700, 703, 707], "them": [18, 61, 332, 359, 443, 487, 492, 494, 645, 677, 696, 698, 705, 706, 707, 712], "kind": [19, 94, 127, 148, 149, 220, 244, 286, 396, 414, 415, 475, 705], "quicksort": [19, 149, 286, 415, 475], "ascend": [19, 121, 140, 148, 149, 179, 246, 286, 377, 390, 408, 414, 415, 443, 475, 601], "na_posit": [19, 140, 148, 149, 246, 286, 408, 414, 415, 475], "last": [19, 36, 45, 54, 64, 103, 106, 124, 140, 148, 149, 157, 213, 246, 286, 304, 314, 324, 336, 374, 377, 408, 414, 415, 423, 459, 475, 501, 534, 541, 543, 577, 623, 625, 627, 644, 665, 671, 677, 707], "would": [19, 140, 166, 246, 285, 286, 408, 431, 538, 601, 677, 694, 696, 701, 707, 710], "effect": [19, 61, 123, 286, 332, 392, 694, 702, 704], "compat": [19, 22, 67, 93, 177, 218, 286, 315, 364, 668, 679, 696, 697, 698, 700, 705, 708, 709], "mergesort": [19, 286], "heapsort": [19, 286], "choic": [19, 70, 286, 677, 696, 703], "algorithm": [19, 117, 286, 388, 488, 489, 535, 698], "descend": [19, 103, 140, 148, 149, 179, 246, 286, 374, 408, 414, 415, 443, 475], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 121, 127, 140, 142, 148, 149, 156, 167, 179, 184, 196, 213, 243, 246, 262, 285, 286, 304, 308, 314, 320, 332, 336, 374, 377, 390, 396, 397, 408, 409, 414, 415, 432, 443, 475, 491, 520, 526, 534, 544, 549, 552, 553, 557, 561, 575, 601, 624, 626, 628, 632, 644, 653, 665, 668, 671, 677, 694, 695, 696, 698, 701, 707], "put": [19, 148, 149, 246, 286, 414, 415, 475, 697], "begin": [19, 148, 149, 246, 286, 414, 415, 475, 502, 532, 547, 548, 549, 626, 665, 668, 671, 701], "cupi": [19, 31, 61, 117, 137, 140, 162, 180, 235, 246, 259, 286, 322, 332, 406, 408, 427, 444, 644, 694, 698, 700, 701, 708, 710, 712], "ndarrai": [19, 59, 92, 137, 162, 168, 180, 181, 184, 192, 236, 240, 246, 259, 274, 286, 322, 406, 427, 434, 444, 445, 644, 653, 662, 678, 701, 703, 707], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 127, 132, 141, 200, 251, 274, 285, 286, 294, 313, 325, 336, 354, 377, 396, 401, 456, 476, 485, 489, 499, 500, 509, 524, 644, 663, 667, 668, 677, 694, 695, 698, 701, 705, 707], "int32": [19, 21, 63, 140, 246, 286, 287, 309, 335, 408, 443, 472, 474, 478, 484, 486, 488, 495, 501, 523, 535, 540, 541, 554, 644, 653, 665, 698, 701, 705, 707, 709], "foo": [19, 47, 161, 286, 397, 537, 665, 694, 695, 696, 701], "idx": [19, 75, 76, 104, 105, 207, 218, 225, 226, 227, 228, 229, 233, 234, 235, 244, 246, 247, 250, 262, 286, 329, 347, 348, 375, 376, 485, 534, 543, 701], "keyword": [20, 31, 90, 111, 123, 124, 237, 362, 384, 392, 458, 544, 549, 604, 667, 701, 707], "error": [21, 44, 124, 161, 166, 178, 285, 287, 313, 346, 431, 653, 667, 677, 678, 695, 705, 707, 709], "cast": [21, 51, 115, 116, 123, 154, 155, 287, 386, 387, 392, 421, 422, 468, 668, 702, 710], "altern": [21, 44, 46, 111, 287, 313, 384, 538, 604, 665, 694, 696], "col": [21, 72, 287, 694, 703], "where": [21, 38, 44, 46, 51, 61, 70, 75, 76, 88, 103, 104, 105, 106, 111, 117, 123, 125, 140, 151, 169, 182, 210, 235, 242, 287, 306, 313, 332, 347, 348, 360, 375, 376, 377, 384, 388, 392, 394, 408, 416, 446, 482, 489, 495, 498, 501, 505, 506, 540, 541, 604, 641, 650, 652, 667, 694, 695, 696, 698, 701, 702, 706, 709], "specif": [21, 45, 51, 94, 133, 287, 402, 683, 689, 694, 695, 696, 697, 698, 701, 710, 711], "deep": [21, 28, 70, 93, 164, 208, 248, 287, 295, 364, 429, 655], "henc": [21, 287, 710], "chang": [21, 28, 110, 123, 151, 156, 178, 182, 287, 295, 314, 383, 392, 393, 416, 443, 446, 466, 467, 531, 552, 694, 695, 710], "warn": [21, 124, 287, 677, 695, 701, 710], "control": [21, 36, 124, 170, 287, 304, 435, 531, 644, 665, 694, 709], "except": [21, 45, 64, 124, 127, 192, 213, 224, 252, 287, 314, 336, 396, 501, 541, 559, 622, 645, 665, 677, 697, 698, 706, 709], "invalid": [21, 57, 58, 124, 217, 263, 287, 327, 330, 672, 677, 678], "suppress": [21, 44, 124, 287, 313], "On": [21, 124, 287, 467, 701, 704], "constructor": [21, 287, 684, 696, 698, 701, 703, 710], "20": [21, 40, 44, 50, 61, 68, 124, 125, 156, 166, 217, 250, 287, 313, 320, 330, 332, 339, 392, 393, 394, 431, 435, 483, 542, 664, 701, 703, 704, 707], "30": [21, 43, 44, 61, 63, 68, 124, 125, 127, 156, 185, 217, 287, 312, 313, 330, 332, 335, 339, 392, 393, 394, 396, 435, 574, 619, 623, 625, 626, 627, 628, 629, 635, 664, 677, 701], "float32": [21, 287, 443, 678, 705, 709], "custom": [21, 132, 287, 401, 645, 662, 670, 694, 695, 698, 704, 711, 712], "cat_dtyp": [21, 287], "enabl": [21, 169, 287, 665, 668, 694, 696, 698, 705, 709], "s1": [21, 284, 287, 458, 469, 485, 507, 508, 517], "s2": [21, 284, 287, 397, 458, 468, 469, 485, 507, 517], "alia": [22, 67, 230, 342, 351], "loc": [22, 44, 71, 220, 258, 268, 313, 701, 704, 707], "cdf1": 23, "k2": [23, 668], "temp": [23, 264, 492, 701], "stop": [23, 110, 146, 273, 289, 351, 383, 412, 546, 547, 548, 667], "step": [23, 273, 289, 351, 467, 546], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 124, 126, 128, 143, 148, 149, 183, 241, 244, 290, 292, 293, 294, 313, 314, 315, 323, 324, 341, 360, 382, 393, 395, 397, 414, 415, 447, 459, 460, 461, 465, 466, 467, 475, 577, 710], "synonym": [24, 25, 53, 108, 290, 292, 323, 382], "fillna": [24, 25, 46, 53, 108, 126, 290, 292, 315, 323, 382, 395, 701, 702, 704, 708], "bfill": [24, 54, 127, 258, 290, 324, 396, 577], "lower": [26, 36, 117, 118, 294, 304, 388, 479, 531, 552, 553, 556, 557, 582, 671, 684, 698, 701], "trim": [26, 294, 532], "threshold": [26, 294, 591], "assign": [26, 51, 121, 124, 139, 293, 294, 390, 435, 701, 704, 710], "outsid": [26, 166, 294, 431, 458, 707], "boundari": [26, 132, 291, 294, 401, 707], "singular": [26, 294], "latter": [26, 294, 694, 695, 696, 703], "case": [26, 51, 64, 94, 117, 124, 148, 203, 224, 252, 255, 294, 336, 397, 414, 457, 485, 488, 522, 528, 531, 537, 544, 644, 677, 694, 695, 696, 698, 702, 703, 706, 707, 710, 712], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 115, 116, 137, 148, 154, 166, 183, 185, 190, 197, 210, 222, 274, 288, 294, 306, 314, 332, 337, 360, 386, 387, 406, 414, 421, 431, 435, 447, 467, 531, 558, 559, 566, 578, 579, 580, 585, 597, 598, 599, 600, 605, 608, 611, 612, 614, 620, 633, 665, 669, 673, 674, 675, 676, 694, 695, 698, 703, 706, 707, 708, 709, 710, 712], "array_lik": [26, 294], "minimum": [26, 29, 95, 132, 294, 296, 365, 401, 481, 493, 494, 525, 533, 542, 561, 589, 591, 604, 653, 694], "sr": [26, 127, 137, 285, 294, 351, 396, 406, 426, 443, 488, 494, 538, 707], "t": [28, 43, 55, 84, 93, 97, 107, 117, 124, 137, 171, 179, 185, 190, 194, 197, 295, 312, 325, 354, 367, 381, 406, 443, 483, 490, 512, 518, 522, 527, 531, 532, 545, 551, 569, 590, 614, 620, 630, 633, 668, 694, 701, 702, 703, 704, 707, 710], "modif": [28, 295], "reflect": [28, 43, 295, 312, 695], "shallow": [28, 295], "vice": [28, 295, 552], "versa": [28, 295, 552], "s_copi": [28, 295], "versu": [28, 295, 695, 710], "share": [28, 295, 458, 694, 695, 698], "remain": [28, 112, 262, 295, 480, 526, 552, 553, 557, 561, 663, 694], "pearson": [29, 147, 288, 296, 413, 589, 706], "min_period": [29, 132, 296, 298, 401, 589, 591, 645, 707], "correl": [29, 288, 296, 589, 591], "matrix": [29, 31, 489, 589, 591, 708], "spearman": [29, 296, 589], "standard": [29, 151, 161, 193, 296, 416, 540, 544, 549, 556, 607, 629, 635, 650, 665, 694, 695, 696, 698, 701, 704, 707], "coeffici": [29, 296, 589], "rank": [29, 296], "observ": [29, 61, 132, 264, 296, 297, 332, 401, 577, 589, 591, 601, 646, 701], "pair": [29, 77, 126, 161, 395, 589, 591, 665, 668, 670], "have": [29, 36, 48, 50, 55, 61, 74, 84, 94, 97, 106, 109, 111, 121, 123, 127, 137, 141, 170, 171, 178, 179, 274, 296, 304, 318, 320, 325, 332, 354, 384, 390, 396, 406, 435, 464, 480, 489, 499, 500, 522, 589, 591, 645, 662, 668, 694, 695, 696, 698, 701, 703, 706, 707, 710], "valid": [29, 46, 115, 116, 132, 133, 154, 260, 296, 315, 329, 386, 387, 401, 402, 421, 486, 498, 522, 577, 578, 579, 580, 589, 591, 597, 598, 599, 600, 605, 608, 612, 668, 672, 694, 696, 698, 699, 709], "request": [29, 90, 91, 161, 171, 218, 258, 267, 362, 363, 665], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 115, 116, 117, 121, 147, 151, 154, 182, 352, 353, 361, 362, 363, 365, 386, 387, 390, 413, 416, 421, 446, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612], "cell": [30, 703, 707], "nat": [30, 46, 75, 76, 97, 104, 105, 184, 347, 348, 367, 375, 376, 629, 677, 710], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 161, 213, 313, 315, 318, 320, 347, 348, 367, 375, 376, 467, 522, 645, 665, 694, 696, 698, 707, 710], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 161, 183, 236, 240, 314, 315, 347, 348, 360, 375, 376, 447, 522, 665, 668, 675, 694], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 347, 348, 375, 376], "24": [30, 32, 33, 34, 35, 61, 91, 93, 115, 116, 127, 128, 132, 299, 300, 301, 302, 332, 363, 386, 387, 396, 401, 483, 574, 701, 710], "21": [30, 127, 132, 133, 396, 401, 402, 483, 701, 706], "26": [30, 43, 61, 296, 298, 312, 332, 483, 574, 623, 625, 626, 701, 703], "covari": [31, 298, 591], "cumul": [32, 33, 34, 35, 299, 300, 301, 302, 570, 571, 572, 573, 592, 593, 594, 595, 710], "indexedfram": [32, 33, 34, 35, 698], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 157, 183, 291, 297, 299, 300, 301, 302, 315, 324, 332, 336, 347, 348, 360, 363, 375, 376, 423, 435, 447, 483, 505, 506, 522, 530, 531, 532, 535, 554, 555, 629, 707], "cumsum": [32, 33, 34, 299, 300, 301, 698, 710], "15": [32, 33, 34, 35, 45, 55, 84, 127, 132, 140, 143, 250, 299, 300, 301, 302, 325, 351, 354, 396, 401, 408, 430, 483, 513, 514, 701, 703, 707], "9": [32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 115, 116, 126, 127, 132, 133, 151, 154, 166, 177, 182, 296, 298, 299, 300, 301, 302, 304, 339, 352, 353, 357, 359, 361, 362, 365, 386, 387, 395, 396, 401, 402, 416, 421, 431, 441, 446, 469, 475, 483, 512, 589, 591, 619, 622, 658, 679, 698, 701, 703, 705, 706, 707, 710, 712], "34": [32, 33, 34, 35, 154, 299, 300, 301, 302, 421, 492, 710], "product": [34, 43, 115, 154, 264, 265, 266, 301, 312, 386, 421, 694, 708, 709], "percentil": [36, 121, 304, 390], "datetime_is_numer": [36, 304], "descript": [36, 70, 304, 574, 654, 684, 696, 699, 701, 711], "statist": [36, 70, 132, 169, 171, 274, 304, 401, 574, 658, 669, 670, 701], "summar": [36, 304, 574, 706], "central": [36, 304, 574], "tendenc": [36, 304, 574], "dispers": [36, 304, 574], "shape": [36, 50, 93, 140, 148, 304, 320, 408, 414, 574, 698, 703, 707, 710], "dataset": [36, 169, 171, 304, 367, 574, 658, 660, 664, 665, 668, 669, 670, 694, 707], "distribut": [36, 137, 304, 406, 574, 694, 701], "analyz": [36, 304, 574, 701], "well": [36, 117, 142, 218, 243, 304, 409, 463, 531, 675, 696, 698, 703], "vari": [36, 304, 644, 673, 674, 675, 676, 701], "depend": [36, 51, 94, 124, 162, 167, 168, 170, 205, 237, 262, 304, 427, 432, 434, 435, 544, 549, 653, 655, 667, 668, 677, 678, 694, 698, 701, 703, 709], "what": [36, 304, 476, 694, 695, 698, 707, 708, 712], "detail": [36, 161, 185, 190, 197, 285, 304, 591, 614, 620, 633, 635, 664, 665, 669, 670, 694, 699, 700, 701, 706, 707, 711, 712], "fall": [36, 304, 619, 694, 698, 709], "between": [36, 51, 73, 110, 117, 118, 121, 274, 288, 296, 298, 304, 341, 383, 388, 390, 487, 489, 495, 501, 522, 529, 530, 532, 540, 541, 575, 582, 591, 604, 694, 695, 696, 698, 700, 704, 706, 707, 708, 709, 710, 712], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 132, 288, 304, 332, 335, 347, 348, 363, 375, 376, 388, 401, 483, 574, 629, 675, 676, 701, 707], "75": [36, 70, 304, 388, 566, 574, 585, 611, 712], "25th": [36, 304], "50th": [36, 304], "75th": [36, 304], "submit": [36, 304], "instead": [36, 70, 111, 119, 127, 132, 171, 192, 205, 244, 264, 304, 328, 346, 384, 396, 401, 458, 469, 490, 492, 501, 541, 604, 622, 694, 695, 698, 701, 709, 710], "style": [36, 45, 61, 94, 123, 304, 332, 696, 697, 701, 707], "select_dtyp": [36, 304], "o": [36, 304, 483, 694, 698, 701, 708], "select": [36, 44, 55, 64, 68, 84, 86, 97, 106, 124, 166, 247, 304, 313, 314, 325, 336, 339, 354, 357, 431, 667, 668, 669, 670, 684, 698, 704, 708], "omit": [36, 44, 179, 304, 313, 480, 574, 667], "noth": [36, 171, 304, 502], "output_fram": [36, 304], "summari": [36, 70, 304, 574, 708], "mean": [36, 48, 61, 115, 116, 127, 154, 285, 304, 318, 332, 386, 387, 396, 421, 486, 548, 566, 574, 585, 611, 694, 695, 701, 703, 704, 706, 707, 710, 712], "std": [36, 304, 574, 703, 704, 706], "50": [36, 44, 63, 70, 126, 127, 207, 304, 313, 335, 388, 395, 396, 574, 674, 703, 705, 707], "median": [36, 304, 706], "top": [36, 121, 304, 390, 469, 684, 694, 701], "freq": [36, 55, 84, 110, 127, 145, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 204, 304, 316, 325, 354, 383, 396, 411, 448, 583, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 630, 631, 633, 634, 635, 636, 637, 701], "most": [36, 97, 179, 304, 443, 501, 541, 645, 670, 685, 694, 695, 698, 701, 704], "frequenc": [36, 97, 127, 179, 185, 190, 197, 304, 396, 443, 451, 614, 620, 633], "timestamp": [36, 47, 75, 76, 104, 105, 132, 167, 171, 304, 347, 348, 375, 376, 401, 432, 519, 614, 620, 633, 668, 677, 701, 704, 710, 712], "highest": [36, 97, 121, 304, 390, 459, 540, 541, 694], "arbitrarili": [36, 304], "chosen": [36, 137, 304, 406], "among": [36, 43, 304, 312, 591, 712], "analysi": [36, 304, 591], "consist": [36, 140, 225, 226, 227, 228, 229, 233, 234, 260, 304, 408, 694, 695, 696, 698, 707], "union": [36, 94, 162, 168, 274, 304, 427, 434, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 485, 536, 537, 550, 644, 675], "00000": [36, 147, 304, 413, 703], "50000": [36, 304], "02765": [36, 304], "25000": [36, 304], "75000": [36, 304], "datetime64": [36, 46, 47, 75, 76, 104, 105, 119, 127, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 304, 347, 348, 375, 376, 396, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 677, 705, 709, 710], "2000": [36, 127, 186, 191, 194, 195, 198, 202, 304, 396, 615, 619, 621, 622, 623, 625, 626, 630, 631, 634, 635, 637], "2010": [36, 304, 622, 629, 703], "2006": [36, 304, 622], "09": [36, 55, 84, 127, 132, 304, 325, 354, 396, 401, 619, 623, 625, 626, 635, 701], "08": [36, 119, 123, 127, 132, 185, 187, 188, 189, 190, 193, 196, 201, 304, 396, 401, 616, 617, 618, 619, 623, 632, 636, 673, 674, 675, 676, 695], "2004": [36, 304, 622], "31": [36, 127, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 304, 396, 616, 617, 618, 619, 622, 623, 627, 628, 631, 632, 635, 636, 637, 638, 639, 640, 642], "field": [36, 171, 304, 498, 562, 644, 665, 684, 698], "classmethod": [37, 38, 57, 58, 59, 65, 209, 210, 216, 217, 222, 263, 264, 265, 266, 305, 306, 327, 328, 329, 330, 337], "header": [37, 38, 39, 50, 65, 66, 161, 209, 210, 211, 222, 223, 305, 306, 307, 320, 337, 338, 665, 698], "represent": [37, 70, 142, 180, 181, 209, 243, 259, 264, 305, 409, 444, 445, 480, 705, 708], "subclass": [37, 38, 65, 132, 142, 205, 209, 210, 222, 243, 305, 306, 337, 359, 401, 409, 696, 698], "implement": [37, 90, 110, 142, 178, 209, 243, 273, 305, 362, 383, 409, 560, 667, 698, 701, 704, 707, 709], "how": [37, 46, 57, 80, 94, 110, 121, 133, 142, 166, 178, 209, 214, 237, 243, 305, 315, 383, 390, 402, 409, 431, 458, 667, 694, 695, 696, 699, 701, 703, 707, 708, 709], "construct": [37, 112, 142, 184, 209, 243, 257, 305, 409, 448, 663, 698], "metadata": [37, 38, 39, 65, 66, 142, 171, 209, 210, 211, 222, 223, 243, 305, 306, 307, 337, 338, 409, 644, 659, 661, 669, 670], "reconstruct": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 243, 305, 306, 307, 337, 338, 409], "buffer": [37, 38, 65, 66, 70, 142, 209, 210, 222, 223, 243, 303, 305, 306, 337, 338, 380, 409, 667, 709], "memoryview": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 243, 303, 305, 306, 307, 337, 338, 409], "serializ": [37, 38, 65, 142, 167, 209, 210, 222, 243, 305, 306, 337, 409, 432], "instanc": [37, 38, 55, 65, 84, 143, 209, 210, 222, 273, 305, 306, 325, 337, 354, 480, 488, 496, 529, 538, 665, 694, 698, 699, 701], "cl": [37, 38, 65, 209, 210, 222, 305, 306, 337, 694], "wa": [37, 38, 65, 209, 210, 222, 246, 305, 306, 337, 704], "produc": [37, 38, 61, 65, 112, 123, 137, 209, 210, 222, 305, 306, 332, 337, 406, 469, 663, 668, 701, 706, 707, 712], "meta": [37, 38, 39, 65, 66, 142, 160, 209, 210, 211, 222, 223, 243, 305, 306, 307, 337, 338, 409], "privat": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 243, 305, 306, 307, 337, 338, 409], "devic": [38, 39, 65, 142, 168, 210, 211, 222, 243, 285, 306, 307, 337, 409, 434, 644, 698], "side": [38, 65, 94, 123, 127, 140, 210, 220, 222, 256, 257, 306, 337, 392, 396, 408, 481, 525, 527, 533, 542, 545, 551, 561, 653, 702], "deseri": [38, 65, 142, 210, 222, 243, 306, 337, 409], "task": [38, 65, 210, 222, 306, 337, 698, 701, 707, 712], "primari": [38, 210, 306, 694, 695, 698], "purpos": [38, 210, 306, 694, 695, 698], "memori": [38, 39, 66, 70, 93, 161, 164, 168, 210, 211, 223, 248, 285, 306, 307, 338, 364, 429, 434, 643, 644, 655, 668, 670, 694, 695, 698, 700, 701, 703, 709], "host": [38, 66, 161, 168, 181, 210, 223, 274, 306, 338, 434, 445, 665, 670, 696, 698], "necessari": [38, 43, 162, 210, 306, 312, 427, 524, 694, 695, 696, 698, 701, 707], "associ": [39, 66, 211, 223, 274, 307, 338, 671, 705, 712], "devicebufferlik": [39, 211, 307], "period": [40, 55, 84, 110, 127, 132, 145, 186, 191, 194, 195, 198, 202, 308, 325, 354, 383, 396, 401, 411, 575, 583, 615, 621, 627, 628, 630, 631, 634, 635, 637, 701], "discret": [40, 308, 653, 694], "calcul": [40, 70, 110, 132, 151, 182, 193, 220, 296, 308, 329, 383, 401, 416, 446, 575, 591, 629, 645, 646, 647, 648, 649, 650, 651, 652, 677, 701, 703, 708], "compar": [40, 50, 212, 224, 308, 320, 346, 586, 673, 674, 675, 676, 684, 697, 702, 706, 710, 712], "previou": [40, 123, 258, 308], "shift": [40, 110, 288, 308, 383, 575], "neg": [40, 64, 125, 159, 242, 308, 336, 394, 425, 497, 502, 575], "take": [40, 106, 111, 164, 248, 384, 429, 480, 522, 566, 575, 585, 611, 645, 655, 684, 694, 703, 707], "gdf": [40, 574, 577, 586, 589, 591, 701, 702, 705], "16": [40, 132, 140, 359, 401, 408, 483, 499, 500, 671, 677, 701, 707, 709], "36": [40, 132, 401, 701, 707], "divis": [41, 42, 56, 122, 129, 136, 176, 192, 310, 311, 326, 391, 398, 405, 439, 622], "truediv": [41, 42, 310, 311], "inf": [41, 42, 75, 76, 104, 105, 122, 136, 176, 310, 311, 347, 348, 375, 376, 391, 405, 439], "flexibl": [43, 166, 312, 431, 694, 695, 698, 701, 703, 707, 710], "wrapper": [43, 312, 695, 698, 707], "sub": [43, 153, 312, 420, 484, 495, 501, 537, 540, 541], "mul": [43, 99, 312, 369], "div": [43, 312], "mod": [43, 312], "pow": [43, 312], "swap": [43, 156, 312, 694], "operand": [43, 312], "org": [43, 312, 544, 549, 591, 677], "datamodel": [43, 312], "__ror__": [43, 312], "70": [43, 312], "174": [43, 312], "remov": [44, 45, 128, 180, 181, 259, 262, 313, 314, 315, 397, 444, 445, 465, 467, 492, 493, 494, 527, 531, 532, 545, 551, 697, 698, 707], "multi": [44, 51, 80, 260, 313, 662, 700, 701, 708], "keyerror": [44, 313, 657, 672], "found": [44, 94, 140, 235, 268, 274, 313, 359, 408, 496, 501, 534, 538, 539, 541, 543, 544, 549, 555, 635, 665, 698, 701, 702], "dropna": [44, 48, 61, 97, 107, 150, 166, 179, 313, 318, 332, 334, 367, 381, 431, 443, 469, 569, 590, 708], "drop_dupl": [44, 313], "duplic": [44, 45, 103, 106, 124, 143, 213, 253, 313, 314, 374, 377, 536, 653, 665, 712], "certain": [44, 45, 94, 313, 531, 544, 549, 694, 699, 707], "reindex": [44, 313, 577, 684, 702], "midx": [44, 146, 156, 246, 261, 269, 313, 412], "from_product": [44, 244, 264, 266, 313], "40": [44, 127, 185, 193, 196, 313, 392, 396, 485, 632, 701], "lama": [44, 313, 314, 346], "falcon": [44, 61, 64, 74, 128, 156, 179, 313, 332, 336], "speed": [44, 61, 128, 156, 313, 332, 574, 665, 677, 695, 703], "weight": [44, 137, 156, 313, 406], "length": [44, 48, 55, 84, 88, 94, 126, 137, 139, 149, 156, 183, 235, 252, 274, 313, 318, 325, 354, 360, 395, 406, 415, 447, 471, 472, 474, 489, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 544, 549, 560, 561, 583, 644, 653, 656, 707], "big": [44, 70, 156, 313], "small": [44, 156, 313, 665, 669, 694, 696, 698, 703, 704, 706, 707], "45": [44, 156, 197, 313, 614, 620, 633, 677, 707], "200": [44, 123, 156, 207, 313, 703], "100": [44, 61, 117, 126, 127, 156, 192, 207, 246, 313, 332, 395, 396, 512, 514, 622, 674, 701, 707, 710], "250": [44, 156, 313], "150": [44, 156, 313], "320": [44, 156, 313], "keep": [45, 46, 88, 103, 106, 109, 121, 178, 183, 213, 314, 315, 360, 374, 377, 390, 447, 492, 493], "identifi": [45, 61, 75, 76, 92, 104, 105, 148, 166, 332, 347, 348, 375, 376, 414, 431, 487, 494, 538, 539, 635, 662, 667, 694], "drop": [45, 46, 48, 109, 113, 128, 143, 150, 213, 214, 262, 314, 315, 318, 397, 469, 653, 708, 712], "occurr": [45, 103, 106, 213, 314, 374, 377, 486, 496, 522, 534, 537, 543, 701], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 115, 116, 154, 171, 196, 314, 386, 387, 421, 470, 472, 495, 501, 540, 541, 546, 632, 673, 674, 675, 676, 694, 701, 707], "guarante": [45, 137, 314, 406, 477, 591, 665, 694, 706, 712], "thresh": 46, "decid": [46, 214, 695], "least": [46, 109, 178, 214, 334, 469, 522, 705, 707], "isna": [46, 76, 315, 348, 710], "notna": [46, 105, 315, 376, 710], "alfr": [46, 75, 76, 104, 105, 347, 348, 375, 376], "batman": [46, 75, 76, 104, 105, 347, 348, 375, 376], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 347, 348, 375, 376, 505, 506, 707], "batmobil": [46, 75, 76, 104, 105, 347, 348, 375, 376], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 347, 348, 375, 376], "1940": [46, 75, 76, 104, 105, 347, 348, 375, 376], "look": [46, 694, 695, 696, 698, 703, 704, 707], "20180310": 47, "u": [47, 167, 171, 185, 190, 197, 432, 483, 497, 614, 620, 633, 668, 677, 694, 695, 696, 698, 703, 705, 707, 709, 710], "ax": [48, 112, 166, 180, 181, 259, 318, 431, 444, 445, 458, 548, 663, 668, 680, 689], "still": [48, 318, 696], "we": [48, 61, 74, 106, 123, 124, 127, 205, 318, 332, 367, 396, 522, 665, 667, 694, 695, 696, 698, 701, 703, 704, 705, 707, 710, 712], "our": [48, 318, 694, 695, 696, 698, 701, 703, 707, 712], "test": [50, 64, 320, 336, 346, 485, 490, 524, 532, 550, 665, 684, 695, 697, 699, 701, 704, 712], "exactly_equ": [50, 320], "different_column_typ": [50, 320], "expr": [51, 119], "evalu": [51, 490, 507, 550, 701], "describ": [51, 70, 166, 167, 431, 432, 535, 669, 670, 706], "express": [51, 119, 485, 486, 490, 491, 496, 528, 537, 539, 544, 549, 550, 669, 670, 708], "mutat": 51, "typic": [51, 694, 698, 712], "statement": [51, 701, 707], "bitwis": [51, 707], "logic": [51, 94, 285, 669, 670, 698, 701, 707], "boolean": [51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 117, 119, 123, 124, 143, 169, 170, 192, 199, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 249, 258, 268, 272, 284, 291, 342, 343, 344, 345, 346, 347, 348, 357, 361, 362, 365, 375, 376, 379, 388, 392, 393, 435, 455, 470, 485, 490, 493, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 528, 550, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 622, 623, 624, 625, 626, 627, 628, 656, 665, 668, 669, 670, 699, 707, 708], "automat": [51, 57, 274, 329, 591, 668, 694, 695, 696, 701, 706, 710], "respons": 51, "suitabl": [51, 140, 167, 408, 432, 698], "later": 51, "condit": [51, 88, 119, 183, 360, 447, 701, 707], "upon": [51, 142, 243, 409], "earlier": 51, "though": [51, 701, 707], "line": [51, 64, 167, 336, 432, 501, 541, 560, 665, 668, 694, 695, 703], "replic": [52, 321], "22": [52, 127, 193, 242, 396, 483, 695, 701, 710], "44": [52, 190, 707], "ffill": [54, 108, 110, 258, 324, 382, 383, 577], "forward": [54, 161, 324, 576, 577, 581, 596, 603, 665, 696], "next": [54, 258, 324, 496, 577, 694, 696, 698, 701, 703, 707], "backward": [54, 324, 567, 568, 587, 588], "initi": [55, 325, 698, 701, 707], "time": [55, 84, 110, 125, 127, 132, 159, 161, 167, 242, 274, 325, 354, 383, 394, 396, 401, 425, 432, 472, 479, 486, 552, 553, 557, 591, 645, 665, 669, 670, 677, 684, 694, 695, 698, 703, 704, 707, 708, 710], "date": [55, 84, 167, 184, 192, 196, 325, 354, 432, 619, 622, 623, 624, 625, 626, 627, 628, 632, 635, 665, 668, 677, 694, 701, 704], "few": [55, 84, 325, 354, 698, 707, 710, 712], "1m": [55, 325, 619], "displai": [55, 70, 84, 121, 325, 354, 390, 653, 696], "month": [55, 185, 190, 197, 325, 614, 619, 620, 623, 624, 633, 677], "typeerror": [55, 57, 58, 84, 126, 212, 217, 263, 316, 325, 327, 330, 346, 354, 395, 522, 678, 707], "datetimeindex": [55, 84, 325, 354, 677, 684], "date_rang": [55, 84, 127, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 316, 325, 354, 396, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 701], "2d": [55, 84, 325, 354, 655], "3d": [55, 84, 325, 354], "9223372036854775807": [56, 129, 326, 398, 701], "tabl": [57, 72, 112, 159, 160, 166, 167, 263, 425, 431, 432, 493, 556, 663, 668, 694, 698, 701, 706, 709], "pyarrow": [57, 160, 263, 327, 426, 669, 670, 701], "doe": [57, 61, 74, 124, 156, 162, 166, 285, 316, 332, 427, 431, 467, 498, 544, 586, 645, 657, 662, 672, 678, 694, 695, 698, 702, 705, 706, 707, 712], "similar": [57, 94, 148, 166, 285, 414, 431, 544, 549, 673, 674, 676, 694, 704, 706, 707, 710, 712], "to_panda": [57, 701, 704, 706, 707, 710, 712], "work": [57, 132, 401, 443, 643, 644, 694, 696, 698, 699, 700, 701, 705, 706, 707, 708], "pa": [57, 263, 327], "record": [59, 94, 121, 167, 390, 432, 529, 668, 694], "recarrai": [59, 172], "ndim": 59, "greater": [60, 62, 71, 291, 331, 333, 561, 591, 678, 705], "as_index": [61, 332], "group_kei": [61, 332], "squeez": [61, 332], "group": [61, 121, 166, 169, 332, 390, 431, 443, 491, 539, 566, 570, 571, 572, 573, 575, 578, 579, 580, 582, 583, 584, 585, 586, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 661, 667, 669, 670, 694, 698, 702, 704, 707, 708, 710, 712], "mapper": [61, 124, 332], "involv": [61, 274, 332, 698], "some": [61, 73, 123, 268, 332, 341, 417, 475, 486, 537, 586, 677, 694, 695, 698, 701, 702, 706, 707, 709, 712], "combin": [61, 143, 179, 332, 458, 487, 527, 544, 545, 551, 566, 585, 611, 669, 670, 684, 694, 701, 709], "split": [61, 167, 257, 332, 432, 483, 530, 534, 543, 544, 554, 555, 668, 671, 684, 696, 701, 709], "larg": [61, 137, 332, 406, 665, 698, 704, 706], "amount": [61, 70, 332, 696, 698, 707], "notic": [61, 268, 332, 705, 707], "interpret": [61, 166, 332, 431, 499, 500, 544, 549, 665, 669, 670], "hierarch": [61, 89, 90, 95, 166, 177, 260, 332, 361, 362, 365, 431, 679, 698, 701], "particular": [61, 89, 90, 95, 161, 332, 361, 362, 365, 417, 486, 665, 694, 695, 696, 698, 706, 712], "relev": [61, 332, 694], "sql": [61, 94, 332, 701], "influenc": [61, 332, 709], "preserv": [61, 126, 285, 332, 395, 561, 614, 620, 633, 665, 710], "piec": [61, 332, 694, 696, 698], "dataframegroupbi": [61, 683], "about": [61, 70, 332, 591, 643, 644, 694, 697, 698, 701, 709], "390": [61, 332, 703], "350": [61, 332], "parrot": [61, 64, 128, 332, 336, 485], "370": [61, 332, 574], "anim": [61, 74, 314, 332, 346, 458], "380": [61, 332, 574], "375": [61, 332], "captiv": [61, 332], "wild": [61, 332], "from_arrai": [61, 224, 252, 332], "185": [61, 332], "210": [61, 332], "g1": [61, 332], "g2": [61, 332], "variou": [61, 332, 689, 694, 695, 696, 698], "lambda": [61, 332, 359, 566, 585, 586, 604, 611, 702, 704, 706, 707], "333333": [61, 122, 127, 136, 332, 391, 396, 405, 443, 591], "666667": [61, 182, 332, 446], "000000": [61, 75, 76, 104, 105, 127, 138, 332, 347, 348, 375, 376, 396, 407, 589, 591, 703, 706, 710], "murmur3": [63, 335], "hash": [63, 109, 335, 643], "md5": [63, 335], "murmurhash3": [63, 335], "120": [63, 335, 484], "1930516747": [63, 335], "422619251": [63, 335], "941520876": [63, 335], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 335], "947ca8d2c5f0f27437f156cfbfab0969": [63, 335], "d0580ef52d27c043c8e341fd5039b166": [63, 335], "330519225": [63, 335], "397962448": [63, 335], "1345834934": [63, 335], "57ce879751b5169c525907d5c563fae1": [63, 335], "948d6221a7c4963d4be411bcead7e32b": [63, 335], "fe061786ea286a515b772d91b0dfcd70": [63, 335], "quickli": [64, 336, 703], "your": [64, 123, 124, 336, 696, 701, 703, 707], "right": [64, 80, 94, 127, 132, 140, 220, 229, 237, 256, 257, 291, 309, 336, 396, 401, 408, 481, 495, 501, 525, 533, 540, 541, 545, 549, 551, 561, 653, 656, 673, 674, 675, 676, 704, 705], "tail": [64, 336], "allig": [64, 336], "bee": [64, 336, 527, 545, 551], "lion": [64, 128, 336, 496], "monkei": [64, 128, 336, 458, 496], "shark": [64, 336], "whale": [64, 336], "zebra": [64, 336], "view": [64, 162, 168, 336, 427, 434, 577, 694, 698, 708], "three": [64, 106, 112, 336, 487, 653, 663, 698, 703, 707, 709], "iloc": [67, 586, 701, 702, 707, 710], "18": [68, 127, 132, 133, 185, 190, 193, 196, 339, 396, 401, 402, 483, 632, 641, 701, 705], "slice": [68, 220, 258, 268, 339, 548, 684, 698, 701, 702], "verbos": 70, "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 329], "print": [70, 124, 132, 173, 401, 436, 586, 654, 677, 703, 707, 711], "concis": 70, "usag": [70, 93, 364, 668, 694, 695, 699, 701, 707], "full": [70, 94, 166, 431, 604, 667, 696, 701, 703, 704, 707, 712], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 128, 205, 384, 397, 483, 493, 529, 604, 653, 695, 696, 698, 701, 703, 705, 706, 707, 710, 712], "further": 70, "process": [70, 173, 436, 701, 703, 706, 707], "switch": [70, 677], "truncat": [70, 644], "total": [70, 93, 364, 561, 619, 661, 664, 669, 705, 707], "alwai": [70, 101, 121, 137, 247, 285, 367, 390, 406, 522, 665, 695, 698, 706, 707, 709, 712], "never": [70, 471, 698, 707], "introspect": 70, "shown": [70, 496], "human": 70, "readabl": 70, "unit": [70, 167, 432, 448, 668, 677], "estim": [70, 298, 591], "made": [70, 162, 174, 268, 427, 562, 694, 702, 710], "assum": [70, 309, 485, 489, 537, 544, 549, 591, 655, 694, 696, 697, 698, 707], "consum": [70, 694, 707], "real": 70, "cost": [70, 695], "smaller": [70, 93, 494], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 645], "delta": [70, 151, 182, 416, 446, 448, 591, 607, 610, 650, 652], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 170, 250, 263, 303, 435, 684, 696, 698, 701, 707, 710], "130": 70, "byte": [70, 93, 364, 478, 559, 643, 658, 664, 665, 668, 669, 670, 671, 698, 709], "its": [70, 111, 160, 178, 288, 384, 677, 695, 696, 698, 699, 701, 709], "pipe": [70, 706], "content": [70, 166, 431, 522, 697, 698, 707], "io": [70, 645, 665, 669, 670, 684, 708], "stringio": [70, 665, 668, 671], "getvalu": 70, "mode": [70, 166, 431, 667, 694, 709], "special": [70, 203, 255, 457, 486, 510, 522, 644, 698, 705, 712], "fine": [70, 696], "tune": [70, 709], "random_strings_arrai": 70, "random": [70, 137, 171, 406, 591, 701, 703, 710, 712], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 169, 171], "999999": 70, "mb": [70, 658, 701], "num": [71, 701], "interleav": [72, 159, 425], "major": [72, 655, 712], "a1": [72, 491, 703], "a2": [72, 703], "a3": [72, 703], "b1": 72, "b2": [72, 491], "b3": 72, "linear": [73, 117, 341, 388, 582, 698, 703, 704], "limit_direct": [73, 341], "limit_area": [73, 341], "downcast": [73, 215, 341, 577, 678], "techniqu": [73, 341], "space": [73, 171, 341, 487, 522, 530, 531, 534, 544, 553, 665], "linearli": [73, 341], "unsort": [73, 341, 704], "lead": [73, 161, 341, 527, 545, 551, 591, 703, 704, 707], "erron": [73, 341], "num_leg": [74, 179], "num_w": [74, 179], "check": [74, 143, 225, 226, 227, 228, 229, 233, 234, 235, 260, 309, 346, 467, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 528, 558, 559, 673, 674, 675, 676, 695, 703, 712], "present": [74, 115, 116, 154, 386, 387, 421, 469, 522, 544, 549, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 644, 695, 697, 707], "leg": [74, 97], "wing": [74, 97], "separ": [74, 480, 487, 529, 530, 534, 543, 544, 549, 656, 671, 689, 694, 696, 698, 707], "spider": 74, "everyth": [75, 76, 89, 90, 95, 236, 347, 348, 361, 362, 365, 458, 548, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612], "mask": [75, 76, 86, 104, 105, 126, 258, 268, 285, 329, 347, 348, 357, 375, 376, 379, 380, 395, 698, 710], "timedelta64": [75, 76, 104, 105, 347, 348, 375, 376, 448, 638, 639, 640, 641, 642, 709, 710], "charact": [75, 76, 104, 105, 347, 348, 375, 376, 479, 480, 481, 482, 483, 484, 485, 486, 492, 493, 494, 499, 500, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 530, 531, 533, 537, 538, 542, 545, 549, 551, 552, 553, 554, 556, 557, 558, 559, 561, 643, 665, 671, 695, 698], "incas": [75, 76, 104, 105, 347, 348, 375, 376], "1939": [75, 76, 104, 105, 347, 348, 375, 376], "05": [75, 76, 104, 105, 127, 185, 187, 188, 189, 190, 193, 196, 197, 201, 288, 347, 348, 375, 376, 396, 614, 616, 617, 618, 619, 620, 632, 633, 636, 673, 674, 675, 676, 677, 701], "27": [75, 76, 104, 105, 347, 348, 375, 376, 483, 623, 625, 626, 701], "joker": [75, 76, 104, 105, 347, 348, 375, 376], "32": [75, 76, 104, 105, 133, 347, 348, 375, 376, 402], "float64index": [75, 76, 104, 105, 146, 217, 347, 348, 375, 376, 412], "left": [80, 94, 124, 127, 133, 140, 178, 220, 229, 237, 256, 257, 291, 309, 396, 402, 408, 481, 495, 501, 527, 533, 537, 540, 541, 542, 551, 556, 561, 653, 673, 674, 675, 676, 694, 701, 704], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 237, 458, 669, 670], "outer": [80, 94, 237, 458, 670], "suffic": [80, 707], "avoid": [80, 285, 694, 695, 698, 709, 712], "conflict": 80, "ensur": [80, 162, 168, 427, 434, 485, 670, 694, 695, 696, 701], "now": [80, 656, 694, 698, 701, 703, 707], "due": [80, 586, 665, 695, 701, 702, 704, 707], "lack": 80, "five": [81, 645], "int64index": [81, 146, 207, 212, 215, 224, 235, 237, 241, 242, 244, 246, 250, 252, 262, 293, 412, 486, 675, 698], "fisher": [82, 83, 147, 352, 353, 413], "unbias": [82, 83, 147, 182, 298, 352, 353, 413, 446, 591], "kurtosi": [82, 352], "sampl": [82, 83, 147, 151, 296, 352, 353, 413, 416, 430, 701], "obtain": [82, 83, 352, 353, 473, 560, 645, 712], "definit": [82, 83, 275, 352, 353, 372, 438, 591], "normal": [82, 83, 137, 151, 179, 182, 184, 298, 352, 353, 406, 416, 443, 446, 531, 591, 607, 610, 669, 670, 703], "1999999999999904": [82, 83, 352, 353], "kurt": [83, 353], "final": [84, 354, 669, 670, 698, 707], "dai": [84, 171, 184, 187, 188, 189, 192, 193, 201, 316, 354, 448, 449, 454, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 636, 638, 640, 642, 677, 707, 710], "cond": [88, 183, 360, 447], "dimens": [88, 101, 183, 360, 372, 447], "collaps": [89, 90, 95, 361, 362, 365], "attempt": [89, 90, 95, 205, 212, 268, 361, 362, 365, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612, 656, 665, 677, 695, 702, 707], "17": [91, 127, 132, 140, 288, 363, 396, 401, 408, 483, 701, 710], "unpivot": [92, 662], "wide": [92, 662, 694, 696, 707], "format": [92, 161, 165, 166, 167, 169, 171, 173, 431, 432, 436, 519, 520, 558, 559, 560, 577, 635, 662, 665, 668, 677, 695, 696, 698, 700, 701, 702, 703, 704, 705, 709], "id_var": [92, 662], "value_var": [92, 662], "var_nam": [92, 662], "value_nam": [92, 662], "whose": [93, 112, 562, 656, 663, 694, 698], "ones": [93, 466], "5000": 93, "astyp": [93, 226, 234, 684, 701], "head": [93, 701, 703, 707, 712], "40000": 93, "storag": [93, 161, 665, 708], "mani": [93, 374, 377, 591, 685, 694, 696, 698, 701, 704, 705, 707, 709, 712], "repeat": [93, 159, 425, 486, 684], "5008": 93, "43": [93, 641, 707], "give": [93, 274, 694, 695, 698, 703, 706], "rest": [93, 520, 548, 553, 696], "necessarili": [93, 177, 679], "left_on": 94, "right_on": 94, "left_index": [94, 704], "right_index": [94, 704], "_x": 94, "_y": 94, "databas": 94, "join": [94, 178, 458, 665, 684, 700, 704, 708, 712], "intersect": [94, 458], "leftsemi": 94, "leftanti": 94, "exact": [94, 117, 137, 258, 388, 406, 653, 675, 677], "opposit": 94, "were": [94, 465, 555, 701, 707], "overlap": [94, 141, 178, 458, 493, 496, 644, 653], "determinist": [94, 712], "df_a": [94, 701], "vals_a": [94, 701], "df_b": [94, 701], "vals_b": [94, 701], "df_merg": 94, "sort_valu": [94, 684, 701], "typecast": 94, "ambigu": [94, 184], "exactli": [94, 673, 674, 675, 676, 695, 706], "extend": [94, 653, 694, 701, 707], "semi": [94, 591], "anti": 94, "modulo": [96, 130, 366, 399], "4294967295": [96, 130, 366, 399], "appear": [97, 121, 329, 374, 377, 390, 487, 561], "often": [97, 683, 694, 704, 707, 710], "search": [97, 166, 268, 431, 470, 472, 485, 495, 496, 501, 538, 540, 541, 694, 700, 710, 712], "don": [97, 107, 124, 179, 367, 381, 443, 569, 590, 668, 694, 704, 707, 710], "value_count": [97, 701], "speci": [97, 244], "bird": [97, 128, 458], "mammal": [97, 128], "arthropod": 97, "multipli": [98, 368, 707], "largest": [103, 374], "priorit": [103, 707], "popul": [103, 106, 703, 707], "59000000": [103, 106, 374, 377], "65000000": [103, 106, 374, 377], "434000": [103, 106, 374, 377], "337000": [103, 106, 374, 377], "11300": [103, 106, 374, 377], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 155, 422, 705], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "itali": [103, 106, 374, 377], "franc": [103, 106, 374, 377], "malta": [103, 106, 374, 377], "maldiv": [103, 106, 374, 377], "brunei": [103, 106, 374, 377], "iceland": [103, 106, 374, 377], "nauru": [103, 106, 374, 377], "tuvalu": [103, 106, 374, 377], "anguilla": [103, 106, 374, 377], "smallest": [106, 121, 377, 390, 472, 678], "retriev": [106, 498, 667], "ti": [106, 121, 258, 390], "resolv": 106, "revers": [106, 374, 377, 601, 701], "distinct": [107, 346, 698], "npart": 109, "keep_index": [109, 139], "partit": [109, 171, 658, 670, 684, 701], "fill_method": [110, 383], "percent": [110, 383], "sequenti": [110, 383, 706, 707, 712], "form": [110, 112, 121, 159, 224, 252, 383, 390, 425, 509, 512, 513, 514, 515, 658, 663, 669, 670, 698, 704], "handl": [110, 161, 166, 167, 178, 314, 383, 417, 431, 432, 458, 544, 549, 667, 678, 684, 697, 698, 700, 709], "consecut": [110, 125, 242, 383, 394, 482, 529, 530, 665], "increment": [110, 383, 658], "data_keyword": [111, 384, 604], "chain": [111, 384], "groupbi": [111, 384, 684, 698, 700, 701, 702, 704, 708, 712], "write": [111, 161, 165, 166, 167, 169, 171, 384, 431, 432, 658, 660, 665, 667, 695, 697, 700, 701, 703, 707, 709], "arg2": [111, 384], "arg3": [111, 384], "sai": [111, 384, 498, 707], "suppos": [111, 384], "reshap": [112, 150, 663, 684, 703], "organ": [112, 663, 696, 697], "rearrang": [112, 663], "exponenti": [114, 134, 385, 403], "min_count": [115, 116, 154, 386, 387, 421, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612], "fewer": [115, 116, 154, 386, 387, 421, 578, 579, 580, 597, 598, 599, 600, 605, 608, 612], "5040": [115, 116, 386, 387], "q": [117, 118, 388, 582, 635], "interpol": [117, 118, 388, 582], "higher": [117, 118, 388, 582, 668, 698, 709], "midpoint": [117, 388, 582], "nearest": [117, 118, 258, 388, 582], "desir": [117, 118, 158, 247, 388, 424, 582, 665, 668, 695, 707, 712], "li": [117, 118, 388, 582], "j": [117, 118, 156, 388, 489, 707], "approxim": [117, 388], "One": [117, 123, 166, 167, 185, 190, 197, 274, 392, 431, 432, 614, 620, 633, 694, 702, 703, 705, 710], "notabl": [117, 148, 414, 702], "doesn": [117, 137, 171, 406, 522, 701, 702, 710], "under": [117, 670, 689, 694, 696, 697, 698, 701, 702], "cp": [117, 644, 701, 703, 707, 710, 712], "55": [117, 242, 707], "local_dict": [119, 701], "local": [119, 658, 664, 665, 667, 668, 669, 670, 671, 696, 701], "filter": [119, 493, 669, 670, 694, 700, 701, 712], "search_dat": [119, 701], "search_date2": 119, "averag": [121, 390, 707], "na_opt": [121, 390], "pct": [121, 390], "direct": [121, 390, 583, 668, 696, 701, 709], "dens": [121, 390, 703], "lowest": [121, 390, 495, 501, 540, 698], "increas": [121, 232, 309, 342, 344, 377, 390, 665, 677], "bottom": [121, 390, 665], "rtruediv": [122, 391], "002778": [122, 136, 391, 405], "005556": [122, 136, 391, 405], "250000": [122, 136, 391, 405], "toler": [123, 219, 258, 268, 392, 673, 674, 675, 676], "conform": [123, 237, 392, 696], "unless": [123, 417, 544, 549, 694], "either": [123, 133, 137, 149, 170, 178, 218, 397, 402, 406, 415, 435, 472, 480, 485, 656, 664, 665, 668, 669, 670, 671, 696, 701, 703, 707, 709], "even": [123, 162, 285, 367, 427, 665, 668, 694, 695, 707, 710], "convent": [123, 124, 127, 396], "index_label": 123, "column_label": 123, "_highly_": 123, "clarifi": [123, 124], "intent": [123, 124], "fiction": [123, 498], "firefox": 123, "chrome": 123, "safari": 123, "ie10": 123, "konqueror": 123, "http_statu": [123, 702], "404": [123, 703], "301": 123, "response_tim": 123, "new_index": 123, "iceweasel": 123, "comodo": 123, "dragon": 123, "retain": [123, 392, 494, 702, 710], "user_ag": 123, "alter": [124, 171, 241, 393], "throw": [124, 167, 432, 695, 709], "index_mapp": 124, "columns_mapp": 124, "highli": [124, 670, 712], "overwrit": [124, 178, 264], "postfix": 124, "repetit": [125, 242, 394], "newli": [125, 242, 394, 397, 583, 698], "to_replac": [126, 395], "regex": [126, 395, 485, 486, 491, 496, 528, 537, 539, 544, 549], "valueerror": [126, 141, 166, 167, 178, 395, 431, 432, 466, 501, 522, 541, 653, 696, 703, 706], "mismatch": [126, 395, 675, 676], "actual": [126, 395, 522, 695, 698, 701, 707, 710], "exhibit": [126, 395, 696], "silent": [126, 395], "rule": [127, 396, 694], "close": [127, 184, 204, 256, 257, 291, 396, 448, 658, 667, 696, 698, 712], "loffset": [127, 396], "start_dai": [127, 396], "dateoffset": [127, 396], "bin": [127, 309, 396, 443, 653], "interv": [127, 225, 226, 227, 228, 229, 233, 234, 256, 257, 309, 396, 653, 698, 706], "edg": [127, 132, 309, 396, 401, 495, 501, 540, 541, 653, 695], "bucket": [127, 396], "closest": [127, 396], "nanosecond": [127, 167, 171, 396, 432, 449, 638, 668, 677], "millisecond": [127, 167, 396, 432, 449, 638, 668, 677], "minut": [127, 396, 449, 638, 677, 700, 708], "2001": [127, 197, 202, 316, 396, 614, 619, 620, 622, 633, 637, 704], "1t": [127, 396], "06": [127, 185, 187, 188, 189, 201, 396, 614, 616, 617, 618, 619, 635, 636, 638, 639, 640, 642, 701], "downsampl": [127, 396], "3t": [127, 396], "23": [127, 396, 483, 485, 509, 510, 517, 701, 705, 710], "57": [127, 396, 701, 707], "upsampl": [127, 396], "asfreq": [127, 396], "price": [127, 396, 498, 707], "19": [127, 396, 483, 591, 698, 701, 703], "volum": [127, 396], "60": [127, 396, 701], "week_start": [127, 396], "7d": [127, 396], "29": [127, 195, 396, 483, 623, 625, 626, 629, 631, 701, 712], "28": [127, 396, 483, 619, 623, 625, 626, 701], "63": [127, 396, 706], "col_level": [128, 662], "col_fil": 128, "reset": [128, 284, 397, 458], "try": [128, 397, 668, 678, 694, 695], "389": 128, "80": [128, 574], "max_spe": 128, "from_tupl": [128, 264, 265, 268, 397, 701, 702], "fly": [128, 665, 668], "run": [128, 507, 508, 509, 510, 516, 517, 518, 521, 643, 644, 695, 696, 697, 701, 703, 707, 712], "window": [132, 401, 684, 700, 708, 712], "center": [132, 401, 533, 561, 684, 695, 707], "win_typ": [132, 401], "baseindex": [132, 205, 208, 401, 698], "As": [132, 166, 401, 431, 694, 695, 698, 704, 707], "oppos": [132, 401, 701], "fix": [132, 166, 185, 190, 197, 359, 401, 431, 614, 620, 633, 698, 704, 705], "accommod": [132, 401], "get_window_bound": [132, 401], "20190101": [132, 401], "2019": [132, 244, 401], "01t09": [132, 401], "000": [132, 401, 507, 661, 665, 666, 669, 670], "math": [132, 401, 645, 707], "49": [132, 401, 707], "64": [132, 401, 698, 707], "81": [132, 401, 701, 707], "some_func": [132, 401], "sqrt": [132, 401, 707], "And": [132, 401, 707], "decim": [133, 167, 402, 432, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 665, 706, 708, 712], "half_even": [133, 402], "half_up": [133, 402], "affect": [133, 169, 402, 694, 709], "67": [133, 402], "66": [133, 402], "subtract": [135, 152, 404, 419], "359": [135, 152, 153, 404, 419, 420], "179": [135, 152, 153, 404, 419, 420], "frac": [137, 406], "random_st": [137, 406], "reproduc": [137, 406], "ident": [137, 173, 406, 436, 458, 544, 549, 609, 673, 674, 675, 676, 712], "fraction": [137, 406, 517], "disallow": [137, 406], "state": [137, 264, 406], "uniform": [137, 406, 653], "probabl": [137, 406], "unlik": [137, 406, 696, 706, 709, 712], "randomst": [137, 406], "seed": [137, 406, 701, 707], "stat": [137, 406, 684, 696, 708], "randomli": [137, 406, 701], "slow": [137, 406, 694, 706], "achiev": [137, 406, 560, 706], "especi": [137, 406, 694, 706], "advis": [137, 406, 699], "826087": [138, 407], "913043": [138, 407], "043478": [138, 407], "map_index": 139, "map_siz": 139, "scatter": 139, "destin": [139, 707], "conserv": 139, "find": [140, 205, 258, 408, 486, 496, 501, 540, 684, 694, 695, 696, 707], "maintain": [140, 408, 695, 701], "hypothet": [140, 408], "monoton": [140, 231, 232, 258, 268, 273, 309, 342, 343, 344, 408], "wrong": [140, 408], "correct": [140, 408, 668, 707], "values_df": [140, 408], "reinterpret": [142, 243, 409], "lightweight": [142, 243, 409], "append": [143, 166, 431, 480, 544, 549, 656], "becom": [143, 703], "too": [143, 496, 694, 707], "hello": [146, 412, 478, 479, 483, 487, 497, 525, 531, 532, 535, 540, 542, 547, 554, 555, 664, 668], "37037": [147, 413], "sort_remain": [148, 414], "quick": [148, 414], "builtin": [148, 414, 664, 665, 668, 669, 670, 671], "vector": [148, 291, 414, 417], "prescrib": 150, "ddof": [151, 182, 416, 446, 591, 607, 610, 650, 652], "deviat": [151, 268, 416, 607, 650, 695, 702, 704], "freedom": [151, 182, 416, 446, 591, 607, 610, 650, 652], "divisor": [151, 182, 416, 446, 607, 610, 650, 652], "290994": [151, 416], "squar": [155, 422], "249": [155, 422], "llama": 156, "cdf": 156, "unsupport": [158, 247, 424, 567, 568, 576, 577, 581, 583, 587, 588, 596, 603, 645, 706, 707], "preserve_index": 160, "save": [160, 171, 658, 694, 698], "path_or_buf": [161, 166, 167, 431, 432, 667, 668], "sep": [161, 480, 522, 530, 534, 543, 665], "na_rep": [161, 480], "encod": [161, 166, 167, 322, 431, 432, 558, 559, 643, 644, 656, 667, 668, 698], "compress": [161, 166, 167, 169, 171, 431, 432, 658, 665, 668, 671, 709], "line_termin": 161, "storage_opt": [161, 665], "csv": [161, 665, 684, 708, 709], "file": [161, 165, 166, 167, 169, 171, 431, 432, 501, 541, 643, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 694, 697, 698, 701, 705, 709], "path": [161, 165, 166, 167, 169, 171, 431, 432, 643, 658, 661, 664, 665, 666, 667, 668, 669, 670, 671, 694, 695, 696, 701, 709], "char": [161, 533, 665], "delimit": [161, 167, 432, 494, 522, 530, 538, 544, 549, 554, 555, 665, 668, 671], "utf": [161, 484, 558, 559, 668, 698], "scheme": [161, 694], "sens": [161, 665, 698], "connect": [161, 665], "port": [161, 665, 696], "usernam": [161, 665], "password": [161, 665], "etc": [161, 658, 665, 683, 693, 694, 696, 705, 706], "url": [161, 544, 558, 559, 658, 664, 665, 668, 669, 670, 671], "urllib": [161, 665], "s3": [161, 284, 509, 658, 664, 665, 668, 669, 670, 671], "gc": [161, 665], "fsspec": [161, 665, 669, 670], "open": [161, 164, 166, 248, 291, 429, 431, 443, 655, 659, 664, 665, 667, 668, 669, 670, 671, 696], "pleas": [161, 166, 359, 431, 665, 701, 707], "read_csv": [161, 701, 704], "quote_nonnumer": [161, 665], "filenam": [161, 167, 432, 658, 661, 665, 666, 669, 670, 694], "set_index": [161, 177, 237, 679, 706], "na_valu": [162, 168, 427, 434, 665], "asarrai": [162, 168, 427, 434, 703, 707], "strictli": [162, 427, 694, 698], "dlpack": [164, 248, 429, 655, 703, 709], "tensor": [164, 248, 429, 644, 655], "dmlc": [164, 248, 429, 655], "pycapsul": [164, 248, 429, 655], "pointer": [164, 248, 429, 655], "cudf_obj": [164, 248, 429], "pycapsule_obj": [164, 248, 429, 655], "encapsul": [164, 248, 429, 655, 698], "feather": [165, 166, 431, 666, 684, 709], "read_feath": 165, "hdf5": [166, 431, 684], "hdfstore": [166, 431, 667, 684], "hdf": [166, 431, 667, 686, 709], "applic": [166, 431, 591, 684, 698], "hold": [166, 225, 226, 227, 228, 229, 233, 234, 431], "relat": [166, 431, 684, 709], "individu": [166, 218, 431, 467, 483, 485, 698, 710], "r": [166, 417, 431, 483, 491, 518, 531, 556, 560, 667], "delet": [166, 431], "read": [166, 431, 661, 664, 665, 666, 667, 668, 669, 670, 671, 698, 701, 705, 709], "alreadi": [166, 431, 458, 531, 698, 703, 704], "fast": [166, 431, 668, 698, 701, 704, 712], "searchabl": [166, 431], "pytabl": [166, 431, 684], "wors": [166, 431], "data_column": [166, 431], "disk": [166, 431, 665, 668, 705], "complevel": [166, 431], "disabl": [166, 431, 665, 709], "complib": [166, 431], "zlib": [166, 431], "lzo": [166, 431], "bzip2": [166, 431], "blosc": [166, 431], "v0": [166, 431], "compressor": [166, 431], "blosclz": [166, 431], "lz4": [166, 431], "lz4hc": [166, 431], "snappi": [166, 169, 171, 431, 658, 709], "zstd": [166, 169, 171, 431, 709], "issu": [166, 431, 694, 704, 707], "fletcher32": [166, 431], "checksum": [166, 431], "written": [166, 169, 171, 431, 658, 694, 696, 707], "strict": [166, 431, 667, 673, 674, 675, 676, 677], "decod": [166, 431, 558, 667, 668], "read_hdf": [166, 431], "to_parquet": [166, 431, 670, 701, 705, 709], "parquet": [166, 171, 431, 669, 670, 684, 704, 708, 709], "to_feath": [166, 431, 666], "json": [167, 432, 498, 668, 684, 694, 709], "unix": [167, 432, 677], "orient": [167, 432, 668], "just": [167, 432, 548, 668, 694, 698, 703, 705, 707], "schema": [167, 432, 661, 668, 670], "compon": [167, 432, 497, 694, 696, 698], "date_format": [167, 432, 635], "epoch": [167, 432, 677], "iso": [167, 193, 432, 629], "convers": [167, 432, 435, 684, 698, 703], "iso8601": [167, 432], "double_precis": [167, 432], "force_ascii": [167, 432], "ascii": [167, 432, 479, 531, 552, 553, 557, 559], "date_unit": [167, 432, 668], "govern": [167, 432], "precis": [167, 432, 653, 668, 705, 712], "microsecond": [167, 432, 449, 453, 638, 641, 642, 668], "default_handl": [167, 432], "handler": [167, 432, 664, 665, 668, 669, 670, 671], "receiv": [167, 432, 678], "incorrect": [167, 432], "gzip": [167, 432, 665, 668], "bz2": [167, 432, 668], "xz": [167, 432, 668], "read_json": [167, 432], "fname": [169, 661], "orc": [169, 669, 684, 708, 709], "enable_statist": 169, "stripe_size_byt": 169, "stripe": [169, 171, 669], "67108864": 169, "64mb": 169, "stripe_size_row": 169, "row_index_strid": 169, "10000": [169, 703], "cols_as_map_typ": 169, "listdtyp": [169, 468, 489, 668, 698, 705], "read_orc": [169, 670, 701, 709], "nullabl": [170, 183, 435, 447, 694, 698, 702, 705, 712], "root": [171, 658, 695], "directori": [171, 658, 670, 694, 697, 701], "partition_offset": 171, "engin": [171, 485, 486, 491, 496, 528, 664, 668, 669, 670, 700], "much": [171, 694, 695, 698, 701], "faster": [171, 467, 669, 677, 694, 707], "partition_col": [171, 658], "partition_file_nam": 171, "uuid4": 171, "hex": [171, 499, 500, 513, 558, 559], "rowgroup": [171, 658], "page": [171, 658, 684, 697, 700, 709, 712], "metadata_file_path": 171, "blob": [171, 659], "footer": [171, 659], "file_path": [171, 701], "int96_timestamp": 171, "int96": 171, "julian": 171, "midnight": 171, "row_group_size_byt": 171, "134217728": 171, "128mb": 171, "row_group_size_row": 171, "max_page_size_byt": 171, "uncompress": [171, 671], "524288": 171, "512kb": 171, "max_page_size_row": 171, "20000": 171, "return_metadata": [171, 659], "read_parquet": [171, 661, 701, 705, 709], "intern": [173, 184, 205, 436, 448, 665, 673, 674, 675, 676, 694, 695, 697, 698, 699, 709], "transpar": [173, 436], "dure": [173, 436, 544, 549, 678, 695], "n0": [173, 436], "n1": [173, 436], "n2": [173, 436], "struct": [174, 668, 684, 698, 700, 706, 708, 709, 712], "compos": [174, 671, 695, 698, 705, 707], "pivot": [177, 679], "innermost": [177, 473, 669, 670, 679], "filter_func": 178, "There": [178, 196, 315, 632, 695, 703, 709, 712], "coercibl": [178, 441], "notimplementederror": [178, 485, 534, 537, 543, 560, 695, 698], "proport": 179, "frequent": [179, 443, 698], "occur": [179, 443, 485, 695, 701], "ant": [179, 527, 545, 551], "varianc": [182, 446, 591, 610, 652], "falsi": [183, 447, 702], "treatment": [183, 447, 702], "gsr": [183, 447, 702, 705], "tz": 184, "dayfirst": [184, 665, 677], "yearfirst": [184, 677], "immut": [184, 203, 255, 256, 273, 448, 457], "sliceabl": [184, 203, 255, 448, 457], "pytz": 184, "timezon": 184, "dateutil": [184, 677], "tzfile": 184, "pars": [184, 665, 668, 677, 678, 701, 703], "year": [184, 187, 189, 192, 193, 196, 244, 616, 618, 622, 627, 628, 629, 632, 677, 707], "1970": 184, "000000001": 184, "000000002": 184, "000000003": 184, "000000004": 184, "l": [185, 190, 197, 483, 493, 614, 620, 633, 696], "me": [185, 190, 197, 494, 538, 614, 620, 633], "alias": [185, 190, 197, 614, 620, 633, 694], "gindex": [185, 190, 193, 196], "2020": [185, 190, 193, 196, 632], "1999": [185, 190, 193, 196, 632], "41": [185, 485], "datetime_index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202], "int16index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 675], "int16": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 316, 615, 616, 617, 618, 619, 621, 630, 631, 634, 636, 637, 678, 705, 709], "365": [187, 189, 192, 616, 618, 622], "leap": [187, 189, 192, 616, 618, 622], "366": [187, 189, 192, 616, 618, 622], "2016": [187, 188, 189, 201, 616, 617, 618, 636, 677], "2017": [187, 188, 189, 201, 616, 617, 618, 627, 628, 636, 677], "week": [188, 193, 201, 617, 629, 636], "mondai": [188, 201, 617, 636], "sundai": [188, 201, 617, 636], "59": [190, 661, 665, 666, 669, 670, 707], "belong": [192, 196, 309, 622, 632, 694], "29th": [192, 622], "februari": [192, 622], "intercalari": [192, 622], "four": [192, 622, 694, 709], "400": [192, 207, 622, 703], "datafram": [193, 199, 205, 237, 246, 248, 249, 259, 260, 261, 262, 264, 265, 266, 269, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 286, 287, 294, 295, 299, 300, 301, 302, 304, 310, 311, 312, 313, 315, 318, 319, 320, 324, 325, 326, 331, 332, 333, 335, 336, 339, 341, 347, 348, 352, 353, 354, 355, 357, 358, 360, 361, 362, 365, 366, 368, 369, 371, 373, 375, 376, 384, 385, 386, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 416, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 436, 439, 443, 444, 445, 446, 447, 449, 455, 458, 491, 496, 534, 543, 544, 549, 562, 566, 574, 575, 577, 578, 579, 580, 583, 585, 586, 589, 591, 597, 598, 599, 600, 601, 604, 605, 608, 609, 611, 612, 629, 638, 646, 647, 648, 649, 650, 651, 652, 655, 656, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 677, 679, 683, 684, 685, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712], "accord": [193, 359, 629, 694, 698], "8601": [193, 629], "52": 193, "januari": [195, 196, 631, 632], "decemb": [195, 196, 631, 632], "march": [196, 632], "april": [196, 632], "june": [196, 632], "third": [196, 262, 632], "juli": [196, 632], "septemb": [196, 632], "fourth": [196, 632], "octob": [196, 632], "int8index": [196, 675], "int8": [196, 322, 632, 678, 705, 709], "dt_idx": 197, "58": [197, 614, 620, 633, 701, 707], "2002": [202, 622, 637], "basic": [203, 205, 255, 285, 457, 566, 585, 611, 701, 706, 707], "pure": [203, 255, 457, 695, 698], "__init__": [204, 256, 696], "tupleize_col": 205, "best": [205, 268, 530, 644, 694, 695, 697, 701, 702, 712], "fit": [205, 374, 377, 701], "design": [205, 260, 694, 695, 697, 700, 704], "factori": [205, 698], "re": [205, 485, 486, 491, 496, 528, 537, 547, 645, 701, 703, 707], "intim": 205, "familiar": [205, 694, 696, 697, 698, 700], "uint64": [205, 457, 705, 709], "uint64index": 205, "has_dupl": 205, "from_arrow": [205, 712], "get_loc": [205, 702], "collect": [207, 359, 476, 696, 701, 706, 712], "incompar": 212, "caught": 212, "catch": [212, 695], "idx1": [212, 224, 252], "idx2": [212, 224, 252], "nulls_are_equ": 213, "obj": [216, 458, 673, 674, 675, 676], "pdi": 217, "primarili": [218, 694], "stringindex": [218, 247, 322, 327, 351, 485, 534, 543, 701], "bound": [220, 257, 291, 471, 707], "leftmost": 220, "past": [220, 671, 707], "rightmost": [220, 653], "ix": 220, "getitem": 220, "red": [224, 252, 260, 266], "blue": [224, 252, 260, 266], "is_integ": [225, 226, 227, 229, 233, 234], "is_float": [225, 226, 228, 229, 233, 234], "is_numer": [225, 226, 227, 228, 229, 234], "is_object": [225, 226, 227, 228, 229, 233], "is_categor": [225, 227, 228, 229, 233, 234], "is_interv": [225, 226, 227, 228, 233, 234], "categoricalindex": [226, 293, 653, 684], "is_boolean": [226, 227, 228, 229, 233, 234], "watermelon": [226, 228, 234], "orang": [226, 234], "appl": [226, 228, 233, 234, 678], "peter": 226, "victor": 226, "elisabeth": 226, "mar": 226, "mango": [228, 234], "intervalindex": [229, 653, 684], "monotonic_increas": 230, "is_monotonic_increas": [230, 342], "decreas": [231, 343, 374], "cold": 233, "sought": 235, "is_contain": 235, "detect": [236, 240, 665, 668, 694, 708], "return_index": [237, 246], "join_index": 237, "lexicograph": [237, 268, 702], "lh": 237, "rh": 237, "renamed_index": 241, "abl": [244, 703, 704], "partial": [244, 707], "renam": [244, 467], "quarter": [244, 625, 626], "cobra": 244, "frozenlist": 244, "itself": [246, 534, 543, 698], "sorted_index": 246, "1000": [246, 561, 698, 703, 707, 712], "allow_fil": 247, "green": [252, 265], "break": [257, 695], "pad": [258, 531, 544, 549, 561, 577, 644, 684, 698], "backfil": [258, 577], "distanc": [258, 488, 489], "broken": 258, "prefer": [258, 669, 670, 677, 694, 695], "larger": [258, 505, 506, 644, 665, 669, 701, 709], "inexact": 258, "satisfi": [258, 694], "equat": 258, "unique_index": 258, "monotonic_index": 258, "abbc": 258, "non_monotonic_index": 258, "abcb": 258, "numeric_unique_index": 258, "sortord": 260, "from_fram": [261, 262, 265, 266, 269, 701], "cartesian": [264, 265, 266, 694], "hi": [264, 701], "precip": 264, "nj": 264, "explicit": [264, 273, 707], "explicitli": [265, 645, 665, 696, 701, 703, 710, 712], "color": [265, 266], "purpl": 265, "effort": [268, 702], "fail": [268, 696, 709], "situat": [268, 586, 702, 712], "mi": 268, "non_monotonic_non_unique_idx": 268, "coerc": [268, 677, 678, 702, 703, 712], "unus": [273, 459, 467], "homogen": 273, "hashabl": 274, "been": [274, 698, 704, 709], "overridden": 274, "1d": [274, 329, 623, 625, 626, 645, 655, 698], "overrid": [274, 698], "extensiondtyp": [274, 712], "iteritem": 274, "to_list": 274, "tolist": 274, "to_append": 284, "convert_dtyp": 285, "cach": [285, 677], "recompil": 285, "incur": [285, 695], "overhead": [285, 694], "nest": [285, 469, 473, 708], "decor": 285, "someth": [285, 534, 696, 701, 707], "upcast": 285, "deriv": [285, 359], "lag": 288, "autocorrel": 288, "1438853844": 288, "9647548490": 288, "csf1": 289, "inclus": [291, 493, 653], "wherev": [291, 698], "gt": [291, 701, 707, 710], "lt": [291, 701, 707, 710], "alic": [291, 707], "bob": [291, 707], "carol": 291, "ev": 291, "anna": 291, "daniel": 291, "accessor": [293, 316, 684, 704], "Be": 293, "parent": [293, 698, 701], "reorder_categori": 293, "remove_categori": 293, "set_categori": 293, "abcd": [293, 482, 548], "as_ord": [293, 461], "as_unord": 293, "ser1": [296, 298], "62": [296, 298], "ser2": [296, 298], "51": [296, 298], "20454263717316112": 296, "015750000000000004": 298, "uint8": [303, 656, 678, 701, 709], "3rd": 308, "ind": [309, 426, 665], "beetl": [314, 346], "hippo": [314, 346], "discard": [314, 665], "kept": [315, 377, 694, 695], "datetimelik": [316, 684], "1h": 316, "hour": [316, 449, 638], "na_sentinel": 322, "chunkedarrai": 327, "singlecolumnfram": [327, 698], "pd_categor": 328, "set_mask": 329, "skip": [329, 664, 665, 669, 678], "mark": [329, 695], "bit": [329, 671, 698], "_column": 329, "seriesgroupbi": [332, 683], "turn": [346, 698], "therefor": [346, 467, 561, 694, 695, 698], "width": [359, 481, 525, 533, 542, 560, 561, 653, 698], "rabbit": [359, 496], "kitten": [359, 488], "puppi": [359, 488], "countries_popul": [374, 377], "montserrat": [374, 377], "5200": [374, 377], "quant_index": 388, "renamed_seri": 393, "numeric_seri": 393, "come": [397, 695, 696], "bar": [397, 696], "baz": [397, 537, 696], "mimic": [417, 696], "interfac": [417, 698, 703, 707], "stai": 417, "pattern": [417, 485, 486, 490, 491, 496, 524, 537, 544, 549, 550, 698], "inspir": 417, "stringr": [417, 560], "packag": [417, 694, 695, 701, 703, 704, 707, 710], "lib": [426, 701, 710], "stringarrai": 426, "0x7f796b0e7600": 426, "0x7f796b0e7750": 426, "rel": [443, 673, 674, 675, 676, 694], "half": 443, "divid": [443, 694], "500000": [443, 589, 591], "166667": 443, "996": [443, 703], "1132223": 448, "2023232": 448, "342234324": 448, "4234324": 448, "001132223": 448, "002023232": 448, "004234324": 448, "clear": [458, 698], "df1": [458, 658, 674, 701, 710], "letter": [458, 520, 553, 559], "df3": 458, "horizont": 458, "df4": 458, "polli": 458, "georg": [458, 534, 543, 707], "new_categori": [459, 466, 467], "seriesorindex": [459, 460, 461, 465, 466, 467, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], "genericindex": [462, 469, 470, 471, 472, 473, 474, 475, 476, 477, 485, 698], "relationship": [464, 591, 698], "old": [465, 466, 467, 695], "reorder": [466, 467], "action": 467, "simultan": 467, "specialis": 467, "hand": 467, "surpris": 467, "leaf": 468, "search_kei": [470, 472], "extract": [471, 497, 539, 547, 563, 684], "indexerror": 471, "possibli": 473, "flat": 473, "criterion": 475, "lists_indic": 476, "ef": [478, 482], "bye": [478, 701], "thank": [478, 483, 707], "sentenc": [479, 526, 544, 549, 552, 553, 556, 557], "swapcas": [479, 526, 553, 556, 557, 684], "friend": 479, "goodby": [479, 483, 554, 555], "stringcolumn": [480, 698], "again": [480, 707], "aa": [480, 536], "bb": [480, 524, 536], "dd": [480, 665], "fillchar": [481, 525, 533, 542], "whitespac": [481, 494, 507, 508, 509, 510, 512, 514, 516, 517, 518, 521, 525, 527, 531, 532, 533, 534, 538, 542, 543, 544, 545, 549, 551, 554, 555, 665], "as_list": 482, "gram": [482, 529, 530], "bigram": [482, 529], "ngram": [482, 530, 684], "str_seri": [482, 529, 644], "efgh": 482, "xyz": [482, 484, 529], "bc": [482, 489], "cd": 482, "fg": 482, "gh": 482, "xy": 482, "yz": 482, "bcd": 482, "efg": 482, "fgh": 482, "world": [483, 487, 497, 525, 531, 532, 540, 542, 554, 555, 668], "k": [483, 522, 577, 668, 702], "\u00e9ee": 484, "97": [484, 703], "121": 484, "122": 484, "50089": 484, "101": [484, 644, 701], "98": 484, "99": [484, 498, 531], "pat": [485, 486, 490, 491, 496, 524, 528, 537, 539, 544, 549, 550], "flag": [485, 486, 491, 496, 528, 537, 703], "regular": [485, 486, 490, 491, 496, 528, 537, 544, 549, 550, 696, 708], "multilin": [485, 486, 491, 496, 528], "liter": [485, 486, 524, 537, 544, 549, 668], "anyth": [485, 534, 537, 543], "dotal": [485, 486, 491, 496, 528], "mous": 485, "hous": 485, "og": 485, "digit": [485, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 521, 559, 694, 705], "might": [485, 703, 707], "35": [485, 638, 639, 640, 642, 661, 665, 666, 669, 670], "escap": [486, 524], "aaba": [486, 701], "baca": [486, 701], "caba": [486, 701], "dollar": 486, "sign": [486, 561, 678, 705], "aab": 486, "ca": 486, "token": [487, 494, 529, 530, 531, 532, 538, 554, 643, 644, 684], "measur": [488, 489, 535, 591, 694], "levenshtein": [488, 489], "edit": [488, 489], "www": 488, "cuelog": 488, "com": [488, 558, 559, 709], "blog": 488, "doggi": 488, "kitti": 488, "pup": 488, "dogi": 488, "tell": 489, "symmetr": 489, "diagon": [489, 703], "cba": 489, "nativ": [490, 695], "bat": [490, 550], "bear": [490, 550], "captur": [491, 694], "subject": [491, 707], "c3": 491, "repl": [492, 493, 502, 537, 539, 548], "alphanumer": [492, 507, 508, 509, 510, 512, 514, 516, 517, 518, 521], "pear": 492, "plum": 492, "72": [492, 701], "100k": 492, "unicod": [493, 510, 517, 531, 556], "ordin": [493, 556], "maketran": [493, 556], "helper": [493, 556, 698, 703], "caus": 493, "undefin": [493, 644, 707], "aeiou": 493, "0123456789": [493, 502], "aei": 493, "ou": 493, "456": [493, 515, 661, 665, 666, 669, 670], "_": [493, 494, 502, 522, 524, 525, 529, 530, 538, 542, 559, 656], "___ou": 493, "aei__": 493, "0123___789": 493, "min_token_length": 494, "theme": [494, 538, 696], "music": [494, 538], "substr": [495, 501, 540, 541, 546, 547], "fulli": [495, 501, 540, 541, 701, 705, 707], "failur": [495, 540], "ddb": [495, 501, 541], "word": [496, 520, 526, 552, 557, 643, 644], "json_path": 498, "allow_single_quot": 498, "strip_quotes_from_single_str": 498, "missing_fields_as_nul": 498, "jsonpath": 498, "quot": [498, 665, 668], "doubl": [498, 668], "strip": [498, 527, 545, 684], "book": [498, 529, 530, 644], "author": 498, "nigel": 498, "ree": 498, "titl": [498, 520, 526, 552, 557, 684], "centuri": 498, "95": 498, "evelyn": 498, "waugh": 498, "sword": 498, "honour": 498, "1234": [499, 500], "abcdef": [499, 500], "1a2": [499, 500], "cafe": [499, 500], "htoi": [499, 684], "4660": [499, 500], "11259375": [499, 500], "418": [499, 500], "51966": [499, 500], "traceback": [501, 541], "recent": [501, 541], "stdin": [501, 541], "modul": [501, 541, 684, 694, 695, 699, 701, 712], "abb": [501, 541], "abcdefghij": 502, "ab_cdefghij": 502, "01_23456789": 502, "abcdefghij_": 502, "0123456789_": 502, "ip": [503, 504, 696], "168": [503, 504], "212336897": [503, 504], "167772161": [503, 504], "ip2int": [504, 684], "conson": [505, 506], "troubl": [505, 506, 698], "vowel": 506, "isalpha": [507, 509, 510, 512, 514, 516, 517, 518, 521, 684, 707], "isdigit": [507, 508, 509, 512, 513, 514, 516, 517, 518, 521, 684, 707], "isnumer": [507, 508, 509, 510, 512, 513, 514, 516, 518, 521, 684], "isdecim": [507, 508, 510, 512, 513, 514, 516, 517, 518, 521, 684, 707], "alphabet": [507, 508, 509, 510, 512, 514, 516, 517, 518, 521], "isinteg": [507, 508, 509, 510, 512, 516, 517, 518, 521, 684], "isfloat": [507, 508, 509, 510, 513, 514, 516, 517, 518, 521, 684], "islow": [507, 508, 509, 510, 512, 514, 517, 518, 521, 684, 707], "lowercas": [507, 508, 509, 510, 512, 514, 516, 517, 518, 520, 521, 526, 552, 553, 557, 643], "isspac": [507, 508, 509, 510, 512, 514, 516, 517, 521, 684, 707], "isupp": [507, 508, 509, 510, 512, 514, 516, 517, 518, 684, 707], "uppercas": [507, 508, 509, 510, 512, 514, 516, 517, 518, 520, 521, 526, 552, 553, 557], "one1": [507, 508, 517], "punctuat": [507, 531], "isalnum": [508, 509, 510, 512, 514, 516, 517, 518, 521, 684, 707], "\u00b3": [509, 510, 517], "\u2155": [509, 510, 517], "superscript": 510, "subscript": 510, "123213": 512, "123": [512, 515, 527, 534, 543, 551, 638, 639, 640, 641, 642, 661, 665, 666, 669, 670], "0001": 512, "234": [512, 638, 639, 640, 641, 642, 705], "plain": 512, "text": [512, 514, 643, 644, 661, 664, 665, 666, 669, 670, 671, 684, 699], "123def": 513, "0x2d3": 513, "plan": [514, 695, 707], "ipv4": 515, "address": [515, 696, 698], "127": 515, "255": 515, "leopard": [516, 520, 521], "golden": [516, 520, 521], "eagl": [516, 520, 521], "snake": [516, 520, 521], "quantiti": 517, "20201101": 519, "192011": 519, "18200111": 519, "2120": 519, "string_na_rep": 522, "sep_na_rep": 522, "themselv": [522, 696], "interven": 522, "suppli": [522, 656, 707], "ghi": [522, 665, 705], "a_b_c": 522, "d_e_f": 522, "g_h_i": 522, "a_b_k": 522, "c_d": 522, "esc": 524, "ddbc": 524, "b_": 524, "wildcard": [524, 698, 701], "ai_": 525, "__": [525, 542], "capit": [526, 552, 553, 556, 557, 684], "to_strip": [527, 545, 551], "trail": [527, 545, 551], "newlin": [527, 545, 551, 695], "rstrip": [527, 551, 684], "ac": 528, "my": 529, "favorit": 529, "my_favorit": 529, "hhh": 529, "abc_def": 529, "def_xyz": 529, "xyz_hhh": 529, "white": 530, "this_i": 530, "is_th": 530, "best_book": 530, "do_low": [531, 643], "subword_token": 531, "around": [531, 534, 544, 549, 695, 698, 707], "p": 531, "symbol": 531, "cjk": 531, "cc": [531, 536], "cf": 531, "do_lower_cas": [531, 643, 644], "accent": 531, "h\u00e9llo": 531, "tworld": 531, "\u0103\u0107c\u0117\u00f1ted": 531, "up": [533, 544, 549, 614, 620, 677, 694, 695, 699, 701, 707, 712], "rjust": [533, 561, 684], "ljust": [533, 561, 684], "zfill": [533, 684], "prepend": [533, 561], "carib": 533, "tiger": 533, "rpartit": [534, 684], "linda": [534, 543], "van": [534, 543], "der": [534, 543], "berg": [534, 543], "pitt": [534, 543], "river": [534, 543], "999": [534, 543, 701, 703], "porter": 535, "stemmer": 535, "super": 535, "ccc": 536, "fuz": 537, "ba": 537, "bao": 537, "insid": [538, 645, 665, 671, 696, 706, 707], "back": [539, 665, 669, 670, 698, 701, 709, 712], "ref": [539, 566, 585, 611], "templat": 539, "section": [539, 548, 694, 695, 696, 697, 701, 706, 707, 710, 712], "a543": 539, "z756": 539, "av453": 539, "zv576": 539, "rfind": [541, 684, 707], "_________hello": 542, "___________rapid": 542, "version": [544, 549, 683, 695, 701, 703, 710], "tutori": [544, 701], "throughout": [544, 549], "slightli": [544, 665, 683, 694], "complex": [544, 645, 696, 698, 707], "lstrip": [545, 551, 684], "slice_replac": [546, 684], "koala": 546, "fox": 546, "chameleon": 546, "oala": 546, "ox": 546, "hameleon": 546, "ko": 546, "fo": 546, "ch": 546, "kaa": 546, "fx": 546, "caeen": 546, "kl": 546, "cm": 546, "ello": 547, "abdc": 548, "until": [548, 701], "xc": 548, "xdc": 548, "xcde": 548, "axc": 548, "axd": 548, "rsplit": [549, 684], "endswith": [550, 684, 707], "unmap": 556, "untouch": 556, "swapc1s": 556, "low": [556, 707], "nt": 556, "nc": 556, "swapc1": 556, "No": [558, 559, 644, 653, 698, 708], "2fb": [558, 559], "2fd": [558, 559], "20f": [558, 559], "2c6": [558, 559], "3a": [558, 559], "2f": [558, 559], "2frapid": [558, 559], "2fstart": [558, 559], "2fmedium": [558, 559], "medium": [558, 559, 653], "paragraph": 560, "expand_tabsbool": 560, "replace_whitespac": 560, "drop_whitespac": 560, "break_long_word": 560, "break_on_hyphen": 560, "str_wrap": 560, "expand_tab": 560, "nwrap": 560, "nto": 560, "reach": [561, 698], "longer": [561, 696, 697], "001": 561, "children": [563, 698], "agg": [566, 609, 611, 701, 704, 706], "f1": [566, 585, 611], "quantil": [566, 585, 611, 702, 706], "__name__": [566, 585, 611], "q0": [566, 585, 611], "f2": [566, 585, 611], "score": 574, "90": [574, 701], "hole": 577, "gap": [577, 698], "introduc": [583, 695], "indetermin": 583, "mult": 586, "redund": [586, 702], "pairwis": [589, 591], "kendal": 589, "val1": [589, 591], "val2": [589, 591], "val3": [589, 591], "385727": 589, "714575": 589, "bia": 591, "comparison": [591, 694, 695, 700, 708, 710], "understand": 591, "member": [591, 695], "invert": 591, "matric": [591, 703], "en": [591, 645], "wikipedia": 591, "wiki": 591, "estimation_of_covariance_matric": 591, "833333": 591, "enum": 601, "complement": [601, 711], "cumcount": 601, "seen": 601, "aaabba": 601, "round": [614, 620], "dt": [614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 689, 701, 704], "datetime_seri": [615, 616, 617, 618, 621, 630, 631, 634, 636, 637, 710], "2013": 622, "1y": 622, "2003": [622, 707], "2005": [622, 704], "2007": 622, "2008": 622, "2009": [622, 629], "2011": 622, "2012": [622, 677, 710], "2021": 629, "serindex": 629, "to_datetim": 629, "53": 629, "dt_sr": 633, "weekday_seri": 635, "12231312123": [638, 639, 640, 641, 642], "1231231231": [638, 639, 640, 641, 642], "1123236768712": [638, 639, 640, 641, 642], "2135656": [638, 639, 640, 641, 642], "3244334234": [638, 639, 640, 641, 642], "141": [638, 639, 640, 642], "231": [638, 639, 640, 641, 642], "13000": [638, 639, 640, 642], "48": [638, 639, 640, 642, 671, 712], "712": [638, 639, 640, 641, 642], "656": [638, 639, 640, 641, 642], "37": [638, 639, 640, 642, 710], "123000": [640, 642], "231000": [640, 642], "712000": [640, 642], "656000": [640, 642], "234000": [640, 642], "231312123": 641, "231231231": 641, "236768712": 641, "002135656": 641, "244334234": 641, "48912": 642, "21631": 642, "36768": 642, "2135": 642, "47534": 642, "hash_fil": 643, "bert": [643, 644], "subword": [643, 644], "vocabulari": [643, 644], "pretrain": [643, 644], "21x": 643, "util": [643, 644, 684, 700, 701], "hash_vocab_util": [643, 644], "hash_vocab": [643, 644], "max_length": 644, "max_num_row": 644, "add_special_token": 644, "return_tensor": 644, "return_token_type_id": 644, "batch": 644, "alloc": [644, 665, 698, 707], "temporari": 644, "twice": [644, 694], "classif": 644, "model": [644, 698, 701], "do_not_trunc": 644, "huggingfac": 644, "pt": 644, "tf": 644, "tensorflow": 644, "pytorch": 644, "torch": 644, "input_id": 644, "fed": 644, "attention_mask": 644, "attend": 644, "vocab": 644, "txt": 644, "voc_hash": 644, "cudf_token": 644, "tokenizer_output": 644, "1142": 644, "1110": 644, "1103": 644, "102": [644, 701], "1436": 644, "1520": 644, "featur": [645, 694, 695, 696, 711], "readthedoc": 645, "cudapysupport": 645, "cmath": 645, "libcudf": [645, 697, 698], "ptx": 645, "sin": 645, "co": 645, "tan": 645, "lgamma": 645, "global": [645, 711], "known": [645, 677], "count_if_gt_3": 645, "retbin": 653, "include_lowest": 653, "segment": 653, "go": [653, 694, 696, 698, 700, 703, 707], "continu": [653, 671, 703], "criteria": [653, 667], "extens": [653, 665], "done": [653, 701], "994": [653, 703], "bad": 653, "unspecifi": 654, "fortran": [655, 703], "prefix_sep": 656, "dummy_na": 656, "spars": [656, 708], "drop_first": 656, "hot": 656, "dummi": 656, "value1": 656, "value2": 656, "a_value1": 656, "a_value2": 656, "a_non": 656, "a_1": 656, "a_2": 656, "a_nan": 656, "a_nul": 656, "max_file_s": 658, "file_name_prefix": 658, "exceed": 658, "writer": [658, 686, 694, 709], "gb": 658, "mandatori": 658, "context": 658, "cw": 658, "write_t": 658, "manual": [658, 696], "num_row": [661, 664, 669, 694], "num_row_group": 661, "row_group": [661, 670], "num1": [661, 665, 666, 669, 670], "13t12": [661, 665, 666, 669, 670], "5451": [661, 665, 666, 669, 670], "14t12": [661, 665, 666, 669, 670], "5784": [661, 665, 666, 669, 670], "789": [661, 665, 666, 669, 670], "15t18": [661, 665, 666, 669, 670], "6117": [661, 665, 666, 669, 670], "myvarnam": 662, "myvalnam": 662, "filepath_or_buff": [664, 665, 669, 670, 671], "skiprow": [664, 665, 669], "load": [664, 665, 666, 668, 669, 670, 700, 701], "avro": [664, 684, 709], "pathlib": [664, 665, 667, 668, 669, 670, 671, 701], "py": [664, 665, 667, 668, 669, 670, 671, 694, 701, 710], "_path": [664, 665, 667, 668, 669, 670, 671], "localpath": [664, 665, 667, 668, 669, 670, 671], "ftp": [664, 665, 668, 669, 670, 671], "bytesio": [664, 669, 670], "parser": [664, 668, 669, 670], "remot": [664, 665, 669, 670, 696], "pandavro": 664, "pandas_df": 664, "to_avro": 664, "index_col": 665, "usecol": 665, "mangle_dupe_col": 665, "true_valu": 665, "false_valu": 665, "skipinitialspac": 665, "skipfoot": 665, "keep_default_na": 665, "na_filt": 665, "skip_blank_lin": 665, "parse_d": 665, "thousand": [665, 703], "linetermin": 665, "quotechar": 665, "doublequot": 665, "comment": [665, 696], "delim_whitespac": 665, "byte_rang": [665, 668, 671], "use_python_file_object": [665, 669, 670], "bytes_per_thread": 665, "comma": 665, "seper": 665, "recogn": 665, "qnan": 665, "unusu": 665, "mm": 665, "european": 665, "decompress": [665, 668, 709], "gz": [665, 668], "quote_minim": 665, "quote_al": 665, "quote_non": 665, "altogeth": [665, 698], "arrow": [665, 669, 670, 698, 700, 708], "pythonfil": [665, 669, 670], "abstractbufferedfil": [665, 669, 670], "throughput": 665, "decompos": 665, "transfer": [665, 709], "pool": 665, "256_000_000": 665, "to_csv": [665, 701, 709], "fp": 665, "__fspath__": 667, "protocol": 667, "term": [667, 668, 694, 707, 712], "to_hdf": 667, "auto": [668, 696], "keep_quot": 668, "cudf_experiment": 668, "to_json": 668, "typ": 668, "recov": 668, "convert_ax": 668, "proper": 668, "convert_d": 668, "datelik": 668, "_at": 668, "_time": 668, "keep_default_d": 668, "precise_float": 668, "strtod": 668, "py3": 668, "jsonread": 668, "wrap": [668, 684, 695, 701, 707], "json_str": 668, "v1": 668, "v2": 668, "k1": 668, "use_index": 669, "timestamp_typ": 669, "predic": [669, 670], "disjunct": [669, 670], "dnf": [669, 670], "conjunct": [669, 670, 695, 707], "AND": [669, 670], "outermost": 669, "OR": [669, 670], "notat": [669, 670], "deprec": [669, 697], "seek": 669, "to_orc": [669, 709], "strings_to_categor": 670, "use_pandas_metadata": 670, "categorical_partit": 670, "open_file_opt": 670, "gdf_categori": 670, "gdf_string": 670, "discourag": 670, "open_parquet_fil": 670, "deactiv": 670, "precach": 670, "precache_opt": 670, "open_file_func": 670, "read_parquet_metadata": 670, "compression_offset": 671, "datasourc": 671, "bgzip": 671, "virtual": 671, "baseexcept": 672, "check_dtyp": [673, 674, 676], "check_column_typ": [673, 674], "equiv": [673, 674, 675, 676], "check_less_precis": [673, 675, 676], "check_exact": [673, 674, 675, 676], "check_datetimelike_compat": [673, 674, 676], "check_categor": [673, 674, 675, 676], "check_category_ord": [673, 676], "rtol": [673, 674, 675, 676], "1e": [673, 674, 675, 676], "atol": [673, 674, 675, 676], "columnbas": [673, 674, 675, 676, 698], "intend": [673, 674, 675, 676, 698, 707], "inferred_typ": [673, 674, 675, 676], "idl": [673, 674, 676], "check_datetime_like_compat": [673, 674, 676], "appropri": [673, 674, 675, 676, 696, 698], "assert": [673, 674, 675, 676], "messag": [673, 674, 675, 676, 695], "check_index_typ": [674, 676], "check_frame_typ": 674, "check_nam": [674, 675, 676], "by_block": 674, "check_lik": 674, "assertionerror": [674, 675, 676], "hitch": [674, 675, 676], "check_ord": 675, "int32index": 675, "id1": 675, "id2": 675, "check_series_typ": 676, "sr1": 676, "sr2": 676, "utc": 677, "infer_datetime_format": 677, "eg": 677, "bug": [677, 695], "strftime": 677, "denot": 677, "off": [677, 696, 701, 709], "10x": 677, "succeed": 677, "assembl": 677, "abbrevi": 677, "plural": 677, "2015": 677, "1490195805": 677, "22t15": 677, "000000000": 677, "1490195805433502912": 677, "1780": 677, "20t01": 677, "494253056": 677, "polici": [678, 695], "notifi": 678, "encount": [678, 695], "unsign": [678, 705], "down": [678, 694], "datatyp": 678, "decoupl": 678, "3e3": 678, "3000": 678, "cudf": [683, 684, 693, 695, 697, 698, 699, 702, 705, 706, 708, 709, 711], "usual": [683, 694], "permit": 683, "restrict": 683, "publicli": 684, "namespac": [684, 689, 696], "merg": [684, 694, 698, 701, 704, 712], "timedeltaindex": 684, "deal": 684, "roll": [684, 698, 704, 708], "subwordtoken": [684, 700], "stringmethod": 684, "byte_count": 684, "character_ngram": 684, "character_token": 684, "code_point": 684, "detoken": 684, "edit_dist": 684, "edit_distance_matrix": 684, "filter_alphanum": 684, "filter_charact": 684, "filter_token": 684, "findal": 684, "get_json_object": 684, "hex_to_int": 684, "ip_to_int": 684, "is_conson": 684, "is_vowel": 684, "isempti": 684, "ishex": 684, "isipv4": 684, "istimestamp": 684, "istitl": [684, 707], "ngrams_token": 684, "normalize_charact": 684, "normalize_spac": 684, "porter_stemmer_measur": 684, "replace_token": 684, "replace_with_backref": 684, "rindex": 684, "slice_from": 684, "token_count": 684, "translat": [684, 698], "url_decod": 684, "url_encod": 684, "listmethod": 684, "structmethod": 684, "explod": 684, "get_opt": [684, 699], "set_opt": [684, 711], "describe_opt": [684, 711], "variant": 685, "thereof": 685, "reader": [686, 701, 709], "acceler": [686, 697, 700, 701, 707, 709], "cpu": [686, 701, 704, 709, 712], "futur": [686, 694, 695, 697, 701, 707, 710], "goal": [694, 695, 697], "repositori": 694, "pytest": 694, "plugin": [694, 696], "framework": 694, "seamless": 694, "experi": [694, 696, 707], "develop": [694, 695, 696, 698, 699, 700, 703, 707, 708], "public": [694, 696], "former": [694, 696], "macro": 694, "vi": 694, "\u00e0": 694, "help": [694, 695, 696], "quantifi": 694, "minim": [694, 695, 696], "bind": [694, 698], "focu": [694, 703], "footprint": 694, "At": [694, 697, 698, 707], "stabil": [694, 695], "free": 694, "bench_class": 694, "eval": 694, "bench_datafram": 694, "hierarchi": [694, 698], "bench_frame_or_index": 694, "trigger": 694, "veri": [694, 703, 706, 707], "characterist": 694, "_intern": 694, "_apply_boolean_mask": 694, "bench_dataframe_intern": 694, "broadli": 694, "speak": 694, "live": [694, 695], "bench_io": 694, "discov": 694, "test_": 694, "bench_": 694, "instal": [694, 696, 707], "termin": 694, "autosav": 694, "xxxx_": 694, "xxxx": 694, "yyyi": 694, "command": [694, 696], "short": [694, 696, 701], "param": 694, "config": [694, 695], "hard": 694, "advertis": [694, 704], "littl": [694, 698], "natur": [694, 710], "meaning": 694, "care": 694, "interchang": [694, 698], "demonstr": [694, 696, 707], "bench_foo": 694, "six": 694, "did": [694, 707], "interest": 694, "cover": [694, 696, 697, 707], "baselin": [694, 701], "coverag": 694, "tweak": 694, "debug": [694, 695, 698], "num_col": 694, "aspect": 694, "want": [694, 696, 701, 703, 707, 710], "quantit": 694, "easi": [694, 696, 703, 704], "environ": [694, 696, 709], "cudf_benchmarks_use_panda": 694, "easili": [694, 696, 700], "simpli": [694, 696, 698, 703], "remap": 694, "why": 694, "critic": 694, "ci": [694, 701], "significantli": 694, "cycl": [694, 695], "balanc": 694, "cudf_benchmarks_debug_onli": 694, "advantag": [694, 703], "redefin": [694, 707], "crucial": 694, "although": 694, "suit": 694, "guidelin": [694, 696], "spy": 694, "svg": 694, "invoc": 694, "tool": [694, 695], "strength": 694, "somewhat": 694, "workflow": [694, 695, 700, 701, 708], "encourag": [694, 696, 703, 704], "discuss": [694, 696, 697, 698, 701, 710], "hood": [694, 696, 697, 698, 701], "magic": 694, "pytest_cas": 694, "programat": 694, "unambigu": 694, "classnam": 694, "_dtype_": 694, "_nulls_": 694, "_cols_": 694, "_rows_": 694, "dataframe_dtype_int_rows_100": 694, "cumbersom": [694, 698], "moreov": 694, "embed": 694, "problem": [694, 707], "essenti": [694, 698, 707], "dataframe_dtype_int_cols_6": 694, "focus": 695, "high": [695, 698], "overview": [695, 700, 708], "practic": [695, 697, 698, 701], "subpackag": 695, "_lib": 695, "emploi": 695, "linter": 695, "manag": [695, 698, 707], "pre": [695, 707], "commit": 695, "strongli": [695, 696], "prior": 695, "yaml": 695, "repo": 695, "truth": 695, "lint": [695, 696], "flake8": 695, "complianc": 695, "black": 695, "formatt": 695, "isort": 695, "mypi": 695, "static": 695, "hint": 695, "difficult": [695, 704, 707], "pydocstyl": [695, 696], "docstr": [695, 697], "pyproject": 695, "toml": 695, "setup": [695, 701], "cfg": 695, "project": [695, 698, 704], "parti": 695, "addition": [695, 697, 698, 704], "hook": 695, "overal": [695, 697], "releas": [695, 707], "prevent": 695, "unexpect": 695, "sure": [695, 703, 707], "emit": 695, "futurewarn": [695, 701, 710], "opportun": 695, "thing": [695, 704, 707], "new_foo": 695, "signal": 695, "deprecationwarn": 695, "hidden": 695, "__main__": 695, "analog": [695, 698], "sometim": [695, 701, 703, 707], "latest": 695, "reason": [695, 696, 698, 709], "exorbit": 695, "runtim": [695, 707], "premium": 695, "believ": 695, "perfect": 695, "infeas": [695, 698], "undesir": 695, "consult": 695, "team": 695, "assess": 695, "proce": [695, 701, 703, 707], "substanti": 695, "power": [695, 696], "friendli": 695, "profil": [695, 697], "expos": [695, 698, 703, 707, 709], "pxd": [695, 698], "declar": [695, 698], "pyx": 695, "thin": [695, 707], "layer": [695, 697, 701], "rare": 695, "benefit": [695, 696], "happen": [695, 707, 710], "quit": 695, "justifi": 695, "benchmark": [695, 697, 700], "suffici": [695, 696], "mention": [695, 698, 704, 707], "logic_error": 695, "cuda_error": 695, "runtimeerror": 695, "payload": 695, "brittl": 695, "compromis": 695, "adopt": 695, "strategi": 695, "roadmap": 695, "diversifi": 695, "inlin": 696, "restructuredtext": 696, "myst": 696, "sphinx": 696, "contribut": [696, 697, 700], "lieu": 696, "explan": [696, 699], "commonli": [696, 712], "brief": 696, "_strongly_": 696, "numpydoc": 696, "scenario": 696, "getter": 696, "That": 696, "inherit": [696, 698], "codebas": 696, "pull": 696, "aim": 696, "api_doc": 696, "rst": 696, "discover": 696, "autosummari": 696, "api1": 696, "api2": 696, "render": 696, "layout": [696, 698], "stub": 696, "currentmodul": 696, "autofunct": 696, "autodoc": 696, "approach": [696, 698, 707], "facilit": [696, 698], "bodi": 696, "api_nam": 696, "dedic": 696, "superset": 696, "markdown": 696, "syntax": [696, 707], "link": 696, "anchor": 696, "instruct": 696, "nb": 696, "straightforward": 696, "navig": [696, 708], "shell": 696, "server": 696, "Then": 696, "web": 696, "browser": 696, "localhost": 696, "8000": 696, "machin": [696, 701, 704], "visibl": 696, "network": 696, "ssh": 696, "local_port": 696, "remote_port": 696, "remote_ip": 696, "enforc": [696, 701], "regard": 696, "main": [697, 698, 707], "dask_cudf": [697, 701, 704], "cudf_kafka": 697, "custreamz": 697, "robustli": 697, "guidanc": 697, "topic": 697, "cython": 697, "publish": 697, "advanc": [697, 703, 704, 707], "serv": 698, "face": 698, "bridg": 698, "review": 698, "role": 698, "requisit": 698, "tradeoff": 698, "tie": 698, "holist": 698, "diagram": 698, "princip": 698, "eponym": 698, "tabular": [698, 701, 707], "columnar": [698, 700, 701], "meanwhil": 698, "abstract": 698, "materi": 698, "preliminari": 698, "let": [698, 703, 707], "dive": 698, "deeper": 698, "surmis": 698, "diamond": 698, "simpler": [698, 707], "flatten": 698, "ve": [698, 701, 707], "highlight": [698, 707], "concret": [698, 707], "eventu": 698, "almost": 698, "rewrit": 698, "alon": 698, "reimplement": 698, "behav": 698, "instanti": 698, "unfortun": 698, "mimick": 698, "__new__": 698, "tree": 698, "masquerad": 698, "stack": 698, "glue": 698, "own": [698, 709], "semant": 698, "apach": [698, 700, 701], "conduc": 698, "concept": [698, 701], "extent": 698, "interoper": [698, 700, 708], "simplifi": 698, "numericalcolumn": 698, "datetimecolumn": 698, "decis": 698, "4000": 698, "sizeof": 698, "128": 698, "chees": 698, "preexist": 698, "knowledg": [698, 707], "structdtyp": [698, 705], "decimaldtyp": 698, "intervaldtyp": 698, "contigu": [698, 703], "rmm": 698, "devicebuff": 698, "interact": [698, 701, 707], "explanatori": 698, "column_view": 698, "table_view": 698, "question": [698, 707], "trivial": 698, "descent": 698, "whole": 698, "fact": [698, 710], "act": 698, "reduct": [698, 704], "scan": 698, "bypass": 698, "straight": 698, "resampl": 698, "composit": 698, "explain": 699, "_register_opt": 699, "yield": [699, 701, 712], "fixtur": 699, "clean": 699, "scientist": 700, "program": 700, "dask": [700, 708], "introduct": 701, "gear": 701, "mainli": 701, "smooth": [701, 708], "cluster": [701, 704], "enough": [701, 704, 707], "comfort": [701, 707], "spread": [701, 704], "portion": [701, 707], "borrow": 701, "adapt": [701, 707], "cheatsheet": 701, "from_cudf": 701, "npartit": [701, 704], "thread_load": 701, "cuh": 701, "jitifi": 701, "thread_stor": 701, "ddf": 701, "dask_gdf": 701, "met": 701, "cudf_compar": 701, "dask_cudf_compar": 701, "isin": 701, "gdf1": 701, "rand": [701, 710], "082654": 701, "967955": 701, "399417": 701, "441425": 701, "784297": 701, "793582": 701, "070303": 701, "271711": 701, "gdf2": 701, "opt": [701, 710], "conda": [701, 707, 710], "env": [701, 710], "python3": [701, 710], "site": [701, 710], "column_accessor": 701, "251": 701, "343382": 701, "003700": 701, "20043": 701, "581614": 701, "907812": 701, "101512": 701, "24179": 701, "224180": 701, "var": [701, 706], "666666666666666": 701, "6666666666666667": 701, "map_partit": [701, 704], "add_ten": 701, "progress": 701, "ds2": 701, "restor": 701, "post": [701, 706], "ddf_a": 701, "ddf_b": 701, "paradigm": 701, "agg_col1": 701, "agg_col2": 701, "54": 701, "73": 701, "date_df": 701, "986051": 701, "232034": 701, "397617": 701, "103839": 701, "date_ddf": 701, "grade": 701, "dgdf": 701, "to_numpi": 701, "to_arrow": [701, 712], "example_output": 701, "mkdir": 701, "foo_dask": 701, "star": 701, "temp_parquet": 701, "example_fil": 701, "cudf_root": 701, "orc_fil": 701, "testorcfil": 701, "test1": 701, "boolean1": 701, "byte1": 701, "short1": 701, "int1": 701, "long1": 701, "float1": 701, "double1": 701, "bytes1": 701, "string1": 701, "middl": 701, "1024": 701, "65536": 701, "2048": 701, "100000000": 701, "chani": 701, "spark": 701, "lazi": 701, "moment": 701, "graph": 701, "delai": 701, "activ": 701, "background": [701, 707], "system": 701, "finish": 701, "downstream": [701, 703], "contract": 701, "upstream": 701, "snippet": 701, "localcudaclust": 701, "worker": 701, "beyond": 701, "scope": [701, 707], "client": 701, "dask_cuda": 701, "2022": 701, "991": [701, 703], "preload": 701, "info": 701, "007": 701, "020": 701, "136": [701, 703], "10000000": 701, "ddf2": 701, "2000000": 701, "8000000": 701, "9999999": 701, "nvidia": 701, "smi": 701, "sun": 701, "oct": 701, "495": 701, "bu": 701, "disp": 701, "volatil": 701, "uncorr": 701, "ecc": 701, "fan": 701, "perf": 701, "pwr": 701, "cap": 701, "mig": 701, "tesla": 701, "v100": 701, "pcie": 701, "00000000": 701, "26c": 701, "p0": 701, "32w": 701, "250w": 701, "1473mib": 701, "32510mib": 701, "27c": 701, "33w": 701, "307mib": 701, "28c": 701, "24c": 701, "85": [701, 703], "25c": 701, "gi": 701, "pid": 701, "twenti": 701, "800": [701, 703], "sleep": 701, "1879mib": 701, "715mib": 701, "713mib": 701, "34w": 701, "proceed": 701, "ll": [701, 703, 707], "ddf1": 701, "randint": [701, 712], "spent": 701, "results_ddf": 701, "sooner": 701, "had": 701, "doneandnotdonefutur": 701, "d11bf066046253a5585d1ac3be5a2654": 701, "not_don": 701, "notebook": [703, 707], "introductori": 703, "algebra": 703, "timeit": 703, "__version__": 703, "cupy_from_dlpack": 703, "from_dlpack": 703, "fromdlpack": 703, "as_gpu_matrix": 703, "500": 703, "arr_cupi": 703, "to_dlpack": 703, "to_cupi": 703, "202": 703, "\u00b5": 703, "dev": 703, "631": [703, 712], "634": 703, "87": 703, "501": 703, "1001": 703, "502": 703, "1002": 703, "9997": 703, "10497": 703, "10997": 703, "9998": 703, "10498": 703, "10998": 703, "9999": 703, "10499": 703, "10999": 703, "__cuda_array_interface__": [703, 707], "leverag": [703, 707, 712], "cola_cupi": 703, "69": 703, "253": 703, "229": 703, "norm": 703, "reshaped_arr": 703, "197": 703, "198": 703, "199": 703, "201": 703, "397": 703, "398": 703, "399": 703, "401": 703, "402": 703, "597": 703, "598": 703, "599": 703, "9400": 703, "9401": 703, "9402": 703, "9597": 703, "9598": 703, "9599": 703, "9600": 703, "9601": 703, "9602": 703, "9797": 703, "9798": 703, "9799": 703, "9800": 703, "9801": 703, "9802": 703, "603": 703, "804": 703, "1005": [703, 707], "1206": 703, "1407": 703, "1608": 703, "1809": 703, "2211": 703, "2412": 703, "2613": 703, "2814": 703, "3015": 703, "3216": 703, "3417": 703, "3618": 703, "3819": 703, "4020": 703, "4221": 703, "4422": 703, "4623": 703, "4824": 703, "5025": 703, "5226": 703, "5427": 703, "5628": 703, "5829": 703, "6030": 703, "6231": 703, "6432": 703, "6633": 703, "6834": 703, "7035": 703, "7236": 703, "7437": 703, "7638": 703, "7839": 703, "8040": 703, "8241": 703, "8442": 703, "8643": 703, "8844": 703, "9045": 703, "9246": 703, "9447": 703, "9648": 703, "9849": 703, "linalg": 703, "577306": 703, "967739": 703, "easiest": [703, 707], "beforehand": 703, "reshaped_df": 703, "46": 703, "190": 703, "191": 703, "192": 703, "193": 703, "194": 703, "195": 703, "196": 703, "203": 703, "204": 703, "205": 703, "206": 703, "207": 703, "208": 703, "209": 703, "391": 703, "392": 703, "393": 703, "394": 703, "395": 703, "396": 703, "403": 703, "405": 703, "406": 703, "407": 703, "408": 703, "409": 703, "590": 703, "591": 703, "592": 703, "593": 703, "594": 703, "595": 703, "596": 703, "600": 703, "601": 703, "602": 703, "604": 703, "605": 703, "606": 703, "607": 703, "608": 703, "609": 703, "790": 703, "791": 703, "792": 703, "793": 703, "794": 703, "795": 703, "796": 703, "797": 703, "798": 703, "799": 703, "801": 703, "802": 703, "803": 703, "805": 703, "806": 703, "807": 703, "808": 703, "809": 703, "990": 703, "992": 703, "993": 703, "995": 703, "997": [703, 707], "998": 703, "isfortran": 703, "fortran_arr": 703, "asfortranarrai": 703, "709": 703, "todlpack": 703, "665": 703, "ecosystem": [703, 707], "isn": 703, "matur": 703, "hundr": 703, "wouldn": 703, "previous": 703, "new_arr": 703, "19900": 703, "59900": 703, "99900": 703, "139900": 703, "179900": 703, "219900": 703, "259900": 703, "299900": 703, "339900": 703, "379900": 703, "419900": 703, "459900": 703, "499900": 703, "539900": 703, "579900": 703, "619900": 703, "659900": 703, "699900": 703, "739900": 703, "779900": 703, "819900": 703, "859900": 703, "899900": 703, "939900": 703, "979900": 703, "1019900": 703, "1059900": 703, "1099900": 703, "1139900": 703, "1179900": 703, "1219900": 703, "1259900": 703, "1299900": 703, "1339900": 703, "1379900": 703, "1419900": 703, "1459900": 703, "1499900": 703, "1539900": 703, "1579900": 703, "1619900": 703, "1659900": 703, "1699900": 703, "1739900": 703, "1779900": 703, "1819900": 703, "1859900": 703, "1899900": 703, "1939900": 703, "1979900": 703, "seamlessli": 703, "move": [703, 707], "enorm": 703, "sacrif": 703, "cleanli": 703, "cudf_to_cupy_sparse_matrix": 703, "sparseformat": 703, "_sparse_constructor": 703, "csc_matrix": 703, "csr_matrix": 703, "illustr": 703, "nonzero": 703, "arr": [703, 707], "a0": 703, "a4": 703, "a5": 703, "a6": 703, "a7": 703, "a8": 703, "a9": 703, "a10": 703, "a11": 703, "a12": 703, "a13": 703, "a14": 703, "a15": 703, "a16": 703, "a17": 703, "a18": 703, "a19": 703, "615232": 703, "513625": 703, "578987": 703, "293842": 703, "640397": 703, "710175": 703, "44049": 703, "513833": 703, "250213": 703, "229329": 703, "sparse_data": 703, "512": 703, "825321173895551": 703, "1152": 703, "1719861762616335": 703, "898": 703, "37853515346335": 703, "1538": 703, "603552226273331": 703, "771": 703, "409048326045692": 703, "899": 703, "6816326743253875": 703, "772": 703, "895737927339123": 703, "1156": 703, "477090215423117": 703, "645": 703, "6006339378517844": 703, "1413": 703, "4181239846740308": 703, "6842373096565366": 703, "1287": 703, "296143338590497": 703, "85361398019854": 703, "138": 703, "688002619104724": 703, "1290": 703, "977103695286827": 703, "1418": 703, "4773902659367755": 703, "1547": 703, "3320367605776873": 703, "524": 703, "010353742477195": 703, "592582280810526": 703, "649370233585842": 703, "653": 703, "9762867435748052": 703, "142": 703, "418912339488211": 703, "1422": 703, "3041018487750822": 703, "144": 703, "400376001366657": 703, "272": 703, "4844500535570857": 703, "8318": 703, "137463507668611": 703, "9313": 703, "16881491735179": 703, "9441": 703, "7819997673424012": 703, "9953": 703, "859251855532136": 703, "9059": 703, "306625637579881": 703, "9060": 703, "653491493982037": 703, "9700": 703, "2357636351146395": 703, "9189": 703, "620979106248357": 703, "9573": 703, "8421403709162134": 703, "9190": 703, "525219758409967": 703, "9446": 703, "549296865795004": 703, "086779866535449": 703, "9705": 703, "2592680282364372": 703, "9198": 703, "635618992186828": 703, "9582": 703, "19756221724755663": 703, "8943": 703, "432496341037178": 703, "9841": 703, "9642999559666571": 703, "9843": 703, "6334735391695": 703, "9588": 703, "561368662443039": 703, "9716": 703, "368588392119356": 703, "9337": 703, "920972950363375": 703, "9594": 703, "72058624834202": 703, "9726": 703, "6094381034800103": 703, "8959": 703, "0794608875186218": 703, "9983": 703, "390747769833326": 703, "orchestr": 704, "cohes": 704, "ingest": 704, "decent": 704, "dayofweek": 704, "expens": 704, "cudf_df": 704, "persist": 704, "visual": 704, "comprehens": 704, "track": 704, "certainli": 704, "slight": 704, "inconsist": 704, "tracker": 704, "report": [704, 712], "reus": 704, "newer": 704, "mislead": [704, 705], "frustrat": 704, "apolog": 704, "uint32": [705, 709], "durat": 705, "decimal32dtyp": 705, "decimal64dtyp": 705, "decimal128dtyp": 705, "023": 705, "max_precis": 705, "decimal128": [705, 709], "psr": 705, "pq": 705, "exclus": 706, "nuisanc": 706, "gb1": 706, "gb2": 706, "gb3": 706, "extern": 706, "penalti": 706, "disambigu": 706, "ok": 706, "corr": 706, "866025": 706, "idxmin": 706, "idxmax": 706, "nuniqu": 706, "nth": 706, "cov": 706, "randomdata": 707, "box": 707, "broader": 707, "pydata": [707, 708], "varieti": 707, "devicendarrai": 707, "offer": 707, "const": 707, "unari": [707, 712], "capabl": 707, "singleton": 707, "f_null_sensit": 707, "experiment": [707, 709], "channel": 707, "restart": 707, "string_udfs_en": 707, "_string_udfs_en": 707, "some_str": 707, "__contains__": 707, "grid": 707, "in_col": 707, "out_col": 707, "guard": 707, "cuda_array_interfac": 707, "963": 707, "9630": 707, "977": 707, "1026": 707, "980": 707, "9770": 707, "1048": 707, "1019": 707, "10480": 707, "1078": 707, "960": 707, "985": 707, "10780": 707, "979": 707, "982": 707, "1011": 707, "9790": 707, "theoret": 707, "potenti": 707, "spot": 707, "area": 707, "pipelin": 707, "job": 707, "entrypoint": 707, "onto": 707, "fulfil": 707, "ultim": 707, "428571429": 707, "constraint": 707, "str_df": 707, "fairli": 707, "streamlin": 707, "walk": 707, "conditional_add": 707, "heart": 707, "readi": 707, "successfulli": 707, "pessimist": 707, "explor": 707, "gpu_add": 707, "matter": 707, "1968": 707, "1961": 707, "propog": 707, "slide": 707, "answer": 707, "stock": 707, "mathemat": 707, "example_func": 707, "65": 707, "56": 707, "549834435": 707, "615773106": 707, "681145748": 707, "745966692": 707, "810249676": 707, "874007874": 707, "937253933": 707, "apply_group": 707, "drawn": 707, "691674": 707, "dan": 707, "958380": 707, "480099": 707, "729580": 707, "473370": 707, "xavier": 707, "767454": 707, "067479": 707, "380205": 707, "970850": 707, "sarah": 707, "342905": 707, "rolling_avg_": 707, "rolling_avg": 707, "win_siz": 707, "801430": 707, "632337": 707, "081887": 707, "933157": 707, "quinn": 707, "420826": 707, "184805": 707, "702013": 707, "837494": 707, "wendi": 707, "057540": 707, "401733": 707, "913899": 707, "ursula": 707, "466252": 707, "009502": 707, "725581": 707, "405245": 707, "271319": 707, "multiply_by_5": 707, "empty_lik": 707, "nondecim": 707, "outlin": 707, "github": [707, 709], "properli": 707, "lot": 707, "hopefulli": 707, "feel": 707, "applymap": 708, "histogram": 708, "tip": 708, "magnum": 708, "gpudirect": 708, "integr": 708, "nvcomp": 708, "interweav": 708, "writer\u00b9": 709, "reader\u00b9": 709, "uint16": 709, "decimal32": 709, "decimal64": 709, "\u00b9": 709, "gd": 709, "dma": 709, "bounc": 709, "sdk": 709, "download": 709, "toolkit": 709, "libcudf_cufile_polici": 709, "kvikio": 709, "rapidsai": 709, "read_avro": 709, "libcudf_cufile_thread_count": 709, "libcudf_cufile_slice_s": 709, "4mb": 709, "libcudf_nvcomp_polici": 709, "deem": 709, "whenev": 709, "deflat": 709, "mind": 710, "20120101": 710, "cumprod": 710, "prod": 710, "wish": 710, "dff": 710, "randn": 710, "141394": 710, "821369": 710, "501446": 710, "363874": 710, "146128": 710, "814510": 710, "032664": 710, "376271": 710, "363848": 710, "619501": 710, "705836": 710, "269742": 710, "135911": 710, "445841": 710, "570040": 710, "788659": 710, "381065": 710, "307916": 710, "653888": 710, "250679": 710, "508649": 710, "179932": 710, "014701": 710, "294314": 710, "068149": 710, "182862": 710, "1182": 710, "silenc": 710, "dot": 710, "464856696": 710, "18217614": 710, "460706825": 710, "501202675": 710, "553514617": 710, "558026618": 710, "df00": 710, "464857": 710, "182176": 710, "460707": 710, "501203": 710, "553515": 710, "558027": 710, "behaviour": 712, "resid": 712, "extrem": 712, "poor": 712, "vast": 712, "accomplish": 712, "742": 712, "694": 712, "840": 712, "459": 712, "525": 712, "442": 712, "363": 712, "666": 712, "643": 712, "906": 712, "640": 712, "impact": 712, "compatibilti": 712, "impos": 712}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [184, 0, 1, "", "DatetimeIndex"], [203, 0, 1, "", "Float64Index"], [204, 0, 1, "", "Grouper"], [205, 0, 1, "", "Index"], [255, 0, 1, "", "Int64Index"], [256, 0, 1, "", "IntervalIndex"], [260, 0, 1, "", "MultiIndex"], [273, 0, 1, "", "RangeIndex"], [274, 0, 1, "", "Series"], [448, 0, 1, "", "TimedeltaIndex"], [457, 0, 1, "", "UInt64Index"], [458, 3, 1, "", "concat"], [653, 3, 1, "", "cut"], [654, 3, 1, "", "describe_option"], [655, 3, 1, "", "from_dlpack"], [656, 3, 1, "", "get_dummies"], [657, 3, 1, "", "get_option"], [662, 3, 1, "", "melt"], [663, 3, 1, "", "pivot"], [664, 3, 1, "", "read_avro"], [665, 3, 1, "", "read_csv"], [666, 3, 1, "", "read_feather"], [667, 3, 1, "", "read_hdf"], [668, 3, 1, "", "read_json"], [669, 3, 1, "", "read_orc"], [670, 3, 1, "", "read_parquet"], [671, 3, 1, "", "read_text"], [672, 3, 1, "", "set_option"], [677, 3, 1, "", "to_datetime"], [678, 3, 1, "", "to_numeric"], [679, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pop"], [114, 2, 1, "", "pow"], [115, 2, 1, "", "prod"], [116, 2, 1, "", "product"], [117, 2, 1, "", "quantile"], [118, 2, 1, "", "quantiles"], [119, 2, 1, "", "query"], [120, 2, 1, "", "radd"], [121, 2, 1, "", "rank"], [122, 2, 1, "", "rdiv"], [123, 2, 1, "", "reindex"], [124, 2, 1, "", "rename"], [125, 2, 1, "", "repeat"], [126, 2, 1, "", "replace"], [127, 2, 1, "", "resample"], [128, 2, 1, "", "reset_index"], [129, 2, 1, "", "rfloordiv"], [130, 2, 1, "", "rmod"], [131, 2, 1, "", "rmul"], [132, 2, 1, "", "rolling"], [133, 2, 1, "", "round"], [134, 2, 1, "", "rpow"], [135, 2, 1, "", "rsub"], [136, 2, 1, "", "rtruediv"], [137, 2, 1, "", "sample"], [138, 2, 1, "", "scale"], [139, 2, 1, "", "scatter_by_map"], [140, 2, 1, "", "searchsorted"], [141, 2, 1, "", "select_dtypes"], [142, 2, 1, "", "serialize"], [143, 2, 1, "", "set_index"], [144, 1, 1, "", "shape"], [145, 2, 1, "", "shift"], [146, 1, 1, "", "size"], [147, 2, 1, "", "skew"], [148, 2, 1, "", "sort_index"], [149, 2, 1, "", "sort_values"], [150, 2, 1, "", "stack"], [151, 2, 1, "", "std"], [152, 2, 1, "", "sub"], [153, 2, 1, "", "subtract"], [154, 2, 1, "", "sum"], [155, 2, 1, "", "sum_of_squares"], [156, 2, 1, "", "swaplevel"], [157, 2, 1, "", "tail"], [158, 2, 1, "", "take"], [159, 2, 1, "", "tile"], [160, 2, 1, "", "to_arrow"], [161, 2, 1, "", "to_csv"], [162, 2, 1, "", "to_cupy"], [163, 2, 1, "", "to_dict"], [164, 2, 1, "", "to_dlpack"], [165, 2, 1, "", "to_feather"], [166, 2, 1, "", "to_hdf"], [167, 2, 1, "", "to_json"], [168, 2, 1, "", "to_numpy"], [169, 2, 1, "", "to_orc"], [170, 2, 1, "", "to_pandas"], [171, 2, 1, "", "to_parquet"], [172, 2, 1, "", "to_records"], [173, 2, 1, "", "to_string"], [174, 2, 1, "", "to_struct"], [175, 2, 1, "", "transpose"], [176, 2, 1, "", "truediv"], [177, 2, 1, "", "unstack"], [178, 2, 1, "", "update"], [179, 2, 1, "", "value_counts"], [180, 1, 1, "", "values"], [181, 1, 1, "", "values_host"], [182, 2, 1, "", "var"], [183, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[185, 2, 1, "", "ceil"], [186, 1, 1, "", "day"], [187, 1, 1, "", "day_of_year"], [188, 1, 1, "", "dayofweek"], [189, 1, 1, "", "dayofyear"], [190, 2, 1, "", "floor"], [191, 1, 1, "", "hour"], [192, 1, 1, "", "is_leap_year"], [193, 2, 1, "", "isocalendar"], [194, 1, 1, "", "minute"], [195, 1, 1, "", "month"], [196, 1, 1, "", "quarter"], [197, 2, 1, "", "round"], [198, 1, 1, "", "second"], [199, 2, 1, "", "to_frame"], [200, 2, 1, "", "to_series"], [201, 1, 1, "", "weekday"], [202, 1, 1, "", "year"]], "cudf.Grouper": [[204, 2, 1, "", "__init__"]], "cudf.Index": [[206, 2, 1, "", "any"], [207, 2, 1, "", "append"], [208, 2, 1, "", "copy"], [209, 2, 1, "", "deserialize"], [210, 2, 1, "", "device_deserialize"], [211, 2, 1, "", "device_serialize"], [212, 2, 1, "", "difference"], [213, 2, 1, "", "drop_duplicates"], [214, 2, 1, "", "dropna"], [215, 2, 1, "", "fillna"], [216, 2, 1, "", "from_arrow"], [217, 2, 1, "", "from_pandas"], [218, 2, 1, "", "get_level_values"], [219, 2, 1, "", "get_loc"], [220, 2, 1, "", "get_slice_bound"], [221, 1, 1, "", "has_duplicates"], [222, 2, 1, "", "host_deserialize"], [223, 2, 1, "", "host_serialize"], [224, 2, 1, "", "intersection"], [225, 2, 1, "", "is_boolean"], [226, 2, 1, "", "is_categorical"], [227, 2, 1, "", "is_floating"], [228, 2, 1, "", "is_integer"], [229, 2, 1, "", "is_interval"], [230, 1, 1, "", "is_monotonic"], [231, 1, 1, "", "is_monotonic_decreasing"], [232, 1, 1, "", "is_monotonic_increasing"], [233, 2, 1, "", "is_numeric"], [234, 2, 1, "", "is_object"], [235, 2, 1, "", "isin"], [236, 2, 1, "", "isna"], [237, 2, 1, "", "join"], [238, 1, 1, "", "names"], [239, 1, 1, "", "nlevels"], [240, 2, 1, "", "notna"], [241, 2, 1, "", "rename"], [242, 2, 1, "", "repeat"], [243, 2, 1, "", "serialize"], [244, 2, 1, "", "set_names"], [245, 1, 1, "", "size"], [246, 2, 1, "", "sort_values"], [247, 2, 1, "", "take"], [248, 2, 1, "", "to_dlpack"], [249, 2, 1, "", "to_frame"], [250, 2, 1, "", "to_pandas"], [251, 2, 1, "", "to_series"], [252, 2, 1, "", "union"], [253, 2, 1, "", "unique"], [254, 1, 1, "", "values"]], "cudf.IntervalIndex": [[256, 2, 1, "", "__init__"], [257, 2, 1, "", "from_breaks"], [258, 2, 1, "", "get_loc"], [259, 1, 1, "", "values"]], "cudf.MultiIndex": [[261, 1, 1, "", "codes"], [262, 2, 1, "", "droplevel"], [263, 2, 1, "", "from_arrow"], [264, 2, 1, "", "from_frame"], [265, 2, 1, "", "from_product"], [266, 2, 1, "", "from_tuples"], [267, 2, 1, "", "get_level_values"], [268, 2, 1, "", "get_loc"], [269, 1, 1, "", "levels"], [270, 1, 1, "", "names"], [271, 1, 1, "", "nlevels"], [272, 2, 1, "", "to_frame"]], "cudf.Series": [[275, 1, 1, "", "T"], [276, 2, 1, "", "__array__"], [277, 2, 1, "", "__iter__"], [278, 2, 1, "", "abs"], [279, 2, 1, "", "add"], [280, 2, 1, "", "add_prefix"], [281, 2, 1, "", "add_suffix"], [282, 2, 1, "", "all"], [283, 2, 1, "", "any"], [284, 2, 1, "", "append"], [285, 2, 1, "", "apply"], [286, 2, 1, "", "argsort"], [287, 2, 1, "", "astype"], [288, 2, 1, "", "autocorr"], [289, 1, 1, "", "axes"], [290, 2, 1, "", "backfill"], [291, 2, 1, "", "between"], [292, 2, 1, "", "bfill"], [293, 1, 1, "", "cat"], [294, 2, 1, "", "clip"], [295, 2, 1, "", "copy"], [296, 2, 1, "", "corr"], [297, 2, 1, "", "count"], [298, 2, 1, "", "cov"], [299, 2, 1, "", "cummax"], [300, 2, 1, "", "cummin"], [301, 2, 1, "", "cumprod"], [302, 2, 1, "", "cumsum"], [303, 1, 1, "", "data"], [304, 2, 1, "", "describe"], [305, 2, 1, "", "deserialize"], [306, 2, 1, "", "device_deserialize"], [307, 2, 1, "", "device_serialize"], [308, 2, 1, "", "diff"], [309, 2, 1, "", "digitize"], [310, 2, 1, "", "div"], [311, 2, 1, "", "divide"], [312, 2, 1, "", "dot"], [313, 2, 1, "", "drop"], [314, 2, 1, "", "drop_duplicates"], [315, 2, 1, "", "dropna"], [316, 1, 1, "", "dt"], [317, 1, 1, "", "dtype"], [318, 1, 1, "", "empty"], [319, 2, 1, "", "eq"], [320, 2, 1, "", "equals"], [321, 2, 1, "", "explode"], [322, 2, 1, "", "factorize"], [323, 2, 1, "", "ffill"], [324, 2, 1, "", "fillna"], [325, 2, 1, "", "first"], [326, 2, 1, "", "floordiv"], [327, 2, 1, "", "from_arrow"], [328, 2, 1, "", "from_categorical"], [329, 2, 1, "", "from_masked_array"], [330, 2, 1, "", "from_pandas"], [331, 2, 1, "", "ge"], [332, 2, 1, "", "groupby"], [333, 2, 1, "", "gt"], [334, 1, 1, "", "has_nulls"], [335, 2, 1, "", "hash_values"], [336, 2, 1, "", "head"], [337, 2, 1, "", "host_deserialize"], [338, 2, 1, "", "host_serialize"], [339, 1, 1, "", "iloc"], [340, 1, 1, "", "index"], [341, 2, 1, "", "interpolate"], [342, 1, 1, "", "is_monotonic"], [343, 1, 1, "", "is_monotonic_decreasing"], [344, 1, 1, "", "is_monotonic_increasing"], [345, 1, 1, "", "is_unique"], [346, 2, 1, "", "isin"], [347, 2, 1, "", "isna"], [348, 2, 1, "", "isnull"], [349, 2, 1, "", "items"], [350, 2, 1, "", "iteritems"], [351, 2, 1, "", "keys"], [352, 2, 1, "", "kurt"], [353, 2, 1, "", "kurtosis"], [354, 2, 1, "", "last"], [355, 2, 1, "", "le"], [356, 1, 1, "", "list"], [357, 1, 1, "", "loc"], [358, 2, 1, "", "lt"], [359, 2, 1, "", "map"], [360, 2, 1, "", "mask"], [361, 2, 1, "", "max"], [362, 2, 1, "", "mean"], [363, 2, 1, "", "median"], [364, 2, 1, "", "memory_usage"], [365, 2, 1, "", "min"], [366, 2, 1, "", "mod"], [367, 2, 1, "", "mode"], [368, 2, 1, "", "mul"], [369, 2, 1, "", "multiply"], [370, 1, 1, "", "name"], [371, 2, 1, "", "nans_to_nulls"], [372, 1, 1, "", "ndim"], [373, 2, 1, "", "ne"], [374, 2, 1, "", "nlargest"], [375, 2, 1, "", "notna"], [376, 2, 1, "", "notnull"], [377, 2, 1, "", "nsmallest"], [378, 1, 1, "", "null_count"], [379, 1, 1, "", "nullable"], [380, 1, 1, "", "nullmask"], [381, 2, 1, "", "nunique"], [382, 2, 1, "", "pad"], [383, 2, 1, "", "pct_change"], [384, 2, 1, "", "pipe"], [385, 2, 1, "", "pow"], [386, 2, 1, "", "prod"], [387, 2, 1, "", "product"], [388, 2, 1, "", "quantile"], [389, 2, 1, "", "radd"], [390, 2, 1, "", "rank"], [391, 2, 1, "", "rdiv"], [392, 2, 1, "", "reindex"], [393, 2, 1, "", "rename"], [394, 2, 1, "", "repeat"], [395, 2, 1, "", "replace"], [396, 2, 1, "", "resample"], [397, 2, 1, "", "reset_index"], [398, 2, 1, "", "rfloordiv"], [399, 2, 1, "", "rmod"], [400, 2, 1, "", "rmul"], [401, 2, 1, "", "rolling"], [402, 2, 1, "", "round"], [403, 2, 1, "", "rpow"], [404, 2, 1, "", "rsub"], [405, 2, 1, "", "rtruediv"], [406, 2, 1, "", "sample"], [407, 2, 1, "", "scale"], [408, 2, 1, "", "searchsorted"], [409, 2, 1, "", "serialize"], [410, 1, 1, "", "shape"], [411, 2, 1, "", "shift"], [412, 1, 1, "", "size"], [413, 2, 1, "", "skew"], [414, 2, 1, "", "sort_index"], [415, 2, 1, "", "sort_values"], [416, 2, 1, "", "std"], [417, 1, 1, "", "str"], [418, 1, 1, "", "struct"], [419, 2, 1, "", "sub"], [420, 2, 1, "", "subtract"], [421, 2, 1, "", "sum"], [422, 2, 1, "", "sum_of_squares"], [423, 2, 1, "", "tail"], [424, 2, 1, "", "take"], [425, 2, 1, "", "tile"], [426, 2, 1, "", "to_arrow"], [427, 2, 1, "", "to_cupy"], [428, 2, 1, "", "to_dict"], [429, 2, 1, "", "to_dlpack"], [430, 2, 1, "", "to_frame"], [431, 2, 1, "", "to_hdf"], [432, 2, 1, "", "to_json"], [433, 2, 1, "", "to_list"], [434, 2, 1, "", "to_numpy"], [435, 2, 1, "", "to_pandas"], [436, 2, 1, "", "to_string"], [437, 2, 1, "", "tolist"], [438, 2, 1, "", "transpose"], [439, 2, 1, "", "truediv"], [440, 2, 1, "", "unique"], [441, 2, 1, "", "update"], [442, 1, 1, "", "valid_count"], [443, 2, 1, "", "value_counts"], [444, 1, 1, "", "values"], [445, 1, 1, "", "values_host"], [446, 2, 1, "", "var"], [447, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[449, 1, 1, "", "components"], [450, 1, 1, "", "days"], [451, 1, 1, "", "inferred_freq"], [452, 1, 1, "", "microseconds"], [453, 1, 1, "", "nanoseconds"], [454, 1, 1, "", "seconds"], [455, 2, 1, "", "to_frame"], [456, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[459, 2, 1, "", "add_categories"], [460, 2, 1, "", "as_ordered"], [461, 2, 1, "", "as_unordered"], [462, 1, 1, "", "categories"], [463, 1, 1, "", "codes"], [464, 1, 1, "", "ordered"], [465, 2, 1, "", "remove_categories"], [466, 2, 1, "", "reorder_categories"], [467, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[468, 2, 1, "", "astype"], [469, 2, 1, "", "concat"], [470, 2, 1, "", "contains"], [471, 2, 1, "", "get"], [472, 2, 1, "", "index"], [473, 1, 1, "", "leaves"], [474, 2, 1, "", "len"], [475, 2, 1, "", "sort_values"], [476, 2, 1, "", "take"], [477, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[478, 2, 1, "", "byte_count"], [479, 2, 1, "", "capitalize"], [480, 2, 1, "", "cat"], [481, 2, 1, "", "center"], [482, 2, 1, "", "character_ngrams"], [483, 2, 1, "", "character_tokenize"], [484, 2, 1, "", "code_points"], [485, 2, 1, "", "contains"], [486, 2, 1, "", "count"], [487, 2, 1, "", "detokenize"], [488, 2, 1, "", "edit_distance"], [489, 2, 1, "", "edit_distance_matrix"], [490, 2, 1, "", "endswith"], [491, 2, 1, "", "extract"], [492, 2, 1, "", "filter_alphanum"], [493, 2, 1, "", "filter_characters"], [494, 2, 1, "", "filter_tokens"], [495, 2, 1, "", "find"], [496, 2, 1, "", "findall"], [497, 2, 1, "", "get"], [498, 2, 1, "", "get_json_object"], [499, 2, 1, "", "hex_to_int"], [500, 2, 1, "", "htoi"], [501, 2, 1, "", "index"], [502, 2, 1, "", "insert"], [503, 2, 1, "", "ip2int"], [504, 2, 1, "", "ip_to_int"], [505, 2, 1, "", "is_consonant"], [506, 2, 1, "", "is_vowel"], [507, 2, 1, "", "isalnum"], [508, 2, 1, "", "isalpha"], [509, 2, 1, "", "isdecimal"], [510, 2, 1, "", "isdigit"], [511, 2, 1, "", "isempty"], [512, 2, 1, "", "isfloat"], [513, 2, 1, "", "ishex"], [514, 2, 1, "", "isinteger"], [515, 2, 1, "", "isipv4"], [516, 2, 1, "", "islower"], [517, 2, 1, "", "isnumeric"], [518, 2, 1, "", "isspace"], [519, 2, 1, "", "istimestamp"], [520, 2, 1, "", "istitle"], [521, 2, 1, "", "isupper"], [522, 2, 1, "", "join"], [523, 2, 1, "", "len"], [524, 2, 1, "", "like"], [525, 2, 1, "", "ljust"], [526, 2, 1, "", "lower"], [527, 2, 1, "", "lstrip"], [528, 2, 1, "", "match"], [529, 2, 1, "", "ngrams"], [530, 2, 1, "", "ngrams_tokenize"], [531, 2, 1, "", "normalize_characters"], [532, 2, 1, "", "normalize_spaces"], [533, 2, 1, "", "pad"], [534, 2, 1, "", "partition"], [535, 2, 1, "", "porter_stemmer_measure"], [536, 2, 1, "", "repeat"], [537, 2, 1, "", "replace"], [538, 2, 1, "", "replace_tokens"], [539, 2, 1, "", "replace_with_backrefs"], [540, 2, 1, "", "rfind"], [541, 2, 1, "", "rindex"], [542, 2, 1, "", "rjust"], [543, 2, 1, "", "rpartition"], [544, 2, 1, "", "rsplit"], [545, 2, 1, "", "rstrip"], [546, 2, 1, "", "slice"], [547, 2, 1, "", "slice_from"], [548, 2, 1, "", "slice_replace"], [549, 2, 1, "", "split"], [550, 2, 1, "", "startswith"], [551, 2, 1, "", "strip"], [552, 2, 1, "", "swapcase"], [553, 2, 1, "", "title"], [554, 2, 1, "", "token_count"], [555, 2, 1, "", "tokenize"], [556, 2, 1, "", "translate"], [557, 2, 1, "", "upper"], [558, 2, 1, "", "url_decode"], [559, 2, 1, "", "url_encode"], [560, 2, 1, "", "wrap"], [561, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[562, 2, 1, "", "explode"], [563, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[564, 2, 1, "", "__iter__"], [565, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[566, 2, 1, "", "aggregate"], [567, 2, 1, "", "backfill"], [568, 2, 1, "", "bfill"], [569, 2, 1, "", "count"], [570, 2, 1, "", "cumcount"], [571, 2, 1, "", "cummax"], [572, 2, 1, "", "cummin"], [573, 2, 1, "", "cumsum"], [574, 2, 1, "", "describe"], [575, 2, 1, "", "diff"], [576, 2, 1, "", "ffill"], [577, 2, 1, "", "fillna"], [578, 2, 1, "", "idxmax"], [579, 2, 1, "", "idxmin"], [580, 2, 1, "", "nunique"], [581, 2, 1, "", "pad"], [582, 2, 1, "", "quantile"], [583, 2, 1, "", "shift"], [584, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[585, 2, 1, "", "agg"], [586, 2, 1, "", "apply"], [587, 2, 1, "", "backfill"], [588, 2, 1, "", "bfill"], [589, 2, 1, "", "corr"], [590, 2, 1, "", "count"], [591, 2, 1, "", "cov"], [592, 2, 1, "", "cumcount"], [593, 2, 1, "", "cummax"], [594, 2, 1, "", "cummin"], [595, 2, 1, "", "cumsum"], [596, 2, 1, "", "ffill"], [597, 2, 1, "", "max"], [598, 2, 1, "", "mean"], [599, 2, 1, "", "median"], [600, 2, 1, "", "min"], [601, 2, 1, "", "ngroup"], [602, 2, 1, "", "nth"], [603, 2, 1, "", "pad"], [604, 2, 1, "", "pipe"], [605, 2, 1, "", "prod"], [606, 2, 1, "", "size"], [607, 2, 1, "", "std"], [608, 2, 1, "", "sum"], [609, 2, 1, "", "transform"], [610, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[611, 2, 1, "", "aggregate"], [612, 2, 1, "", "nunique"], [613, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[614, 2, 1, "", "ceil"], [615, 1, 1, "", "day"], [616, 1, 1, "", "day_of_year"], [617, 1, 1, "", "dayofweek"], [618, 1, 1, "", "dayofyear"], [619, 1, 1, "", "days_in_month"], [620, 2, 1, "", "floor"], [621, 1, 1, "", "hour"], [622, 1, 1, "", "is_leap_year"], [623, 1, 1, "", "is_month_end"], [624, 1, 1, "", "is_month_start"], [625, 1, 1, "", "is_quarter_end"], [626, 1, 1, "", "is_quarter_start"], [627, 1, 1, "", "is_year_end"], [628, 1, 1, "", "is_year_start"], [629, 2, 1, "", "isocalendar"], [630, 1, 1, "", "minute"], [631, 1, 1, "", "month"], [632, 1, 1, "", "quarter"], [633, 2, 1, "", "round"], [634, 1, 1, "", "second"], [635, 2, 1, "", "strftime"], [636, 1, 1, "", "weekday"], [637, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[638, 1, 1, "", "components"], [639, 1, 1, "", "days"], [640, 1, 1, "", "microseconds"], [641, 1, 1, "", "nanoseconds"], [642, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[643, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[644, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[645, 2, 1, "", "apply"], [646, 2, 1, "", "count"], [647, 2, 1, "", "max"], [648, 2, 1, "", "mean"], [649, 2, 1, "", "min"], [650, 2, 1, "", "std"], [651, 2, 1, "", "sum"], [652, 2, 1, "", "var"]], "cudf.io.parquet": [[658, 0, 1, "", "ParquetDatasetWriter"], [661, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[659, 2, 1, "", "close"], [660, 2, 1, "", "write_table"]], "cudf.testing.testing": [[673, 3, 1, "", "assert_column_equal"], [674, 3, 1, "", "assert_frame_equal"], [675, 3, 1, "", "assert_index_equal"], [676, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 688, 694, 696, 700, 701, 703, 704, 707, 710, 712], "categoricalindex": [0, 1, 2, 3, 685], "categori": [1, 462], "code": [2, 261, 463, 695], "equal": [3, 50, 320], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 680, 703, 707], "t": [5, 275], "__iter__": [6, 277, 564], "ab": [7, 278], "add": [8, 279], "add_prefix": [9, 280], "add_suffix": [10, 281], "agg": [11, 585], "all": [12, 282, 698], "ani": [13, 206, 283], "append": [14, 207, 284], "appli": [15, 285, 586, 645, 706, 707, 712], "apply_chunk": [16, 707], "apply_row": [17, 707], "applymap": [18, 701], "argsort": [19, 286], "assign": 20, "astyp": [21, 287, 468], "ax": [23, 289], "backfil": [24, 290, 567, 587], "bfill": [25, 292, 568, 588], "clip": [26, 294], "column": [27, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 698, 712], "copi": [28, 208, 295], "corr": [29, 296, 589], "count": [30, 297, 486, 569, 590, 646], "cov": [31, 298, 591], "cummax": [32, 299, 571, 593], "cummin": [33, 300, 572, 594], "cumprod": [34, 301], "cumsum": [35, 302, 573, 595], "describ": [36, 304, 574], "deseri": [37, 209, 305], "device_deseri": [38, 210, 306], "device_seri": [39, 211, 307], "diff": [40, 308, 575], "div": [41, 310], "divid": [42, 311], "dot": [43, 312], "drop": [44, 313, 710], "drop_dupl": [45, 213, 314], "dropna": [46, 214, 315, 710], "dtype": [47, 317, 709, 710], "empti": [48, 318], "eq": [49, 319], "eval": 51, "explod": [52, 321, 562], "ffill": [53, 323, 576, 596], "fillna": [54, 215, 324, 577, 710], "first": [55, 325], "floordiv": [56, 326], "from_arrow": [57, 216, 263, 327], "from_panda": [58, 217, 330], "from_record": 59, "ge": [60, 331], "groupbi": [61, 332, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 680, 683, 689, 706, 707, 710], "gt": [62, 333], "hash_valu": [63, 335], "head": [64, 336], "host_deseri": [65, 222, 337], "host_seri": [66, 223, 338], "iat": 67, "iloc": [68, 339], "index": [69, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 340, 472, 501, 680, 683, 685, 689, 698, 701, 706], "info": 70, "insert": [71, 502, 710], "interleave_column": 72, "interpol": [73, 341], "isin": [74, 235, 346], "isna": [75, 236, 347], "isnul": [76, 348], "item": [77, 349], "iterrow": 78, "itertupl": 79, "join": [80, 237, 522, 680, 685, 689, 701], "kei": [81, 351], "kurt": [82, 352], "kurtosi": [83, 353], "last": [84, 354], "le": [85, 355], "loc": [86, 357], "lt": [87, 358], "mask": [88, 360], "max": [89, 361, 597, 647], "mean": [90, 362, 598, 648], "median": [91, 363, 599], "melt": [92, 662], "memory_usag": [93, 364], "merg": [94, 680, 689], "min": [95, 365, 600, 649], "mod": [96, 366], "mode": [97, 367], "mul": [98, 368], "multipli": [99, 369], "nans_to_nul": [100, 371], "ndim": [101, 372], "ne": [102, 373], "nlargest": [103, 374], "notna": [104, 240, 375], "notnul": [105, 376], "nsmallest": [106, 377], "nuniqu": [107, 381, 580, 612], "pad": [108, 382, 533, 581, 603], "partition_by_hash": 109, "pct_chang": [110, 383], "pipe": [111, 384, 604], "pivot": [112, 663], "pop": 113, "pow": [114, 385], "prod": [115, 386, 605], "product": [116, 387, 710], "quantil": [117, 118, 388, 582], "panda": [117, 123, 183, 268, 392, 447, 577, 586, 694, 695, 696, 701, 702, 712], "compat": [117, 123, 183, 268, 392, 447, 577, 586, 685, 695, 702], "note": [117, 123, 183, 268, 392, 447, 577, 586, 702, 705], "queri": 119, "radd": [120, 389], "rank": [121, 390], "rdiv": [122, 391], "reindex": [123, 392, 680, 689], "renam": [124, 241, 393], "repeat": [125, 242, 394, 536], "replac": [126, 395, 537, 710], "resampl": [127, 396], "reset_index": [128, 397], "rfloordiv": [129, 398], "rmod": [130, 399], "rmul": [131, 400], "roll": [132, 401, 645, 646, 647, 648, 649, 650, 651, 652, 693, 706, 707], "round": [133, 197, 402, 633], "rpow": [134, 403], "rsub": [135, 404], "rtruediv": [136, 405], "sampl": [137, 406], "scale": [138, 407], "scatter_by_map": 139, "searchsort": [140, 408], "select_dtyp": 141, "serial": [142, 243, 409, 680, 689], "set_index": 143, "shape": [144, 410], "shift": [145, 411, 583], "size": [146, 245, 412, 584, 606], "skew": [147, 413], "sort_index": [148, 414], "sort_valu": [149, 246, 415, 475], "stack": 150, "std": [151, 416, 607, 650], "sub": [152, 419], "subtract": [153, 420], "sum": [154, 421, 608, 651, 710], "sum_of_squar": [155, 422], "swaplevel": 156, "tail": [157, 423], "take": [158, 247, 424, 476], "tile": [159, 425], "to_arrow": [160, 426], "to_csv": 161, "to_cupi": [162, 427], "to_dict": [163, 428], "to_dlpack": [164, 248, 429], "to_feath": 165, "to_hdf": [166, 431], "to_json": [167, 432], "to_numpi": [168, 434], "to_orc": 169, "to_panda": [170, 250, 435], "to_parquet": 171, "to_record": 172, "to_str": [173, 436], "to_struct": 174, "transpos": [175, 438, 680, 701], "truediv": [176, 439], "unstack": [177, 679], "updat": [178, 441], "value_count": [179, 443], "valu": [180, 254, 259, 444, 685, 710, 712], "values_host": [181, 445], "var": [182, 446, 610, 652], "where": [183, 447], "datetimeindex": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 685], "ceil": [185, 614], "dai": [186, 450, 615, 639], "day_of_year": [187, 616], "dayofweek": [188, 617], "dayofyear": [189, 618], "floor": [190, 620], "hour": [191, 621], "is_leap_year": [192, 622], "isocalendar": [193, 629], "minut": [194, 630, 701], "month": [195, 631], "quarter": [196, 632], "second": [198, 454, 634, 642], "to_fram": [199, 249, 272, 430, 455], "to_seri": [200, 251, 456], "weekdai": [201, 636], "year": [202, 637], "float64index": 203, "grouper": [204, 706], "differ": [212, 709], "get_level_valu": [218, 267], "get_loc": [219, 258, 268], "get_slice_bound": 220, "has_dupl": 221, "intersect": 224, "is_boolean": 225, "is_categor": 226, "is_float": 227, "is_integ": 228, "is_interv": 229, "is_monoton": [230, 342], "is_monotonic_decreas": [231, 343], "is_monotonic_increas": [232, 344], "is_numer": 233, "is_object": 234, "name": [238, 270, 370, 695, 712], "nlevel": [239, 271], "set_nam": 244, "union": [252, 694], "uniqu": [253, 440, 477, 613], "int64index": 255, "intervalindex": [256, 257, 258, 259, 685], "from_break": 257, "multiindex": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 685, 701], "droplevel": 262, "from_fram": 264, "from_product": 265, "from_tupl": 266, "level": [269, 681, 706, 707], "rangeindex": 273, "seri": [274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 680, 689, 701, 703, 707], "__array__": 276, "autocorr": 288, "between": [291, 703], "cat": [293, 480], "data": [303, 680, 681, 689, 698, 701, 705, 707, 710, 712], "digit": 309, "dt": 316, "factor": 322, "from_categor": 328, "from_masked_arrai": 329, "has_nul": 334, "is_uniqu": 345, "iteritem": 350, "list": [356, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 687, 689, 705], "map": 359, "null_count": 378, "nullabl": [379, 707], "nullmask": 380, "str": 417, "struct": [418, 562, 563, 689, 691, 705], "to_list": 433, "tolist": 437, "valid_count": 442, "timedeltaindex": [448, 449, 450, 451, 452, 453, 454, 455, 456, 685], "compon": [449, 638, 685], "inferred_freq": 451, "microsecond": [452, 640], "nanosecond": [453, 641], "uint64index": 457, "concat": [458, 469, 701], "core": [459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652], "categor": [459, 460, 461, 462, 463, 464, 465, 466, 467, 685, 689, 701], "categoricalaccessor": [459, 460, 461, 462, 463, 464, 465, 466, 467], "add_categori": 459, "as_ord": 460, "as_unord": 461, "order": [464, 712], "remove_categori": 465, "reorder_categori": 466, "set_categori": 467, "listmethod": [468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "contain": [470, 485], "get": [471, 497, 701], "leav": 473, "len": [474, 523], "string": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 689, 690, 701, 707, 710], "stringmethod": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], "byte_count": 478, "capit": 479, "center": 481, "character_ngram": 482, "character_token": 483, "code_point": 484, "detoken": 487, "edit_dist": 488, "edit_distance_matrix": 489, "endswith": 490, "extract": 491, "filter_alphanum": 492, "filter_charact": 493, "filter_token": 494, "find": 495, "findal": 496, "get_json_object": 498, "hex_to_int": 499, "htoi": 500, "ip2int": 503, "ip_to_int": 504, "is_conson": 505, "is_vowel": 506, "isalnum": 507, "isalpha": 508, "isdecim": 509, "isdigit": 510, "isempti": 511, "isfloat": 512, "ishex": 513, "isinteg": 514, "isipv4": 515, "islow": 516, "isnumer": 517, "isspac": 518, "istimestamp": 519, "istitl": 520, "isupp": 521, "like": 524, "ljust": 525, "lower": [526, 707], "lstrip": 527, "match": 528, "ngram": 529, "ngrams_token": 530, "normalize_charact": 531, "normalize_spac": 532, "partit": 534, "porter_stemmer_measur": 535, "replace_token": 538, "replace_with_backref": 539, "rfind": 540, "rindex": 541, "rjust": 542, "rpartit": 543, "rsplit": 544, "rstrip": 545, "slice": 546, "slice_from": 547, "slice_replac": 548, "split": 549, "startswith": 550, "strip": 551, "swapcas": 552, "titl": 553, "token_count": 554, "token": 555, "translat": 556, "upper": 557, "url_decod": 558, "url_encod": 559, "wrap": 560, "zfill": 561, "structmethod": [562, 563], "field": 563, "group": [565, 701, 706], "dataframegroupbi": [566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584], "aggreg": [566, 611, 706], "cumcount": [570, 592], "idxmax": 578, "idxmin": 579, "ngroup": 601, "nth": 602, "transform": [609, 706], "seriesgroupbi": [611, 612, 613], "datetimeproperti": [614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637], "days_in_month": 619, "is_month_end": 623, "is_month_start": 624, "is_quarter_end": 625, "is_quarter_start": 626, "is_year_end": 627, "is_year_start": 628, "strftime": 635, "timedeltaproperti": [638, 639, 640, 641, 642], "subword_token": [643, 644], "subwordtoken": [643, 644, 692], "__call__": 644, "window": [645, 646, 647, 648, 649, 650, 651, 652, 680, 689, 693, 706, 707], "cut": 653, "describe_opt": 654, "from_dlpack": 655, "get_dummi": 656, "get_opt": 657, "io": [658, 659, 660, 661, 680, 689, 709], "parquet": [658, 659, 660, 661, 686, 701], "parquetdatasetwrit": [658, 659, 660], "close": 659, "write_t": 660, "read_parquet_metadata": 661, "read_avro": 664, "read_csv": 665, "read_feath": 666, "read_hdf": 667, "read_json": 668, "Not": 668, "gpu": [668, 704], "acceler": 668, "experiment": 668, "featur": 668, "read_orc": 669, "read_parquet": 670, "read_text": 671, "set_opt": 672, "test": [673, 674, 675, 676, 682, 694], "assert_column_equ": 673, "assert_frame_equ": 674, "assert_index_equ": 675, "assert_series_equ": 676, "to_datetim": 677, "to_numer": 678, "constructor": [680, 685, 689, 692], "attribut": [680, 689], "underli": 680, "convers": [680, 681, 685, 689], "iter": [680, 683, 689, 712], "binari": [680, 689], "oper": [680, 685, 689, 701, 706, 712], "function": [680, 681, 682, 683, 689, 693, 707, 712], "applic": [680, 683, 689], "comput": [680, 683, 685, 689, 712], "descript": [680, 683, 689], "stat": [680, 683, 689, 701], "select": [680, 685, 689, 701], "label": [680, 689, 701, 710], "manipul": [680, 681, 689], "miss": [680, 685, 689, 701, 710, 712], "handl": [680, 687, 689, 690, 691, 695, 707], "reshap": [680, 689], "sort": [680, 685, 689], "combin": [680, 685, 689], "compar": [680, 689, 694, 696], "time": [680, 685, 689, 701], "relat": [680, 689], "gener": [681, 682, 710], "top": 681, "deal": 681, "datetimelik": [681, 689], "util": 682, "api": [684, 704], "refer": 684, "document": [684, 696, 700], "object": [685, 701, 705, 706, 710, 712], "properti": [685, 689], "modifi": 685, "memori": 685, "usag": 685, "specif": 685, "set": 685, "numer": [685, 710], "date": 685, "input": [686, 709], "output": [686, 709], "csv": [686, 701], "text": 686, "json": 686, "orc": [686, 701], "hdfstore": 686, "pytabl": 686, "hdf5": 686, "feather": 686, "avro": 686, "option": [688, 699, 711], "accessor": 689, "datetim": [689, 710], "method": [689, 701], "timedelta": 689, "benchmark": 694, "organ": 694, "run": 694, "content": [694, 700], "configur": 694, "write": [694, 696], "parametr": 694, "profil": 694, "advanc": 694, "topic": 694, "understand": 694, "benchmark_with_object": 694, "fixtur": 694, "The": [694, 698, 706], "decor": 694, "contribut": 695, "guid": [695, 697, 708], "directori": 695, "structur": 695, "file": 695, "style": 695, "deprec": 695, "remov": 695, "python": 695, "v": 695, "cython": [695, 698], "except": 695, "libcudf": 695, "docstr": 696, "publish": 696, "page": 696, "build": 696, "requir": 696, "view": [696, 701], "doc": 696, "intern": 696, "develop": [697, 704], "librari": [698, 701], "design": 698, "frame": 698, "layer": 698, "columnaccessor": 698, "type": [698, 705, 709, 712], "buffer": 698, "put": 698, "It": 698, "togeth": 698, "welcom": 700, "": 700, "indic": 700, "tabl": 700, "10": 701, "dask": [701, 704], "what": [701, 704], "ar": 701, "when": 701, "us": [701, 709], "creation": 701, "posit": 701, "boolean": 701, "histogram": 701, "convert": [701, 703], "represent": 701, "numpi": [701, 705], "arrow": 701, "In": 701, "out": 701, "perform": 701, "tip": 701, "persist": 701, "wait": 701, "interoper": 703, "cupi": [703, 707], "arrai": [703, 707], "interweav": 703, "smooth": 703, "pydata": 703, "workflow": 703, "spars": 703, "matrix": 703, "multi": 704, "work": [704, 710], "navig": 704, "support": [705, 706, 709, 712], "A": 705, "decim": 705, "nest": 705, "summari": [706, 707], "limit": [706, 712], "calcul": [706, 710], "overview": 707, "user": [707, 708], "defin": 707, "udf": 707, "addit": 707, "scalar": 707, "argument": 707, "control": 707, "custom": 707, "numba": 707, "kernel": 707, "null": [707, 710, 712], "caveat": 707, "i": 709, "o": 709, "magnum": 709, "gpudirect": 709, "storag": 709, "integr": 709, "nvcomp": 709, "current": 709, "polici": 709, "how": 710, "detect": 710, "float": [710, 712], "nan": 710, "na": 710, "fill": 710, "axi": 710, "regular": 710, "express": 710, "comparison": 712, "result": 712, "point": 712, "No": 712, "true": 712}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [707, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_pandas": [[58, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[59, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[60, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[61, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[62, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[63, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[64, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[65, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[66, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[67, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[68, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[69, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[70, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[71, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[72, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[73, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[74, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[75, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[76, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[77, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[78, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[79, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[80, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[81, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[82, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[83, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[84, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[85, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[86, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[87, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[88, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[89, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[90, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[91, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[92, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[93, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[94, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[95, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[96, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[97, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[98, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[99, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[100, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[101, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[102, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[103, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[104, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[105, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[106, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[107, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[108, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[109, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[110, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[111, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[112, "cudf-dataframe-pivot"]], "cudf.DataFrame.pop": [[113, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[114, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[115, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[116, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[117, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[117, "PandasCompat-0"], [123, "PandasCompat-0"], [183, "PandasCompat-0"], [268, "PandasCompat-0"], [392, "PandasCompat-0"], [447, "PandasCompat-0"], [577, "PandasCompat-0"], [586, "PandasCompat-0"], [702, null], [702, null], [702, null], [702, null], [702, null], [702, null], [702, null], [702, null]], "cudf.DataFrame.quantiles": [[118, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[119, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[120, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[121, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[122, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[123, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[124, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[125, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[126, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[127, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[128, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[129, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[130, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[131, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[132, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[133, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[134, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[135, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[136, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[137, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[138, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[139, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[140, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[141, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[142, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[143, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[144, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[145, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[146, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[147, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[148, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[149, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[150, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[151, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[152, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[153, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[154, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[155, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[156, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[157, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[158, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[159, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[160, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[161, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[162, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[163, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[164, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[165, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[166, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[167, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[168, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[169, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[170, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[171, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[172, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[173, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[174, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[175, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[176, "cudf-dataframe-truediv"]], "cudf.DataFrame.unstack": [[177, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[178, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[179, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[180, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[181, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[182, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[183, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[184, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[185, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[186, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[187, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[188, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[189, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[190, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[191, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[192, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[193, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.minute": [[194, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[195, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.quarter": [[196, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[197, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[198, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[199, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[200, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[201, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[202, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[203, "cudf-float64index"]], "cudf.Grouper": [[204, "cudf-grouper"]], "cudf.Index": [[205, "cudf-index"]], "cudf.Index.any": [[206, "cudf-index-any"]], "cudf.Index.append": [[207, "cudf-index-append"]], "cudf.Index.copy": [[208, "cudf-index-copy"]], "cudf.Index.deserialize": [[209, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[210, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[211, "cudf-index-device-serialize"]], "cudf.Index.difference": [[212, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[213, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[214, "cudf-index-dropna"]], "cudf.Index.fillna": [[215, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[216, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[217, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[218, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[219, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[220, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[221, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[222, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[223, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[224, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[225, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[226, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[227, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[228, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[229, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[230, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[231, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[232, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[233, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[234, "cudf-index-is-object"]], "cudf.Index.isin": [[235, "cudf-index-isin"]], "cudf.Index.isna": [[236, "cudf-index-isna"]], "cudf.Index.join": [[237, "cudf-index-join"]], "cudf.Index.names": [[238, "cudf-index-names"]], "cudf.Index.nlevels": [[239, "cudf-index-nlevels"]], "cudf.Index.notna": [[240, "cudf-index-notna"]], "cudf.Index.rename": [[241, "cudf-index-rename"]], "cudf.Index.repeat": [[242, "cudf-index-repeat"]], "cudf.Index.serialize": [[243, "cudf-index-serialize"]], "cudf.Index.set_names": [[244, "cudf-index-set-names"]], "cudf.Index.size": [[245, "cudf-index-size"]], "cudf.Index.sort_values": [[246, "cudf-index-sort-values"]], "cudf.Index.take": [[247, "cudf-index-take"]], "cudf.Index.to_dlpack": [[248, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[249, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[250, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[251, "cudf-index-to-series"]], "cudf.Index.union": [[252, "cudf-index-union"]], "cudf.Index.unique": [[253, "cudf-index-unique"]], "cudf.Index.values": [[254, "cudf-index-values"]], "cudf.Int64Index": [[255, "cudf-int64index"]], "cudf.IntervalIndex": [[256, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[257, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[258, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[259, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[260, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[261, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[262, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[263, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[264, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[265, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[266, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[267, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[268, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[269, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[270, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[271, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[272, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[273, "cudf-rangeindex"]], "cudf.Series": [[274, "cudf-series"]], "cudf.Series.T": [[275, "cudf-series-t"]], "cudf.Series.__array__": [[276, "cudf-series-array"]], "cudf.Series.__iter__": [[277, "cudf-series-iter"]], "cudf.Series.abs": [[278, "cudf-series-abs"]], "cudf.Series.add": [[279, "cudf-series-add"]], "cudf.Series.add_prefix": [[280, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[281, "cudf-series-add-suffix"]], "cudf.Series.all": [[282, "cudf-series-all"]], "cudf.Series.any": [[283, "cudf-series-any"]], "cudf.Series.append": [[284, "cudf-series-append"]], "cudf.Series.apply": [[285, "cudf-series-apply"], [707, "cudf-series-apply"]], "cudf.Series.argsort": [[286, "cudf-series-argsort"]], "cudf.Series.astype": [[287, "cudf-series-astype"]], "cudf.Series.autocorr": [[288, "cudf-series-autocorr"]], "cudf.Series.axes": [[289, "cudf-series-axes"]], "cudf.Series.backfill": [[290, "cudf-series-backfill"]], "cudf.Series.between": [[291, "cudf-series-between"]], "cudf.Series.bfill": [[292, "cudf-series-bfill"]], "cudf.Series.cat": [[293, "cudf-series-cat"]], "cudf.Series.clip": [[294, "cudf-series-clip"]], "cudf.Series.copy": [[295, "cudf-series-copy"]], "cudf.Series.corr": [[296, "cudf-series-corr"]], "cudf.Series.count": [[297, "cudf-series-count"]], "cudf.Series.cov": [[298, "cudf-series-cov"]], "cudf.Series.cummax": [[299, "cudf-series-cummax"]], "cudf.Series.cummin": [[300, "cudf-series-cummin"]], "cudf.Series.cumprod": [[301, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[302, "cudf-series-cumsum"]], "cudf.Series.data": [[303, "cudf-series-data"]], "cudf.Series.describe": [[304, "cudf-series-describe"]], "cudf.Series.deserialize": [[305, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[306, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[307, "cudf-series-device-serialize"]], "cudf.Series.diff": [[308, "cudf-series-diff"]], "cudf.Series.digitize": [[309, "cudf-series-digitize"]], "cudf.Series.div": [[310, "cudf-series-div"]], "cudf.Series.divide": [[311, "cudf-series-divide"]], "cudf.Series.dot": [[312, "cudf-series-dot"]], "cudf.Series.drop": [[313, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[314, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[315, "cudf-series-dropna"]], "cudf.Series.dt": [[316, "cudf-series-dt"]], "cudf.Series.dtype": [[317, "cudf-series-dtype"]], "cudf.Series.empty": [[318, "cudf-series-empty"]], "cudf.Series.eq": [[319, "cudf-series-eq"]], "cudf.Series.equals": [[320, "cudf-series-equals"]], "cudf.Series.explode": [[321, "cudf-series-explode"]], "cudf.Series.factorize": [[322, "cudf-series-factorize"]], "cudf.Series.ffill": [[323, "cudf-series-ffill"]], "cudf.Series.fillna": [[324, "cudf-series-fillna"]], "cudf.Series.first": [[325, "cudf-series-first"]], "cudf.Series.floordiv": [[326, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[327, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[328, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[329, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[330, "cudf-series-from-pandas"]], "cudf.Series.ge": [[331, "cudf-series-ge"]], "cudf.Series.groupby": [[332, "cudf-series-groupby"]], "cudf.Series.gt": [[333, "cudf-series-gt"]], "cudf.Series.has_nulls": [[334, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[335, "cudf-series-hash-values"]], "cudf.Series.head": [[336, "cudf-series-head"]], "cudf.Series.host_deserialize": [[337, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[338, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[339, "cudf-series-iloc"]], "cudf.Series.index": [[340, "cudf-series-index"]], "cudf.Series.interpolate": [[341, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[342, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[343, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[344, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[345, "cudf-series-is-unique"]], "cudf.Series.isin": [[346, "cudf-series-isin"]], "cudf.Series.isna": [[347, "cudf-series-isna"]], "cudf.Series.isnull": [[348, "cudf-series-isnull"]], "cudf.Series.items": [[349, "cudf-series-items"]], "cudf.Series.iteritems": [[350, "cudf-series-iteritems"]], "cudf.Series.keys": [[351, "cudf-series-keys"]], "cudf.Series.kurt": [[352, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[353, "cudf-series-kurtosis"]], "cudf.Series.last": [[354, "cudf-series-last"]], "cudf.Series.le": [[355, "cudf-series-le"]], "cudf.Series.list": [[356, "cudf-series-list"]], "cudf.Series.loc": [[357, "cudf-series-loc"]], "cudf.Series.lt": [[358, "cudf-series-lt"]], "cudf.Series.map": [[359, "cudf-series-map"]], "cudf.Series.mask": [[360, "cudf-series-mask"]], "cudf.Series.max": [[361, "cudf-series-max"]], "cudf.Series.mean": [[362, "cudf-series-mean"]], "cudf.Series.median": [[363, "cudf-series-median"]], "cudf.Series.memory_usage": [[364, "cudf-series-memory-usage"]], "cudf.Series.min": [[365, "cudf-series-min"]], "cudf.Series.mod": [[366, "cudf-series-mod"]], "cudf.Series.mode": [[367, "cudf-series-mode"]], "cudf.Series.mul": [[368, "cudf-series-mul"]], "cudf.Series.multiply": [[369, "cudf-series-multiply"]], "cudf.Series.name": [[370, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[371, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[372, "cudf-series-ndim"]], "cudf.Series.ne": [[373, "cudf-series-ne"]], "cudf.Series.nlargest": [[374, "cudf-series-nlargest"]], "cudf.Series.notna": [[375, "cudf-series-notna"]], "cudf.Series.notnull": [[376, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[377, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[378, "cudf-series-null-count"]], "cudf.Series.nullable": [[379, "cudf-series-nullable"]], "cudf.Series.nullmask": [[380, "cudf-series-nullmask"]], "cudf.Series.nunique": [[381, "cudf-series-nunique"]], "cudf.Series.pad": [[382, "cudf-series-pad"]], "cudf.Series.pct_change": [[383, "cudf-series-pct-change"]], "cudf.Series.pipe": [[384, "cudf-series-pipe"]], "cudf.Series.pow": [[385, "cudf-series-pow"]], "cudf.Series.prod": [[386, "cudf-series-prod"]], "cudf.Series.product": [[387, "cudf-series-product"]], "cudf.Series.quantile": [[388, "cudf-series-quantile"]], "cudf.Series.radd": [[389, "cudf-series-radd"]], "cudf.Series.rank": [[390, "cudf-series-rank"]], "cudf.Series.rdiv": [[391, "cudf-series-rdiv"]], "cudf.Series.reindex": [[392, "cudf-series-reindex"]], "cudf.Series.rename": [[393, "cudf-series-rename"]], "cudf.Series.repeat": [[394, "cudf-series-repeat"]], "cudf.Series.replace": [[395, "cudf-series-replace"]], "cudf.Series.resample": [[396, "cudf-series-resample"]], "cudf.Series.reset_index": [[397, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[398, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[399, "cudf-series-rmod"]], "cudf.Series.rmul": [[400, "cudf-series-rmul"]], "cudf.Series.rolling": [[401, "cudf-series-rolling"]], "cudf.Series.round": [[402, "cudf-series-round"]], "cudf.Series.rpow": [[403, "cudf-series-rpow"]], "cudf.Series.rsub": [[404, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[405, "cudf-series-rtruediv"]], "cudf.Series.sample": [[406, "cudf-series-sample"]], "cudf.Series.scale": [[407, "cudf-series-scale"]], "cudf.Series.searchsorted": [[408, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[409, "cudf-series-serialize"]], "cudf.Series.shape": [[410, "cudf-series-shape"]], "cudf.Series.shift": [[411, "cudf-series-shift"]], "cudf.Series.size": [[412, "cudf-series-size"]], "cudf.Series.skew": [[413, "cudf-series-skew"]], "cudf.Series.sort_index": [[414, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[415, "cudf-series-sort-values"]], "cudf.Series.std": [[416, "cudf-series-std"]], "cudf.Series.str": [[417, "cudf-series-str"]], "cudf.Series.struct": [[418, "cudf-series-struct"]], "cudf.Series.sub": [[419, "cudf-series-sub"]], "cudf.Series.subtract": [[420, "cudf-series-subtract"]], "cudf.Series.sum": [[421, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[422, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[423, "cudf-series-tail"]], "cudf.Series.take": [[424, "cudf-series-take"]], "cudf.Series.tile": [[425, "cudf-series-tile"]], "cudf.Series.to_arrow": [[426, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[427, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[428, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[429, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[430, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[431, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[432, "cudf-series-to-json"]], "cudf.Series.to_list": [[433, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[434, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[435, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[436, "cudf-series-to-string"]], "cudf.Series.tolist": [[437, "cudf-series-tolist"]], "cudf.Series.transpose": [[438, "cudf-series-transpose"]], "cudf.Series.truediv": [[439, "cudf-series-truediv"]], "cudf.Series.unique": [[440, "cudf-series-unique"]], "cudf.Series.update": [[441, "cudf-series-update"]], "cudf.Series.valid_count": [[442, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[443, "cudf-series-value-counts"]], "cudf.Series.values": [[444, "cudf-series-values"]], "cudf.Series.values_host": [[445, "cudf-series-values-host"]], "cudf.Series.var": [[446, "cudf-series-var"]], "cudf.Series.where": [[447, "cudf-series-where"]], "cudf.TimedeltaIndex": [[448, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[449, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[450, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[451, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[452, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[453, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[454, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[455, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[456, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[457, "cudf-uint64index"]], "cudf.concat": [[458, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[459, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[460, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[461, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[462, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[463, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[464, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[465, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[466, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[467, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[468, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[469, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[470, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[471, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[472, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[473, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[474, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[475, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[476, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[477, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[478, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[479, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[480, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[481, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[482, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[483, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[484, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[485, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[486, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[487, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[488, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[489, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[490, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[491, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[492, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[493, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[494, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[495, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.findall": [[496, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[497, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[498, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[499, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[500, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[501, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[502, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[503, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[504, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[505, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[506, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[507, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[508, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[509, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[510, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[511, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[512, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[513, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[514, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[515, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[516, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[517, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[518, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[519, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[520, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[521, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[522, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[523, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[524, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[525, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[526, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[527, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[528, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[529, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[530, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[531, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[532, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[533, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[534, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[535, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[536, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[537, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[538, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[539, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[540, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[541, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[542, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[543, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[544, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[545, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[546, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[547, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[548, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[549, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[550, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[551, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[552, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[553, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[554, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[555, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[556, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[557, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[558, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[559, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[560, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[561, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[562, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[563, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[564, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[565, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[566, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[567, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[568, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[569, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[570, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[571, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[572, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[573, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[574, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[575, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[576, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[577, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[578, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[579, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[580, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[581, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[582, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[583, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[584, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[585, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[586, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[587, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[588, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[589, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[590, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[591, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[592, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[593, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[594, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[595, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[596, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[597, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[598, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[599, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[600, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[601, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[602, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[603, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[604, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[605, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[606, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[607, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[608, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[609, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[610, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[611, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[612, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[613, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[614, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[615, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[616, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[617, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[618, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[619, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[620, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[621, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[622, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[623, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[624, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[625, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[626, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[627, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[628, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[629, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.minute": [[630, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[631, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.quarter": [[632, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[633, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[634, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[635, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[636, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[637, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[638, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[639, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[640, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[641, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[642, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[643, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[644, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[645, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[646, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[647, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[648, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[649, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[650, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[651, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[652, "cudf-core-window-rolling-rolling-var"]], "cudf.cut": [[653, "cudf-cut"]], "cudf.describe_option": [[654, "cudf-describe-option"]], "cudf.from_dlpack": [[655, "cudf-from-dlpack"]], "cudf.get_dummies": [[656, "cudf-get-dummies"]], "cudf.get_option": [[657, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[658, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[659, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[660, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[661, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[662, "cudf-melt"]], "cudf.pivot": [[663, "cudf-pivot"]], "cudf.read_avro": [[664, "cudf-read-avro"]], "cudf.read_csv": [[665, "cudf-read-csv"]], "cudf.read_feather": [[666, "cudf-read-feather"]], "cudf.read_hdf": [[667, "cudf-read-hdf"]], "cudf.read_json": [[668, "cudf-read-json"]], "Not GPU-accelerated": [[668, null], [668, null], [668, null], [668, null], [668, null], [668, null], [668, null], [668, null], [668, null]], "GPU-accelerated": [[668, null]], "GPU-accelerated experimental feature": [[668, null]], "cudf.read_orc": [[669, "cudf-read-orc"]], "cudf.read_parquet": [[670, "cudf-read-parquet"]], "cudf.read_text": [[671, "cudf-read-text"]], "cudf.set_option": [[672, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[673, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[674, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[675, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[676, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[677, "cudf-to-datetime"]], "cudf.to_numeric": [[678, "cudf-to-numeric"]], "cudf.unstack": [[679, "cudf-unstack"]], "DataFrame": [[680, "dataframe"]], "Constructor": [[680, "constructor"], [689, "constructor"], [692, "constructor"]], "Attributes and underlying data": [[680, "attributes-and-underlying-data"]], "Conversion": [[680, "conversion"], [685, "conversion"], [685, "id3"], [685, "id4"], [689, "conversion"]], "Indexing, iteration": [[680, "indexing-iteration"], [683, "indexing-iteration"], [689, "indexing-iteration"]], "Binary operator functions": [[680, "binary-operator-functions"], [689, "binary-operator-functions"]], "Function application, GroupBy & window": [[680, "function-application-groupby-window"], [689, "function-application-groupby-window"]], "Computations / descriptive stats": [[680, "computations-descriptive-stats"], [683, "computations-descriptive-stats"], [689, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[680, "reindexing-selection-label-manipulation"], [689, "reindexing-selection-label-manipulation"]], "Missing data handling": [[680, "missing-data-handling"], [689, "missing-data-handling"]], "Reshaping, sorting, transposing": [[680, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[680, "combining-comparing-joining-merging"], [689, "combining-comparing-joining-merging"]], "Time Series-related": [[680, "time-series-related"], [689, "time-series-related"]], "Serialization / IO / conversion": [[680, "serialization-io-conversion"], [689, "serialization-io-conversion"]], "General Functions": [[681, "general-functions"]], "Data manipulations": [[681, "data-manipulations"]], "Top-level conversions": [[681, "top-level-conversions"]], "Top-level dealing with datetimelike": [[681, "top-level-dealing-with-datetimelike"]], "General Utilities": [[682, "general-utilities"]], "Testing functions": [[682, "testing-functions"]], "GroupBy": [[683, "groupby"], [706, "groupby"]], "Function application": [[683, "function-application"]], "API reference": [[684, "api-reference"]], "API Documentation": [[684, null]], "Index objects": [[685, "index-objects"]], "Index": [[685, "index"]], "Properties": [[685, "properties"]], "Modifying and computations": [[685, "modifying-and-computations"], [685, "id1"]], "Compatibility with MultiIndex": [[685, "compatibility-with-multiindex"]], "Missing values": [[685, "missing-values"]], "Memory usage": [[685, "memory-usage"]], "Sorting": [[685, "sorting"]], "Time-specific operations": [[685, "time-specific-operations"], [685, "id2"]], "Combining / joining / set operations": [[685, "combining-joining-set-operations"]], "Selecting": [[685, "selecting"]], "Numeric Index": [[685, "numeric-index"]], "CategoricalIndex": [[685, "categoricalindex"]], "Categorical components": [[685, "categorical-components"]], "IntervalIndex": [[685, "intervalindex"]], "IntervalIndex components": [[685, "intervalindex-components"]], "MultiIndex": [[685, "multiindex"], [701, "multiindex"]], "MultiIndex constructors": [[685, "multiindex-constructors"]], "MultiIndex properties": [[685, "multiindex-properties"]], "MultiIndex components": [[685, "multiindex-components"]], "MultiIndex selecting": [[685, "multiindex-selecting"]], "DatetimeIndex": [[685, "datetimeindex"]], "Time/date components": [[685, "time-date-components"]], "TimedeltaIndex": [[685, "timedeltaindex"]], "Components": [[685, "components"]], "Input/output": [[686, "input-output"]], "CSV": [[686, "csv"], [701, "csv"]], "Text": [[686, "text"]], "JSON": [[686, "json"]], "Parquet": [[686, "parquet"], [701, "parquet"]], "ORC": [[686, "orc"], [701, "orc"]], "HDFStore: PyTables (HDF5)": [[686, "hdfstore-pytables-hdf5"]], "Feather": [[686, "feather"]], "Avro": [[686, "avro"]], "List handling": [[687, "list-handling"], [689, "list-handling"]], "cudf Options": [[688, "cudf-options"]], "Series": [[689, "series"]], "Attributes": [[689, "attributes"]], "Reshaping, sorting": [[689, "reshaping-sorting"]], "Accessors": [[689, "accessors"]], "Datetimelike properties": [[689, "datetimelike-properties"]], "Datetime properties": [[689, "datetime-properties"]], "Datetime methods": [[689, "datetime-methods"]], "Timedelta properties": [[689, "timedelta-properties"]], "String handling": [[689, "string-handling"], [690, "string-handling"]], "Categorical accessor": [[689, "categorical-accessor"]], "Struct handling": [[689, "struct-handling"], [691, "struct-handling"]], "SubwordTokenizer": [[692, "subwordtokenizer"]], "Window": [[693, "window"]], "Rolling window functions": [[693, "rolling-window-functions"]], "Benchmarking cuDF": [[694, "benchmarking-cudf"]], "Benchmark organization": [[694, "benchmark-organization"]], "Running benchmarks": [[694, "running-benchmarks"]], "Benchmark contents": [[694, "benchmark-contents"]], "Benchmark configuration": [[694, "benchmark-configuration"]], "Writing benchmarks": [[694, "writing-benchmarks"]], "Parametrizing tests": [[694, "parametrizing-tests"]], "Comparing to pandas": [[694, "comparing-to-pandas"], [696, "comparing-to-pandas"]], "Testing benchmarks": [[694, "testing-benchmarks"]], "Profiling": [[694, "profiling"]], "Advanced Topics": [[694, "advanced-topics"]], "Understanding benchmark_with_object": [[694, "understanding-benchmark-with-object"]], "Fixture unions": [[694, "fixture-unions"]], "The benchmark_with_object decorator": [[694, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[695, "contributing-guide"]], "Directory structure and file naming": [[695, "directory-structure-and-file-naming"]], "Code style": [[695, "code-style"]], "Deprecating and removing code": [[695, "deprecating-and-removing-code"]], "pandas compatibility": [[695, "pandas-compatibility"]], "Python vs Cython": [[695, "python-vs-cython"]], "Exception handling": [[695, "exception-handling"]], "Handling libcudf Exceptions": [[695, "handling-libcudf-exceptions"]], "Writing documentation": [[696, "writing-documentation"]], "Docstrings": [[696, "docstrings"]], "Published documentation": [[696, "published-documentation"]], "Writing documentation pages": [[696, "writing-documentation-pages"]], "Building documentation": [[696, "building-documentation"]], "Requirements": [[696, "requirements"]], "Building and viewing docs": [[696, "building-and-viewing-docs"]], "Documenting cuDF internals": [[696, "documenting-cudf-internals"]], "Developer Guide": [[697, "developer-guide"]], "Library Design": [[698, "library-design"]], "The Frame layer": [[698, "the-frame-layer"]], "Frames": [[698, "frames"]], "Indexes": [[698, "indexes"]], "The Column layer": [[698, "the-column-layer"]], "ColumnAccessor": [[698, "columnaccessor"]], "Columns": [[698, "columns"]], "Data types": [[698, "data-types"], [712, "data-types"]], "Buffer": [[698, "buffer"]], "The Cython layer": [[698, "the-cython-layer"]], "Putting It All Together": [[698, "putting-it-all-together"]], "Options": [[699, "options"], [711, "options"]], "Welcome to cuDF\u2019s documentation!": [[700, "welcome-to-cudf-s-documentation"]], "Contents:": [[700, null]], "Indices and tables": [[700, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[701, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[701, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[701, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[701, "object-creation"]], "Viewing Data": [[701, "viewing-data"]], "Selection": [[701, "selection"]], "Getting": [[701, "getting"]], "Selection by Label": [[701, "selection-by-label"]], "Selection by Position": [[701, "selection-by-position"]], "Boolean Indexing": [[701, "boolean-indexing"]], "Missing Data": [[701, "missing-data"]], "Operations": [[701, "operations"]], "Stats": [[701, "stats"]], "Applymap": [[701, "applymap"]], "Histogramming": [[701, "histogramming"]], "String Methods": [[701, "string-methods"]], "Concat": [[701, "concat"]], "Join": [[701, "join"]], "Grouping": [[701, "grouping"], [706, "grouping"]], "Transpose": [[701, "transpose"]], "Time Series": [[701, "time-series"]], "Categoricals": [[701, "categoricals"]], "Converting Data Representation": [[701, "converting-data-representation"]], "Pandas": [[701, "pandas"]], "Numpy": [[701, "numpy"]], "Arrow": [[701, "arrow"]], "Getting Data In/Out": [[701, "getting-data-in-out"]], "Dask Performance Tips": [[701, "dask-performance-tips"]], "Persisting Data": [[701, "persisting-data"]], "Wait": [[701, "wait"]], "Pandas Compatibility Notes": [[702, "pandas-compatibility-notes"]], "Interoperability between cuDF and CuPy": [[703, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[703, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[703, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[703, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[703, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[703, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[703, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Multi-GPU with Dask-cuDF": [[704, "multi-gpu-with-dask-cudf"]], "What works": [[704, "what-works"]], "Developing the API": [[704, "developing-the-api"]], "Navigating the API": [[704, "navigating-the-api"]], "Supported Data Types": [[705, "supported-data-types"]], "NumPy data types": [[705, "numpy-data-types"]], "A note on object": [[705, "a-note-on-object"]], "Decimal data types": [[705, "decimal-data-types"]], "Nested data types (List and Struct)": [[705, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[706, "summary-of-supported-operations"]], "Grouping by index levels": [[706, "grouping-by-index-levels"]], "The Grouper object": [[706, "the-grouper-object"]], "Aggregation": [[706, "aggregation"]], "GroupBy apply": [[706, "groupby-apply"]], "Limitations": [[706, "limitations"]], "Transform": [[706, "transform"]], "Rolling window calculations": [[706, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[707, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[707, "series-udfs"]], "Functions with Additional Scalar Arguments": [[707, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[707, "nullable-data"]], "String data": [[707, "string-data"]], "Lower level control with custom numba kernels": [[707, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[707, "dataframe-udfs"]], "String Data": [[707, "id1"]], "Numba kernels for DataFrames": [[707, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[707, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[707, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[707, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[707, "numba-kernels-on-cupy-arrays"]], "Caveats": [[707, "caveats"]], "Summary": [[707, "summary"]], "User Guide": [[708, "user-guide"]], "Input / Output": [[709, "input-output"]], "I/O Supported dtypes": [[709, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[709, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[709, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[709, "id1"]], "Working with missing data": [[710, "working-with-missing-data"]], "How to Detect missing values": [[710, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[710, "float-dtypes-and-missing-data"]], "Datetimes": [[710, "datetimes"]], "Calculations with missing data": [[710, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[710, "sum-product-of-null-nans"]], "NA values in GroupBy": [[710, "na-values-in-groupby"]], "Inserting missing data": [[710, "inserting-missing-data"]], "Filling missing values: fillna": [[710, "filling-missing-values-fillna"]], "Filling with cudf Object": [[710, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[710, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[710, "replacing-generic-values"]], "String/regular expression replacement": [[710, "string-regular-expression-replacement"]], "Numeric replacement": [[710, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[712, "comparison-of-cudf-and-pandas"]], "Supported operations": [[712, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[712, "null-or-missing-values"]], "Iteration": [[712, "iteration"]], "Result ordering": [[712, "result-ordering"]], "Floating-point computation": [[712, "floating-point-computation"]], "Column names": [[712, "column-names"]], "No true \"object\" data type": [[712, "no-true-object-data-type"]], ".apply() function limitations": [[712, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_pandas() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[60, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[61, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[62, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[63, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[64, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[65, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[66, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[67, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[68, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[69, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[70, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[71, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[72, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[73, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[74, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[75, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[76, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[77, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[78, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[79, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[80, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[81, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[82, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[84, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[85, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[86, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[87, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[88, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[89, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[90, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[91, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[92, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[93, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[94, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[95, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[96, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[97, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[98, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[99, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[100, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[101, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[102, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[103, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[104, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[105, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[106, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[107, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[108, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[109, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[110, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[111, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[112, "cudf.DataFrame.pivot"]], "pop() (cudf.dataframe method)": [[113, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[114, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[115, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[116, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[117, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[118, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[119, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[120, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[121, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[122, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[123, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[124, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[125, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[126, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[127, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[128, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[129, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[130, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[131, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[132, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[133, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[134, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[135, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[136, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[137, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[138, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[139, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[140, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[141, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[142, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[143, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[144, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[145, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[146, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[147, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[148, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[149, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[150, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[151, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[152, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[153, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[154, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[155, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[156, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[157, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[158, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[159, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[160, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[161, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[175, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[176, "cudf.DataFrame.truediv"]], "unstack() (cudf.dataframe method)": [[177, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[178, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[179, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[180, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[181, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[182, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[183, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[184, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[185, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[186, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[187, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[188, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[190, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.isocalendar"]], "minute (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.month"]], "quarter (cudf.datetimeindex property)": [[196, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[197, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[199, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[200, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[202, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[203, "cudf.Float64Index"]], "grouper (class in cudf)": [[204, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[204, "cudf.Grouper.__init__"]], "index (class in cudf)": [[205, "cudf.Index"]], "any() (cudf.index method)": [[206, "cudf.Index.any"]], "append() (cudf.index method)": [[207, "cudf.Index.append"]], "copy() (cudf.index method)": [[208, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[209, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[210, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[211, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[212, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[213, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[214, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[215, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[216, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[217, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[218, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[219, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[220, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[221, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[222, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[223, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[224, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[225, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[226, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[227, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[228, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[229, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[230, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[231, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[232, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[233, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[234, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[235, "cudf.Index.isin"]], "isna() (cudf.index method)": [[236, "cudf.Index.isna"]], "join() (cudf.index method)": [[237, "cudf.Index.join"]], "names (cudf.index property)": [[238, "cudf.Index.names"]], "nlevels (cudf.index property)": [[239, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[240, "cudf.Index.notna"]], "rename() (cudf.index method)": [[241, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[242, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[243, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[244, "cudf.Index.set_names"]], "size (cudf.index property)": [[245, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[246, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[247, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[248, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[249, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[250, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[251, "cudf.Index.to_series"]], "union() (cudf.index method)": [[252, "cudf.Index.union"]], "unique() (cudf.index method)": [[253, "cudf.Index.unique"]], "values (cudf.index property)": [[254, "cudf.Index.values"]], "int64index (class in cudf)": [[255, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[256, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[256, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[257, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[258, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[259, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[260, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[261, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[262, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[263, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[264, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[265, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[266, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[267, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[268, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[269, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[270, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[271, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[272, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[273, "cudf.RangeIndex"]], "series (class in cudf)": [[274, "cudf.Series"]], "t (cudf.series property)": [[275, "cudf.Series.T"]], "__array__() (cudf.series method)": [[276, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[277, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[278, "cudf.Series.abs"]], "add() (cudf.series method)": [[279, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[280, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[281, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[282, "cudf.Series.all"]], "any() (cudf.series method)": [[283, "cudf.Series.any"]], "append() (cudf.series method)": [[284, "cudf.Series.append"]], "apply() (cudf.series method)": [[285, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[286, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[287, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[288, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[289, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[290, "cudf.Series.backfill"]], "between() (cudf.series method)": [[291, "cudf.Series.between"]], "bfill() (cudf.series method)": [[292, "cudf.Series.bfill"]], "cat (cudf.series property)": [[293, "cudf.Series.cat"]], "clip() (cudf.series method)": [[294, "cudf.Series.clip"]], "copy() (cudf.series method)": [[295, "cudf.Series.copy"]], "corr() (cudf.series method)": [[296, "cudf.Series.corr"]], "count() (cudf.series method)": [[297, "cudf.Series.count"]], "cov() (cudf.series method)": [[298, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[299, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[300, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[301, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[302, "cudf.Series.cumsum"]], "data (cudf.series property)": [[303, "cudf.Series.data"]], "describe() (cudf.series method)": [[304, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[305, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[306, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[307, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[308, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[309, "cudf.Series.digitize"]], "div() (cudf.series method)": [[310, "cudf.Series.div"]], "divide() (cudf.series method)": [[311, "cudf.Series.divide"]], "dot() (cudf.series method)": [[312, "cudf.Series.dot"]], "drop() (cudf.series method)": [[313, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[314, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[315, "cudf.Series.dropna"]], "dt (cudf.series property)": [[316, "cudf.Series.dt"]], "dtype (cudf.series property)": [[317, "cudf.Series.dtype"]], "empty (cudf.series property)": [[318, "cudf.Series.empty"]], "eq() (cudf.series method)": [[319, "cudf.Series.eq"]], "equals() (cudf.series method)": [[320, "cudf.Series.equals"]], "explode() (cudf.series method)": [[321, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[322, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[323, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[324, "cudf.Series.fillna"]], "first() (cudf.series method)": [[325, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[326, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[327, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[328, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[329, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[330, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[331, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[332, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[333, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[334, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[335, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[336, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[337, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[338, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[339, "cudf.Series.iloc"]], "index (cudf.series property)": [[340, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[341, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[342, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[343, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[344, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[345, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[346, "cudf.Series.isin"]], "isna() (cudf.series method)": [[347, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[348, "cudf.Series.isnull"]], "items() (cudf.series method)": [[349, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[350, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[351, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[352, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[353, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[354, "cudf.Series.last"]], "le() (cudf.series method)": [[355, "cudf.Series.le"]], "list (cudf.series property)": [[356, "cudf.Series.list"]], "loc (cudf.series property)": [[357, "cudf.Series.loc"]], "lt() (cudf.series method)": [[358, "cudf.Series.lt"]], "map() (cudf.series method)": [[359, "cudf.Series.map"]], "mask() (cudf.series method)": [[360, "cudf.Series.mask"]], "max() (cudf.series method)": [[361, "cudf.Series.max"]], "mean() (cudf.series method)": [[362, "cudf.Series.mean"]], "median() (cudf.series method)": [[363, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[364, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[365, "cudf.Series.min"]], "mod() (cudf.series method)": [[366, "cudf.Series.mod"]], "mode() (cudf.series method)": [[367, "cudf.Series.mode"]], "mul() (cudf.series method)": [[368, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[369, "cudf.Series.multiply"]], "name (cudf.series property)": [[370, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[371, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[372, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[373, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[374, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[375, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[376, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[377, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[378, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[379, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[380, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[381, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[382, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[383, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[384, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[385, "cudf.Series.pow"]], "prod() (cudf.series method)": [[386, "cudf.Series.prod"]], "product() (cudf.series method)": [[387, "cudf.Series.product"]], "quantile() (cudf.series method)": [[388, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[389, "cudf.Series.radd"]], "rank() (cudf.series method)": [[390, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[391, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[392, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[393, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[394, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[395, "cudf.Series.replace"]], "resample() (cudf.series method)": [[396, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[397, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[398, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[399, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[400, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[401, "cudf.Series.rolling"]], "round() (cudf.series method)": [[402, "cudf.Series.round"]], "rpow() (cudf.series method)": [[403, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[404, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[405, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[406, "cudf.Series.sample"]], "scale() (cudf.series method)": [[407, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[408, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[409, "cudf.Series.serialize"]], "shape (cudf.series property)": [[410, "cudf.Series.shape"]], "shift() (cudf.series method)": [[411, "cudf.Series.shift"]], "size (cudf.series property)": [[412, "cudf.Series.size"]], "skew() (cudf.series method)": [[413, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[414, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[415, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[416, "cudf.Series.std"]], "str (cudf.series property)": [[417, "cudf.Series.str"]], "struct (cudf.series property)": [[418, "cudf.Series.struct"]], "sub() (cudf.series method)": [[419, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[420, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[421, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[422, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[423, "cudf.Series.tail"]], "take() (cudf.series method)": [[424, "cudf.Series.take"]], "tile() (cudf.series method)": [[425, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[426, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[427, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[428, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[429, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[430, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[431, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[432, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[433, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[434, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[435, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[436, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[437, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[438, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[439, "cudf.Series.truediv"]], "unique() (cudf.series method)": [[440, "cudf.Series.unique"]], "update() (cudf.series method)": [[441, "cudf.Series.update"]], "valid_count (cudf.series property)": [[442, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[443, "cudf.Series.value_counts"]], "values (cudf.series property)": [[444, "cudf.Series.values"]], "values_host (cudf.series property)": [[445, "cudf.Series.values_host"]], "var() (cudf.series method)": [[446, "cudf.Series.var"]], "where() (cudf.series method)": [[447, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[448, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[449, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[450, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[451, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[452, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[453, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[454, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[455, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[456, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[457, "cudf.UInt64Index"]], "concat() (in module cudf)": [[458, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[459, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[460, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[461, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[462, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[463, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[464, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[465, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[466, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[467, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[468, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[469, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[470, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[471, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[472, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[473, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[475, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[476, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[477, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[478, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[479, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[480, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[481, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[482, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[483, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.find"]], "findall() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[562, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[563, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[564, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[565, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[566, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[567, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[568, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[569, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[570, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[571, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[572, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[585, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[586, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[587, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[588, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[589, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[590, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[591, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[611, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[612, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[613, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[614, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[615, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[616, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[617, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[618, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[619, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[620, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[621, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[623, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[624, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[626, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[627, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[629, "cudf.core.series.DatetimeProperties.isocalendar"]], "minute (cudf.core.series.datetimeproperties property)": [[630, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.month"]], "quarter (cudf.core.series.datetimeproperties property)": [[632, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[633, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[635, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[636, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[638, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[639, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[640, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[641, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[642, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[643, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[644, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[645, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[646, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[647, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[648, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[649, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[650, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[651, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[652, "cudf.core.window.rolling.Rolling.var"]], "cut() (in module cudf)": [[653, "cudf.cut"]], "describe_option() (in module cudf)": [[654, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[655, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[656, "cudf.get_dummies"]], "get_option() (in module cudf)": [[657, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[658, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[659, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[660, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[661, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[662, "cudf.melt"]], "pivot() (in module cudf)": [[663, "cudf.pivot"]], "read_avro() (in module cudf)": [[664, "cudf.read_avro"]], "read_csv() (in module cudf)": [[665, "cudf.read_csv"]], "read_feather() (in module cudf)": [[666, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[667, "cudf.read_hdf"]], "read_json() (in module cudf)": [[668, "cudf.read_json"]], "read_orc() (in module cudf)": [[669, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[670, "cudf.read_parquet"]], "read_text() (in module cudf)": [[671, "cudf.read_text"]], "set_option() (in module cudf)": [[672, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[673, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[674, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[675, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[676, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[677, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[678, "cudf.to_numeric"]], "unstack() (in module cudf)": [[679, "cudf.unstack"]]}})