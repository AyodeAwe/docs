Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pivot_table", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.truncate", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.truncate", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.crosstab", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.pivot_table", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "developer_guide/testing", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cudf.CategoricalDtype", "user_guide/cudf.CategoricalDtype.categories", "user_guide/cudf.CategoricalDtype.from_pandas", "user_guide/cudf.CategoricalDtype.ordered", "user_guide/cudf.CategoricalDtype.to_pandas", "user_guide/cudf.Decimal128Dtype", "user_guide/cudf.Decimal128Dtype.from_arrow", "user_guide/cudf.Decimal128Dtype.itemsize", "user_guide/cudf.Decimal128Dtype.precision", "user_guide/cudf.Decimal128Dtype.scale", "user_guide/cudf.Decimal128Dtype.to_arrow", "user_guide/cudf.Decimal32Dtype", "user_guide/cudf.Decimal32Dtype.from_arrow", "user_guide/cudf.Decimal32Dtype.itemsize", "user_guide/cudf.Decimal32Dtype.precision", "user_guide/cudf.Decimal32Dtype.scale", "user_guide/cudf.Decimal32Dtype.to_arrow", "user_guide/cudf.Decimal64Dtype", "user_guide/cudf.Decimal64Dtype.from_arrow", "user_guide/cudf.Decimal64Dtype.itemsize", "user_guide/cudf.Decimal64Dtype.precision", "user_guide/cudf.Decimal64Dtype.scale", "user_guide/cudf.Decimal64Dtype.to_arrow", "user_guide/cudf.ListDtype", "user_guide/cudf.ListDtype.element_type", "user_guide/cudf.ListDtype.from_arrow", "user_guide/cudf.ListDtype.leaf_type", "user_guide/cudf.ListDtype.to_arrow", "user_guide/cudf.StructDtype", "user_guide/cudf.StructDtype.fields", "user_guide/cudf.StructDtype.from_arrow", "user_guide/cudf.StructDtype.to_arrow", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pivot_table.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.truncate.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.truncate.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.crosstab.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.pivot_table.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "developer_guide/testing.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cudf.CategoricalDtype.rst", "user_guide/cudf.CategoricalDtype.categories.rst", "user_guide/cudf.CategoricalDtype.from_pandas.rst", "user_guide/cudf.CategoricalDtype.ordered.rst", "user_guide/cudf.CategoricalDtype.to_pandas.rst", "user_guide/cudf.Decimal128Dtype.rst", "user_guide/cudf.Decimal128Dtype.from_arrow.rst", "user_guide/cudf.Decimal128Dtype.itemsize.rst", "user_guide/cudf.Decimal128Dtype.precision.rst", "user_guide/cudf.Decimal128Dtype.scale.rst", "user_guide/cudf.Decimal128Dtype.to_arrow.rst", "user_guide/cudf.Decimal32Dtype.rst", "user_guide/cudf.Decimal32Dtype.from_arrow.rst", "user_guide/cudf.Decimal32Dtype.itemsize.rst", "user_guide/cudf.Decimal32Dtype.precision.rst", "user_guide/cudf.Decimal32Dtype.scale.rst", "user_guide/cudf.Decimal32Dtype.to_arrow.rst", "user_guide/cudf.Decimal64Dtype.rst", "user_guide/cudf.Decimal64Dtype.from_arrow.rst", "user_guide/cudf.Decimal64Dtype.itemsize.rst", "user_guide/cudf.Decimal64Dtype.precision.rst", "user_guide/cudf.Decimal64Dtype.scale.rst", "user_guide/cudf.Decimal64Dtype.to_arrow.rst", "user_guide/cudf.ListDtype.rst", "user_guide/cudf.ListDtype.element_type.rst", "user_guide/cudf.ListDtype.from_arrow.rst", "user_guide/cudf.ListDtype.leaf_type.rst", "user_guide/cudf.ListDtype.to_arrow.rst", "user_guide/cudf.StructDtype.rst", "user_guide/cudf.StructDtype.fields.rst", "user_guide/cudf.StructDtype.from_arrow.rst", "user_guide/cudf.StructDtype.to_arrow.rst", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pivot_table", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.truncate", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.truncate", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.crosstab", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.pivot_table", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Testing cuDF", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "cudf.CategoricalDtype", "cudf.CategoricalDtype.categories", "cudf.CategoricalDtype.from_pandas", "cudf.CategoricalDtype.ordered", "cudf.CategoricalDtype.to_pandas", "cudf.Decimal128Dtype", "cudf.Decimal128Dtype.from_arrow", "cudf.Decimal128Dtype.itemsize", "cudf.Decimal128Dtype.precision", "cudf.Decimal128Dtype.scale", "cudf.Decimal128Dtype.to_arrow", "cudf.Decimal32Dtype", "cudf.Decimal32Dtype.from_arrow", "cudf.Decimal32Dtype.itemsize", "cudf.Decimal32Dtype.precision", "cudf.Decimal32Dtype.scale", "cudf.Decimal32Dtype.to_arrow", "cudf.Decimal64Dtype", "cudf.Decimal64Dtype.from_arrow", "cudf.Decimal64Dtype.itemsize", "cudf.Decimal64Dtype.precision", "cudf.Decimal64Dtype.scale", "cudf.Decimal64Dtype.to_arrow", "cudf.ListDtype", "cudf.ListDtype.element_type", "cudf.ListDtype.from_arrow", "cudf.ListDtype.leaf_type", "cudf.ListDtype.to_arrow", "cudf.StructDtype", "cudf.StructDtype.fields", "cudf.StructDtype.from_arrow", "cudf.StructDtype.to_arrow", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 129, 171, 186, 207, 208, 209, 213, 254, 259, 260, 264, 277, 278, 309, 439, 453, 462, 651, 667, 683, 684, 685, 686, 694, 704, 706, 708, 710, 714, 719, 725, 731, 737, 742, 747], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 135, 136, 137, 138, 143, 147, 153, 154, 155, 156, 157, 161, 165, 167, 168, 172, 177, 178, 180, 183, 185, 186, 187, 192, 201, 207, 209, 215, 221, 227, 229, 230, 231, 232, 233, 237, 238, 241, 247, 252, 259, 260, 261, 267, 278, 283, 289, 291, 297, 299, 308, 311, 314, 315, 316, 317, 323, 329, 330, 332, 333, 334, 335, 336, 337, 340, 342, 345, 358, 359, 362, 364, 365, 366, 369, 370, 372, 373, 376, 377, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 402, 403, 404, 407, 408, 409, 410, 413, 416, 423, 424, 425, 426, 433, 435, 436, 443, 444, 448, 450, 452, 453, 462, 473, 484, 488, 490, 498, 526, 532, 555, 558, 559, 561, 562, 563, 564, 565, 566, 580, 584, 585, 586, 588, 589, 597, 603, 604, 605, 606, 611, 614, 618, 620, 626, 641, 661, 662, 664, 665, 672, 673, 674, 675, 678, 679, 680, 684, 693, 694, 704, 705, 710, 711, 713, 714, 719, 725, 731, 737, 742, 746, 747, 751, 752], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 146, 147, 148, 149, 152, 153, 154, 155, 156, 162, 163, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 203, 204, 207, 208, 209, 216, 219, 221, 223, 224, 228, 240, 241, 244, 246, 248, 250, 251, 253, 255, 256, 259, 260, 261, 262, 264, 268, 269, 270, 272, 276, 277, 278, 280, 283, 286, 287, 290, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 308, 314, 315, 317, 318, 319, 322, 323, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 351, 352, 356, 357, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 379, 380, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 415, 416, 417, 418, 420, 423, 424, 425, 426, 430, 431, 434, 436, 438, 439, 440, 443, 444, 445, 448, 451, 452, 453, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 485, 486, 488, 490, 491, 495, 497, 498, 499, 500, 504, 507, 508, 517, 528, 529, 530, 533, 543, 544, 546, 547, 550, 551, 552, 554, 555, 556, 557, 562, 567, 573, 574, 580, 582, 583, 584, 585, 586, 587, 589, 593, 594, 602, 603, 604, 605, 606, 609, 611, 614, 618, 661, 662, 663, 665, 667, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 687, 688, 689, 712, 713, 714, 750, 753], "categori": [0, 2, 21, 36, 93, 94, 230, 238, 291, 297, 308, 326, 332, 464, 465, 466, 469, 470, 471, 472, 504, 537, 662, 665, 683, 686, 708, 712, 714, 716, 717, 718, 747, 748, 752, 755], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 122, 141, 143, 150, 157, 167, 172, 181, 186, 207, 241, 247, 250, 259, 290, 291, 316, 318, 326, 336, 371, 378, 381, 394, 412, 413, 419, 435, 448, 453, 462, 465, 466, 471, 472, 480, 482, 492, 561, 607, 662, 664, 667, 675, 678, 683, 684, 685, 686, 687, 704, 712, 714, 715, 716, 718, 742, 743, 749, 751], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 169, 171, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 211, 216, 219, 221, 222, 228, 229, 230, 231, 232, 233, 237, 238, 239, 241, 245, 246, 248, 250, 251, 254, 255, 256, 259, 260, 261, 264, 266, 273, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 297, 298, 299, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 350, 351, 352, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 423, 424, 425, 426, 428, 431, 434, 438, 439, 443, 444, 445, 446, 448, 451, 452, 453, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 580, 607, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 661, 662, 665, 675, 678, 680, 683, 684, 685, 686, 687, 688, 689, 699, 704, 708, 710, 712, 713, 714, 715, 716, 718, 719, 720, 724, 725, 726, 730, 731, 732, 736, 737, 738, 742, 743, 744, 745, 746, 748, 749, 750, 751, 755], "copi": [0, 5, 21, 44, 45, 46, 54, 124, 125, 163, 165, 169, 175, 176, 178, 186, 207, 209, 250, 252, 259, 260, 261, 264, 277, 291, 317, 328, 396, 397, 431, 433, 438, 444, 453, 462, 464, 465, 466, 470, 471, 472, 532, 543, 568, 664, 680, 706, 708, 713, 752, 755], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 113, 118, 122, 124, 125, 127, 129, 133, 138, 141, 142, 144, 149, 150, 159, 161, 163, 167, 168, 170, 171, 172, 178, 180, 181, 185, 186, 207, 209, 216, 217, 221, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 241, 244, 245, 248, 250, 256, 259, 260, 261, 262, 264, 272, 277, 278, 286, 287, 288, 291, 295, 298, 299, 308, 313, 316, 317, 318, 319, 322, 323, 324, 325, 328, 334, 335, 336, 337, 338, 345, 350, 351, 352, 359, 362, 364, 368, 371, 375, 377, 379, 380, 394, 399, 401, 405, 410, 412, 418, 419, 428, 431, 435, 436, 439, 444, 446, 448, 452, 453, 462, 463, 464, 465, 466, 470, 471, 472, 474, 475, 480, 487, 490, 495, 496, 497, 498, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 534, 537, 543, 550, 555, 556, 566, 583, 584, 585, 586, 603, 604, 605, 606, 607, 611, 614, 618, 628, 629, 631, 632, 633, 634, 652, 661, 662, 665, 667, 668, 673, 675, 678, 679, 680, 681, 683, 684, 685, 686, 687, 704, 709, 712, 713, 714, 746, 749, 750, 753], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 113, 115, 118, 120, 121, 123, 124, 125, 129, 130, 131, 132, 134, 135, 136, 137, 138, 147, 149, 150, 153, 154, 162, 167, 170, 172, 175, 177, 179, 180, 186, 203, 204, 207, 209, 222, 241, 245, 248, 250, 253, 255, 259, 260, 261, 264, 265, 266, 268, 269, 270, 273, 276, 277, 278, 283, 290, 291, 308, 314, 315, 317, 318, 323, 330, 335, 336, 337, 343, 350, 351, 352, 359, 361, 362, 365, 366, 369, 370, 372, 373, 377, 379, 380, 389, 392, 393, 395, 397, 401, 402, 403, 404, 406, 407, 408, 409, 410, 416, 418, 423, 424, 434, 435, 443, 453, 460, 461, 462, 463, 550, 569, 572, 591, 617, 635, 663, 665, 666, 667, 670, 671, 672, 673, 675, 677, 678, 682, 683, 684, 685, 686, 689, 704, 706, 707, 708, 709, 712, 742, 743, 748, 749, 750, 751, 753], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 120, 124, 125, 126, 127, 128, 133, 134, 138, 140, 143, 162, 167, 168, 170, 178, 183, 185, 194, 213, 214, 221, 226, 240, 244, 246, 247, 264, 266, 284, 285, 288, 308, 309, 310, 313, 317, 320, 322, 328, 329, 332, 334, 336, 339, 341, 358, 364, 383, 388, 398, 399, 400, 405, 406, 410, 413, 435, 436, 444, 445, 450, 452, 463, 473, 483, 485, 490, 491, 495, 496, 501, 508, 513, 529, 530, 532, 543, 553, 554, 556, 558, 559, 563, 564, 565, 572, 591, 597, 607, 610, 615, 617, 628, 652, 653, 662, 664, 667, 671, 675, 677, 688, 704, 705, 706, 708, 712, 737, 739, 742, 749, 750, 751, 753], "categor": [0, 1, 2, 21, 36, 93, 94, 229, 230, 231, 232, 233, 237, 238, 291, 297, 308, 332, 662, 665, 680, 683, 684, 685, 686, 708, 714, 748, 749, 751, 755], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 167, 168, 169, 170, 171, 172, 174, 177, 178, 180, 181, 183, 184, 185, 204, 209, 216, 218, 219, 221, 222, 228, 234, 235, 236, 239, 240, 244, 250, 251, 255, 257, 262, 271, 278, 282, 283, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 431, 435, 436, 438, 439, 440, 443, 444, 445, 446, 447, 448, 450, 451, 452, 461, 463, 470, 472, 473, 474, 475, 478, 480, 483, 485, 489, 490, 492, 498, 504, 505, 506, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 534, 540, 542, 543, 549, 550, 554, 555, 564, 566, 573, 574, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 602, 603, 604, 605, 606, 609, 610, 611, 613, 614, 616, 618, 619, 652, 653, 661, 662, 665, 666, 667, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 684, 685, 686, 688, 697, 699, 700, 701, 704, 706, 708, 709, 710, 712, 713, 714, 719, 725, 731, 737, 740, 742, 743, 746, 748, 749, 750, 751, 752, 754], "repres": [0, 23, 128, 145, 152, 162, 168, 184, 186, 278, 293, 295, 400, 414, 420, 436, 451, 453, 477, 485, 504, 505, 506, 523, 625, 658, 660, 662, 665, 704, 708, 719, 725, 731, 737, 742, 748, 753, 755], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 141, 159, 168, 180, 194, 200, 211, 240, 244, 250, 251, 272, 290, 299, 313, 319, 322, 326, 328, 338, 345, 350, 351, 352, 379, 380, 383, 388, 412, 428, 436, 463, 475, 481, 483, 490, 492, 495, 501, 529, 530, 540, 545, 549, 556, 610, 628, 629, 630, 631, 632, 633, 634, 640, 652, 662, 665, 675, 678, 693, 705, 708, 710, 713, 750], "anoth": [0, 40, 163, 167, 169, 180, 288, 312, 363, 431, 435, 438, 566, 708, 710], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 142, 144, 147, 149, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 195, 203, 252, 253, 268, 270, 276, 278, 283, 284, 285, 286, 287, 290, 291, 297, 303, 304, 305, 306, 308, 314, 315, 317, 319, 322, 323, 324, 328, 330, 335, 336, 337, 339, 340, 343, 356, 357, 359, 361, 362, 365, 366, 369, 370, 372, 373, 377, 385, 389, 390, 391, 392, 393, 394, 395, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 416, 418, 420, 423, 424, 425, 427, 429, 431, 433, 434, 435, 436, 438, 440, 443, 444, 451, 460, 463, 572, 575, 581, 583, 584, 585, 586, 588, 589, 591, 595, 596, 597, 603, 604, 605, 606, 611, 613, 614, 616, 617, 618, 619, 635, 651, 652, 653, 661, 664, 665, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 693, 694, 704, 707, 710, 712, 713, 719, 721, 725, 727, 731, 733, 742, 743, 746, 747, 749, 750, 751, 753], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 192, 201, 203, 204, 207, 209, 211, 213, 214, 216, 219, 221, 222, 224, 226, 228, 239, 241, 245, 246, 248, 250, 251, 252, 253, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 345, 350, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 381, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 443, 444, 446, 448, 451, 452, 453, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 511, 512, 528, 530, 531, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 566, 567, 569, 572, 573, 574, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 602, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 626, 641, 643, 651, 652, 653, 658, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 704, 705, 706, 710, 713, 714, 719, 725, 731, 737, 739, 742, 752, 753], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 75, 76, 88, 94, 104, 105, 118, 119, 120, 122, 124, 126, 127, 138, 141, 159, 163, 168, 169, 185, 186, 207, 209, 216, 228, 239, 240, 244, 246, 250, 251, 256, 259, 260, 261, 262, 264, 269, 272, 278, 288, 290, 298, 307, 313, 326, 331, 332, 333, 336, 351, 352, 364, 379, 380, 392, 394, 398, 399, 410, 412, 428, 430, 431, 436, 438, 452, 453, 462, 489, 493, 501, 528, 544, 588, 653, 661, 662, 665, 678, 687, 708, 712, 713, 751], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 61, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 115, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 144, 153, 154, 159, 167, 168, 177, 179, 181, 185, 186, 187, 192, 201, 207, 209, 216, 219, 228, 239, 251, 256, 259, 260, 261, 266, 268, 270, 278, 283, 288, 295, 298, 308, 314, 315, 316, 317, 320, 323, 325, 328, 330, 332, 333, 335, 336, 337, 350, 359, 362, 364, 370, 372, 373, 377, 389, 392, 393, 394, 395, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 423, 424, 428, 435, 436, 443, 452, 453, 462, 463, 464, 470, 471, 472, 481, 490, 493, 495, 501, 511, 512, 516, 528, 537, 543, 544, 550, 556, 580, 588, 620, 626, 641, 653, 661, 662, 665, 674, 675, 678, 679, 680, 681, 683, 684, 686, 687, 689, 694, 695, 697, 699, 700, 701, 704, 706, 707, 708, 710, 711, 712, 746, 747, 748, 749, 750, 753, 755], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 171, 172, 174, 177, 178, 179, 181, 184, 185, 186, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 207, 209, 211, 216, 219, 228, 229, 230, 231, 232, 233, 237, 238, 239, 241, 245, 248, 250, 256, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 277, 278, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 425, 427, 428, 429, 439, 440, 443, 444, 445, 446, 448, 451, 452, 453, 457, 458, 459, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 581, 583, 589, 591, 592, 595, 597, 607, 610, 613, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 658, 660, 661, 662, 665, 667, 670, 671, 672, 674, 675, 676, 678, 679, 680, 684, 685, 686, 687, 688, 689, 710, 712, 713, 714, 737, 739, 746, 748, 749, 750, 753, 755], "dimension": [0, 145, 186, 207, 209, 259, 260, 261, 264, 278, 414, 453, 462, 550, 555, 662], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 106, 107, 109, 110, 116, 117, 124, 126, 127, 128, 133, 142, 143, 149, 151, 152, 155, 157, 160, 163, 168, 169, 170, 172, 178, 181, 182, 184, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 204, 205, 206, 207, 209, 213, 214, 215, 226, 227, 231, 239, 246, 247, 248, 250, 251, 255, 259, 262, 263, 264, 268, 272, 278, 284, 285, 289, 290, 292, 307, 308, 309, 310, 311, 316, 318, 321, 324, 329, 332, 333, 340, 341, 342, 350, 358, 368, 378, 381, 384, 387, 390, 391, 398, 399, 400, 401, 405, 413, 418, 420, 425, 429, 431, 436, 438, 444, 448, 449, 451, 461, 462, 463, 464, 467, 470, 471, 472, 482, 485, 487, 488, 490, 492, 493, 494, 496, 498, 499, 502, 504, 511, 512, 515, 516, 523, 526, 528, 534, 535, 536, 537, 540, 541, 543, 544, 549, 550, 553, 555, 560, 561, 566, 567, 584, 585, 586, 588, 589, 592, 597, 603, 604, 605, 606, 611, 613, 614, 616, 618, 620, 621, 622, 623, 624, 626, 627, 636, 637, 638, 639, 641, 642, 643, 644, 645, 652, 653, 658, 660, 662, 663, 666, 671, 675, 677, 678, 679, 680, 681, 682, 687, 688, 693, 705, 706, 707, 709, 710, 712, 713, 714, 719, 722, 723, 725, 728, 729, 731, 734, 735, 746, 747, 748, 750, 752, 753, 755], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 113, 115, 116, 117, 118, 121, 123, 125, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 149, 150, 152, 153, 154, 155, 162, 167, 168, 170, 171, 172, 177, 178, 179, 180, 184, 186, 204, 209, 221, 241, 248, 255, 260, 261, 262, 268, 269, 272, 278, 283, 286, 287, 288, 290, 298, 303, 304, 305, 306, 308, 314, 315, 316, 317, 318, 319, 322, 323, 325, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 350, 358, 359, 362, 363, 365, 366, 369, 370, 372, 373, 377, 388, 389, 390, 391, 392, 393, 395, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 418, 419, 420, 423, 424, 425, 435, 436, 439, 443, 444, 446, 448, 451, 453, 461, 471, 472, 474, 476, 477, 480, 485, 490, 495, 496, 498, 501, 502, 504, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 527, 528, 533, 537, 540, 543, 549, 550, 551, 555, 556, 557, 575, 583, 584, 585, 586, 596, 603, 604, 605, 606, 607, 611, 614, 618, 651, 652, 661, 662, 663, 664, 665, 666, 667, 672, 673, 674, 675, 676, 678, 679, 680, 682, 684, 685, 687, 688, 689, 704, 705, 706, 712, 713, 746, 747, 750, 752, 755], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 116, 117, 118, 120, 122, 124, 127, 128, 133, 134, 138, 141, 142, 143, 148, 152, 155, 162, 167, 168, 170, 172, 180, 181, 184, 185, 194, 200, 216, 217, 222, 228, 234, 235, 236, 239, 240, 244, 247, 256, 260, 261, 262, 264, 268, 278, 282, 284, 285, 286, 287, 289, 290, 295, 299, 308, 317, 319, 322, 324, 328, 332, 333, 336, 346, 347, 348, 349, 350, 351, 352, 356, 357, 363, 364, 365, 367, 369, 378, 379, 380, 381, 388, 390, 391, 392, 394, 399, 400, 405, 406, 410, 412, 413, 417, 420, 425, 435, 436, 446, 451, 452, 463, 471, 472, 474, 477, 485, 490, 493, 494, 495, 496, 498, 499, 502, 504, 508, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 528, 533, 534, 537, 543, 544, 550, 551, 553, 555, 556, 557, 562, 564, 565, 566, 567, 568, 584, 585, 586, 597, 603, 604, 605, 606, 607, 611, 614, 618, 628, 629, 630, 631, 632, 633, 634, 640, 643, 652, 653, 661, 662, 665, 667, 671, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 693, 695, 696, 699, 703, 704, 705, 706, 707, 708, 709, 710, 714, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755], "given": [0, 21, 44, 103, 112, 118, 119, 126, 127, 128, 129, 134, 138, 141, 172, 224, 246, 268, 291, 317, 333, 392, 398, 399, 400, 401, 406, 410, 412, 471, 472, 476, 481, 485, 490, 495, 498, 501, 504, 525, 530, 540, 543, 550, 555, 556, 562, 566, 607, 667, 672, 675, 679, 680, 687, 704, 705, 708, 710, 752], "replac": [0, 46, 88, 113, 138, 149, 185, 319, 364, 410, 418, 452, 498, 499, 508, 528, 544, 552, 554, 673, 694, 704, 705, 706, 712, 746, 751, 755], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 115, 121, 122, 123, 124, 129, 130, 131, 132, 133, 135, 136, 137, 149, 153, 154, 167, 168, 171, 177, 209, 221, 231, 237, 240, 244, 250, 278, 283, 290, 308, 314, 315, 323, 324, 330, 334, 335, 337, 345, 351, 352, 359, 362, 363, 370, 371, 372, 373, 375, 377, 379, 380, 385, 389, 393, 394, 395, 396, 402, 403, 404, 405, 407, 408, 409, 418, 423, 424, 435, 436, 439, 443, 446, 448, 474, 480, 482, 490, 543, 580, 654, 665, 675, 710, 713, 750, 751, 755], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 113, 115, 118, 121, 123, 125, 127, 129, 130, 131, 132, 135, 136, 137, 140, 142, 143, 144, 149, 150, 153, 154, 162, 167, 168, 170, 172, 177, 179, 181, 185, 211, 213, 214, 215, 219, 226, 227, 239, 247, 248, 262, 266, 268, 269, 270, 273, 278, 283, 288, 289, 290, 293, 295, 297, 308, 309, 310, 311, 314, 315, 316, 317, 323, 325, 330, 335, 336, 337, 341, 342, 343, 350, 359, 362, 364, 370, 372, 373, 377, 389, 392, 393, 395, 399, 401, 402, 403, 404, 407, 408, 409, 413, 418, 419, 423, 424, 435, 436, 443, 452, 463, 464, 470, 472, 485, 487, 490, 494, 495, 501, 502, 511, 512, 528, 543, 550, 555, 556, 560, 561, 572, 580, 589, 591, 607, 617, 619, 653, 661, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 689, 694, 706, 708, 710, 711, 712, 737, 739, 741, 746, 747, 749, 750, 751, 752, 753, 755], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 113, 122, 124, 125, 128, 133, 134, 138, 141, 149, 162, 163, 167, 168, 169, 170, 172, 174, 175, 178, 181, 186, 204, 248, 250, 255, 260, 261, 262, 264, 268, 269, 270, 277, 278, 300, 308, 317, 319, 332, 333, 336, 387, 388, 392, 394, 397, 400, 401, 405, 406, 410, 412, 418, 431, 435, 436, 438, 440, 444, 448, 453, 461, 463, 464, 465, 466, 470, 471, 472, 474, 476, 497, 498, 499, 552, 554, 580, 589, 595, 597, 610, 652, 661, 662, 663, 665, 666, 667, 668, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 694, 704, 707, 710, 711, 714, 719, 725, 731, 750, 751, 752], "item": [0, 36, 48, 106, 114, 138, 144, 278, 308, 322, 326, 410, 471, 472, 675, 677, 737, 739, 741], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 161, 177, 278, 283, 300, 314, 315, 322, 323, 324, 330, 335, 337, 359, 362, 370, 372, 373, 377, 383, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 471, 491, 653, 662, 704, 705, 706, 708, 710, 712, 746, 748, 750, 755], "uniqu": [0, 36, 112, 125, 140, 181, 262, 264, 269, 272, 278, 308, 326, 349, 385, 448, 607, 662, 665, 672, 678, 694, 712, 713, 714, 715, 749, 755], "here": [0, 36, 308, 541, 674, 675, 679, 680, 704, 706, 708, 710, 746, 750, 752], "also": [0, 15, 36, 54, 94, 124, 125, 127, 129, 133, 134, 250, 308, 328, 363, 397, 399, 401, 405, 406, 446, 490, 491, 493, 500, 503, 507, 508, 511, 512, 516, 523, 537, 540, 547, 549, 662, 667, 678, 679, 680, 704, 705, 706, 707, 708, 710, 711, 712, 742, 746, 748, 749, 750, 752, 753, 755], "thei": [0, 15, 50, 94, 97, 122, 127, 170, 172, 278, 289, 324, 332, 333, 381, 394, 399, 485, 492, 504, 561, 566, 607, 667, 681, 704, 705, 706, 708, 710, 711, 748, 749, 750, 755], "infer": [0, 4, 168, 186, 260, 261, 269, 278, 436, 456, 675, 678, 687, 712], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 114, 118, 124, 125, 128, 129, 138, 144, 149, 150, 151, 165, 167, 168, 172, 176, 180, 181, 185, 189, 191, 200, 213, 214, 216, 218, 221, 222, 252, 260, 261, 262, 266, 267, 268, 269, 270, 272, 278, 288, 289, 308, 309, 310, 317, 319, 331, 332, 334, 336, 363, 364, 387, 396, 397, 400, 401, 410, 418, 419, 421, 433, 435, 436, 446, 452, 463, 476, 478, 480, 481, 485, 487, 496, 497, 498, 499, 503, 504, 533, 535, 536, 537, 538, 539, 543, 550, 551, 552, 554, 555, 557, 580, 584, 585, 586, 592, 597, 603, 604, 605, 606, 607, 608, 611, 614, 618, 622, 624, 640, 651, 652, 653, 662, 664, 665, 671, 672, 674, 675, 676, 677, 678, 679, 687, 688, 704, 705, 706, 708, 709, 710, 712, 713, 719, 720, 725, 726, 731, 732, 737, 739, 746, 747, 748, 750, 755], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 116, 117, 118, 122, 127, 129, 133, 138, 140, 141, 142, 148, 149, 150, 151, 152, 155, 161, 162, 163, 167, 168, 169, 170, 172, 173, 178, 181, 184, 185, 186, 207, 209, 212, 217, 221, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 248, 250, 256, 259, 260, 261, 264, 277, 278, 286, 287, 288, 289, 290, 291, 295, 298, 299, 303, 304, 305, 306, 308, 313, 316, 317, 318, 319, 322, 323, 324, 325, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 359, 362, 364, 365, 366, 367, 368, 369, 371, 377, 379, 380, 385, 390, 391, 394, 399, 401, 405, 410, 412, 417, 418, 419, 420, 425, 431, 435, 436, 438, 444, 448, 451, 452, 453, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 480, 487, 490, 495, 496, 497, 498, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 534, 537, 540, 543, 549, 550, 555, 556, 575, 583, 584, 585, 586, 596, 603, 604, 605, 606, 607, 611, 614, 618, 628, 629, 631, 632, 633, 634, 651, 652, 662, 667, 675, 677, 678, 679, 683, 684, 685, 686, 687, 714, 717, 750, 752, 753], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 118, 122, 144, 151, 161, 163, 168, 169, 171, 173, 185, 210, 216, 218, 228, 229, 231, 232, 233, 237, 238, 239, 256, 260, 261, 286, 287, 295, 308, 313, 317, 322, 324, 338, 350, 351, 352, 364, 379, 380, 383, 392, 394, 431, 436, 438, 439, 452, 464, 465, 466, 469, 470, 471, 472, 475, 490, 495, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 556, 652, 662, 675, 680, 683, 684, 685, 686, 693, 706, 710, 714, 717, 746], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 149, 150, 152, 153, 154, 155, 157, 165, 169, 170, 172, 174, 177, 178, 184, 186, 203, 209, 213, 214, 216, 219, 222, 228, 234, 246, 247, 250, 252, 253, 272, 275, 276, 277, 278, 282, 283, 288, 289, 292, 295, 298, 299, 308, 309, 310, 313, 314, 315, 316, 323, 324, 329, 330, 332, 333, 335, 336, 337, 339, 340, 345, 346, 358, 359, 362, 370, 372, 373, 374, 377, 378, 381, 389, 390, 391, 392, 393, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 418, 419, 420, 421, 423, 424, 425, 433, 438, 440, 443, 444, 445, 451, 453, 456, 460, 464, 465, 466, 467, 470, 471, 472, 476, 484, 485, 489, 491, 493, 494, 497, 498, 499, 502, 507, 509, 510, 513, 514, 515, 516, 518, 520, 522, 523, 524, 527, 528, 532, 533, 535, 536, 537, 540, 544, 545, 547, 549, 550, 551, 555, 557, 558, 559, 562, 563, 566, 568, 583, 589, 597, 607, 610, 651, 652, 662, 664, 665, 667, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 694, 696, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 719, 725, 731, 746, 747, 748, 749, 750, 752, 753, 754, 755], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 143, 147, 149, 150, 152, 153, 154, 155, 157, 158, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 194, 207, 209, 210, 214, 216, 219, 221, 222, 229, 230, 231, 232, 233, 234, 237, 238, 239, 246, 247, 248, 250, 252, 259, 262, 268, 270, 272, 277, 278, 279, 283, 286, 287, 288, 289, 290, 291, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 329, 330, 333, 334, 335, 336, 337, 340, 345, 346, 350, 351, 352, 358, 359, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 377, 379, 380, 381, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 416, 418, 419, 420, 423, 424, 425, 427, 431, 433, 435, 436, 438, 439, 440, 442, 443, 444, 446, 448, 451, 452, 453, 456, 462, 463, 471, 472, 474, 475, 476, 477, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 535, 536, 537, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 581, 589, 592, 595, 597, 607, 610, 613, 615, 616, 620, 626, 628, 629, 631, 632, 633, 634, 641, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 670, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 719, 725, 731, 746, 747, 748, 749, 750, 751, 753, 754, 755], "treat": [0, 12, 13, 73, 94, 185, 286, 287, 295, 345, 452, 471, 472, 490, 535, 543, 550, 555, 713, 714, 750, 752, 753], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 113, 116, 117, 118, 120, 124, 125, 126, 133, 134, 138, 143, 147, 149, 152, 155, 165, 167, 184, 194, 204, 213, 222, 234, 246, 247, 250, 252, 255, 256, 261, 269, 271, 272, 278, 286, 287, 289, 298, 303, 304, 305, 306, 308, 309, 336, 343, 345, 346, 350, 351, 352, 368, 379, 380, 390, 391, 392, 396, 398, 405, 406, 410, 413, 416, 418, 420, 425, 433, 435, 451, 461, 469, 475, 476, 486, 488, 489, 490, 492, 495, 504, 509, 510, 513, 517, 521, 528, 531, 535, 536, 539, 548, 556, 567, 597, 615, 628, 652, 653, 661, 662, 663, 664, 673, 674, 676, 677, 678, 679, 687, 688, 693, 695, 704, 705, 706, 708, 709, 712, 713, 714, 715, 717, 719, 722, 723, 725, 728, 729, 731, 734, 735, 742, 743, 746, 748, 749, 750, 752, 753, 754, 755], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 113, 115, 116, 117, 118, 121, 123, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 141, 144, 148, 151, 152, 153, 154, 155, 156, 162, 168, 171, 175, 177, 179, 181, 184, 204, 216, 228, 241, 255, 256, 262, 272, 278, 283, 286, 287, 289, 292, 300, 303, 304, 305, 306, 308, 314, 315, 316, 323, 325, 328, 330, 335, 336, 337, 345, 350, 356, 357, 359, 362, 365, 366, 367, 369, 370, 372, 373, 377, 389, 390, 391, 393, 395, 399, 400, 402, 403, 404, 405, 407, 408, 409, 410, 412, 417, 420, 423, 424, 425, 426, 436, 439, 443, 448, 451, 461, 463, 472, 474, 480, 485, 486, 498, 528, 531, 539, 548, 567, 572, 580, 583, 584, 585, 586, 591, 592, 595, 597, 603, 604, 605, 606, 610, 611, 614, 615, 617, 618, 662, 671, 672, 673, 678, 681, 688, 689, 704, 705, 706, 708, 710, 712, 713, 747, 748, 749, 750, 751, 753], "unord": [0, 94, 466, 662], "categoricaldtyp": [0, 21, 291, 708, 748], "cannot": [0, 54, 71, 138, 168, 219, 228, 328, 378, 381, 410, 436, 537, 583, 667, 704, 705, 748, 749], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 103, 106, 107, 110, 111, 112, 118, 119, 120, 124, 125, 127, 128, 129, 133, 134, 138, 140, 144, 149, 152, 162, 163, 167, 168, 169, 170, 171, 172, 174, 178, 180, 181, 184, 203, 204, 207, 219, 222, 253, 255, 259, 262, 268, 276, 277, 278, 288, 289, 291, 300, 308, 317, 319, 328, 332, 336, 339, 340, 343, 345, 350, 356, 357, 361, 363, 365, 366, 368, 369, 387, 388, 392, 396, 399, 400, 401, 405, 406, 410, 418, 420, 431, 434, 435, 436, 438, 439, 440, 444, 446, 451, 460, 461, 462, 472, 474, 485, 489, 490, 491, 493, 495, 497, 498, 499, 500, 507, 515, 525, 528, 530, 535, 536, 537, 543, 544, 545, 546, 547, 550, 553, 555, 560, 561, 565, 566, 572, 583, 584, 585, 586, 588, 589, 591, 597, 603, 604, 605, 606, 611, 613, 614, 616, 617, 618, 643, 651, 652, 658, 660, 662, 665, 667, 671, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 695, 696, 697, 699, 700, 701, 704, 705, 706, 708, 709, 710, 711, 713, 714, 746, 747, 748, 749, 750, 751, 753, 754, 755], "togeth": [0, 111, 211, 388, 706, 707, 746, 749, 750], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 162, 163, 167, 168, 169, 170, 171, 172, 176, 177, 178, 180, 181, 184, 185, 186, 203, 204, 209, 216, 217, 218, 219, 221, 228, 241, 245, 248, 250, 253, 255, 256, 260, 261, 262, 264, 276, 277, 278, 283, 286, 287, 288, 289, 290, 291, 292, 295, 297, 298, 299, 300, 303, 304, 305, 306, 308, 312, 314, 315, 316, 317, 318, 319, 323, 325, 328, 330, 334, 335, 336, 337, 339, 340, 345, 356, 357, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 381, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 417, 418, 419, 420, 423, 424, 425, 431, 434, 435, 436, 438, 439, 443, 444, 448, 451, 452, 453, 460, 461, 463, 464, 465, 466, 470, 471, 472, 474, 476, 480, 485, 486, 487, 490, 491, 492, 496, 498, 499, 502, 504, 508, 528, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 548, 549, 550, 551, 553, 554, 555, 557, 560, 561, 573, 574, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 593, 594, 595, 597, 602, 603, 604, 605, 606, 607, 609, 611, 614, 618, 651, 652, 658, 660, 661, 662, 665, 667, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 704, 705, 712, 714, 749, 750, 752, 753, 754, 755], "make": [0, 28, 48, 162, 170, 172, 186, 207, 209, 259, 268, 269, 270, 299, 322, 446, 453, 462, 498, 543, 550, 555, 562, 667, 674, 675, 678, 679, 680, 681, 704, 705, 706, 708, 712, 746, 750], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 115, 120, 121, 123, 130, 131, 132, 134, 135, 136, 137, 149, 153, 154, 160, 167, 177, 181, 186, 207, 209, 221, 259, 260, 261, 267, 283, 289, 290, 298, 308, 314, 315, 323, 326, 330, 331, 334, 335, 336, 337, 359, 362, 363, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 406, 407, 408, 409, 418, 423, 424, 429, 435, 443, 453, 462, 504, 528, 542, 615, 651, 652, 653, 662, 664, 667, 675, 678, 680, 681, 687, 688, 694, 704, 705, 708, 710, 711, 746, 749, 750, 751], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 115, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 149, 153, 154, 159, 162, 165, 167, 168, 170, 171, 174, 177, 180, 186, 207, 209, 211, 213, 214, 215, 216, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 244, 246, 247, 248, 251, 252, 256, 259, 260, 261, 262, 264, 266, 272, 273, 277, 278, 283, 288, 289, 291, 294, 296, 297, 299, 308, 309, 310, 311, 314, 315, 316, 318, 319, 320, 323, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 351, 352, 355, 359, 362, 363, 368, 370, 372, 373, 374, 377, 379, 380, 386, 388, 389, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 413, 418, 423, 424, 428, 430, 433, 434, 435, 436, 440, 443, 445, 446, 448, 453, 462, 463, 484, 485, 486, 487, 488, 490, 492, 495, 496, 497, 498, 499, 501, 503, 504, 507, 508, 526, 528, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 583, 589, 607, 610, 635, 643, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 670, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 693, 694, 703, 704, 708, 709, 710, 711, 714, 715, 737, 746, 747, 750, 751], "store": [0, 167, 170, 172, 186, 207, 209, 259, 260, 261, 277, 278, 332, 435, 453, 462, 504, 662, 674, 675, 677, 679, 680, 704, 705, 706, 708, 709, 712, 714, 748, 750, 755], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 147, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 165, 167, 168, 170, 172, 173, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 259, 260, 261, 262, 264, 266, 269, 270, 271, 272, 274, 276, 277, 278, 283, 288, 289, 290, 293, 298, 299, 303, 304, 305, 306, 308, 314, 315, 317, 319, 320, 322, 323, 325, 326, 328, 329, 330, 331, 333, 335, 336, 337, 343, 345, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 377, 379, 380, 381, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 418, 419, 420, 421, 423, 424, 425, 429, 430, 433, 434, 435, 436, 439, 443, 444, 446, 451, 453, 460, 461, 462, 463, 468, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 581, 583, 592, 620, 626, 641, 652, 661, 662, 667, 671, 672, 673, 675, 678, 679, 680, 684, 685, 686, 689, 694, 704, 706, 710, 711, 713, 714, 715, 747, 750, 751, 753, 755], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 194, 195, 200, 201, 203, 204, 207, 209, 210, 211, 213, 214, 215, 216, 219, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 438, 439, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 576, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 595, 597, 598, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 617, 618, 620, 625, 626, 628, 629, 631, 632, 633, 634, 635, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 688, 689, 693, 699, 703, 706, 708, 709, 712, 713, 719, 724, 725, 730, 731, 736, 737, 738, 739, 740, 742, 743, 746, 749, 750], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 171, 174, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 209, 211, 216, 219, 221, 222, 228, 229, 230, 231, 232, 233, 237, 238, 239, 241, 245, 246, 248, 250, 251, 254, 256, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 434, 439, 440, 443, 444, 445, 446, 448, 451, 452, 453, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 583, 591, 592, 595, 597, 607, 610, 615, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 661, 662, 665, 667, 670, 671, 672, 674, 675, 676, 678, 679, 680, 684, 685, 686, 687, 688, 689, 704, 705, 706, 708, 710, 712, 713, 714, 715, 716, 718, 719, 720, 725, 726, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 753, 755], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 116, 117, 118, 120, 125, 126, 127, 133, 138, 139, 142, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 171, 174, 178, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 205, 206, 209, 211, 216, 219, 221, 222, 228, 229, 230, 231, 232, 233, 237, 238, 241, 245, 248, 250, 254, 256, 261, 264, 265, 266, 267, 268, 272, 273, 277, 278, 286, 287, 288, 290, 291, 292, 293, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 316, 317, 319, 322, 324, 325, 326, 328, 331, 332, 333, 334, 336, 338, 339, 343, 350, 351, 352, 355, 356, 357, 361, 364, 365, 366, 367, 369, 371, 375, 378, 379, 380, 381, 390, 391, 392, 396, 397, 398, 399, 405, 410, 411, 416, 417, 418, 419, 420, 425, 426, 427, 429, 430, 434, 439, 440, 444, 445, 446, 448, 451, 452, 453, 463, 464, 465, 466, 470, 471, 472, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 580, 591, 592, 595, 597, 610, 615, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 665, 670, 671, 674, 675, 676, 678, 679, 680, 684, 685, 686, 687, 688, 704, 705, 706, 712, 713, 714, 715, 716, 718, 719, 720, 725, 726, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 753, 755], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 120, 125, 127, 133, 138, 149, 150, 162, 167, 171, 174, 176, 179, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 206, 221, 228, 233, 254, 256, 261, 289, 308, 332, 334, 336, 351, 352, 368, 379, 380, 397, 399, 405, 410, 418, 419, 421, 435, 439, 440, 480, 566, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 642, 643, 644, 645, 665, 671, 674, 677, 678, 680, 683, 684, 686, 688, 689, 696, 699, 707, 708, 710, 711, 714, 716, 718, 746, 747, 748, 749, 750, 751, 753, 754], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 133, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 206, 221, 228, 233, 256, 261, 272, 332, 334, 336, 351, 352, 379, 380, 405, 439, 523, 583, 592, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 674, 712, 713, 714, 716, 748, 750, 753, 755], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 115, 116, 117, 118, 120, 121, 125, 126, 127, 128, 129, 133, 134, 136, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 171, 174, 178, 179, 181, 184, 185, 186, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 202, 205, 209, 211, 216, 219, 228, 229, 230, 231, 232, 237, 238, 239, 241, 245, 248, 250, 251, 256, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 312, 313, 316, 317, 318, 319, 322, 324, 325, 328, 329, 331, 332, 333, 334, 336, 338, 339, 340, 343, 350, 351, 352, 355, 356, 357, 358, 361, 363, 364, 365, 366, 367, 369, 371, 375, 379, 380, 389, 390, 391, 392, 393, 397, 398, 399, 400, 401, 405, 406, 408, 410, 411, 412, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 439, 440, 444, 445, 446, 448, 451, 452, 453, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 572, 580, 583, 591, 592, 595, 597, 607, 610, 615, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 661, 662, 665, 667, 670, 671, 672, 674, 675, 676, 678, 679, 680, 684, 685, 686, 687, 688, 689, 708, 710, 712, 713, 714, 719, 720, 725, 726, 731, 732, 746, 747, 748, 749, 750, 753, 755], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 171, 174, 177, 178, 179, 184, 185, 186, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 206, 209, 216, 219, 228, 229, 230, 231, 232, 233, 237, 238, 239, 241, 245, 248, 250, 251, 254, 256, 261, 262, 265, 266, 267, 268, 272, 273, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 320, 323, 324, 325, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 343, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 381, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 439, 440, 443, 444, 445, 446, 448, 451, 452, 453, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 497, 499, 500, 501, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 567, 568, 569, 572, 580, 591, 592, 595, 597, 607, 610, 615, 617, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 662, 665, 667, 671, 672, 675, 678, 684, 685, 686, 687, 689, 712, 713, 714, 746, 748, 749, 750, 753, 755], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 177, 178, 181, 184, 185, 186, 189, 190, 191, 200, 205, 216, 219, 228, 231, 232, 237, 238, 239, 241, 248, 250, 251, 256, 267, 272, 278, 282, 283, 284, 285, 286, 287, 288, 289, 293, 295, 298, 299, 301, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 323, 325, 328, 329, 330, 333, 335, 336, 337, 338, 340, 343, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 379, 380, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 443, 444, 445, 446, 448, 451, 452, 453, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 493, 498, 501, 517, 518, 519, 520, 530, 554, 555, 561, 564, 565, 568, 569, 572, 583, 591, 592, 595, 597, 607, 610, 615, 617, 622, 623, 624, 625, 628, 629, 631, 632, 635, 640, 644, 646, 647, 648, 649, 650, 653, 662, 665, 667, 671, 672, 678, 685, 686, 687, 712, 713, 719, 725, 731, 746, 748, 749, 750, 752, 753], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 115, 116, 117, 121, 123, 124, 127, 128, 129, 130, 131, 132, 135, 136, 137, 147, 148, 152, 153, 154, 155, 171, 177, 179, 180, 181, 184, 185, 219, 221, 240, 244, 283, 286, 287, 289, 295, 297, 301, 303, 304, 305, 306, 308, 312, 314, 315, 319, 322, 323, 325, 328, 330, 331, 333, 334, 335, 337, 338, 351, 352, 356, 357, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 379, 380, 387, 389, 390, 391, 393, 395, 396, 399, 400, 402, 403, 404, 407, 408, 409, 416, 417, 420, 423, 424, 425, 434, 439, 443, 445, 446, 448, 451, 452, 463, 470, 472, 476, 477, 478, 479, 485, 486, 490, 491, 495, 496, 528, 529, 533, 534, 543, 550, 551, 555, 556, 557, 567, 573, 574, 580, 582, 583, 584, 585, 586, 587, 593, 594, 595, 597, 602, 603, 604, 605, 606, 609, 611, 614, 618, 635, 665, 672, 675, 688, 689, 712, 713, 714, 749, 750, 751, 755], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 145, 147, 182, 183, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 205, 206, 225, 234, 235, 236, 242, 243, 249, 258, 263, 265, 273, 274, 275, 279, 293, 297, 307, 320, 321, 322, 338, 343, 344, 346, 347, 348, 349, 360, 361, 374, 376, 382, 383, 384, 414, 416, 421, 422, 447, 449, 450, 454, 455, 456, 457, 458, 459, 467, 468, 469, 478, 571, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 650, 697, 700, 701, 704, 706, 712, 714, 715, 717, 719, 721, 722, 723, 725, 727, 728, 729, 731, 733, 734, 735, 737, 738, 740, 742, 743], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 143, 149, 153, 154, 162, 168, 170, 172, 177, 180, 185, 211, 216, 217, 228, 241, 247, 256, 277, 283, 291, 295, 300, 302, 314, 315, 316, 323, 324, 330, 335, 337, 359, 362, 364, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 413, 418, 423, 424, 436, 443, 446, 452, 463, 472, 485, 490, 523, 540, 543, 549, 555, 583, 667, 674, 675, 678, 679, 680, 681, 704, 705, 706, 708, 710, 712, 747, 750, 753, 755], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 116, 117, 140, 148, 152, 155, 164, 166, 167, 168, 171, 172, 184, 209, 264, 286, 287, 289, 291, 301, 345, 356, 357, 365, 366, 367, 369, 388, 390, 391, 396, 399, 417, 418, 420, 425, 432, 435, 436, 439, 451, 566, 577, 578, 579, 584, 585, 586, 599, 600, 601, 603, 604, 605, 606, 610, 611, 614, 618, 643, 653, 655, 656, 657, 659, 676, 677, 678, 680, 750], "determin": [3, 16, 45, 61, 140, 289, 336, 489, 534, 550, 555, 675, 679, 680, 688, 705, 755], "two": [3, 14, 23, 50, 61, 97, 112, 118, 119, 124, 125, 216, 228, 245, 256, 278, 300, 324, 336, 392, 401, 463, 492, 540, 549, 588, 661, 672, 675, 683, 684, 685, 686, 704, 705, 708, 710, 746, 750], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 120, 125, 138, 143, 159, 160, 165, 167, 172, 178, 180, 181, 201, 203, 213, 214, 215, 218, 226, 227, 242, 247, 251, 252, 253, 260, 271, 274, 276, 278, 293, 295, 308, 309, 310, 311, 313, 319, 320, 322, 324, 326, 332, 336, 338, 341, 342, 350, 401, 410, 413, 428, 429, 433, 435, 444, 446, 448, 460, 471, 477, 485, 488, 494, 500, 504, 507, 528, 540, 545, 546, 547, 549, 550, 555, 556, 561, 572, 591, 617, 651, 652, 664, 675, 677, 678, 680, 681, 685, 694, 695, 704, 705, 706, 708, 710, 712, 714, 715, 749, 750, 752, 755], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 122, 124, 126, 127, 134, 138, 149, 167, 172, 180, 185, 187, 192, 240, 244, 246, 248, 260, 278, 291, 308, 313, 319, 324, 345, 351, 352, 363, 364, 379, 380, 394, 398, 399, 406, 410, 418, 435, 452, 471, 476, 477, 485, 502, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 542, 547, 556, 615, 643, 652, 654, 655, 656, 657, 658, 659, 660, 662, 665, 667, 675, 678, 684, 685, 687, 704, 705, 706, 708, 710, 712, 747, 749, 750, 752, 753, 755], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 115, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 141, 142, 143, 147, 152, 153, 154, 177, 181, 184, 210, 216, 217, 228, 246, 247, 269, 282, 283, 286, 287, 295, 298, 312, 314, 315, 316, 323, 324, 325, 330, 335, 337, 350, 351, 352, 359, 362, 370, 372, 373, 377, 378, 379, 380, 381, 387, 389, 393, 394, 395, 398, 402, 403, 404, 406, 407, 408, 409, 412, 413, 416, 420, 423, 424, 443, 448, 451, 455, 457, 458, 459, 474, 475, 476, 477, 478, 479, 481, 482, 485, 487, 490, 491, 494, 495, 503, 513, 514, 515, 516, 522, 523, 524, 527, 528, 529, 530, 540, 545, 549, 550, 552, 555, 556, 658, 660, 675, 685, 708, 710, 712, 719, 721, 725, 727, 731, 733, 737, 738, 747, 750], "out": [3, 48, 92, 159, 162, 167, 168, 171, 251, 307, 322, 338, 428, 435, 436, 439, 476, 550, 555, 592, 662, 671, 679, 680, 704, 708, 746, 750, 751], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 113, 116, 117, 118, 122, 124, 125, 127, 129, 133, 138, 140, 141, 142, 144, 148, 149, 150, 151, 152, 155, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 184, 185, 186, 203, 209, 210, 212, 217, 221, 229, 230, 231, 232, 233, 237, 238, 239, 240, 244, 248, 250, 251, 253, 262, 264, 272, 276, 278, 286, 287, 288, 289, 290, 291, 294, 295, 296, 298, 299, 303, 304, 305, 306, 316, 318, 319, 322, 323, 324, 325, 327, 328, 334, 335, 336, 337, 338, 350, 351, 352, 356, 357, 359, 362, 364, 365, 366, 367, 368, 369, 371, 377, 379, 380, 385, 386, 390, 391, 392, 394, 396, 397, 399, 401, 405, 410, 412, 417, 418, 419, 420, 425, 428, 431, 435, 436, 438, 439, 444, 448, 451, 452, 460, 463, 464, 465, 466, 470, 472, 474, 475, 480, 487, 490, 495, 496, 497, 498, 504, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 534, 537, 540, 543, 549, 550, 555, 556, 566, 575, 583, 596, 607, 628, 629, 631, 632, 633, 634, 651, 652, 662, 665, 667, 673, 675, 678, 679, 680, 681, 683, 684, 685, 686, 687, 704, 709, 712, 713, 714, 715, 716, 718, 747, 749, 750, 751, 753], "ha": [3, 19, 57, 58, 61, 64, 70, 97, 179, 194, 221, 256, 269, 290, 331, 334, 336, 338, 340, 491, 496, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 527, 628, 680, 689, 704, 705, 708, 709, 712, 737, 739, 747, 749, 750, 752, 753, 754], "call": [3, 11, 15, 17, 28, 61, 124, 125, 138, 157, 168, 180, 222, 289, 299, 336, 410, 436, 464, 507, 547, 667, 693, 695, 703, 704, 705, 708, 710, 712, 749, 750, 752], "otherwis": [3, 19, 44, 50, 51, 61, 134, 141, 162, 168, 248, 262, 272, 289, 290, 317, 324, 333, 336, 392, 406, 412, 421, 436, 480, 485, 675, 678, 688, 705, 709, 711, 712], "nan_as_nul": [4, 58, 59, 71, 100, 209, 221, 231, 278, 334, 375, 446, 665, 753], "gpu": [4, 16, 17, 94, 120, 278, 307, 384, 652, 675, 696, 705, 706, 707, 708, 710, 711, 712, 746, 750, 751, 752, 755], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 268, 269, 270, 278, 388, 607, 610, 677, 678, 694, 749, 750, 751], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 113, 120, 125, 127, 134, 143, 162, 168, 170, 172, 213, 214, 215, 219, 226, 227, 247, 278, 291, 309, 310, 311, 328, 336, 341, 342, 363, 399, 406, 413, 436, 498, 562, 572, 583, 591, 617, 665, 667, 673, 674, 675, 678, 679, 680, 681, 687, 708, 742, 743, 750, 753], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 120, 124, 127, 129, 133, 134, 138, 143, 152, 167, 171, 184, 213, 247, 272, 295, 298, 308, 309, 317, 318, 328, 329, 333, 336, 345, 358, 371, 388, 396, 399, 401, 405, 406, 410, 413, 420, 435, 439, 446, 448, 451, 472, 476, 485, 498, 500, 507, 523, 525, 528, 530, 535, 544, 547, 550, 555, 566, 572, 589, 591, 597, 610, 617, 643, 651, 652, 667, 671, 675, 677, 678, 680, 685, 687, 697, 699, 700, 701, 704, 705, 706, 708, 709, 710, 711, 712, 714, 719, 725, 731, 737, 742, 746, 747, 748, 749, 750, 752, 753, 755], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 162, 165, 167, 168, 175, 177, 178, 179, 180, 181, 185, 204, 230, 250, 252, 255, 264, 273, 277, 461, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 581, 583, 584, 585, 586, 589, 591, 597, 603, 604, 605, 606, 607, 610, 611, 614, 615, 617, 618, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 678, 681, 686, 687, 688, 689, 693, 694, 695, 697, 700, 701, 703, 704, 705, 708, 710, 711, 713, 714, 747, 748, 749, 751, 753, 755], "constant": [4, 652, 653, 665], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 141, 142, 149, 150, 153, 154, 159, 160, 163, 169, 171, 177, 213, 214, 215, 226, 227, 267, 283, 309, 310, 311, 314, 315, 316, 323, 330, 335, 337, 340, 341, 342, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 412, 418, 423, 424, 428, 429, 431, 438, 443, 671, 678, 704, 707, 710, 753], "Will": [4, 168, 172, 278, 436, 667], "rangeindex": [4, 23, 70, 144, 147, 149, 170, 172, 278, 293, 355, 416, 418, 667, 685, 708], "inform": [4, 15, 19, 43, 61, 70, 167, 289, 290, 316, 336, 435, 471, 472, 652, 678, 687, 704, 705, 707, 708, 712, 750, 752, 753], "part": [4, 61, 172, 336, 540, 549, 592, 704, 705, 713, 719, 725, 731], "provid": [4, 15, 16, 21, 22, 36, 54, 67, 125, 133, 134, 138, 162, 169, 179, 209, 222, 264, 268, 269, 272, 277, 278, 289, 291, 308, 328, 405, 406, 410, 438, 463, 476, 499, 544, 560, 561, 580, 662, 665, 678, 681, 689, 694, 699, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 746, 748, 749, 750, 753, 754, 755], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 124, 125, 128, 138, 144, 149, 179, 180, 182, 183, 207, 208, 209, 224, 245, 248, 259, 262, 263, 264, 269, 271, 272, 278, 284, 285, 291, 317, 324, 325, 326, 336, 344, 361, 396, 400, 410, 418, 449, 450, 462, 480, 571, 662, 675, 678, 684, 689, 694, 708, 749, 751], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 167, 171, 172, 174, 177, 178, 179, 181, 184, 185, 190, 193, 196, 197, 199, 202, 205, 221, 222, 230, 231, 232, 233, 237, 238, 246, 248, 250, 251, 256, 261, 264, 265, 266, 267, 268, 269, 273, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 350, 351, 352, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 377, 379, 380, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 435, 439, 440, 443, 444, 445, 446, 448, 451, 452, 453, 457, 458, 459, 463, 464, 465, 466, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 581, 583, 584, 585, 586, 588, 589, 591, 592, 595, 597, 603, 604, 605, 606, 607, 610, 611, 614, 615, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 661, 662, 665, 667, 670, 671, 674, 675, 676, 678, 679, 680, 684, 685, 686, 687, 688, 689, 706, 708, 710, 712, 713, 714, 719, 725, 731, 746, 747, 748, 749, 750, 753, 755], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 122, 138, 152, 158, 162, 168, 172, 178, 184, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 205, 206, 264, 278, 292, 302, 325, 326, 340, 356, 357, 378, 381, 394, 410, 420, 427, 436, 444, 451, 453, 480, 487, 488, 494, 504, 518, 524, 529, 533, 535, 536, 537, 543, 550, 551, 552, 555, 557, 597, 608, 613, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 649, 658, 660, 675, 678, 687, 706, 712, 746, 748, 752, 753], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 116, 117, 118, 122, 126, 127, 129, 134, 138, 155, 156, 168, 170, 171, 174, 185, 187, 192, 204, 221, 229, 230, 231, 232, 233, 237, 238, 241, 246, 248, 254, 255, 267, 272, 277, 278, 289, 291, 299, 308, 313, 324, 331, 334, 336, 340, 345, 351, 352, 363, 364, 379, 380, 388, 390, 391, 394, 398, 399, 406, 410, 425, 426, 436, 439, 440, 446, 452, 453, 461, 463, 473, 485, 528, 550, 553, 555, 580, 589, 610, 652, 654, 655, 656, 657, 658, 659, 660, 662, 675, 677, 678, 681, 687, 688, 693, 699, 704, 705, 711, 712, 713, 714, 719, 725, 731, 737, 738, 740, 742, 749, 750, 751, 753], "forc": [4, 168, 436, 678, 712], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 115, 118, 121, 122, 123, 125, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 153, 154, 162, 167, 168, 170, 176, 177, 178, 180, 182, 183, 185, 218, 222, 229, 230, 231, 232, 233, 237, 238, 262, 263, 282, 283, 290, 298, 299, 308, 314, 315, 317, 319, 322, 323, 330, 335, 336, 337, 345, 359, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 377, 389, 393, 394, 395, 397, 401, 402, 403, 404, 405, 407, 408, 409, 418, 419, 423, 424, 435, 436, 443, 444, 445, 448, 449, 450, 452, 463, 484, 490, 491, 496, 497, 502, 504, 528, 534, 537, 550, 555, 558, 559, 563, 580, 581, 584, 585, 586, 589, 595, 603, 604, 605, 606, 611, 614, 618, 652, 662, 667, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 693, 699, 704, 705, 707, 708, 710, 712, 713, 719, 725, 731, 747, 750, 752, 753], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 115, 118, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 168, 177, 179, 272, 278, 283, 314, 315, 317, 323, 330, 335, 336, 337, 343, 350, 359, 361, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 436, 443, 485, 493, 504, 530, 542, 544, 589, 675, 677, 679, 680, 689, 705, 708, 712, 746, 747, 749, 750], "allow": [4, 15, 21, 50, 51, 70, 94, 118, 125, 138, 167, 168, 278, 289, 291, 324, 410, 435, 436, 504, 662, 678, 679, 680, 683, 684, 685, 686, 704, 706, 708, 710, 712, 714, 715, 748, 750, 752, 755], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 124, 128, 133, 143, 144, 161, 163, 165, 168, 169, 171, 172, 173, 174, 209, 221, 247, 252, 254, 267, 268, 269, 270, 272, 278, 291, 331, 334, 363, 375, 396, 400, 405, 413, 430, 431, 433, 434, 436, 438, 439, 440, 484, 509, 510, 525, 532, 558, 559, 563, 565, 567, 643, 664, 677, 678, 687, 688, 708, 714, 716, 718, 737, 739, 741, 742, 744, 745, 747, 751, 753], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 120, 129, 133, 169, 171, 209, 221, 231, 237, 278, 307, 308, 313, 334, 351, 352, 363, 375, 379, 380, 405, 438, 439, 446, 448, 490, 662, 665, 675, 688, 748, 750, 753], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 116, 117, 120, 128, 133, 141, 148, 150, 152, 155, 162, 168, 171, 174, 184, 209, 217, 218, 219, 221, 278, 286, 287, 289, 301, 303, 304, 305, 306, 317, 319, 322, 328, 333, 334, 338, 351, 352, 356, 357, 365, 366, 367, 369, 375, 379, 380, 382, 383, 384, 390, 391, 400, 405, 412, 417, 419, 420, 421, 425, 430, 436, 439, 440, 447, 451, 463, 470, 472, 474, 477, 480, 485, 494, 504, 528, 575, 589, 595, 596, 597, 665, 675, 688, 704, 705, 708, 710, 714, 751], "leav": [4, 58, 71, 92, 209, 221, 278, 334, 473, 671, 681, 688, 694, 750], "build": [4, 260, 707, 750], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 171, 174, 177, 178, 179, 181, 184, 185, 265, 268, 273, 278, 283, 284, 285, 286, 287, 290, 291, 298, 303, 304, 305, 306, 308, 314, 315, 316, 317, 322, 323, 324, 328, 330, 335, 336, 337, 339, 340, 343, 351, 352, 356, 357, 359, 361, 362, 364, 365, 366, 369, 370, 372, 373, 375, 377, 379, 380, 388, 389, 390, 391, 393, 395, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 412, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 429, 440, 443, 444, 451, 452, 583, 592, 607, 610, 615, 665, 669, 670, 671, 676, 678, 679, 680, 687, 689, 712, 713, 746, 747, 749, 750, 753, 755], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 113, 134, 144, 149, 158, 162, 167, 170, 172, 174, 180, 204, 208, 223, 241, 250, 255, 262, 272, 278, 336, 340, 406, 418, 427, 435, 440, 461, 477, 498, 569, 571, 576, 592, 598, 666, 667, 673, 674, 675, 677, 678, 679, 680, 681, 687, 708, 709, 712, 713, 742, 743, 749, 750], "val": [4, 23, 64, 158, 174, 340, 427, 440, 592, 682, 712], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 115, 118, 119, 121, 123, 124, 130, 131, 132, 135, 136, 137, 138, 153, 154, 158, 168, 174, 177, 207, 229, 230, 231, 232, 233, 237, 238, 262, 283, 292, 302, 314, 315, 323, 330, 335, 337, 340, 351, 352, 359, 362, 365, 366, 369, 370, 372, 373, 377, 379, 380, 389, 392, 393, 395, 396, 402, 403, 404, 407, 408, 409, 410, 423, 424, 427, 436, 440, 443, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 584, 585, 586, 588, 603, 604, 605, 606, 611, 614, 618, 675, 678, 683, 684, 685, 686, 687, 688, 706, 708, 712, 713, 737, 741, 748, 750, 751], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 116, 117, 118, 120, 125, 126, 127, 128, 138, 139, 141, 144, 147, 148, 152, 155, 156, 158, 168, 174, 178, 184, 185, 211, 221, 233, 246, 250, 254, 265, 273, 277, 278, 282, 286, 287, 291, 303, 304, 305, 306, 308, 313, 316, 317, 324, 333, 334, 339, 340, 343, 355, 356, 357, 361, 364, 365, 366, 367, 369, 375, 390, 391, 396, 397, 398, 399, 400, 401, 410, 411, 412, 416, 417, 420, 425, 426, 427, 434, 436, 439, 440, 444, 451, 452, 465, 466, 470, 471, 472, 488, 503, 509, 510, 515, 520, 531, 539, 592, 625, 628, 631, 632, 646, 647, 648, 650, 662, 667, 674, 687, 705, 710, 711, 719, 725, 731, 746, 750, 751, 753, 755], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 128, 158, 170, 172, 174, 178, 277, 278, 317, 340, 343, 400, 401, 427, 440, 444, 463, 498, 662, 670, 675, 678, 681, 704, 710, 712, 746, 750, 753, 755], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 61, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 118, 119, 120, 121, 125, 127, 128, 129, 133, 138, 139, 141, 142, 144, 147, 148, 157, 158, 160, 161, 178, 179, 185, 189, 190, 191, 195, 205, 216, 228, 230, 233, 246, 250, 256, 267, 272, 278, 283, 284, 285, 288, 289, 292, 297, 300, 301, 303, 304, 305, 306, 308, 312, 313, 316, 317, 318, 324, 325, 328, 333, 336, 340, 343, 350, 351, 352, 355, 361, 364, 366, 367, 371, 378, 379, 380, 381, 392, 393, 399, 400, 405, 410, 411, 412, 416, 417, 419, 427, 429, 444, 445, 446, 448, 452, 464, 465, 466, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 483, 486, 487, 488, 489, 491, 499, 500, 501, 507, 513, 518, 546, 547, 552, 553, 561, 564, 565, 572, 588, 591, 592, 595, 597, 607, 615, 617, 622, 623, 624, 625, 628, 629, 631, 632, 635, 644, 653, 662, 667, 671, 678, 683, 684, 685, 686, 687, 689, 708, 712, 713, 746, 748, 749, 750, 753, 755], "insert": [4, 64, 129, 141, 158, 340, 401, 412, 427, 554, 694, 708, 751], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 128, 133, 139, 141, 144, 147, 174, 178, 250, 265, 273, 278, 317, 329, 333, 340, 355, 358, 361, 400, 401, 405, 411, 412, 416, 434, 440, 444, 483, 488, 525, 625, 628, 670, 675, 676, 679, 680, 687, 712, 746, 749, 750, 752, 753], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 128, 139, 141, 144, 147, 174, 178, 187, 189, 190, 191, 192, 195, 198, 200, 205, 206, 265, 273, 278, 300, 302, 303, 304, 305, 306, 308, 317, 320, 333, 355, 361, 400, 401, 411, 412, 416, 434, 440, 444, 488, 497, 504, 509, 510, 566, 592, 597, 622, 623, 624, 625, 628, 633, 634, 638, 640, 644, 645, 646, 647, 648, 649, 650, 687, 708, 712, 746, 750], "13": [4, 44, 55, 84, 94, 128, 141, 144, 158, 178, 300, 302, 317, 320, 329, 333, 355, 358, 400, 401, 412, 427, 434, 444, 488, 646, 647, 648, 650, 712, 719, 725, 731], "14": [4, 15, 70, 94, 100, 128, 141, 144, 158, 178, 320, 333, 355, 375, 400, 412, 427, 444, 488, 646, 647, 648, 650, 712, 750], "via": [4, 36, 138, 167, 308, 410, 435, 472, 696, 708, 712, 746, 749], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 120, 133, 138, 163, 169, 173, 183, 207, 209, 221, 240, 244, 259, 277, 278, 290, 291, 308, 334, 351, 352, 375, 379, 380, 405, 410, 431, 438, 450, 453, 462, 662, 665, 678, 687, 704, 706, 750, 751, 753, 755], "datetim": [4, 36, 47, 118, 120, 128, 133, 168, 178, 186, 188, 193, 196, 197, 199, 201, 202, 206, 308, 320, 400, 405, 436, 444, 453, 621, 627, 636, 637, 639, 642, 645, 670, 675, 676, 679, 680, 683, 684, 686, 687, 708, 712, 748, 749, 750, 751, 755], "timedelta": [4, 118, 133, 405, 454, 646, 748, 750], "t0": 4, "strptime": [4, 120, 687, 712], "2018": [4, 47, 55, 84, 120, 128, 248, 329, 358, 400, 633, 634, 670, 675, 676, 679, 680, 712], "07": [4, 120, 124, 128, 133, 178, 189, 190, 191, 205, 400, 405, 444, 622, 623, 624, 625, 635, 644], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 124, 128, 133, 178, 186, 187, 192, 193, 195, 196, 197, 199, 200, 201, 202, 282, 308, 320, 339, 351, 352, 379, 380, 400, 405, 444, 453, 572, 591, 617, 620, 626, 627, 636, 637, 639, 640, 641, 642, 646, 647, 648, 649, 650, 670, 675, 676, 679, 680, 712, 753, 755], "y": [4, 15, 16, 17, 44, 120, 127, 147, 162, 206, 250, 317, 396, 399, 416, 477, 488, 525, 540, 549, 568, 643, 645, 687, 708, 712, 742, 744, 745, 747, 750], "m": [4, 120, 128, 168, 172, 178, 187, 192, 198, 201, 400, 436, 444, 498, 525, 620, 626, 638, 640, 641, 643, 646, 647, 648, 650, 678, 687, 706, 712, 746, 748, 752], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 115, 120, 121, 123, 127, 130, 131, 132, 135, 136, 137, 138, 141, 144, 149, 153, 154, 159, 162, 177, 178, 179, 187, 188, 189, 190, 191, 192, 201, 205, 251, 272, 278, 283, 297, 298, 308, 313, 314, 315, 317, 323, 330, 335, 337, 359, 361, 362, 370, 372, 373, 377, 389, 393, 395, 396, 399, 401, 402, 403, 404, 407, 408, 409, 410, 412, 418, 423, 424, 428, 434, 443, 444, 446, 463, 483, 485, 486, 488, 490, 496, 503, 525, 528, 545, 564, 565, 620, 621, 622, 623, 624, 626, 641, 643, 644, 662, 687, 689, 708, 712, 746, 750, 753], "h": [4, 111, 178, 187, 192, 193, 201, 388, 444, 488, 528, 620, 626, 627, 641, 708, 712], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 118, 119, 126, 127, 134, 138, 141, 142, 149, 151, 159, 162, 168, 170, 172, 178, 180, 187, 192, 201, 202, 230, 245, 248, 278, 282, 284, 285, 290, 291, 292, 295, 297, 298, 299, 303, 304, 305, 306, 308, 313, 316, 317, 318, 320, 322, 324, 325, 326, 334, 336, 343, 350, 356, 357, 363, 371, 381, 392, 398, 399, 406, 410, 412, 418, 419, 421, 428, 436, 444, 446, 448, 453, 464, 465, 466, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 580, 591, 592, 597, 610, 617, 620, 625, 626, 628, 629, 631, 632, 634, 640, 641, 642, 646, 647, 648, 649, 650, 653, 662, 665, 667, 670, 671, 672, 674, 675, 678, 679, 680, 681, 687, 688, 704, 705, 706, 707, 708, 712, 713, 746, 748, 750, 752, 753, 754, 755], "id": [4, 16, 595, 597, 651, 652, 712, 747], "arang": [4, 17, 712, 750], "second": [4, 44, 97, 111, 128, 143, 157, 168, 187, 192, 200, 201, 247, 266, 317, 320, 388, 400, 413, 436, 454, 457, 620, 626, 640, 641, 646, 648, 675, 678, 681, 687, 708, 712], "x": [4, 5, 15, 16, 17, 44, 61, 73, 147, 162, 176, 250, 272, 289, 317, 336, 345, 363, 416, 463, 477, 540, 549, 552, 554, 568, 572, 591, 592, 610, 617, 643, 662, 675, 679, 680, 706, 710, 712, 713, 742, 744, 745, 747, 749, 750], "01": [4, 36, 128, 133, 134, 172, 178, 186, 188, 189, 190, 191, 193, 196, 197, 198, 199, 201, 202, 205, 206, 308, 400, 405, 406, 444, 453, 525, 567, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 649, 670, 675, 676, 679, 680, 747, 748, 753], "02": [4, 124, 128, 133, 178, 188, 189, 190, 191, 193, 197, 198, 202, 205, 320, 400, 405, 444, 453, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 637, 638, 642, 644, 670, 675, 676, 679, 680, 687, 712, 747], "03": [4, 47, 128, 134, 178, 188, 189, 190, 191, 198, 205, 320, 400, 406, 444, 453, 621, 622, 623, 624, 625, 629, 631, 632, 638, 643, 644, 649, 687], "04": [4, 46, 55, 75, 76, 84, 104, 105, 124, 128, 133, 178, 189, 190, 191, 201, 205, 329, 351, 352, 358, 379, 380, 400, 405, 444, 453, 620, 622, 623, 624, 625, 626, 641, 644, 687], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 113, 124, 128, 138, 140, 149, 151, 152, 157, 158, 159, 160, 162, 167, 170, 172, 178, 181, 184, 207, 209, 217, 218, 251, 259, 270, 278, 284, 285, 286, 287, 293, 303, 304, 305, 306, 312, 317, 318, 319, 325, 329, 336, 340, 343, 344, 358, 361, 396, 400, 410, 418, 420, 427, 428, 429, 435, 444, 451, 462, 463, 474, 475, 477, 478, 481, 485, 490, 492, 494, 496, 504, 528, 550, 555, 571, 581, 589, 592, 607, 608, 652, 661, 664, 670, 673, 674, 675, 677, 678, 679, 680, 681, 684, 704, 710, 712, 713, 746, 747, 749, 750, 753], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 129, 143, 145, 211, 242, 247, 268, 269, 270, 272, 274, 288, 289, 336, 388, 401, 413, 414, 610, 653, 671, 675, 678, 679, 680, 681, 687, 708, 712], "cat": [4, 134, 181, 326, 363, 406, 463, 464, 465, 466, 470, 471, 472, 491, 495, 504, 533, 551, 556, 557, 665, 694, 699, 712], "jump": [4, 129], "dog": [4, 74, 134, 181, 363, 406, 463, 490, 529, 712], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 116, 117, 118, 127, 128, 133, 134, 141, 148, 152, 155, 156, 160, 178, 179, 184, 189, 191, 195, 230, 233, 278, 286, 287, 303, 304, 305, 306, 308, 316, 317, 340, 343, 356, 357, 361, 365, 366, 369, 371, 390, 391, 399, 400, 405, 406, 412, 417, 420, 425, 426, 429, 444, 446, 448, 451, 474, 487, 488, 546, 595, 597, 622, 623, 624, 625, 628, 629, 631, 632, 635, 644, 662, 667, 689, 712, 746, 748, 750, 753, 755], "cow": [4, 44, 157, 317, 318, 350], "moo": 4, "occasion": [4, 705], "pdf": [4, 58, 171, 712, 748], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 162, 171, 177, 178, 179, 184, 185, 209, 222, 241, 251, 262, 265, 266, 267, 268, 272, 273, 278, 283, 284, 285, 286, 287, 291, 297, 298, 299, 303, 304, 305, 306, 308, 314, 315, 317, 323, 328, 330, 331, 332, 333, 335, 336, 337, 339, 343, 355, 356, 357, 359, 361, 362, 364, 365, 366, 369, 370, 372, 373, 375, 377, 388, 389, 390, 391, 393, 395, 396, 398, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 416, 417, 418, 420, 423, 424, 425, 426, 428, 430, 434, 443, 444, 445, 446, 451, 452, 463, 477, 485, 486, 488, 491, 496, 500, 502, 507, 513, 528, 530, 542, 547, 556, 564, 565, 568, 569, 572, 591, 592, 595, 597, 607, 610, 615, 617, 661, 662, 665, 667, 671, 672, 675, 678, 681, 684, 685, 686, 689, 710, 712, 713, 714, 715, 716, 718, 742, 743, 746, 748, 749, 750, 753, 755], "from_panda": [4, 228, 233, 256, 272, 583, 592, 712, 713, 714, 747, 748, 755], "attribut": [4, 36, 143, 180, 209, 247, 260, 269, 278, 308, 397, 413, 466, 684, 685, 686, 694, 708, 709, 712, 714, 719, 725, 731, 737, 742], "iloc": [4, 67, 278, 592, 712, 713, 750, 753], "select": [4, 36, 44, 55, 64, 68, 84, 86, 97, 106, 125, 167, 251, 278, 308, 317, 318, 329, 340, 343, 358, 361, 435, 677, 678, 679, 680, 694, 708, 747, 751], "posit": [4, 15, 64, 68, 111, 141, 146, 159, 222, 224, 251, 278, 289, 340, 343, 388, 412, 415, 428, 476, 503, 508, 511, 512, 528, 552, 553, 554, 567, 569, 589, 597, 610, 719, 725, 731, 751], "20": [4, 21, 40, 44, 50, 61, 68, 125, 126, 157, 167, 178, 221, 254, 278, 291, 317, 324, 334, 336, 343, 396, 397, 398, 435, 439, 444, 488, 548, 674, 712, 746, 747, 750], "30": [4, 21, 43, 44, 61, 63, 68, 125, 126, 128, 157, 187, 221, 278, 291, 316, 317, 334, 336, 339, 343, 396, 397, 398, 400, 439, 580, 625, 629, 631, 632, 633, 634, 635, 643, 674, 687, 712], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 115, 116, 117, 121, 126, 127, 128, 130, 131, 132, 133, 135, 136, 138, 147, 148, 151, 153, 154, 155, 156, 161, 171, 178, 179, 181, 185, 186, 211, 216, 219, 228, 239, 241, 245, 246, 248, 250, 254, 256, 259, 266, 273, 278, 283, 284, 285, 288, 289, 290, 291, 297, 298, 299, 307, 308, 312, 316, 317, 319, 322, 325, 328, 330, 333, 338, 339, 343, 355, 361, 363, 364, 365, 367, 369, 370, 371, 372, 373, 378, 381, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 416, 417, 419, 423, 424, 425, 426, 439, 444, 446, 452, 453, 464, 465, 466, 470, 471, 472, 473, 476, 478, 491, 494, 505, 506, 509, 510, 569, 607, 647, 648, 649, 650, 653, 665, 689, 712, 713, 737, 739, 742, 743, 746, 748, 750, 752, 753, 755], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 61, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 115, 121, 123, 125, 127, 130, 131, 132, 133, 135, 136, 137, 138, 142, 144, 147, 149, 153, 154, 159, 162, 177, 178, 179, 222, 251, 272, 278, 283, 297, 298, 308, 314, 315, 317, 323, 326, 328, 330, 332, 335, 336, 337, 343, 355, 359, 361, 362, 370, 372, 373, 377, 388, 389, 393, 395, 396, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 416, 418, 423, 424, 428, 434, 443, 444, 445, 446, 463, 477, 485, 491, 528, 534, 542, 564, 565, 572, 591, 592, 595, 597, 617, 643, 661, 662, 671, 672, 675, 681, 684, 689, 705, 707, 708, 712, 713, 714, 742, 746, 749, 750, 753], "integ": [4, 16, 19, 51, 56, 68, 124, 126, 129, 130, 134, 170, 172, 179, 200, 222, 229, 230, 231, 232, 233, 237, 238, 246, 259, 262, 264, 266, 272, 275, 277, 278, 290, 326, 330, 343, 350, 396, 398, 401, 402, 406, 462, 476, 477, 483, 489, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 529, 560, 625, 640, 662, 675, 678, 687, 688, 689, 704, 708, 710, 712, 713, 719, 722, 723, 725, 728, 729, 731, 734, 735, 748, 753], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 150, 153, 154, 177, 179, 194, 222, 266, 269, 278, 283, 308, 314, 315, 316, 323, 330, 335, 337, 343, 359, 361, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 419, 423, 424, 443, 477, 496, 502, 589, 628, 653, 675, 678, 679, 680, 687, 689, 706, 708, 710, 712, 719, 725, 731, 746, 747, 749, 750, 752], "9": [4, 32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 116, 117, 127, 128, 133, 134, 152, 155, 167, 178, 179, 184, 278, 300, 302, 303, 304, 305, 306, 308, 343, 356, 357, 361, 363, 365, 366, 369, 390, 391, 399, 400, 405, 406, 420, 425, 435, 444, 446, 451, 474, 480, 488, 518, 595, 597, 625, 628, 667, 689, 708, 712, 719, 720, 725, 726, 731, 732, 746, 748, 749, 750, 753, 755], "18": [4, 68, 128, 133, 134, 178, 187, 192, 195, 200, 278, 343, 400, 405, 406, 444, 488, 640, 649, 712, 746, 748], "slice": [4, 68, 224, 262, 272, 278, 343, 554, 694, 708, 712, 713], "both": [4, 8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 142, 153, 154, 177, 180, 204, 255, 260, 261, 278, 283, 295, 299, 308, 314, 315, 323, 324, 330, 335, 337, 343, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 461, 539, 567, 597, 667, 684, 685, 686, 693, 704, 705, 708, 710, 747, 748, 749, 750, 755], "set": [4, 11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 118, 122, 133, 144, 162, 172, 174, 180, 203, 216, 239, 245, 248, 253, 276, 278, 288, 291, 295, 298, 308, 318, 343, 350, 351, 352, 361, 379, 380, 394, 405, 439, 440, 448, 460, 463, 465, 466, 470, 472, 487, 490, 497, 533, 535, 537, 540, 543, 549, 550, 551, 555, 557, 566, 589, 597, 615, 651, 662, 671, 675, 678, 680, 681, 682, 687, 688, 704, 705, 706, 708, 709, 710, 712, 749, 752, 753, 754], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 61, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 125, 127, 128, 141, 147, 148, 161, 178, 179, 181, 189, 190, 191, 205, 216, 228, 256, 267, 278, 284, 285, 288, 303, 304, 305, 306, 308, 312, 313, 316, 317, 328, 336, 340, 343, 351, 352, 355, 361, 367, 371, 379, 380, 399, 400, 412, 416, 417, 444, 445, 446, 448, 465, 466, 470, 471, 474, 475, 476, 477, 478, 486, 487, 488, 489, 491, 498, 501, 564, 565, 592, 595, 597, 622, 623, 624, 625, 628, 629, 631, 632, 644, 646, 653, 662, 667, 671, 689, 704, 712, 719, 725, 731, 746, 748, 749, 750, 753, 755], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 116, 117, 127, 128, 133, 148, 152, 155, 157, 160, 162, 178, 179, 184, 185, 189, 191, 278, 295, 303, 304, 305, 306, 308, 312, 316, 317, 333, 340, 343, 356, 357, 361, 364, 365, 366, 369, 390, 391, 399, 400, 405, 417, 420, 425, 429, 444, 446, 451, 452, 474, 480, 488, 489, 504, 564, 565, 592, 595, 597, 622, 623, 624, 625, 628, 629, 644, 652, 653, 662, 667, 678, 683, 684, 685, 686, 689, 708, 712, 746, 748, 750, 753], "more": [4, 11, 14, 15, 19, 21, 36, 43, 68, 70, 138, 162, 167, 170, 172, 179, 187, 192, 201, 266, 278, 289, 290, 291, 308, 316, 343, 410, 435, 472, 494, 502, 550, 597, 620, 626, 641, 661, 667, 674, 675, 678, 679, 680, 681, 687, 689, 704, 705, 706, 707, 708, 709, 710, 712, 749, 750, 752, 753, 754], "loc": [4, 22, 44, 71, 224, 262, 272, 278, 317, 712, 747, 750], "boolean": [4, 51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 118, 120, 124, 125, 144, 171, 178, 194, 203, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 253, 262, 272, 276, 278, 288, 295, 346, 347, 348, 349, 350, 351, 352, 361, 365, 366, 369, 379, 380, 383, 392, 396, 397, 439, 444, 460, 475, 490, 495, 498, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 530, 534, 556, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 628, 629, 630, 631, 632, 633, 634, 665, 675, 678, 679, 680, 681, 709, 750, 751], "mask": [4, 75, 76, 86, 104, 105, 127, 262, 272, 278, 289, 333, 351, 352, 361, 379, 380, 383, 384, 399, 708, 753], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 115, 121, 123, 128, 130, 131, 132, 135, 136, 137, 153, 154, 162, 168, 172, 174, 177, 178, 278, 283, 284, 285, 289, 308, 314, 315, 319, 323, 330, 335, 337, 350, 351, 352, 359, 361, 362, 370, 372, 373, 377, 379, 380, 388, 389, 393, 395, 400, 402, 403, 404, 407, 408, 409, 421, 423, 424, 436, 440, 443, 444, 572, 591, 610, 617, 643, 651, 652, 653, 665, 670, 675, 676, 677, 678, 680, 681, 687, 694, 708, 710, 711, 742, 743, 744, 745, 747, 748, 749, 751, 755], "e": [4, 8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 115, 121, 122, 123, 127, 130, 131, 132, 133, 135, 136, 137, 144, 153, 154, 159, 162, 170, 172, 177, 178, 179, 251, 272, 278, 283, 297, 308, 314, 315, 323, 330, 335, 337, 359, 361, 362, 370, 372, 373, 377, 389, 393, 394, 395, 399, 402, 403, 404, 405, 407, 408, 409, 423, 424, 428, 443, 444, 446, 472, 488, 490, 491, 496, 502, 503, 528, 534, 537, 562, 564, 565, 643, 662, 667, 674, 675, 678, 679, 680, 681, 689, 704, 705, 706, 708, 710, 712, 714, 719, 725, 731, 750], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 118, 119, 122, 124, 127, 128, 133, 138, 143, 149, 157, 178, 180, 208, 209, 213, 214, 223, 247, 260, 262, 272, 278, 289, 292, 294, 296, 297, 300, 309, 310, 318, 327, 328, 336, 339, 345, 360, 386, 392, 394, 396, 399, 400, 405, 410, 413, 418, 421, 422, 444, 472, 476, 489, 513, 514, 515, 516, 522, 523, 524, 527, 540, 549, 566, 583, 588, 595, 597, 615, 651, 667, 674, 675, 678, 679, 680, 681, 687, 688, 693, 694, 695, 697, 700, 701, 704, 708, 710, 713, 714, 719, 725, 731, 737, 742, 747, 749, 750, 751, 753, 755], "iterrow": 4, "itertupl": 4, "to_dict": [4, 278], "transpos": [5, 279, 664, 694, 746, 751], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 125, 126, 129, 130, 131, 132, 135, 136, 137, 138, 144, 153, 154, 158, 159, 160, 167, 176, 177, 213, 214, 216, 226, 228, 241, 245, 246, 248, 251, 283, 284, 285, 288, 289, 291, 297, 299, 309, 310, 313, 314, 315, 323, 330, 335, 337, 341, 359, 362, 370, 372, 373, 377, 378, 381, 389, 393, 395, 396, 398, 401, 402, 403, 404, 407, 408, 409, 410, 423, 424, 427, 428, 429, 435, 443, 463, 464, 471, 472, 473, 504, 508, 545, 554, 704, 705, 706, 708, 712, 747, 750, 752], "ncol": [5, 176], "nrow": [5, 176, 675, 712, 750], "self": [5, 14, 61, 88, 111, 118, 141, 160, 167, 176, 185, 228, 256, 279, 288, 292, 336, 364, 388, 401, 412, 429, 435, 442, 452, 495, 556, 706, 708, 710], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 116, 117, 125, 127, 128, 138, 148, 149, 150, 152, 155, 162, 163, 168, 170, 175, 176, 181, 184, 222, 286, 287, 289, 291, 295, 299, 301, 302, 308, 313, 318, 322, 336, 356, 357, 363, 365, 367, 369, 390, 391, 397, 399, 400, 410, 417, 418, 419, 420, 425, 431, 436, 451, 456, 480, 490, 491, 495, 496, 502, 513, 534, 540, 543, 549, 550, 555, 566, 567, 568, 584, 585, 586, 589, 597, 603, 604, 605, 606, 607, 611, 614, 615, 618, 643, 653, 662, 664, 665, 674, 675, 678, 679, 680, 684, 687, 688, 704, 706, 708, 711, 712, 719, 725, 731, 749, 750, 751, 752, 753, 755], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 118, 124, 125, 127, 149, 150, 167, 172, 176, 209, 272, 312, 317, 324, 328, 336, 396, 397, 399, 418, 419, 435, 480, 511, 512, 540, 542, 550, 581, 583, 584, 585, 586, 597, 603, 604, 605, 606, 610, 611, 614, 618, 652, 665, 671, 678, 683, 684, 685, 686, 688, 693, 704, 705, 706, 708, 710, 713, 750, 753, 755], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 113, 115, 121, 123, 124, 125, 130, 131, 132, 135, 136, 137, 149, 150, 153, 154, 167, 168, 176, 177, 264, 283, 289, 314, 315, 319, 323, 330, 335, 337, 359, 362, 366, 370, 372, 373, 377, 387, 389, 393, 395, 396, 397, 402, 403, 404, 407, 408, 409, 418, 419, 423, 424, 435, 436, 443, 480, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 661, 673, 683, 684, 685, 686, 704, 752], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 127, 128, 130, 131, 132, 135, 136, 137, 138, 144, 148, 149, 150, 152, 153, 154, 155, 162, 167, 168, 174, 176, 177, 178, 180, 184, 185, 186, 209, 264, 278, 283, 286, 287, 288, 289, 290, 298, 301, 302, 314, 315, 323, 328, 330, 335, 337, 345, 356, 357, 359, 362, 363, 364, 365, 367, 369, 370, 372, 373, 377, 389, 390, 391, 393, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 409, 410, 417, 418, 419, 420, 423, 424, 425, 435, 436, 440, 443, 444, 451, 452, 453, 456, 480, 490, 491, 495, 496, 502, 508, 534, 540, 543, 549, 550, 566, 572, 581, 583, 584, 585, 586, 589, 591, 595, 603, 604, 605, 606, 611, 614, 615, 617, 618, 643, 652, 653, 661, 671, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 704, 705, 706, 708, 711, 712, 713, 746, 747, 750, 751, 753], "becaus": [5, 12, 13, 97, 176, 286, 287, 289, 597, 671, 706, 712, 747, 748, 750, 753, 755], "behavior": [5, 127, 176, 250, 272, 318, 399, 566, 652, 665, 675, 678, 687, 688, 704, 705, 708, 709, 712, 749, 750, 752, 754, 755], "absolut": [7, 209, 282, 597, 683, 684, 685, 686, 712, 755], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 118, 122, 127, 229, 230, 231, 232, 233, 237, 238, 254, 282, 308, 363, 365, 366, 369, 394, 399, 448, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 580, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 678, 688, 694, 705, 708, 710, 712, 713, 748, 749, 750, 751, 755], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 126, 128, 133, 134, 140, 170, 172, 239, 246, 261, 264, 269, 270, 272, 282, 284, 285, 295, 308, 313, 318, 324, 325, 336, 350, 351, 352, 363, 379, 380, 398, 400, 405, 406, 455, 457, 458, 459, 463, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 541, 542, 544, 546, 547, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 572, 575, 576, 577, 578, 579, 581, 584, 585, 586, 588, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 652, 662, 675, 678, 679, 680, 688, 704, 705, 706, 708, 709, 710, 712, 719, 725, 731, 746, 748, 749, 750, 752, 755], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 113, 116, 117, 118, 125, 133, 138, 149, 152, 155, 165, 172, 179, 184, 219, 250, 252, 272, 282, 288, 289, 295, 303, 304, 305, 306, 324, 329, 336, 339, 340, 356, 357, 358, 363, 365, 366, 369, 388, 390, 391, 405, 410, 418, 420, 421, 425, 433, 451, 485, 489, 491, 498, 528, 535, 537, 562, 566, 572, 583, 591, 592, 610, 615, 617, 651, 653, 661, 662, 664, 665, 673, 674, 675, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 694, 697, 700, 701, 704, 705, 706, 707, 708, 709, 711, 712, 713, 746, 749, 751, 753], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 116, 117, 125, 133, 149, 152, 155, 167, 184, 282, 292, 303, 304, 305, 306, 336, 356, 357, 365, 366, 369, 388, 390, 391, 405, 418, 420, 425, 435, 451, 484, 504, 558, 559, 563, 572, 591, 610, 615, 617, 662, 665, 675, 678, 697, 699, 700, 701, 712, 713, 751], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 113, 116, 117, 118, 128, 129, 143, 155, 162, 167, 168, 172, 178, 179, 207, 209, 217, 218, 247, 248, 259, 282, 290, 291, 297, 298, 308, 317, 318, 324, 329, 340, 345, 358, 378, 381, 390, 391, 400, 401, 413, 425, 435, 436, 444, 448, 462, 471, 485, 493, 497, 501, 502, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 532, 533, 542, 543, 550, 551, 555, 557, 558, 559, 562, 563, 564, 565, 580, 589, 620, 626, 641, 661, 663, 665, 668, 671, 672, 673, 675, 678, 681, 687, 688, 689, 694, 704, 705, 706, 707, 710, 712, 747, 748, 750, 752, 753, 754, 755], "33": [7, 30, 52, 246, 282, 712], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 118, 123, 133, 134, 137, 139, 142, 147, 148, 152, 171, 177, 184, 207, 221, 282, 289, 308, 314, 315, 322, 334, 336, 351, 352, 356, 357, 366, 375, 379, 380, 392, 395, 405, 406, 409, 411, 416, 417, 420, 439, 443, 448, 451, 473, 675, 688, 712, 748, 750, 752, 753], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 138, 146, 148, 149, 150, 152, 153, 154, 155, 157, 159, 177, 178, 184, 246, 251, 283, 286, 287, 290, 294, 296, 298, 303, 304, 305, 306, 314, 315, 317, 319, 323, 327, 328, 330, 335, 336, 337, 345, 356, 357, 359, 362, 365, 366, 367, 369, 370, 372, 373, 377, 386, 389, 390, 391, 393, 394, 395, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 415, 417, 418, 419, 420, 423, 424, 425, 428, 443, 444, 451, 463, 480, 581, 583, 589, 693, 712, 746, 750, 751], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 115, 116, 117, 121, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 147, 148, 149, 151, 152, 153, 154, 155, 157, 167, 172, 177, 179, 181, 184, 208, 222, 241, 243, 248, 250, 264, 266, 269, 270, 271, 272, 275, 283, 286, 287, 301, 314, 315, 317, 323, 330, 335, 336, 337, 356, 357, 359, 362, 365, 366, 367, 369, 370, 372, 373, 377, 389, 390, 391, 393, 395, 396, 397, 400, 401, 402, 403, 404, 407, 408, 409, 416, 417, 418, 420, 423, 424, 425, 435, 443, 451, 474, 667, 689, 694, 704, 705, 708], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 113, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 146, 153, 154, 177, 179, 251, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 396, 402, 403, 404, 407, 408, 409, 415, 423, 424, 443, 589, 673, 689], "get": [8, 41, 42, 43, 49, 56, 60, 61, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 104, 105, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 222, 240, 244, 250, 262, 272, 283, 314, 315, 316, 323, 330, 335, 336, 337, 344, 351, 352, 359, 362, 370, 372, 373, 374, 377, 379, 380, 389, 393, 395, 402, 403, 404, 407, 408, 409, 414, 423, 424, 443, 552, 581, 610, 619, 625, 665, 666, 675, 679, 680, 694, 709, 746, 750, 751], "addit": [8, 15, 51, 90, 121, 167, 172, 283, 366, 393, 435, 486, 513, 531, 539, 548, 675, 677, 678, 683, 684, 685, 686, 704, 705, 706, 710, 755], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 157, 177, 283, 298, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 463, 485, 581, 588, 589, 613, 616, 712, 746, 747], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 167, 172, 177, 283, 314, 315, 316, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 435, 443, 668, 674, 679, 680, 694, 710, 750, 755], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 115, 116, 117, 121, 123, 130, 131, 132, 135, 136, 137, 149, 153, 154, 155, 167, 177, 185, 187, 192, 201, 278, 283, 289, 297, 314, 315, 316, 317, 318, 319, 323, 328, 330, 335, 336, 337, 359, 362, 364, 370, 372, 373, 377, 389, 390, 391, 393, 395, 402, 403, 404, 407, 408, 409, 418, 423, 424, 425, 435, 443, 452, 552, 572, 584, 585, 586, 591, 603, 604, 605, 606, 611, 614, 615, 617, 618, 620, 626, 641, 694, 704, 708, 710, 714, 746, 747, 750, 751, 752, 753], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 138, 143, 153, 154, 177, 213, 214, 226, 247, 283, 295, 309, 310, 314, 315, 317, 323, 330, 333, 335, 337, 340, 341, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 410, 413, 423, 424, 443, 513, 514, 515, 516, 522, 523, 524, 526, 527, 528, 531, 532, 533, 539, 542, 543, 546, 548, 551, 552, 556, 557, 558, 559, 562, 563, 566, 704, 708, 712, 719, 724, 725, 730, 731, 736, 749, 753], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 363, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 685], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 113, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 151, 153, 154, 163, 169, 177, 185, 240, 244, 278, 283, 294, 296, 300, 302, 314, 315, 317, 323, 326, 327, 330, 335, 337, 351, 352, 359, 362, 370, 372, 373, 377, 379, 380, 386, 389, 393, 395, 396, 402, 403, 404, 407, 408, 409, 423, 424, 431, 438, 443, 452, 485, 589, 597, 672, 673, 675, 678, 694, 711, 713, 751], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 153, 154, 177, 179, 180, 181, 218, 222, 224, 245, 266, 270, 272, 283, 291, 314, 315, 319, 323, 330, 335, 337, 338, 350, 359, 362, 370, 371, 372, 373, 377, 389, 393, 395, 401, 402, 403, 404, 407, 408, 409, 423, 424, 443, 472, 474, 478, 490, 492, 496, 502, 513, 514, 523, 528, 597, 610, 661, 665, 672, 675, 678, 679, 680, 681, 689, 704, 705, 706, 708, 710, 712, 719, 721, 725, 727, 731, 733, 746, 749, 750, 753], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 113, 115, 121, 123, 127, 130, 131, 132, 135, 136, 137, 153, 154, 177, 184, 185, 219, 278, 283, 289, 295, 298, 314, 315, 316, 323, 328, 330, 335, 337, 356, 357, 359, 362, 364, 367, 370, 372, 373, 377, 389, 393, 395, 397, 399, 402, 403, 404, 407, 408, 409, 423, 424, 443, 451, 452, 475, 476, 477, 528, 583, 589, 662, 671, 673, 675, 687, 710, 753], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 186, 207, 259, 264, 268, 269, 270, 278, 283, 314, 315, 316, 323, 330, 335, 336, 337, 350, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 453, 462, 476, 477, 488, 490, 493, 501, 534, 542, 543, 544, 556, 560, 561, 652, 662, 665, 688, 708, 712, 714], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 115, 120, 121, 123, 124, 127, 130, 131, 132, 134, 135, 136, 137, 143, 153, 154, 163, 169, 170, 172, 174, 177, 181, 216, 218, 247, 283, 289, 295, 299, 308, 314, 315, 316, 317, 322, 323, 330, 335, 337, 359, 362, 370, 372, 373, 375, 377, 389, 393, 395, 396, 399, 402, 403, 404, 406, 407, 408, 409, 413, 423, 424, 431, 438, 440, 443, 464, 470, 471, 472, 475, 476, 477, 481, 485, 490, 509, 510, 513, 528, 530, 534, 566, 572, 591, 617, 666, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 705, 706, 708, 710, 712, 714, 737, 747, 749, 750, 752, 753, 755], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 165, 167, 177, 241, 252, 283, 314, 315, 316, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 433, 435, 443, 664, 667, 707, 708, 712, 746, 750, 755], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 115, 116, 117, 118, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 149, 152, 153, 154, 155, 157, 159, 162, 168, 177, 178, 184, 222, 224, 246, 248, 251, 262, 264, 271, 272, 277, 283, 292, 300, 301, 312, 314, 315, 317, 323, 330, 333, 335, 336, 337, 340, 345, 359, 362, 365, 366, 369, 370, 372, 373, 377, 378, 381, 385, 387, 389, 390, 391, 393, 395, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 420, 423, 424, 425, 428, 436, 443, 444, 448, 451, 476, 483, 486, 487, 490, 491, 496, 499, 500, 502, 503, 507, 508, 511, 512, 529, 531, 534, 535, 536, 539, 542, 543, 546, 547, 548, 550, 552, 554, 555, 566, 567, 569, 573, 574, 581, 582, 583, 584, 585, 586, 587, 589, 593, 594, 595, 597, 602, 603, 604, 605, 606, 609, 611, 613, 614, 616, 618, 652, 658, 660, 662, 667, 674, 675, 677, 678, 679, 680, 683, 685, 686, 687, 704, 706, 708, 710, 712, 719, 725, 731, 750], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 615, 749], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 597, 705, 706, 708, 712, 746, 747], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 61, 62, 74, 85, 87, 94, 96, 98, 99, 102, 115, 121, 123, 124, 127, 130, 131, 132, 135, 136, 137, 138, 150, 153, 154, 177, 180, 239, 262, 283, 299, 314, 315, 323, 330, 335, 336, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 396, 399, 402, 403, 404, 407, 408, 409, 410, 419, 423, 424, 443, 477, 485, 490, 495, 496, 502, 530, 543, 550, 555, 556, 566, 589, 607, 661, 678, 679, 680, 684, 694, 705, 706, 708, 712, 713, 749, 750, 753, 755], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 113, 115, 121, 123, 124, 125, 127, 130, 131, 132, 133, 135, 136, 137, 138, 153, 154, 163, 169, 172, 177, 180, 239, 283, 289, 291, 314, 315, 323, 330, 335, 336, 337, 350, 359, 362, 363, 366, 370, 371, 372, 373, 377, 388, 389, 393, 395, 399, 402, 403, 404, 405, 407, 408, 409, 410, 423, 424, 431, 438, 443, 446, 448, 463, 485, 490, 491, 496, 502, 508, 528, 534, 550, 555, 610, 661, 662, 664, 667, 673, 675, 677, 678, 679, 680, 684, 685, 686, 688, 704, 706, 712, 746, 750, 753, 755], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 115, 120, 121, 123, 125, 128, 129, 130, 131, 132, 135, 136, 137, 144, 147, 149, 153, 154, 157, 177, 181, 209, 222, 228, 241, 248, 250, 256, 283, 298, 314, 315, 317, 323, 330, 335, 336, 337, 345, 359, 362, 365, 366, 369, 370, 372, 373, 377, 389, 393, 395, 400, 401, 402, 403, 404, 407, 408, 409, 416, 418, 423, 424, 443, 540, 549, 550, 555, 694, 708, 713, 749, 751], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 115, 121, 123, 125, 128, 130, 131, 132, 135, 136, 137, 149, 153, 154, 177, 180, 186, 209, 264, 283, 302, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 387, 389, 393, 395, 400, 402, 403, 404, 407, 408, 409, 418, 423, 424, 443, 453, 490, 495, 540, 543, 549, 550, 566, 643, 683, 685, 686, 705, 712, 747, 750, 753], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 115, 121, 123, 124, 128, 130, 131, 132, 135, 136, 137, 153, 154, 177, 219, 262, 283, 294, 296, 314, 315, 323, 327, 328, 330, 335, 337, 359, 362, 370, 372, 373, 377, 386, 387, 389, 393, 395, 400, 402, 403, 404, 407, 408, 409, 423, 424, 443, 463, 486, 489, 531, 539, 548, 567, 573, 574, 582, 583, 587, 589, 593, 594, 602, 609, 750, 751], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 127, 130, 131, 132, 135, 136, 137, 144, 153, 154, 167, 177, 244, 283, 314, 315, 317, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 399, 402, 403, 404, 407, 408, 409, 423, 424, 435, 443, 463, 666, 682, 705, 706, 712, 714, 748, 755], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 138, 153, 154, 177, 180, 278, 283, 314, 315, 323, 330, 335, 336, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 410, 423, 424, 443, 446, 463, 705, 753], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 115, 121, 123, 130, 131, 132, 135, 136, 137, 149, 153, 154, 177, 178, 283, 284, 292, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 387, 389, 393, 395, 402, 403, 404, 407, 408, 409, 418, 423, 424, 443, 444, 485, 540, 549, 554, 651, 664, 675, 678, 681, 695, 704, 708, 712, 746], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 115, 116, 117, 118, 119, 121, 122, 123, 130, 131, 132, 135, 136, 137, 148, 153, 154, 155, 177, 239, 241, 283, 292, 300, 302, 314, 315, 323, 330, 333, 335, 336, 337, 339, 356, 357, 359, 362, 365, 366, 367, 369, 370, 372, 373, 377, 387, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 407, 408, 409, 417, 423, 424, 425, 443, 479, 483, 493, 494, 529, 541, 575, 584, 585, 586, 588, 595, 596, 597, 603, 604, 605, 606, 611, 613, 614, 616, 618, 661, 662, 665, 694, 705, 706, 712, 747, 750, 751], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 138, 144, 153, 154, 171, 177, 185, 224, 283, 295, 314, 315, 317, 323, 326, 328, 330, 335, 337, 359, 362, 363, 364, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 410, 423, 424, 439, 443, 446, 452, 485, 490, 492, 528, 542, 544, 589, 675, 678, 705, 706, 708, 710, 750], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 115, 121, 123, 124, 130, 131, 132, 135, 136, 137, 141, 153, 154, 177, 262, 264, 272, 283, 314, 315, 317, 323, 324, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 412, 423, 424, 443, 499, 536, 544, 560, 561, 674, 675, 678, 679, 680, 681, 705, 753], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 316, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443, 750, 753, 755], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 152, 153, 154, 177, 184, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 420, 423, 424, 443, 451, 487, 535, 536, 597, 613, 616, 658, 660], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 115, 121, 123, 130, 131, 132, 135, 136, 137, 153, 154, 177, 283, 314, 315, 323, 330, 335, 337, 359, 362, 370, 372, 373, 377, 389, 393, 395, 402, 403, 404, 407, 408, 409, 423, 424, 443], "361": [8, 121, 283, 393], "181": [8, 121, 283, 393], "prefix": [9, 10, 284, 285, 665, 667, 675, 704], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 122, 127, 128, 133, 134, 149, 162, 167, 168, 170, 172, 222, 272, 284, 285, 289, 308, 317, 324, 329, 336, 340, 358, 388, 394, 399, 400, 401, 405, 406, 418, 435, 436, 474, 496, 502, 550, 583, 592, 597, 652, 662, 667, 674, 675, 678, 679, 680, 681, 688, 704, 705, 706, 707, 708, 710, 712, 713, 719, 725, 731, 746, 747, 748, 749, 750, 752, 753, 755], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 113, 118, 120, 127, 128, 129, 134, 140, 141, 142, 144, 150, 157, 162, 163, 166, 167, 169, 170, 172, 178, 186, 187, 192, 201, 203, 204, 222, 253, 255, 269, 270, 276, 278, 284, 285, 290, 319, 329, 345, 358, 387, 392, 399, 400, 401, 406, 412, 431, 434, 435, 438, 444, 453, 460, 461, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 589, 591, 615, 617, 620, 626, 641, 643, 651, 652, 661, 662, 663, 665, 666, 667, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 699, 700, 706, 712, 737, 738, 746, 750, 752], "add": [9, 10, 43, 61, 71, 80, 167, 284, 285, 316, 336, 435, 464, 465, 665, 675, 706, 708, 709, 712, 750], "updat": [9, 10, 28, 73, 284, 285, 299, 345, 704, 705], "add_suffix": [9, 284], "suffix": [9, 10, 94, 284, 285, 704], "item_": [9, 284], "item_0": [9, 284], "item_1": [9, 284], "item_2": [9, 284], "item_3": [9, 284], "col_": [9, 284], "col_a": [9, 284], "col_b": [9, 284], "after": [10, 113, 127, 178, 285, 289, 399, 421, 444, 464, 540, 549, 554, 559, 673, 675, 678, 681, 704, 712, 750], "add_prefix": [10, 285], "_item": [10, 285], "0_item": [10, 285], "1_item": [10, 285], "2_item": [10, 285], "3_item": [10, 285], "_col": [10, 285], "a_col": [10, 285], "b_col": [10, 285], "aggreg": [11, 61, 113, 128, 336, 400, 591, 615, 653, 661, 673, 711, 712, 747, 751], "over": [11, 16, 17, 40, 77, 97, 118, 138, 251, 410, 581, 592, 607, 704, 705, 708, 749, 750, 755], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 103, 106, 107, 112, 118, 119, 124, 125, 127, 128, 133, 134, 138, 149, 150, 159, 167, 168, 172, 178, 179, 187, 192, 201, 218, 219, 251, 266, 278, 298, 317, 328, 366, 392, 396, 399, 400, 405, 406, 410, 418, 419, 428, 435, 436, 444, 453, 470, 471, 472, 473, 475, 476, 481, 485, 503, 508, 533, 542, 550, 551, 553, 554, 555, 557, 567, 569, 572, 583, 589, 591, 617, 620, 626, 641, 643, 652, 661, 662, 667, 672, 675, 677, 678, 679, 680, 683, 684, 685, 686, 687, 689, 704, 705, 706, 708, 712, 748, 749, 750, 753], "accept": [11, 18, 19, 40, 80, 138, 211, 277, 290, 312, 363, 410, 490, 495, 503, 556, 572, 581, 591, 597, 617, 688, 704, 706, 708, 710, 748, 749, 750, 755], "g": [11, 36, 111, 162, 170, 172, 178, 308, 388, 444, 472, 488, 490, 491, 496, 501, 502, 528, 534, 537, 564, 565, 643, 667, 674, 675, 678, 679, 680, 681, 704, 705, 706, 708, 710, 714, 719, 725, 731, 750], "sum": [11, 35, 61, 116, 117, 128, 133, 138, 156, 306, 336, 390, 391, 400, 405, 410, 426, 448, 572, 579, 591, 601, 617, 708, 712, 746, 747, 749, 751, 755], "min": [11, 33, 36, 122, 187, 192, 201, 250, 304, 308, 394, 572, 578, 580, 591, 600, 610, 617, 620, 626, 641, 749, 753], "max": [11, 32, 36, 61, 122, 133, 303, 308, 336, 394, 405, 572, 577, 580, 591, 599, 610, 615, 617, 712, 747, 749, 750], "per": [11, 16, 29, 70, 118, 149, 181, 297, 418, 478, 496, 511, 512, 542, 572, 591, 595, 597, 615, 617, 675, 678, 679, 680, 705, 712, 746, 749, 752], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 61, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 116, 117, 118, 119, 138, 148, 155, 168, 172, 180, 181, 209, 228, 256, 277, 291, 299, 308, 316, 317, 329, 336, 356, 357, 358, 365, 366, 367, 369, 378, 381, 388, 390, 391, 392, 401, 410, 417, 425, 436, 490, 491, 502, 504, 507, 508, 528, 543, 547, 550, 555, 588, 607, 662, 665, 667, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 704, 705, 706, 708, 709, 710, 713, 714, 719, 725, 731, 747, 748, 749, 750, 751, 752, 753, 754, 755], "sever": [11, 699, 700, 705, 750, 752], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 164, 166, 167, 168, 172, 289, 363, 388, 396, 399, 418, 432, 435, 436, 577, 578, 579, 584, 585, 586, 592, 599, 600, 601, 603, 604, 605, 606, 610, 611, 614, 618, 643, 653, 655, 656, 657, 659, 676, 677, 678, 680, 687, 688, 750], "bool_onli": [12, 13, 286, 287], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 116, 117, 148, 152, 155, 184, 286, 287, 303, 304, 305, 306, 356, 357, 365, 366, 367, 369, 390, 391, 417, 420, 425, 451, 753], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 116, 117, 142, 148, 152, 155, 184, 278, 286, 287, 295, 300, 302, 303, 304, 305, 306, 308, 356, 357, 365, 366, 367, 369, 390, 391, 417, 420, 425, 448, 451, 580, 595, 597, 753], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 152, 184, 286, 287, 291, 303, 304, 305, 306, 322, 420, 451, 680, 704, 746, 750], "empti": [12, 13, 75, 76, 81, 104, 105, 116, 117, 126, 142, 147, 155, 246, 286, 287, 319, 351, 352, 379, 380, 390, 391, 398, 416, 425, 485, 517, 528, 540, 549, 665, 675, 710, 750, 753], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 122, 127, 133, 138, 204, 217, 228, 255, 256, 286, 287, 323, 335, 345, 359, 377, 394, 399, 405, 410, 461, 528, 567, 662, 683, 684, 685, 686, 688, 710, 753, 755], "zero": [12, 13, 23, 286, 287, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 527, 675, 678, 710, 719, 725, 731, 750], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 116, 117, 124, 126, 127, 138, 144, 148, 152, 155, 162, 184, 219, 246, 278, 286, 287, 288, 298, 301, 345, 356, 357, 363, 365, 367, 369, 390, 391, 398, 399, 410, 417, 420, 425, 451, 456, 490, 491, 496, 502, 534, 566, 595, 615, 652, 681, 683, 684, 686, 696, 704, 705, 706, 708, 709, 712, 747, 750, 754], "ignore_index": [14, 45, 52, 138, 149, 150, 288, 318, 325, 410, 418, 419, 463, 480], "verify_integr": [14, 144, 264, 288], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 113, 141, 149, 150, 181, 216, 228, 241, 250, 256, 272, 278, 290, 318, 329, 336, 358, 371, 378, 381, 412, 418, 419, 448, 463, 480, 662, 673, 694, 704, 705, 712, 713, 747, 749, 755], "end": [14, 19, 149, 150, 187, 192, 201, 250, 290, 320, 418, 419, 480, 495, 500, 502, 507, 508, 538, 546, 547, 550, 553, 554, 556, 620, 625, 626, 628, 629, 631, 632, 635, 641, 675, 678, 681, 750], "caller": [14, 28, 55, 64, 73, 84, 88, 122, 126, 138, 185, 246, 248, 299, 329, 340, 345, 358, 363, 364, 394, 398, 410, 452, 485, 550, 555], "ad": [14, 464, 465, 472, 537, 704, 705, 706, 712], "do": [14, 15, 44, 46, 50, 124, 129, 144, 216, 228, 256, 272, 288, 289, 317, 319, 324, 396, 401, 471, 472, 610, 675, 679, 680, 704, 705, 706, 708, 710, 712, 713, 746, 747, 750, 753, 755], "concat": [14, 288, 485, 670, 694, 706, 751], "gener": [14, 15, 36, 37, 51, 70, 138, 143, 178, 213, 247, 288, 308, 309, 410, 413, 444, 487, 535, 536, 580, 597, 652, 653, 667, 694, 704, 705, 706, 708, 710, 711, 713, 747, 750, 751], "concaten": [14, 288, 463, 474, 485, 492, 528, 679, 712, 749, 755], "unchang": [14, 28, 299, 567], "computation": 14, "intens": [14, 746], "than": [14, 15, 46, 60, 62, 70, 85, 87, 116, 117, 124, 138, 155, 172, 181, 295, 335, 337, 359, 362, 390, 391, 396, 410, 425, 448, 457, 458, 459, 472, 490, 494, 499, 502, 511, 512, 540, 543, 549, 566, 567, 584, 585, 586, 597, 603, 604, 605, 606, 611, 614, 618, 648, 650, 667, 704, 705, 706, 708, 710, 712, 713, 748, 750, 753, 755], "better": [14, 61, 138, 336, 410, 675, 679, 680, 705, 749], "solut": [14, 143, 247, 413, 704, 710, 747], "those": [14, 15, 36, 122, 289, 308, 394, 463, 528, 572, 591, 617, 695, 704, 705, 708, 710, 750], "origin": [14, 21, 28, 51, 88, 93, 125, 128, 140, 180, 185, 203, 204, 253, 255, 276, 291, 299, 320, 364, 400, 401, 446, 452, 460, 461, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 552, 651, 652, 654, 655, 656, 657, 658, 659, 660, 687, 704, 747], "onc": [14, 138, 410, 502, 678, 704, 706, 708, 712], "ab": [14, 262, 487, 496, 507, 531, 547, 548, 554, 750, 753], "df2": [14, 178, 444, 463, 667, 684, 712, 750, 753], "With": [14, 28, 70, 134, 200, 288, 295, 299, 318, 406, 448, 640, 678, 708, 710, 712, 746, 747, 750], "follow": [14, 15, 70, 106, 128, 162, 289, 312, 400, 401, 490, 528, 540, 549, 566, 572, 591, 617, 643, 652, 675, 680, 688, 693, 704, 705, 706, 708, 709, 710, 742, 747, 749, 750, 752, 755], "while": [14, 97, 162, 172, 297, 592, 667, 706, 708, 713, 750, 753], "recommend": [14, 124, 125, 705, 706], "show": [14, 70, 74, 75, 76, 104, 105, 128, 351, 352, 379, 380, 400, 683, 684, 685, 686, 705, 708, 712, 750], "wai": [14, 61, 127, 336, 399, 653, 687, 704, 705, 706, 708, 710, 742, 746, 748, 750, 753, 755], "sourc": [14, 16, 17, 165, 252, 433, 664, 674, 675, 679, 680, 705, 706, 713], "less": [14, 46, 85, 87, 295, 359, 362, 457, 458, 459, 472, 566, 567, 648, 650, 678, 705], "effici": [14, 16, 93, 174, 440, 707, 708, 753], "abov": [14, 15, 61, 144, 178, 289, 336, 444, 704, 708, 710, 747, 750, 753], "func": [15, 16, 17, 18, 111, 289, 388, 572, 591, 592, 610, 617, 653, 712], "raw": [15, 651, 674, 679, 680], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 122, 149, 150, 345, 365, 366, 369, 394, 418, 419, 463, 753], "reli": [15, 289, 707, 708, 712, 755], "numba": [15, 16, 120, 289, 653, 751, 755], "jit": [15, 16, 289, 750, 755], "compil": [15, 120, 289, 491, 534, 543, 545, 653, 706, 750, 755], "thu": [15, 289, 476, 707, 748, 750], "within": [15, 55, 61, 84, 133, 289, 329, 336, 358, 405, 490, 499, 511, 512, 535, 536, 544, 584, 585, 586, 589, 603, 604, 605, 606, 611, 614, 618, 675, 678, 681, 699, 704, 706, 710, 750], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 124, 127, 289, 294, 296, 308, 327, 328, 345, 386, 387, 396, 399, 550, 555, 573, 574, 582, 583, 587, 592, 593, 594, 602, 609, 705, 713, 751], "cuda": [15, 16, 17, 289, 651, 652, 653, 707, 711, 712, 746, 750, 752], "python": [15, 18, 21, 43, 120, 248, 289, 291, 316, 421, 485, 495, 513, 514, 515, 516, 522, 523, 524, 527, 550, 555, 592, 643, 653, 674, 675, 678, 679, 680, 687, 704, 706, 707, 708, 711, 712, 748, 750, 753, 755], "target": [15, 124, 289, 493, 544, 704, 705], "see": [15, 16, 19, 28, 43, 48, 50, 61, 120, 162, 167, 170, 172, 187, 192, 201, 289, 290, 299, 316, 322, 324, 336, 435, 550, 555, 572, 591, 597, 617, 620, 626, 641, 667, 674, 675, 677, 678, 679, 680, 681, 687, 704, 705, 709, 712, 719, 725, 731, 747, 749, 750, 752, 754, 755], "guid": [15, 167, 289, 435, 572, 591, 617, 706, 709, 711, 750], "user": [15, 16, 17, 51, 167, 277, 289, 435, 572, 591, 617, 653, 688, 704, 705, 706, 708, 709, 711, 712, 747, 752, 755], "defin": [15, 17, 37, 46, 133, 143, 213, 247, 289, 309, 332, 405, 413, 539, 592, 652, 653, 662, 704, 708, 710, 711, 712, 746, 751, 755], "udf": [15, 289, 653, 746, 751, 755], "through": [15, 122, 289, 394, 490, 491, 496, 502, 534, 562, 694, 708, 750, 752, 753], "strings_udf": [15, 289, 750], "rapid": [15, 147, 289, 416, 503, 531, 534, 546, 548, 564, 565, 665, 674, 678, 706, 712, 746, 750, 753], "librari": [15, 167, 289, 435, 550, 555, 566, 643, 687, 707, 711, 746, 747, 751, 752, 755], "includ": [15, 28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 118, 134, 142, 168, 170, 172, 173, 181, 194, 278, 289, 295, 299, 308, 336, 351, 352, 365, 366, 368, 369, 371, 379, 380, 385, 392, 406, 436, 448, 464, 470, 471, 472, 504, 516, 523, 530, 533, 537, 551, 554, 557, 575, 580, 584, 585, 586, 596, 603, 604, 605, 606, 611, 614, 618, 628, 662, 667, 674, 675, 677, 678, 679, 680, 681, 704, 705, 706, 707, 708, 710, 712, 719, 725, 731, 748, 750, 752, 753, 755], "subset": [15, 45, 46, 55, 84, 142, 159, 167, 181, 251, 289, 329, 358, 428, 435, 675, 710, 747, 749, 750], "expect": [15, 26, 88, 111, 118, 149, 168, 185, 289, 298, 364, 388, 418, 436, 452, 490, 564, 610, 652, 678, 704, 705, 708, 710, 713, 746, 747, 750], "refer": [15, 28, 36, 43, 120, 289, 299, 308, 316, 504, 545, 709, 711, 748, 750, 753, 754], "caveat": [15, 289, 705, 751], "referenc": [15, 289, 753], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 128, 134, 142, 149, 159, 165, 167, 168, 170, 172, 174, 194, 200, 221, 240, 244, 251, 252, 260, 264, 279, 300, 302, 308, 313, 317, 319, 331, 334, 351, 352, 379, 380, 388, 400, 406, 418, 428, 433, 435, 436, 440, 442, 470, 472, 490, 492, 493, 537, 539, 540, 549, 597, 607, 628, 640, 643, 652, 662, 664, 665, 667, 680, 681, 683, 684, 686, 687, 704, 705, 706, 708, 710, 712, 737, 746, 747, 749, 750, 752, 753, 755], "expand": [15, 496, 540, 549, 550, 555, 707], "reduc": [15, 704], "argument": [15, 16, 17, 19, 20, 21, 31, 61, 90, 111, 124, 125, 144, 149, 152, 162, 167, 168, 179, 184, 250, 289, 290, 291, 336, 366, 388, 401, 418, 420, 435, 436, 451, 463, 572, 591, 610, 617, 652, 665, 675, 677, 678, 680, 687, 688, 689, 693, 704, 705, 708, 746, 754], "simpl": [15, 472, 661, 704, 708, 710, 712, 750], "variabl": [15, 46, 92, 94, 120, 133, 134, 319, 405, 406, 653, 662, 671, 704, 712, 752], "could": [15, 597, 708, 746, 750], "def": [15, 16, 17, 133, 289, 405, 528, 535, 592, 653, 675, 704, 706, 710, 712, 746, 748, 750], "f": [15, 36, 111, 178, 272, 289, 308, 388, 444, 503, 528, 543, 552, 564, 565, 687, 706, 750], "els": [15, 75, 76, 240, 289, 351, 352, 706, 712, 746, 750], "awar": [15, 297, 750], "manner": [15, 16, 289], "mai": [15, 16, 17, 21, 61, 138, 141, 167, 178, 231, 272, 289, 291, 336, 363, 410, 412, 435, 444, 490, 493, 511, 512, 583, 597, 675, 678, 679, 680, 681, 693, 696, 704, 705, 706, 707, 708, 710, 712, 713, 746, 749, 750], "condition": [15, 289, 704, 750], "mix": [15, 36, 118, 167, 231, 308, 435, 513, 688, 710, 713, 750], "common": [15, 36, 94, 143, 228, 247, 289, 308, 413, 687, 704, 705, 708, 710, 750], "rather": [15, 124, 163, 181, 396, 431, 448, 704, 706, 708, 710, 713, 750, 755], "howev": [15, 170, 172, 289, 490, 537, 597, 704, 705, 706, 708, 710, 712, 748, 750, 753], "promot": [15, 750], "safe": [15, 712, 750], "regardless": [15, 36, 120, 308, 688, 747, 750], "op": [15, 750], "against": [15, 16, 17, 50, 324, 493, 513], "v": [15, 149, 150, 418, 419, 545, 583, 707, 710, 713], "w": [15, 128, 167, 400, 435, 488, 675], "z": [15, 16, 17, 44, 54, 127, 162, 317, 328, 396, 399, 477, 498, 568, 747], "manipul": [15, 289, 694, 711, 712], "long": [15, 92, 289, 566, 671, 678, 704, 710], "neither": [15, 28, 260, 261, 272, 289, 295, 299, 713], "modifi": [15, 51, 129, 144, 180, 248, 289, 401, 446, 583, 678], "place": [15, 45, 73, 88, 124, 127, 129, 134, 143, 144, 149, 168, 180, 185, 247, 289, 345, 364, 399, 401, 406, 413, 418, 436, 446, 452, 464, 466, 472, 485, 497, 498, 499, 528, 675, 679, 680, 710, 752, 753], "nor": [15, 28, 167, 272, 289, 299, 435, 713, 755], "creat": [15, 28, 113, 124, 126, 128, 129, 144, 167, 203, 204, 209, 246, 248, 253, 255, 276, 289, 299, 331, 332, 333, 398, 400, 401, 435, 460, 461, 540, 545, 549, 597, 651, 673, 675, 704, 706, 712, 737, 739, 746, 747, 748, 749, 750], "st": [15, 289, 750], "str_col": [15, 750], "scale": [15, 712, 719, 720, 725, 726, 731, 732, 747, 748, 750], "len": [15, 16, 172, 178, 289, 444, 489, 652, 694, 712, 750], "elif": [15, 289, 710, 750], "startswith": [15, 289, 694, 750], "42": [15, 187, 289, 712, 719, 725, 731, 749, 750], "abc": [15, 262, 289, 319, 363, 483, 487, 489, 494, 500, 507, 509, 510, 517, 519, 520, 528, 530, 535, 546, 547, 554, 675, 748, 750, 753], "some_exampl": [15, 289, 750], "sinc": [15, 168, 169, 172, 222, 289, 381, 436, 438, 653, 704, 705, 706, 708, 710, 750, 753], "requir": [15, 29, 37, 38, 39, 65, 66, 116, 117, 133, 138, 143, 155, 170, 172, 213, 214, 215, 226, 227, 247, 289, 309, 310, 311, 341, 342, 390, 391, 405, 410, 413, 425, 584, 585, 586, 595, 597, 603, 604, 605, 606, 611, 614, 618, 651, 661, 680, 681, 704, 705, 708, 710, 749, 750], "creation": [15, 38, 214, 289, 310, 751], "upper": [15, 26, 36, 289, 298, 308, 532, 537, 558, 559, 681, 694], "rais": [15, 21, 44, 55, 57, 58, 84, 125, 127, 142, 180, 186, 221, 267, 289, 291, 317, 320, 329, 331, 334, 350, 358, 399, 471, 476, 490, 507, 528, 540, 543, 547, 549, 566, 662, 666, 682, 687, 688, 705, 706, 708, 710, 746, 747, 748, 750], "attributeerror": [15, 289], "complet": [15, 289, 706, 712, 752], "http": [15, 43, 162, 170, 172, 289, 316, 493, 550, 555, 564, 565, 597, 653, 667, 674, 675, 678, 679, 680, 681, 687, 706], "doc": [15, 43, 289, 316, 550, 555, 643, 678, 687, 746, 755], "ai": [15, 103, 106, 147, 289, 416, 531, 534, 546, 548, 564, 565, 674], "api": [15, 16, 110, 119, 178, 289, 387, 444, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 746, 749, 750, 751, 752, 753, 754, 755], "stabl": [15, 19, 289, 290, 653, 752], "user_guid": [15, 289, 706], "html": [15, 43, 289, 316, 550, 555, 564, 565, 653, 687, 706], "incol": [16, 17, 750], "outcol": [16, 17, 750], "pessimistic_nul": [16, 17], "chunk": [16, 172, 592, 681], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 125, 325, 537, 592, 653, 712, 746, 750, 751], "execut": [16, 17, 172, 706, 710, 712, 750, 755], "Or": [16, 17, 124, 748, 750], "dictionari": [16, 17, 21, 111, 143, 247, 291, 388, 413, 571, 610, 665, 680, 708, 709, 748, 750], "map": [16, 17, 61, 75, 76, 104, 105, 111, 125, 170, 204, 240, 244, 255, 336, 351, 352, 379, 380, 388, 461, 498, 562, 571, 572, 591, 610, 617, 665, 675, 678, 705, 707, 708, 712, 742, 749, 750, 753], "col1": [16, 17, 750], "arg1": [16, 17, 111, 388, 750], "output": [16, 17, 36, 51, 61, 70, 109, 120, 138, 140, 162, 165, 168, 170, 172, 173, 174, 252, 278, 308, 336, 410, 433, 436, 440, 453, 474, 492, 499, 550, 555, 592, 652, 653, 665, 667, 678, 681, 683, 684, 685, 686, 694, 704, 706, 708, 711, 747, 749, 750, 751, 755], "extra": [16, 17, 21, 125, 162, 170, 172, 291, 538, 667, 674, 675, 678, 679, 680, 681], "These": [16, 17, 94, 653, 696, 697, 699, 700, 701, 704, 705, 706, 708, 748, 750, 753], "directli": [16, 17, 44, 180, 248, 317, 464, 695, 708, 712, 746, 750], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 122, 126, 127, 134, 138, 141, 149, 168, 170, 172, 180, 209, 213, 214, 215, 222, 226, 227, 246, 250, 308, 309, 310, 311, 341, 342, 394, 396, 398, 399, 406, 410, 412, 418, 436, 470, 472, 494, 526, 545, 589, 652, 662, 667, 680, 681, 695, 704, 705, 706, 708, 710, 712, 750, 755], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 116, 117, 118, 126, 133, 155, 160, 179, 180, 189, 191, 219, 244, 246, 250, 278, 301, 319, 322, 328, 379, 380, 390, 391, 398, 405, 425, 429, 446, 447, 448, 463, 497, 502, 528, 584, 585, 586, 597, 603, 604, 605, 606, 611, 614, 618, 622, 624, 652, 654, 662, 665, 675, 678, 688, 689, 704, 705, 708, 713, 753, 755], "underli": [16, 17, 125, 147, 183, 265, 376, 397, 416, 450, 694, 704, 708, 712, 753], "garbag": [16, 17, 333], "chunksiz": [16, 162, 677, 678], "offset": [16, 55, 84, 128, 133, 172, 329, 358, 400, 405, 675, 678, 681, 708], "start": [16, 23, 94, 120, 128, 147, 162, 170, 172, 277, 293, 320, 355, 400, 416, 500, 507, 508, 534, 537, 543, 546, 547, 552, 553, 554, 555, 556, 564, 565, 625, 628, 629, 631, 632, 635, 667, 674, 675, 677, 678, 679, 680, 681, 687, 707, 708], "span": 16, "th": [16, 326, 476, 477, 494], "size": [16, 26, 75, 76, 93, 104, 105, 133, 170, 172, 209, 240, 244, 298, 351, 352, 379, 380, 405, 485, 489, 494, 552, 615, 662, 667, 675, 678, 679, 680, 681, 704, 708, 749, 750, 752], "thread": [16, 17, 675, 679, 680, 712, 750], "block": [16, 537, 675, 679, 680, 681], "kernel": [16, 17, 120, 751], "foral": [16, 750], "built": [16, 537, 708, 711, 712, 746], "queri": [16, 167, 435, 504, 712, 747], "driver": [16, 712], "optim": [16, 70, 680, 752, 755], "launch": [16, 750], "configur": [16, 674, 675, 679, 680, 681, 705, 750, 754], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 213, 214, 215, 226, 227, 309, 310, 311, 341, 342, 694], "It": [16, 64, 97, 138, 149, 209, 222, 340, 363, 410, 418, 667, 704, 705, 707, 710, 750, 753, 755], "good": [16, 652, 662, 705, 707, 712], "point": [16, 73, 118, 119, 141, 168, 345, 392, 412, 436, 489, 536, 560, 561, 588, 675, 681, 707, 708, 719, 725, 731, 748, 750, 751, 753], "ineffici": 16, "Its": [16, 708], "maximum": [16, 26, 89, 170, 172, 262, 298, 365, 498, 566, 610, 652, 662, 675, 748, 752], "possibl": [16, 73, 167, 209, 345, 435, 678, 688, 704, 705, 706, 708, 710, 750, 752, 753, 755], "avail": [16, 167, 435, 491, 540, 549, 663, 674, 675, 679, 680, 693, 695, 699, 706, 712, 749, 750, 752, 753], "resourc": [16, 70, 704], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 116, 117, 124, 125, 126, 133, 134, 138, 147, 152, 155, 160, 168, 170, 172, 184, 243, 246, 266, 269, 270, 275, 292, 300, 301, 308, 326, 333, 340, 376, 382, 385, 387, 390, 391, 398, 405, 406, 410, 416, 420, 425, 429, 436, 447, 448, 451, 455, 457, 458, 459, 463, 483, 485, 487, 491, 494, 499, 503, 515, 530, 535, 536, 539, 543, 550, 555, 560, 575, 584, 585, 586, 589, 595, 596, 597, 603, 604, 605, 606, 607, 611, 614, 618, 625, 647, 648, 649, 650, 651, 652, 653, 658, 660, 661, 662, 665, 670, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 704, 705, 706, 708, 712, 719, 722, 725, 728, 731, 734, 748, 749, 750, 752], "concurr": [16, 17], "To": [16, 36, 45, 127, 172, 308, 399, 448, 540, 610, 675, 678, 679, 680, 704, 706, 708, 746, 749, 750, 753, 754, 755], "access": [16, 36, 167, 308, 435, 694, 697, 699, 700, 701, 708, 712, 750, 752], "count": [16, 36, 70, 89, 90, 95, 97, 107, 133, 160, 181, 308, 365, 366, 369, 371, 385, 405, 429, 448, 576, 580, 598, 653, 694, 712, 747, 749, 750], "threadidx": [16, 750], "blockdim": [16, 750], "respect": [16, 61, 94, 127, 168, 336, 399, 436, 472, 550, 555, 569, 662, 678, 684, 704, 746, 748], "document": [16, 550, 687, 704, 705, 707, 708, 709, 710, 712, 750, 755], "In": [16, 26, 61, 106, 125, 167, 289, 298, 336, 401, 435, 528, 550, 555, 592, 687, 704, 705, 706, 707, 708, 710, 713, 746, 748, 750, 751, 753, 755], "below": [16, 26, 28, 36, 48, 178, 298, 299, 308, 322, 444, 597, 704, 712, 719, 725, 731, 750, 755], "invok": [16, 17, 704, 708], "By": [16, 36, 45, 61, 70, 97, 122, 134, 167, 168, 181, 216, 308, 336, 394, 406, 435, 436, 485, 661, 667, 675, 680, 704, 708, 710, 712, 746, 750, 753, 755], "loop": [16, 17, 708, 746, 750], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 289, 539, 567, 679, 680, 708, 748, 749, 750, 753, 755], "so": [17, 133, 170, 172, 181, 272, 381, 405, 448, 704, 705, 706, 708, 710, 711, 746, 747, 750, 753, 755], "must": [17, 37, 50, 51, 74, 80, 94, 109, 125, 127, 128, 133, 134, 140, 141, 143, 150, 160, 167, 169, 170, 180, 187, 192, 201, 209, 213, 247, 248, 262, 278, 309, 324, 333, 399, 400, 405, 406, 412, 413, 419, 429, 435, 438, 470, 476, 477, 485, 491, 504, 620, 626, 641, 661, 662, 675, 678, 679, 680, 684, 685, 704, 705, 708, 710, 712, 714, 750, 753, 755], "independ": [17, 706, 750], "stride": [17, 170, 652], "improv": [17, 675, 679], "parallel": [17, 185, 452, 675, 679, 680, 712, 713, 747, 750, 752, 755], "resembl": 17, "code": [17, 44, 147, 157, 250, 264, 317, 326, 332, 416, 489, 704, 706, 707, 708, 710, 712, 750], "nelem": [17, 746], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 750], "zip": [17, 168, 436, 675, 678, 712, 750], "callabl": [18, 88, 111, 149, 168, 185, 364, 388, 418, 436, 452, 572, 591, 595, 610, 615, 617, 749], "na_act": [18, 363], "elementwis": [18, 653], "everi": [18, 46, 74, 543, 572, 591, 617, 708, 712, 750], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 125, 127, 134, 170, 180, 291, 308, 317, 345, 363, 368, 399, 401, 406, 463, 474, 485, 580, 665, 675, 677, 679, 683, 684, 686, 687, 688, 750, 753], "propag": [18, 21, 54, 291, 328, 363, 550, 555, 583, 750, 752, 753], "without": [18, 28, 36, 44, 70, 125, 248, 257, 299, 308, 317, 363, 485, 537, 550, 554, 555, 675, 684, 685, 686, 704, 705, 711, 746, 750], "them": [18, 61, 336, 363, 448, 492, 497, 499, 653, 687, 706, 708, 748, 749, 750, 755], "kind": [19, 94, 128, 149, 150, 224, 248, 290, 400, 418, 419, 480, 748], "quicksort": [19, 150, 290, 419, 480], "ascend": [19, 106, 122, 141, 149, 150, 181, 250, 290, 381, 394, 412, 418, 419, 448, 480, 607], "na_posit": [19, 141, 149, 150, 250, 290, 412, 418, 419, 480], "last": [19, 36, 45, 54, 64, 103, 106, 125, 141, 149, 150, 158, 217, 250, 290, 308, 318, 328, 340, 378, 381, 412, 418, 419, 427, 464, 480, 507, 540, 547, 549, 583, 629, 631, 633, 652, 675, 681, 687, 750], "would": [19, 141, 167, 250, 289, 290, 412, 435, 544, 607, 687, 704, 706, 712, 750, 753], "effect": [19, 61, 124, 290, 336, 396, 704, 713, 747], "compat": [19, 22, 67, 93, 179, 222, 290, 319, 368, 678, 689, 706, 707, 708, 711, 748, 751, 752], "mergesort": [19, 290], "heapsort": [19, 290], "choic": [19, 70, 290, 687, 706, 746], "algorithm": [19, 118, 290, 392, 493, 494, 541, 708], "descend": [19, 103, 141, 149, 150, 181, 250, 290, 378, 412, 418, 419, 448, 480], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 122, 128, 141, 143, 149, 150, 157, 168, 181, 186, 200, 217, 247, 250, 266, 289, 290, 308, 312, 318, 324, 336, 340, 378, 381, 394, 400, 401, 412, 413, 418, 419, 436, 448, 480, 496, 501, 526, 532, 540, 550, 555, 558, 559, 563, 567, 581, 607, 630, 632, 634, 640, 652, 662, 675, 678, 681, 687, 704, 705, 706, 708, 712, 750], "put": [19, 149, 150, 250, 290, 418, 419, 480, 707], "begin": [19, 149, 150, 250, 290, 418, 419, 480, 508, 538, 553, 554, 555, 632, 675, 678, 681, 712], "cupi": [19, 31, 61, 118, 138, 141, 163, 182, 239, 250, 263, 290, 326, 336, 410, 412, 431, 449, 652, 704, 708, 711, 712, 751, 753, 755], "ndarrai": [19, 59, 92, 138, 163, 169, 182, 183, 186, 194, 240, 244, 250, 263, 278, 290, 326, 410, 431, 438, 449, 450, 652, 662, 671, 688, 712, 746, 750], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 128, 133, 142, 178, 204, 255, 278, 289, 290, 298, 317, 329, 340, 358, 381, 400, 405, 444, 461, 481, 490, 494, 505, 506, 515, 530, 652, 672, 677, 678, 687, 704, 705, 708, 710, 712, 748, 750], "int32": [19, 21, 63, 141, 196, 250, 290, 291, 313, 339, 412, 448, 477, 479, 483, 489, 491, 493, 500, 507, 529, 541, 546, 547, 560, 636, 652, 662, 675, 708, 710, 712, 737, 742, 744, 745, 748, 750, 752], "foo": [19, 47, 162, 290, 401, 543, 661, 675, 704, 705, 706, 710, 712], "idx": [19, 75, 76, 104, 105, 211, 222, 229, 230, 231, 232, 233, 237, 238, 239, 248, 250, 251, 254, 266, 290, 333, 351, 352, 379, 380, 490, 540, 549, 712], "keyword": [20, 31, 90, 111, 124, 125, 241, 366, 388, 396, 463, 550, 555, 610, 677, 712, 750], "error": [21, 44, 125, 162, 167, 180, 289, 291, 317, 350, 435, 662, 677, 687, 688, 705, 748, 750, 752], "cast": [21, 51, 116, 117, 124, 155, 156, 291, 390, 391, 396, 425, 426, 473, 678, 713, 753], "altern": [21, 44, 46, 111, 291, 317, 388, 544, 610, 675, 704, 706, 710], "col": [21, 72, 291, 704, 746], "where": [21, 38, 44, 46, 51, 61, 70, 75, 76, 88, 103, 104, 105, 106, 111, 118, 124, 126, 141, 152, 170, 184, 214, 239, 246, 291, 310, 317, 336, 351, 352, 364, 379, 380, 381, 388, 392, 396, 398, 412, 420, 451, 487, 494, 500, 504, 507, 511, 512, 546, 547, 610, 649, 658, 660, 677, 704, 705, 706, 708, 710, 712, 713, 749, 752], "specif": [21, 45, 51, 94, 134, 291, 406, 693, 699, 704, 705, 706, 707, 708, 710, 712, 753, 754], "deep": [21, 28, 70, 93, 165, 212, 252, 291, 299, 368, 433, 664], "henc": [21, 291, 753], "chang": [21, 28, 110, 124, 152, 157, 180, 184, 291, 299, 318, 387, 396, 397, 420, 448, 451, 471, 472, 537, 558, 704, 705, 753], "warn": [21, 125, 291, 687, 705, 712, 753], "control": [21, 36, 125, 171, 291, 308, 439, 537, 652, 675, 704, 752], "except": [21, 45, 64, 125, 128, 194, 217, 228, 256, 291, 318, 340, 400, 507, 547, 565, 628, 653, 675, 678, 687, 707, 708, 710, 749, 752], "invalid": [21, 57, 58, 125, 221, 267, 291, 331, 334, 682, 687, 688], "suppress": [21, 44, 125, 291, 317], "On": [21, 125, 291, 472, 712, 747], "constructor": [21, 291, 694, 706, 708, 712, 746, 753], "float32": [21, 291, 448, 688, 737, 738, 740, 741, 748, 752], "custom": [21, 133, 291, 405, 653, 671, 680, 704, 705, 708, 747, 754, 755], "cat_dtyp": [21, 291], "enabl": [21, 291, 675, 678, 704, 706, 708, 748, 752], "s1": [21, 288, 291, 463, 474, 490, 513, 514, 523], "s2": [21, 288, 291, 401, 463, 473, 474, 490, 513, 523], "alia": [22, 67, 234, 346, 355], "cdf1": 23, "k2": [23, 678], "temp": [23, 268, 497, 712], "stop": [23, 110, 147, 277, 293, 355, 387, 416, 552, 553, 554, 677], "step": [23, 277, 293, 355, 472, 552], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 125, 127, 129, 144, 149, 150, 185, 245, 248, 294, 296, 297, 298, 317, 318, 319, 327, 328, 345, 364, 386, 397, 399, 401, 418, 419, 452, 464, 465, 466, 470, 471, 472, 480, 583, 753], "synonym": [24, 25, 53, 108, 294, 296, 327, 386], "fillna": [24, 25, 46, 53, 108, 127, 294, 296, 319, 327, 386, 399, 712, 713, 747, 751], "bfill": [24, 54, 128, 262, 294, 328, 400, 583], "lower": [26, 36, 118, 119, 298, 308, 392, 484, 537, 558, 559, 562, 563, 588, 681, 694, 708, 712], "trim": [26, 298, 538], "threshold": [26, 178, 298, 444, 597], "assign": [26, 51, 122, 125, 140, 297, 298, 394, 439, 712, 747, 753], "outsid": [26, 167, 298, 435, 463, 750], "boundari": [26, 133, 295, 298, 405, 750], "singular": [26, 298], "latter": [26, 298, 704, 705, 706, 746], "case": [26, 51, 64, 94, 118, 125, 149, 207, 228, 256, 259, 298, 340, 401, 418, 462, 490, 493, 528, 534, 537, 543, 550, 652, 687, 704, 705, 706, 708, 710, 713, 746, 749, 750, 753, 755], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 116, 117, 138, 149, 155, 167, 185, 187, 192, 201, 214, 226, 278, 292, 298, 310, 318, 336, 341, 364, 390, 391, 410, 418, 425, 435, 439, 452, 472, 537, 564, 565, 572, 584, 585, 586, 591, 603, 604, 605, 606, 611, 614, 617, 618, 620, 626, 641, 675, 679, 683, 684, 685, 686, 704, 705, 708, 710, 746, 749, 750, 751, 752, 753, 755], "array_lik": [26, 298], "minimum": [26, 29, 95, 133, 298, 300, 369, 405, 486, 498, 499, 531, 539, 548, 567, 595, 597, 610, 662, 704], "sr": [26, 128, 138, 289, 298, 355, 400, 410, 430, 448, 493, 499, 544, 750], "t": [28, 43, 55, 84, 93, 97, 107, 118, 125, 138, 170, 172, 181, 187, 192, 197, 201, 299, 316, 329, 358, 371, 385, 410, 448, 488, 495, 501, 518, 524, 528, 533, 537, 538, 551, 557, 575, 596, 620, 626, 637, 641, 678, 704, 712, 713, 746, 747, 750, 753], "modif": [28, 299], "reflect": [28, 43, 299, 316, 705], "shallow": [28, 299], "vice": [28, 299, 558], "versa": [28, 299, 558], "s_copi": [28, 299], "versu": [28, 299, 705, 753], "share": [28, 299, 463, 704, 705, 708, 710], "remain": [28, 112, 266, 299, 485, 532, 558, 559, 563, 567, 672, 704], "pearson": [29, 148, 292, 300, 417, 595, 749], "min_period": [29, 133, 300, 302, 405, 595, 597, 653, 750], "correl": [29, 292, 300, 595, 597], "matrix": [29, 31, 494, 595, 597, 751], "spearman": [29, 300, 595], "standard": [29, 152, 162, 195, 300, 420, 546, 550, 555, 562, 613, 635, 643, 658, 675, 704, 705, 706, 708, 710, 712, 747, 750], "coeffici": [29, 300, 595], "rank": [29, 300], "observ": [29, 61, 113, 133, 268, 300, 301, 336, 405, 583, 595, 597, 607, 654, 673, 712], "pair": [29, 77, 127, 162, 170, 172, 399, 595, 597, 667, 674, 675, 678, 679, 680, 681, 710], "have": [29, 36, 48, 50, 55, 61, 74, 84, 94, 97, 106, 109, 111, 122, 124, 128, 138, 142, 171, 172, 180, 181, 278, 300, 308, 322, 324, 329, 336, 358, 388, 394, 400, 410, 439, 469, 485, 494, 505, 506, 528, 595, 597, 653, 671, 678, 704, 705, 706, 708, 710, 712, 714, 717, 746, 749, 750, 753], "valid": [29, 46, 116, 117, 133, 134, 155, 264, 300, 319, 333, 390, 391, 405, 406, 425, 491, 504, 528, 583, 584, 585, 586, 595, 597, 603, 604, 605, 606, 611, 614, 618, 678, 682, 704, 706, 708, 709, 752], "request": [29, 90, 91, 162, 170, 172, 222, 262, 271, 366, 367, 667, 674, 675, 678, 679, 680, 681, 710], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 116, 117, 118, 122, 148, 152, 155, 184, 356, 357, 365, 366, 367, 369, 390, 391, 394, 417, 420, 425, 451, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618], "cell": [30, 746, 750], "nat": [30, 46, 75, 76, 97, 104, 105, 186, 351, 352, 371, 379, 380, 635, 687, 753], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 162, 217, 317, 319, 322, 324, 351, 352, 371, 379, 380, 472, 528, 653, 675, 704, 706, 708, 750, 753], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 162, 185, 240, 244, 318, 319, 351, 352, 364, 379, 380, 452, 528, 675, 678, 685, 704], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 351, 352, 379, 380], "24": [30, 32, 33, 34, 35, 61, 91, 93, 116, 117, 128, 129, 133, 178, 303, 304, 305, 306, 336, 367, 390, 391, 400, 405, 444, 488, 580, 712, 753], "21": [30, 128, 133, 134, 178, 400, 405, 406, 444, 488, 712, 749], "26": [30, 43, 61, 178, 300, 302, 316, 336, 444, 488, 580, 629, 631, 632, 712], "covari": [31, 302, 597], "cumul": [32, 33, 34, 35, 303, 304, 305, 306, 576, 577, 578, 579, 598, 599, 600, 601, 753], "indexedfram": [32, 33, 34, 35, 708, 710], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 158, 185, 295, 301, 303, 304, 305, 306, 319, 328, 336, 340, 351, 352, 364, 367, 379, 380, 427, 439, 452, 488, 511, 512, 528, 536, 537, 538, 541, 560, 561, 635, 750], "cumsum": [32, 33, 34, 303, 304, 305, 708, 753], "15": [32, 33, 34, 35, 45, 55, 84, 128, 133, 141, 144, 178, 254, 303, 304, 305, 306, 329, 355, 358, 400, 405, 412, 434, 444, 488, 519, 520, 712, 746, 750], "34": [32, 33, 34, 35, 155, 303, 304, 305, 306, 425, 497, 753], "product": [34, 43, 116, 155, 268, 269, 270, 305, 316, 390, 425, 704, 710, 751, 752], "percentil": [36, 122, 308, 394], "datetime_is_numer": [36, 308], "descript": [36, 70, 308, 580, 663, 694, 706, 709, 712, 754], "statist": [36, 70, 133, 170, 172, 278, 308, 405, 580, 667, 679, 680, 712], "summar": [36, 308, 580, 749], "central": [36, 308, 580], "tendenc": [36, 308, 580], "dispers": [36, 308, 580], "shape": [36, 50, 93, 141, 149, 308, 324, 412, 418, 580, 708, 746, 750, 753], "dataset": [36, 170, 172, 308, 371, 580, 667, 669, 674, 675, 678, 679, 680, 704, 750], "distribut": [36, 138, 308, 410, 580, 704, 712], "analyz": [36, 308, 580, 712], "well": [36, 103, 106, 118, 143, 222, 247, 308, 413, 468, 537, 661, 685, 706, 708, 746], "vari": [36, 308, 652, 683, 684, 685, 686, 712], "depend": [36, 51, 94, 125, 163, 168, 169, 171, 209, 241, 266, 308, 431, 436, 438, 439, 550, 555, 662, 664, 677, 678, 687, 688, 704, 708, 710, 712, 746, 752], "what": [36, 308, 481, 704, 705, 708, 750, 751, 755], "detail": [36, 162, 170, 172, 187, 192, 201, 289, 308, 597, 620, 626, 641, 643, 667, 674, 675, 678, 679, 680, 681, 704, 709, 711, 712, 749, 750, 754, 755], "fall": [36, 308, 625, 704, 708, 710, 752], "between": [36, 51, 73, 110, 118, 119, 122, 278, 292, 300, 302, 308, 345, 387, 392, 394, 492, 494, 500, 507, 528, 535, 536, 538, 546, 547, 581, 588, 597, 610, 681, 704, 705, 706, 708, 710, 711, 747, 749, 750, 751, 752, 753, 755], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 133, 178, 292, 308, 336, 339, 351, 352, 367, 379, 380, 392, 405, 444, 488, 580, 635, 685, 686, 712, 750], "75": [36, 70, 308, 392, 572, 580, 591, 617, 755], "25th": [36, 308], "50th": [36, 308], "75th": [36, 308], "submit": [36, 308], "instead": [36, 70, 111, 120, 128, 133, 170, 172, 178, 194, 209, 248, 268, 308, 332, 350, 388, 400, 405, 444, 463, 474, 495, 497, 507, 547, 610, 628, 704, 705, 708, 712, 752, 753], "style": [36, 45, 61, 94, 113, 124, 308, 336, 673, 706, 707, 712, 750], "select_dtyp": [36, 308], "o": [36, 178, 308, 444, 488, 501, 704, 708, 712, 742, 743, 744, 745, 751], "omit": [36, 44, 181, 308, 317, 485, 580, 677], "noth": [36, 172, 308, 508], "output_fram": [36, 308], "summari": [36, 70, 308, 580, 751], "mean": [36, 48, 61, 113, 116, 117, 128, 155, 289, 308, 322, 336, 390, 391, 400, 425, 491, 554, 572, 580, 591, 617, 673, 681, 704, 705, 710, 712, 746, 747, 749, 750, 753, 755], "std": [36, 308, 580, 746, 747, 749], "50": [36, 44, 63, 70, 127, 128, 211, 308, 317, 339, 392, 399, 400, 580, 684, 746, 748, 750], "median": [36, 308, 749], "top": [36, 122, 308, 394, 474, 694, 704, 712], "freq": [36, 55, 84, 110, 128, 146, 178, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 205, 206, 208, 308, 320, 329, 358, 387, 400, 415, 444, 453, 589, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 636, 637, 638, 639, 641, 642, 643, 644, 645, 712], "most": [36, 97, 181, 308, 448, 507, 547, 653, 680, 695, 704, 705, 708, 710, 712, 747], "frequenc": [36, 97, 128, 181, 187, 192, 201, 308, 400, 448, 456, 620, 626, 641, 661], "timestamp": [36, 47, 75, 76, 104, 105, 133, 168, 172, 178, 308, 351, 352, 379, 380, 405, 436, 444, 525, 620, 626, 641, 678, 687, 712, 747, 753, 755], "highest": [36, 97, 122, 308, 394, 464, 546, 547, 704], "arbitrarili": [36, 308], "chosen": [36, 138, 308, 410], "among": [36, 43, 308, 316, 597, 755], "analysi": [36, 308, 597], "consist": [36, 141, 229, 230, 231, 232, 233, 237, 238, 264, 308, 412, 704, 705, 706, 708, 750], "union": [36, 94, 163, 169, 278, 308, 431, 438, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 490, 542, 543, 556, 652, 685, 737, 738], "00000": [36, 148, 308, 417], "50000": [36, 308], "02765": [36, 308], "25000": [36, 308], "75000": [36, 308], "datetime64": [36, 46, 47, 75, 76, 104, 105, 120, 128, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 205, 206, 308, 351, 352, 379, 380, 400, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 687, 748, 752, 753], "2000": [36, 128, 188, 193, 196, 197, 198, 199, 202, 206, 308, 400, 621, 625, 627, 628, 629, 631, 632, 636, 637, 638, 639, 642, 643, 645], "2010": [36, 308, 628, 635, 746], "2006": [36, 308, 628], "09": [36, 55, 84, 128, 133, 178, 308, 329, 358, 400, 405, 444, 625, 629, 631, 632, 643, 712], "08": [36, 120, 124, 128, 133, 178, 187, 189, 190, 191, 192, 195, 200, 205, 308, 400, 405, 444, 622, 623, 624, 625, 629, 640, 644, 683, 684, 685, 686, 705], "2004": [36, 308, 628], "31": [36, 128, 187, 189, 190, 191, 192, 195, 198, 200, 205, 206, 308, 400, 622, 623, 624, 625, 628, 629, 633, 634, 638, 640, 643, 644, 645, 646, 647, 648, 650], "field": [36, 172, 308, 504, 568, 652, 675, 681, 694, 708, 742], "classmethod": [37, 38, 57, 58, 59, 65, 213, 214, 220, 221, 226, 267, 268, 269, 270, 309, 310, 331, 332, 333, 334, 341, 714, 716, 719, 720, 725, 726, 731, 732, 737, 739, 742, 744], "header": [37, 38, 39, 50, 65, 66, 162, 170, 172, 213, 214, 215, 226, 227, 309, 310, 311, 324, 341, 342, 667, 674, 675, 678, 679, 680, 681, 708], "represent": [37, 70, 143, 182, 183, 213, 247, 263, 268, 309, 413, 449, 450, 485, 719, 725, 731, 748, 751], "subclass": [37, 38, 65, 133, 143, 209, 213, 214, 226, 247, 309, 310, 341, 363, 405, 413, 706, 708], "implement": [37, 90, 110, 143, 180, 213, 247, 277, 309, 366, 387, 413, 566, 677, 708, 712, 747, 750, 752], "how": [37, 46, 57, 80, 94, 110, 122, 134, 143, 167, 180, 213, 218, 241, 247, 309, 319, 387, 394, 406, 413, 435, 463, 677, 704, 705, 706, 709, 710, 712, 746, 750, 751, 752], "construct": [37, 112, 143, 186, 213, 247, 261, 309, 413, 453, 672, 708, 710, 719, 720, 725, 726, 731, 732, 742], "metadata": [37, 38, 39, 65, 66, 143, 170, 172, 213, 214, 215, 226, 227, 247, 309, 310, 311, 341, 342, 413, 652, 668, 670, 679, 680], "reconstruct": [37, 38, 39, 65, 66, 143, 213, 214, 215, 226, 227, 247, 309, 310, 311, 341, 342, 413], "buffer": [37, 38, 39, 65, 66, 70, 143, 213, 214, 215, 226, 227, 247, 307, 309, 310, 311, 341, 342, 384, 413, 677, 752], "memoryview": [37, 38, 39, 65, 66, 143, 213, 214, 215, 226, 227, 247, 307, 309, 310, 311, 341, 342, 413], "serializ": [37, 38, 65, 143, 168, 213, 214, 226, 247, 309, 310, 341, 413, 436], "instanc": [37, 38, 55, 65, 84, 144, 213, 214, 226, 277, 309, 310, 329, 341, 358, 485, 493, 502, 535, 544, 675, 704, 708, 709, 710, 712], "cl": [37, 38, 65, 213, 214, 226, 309, 310, 341, 704], "wa": [37, 38, 65, 213, 214, 226, 250, 309, 310, 341, 747], "produc": [37, 38, 61, 65, 112, 124, 138, 213, 214, 226, 309, 310, 336, 341, 410, 474, 672, 678, 712, 749, 750, 755], "meta": [37, 38, 39, 65, 66, 143, 161, 213, 214, 215, 226, 227, 247, 309, 310, 311, 341, 342, 413], "privat": [37, 38, 39, 65, 66, 143, 213, 214, 215, 226, 227, 247, 309, 310, 311, 341, 342, 413], "devic": [38, 39, 65, 143, 169, 214, 215, 226, 247, 289, 310, 311, 341, 413, 438, 652, 708], "side": [38, 65, 94, 124, 128, 141, 214, 224, 226, 260, 261, 310, 341, 396, 400, 412, 486, 531, 533, 539, 548, 551, 557, 567, 662, 713], "deseri": [38, 65, 143, 214, 226, 247, 310, 341, 413], "task": [38, 65, 214, 226, 310, 341, 708, 712, 750, 755], "primari": [38, 214, 310, 704, 705, 708], "purpos": [38, 214, 310, 704, 705, 708, 710], "memori": [38, 39, 66, 70, 93, 162, 165, 169, 214, 215, 227, 252, 289, 310, 311, 342, 368, 433, 438, 651, 652, 664, 678, 680, 704, 705, 708, 710, 711, 712, 746, 752], "host": [38, 66, 162, 169, 170, 172, 183, 214, 227, 278, 310, 342, 438, 450, 667, 674, 675, 678, 679, 680, 681, 706, 708], "necessari": [38, 43, 163, 214, 310, 316, 431, 530, 704, 705, 706, 708, 710, 712, 750], "associ": [39, 66, 215, 227, 278, 311, 342, 681, 748, 755], "period": [40, 55, 84, 110, 128, 133, 146, 188, 193, 196, 197, 198, 199, 202, 206, 312, 329, 358, 387, 400, 405, 415, 581, 589, 621, 627, 633, 634, 636, 637, 638, 639, 642, 643, 645, 712], "discret": [40, 312, 662, 704], "calcul": [40, 70, 110, 133, 152, 184, 195, 224, 300, 312, 333, 387, 405, 420, 451, 581, 597, 635, 653, 654, 655, 656, 657, 658, 659, 660, 687, 712, 746, 751], "compar": [40, 50, 216, 228, 312, 324, 350, 592, 683, 684, 685, 686, 694, 707, 710, 713, 749, 753, 755], "previou": [40, 124, 262, 312], "shift": [40, 110, 292, 312, 387, 581], "neg": [40, 64, 126, 160, 246, 312, 340, 398, 429, 503, 508, 581, 719, 725, 731], "take": [40, 106, 111, 165, 252, 388, 433, 485, 528, 572, 581, 591, 617, 653, 664, 694, 704, 746, 750], "gdf": [40, 580, 583, 592, 595, 597, 712, 713, 748], "16": [40, 133, 141, 178, 363, 405, 412, 444, 488, 505, 506, 681, 687, 712, 750, 752], "36": [40, 133, 405, 712, 750], "divis": [41, 42, 56, 123, 130, 137, 177, 194, 314, 315, 330, 395, 402, 409, 443, 628], "truediv": [41, 42, 314, 315], "inf": [41, 42, 75, 76, 104, 105, 123, 137, 177, 314, 315, 351, 352, 379, 380, 395, 409, 443, 710], "flexibl": [43, 167, 316, 435, 704, 705, 708, 710, 712, 746, 750, 753], "wrapper": [43, 316, 705, 708, 750], "sub": [43, 154, 316, 424, 489, 500, 507, 543, 546, 547], "mul": [43, 99, 316, 373], "div": [43, 316], "mod": [43, 316], "pow": [43, 316], "swap": [43, 157, 316, 704], "operand": [43, 316], "org": [43, 316, 550, 555, 597, 687], "datamodel": [43, 316], "__ror__": [43, 316], "70": [43, 316], "174": [43, 316], "remov": [44, 45, 129, 182, 183, 263, 266, 317, 318, 319, 401, 449, 450, 470, 472, 497, 498, 499, 533, 537, 538, 551, 557, 707, 708, 750], "multi": [44, 51, 80, 264, 317, 671, 711, 712, 751], "keyerror": [44, 317, 666, 682], "found": [44, 94, 141, 239, 272, 278, 317, 363, 412, 501, 502, 507, 540, 544, 545, 547, 549, 550, 555, 561, 643, 675, 708, 712, 713], "dropna": [44, 48, 61, 97, 107, 113, 151, 167, 181, 317, 322, 336, 338, 371, 385, 435, 448, 474, 575, 596, 661, 673, 751], "drop_dupl": [44, 317], "duplic": [44, 45, 103, 106, 125, 144, 217, 257, 317, 318, 378, 381, 542, 662, 675, 755], "certain": [44, 45, 94, 178, 317, 444, 537, 550, 555, 704, 709, 750], "reindex": [44, 317, 583, 694, 713], "midx": [44, 147, 157, 250, 265, 273, 317, 416], "from_product": [44, 248, 268, 270, 317], "40": [44, 128, 187, 195, 200, 317, 396, 400, 490, 640, 712], "lama": [44, 317, 318, 350], "falcon": [44, 61, 64, 74, 129, 157, 181, 317, 336, 340], "speed": [44, 61, 129, 157, 317, 336, 580, 675, 687, 705, 746], "weight": [44, 138, 157, 317, 410], "length": [44, 48, 55, 84, 88, 94, 127, 138, 140, 150, 157, 185, 239, 256, 278, 317, 322, 329, 358, 364, 399, 410, 419, 452, 476, 477, 479, 494, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 550, 555, 566, 567, 589, 652, 662, 665, 719, 721, 725, 727, 731, 733, 750], "big": [44, 70, 157, 317], "small": [44, 157, 317, 675, 679, 704, 706, 708, 746, 747, 749, 750], "45": [44, 157, 178, 201, 317, 444, 620, 626, 641, 687, 750], "200": [44, 124, 157, 211, 317, 746], "100": [44, 61, 118, 127, 128, 157, 194, 211, 250, 317, 336, 399, 400, 518, 520, 628, 684, 712, 746, 750, 753], "250": [44, 157, 317], "150": [44, 157, 317, 746], "320": [44, 157, 317], "keep": [45, 46, 88, 103, 106, 109, 122, 180, 185, 217, 318, 319, 364, 378, 381, 394, 452, 497, 498], "identifi": [45, 61, 75, 76, 92, 104, 105, 149, 167, 336, 351, 352, 379, 380, 418, 435, 492, 499, 544, 545, 643, 671, 677, 704], "drop": [45, 46, 48, 109, 114, 129, 144, 151, 217, 218, 266, 318, 319, 322, 401, 474, 662, 751, 755], "occurr": [45, 103, 106, 217, 318, 378, 381, 491, 501, 502, 528, 540, 543, 549, 712], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 116, 117, 155, 170, 172, 178, 200, 318, 390, 391, 425, 444, 475, 477, 500, 507, 546, 547, 552, 640, 683, 684, 685, 686, 704, 710, 712, 750], "guarante": [45, 138, 318, 410, 482, 597, 675, 704, 749, 755], "thresh": 46, "decid": [46, 218, 705], "least": [46, 109, 180, 218, 338, 474, 528, 710, 748, 750], "isna": [46, 76, 319, 352, 753], "notna": [46, 105, 319, 380, 753], "alfr": [46, 75, 76, 104, 105, 351, 352, 379, 380], "batman": [46, 75, 76, 104, 105, 351, 352, 379, 380], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 351, 352, 379, 380, 511, 512, 750], "batmobil": [46, 75, 76, 104, 105, 351, 352, 379, 380], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 351, 352, 379, 380], "1940": [46, 75, 76, 104, 105, 351, 352, 379, 380], "look": [46, 704, 705, 706, 708, 746, 747, 750], "20180310": 47, "u": [47, 168, 172, 187, 192, 196, 201, 436, 488, 503, 620, 626, 636, 641, 678, 687, 704, 705, 706, 708, 746, 748, 750, 752, 753], "ax": [48, 112, 167, 182, 183, 263, 322, 435, 449, 450, 463, 554, 672, 678, 690, 699], "still": [48, 322, 706], "we": [48, 61, 74, 106, 124, 125, 128, 209, 322, 336, 371, 400, 528, 675, 677, 679, 680, 704, 705, 706, 708, 710, 712, 746, 747, 748, 750, 753, 755], "our": [48, 322, 704, 705, 706, 708, 712, 746, 750, 755], "test": [50, 64, 324, 340, 350, 490, 495, 530, 538, 556, 675, 694, 705, 707, 709, 711, 712, 747, 755], "exactly_equ": [50, 324], "different_column_typ": [50, 324], "expr": [51, 120], "evalu": [51, 495, 513, 556, 712], "describ": [51, 70, 167, 168, 435, 436, 541, 679, 680, 749], "express": [51, 120, 490, 491, 495, 496, 502, 534, 543, 545, 550, 555, 556, 679, 680, 751], "mutat": 51, "typic": [51, 704, 708, 710, 755], "statement": [51, 712, 750], "bitwis": [51, 750], "logic": [51, 94, 289, 679, 680, 708, 710, 712, 750], "automat": [51, 57, 278, 333, 597, 678, 704, 705, 706, 712, 749, 753], "respons": 51, "suitabl": [51, 141, 168, 412, 436, 708], "later": 51, "condit": [51, 88, 120, 185, 364, 452, 712, 750], "upon": [51, 143, 247, 413], "earlier": 51, "though": [51, 712, 750], "line": [51, 64, 168, 340, 436, 507, 547, 566, 675, 678, 704, 705, 746], "replic": [52, 325], "22": [52, 128, 178, 195, 246, 400, 444, 488, 705, 712, 753], "44": [52, 192, 750], "ffill": [54, 108, 110, 262, 328, 386, 387, 583], "forward": [54, 162, 170, 172, 328, 582, 583, 587, 602, 609, 667, 674, 675, 678, 679, 680, 681, 706], "next": [54, 262, 328, 502, 583, 704, 706, 708, 712, 746, 750], "backward": [54, 328, 573, 574, 593, 594], "initi": [55, 329, 708, 710, 712, 750], "time": [55, 84, 110, 126, 128, 133, 160, 162, 168, 246, 278, 329, 358, 387, 398, 400, 405, 429, 436, 477, 484, 491, 558, 559, 563, 597, 653, 675, 679, 680, 687, 694, 704, 705, 708, 710, 746, 747, 750, 751, 753], "date": [55, 84, 168, 178, 186, 194, 200, 329, 358, 436, 444, 625, 628, 629, 630, 631, 632, 633, 634, 640, 643, 675, 678, 687, 704, 712, 747], "few": [55, 84, 329, 358, 708, 750, 753, 755], "1m": [55, 329, 625], "displai": [55, 70, 84, 122, 329, 358, 394, 662, 706], "month": [55, 187, 192, 201, 329, 620, 625, 626, 629, 630, 641, 687], "typeerror": [55, 57, 58, 84, 127, 216, 221, 267, 320, 329, 331, 334, 350, 358, 399, 528, 688, 750], "datetimeindex": [55, 84, 329, 358, 687, 694], "date_rang": [55, 84, 128, 178, 188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 206, 320, 329, 358, 400, 444, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 712], "2d": [55, 84, 329, 358, 664], "3d": [55, 84, 329, 358], "9223372036854775807": [56, 130, 330, 402, 712], "tabl": [57, 72, 112, 113, 118, 119, 160, 161, 167, 168, 267, 429, 435, 436, 498, 562, 661, 672, 673, 678, 704, 708, 712, 749, 752], "pyarrow": [57, 161, 267, 331, 430, 679, 680, 712, 719, 720, 724, 725, 726, 730, 731, 732, 736, 737, 739, 741, 742, 744, 745], "doe": [57, 61, 74, 125, 157, 163, 167, 289, 320, 336, 431, 435, 472, 504, 550, 592, 653, 666, 671, 682, 688, 704, 705, 708, 710, 713, 748, 749, 750, 755], "similar": [57, 94, 149, 167, 170, 172, 289, 418, 435, 550, 555, 683, 684, 686, 704, 710, 747, 749, 750, 753, 755], "to_panda": [57, 712, 714, 747, 749, 750, 753, 755], "work": [57, 133, 405, 448, 651, 652, 704, 706, 708, 709, 711, 712, 748, 749, 750, 751], "pa": [57, 267, 331, 719, 720, 725, 726, 731, 732, 737, 739, 742, 744], "record": [59, 94, 122, 168, 394, 436, 535, 678, 704], "recarrai": [59, 173], "ndim": 59, "greater": [60, 62, 71, 295, 335, 337, 567, 597, 688, 748], "as_index": [61, 336], "group_kei": [61, 336], "squeez": [61, 336], "group": [61, 113, 122, 167, 170, 336, 394, 435, 448, 496, 545, 572, 576, 577, 578, 579, 581, 584, 585, 586, 588, 589, 590, 591, 592, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 661, 670, 673, 677, 679, 680, 704, 708, 710, 713, 747, 750, 751, 753, 755], "mapper": [61, 125, 336], "involv": [61, 278, 336, 708], "some": [61, 73, 124, 178, 272, 336, 345, 421, 444, 480, 491, 543, 592, 687, 704, 705, 708, 710, 712, 713, 749, 750, 752, 755], "combin": [61, 144, 181, 336, 463, 492, 533, 550, 551, 557, 572, 591, 617, 679, 680, 694, 704, 710, 712, 714, 752], "split": [61, 168, 261, 336, 436, 488, 536, 540, 549, 550, 560, 561, 678, 681, 694, 706, 712, 752], "larg": [61, 138, 336, 410, 675, 679, 680, 708, 747, 749], "amount": [61, 70, 336, 706, 708, 750], "notic": [61, 272, 336, 748, 750], "interpret": [61, 167, 336, 435, 505, 506, 550, 555, 675, 679, 680], "hierarch": [61, 89, 90, 95, 167, 179, 264, 336, 365, 366, 369, 435, 689, 708, 712], "particular": [61, 89, 90, 95, 162, 170, 172, 336, 365, 366, 369, 421, 491, 667, 674, 675, 678, 679, 680, 681, 704, 705, 706, 708, 710, 749, 755], "relev": [61, 336, 704], "sql": [61, 94, 336, 712], "influenc": [61, 336, 752], "preserv": [61, 127, 289, 336, 399, 567, 620, 626, 641, 675, 681, 753], "piec": [61, 336, 704, 706, 708], "dataframegroupbi": [61, 693], "about": [61, 70, 336, 597, 651, 652, 704, 707, 708, 712, 752], "390": [61, 336, 746], "350": [61, 336], "parrot": [61, 64, 129, 336, 340, 490], "370": [61, 336, 580], "anim": [61, 74, 318, 336, 350, 463], "380": [61, 336, 580], "375": [61, 336], "captiv": [61, 336], "wild": [61, 336], "from_arrai": [61, 228, 256, 336], "185": [61, 336], "210": [61, 336], "g1": [61, 336], "g2": [61, 336], "variou": [61, 336, 699, 704, 705, 706, 708], "lambda": [61, 336, 363, 572, 591, 592, 610, 617, 710, 713, 747, 749, 750], "333333": [61, 123, 128, 137, 336, 395, 400, 409, 448, 597], "666667": [61, 184, 336, 451], "000000": [61, 75, 76, 104, 105, 128, 139, 336, 351, 352, 379, 380, 400, 411, 595, 597, 636, 746, 749, 753], "murmur3": [63, 339], "hash": [63, 109, 339, 651], "md5": [63, 339], "murmurhash3": [63, 339], "120": [63, 339, 489], "1930516747": [63, 339], "422619251": [63, 339], "941520876": [63, 339], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 339], "947ca8d2c5f0f27437f156cfbfab0969": [63, 339], "d0580ef52d27c043c8e341fd5039b166": [63, 339], "330519225": [63, 339], "397962448": [63, 339], "1345834934": [63, 339], "57ce879751b5169c525907d5c563fae1": [63, 339], "948d6221a7c4963d4be411bcead7e32b": [63, 339], "fe061786ea286a515b772d91b0dfcd70": [63, 339], "quickli": [64, 340, 746], "your": [64, 124, 125, 340, 706, 712, 746, 750], "right": [64, 80, 94, 128, 133, 141, 224, 233, 241, 260, 261, 295, 313, 340, 400, 405, 412, 486, 500, 507, 531, 539, 546, 547, 551, 555, 557, 567, 662, 665, 683, 684, 685, 686, 719, 725, 731, 747, 748], "tail": [64, 340], "allig": [64, 340], "bee": [64, 340, 533, 551, 557], "lion": [64, 129, 340, 502], "monkei": [64, 129, 340, 463, 502], "shark": [64, 340], "whale": [64, 340], "zebra": [64, 340], "view": [64, 163, 169, 340, 431, 438, 583, 704, 708, 751], "three": [64, 106, 112, 340, 492, 662, 672, 708, 746, 750, 752], "verbos": [70, 710], "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 333], "print": [70, 125, 133, 174, 405, 440, 592, 663, 687, 746, 750, 754], "concis": 70, "usag": [70, 93, 368, 678, 704, 705, 709, 712, 750], "full": [70, 94, 167, 435, 610, 677, 706, 712, 746, 747, 750, 755], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 129, 209, 388, 401, 488, 498, 535, 610, 662, 705, 706, 708, 712, 746, 748, 749, 750, 753, 755], "further": 70, "process": [70, 174, 440, 712, 746, 749, 750], "switch": [70, 687], "truncat": [70, 652, 713], "total": [70, 93, 368, 567, 625, 670, 674, 679, 719, 725, 731, 748, 750], "alwai": [70, 101, 122, 138, 178, 251, 289, 371, 394, 410, 444, 528, 675, 705, 708, 713, 749, 750, 752, 755], "never": [70, 476, 708, 750], "introspect": 70, "shown": [70, 502], "human": 70, "readabl": 70, "unit": [70, 168, 436, 453, 678, 687], "estim": [70, 302, 597], "made": [70, 163, 175, 272, 431, 568, 704, 713, 753], "assum": [70, 313, 490, 494, 543, 550, 555, 597, 664, 704, 706, 707, 708, 750], "consum": [70, 704, 750], "real": 70, "cost": [70, 705], "smaller": [70, 93, 499], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 653], "delta": [70, 152, 184, 420, 451, 453, 597, 613, 616, 658, 660], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 171, 254, 267, 439, 694, 706, 708, 712, 750, 753], "130": 70, "byte": [70, 93, 368, 483, 565, 651, 667, 674, 675, 678, 679, 680, 681, 708, 719, 721, 725, 727, 731, 733, 752], "its": [70, 111, 161, 180, 292, 388, 687, 705, 706, 708, 709, 712, 752], "pipe": [70, 749], "content": [70, 167, 435, 528, 681, 707, 708, 750], "io": [70, 653, 675, 679, 680, 694, 751], "stringio": [70, 675, 678, 681], "getvalu": 70, "mode": [70, 167, 435, 677, 704, 752], "special": [70, 207, 259, 462, 491, 516, 528, 652, 708, 710, 748, 755], "fine": [70, 706], "tune": [70, 752], "random_strings_arrai": 70, "random": [70, 138, 172, 410, 597, 712, 746, 753, 755], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 170, 172, 719, 725, 731], "999999": 70, "mb": [70, 172, 667, 712], "num": [71, 712], "interleav": [72, 160, 429], "major": [72, 664, 755], "a1": [72, 496, 746], "a2": [72, 746], "a3": [72, 746], "b1": 72, "b2": [72, 496], "b3": 72, "linear": [73, 118, 345, 392, 588, 708, 746, 747], "limit_direct": [73, 345], "limit_area": [73, 345], "downcast": [73, 219, 345, 583, 688], "techniqu": [73, 345], "space": [73, 170, 172, 345, 492, 528, 536, 537, 540, 550, 559, 675], "linearli": [73, 345], "unsort": [73, 345, 747], "lead": [73, 162, 345, 533, 551, 557, 597, 746, 747, 750], "erron": [73, 345], "num_leg": [74, 181], "num_w": [74, 181], "check": [74, 144, 229, 230, 231, 232, 233, 237, 238, 239, 264, 313, 350, 472, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 534, 564, 565, 683, 684, 685, 686, 705, 746, 755], "present": [74, 116, 117, 155, 178, 390, 391, 425, 444, 474, 528, 550, 555, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 652, 705, 707, 713, 750], "leg": [74, 97], "wing": [74, 97], "separ": [74, 485, 492, 535, 536, 540, 549, 550, 555, 665, 681, 699, 704, 706, 708, 710, 750], "spider": 74, "everyth": [75, 76, 89, 90, 95, 240, 351, 352, 365, 366, 369, 463, 554, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618], "timedelta64": [75, 76, 104, 105, 351, 352, 379, 380, 453, 646, 647, 648, 649, 650, 752, 753], "charact": [75, 76, 104, 105, 351, 352, 379, 380, 484, 485, 486, 487, 488, 489, 490, 491, 497, 498, 499, 505, 506, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 536, 537, 539, 543, 544, 548, 551, 555, 557, 558, 559, 560, 562, 563, 564, 565, 567, 651, 675, 681, 705, 708], "incas": [75, 76, 104, 105, 351, 352, 379, 380], "1939": [75, 76, 104, 105, 351, 352, 379, 380], "05": [75, 76, 104, 105, 128, 178, 187, 189, 190, 191, 192, 195, 200, 201, 205, 292, 351, 352, 379, 380, 400, 444, 620, 622, 623, 624, 625, 626, 640, 641, 644, 683, 684, 685, 686, 687, 712], "27": [75, 76, 104, 105, 178, 351, 352, 379, 380, 444, 488, 629, 631, 632, 712], "joker": [75, 76, 104, 105, 351, 352, 379, 380], "32": [75, 76, 104, 105, 134, 351, 352, 379, 380, 406, 710], "float64index": [75, 76, 104, 105, 147, 221, 351, 352, 379, 380, 416], "left": [80, 94, 125, 128, 134, 141, 180, 224, 233, 241, 260, 261, 295, 313, 400, 406, 412, 486, 500, 507, 533, 539, 543, 546, 547, 548, 557, 562, 567, 662, 683, 684, 685, 686, 704, 712, 747], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 241, 463, 679, 680], "outer": [80, 94, 241, 463, 680], "suffic": [80, 750], "avoid": [80, 289, 704, 705, 708, 710, 752, 755], "conflict": 80, "ensur": [80, 163, 169, 431, 438, 490, 680, 704, 705, 706, 712], "now": [80, 119, 665, 704, 708, 712, 746, 750], "due": [80, 592, 675, 705, 712, 713, 747, 750], "lack": 80, "five": [81, 653], "int64index": [81, 147, 211, 216, 219, 228, 239, 241, 245, 246, 248, 250, 254, 256, 266, 297, 416, 491, 685, 708], "fisher": [82, 83, 148, 356, 357, 417], "unbias": [82, 83, 148, 184, 302, 356, 357, 417, 451, 597], "kurtosi": [82, 356], "sampl": [82, 83, 148, 152, 300, 356, 357, 417, 420, 434, 712], "obtain": [82, 83, 356, 357, 478, 566, 653, 755], "definit": [82, 83, 279, 356, 357, 376, 442, 597], "normal": [82, 83, 138, 152, 181, 184, 186, 302, 356, 357, 410, 420, 448, 451, 537, 597, 613, 616, 661, 679, 680, 746], "1999999999999904": [82, 83, 356, 357], "kurt": [83, 357], "final": [84, 358, 679, 680, 708, 750], "dai": [84, 172, 186, 189, 190, 191, 194, 195, 205, 320, 358, 453, 454, 459, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 644, 646, 648, 650, 687, 750, 753], "cond": [88, 185, 364, 452], "dimens": [88, 101, 185, 364, 376, 452], "collaps": [89, 90, 95, 365, 366, 369], "attempt": [89, 90, 95, 209, 216, 272, 365, 366, 369, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618, 665, 675, 687, 705, 713, 750], "17": [91, 128, 133, 141, 178, 292, 367, 400, 405, 412, 444, 488, 712, 753], "unpivot": [92, 671], "wide": [92, 671, 704, 706, 750], "format": [92, 162, 166, 167, 168, 170, 172, 174, 435, 436, 440, 525, 526, 564, 565, 566, 583, 643, 671, 675, 678, 687, 705, 706, 708, 711, 712, 713, 746, 747, 748, 752], "id_var": [92, 671], "value_var": [92, 671], "var_nam": [92, 671], "value_nam": [92, 671], "whose": [93, 112, 568, 665, 672, 704, 708], "ones": [93, 471], "5000": 93, "astyp": [93, 230, 238, 694, 712, 714], "head": [93, 178, 444, 712, 746, 750, 755], "40000": 93, "storag": [93, 162, 170, 172, 667, 674, 675, 678, 679, 680, 681, 751], "mani": [93, 378, 381, 597, 695, 704, 706, 708, 710, 712, 747, 748, 750, 752, 755], "repeat": [93, 160, 429, 491, 694], "5008": 93, "43": [93, 649, 750], "give": [93, 278, 704, 705, 708, 746, 749], "rest": [93, 526, 554, 559, 706], "necessarili": [93, 179, 689], "left_on": 94, "right_on": 94, "left_index": [94, 747], "right_index": [94, 747], "_x": 94, "_y": 94, "databas": 94, "join": [94, 180, 463, 675, 694, 711, 747, 751, 755], "intersect": [94, 463, 710], "leftsemi": 94, "leftanti": 94, "exact": [94, 118, 138, 262, 392, 410, 662, 685, 687], "opposit": 94, "were": [94, 470, 561, 712, 750], "overlap": [94, 142, 180, 463, 498, 502, 652, 662], "determinist": [94, 755], "df_a": [94, 712], "vals_a": [94, 712], "df_b": [94, 712], "vals_b": [94, 712], "df_merg": 94, "sort_valu": [94, 694, 712], "typecast": 94, "ambigu": [94, 186], "exactli": [94, 683, 684, 685, 686, 705, 749], "extend": [94, 662, 704, 712, 750], "semi": [94, 597], "anti": 94, "modulo": [96, 131, 370, 403], "4294967295": [96, 131, 370, 403], "appear": [97, 122, 333, 378, 381, 394, 492, 567], "often": [97, 693, 704, 747, 750, 753], "search": [97, 167, 272, 435, 475, 477, 490, 500, 501, 502, 507, 544, 546, 547, 704, 711, 753, 755], "don": [97, 107, 125, 181, 371, 385, 448, 575, 596, 678, 704, 747, 750, 753], "value_count": [97, 712], "speci": [97, 248], "bird": [97, 129, 463], "mammal": [97, 129], "arthropod": 97, "multipli": [98, 372, 750], "largest": [103, 378], "priorit": [103, 750], "popul": [103, 106, 746, 750], "59000000": [103, 106, 378, 381], "65000000": [103, 106, 378, 381], "434000": [103, 106, 378, 381], "337000": [103, 106, 378, 381], "11300": [103, 106, 378, 381], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 156, 426, 748], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "itali": [103, 106, 378, 381], "franc": [103, 106, 378, 381], "malta": [103, 106, 378, 381], "maldiv": [103, 106, 378, 381], "brunei": [103, 106, 378, 381], "iceland": [103, 106, 378, 381], "nauru": [103, 106, 378, 381], "tuvalu": [103, 106, 378, 381], "anguilla": [103, 106, 378, 381], "smallest": [106, 122, 381, 394, 477, 688], "retriev": [106, 504, 677], "ti": [106, 122, 262, 394], "resolv": [106, 714], "revers": [106, 378, 381, 607, 712], "distinct": [107, 350, 708], "npart": 109, "keep_index": [109, 140], "partit": [109, 172, 667, 680, 694, 712], "fill_method": [110, 387], "percent": [110, 387], "sequenti": [110, 387, 749, 750, 755], "form": [110, 112, 122, 160, 228, 256, 387, 394, 429, 515, 518, 519, 520, 521, 667, 672, 679, 680, 708, 747], "handl": [110, 162, 167, 168, 180, 318, 387, 421, 435, 436, 463, 550, 555, 677, 688, 694, 707, 708, 710, 711, 752], "consecut": [110, 126, 246, 387, 398, 487, 535, 536, 675], "increment": [110, 387, 667], "data_keyword": [111, 388, 610], "chain": [111, 388], "groupbi": [111, 388, 694, 708, 711, 712, 713, 747, 751, 755], "write": [111, 162, 166, 167, 168, 170, 172, 388, 435, 436, 667, 669, 675, 677, 705, 707, 711, 712, 746, 750, 752], "arg2": [111, 388], "arg3": [111, 388], "sai": [111, 388, 504, 750], "suppos": [111, 388], "reshap": [112, 151, 672, 694, 746], "organ": [112, 672, 706, 707], "rearrang": [112, 672], "aggfunc": [113, 661, 673], "margin": [113, 661, 673], "margins_nam": [113, 661, 673], "spreadsheet": [113, 673], "pivot": [113, 179, 673, 689], "excel": [113, 673], "exponenti": [115, 135, 389, 407], "min_count": [116, 117, 155, 390, 391, 425, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618], "fewer": [116, 117, 155, 390, 391, 425, 584, 585, 586, 603, 604, 605, 606, 611, 614, 618], "5040": [116, 117, 390, 391], "q": [118, 119, 392, 588, 643], "interpol": [118, 119, 392, 588], "higher": [118, 119, 392, 588, 678, 708, 752], "midpoint": [118, 392, 588], "nearest": [118, 119, 262, 392, 588], "desir": [118, 119, 159, 251, 392, 428, 588, 675, 678, 705, 750, 755], "li": [118, 119, 392, 588], "j": [118, 119, 157, 178, 392, 444, 494, 750], "approxim": [118, 392], "One": [118, 124, 167, 168, 187, 192, 201, 278, 396, 435, 436, 620, 626, 641, 704, 710, 713, 746, 748, 753], "notabl": [118, 149, 418, 713], "doesn": [118, 138, 170, 172, 410, 528, 712, 713, 753], "under": [118, 680, 699, 704, 706, 707, 708, 712, 713], "cp": [118, 652, 712, 746, 750, 753, 755], "55": [118, 246, 750], "deprec": [119, 674, 679, 707], "pleas": [119, 162, 167, 170, 172, 363, 435, 667, 674, 675, 678, 679, 680, 681, 712, 750], "local_dict": [120, 712], "local": [120, 667, 674, 675, 677, 678, 679, 680, 681, 706, 712], "filter": [120, 498, 679, 680, 704, 710, 711, 712, 755], "search_dat": [120, 712], "search_date2": 120, "averag": [122, 394, 750], "na_opt": [122, 394], "pct": [122, 394], "direct": [122, 394, 589, 678, 706, 712, 752], "dens": [122, 394, 746], "lowest": [122, 394, 500, 507, 546, 708], "increas": [122, 236, 313, 346, 348, 381, 394, 675, 687, 710], "bottom": [122, 394, 675], "rtruediv": [123, 395], "002778": [123, 137, 395, 409], "005556": [123, 137, 395, 409], "250000": [123, 137, 395, 409], "toler": [124, 223, 262, 272, 396, 683, 684, 685, 686], "conform": [124, 241, 396, 706], "unless": [124, 421, 550, 555, 661, 704], "either": [124, 134, 138, 150, 171, 180, 222, 401, 406, 410, 419, 439, 477, 485, 490, 665, 674, 675, 678, 679, 680, 681, 706, 712, 746, 750, 752], "even": [124, 163, 289, 371, 431, 675, 678, 704, 705, 750, 753], "convent": [124, 125, 128, 400], "index_label": 124, "column_label": 124, "_highly_": 124, "clarifi": [124, 125], "intent": [124, 125], "fiction": [124, 504], "firefox": 124, "chrome": 124, "safari": 124, "ie10": 124, "konqueror": 124, "http_statu": [124, 713], "404": [124, 746], "301": 124, "response_tim": 124, "new_index": 124, "iceweasel": 124, "comodo": 124, "dragon": 124, "retain": [124, 396, 499, 713, 753], "user_ag": 124, "alter": [125, 172, 245, 397], "throw": [125, 168, 436, 705, 752], "index_mapp": 125, "columns_mapp": 125, "highli": [125, 680, 755], "overwrit": [125, 180, 268], "postfix": 125, "repetit": [126, 246, 398], "newli": [126, 246, 398, 401, 589, 708], "to_replac": [127, 399], "regex": [127, 399, 490, 491, 496, 502, 534, 543, 545, 550, 555], "valueerror": [127, 142, 167, 168, 180, 399, 435, 436, 471, 507, 528, 547, 662, 706, 746, 749], "mismatch": [127, 399, 685, 686], "actual": [127, 399, 528, 705, 708, 712, 750, 753], "exhibit": [127, 399, 706], "silent": [127, 399], "rule": [128, 400, 704, 710], "close": [128, 186, 208, 260, 261, 295, 400, 453, 667, 677, 706, 708, 755], "loffset": [128, 400], "start_dai": [128, 400], "dateoffset": [128, 400], "bin": [128, 313, 400, 448, 662], "interv": [128, 229, 230, 231, 232, 233, 237, 238, 260, 261, 313, 400, 662, 708, 749], "edg": [128, 133, 313, 400, 405, 500, 507, 546, 547, 662, 705], "bucket": [128, 400], "closest": [128, 400], "nanosecond": [128, 168, 172, 400, 436, 454, 646, 678, 687], "millisecond": [128, 168, 400, 436, 454, 646, 678, 687], "minut": [128, 400, 454, 646, 687, 711, 751], "2001": [128, 201, 206, 320, 400, 620, 625, 626, 628, 641, 645, 747], "1t": [128, 400], "06": [128, 178, 187, 189, 190, 191, 205, 400, 444, 620, 622, 623, 624, 625, 643, 644, 646, 647, 648, 650, 712], "downsampl": [128, 400], "3t": [128, 400], "23": [128, 178, 400, 444, 488, 490, 515, 516, 523, 712, 748, 753], "57": [128, 178, 400, 444, 750], "upsampl": [128, 400], "asfreq": [128, 400], "price": [128, 400, 504, 750], "19": [128, 178, 400, 444, 488, 597, 708, 712, 746], "volum": [128, 400], "60": [128, 400, 712], "week_start": [128, 400], "7d": [128, 400], "29": [128, 198, 400, 488, 629, 631, 632, 635, 638, 712, 755], "28": [128, 400, 488, 625, 629, 631, 632, 712, 746], "63": [128, 400, 749], "col_level": [129, 671], "col_fil": 129, "reset": [129, 288, 401, 463], "try": [129, 401, 678, 688, 704, 705], "389": 129, "80": [129, 580], "max_spe": 129, "from_tupl": [129, 268, 269, 272, 401, 712, 713], "fly": [129, 675, 678], "run": [129, 513, 514, 515, 516, 522, 523, 524, 527, 651, 652, 705, 706, 707, 710, 712, 746, 750, 755], "window": [133, 405, 694, 711, 751, 755], "center": [133, 405, 539, 567, 694, 705, 750], "win_typ": [133, 405], "baseindex": [133, 209, 212, 405, 708, 714, 715], "As": [133, 167, 405, 435, 704, 705, 708, 747, 750], "oppos": [133, 405, 712], "fix": [133, 167, 187, 192, 201, 363, 405, 435, 620, 626, 641, 708, 747, 748], "accommod": [133, 405], "get_window_bound": [133, 405], "20190101": [133, 405], "2019": [133, 248, 405], "01t09": [133, 405], "000": [133, 405, 513, 670, 675, 676, 679, 680], "math": [133, 405, 653, 750], "49": [133, 405, 750], "64": [133, 405, 708, 750], "81": [133, 405, 712, 750], "some_func": [133, 405], "sqrt": [133, 405, 750], "And": [133, 405, 750], "decim": [134, 168, 406, 436, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 675, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 749, 751, 755], "half_even": [134, 406], "half_up": [134, 406], "affect": [134, 170, 406, 704, 752], "67": [134, 406], "66": [134, 406], "subtract": [136, 153, 408, 423], "359": [136, 153, 154, 408, 423, 424], "179": [136, 153, 154, 408, 423, 424], "frac": [138, 410], "random_st": [138, 410], "reproduc": [138, 410], "ident": [138, 174, 410, 440, 463, 550, 555, 615, 683, 684, 685, 686, 710, 755], "fraction": [138, 410, 523, 719, 725, 731], "disallow": [138, 410], "state": [138, 268, 410], "uniform": [138, 410, 662], "probabl": [138, 410], "unlik": [138, 410, 681, 706, 749, 752, 755], "randomst": [138, 410], "seed": [138, 410, 712, 750], "stat": [138, 410, 694, 706, 751], "randomli": [138, 410, 712], "slow": [138, 410, 704, 749], "achiev": [138, 410, 566, 749], "especi": [138, 410, 704, 710, 749], "advis": [138, 410, 709], "826087": [139, 411], "913043": [139, 411], "043478": [139, 411], "map_index": 140, "map_siz": 140, "scatter": 140, "destin": [140, 750], "conserv": 140, "find": [141, 209, 262, 412, 491, 501, 502, 507, 546, 694, 704, 705, 706, 750], "maintain": [141, 412, 705, 712, 714], "hypothet": [141, 412], "monoton": [141, 235, 236, 262, 272, 277, 313, 346, 347, 348, 412], "wrong": [141, 412], "correct": [141, 412, 678, 750], "values_df": [141, 412], "reinterpret": [143, 247, 413], "lightweight": [143, 247, 413], "append": [144, 167, 435, 485, 550, 555, 665], "becom": [144, 746], "too": [144, 502, 704, 742, 750], "hello": [147, 416, 483, 484, 488, 492, 503, 531, 537, 538, 541, 546, 548, 553, 560, 561, 674, 678], "37037": [148, 417], "sort_remain": [149, 418], "quick": [149, 418], "builtin": [149, 418, 674, 675, 678, 679, 680, 681], "vector": [149, 295, 418, 421], "prescrib": 151, "ddof": [152, 184, 420, 451, 597, 613, 616, 658, 660], "deviat": [152, 272, 420, 613, 658, 705, 713, 747], "freedom": [152, 184, 420, 451, 597, 613, 616, 658, 660], "divisor": [152, 184, 420, 451, 613, 616, 658, 660], "290994": [152, 420], "squar": [156, 426], "249": [156, 426], "llama": 157, "cdf": 157, "unsupport": [159, 251, 428, 573, 574, 582, 583, 587, 589, 593, 594, 602, 609, 653, 749, 750], "preserve_index": 161, "save": [161, 170, 172, 667, 704, 708], "path_or_buf": [162, 167, 168, 435, 436, 677, 678], "sep": [162, 485, 528, 536, 540, 549, 675], "na_rep": [162, 485], "encod": [162, 167, 168, 326, 435, 436, 564, 565, 651, 652, 665, 677, 678, 708], "compress": [162, 167, 168, 170, 172, 435, 436, 667, 675, 678, 681, 752], "line_termin": 162, "storage_opt": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "csv": [162, 675, 694, 751, 752], "file": [162, 166, 167, 168, 170, 172, 435, 436, 507, 547, 651, 667, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 704, 707, 708, 710, 712, 748, 752], "path": [162, 166, 167, 168, 170, 172, 435, 436, 651, 667, 670, 674, 675, 676, 677, 678, 679, 680, 681, 704, 705, 706, 712, 752], "char": [162, 539, 675], "delimit": [162, 168, 436, 499, 528, 536, 544, 550, 555, 560, 561, 675, 678, 681], "utf": [162, 489, 564, 565, 678, 708], "scheme": [162, 704], "sens": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681, 708], "connect": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "port": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681, 706], "usernam": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "password": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "etc": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681, 693, 703, 704, 706, 748, 749], "url": [162, 170, 172, 550, 564, 565, 667, 674, 675, 678, 679, 680, 681], "urllib": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "s3": [162, 170, 172, 288, 515, 667, 674, 675, 678, 679, 680, 681], "gc": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "fsspec": [162, 170, 172, 667, 674, 675, 678, 679, 680, 681], "open": [162, 165, 167, 170, 172, 252, 295, 433, 435, 448, 664, 667, 668, 674, 675, 677, 678, 679, 680, 681, 706], "read_csv": [162, 712, 747], "quote_nonnumer": [162, 675], "filenam": [162, 168, 436, 667, 670, 675, 676, 679, 680, 704], "set_index": [162, 179, 241, 689, 749], "na_valu": [163, 169, 431, 438, 675], "asarrai": [163, 169, 431, 438, 746, 750], "strictli": [163, 431, 704, 708], "dlpack": [165, 252, 433, 664, 746, 752], "tensor": [165, 252, 433, 652, 664], "dmlc": [165, 252, 433, 664], "pycapsul": [165, 252, 433, 664], "pointer": [165, 252, 433, 664], "cudf_obj": [165, 252, 433], "pycapsule_obj": [165, 252, 433, 664], "encapsul": [165, 252, 433, 664, 708, 710], "feather": [166, 167, 435, 676, 694, 752], "read_feath": 166, "hdf5": [167, 435, 694], "hdfstore": [167, 435, 677, 694], "hdf": [167, 435, 677, 696, 752], "applic": [167, 435, 597, 694, 708, 710], "hold": [167, 229, 230, 231, 232, 233, 237, 238, 435], "relat": [167, 435, 694, 752], "individu": [167, 222, 435, 472, 488, 490, 708, 753], "r": [167, 421, 435, 488, 496, 501, 524, 537, 562, 566, 677], "delet": [167, 435], "read": [167, 435, 670, 674, 675, 676, 677, 678, 679, 680, 681, 708, 712, 748, 752], "alreadi": [167, 435, 463, 537, 708, 746, 747], "fast": [167, 435, 678, 708, 712, 747, 755], "searchabl": [167, 435], "pytabl": [167, 435, 694], "wors": [167, 435], "data_column": [167, 435], "disk": [167, 435, 675, 678, 748], "complevel": [167, 435], "disabl": [167, 435, 675, 752], "complib": [167, 435], "zlib": [167, 435], "lzo": [167, 435], "bzip2": [167, 435], "blosc": [167, 435], "v0": [167, 435], "compressor": [167, 435], "blosclz": [167, 435], "lz4": [167, 435], "lz4hc": [167, 435], "snappi": [167, 170, 172, 435, 667, 752], "zstd": [167, 170, 172, 435, 752], "issu": [167, 435, 704, 747, 750], "fletcher32": [167, 435], "checksum": [167, 435], "written": [167, 170, 172, 435, 667, 704, 706, 710, 750], "strict": [167, 435, 677, 683, 684, 685, 686, 687], "decod": [167, 435, 564, 677, 678], "read_hdf": [167, 435], "to_parquet": [167, 435, 680, 712, 748, 752], "parquet": [167, 172, 435, 679, 680, 694, 747, 751, 752], "to_feath": [167, 435, 676], "json": [168, 436, 504, 678, 694, 704, 752], "unix": [168, 436, 687], "orient": [168, 436, 678], "just": [168, 436, 554, 678, 704, 708, 746, 748, 750], "schema": [168, 436, 670, 678, 680], "compon": [168, 436, 503, 704, 706, 708], "date_format": [168, 436, 643], "epoch": [168, 436, 687], "iso": [168, 195, 436, 635], "convers": [168, 436, 439, 694, 708, 746], "iso8601": [168, 436], "double_precis": [168, 436], "force_ascii": [168, 436], "ascii": [168, 436, 484, 537, 558, 559, 563, 565], "date_unit": [168, 436, 678], "govern": [168, 436], "precis": [168, 436, 662, 678, 710, 719, 720, 725, 726, 731, 732, 748, 755], "microsecond": [168, 436, 454, 458, 646, 649, 650, 678], "default_handl": [168, 436], "handler": [168, 436, 674, 675, 678, 679, 680, 681], "receiv": [168, 436, 688], "incorrect": [168, 436], "gzip": [168, 436, 675, 678], "bz2": [168, 436, 678], "xz": [168, 436, 678], "read_json": [168, 436], "fname": [170, 670], "rowgroup": [170, 172, 667], "stripe_size_byt": 170, "stripe_size_row": 170, "row_index_strid": 170, "cols_as_map_typ": 170, "orc": [170, 679, 694, 751, 752], "stripe": [170, 172, 679], "granular": 170, "67108864": 170, "64mb": 170, "10000": [170, 746], "listdtyp": [170, 473, 494, 678, 708, 748], "much": [170, 172, 704, 705, 708, 712], "faster": [170, 172, 472, 679, 687, 704, 750], "read_orc": [170, 680, 712, 752], "nullabl": [171, 185, 439, 452, 704, 708, 713, 748, 755], "engin": [172, 490, 491, 496, 502, 534, 674, 678, 679, 680, 711], "partition_col": [172, 667], "partition_file_nam": 172, "partition_offset": 172, "metadata_file_path": 172, "int96_timestamp": 172, "row_group_size_byt": 172, "134217728": 172, "row_group_size_row": 172, "max_page_size_byt": 172, "max_page_size_row": 172, "return_metadata": [172, 668], "root": [172, 667, 705], "directori": [172, 667, 680, 704, 707, 710, 712], "uuid4": 172, "hex": [172, 505, 506, 519, 564, 565], "page": [172, 667, 694, 707, 711, 752, 755], "blob": [172, 668], "footer": [172, 668], "file_path": [172, 712], "int96": 172, "julian": 172, "midnight": 172, "1970": [172, 186], "128": [172, 708], "uncompress": [172, 681], "524288": 172, "512kb": 172, "20000": 172, "rel": [172, 448, 683, 684, 685, 686, 704], "root_path": 172, "read_parquet": [172, 670, 712, 748, 752], "intern": [174, 186, 209, 440, 453, 675, 683, 684, 685, 686, 704, 705, 707, 708, 709, 710, 752], "transpar": [174, 440], "dure": [174, 440, 550, 555, 688, 705, 710], "n0": [174, 440], "n1": [174, 440], "n2": [174, 440], "struct": [175, 678, 694, 708, 711, 742, 744, 745, 749, 751, 752, 755], "compos": [175, 681, 705, 708, 710, 748, 750], "shorthand": [178, 444], "section": [178, 444, 545, 554, 704, 705, 706, 707, 710, 712, 749, 750, 753, 755], "cs1": [178, 444], "2021": [178, 444, 635], "46": [178, 444], "cs2": [178, 444], "56": [178, 444, 750], "58": [178, 201, 444, 620, 626, 641, 750], "59": [178, 192, 444, 670, 675, 676, 679, 680, 750], "cs3": [178, 444], "k": [178, 444, 488, 528, 583, 678, 713], "l": [178, 187, 192, 201, 444, 488, 498, 620, 626, 641, 706], "innermost": [179, 478, 679, 680, 689], "filter_func": 180, "There": [180, 200, 319, 640, 705, 710, 746, 752, 755], "coercibl": [180, 446], "notimplementederror": [180, 490, 540, 543, 549, 566, 705, 708], "proport": 181, "frequent": [181, 448, 708], "occur": [181, 448, 490, 705, 712], "ant": [181, 533, 551, 557], "varianc": [184, 451, 597, 616, 660], "falsi": [185, 452, 713], "treatment": [185, 452, 713], "gsr": [185, 452, 713, 748], "tz": 186, "dayfirst": [186, 675, 687], "yearfirst": [186, 687], "immut": [186, 207, 259, 260, 277, 453, 462], "sliceabl": [186, 207, 259, 453, 462], "pytz": 186, "timezon": 186, "dateutil": [186, 687], "tzfile": 186, "pars": [186, 675, 678, 687, 688, 712, 746], "year": [186, 189, 191, 194, 195, 200, 248, 622, 624, 628, 633, 634, 635, 640, 687, 750], "000000001": [186, 199, 639], "000000002": [186, 199, 639], "000000003": 186, "000000004": 186, "me": [187, 192, 201, 499, 544, 620, 626, 641], "alias": [187, 192, 201, 620, 626, 641, 704], "gindex": [187, 192, 195, 200], "2020": [187, 192, 195, 200, 640], "1999": [187, 192, 195, 200, 640], "41": [187, 490], "datetime_index": [188, 189, 190, 191, 193, 196, 197, 198, 199, 202, 205, 206], "int16index": [188, 189, 190, 191, 193, 197, 198, 199, 202, 205, 206, 685], "int16": [188, 189, 190, 191, 193, 197, 198, 199, 202, 205, 206, 320, 621, 622, 623, 624, 625, 627, 637, 638, 639, 642, 644, 645, 688, 748, 752], "365": [189, 191, 194, 622, 624, 628], "leap": [189, 191, 194, 622, 624, 628], "366": [189, 191, 194, 622, 624, 628], "2016": [189, 190, 191, 205, 622, 623, 624, 644, 687], "2017": [189, 190, 191, 205, 622, 623, 624, 633, 634, 644, 687], "week": [190, 195, 205, 623, 635, 644], "mondai": [190, 205, 623, 644], "sundai": [190, 205, 623, 644], "belong": [194, 200, 313, 628, 640, 704], "29th": [194, 628], "februari": [194, 628], "intercalari": [194, 628], "four": [194, 628, 704, 752], "400": [194, 211, 628, 746], "datafram": [195, 203, 209, 241, 250, 252, 253, 263, 264, 265, 266, 268, 269, 270, 273, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 290, 291, 298, 299, 303, 304, 305, 306, 308, 314, 315, 316, 317, 319, 322, 323, 324, 328, 329, 330, 335, 336, 337, 339, 340, 343, 345, 351, 352, 356, 357, 358, 359, 361, 362, 364, 365, 366, 369, 370, 372, 373, 375, 377, 379, 380, 388, 389, 390, 391, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 438, 440, 443, 444, 448, 449, 450, 451, 452, 454, 460, 463, 496, 502, 540, 549, 550, 555, 568, 572, 580, 581, 583, 584, 585, 586, 589, 591, 592, 595, 597, 603, 604, 605, 606, 607, 610, 611, 614, 615, 617, 618, 635, 646, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 687, 689, 693, 694, 695, 703, 704, 706, 707, 708, 710, 711, 712, 713, 747, 748, 749, 751, 752, 753, 755], "accord": [195, 363, 635, 661, 704, 708], "8601": [195, 635], "52": 195, "000001": [196, 636], "000002": [196, 636], "int32index": [196, 685], "januari": [198, 200, 638, 640], "decemb": [198, 200, 638, 640], "march": [200, 640], "april": [200, 640], "june": [200, 640], "third": [200, 266, 640], "juli": [200, 640], "septemb": [200, 640], "fourth": [200, 640], "octob": [200, 640], "int8index": [200, 685], "int8": [200, 326, 640, 688, 748, 752], "dt_idx": 201, "2002": [206, 628, 645], "basic": [207, 209, 259, 289, 462, 572, 591, 617, 712, 749, 750], "pure": [207, 259, 462, 705, 708], "__init__": [208, 260, 706], "tupleize_col": 209, "best": [209, 272, 536, 652, 704, 705, 707, 710, 712, 713, 755], "fit": [209, 378, 381, 712], "design": [209, 264, 704, 705, 707, 711, 747], "factori": [209, 708], "re": [209, 490, 491, 496, 502, 534, 543, 553, 653, 712, 746, 750], "intim": 209, "familiar": [209, 704, 706, 707, 708, 711], "uint64": [209, 462, 748, 752], "uint64index": 209, "has_dupl": 209, "from_arrow": [209, 719, 725, 731, 737, 742, 755], "get_loc": [209, 713], "collect": [211, 363, 481, 706, 710, 712, 749, 755], "incompar": 216, "caught": 216, "catch": [216, 705], "idx1": [216, 228, 256], "idx2": [216, 228, 256], "nulls_are_equ": 217, "obj": [220, 463, 683, 684, 685, 686, 737, 739], "pdi": 221, "primarili": [222, 704], "stringindex": [222, 251, 326, 331, 355, 490, 540, 549, 712, 714, 715], "bound": [224, 261, 295, 476, 750], "leftmost": 224, "past": [224, 681, 750], "rightmost": [224, 662], "ix": 224, "getitem": 224, "red": [228, 256, 264, 270], "blue": [228, 256, 264, 270], "is_integ": [229, 230, 231, 233, 237, 238], "is_float": [229, 230, 232, 233, 237, 238], "is_numer": [229, 230, 231, 232, 233, 238], "is_object": [229, 230, 231, 232, 233, 237], "is_categor": [229, 231, 232, 233, 237, 238], "is_interv": [229, 230, 231, 232, 237, 238], "categoricalindex": [230, 297, 662, 694], "is_boolean": [230, 231, 232, 233, 237, 238], "watermelon": [230, 232, 238], "orang": [230, 238], "appl": [230, 232, 237, 238, 688], "peter": 230, "victor": 230, "elisabeth": 230, "mar": 230, "mango": [232, 238], "intervalindex": [233, 662, 694], "monotonic_increas": 234, "is_monotonic_increas": [234, 346], "decreas": [235, 347, 378, 710], "cold": 237, "sought": 239, "is_contain": 239, "detect": [240, 244, 675, 678, 704, 751], "return_index": [241, 250], "join_index": 241, "lexicograph": [241, 272, 713], "lh": 241, "rh": 241, "renamed_index": 245, "abl": [248, 746, 747], "partial": [248, 750], "renam": [248, 472], "quarter": [248, 631, 632], "cobra": 248, "frozenlist": 248, "itself": [250, 540, 549, 708], "sorted_index": 250, "1000": [250, 567, 708, 746, 750, 755], "allow_fil": 251, "green": [256, 269], "break": [261, 705], "pad": [262, 537, 550, 555, 567, 583, 652, 694, 708], "backfil": [262, 583], "distanc": [262, 493, 494], "broken": 262, "prefer": [262, 679, 680, 687, 704, 705, 710], "larger": [262, 511, 512, 652, 675, 679, 712, 752], "inexact": 262, "satisfi": [262, 704], "equat": 262, "unique_index": 262, "monotonic_index": 262, "abbc": 262, "non_monotonic_index": 262, "abcb": 262, "numeric_unique_index": 262, "sortord": 264, "from_fram": [265, 266, 269, 270, 273, 712], "cartesian": [268, 269, 270, 704, 710], "hi": [268, 712], "precip": 268, "nj": 268, "explicit": [268, 277, 750], "explicitli": [269, 653, 675, 706, 712, 746, 753, 755], "color": [269, 270], "purpl": 269, "effort": [272, 713], "fail": [272, 706, 752], "situat": [272, 592, 713, 755], "mi": 272, "non_monotonic_non_unique_idx": 272, "coerc": [272, 687, 688, 713, 746, 755], "unus": [277, 464, 472], "homogen": 277, "hashabl": 278, "been": [278, 708, 747, 752], "overridden": 278, "1d": [278, 333, 629, 631, 632, 653, 664, 708], "overrid": [278, 708], "extensiondtyp": [278, 737, 738, 755], "iteritem": 278, "to_list": 278, "tolist": 278, "to_append": 288, "convert_dtyp": 289, "cach": [289, 687], "recompil": 289, "incur": [289, 705], "overhead": [289, 704], "nest": [289, 474, 478, 710, 737, 742, 751], "decor": 289, "someth": [289, 540, 706, 710, 712, 750], "upcast": 289, "deriv": [289, 363], "lag": 292, "autocorrel": 292, "1438853844": 292, "9647548490": 292, "csf1": 293, "inclus": [295, 498, 662], "wherev": [295, 708], "gt": [295, 712, 750, 753], "lt": [295, 712, 750, 753], "alic": [295, 750], "bob": [295, 750], "carol": 295, "ev": 295, "anna": 295, "daniel": 295, "accessor": [297, 320, 694, 747], "Be": 297, "parent": [297, 708, 710, 712], "reorder_categori": 297, "remove_categori": 297, "set_categori": 297, "abcd": [297, 487, 554], "as_ord": [297, 466], "as_unord": 297, "ser1": [300, 302], "62": [300, 302], "ser2": [300, 302], "51": [300, 302], "20454263717316112": 300, "015750000000000004": 302, "uint8": [307, 665, 688, 712, 742, 752], "3rd": 312, "ind": [313, 430, 675], "beetl": [318, 350], "hippo": [318, 350], "discard": [318, 675], "kept": [319, 381, 704, 705, 710], "datetimelik": [320, 694], "1h": 320, "hour": [320, 454, 646], "na_sentinel": 326, "chunkedarrai": 331, "singlecolumnfram": [331, 708], "pd_categor": 332, "set_mask": 333, "skip": [333, 674, 675, 679, 688], "mark": [333, 705], "bit": [333, 681, 708], "_column": 333, "seriesgroupbi": [336, 693], "turn": [350, 681, 708], "therefor": [350, 472, 567, 704, 705, 708], "width": [363, 486, 531, 539, 548, 566, 567, 662, 708], "rabbit": [363, 502], "kitten": [363, 493], "puppi": [363, 493], "countries_popul": [378, 381], "montserrat": [378, 381], "5200": [378, 381], "quant_index": 392, "renamed_seri": 397, "numeric_seri": 397, "come": [401, 705, 706, 710], "bar": [401, 661, 706, 710], "baz": [401, 543, 706], "mimic": [421, 706], "interfac": [421, 708, 746, 750], "stai": 421, "pattern": [421, 490, 491, 495, 496, 501, 502, 530, 543, 550, 555, 556, 708], "inspir": 421, "stringr": [421, 566], "packag": [421, 704, 705, 712, 746, 747, 750, 753], "lib": [430, 712, 753], "stringarrai": 430, "0x7f796b0e7600": 430, "0x7f796b0e7750": 430, "half": 448, "divid": [448, 704], "500000": [448, 595, 597], "166667": 448, "996": [448, 746], "1132223": 453, "2023232": 453, "342234324": 453, "4234324": 453, "001132223": 453, "002023232": 453, "004234324": 453, "clear": [463, 708], "df1": [463, 667, 684, 712, 753], "letter": [463, 526, 559, 565], "df3": 463, "horizont": 463, "df4": 463, "polli": 463, "georg": [463, 540, 549, 750], "new_categori": [464, 471, 472], "seriesorindex": [464, 465, 466, 470, 471, 472, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "genericindex": [467, 474, 475, 476, 477, 478, 479, 480, 481, 482, 490, 708], "relationship": [469, 597, 708, 714, 717], "old": [470, 471, 472, 705], "reorder": [471, 472], "action": 472, "simultan": 472, "specialis": 472, "hand": [472, 710], "surpris": 472, "leaf": [473, 737, 740], "search_kei": [475, 477], "extract": [476, 503, 545, 553, 569, 694], "indexerror": 476, "possibli": [478, 710], "flat": 478, "criterion": 480, "lists_indic": 481, "ef": [483, 487], "bye": [483, 712], "thank": [483, 488, 750], "sentenc": [484, 532, 550, 555, 558, 559, 562, 563], "swapcas": [484, 532, 559, 562, 563, 694], "friend": 484, "goodby": [484, 488, 560, 561], "stringcolumn": [485, 708], "again": [485, 750], "aa": [485, 542], "bb": [485, 530, 542], "dd": [485, 675], "fillchar": [486, 531, 539, 548], "whitespac": [486, 499, 513, 514, 515, 516, 518, 520, 522, 523, 524, 527, 531, 533, 537, 538, 539, 540, 544, 548, 549, 550, 551, 555, 557, 560, 561, 675], "as_list": 487, "gram": [487, 535, 536], "bigram": [487, 535], "ngram": [487, 536, 694], "str_seri": [487, 535, 652], "efgh": 487, "xyz": [487, 489, 535], "bc": [487, 494], "cd": 487, "fg": 487, "gh": 487, "xy": 487, "yz": 487, "bcd": 487, "efg": 487, "fgh": 487, "world": [488, 492, 503, 531, 537, 538, 546, 548, 560, 561, 678], "\u00e9ee": 489, "97": 489, "121": 489, "122": 489, "50089": 489, "101": [489, 652, 712], "98": 489, "99": [489, 504, 537, 746], "pat": [490, 491, 495, 496, 502, 530, 534, 543, 545, 550, 555, 556], "flag": [490, 491, 496, 502, 534, 543, 746], "regular": [490, 491, 495, 496, 502, 534, 543, 550, 555, 556, 706, 751], "multilin": [490, 491, 496, 502, 534], "liter": [490, 491, 530, 543, 550, 555, 678], "anyth": [490, 540, 543, 549], "dotal": [490, 491, 496, 502, 534], "mous": 490, "hous": 490, "og": 490, "digit": [490, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 565, 704, 719, 722, 725, 728, 731, 734, 748], "might": [490, 746, 750], "35": [490, 646, 647, 648, 650, 670, 675, 676, 679, 680, 746], "escap": [491, 530], "aaba": [491, 712], "baca": [491, 712], "caba": [491, 712], "dollar": 491, "sign": [491, 567, 688, 748], "aab": 491, "ca": 491, "token": [492, 499, 535, 536, 537, 538, 544, 560, 651, 652, 694], "measur": [493, 494, 541, 597, 704, 710], "levenshtein": [493, 494], "edit": [493, 494], "www": 493, "cuelog": 493, "com": [493, 564, 565], "blog": 493, "doggi": 493, "kitti": 493, "pup": 493, "dogi": 493, "tell": 494, "symmetr": 494, "diagon": [494, 746], "cba": 494, "nativ": [495, 705], "bat": [495, 556], "bear": [495, 556], "captur": [496, 704], "subject": [496, 750], "c3": 496, "repl": [497, 498, 508, 543, 545, 554], "alphanumer": [497, 513, 514, 515, 516, 518, 520, 522, 523, 524, 527], "pear": 497, "plum": 497, "72": [497, 712], "100k": 497, "unicod": [498, 516, 523, 537, 562], "ordin": [498, 562], "maketran": [498, 562], "helper": [498, 562, 708, 710, 746], "caus": 498, "undefin": [498, 652, 750], "aeiou": 498, "0123456789": [498, 508], "aei": 498, "ou": 498, "456": [498, 521, 670, 675, 676, 679, 680], "_": [498, 499, 508, 528, 530, 531, 535, 536, 544, 548, 565, 665], "___ou": 498, "aei__": 498, "0123___789": 498, "min_token_length": 499, "theme": [499, 544, 706], "music": [499, 544], "substr": [500, 507, 546, 547, 552, 553], "fulli": [500, 507, 546, 547, 712, 748, 750], "failur": [500, 546], "ddb": [500, 507, 547], "inn": 501, "sea": 501, "word": [502, 526, 532, 558, 563, 651, 652, 710], "json_path": 504, "allow_single_quot": 504, "strip_quotes_from_single_str": 504, "missing_fields_as_nul": 504, "jsonpath": 504, "quot": [504, 675, 678], "doubl": [504, 678], "strip": [504, 533, 551, 681, 694], "book": [504, 535, 536, 652], "author": 504, "nigel": 504, "ree": 504, "titl": [504, 526, 532, 558, 563, 694], "centuri": 504, "95": 504, "evelyn": 504, "waugh": 504, "sword": 504, "honour": 504, "1234": [505, 506], "abcdef": [505, 506], "1a2": [505, 506], "cafe": [505, 506], "htoi": [505, 694], "4660": [505, 506], "11259375": [505, 506], "418": [505, 506], "51966": [505, 506], "traceback": [507, 547], "recent": [507, 547], "stdin": [507, 547], "modul": [507, 547, 694, 704, 705, 709, 710, 712, 755], "abb": [507, 547], "abcdefghij": 508, "ab_cdefghij": 508, "01_23456789": 508, "abcdefghij_": 508, "0123456789_": 508, "ip": [509, 510, 706], "168": [509, 510], "212336897": [509, 510], "167772161": [509, 510], "ip2int": [510, 694], "conson": [511, 512], "troubl": [511, 512, 708], "vowel": 512, "isalpha": [513, 515, 516, 518, 520, 522, 523, 524, 527, 694, 750], "isdigit": [513, 514, 515, 518, 519, 520, 522, 523, 524, 527, 694, 750], "isnumer": [513, 514, 515, 516, 518, 519, 520, 522, 524, 527, 694], "isdecim": [513, 514, 516, 518, 519, 520, 522, 523, 524, 527, 694, 750], "alphabet": [513, 514, 515, 516, 518, 520, 522, 523, 524, 527], "isinteg": [513, 514, 515, 516, 518, 522, 523, 524, 527, 694], "isfloat": [513, 514, 515, 516, 519, 520, 522, 523, 524, 527, 694], "islow": [513, 514, 515, 516, 518, 520, 523, 524, 527, 694, 750], "lowercas": [513, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 532, 558, 559, 563, 651], "isspac": [513, 514, 515, 516, 518, 520, 522, 523, 527, 694, 750], "isupp": [513, 514, 515, 516, 518, 520, 522, 523, 524, 694, 750], "uppercas": [513, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 532, 558, 559, 563], "one1": [513, 514, 523], "punctuat": [513, 537], "isalnum": [514, 515, 516, 518, 520, 522, 523, 524, 527, 694, 750], "\u00b3": [515, 516, 523], "\u2155": [515, 516, 523], "superscript": 516, "subscript": 516, "123213": 518, "123": [518, 521, 533, 540, 549, 557, 646, 647, 648, 649, 650, 670, 675, 676, 679, 680], "0001": 518, "234": [518, 646, 647, 648, 649, 650, 748], "plain": 518, "text": [518, 520, 651, 652, 670, 674, 675, 676, 679, 680, 681, 694, 709], "123def": 519, "0x2d3": 519, "plan": [520, 705, 750], "ipv4": 521, "address": [521, 706, 708], "127": 521, "255": 521, "leopard": [522, 526, 527], "golden": [522, 526, 527], "eagl": [522, 526, 527], "snake": [522, 526, 527], "quantiti": 523, "20201101": 525, "192011": 525, "18200111": 525, "2120": 525, "string_na_rep": 528, "sep_na_rep": 528, "themselv": [528, 706, 742], "interven": 528, "suppli": [528, 665, 750], "ghi": [528, 675, 748], "a_b_c": 528, "d_e_f": 528, "g_h_i": 528, "a_b_k": 528, "c_d": 528, "esc": 530, "ddbc": 530, "b_": 530, "wildcard": [530, 708, 712], "ai_": 531, "__": [531, 548], "capit": [532, 558, 559, 562, 563, 694], "to_strip": [533, 551, 557], "trail": [533, 551, 557, 681, 719, 725, 731], "newlin": [533, 551, 557, 705], "rstrip": [533, 557, 694], "ac": 534, "my": 535, "favorit": 535, "my_favorit": 535, "hhh": 535, "abc_def": 535, "def_xyz": 535, "xyz_hhh": 535, "white": 536, "this_i": 536, "is_th": 536, "best_book": 536, "do_low": [537, 651], "subword_token": 537, "around": [537, 540, 550, 555, 705, 708, 750], "p": 537, "symbol": 537, "cjk": 537, "cc": [537, 542], "cf": 537, "do_lower_cas": [537, 651, 652], "accent": 537, "h\u00e9llo": 537, "tworld": 537, "\u0103\u0107c\u0117\u00f1ted": 537, "up": [539, 550, 555, 620, 626, 687, 704, 705, 709, 712, 750, 755], "rjust": [539, 567, 694], "ljust": [539, 567, 694], "zfill": [539, 694], "prepend": [539, 567], "carib": 539, "tiger": 539, "rpartit": [540, 694], "linda": [540, 549], "van": [540, 549], "der": [540, 549], "berg": [540, 549], "pitt": [540, 549], "river": [540, 549], "999": [540, 549, 712, 746], "porter": 541, "stemmer": 541, "super": 541, "ccc": 542, "fuz": 543, "ba": 543, "bao": 543, "insid": [544, 653, 675, 681, 706, 749, 750], "back": [545, 675, 679, 680, 708, 712, 752, 755], "ref": [545, 572, 591, 617], "templat": 545, "a543": 545, "z756": 545, "av453": 545, "zv576": 545, "rfind": [547, 694, 750], "_________hello": 548, "___________rapid": 548, "version": [550, 555, 693, 705, 712, 746, 753], "tutori": [550, 712], "throughout": [550, 555], "slightli": [550, 675, 679, 680, 693, 704], "complex": [550, 653, 706, 708, 750], "lstrip": [551, 557, 694], "slice_replac": [552, 694], "koala": 552, "fox": 552, "chameleon": 552, "oala": 552, "ox": 552, "hameleon": 552, "ko": 552, "fo": 552, "ch": 552, "kaa": 552, "fx": 552, "caeen": 552, "kl": 552, "cm": 552, "ello": 553, "abdc": 554, "until": [554, 712], "xc": 554, "xdc": 554, "xcde": 554, "axc": 554, "axd": 554, "rsplit": [555, 694], "endswith": [556, 694, 750], "unmap": 562, "untouch": 562, "swapc1s": 562, "low": [562, 750], "nt": 562, "nc": 562, "swapc1": 562, "No": [564, 565, 652, 662, 708, 751], "2fb": [564, 565], "2fd": [564, 565], "20f": [564, 565], "2c6": [564, 565], "3a": [564, 565], "2f": [564, 565], "2frapid": [564, 565], "2fstart": [564, 565], "2fmedium": [564, 565], "medium": [564, 565, 662], "paragraph": 566, "expand_tabsbool": 566, "replace_whitespac": 566, "drop_whitespac": 566, "break_long_word": 566, "break_on_hyphen": 566, "str_wrap": 566, "expand_tab": 566, "nwrap": 566, "nto": 566, "reach": [567, 708, 710], "longer": [567, 706, 707], "001": 567, "children": [569, 708], "agg": [572, 615, 617, 712, 747, 749], "f1": [572, 591, 617], "quantil": [572, 591, 617, 713, 749], "__name__": [572, 591, 617], "q0": [572, 591, 617], "f2": [572, 591, 617], "score": 580, "90": [580, 712], "hole": 583, "gap": [583, 708], "introduc": [589, 705], "indetermin": 589, "mult": 592, "redund": [592, 713], "pairwis": [595, 597], "kendal": 595, "val1": [595, 597], "val2": [595, 597], "val3": [595, 597], "385727": 595, "714575": 595, "bia": 597, "comparison": [597, 704, 705, 710, 711, 751, 753], "understand": 597, "member": [597, 705], "invert": 597, "matric": [597, 746], "en": [597, 653], "wikipedia": 597, "wiki": 597, "estimation_of_covariance_matric": 597, "833333": 597, "enum": 607, "complement": [607, 754], "cumcount": 607, "seen": 607, "aaabba": 607, "round": [620, 626], "dt": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 699, 712, 747], "datetime_seri": [621, 622, 623, 624, 627, 636, 637, 638, 639, 642, 644, 645, 753], "2013": 628, "1y": 628, "2003": [628, 750], "2005": [628, 747], "2007": 628, "2008": 628, "2009": [628, 635], "2011": 628, "2012": [628, 687, 753], "serindex": 635, "to_datetim": 635, "53": 635, "000000000": [639, 687], "dt_sr": 641, "weekday_seri": 643, "12231312123": [646, 647, 648, 649, 650], "1231231231": [646, 647, 648, 649, 650], "1123236768712": [646, 647, 648, 649, 650], "2135656": [646, 647, 648, 649, 650], "3244334234": [646, 647, 648, 649, 650], "141": [646, 647, 648, 650], "231": [646, 647, 648, 649, 650], "13000": [646, 647, 648, 650], "48": [646, 647, 648, 650, 681, 755], "712": [646, 647, 648, 649, 650], "656": [646, 647, 648, 649, 650], "37": [646, 647, 648, 650, 753], "123000": [648, 650], "231000": [648, 650], "712000": [648, 650], "656000": [648, 650], "234000": [648, 650], "231312123": 649, "231231231": 649, "236768712": 649, "002135656": 649, "244334234": 649, "48912": 650, "21631": 650, "36768": 650, "2135": 650, "47534": 650, "hash_fil": 651, "bert": [651, 652], "subword": [651, 652], "vocabulari": [651, 652], "pretrain": [651, 652], "21x": 651, "util": [651, 652, 694, 711, 712], "hash_vocab_util": [651, 652], "hash_vocab": [651, 652], "max_length": 652, "max_num_row": 652, "add_special_token": 652, "return_tensor": 652, "return_token_type_id": 652, "batch": 652, "alloc": [652, 675, 679, 680, 708, 710, 750], "temporari": 652, "twice": [652, 704], "classif": 652, "model": [652, 708, 712], "do_not_trunc": 652, "huggingfac": 652, "pt": 652, "tf": 652, "tensorflow": 652, "pytorch": 652, "torch": 652, "input_id": 652, "fed": 652, "attention_mask": 652, "attend": 652, "vocab": 652, "txt": 652, "voc_hash": 652, "cudf_token": 652, "tokenizer_output": 652, "1142": 652, "1110": 652, "1103": 652, "102": [652, 712], "1436": 652, "1520": 652, "featur": [653, 704, 705, 706, 754], "readthedoc": 653, "cudapysupport": 653, "cmath": 653, "libcudf": [653, 707, 708], "ptx": 653, "sin": 653, "co": 653, "tan": 653, "lgamma": 653, "global": [653, 754], "known": [653, 687], "count_if_gt_3": 653, "rownam": 661, "colnam": 661, "cross": 661, "tabul": 661, "factor": 661, "dull": 661, "shini": 661, "retbin": 662, "include_lowest": 662, "segment": 662, "go": [662, 704, 706, 708, 711, 746, 750], "continu": [662, 681, 746], "criteria": [662, 677], "extens": [662, 675], "done": [662, 712], "994": [662, 746], "bad": 662, "unspecifi": 663, "fortran": [664, 746], "prefix_sep": 665, "dummy_na": 665, "spars": [665, 751], "drop_first": 665, "hot": 665, "dummi": 665, "value1": 665, "value2": 665, "a_value1": 665, "a_value2": 665, "a_non": 665, "a_1": 665, "a_2": 665, "a_nan": 665, "a_nul": 665, "max_file_s": 667, "file_name_prefix": 667, "exceed": 667, "writer": [667, 696, 704, 712, 752], "gb": 667, "mandatori": 667, "context": 667, "cw": 667, "write_t": 667, "manual": [667, 706], "num_row": [670, 674, 679, 704], "num_row_group": 670, "row_group": [670, 680], "num1": [670, 675, 676, 679, 680], "13t12": [670, 675, 676, 679, 680], "5451": [670, 675, 676, 679, 680], "14t12": [670, 675, 676, 679, 680], "5784": [670, 675, 676, 679, 680], "789": [670, 675, 676, 679, 680], "15t18": [670, 675, 676, 679, 680], "6117": [670, 675, 676, 679, 680], "myvarnam": 671, "myvalnam": 671, "filepath_or_buff": [674, 675, 679, 680, 681], "skiprow": [674, 675, 679], "load": [674, 675, 676, 678, 679, 680, 711, 712], "avro": [674, 694, 752], "pathlib": [674, 675, 677, 678, 679, 680, 681, 712], "py": [674, 675, 677, 678, 679, 680, 681, 704, 710, 712, 753], "_path": [674, 675, 677, 678, 679, 680, 681], "localpath": [674, 675, 677, 678, 679, 680, 681], "ftp": [674, 675, 678, 679, 680, 681], "bytesio": [674, 679, 680], "parser": [674, 678, 679, 680], "remot": [674, 675, 679, 680, 706], "pandavro": 674, "pandas_df": 674, "to_avro": 674, "index_col": 675, "usecol": 675, "mangle_dupe_col": 675, "true_valu": 675, "false_valu": 675, "skipinitialspac": 675, "skipfoot": 675, "keep_default_na": 675, "na_filt": 675, "skip_blank_lin": 675, "parse_d": 675, "thousand": [675, 746], "linetermin": 675, "quotechar": 675, "doublequot": 675, "comment": [675, 706], "delim_whitespac": 675, "byte_rang": [675, 678, 681], "use_python_file_object": [675, 679, 680], "bytes_per_thread": [675, 679, 680], "comma": 675, "seper": 675, "recogn": 675, "qnan": 675, "unusu": 675, "mm": 675, "european": 675, "decompress": [675, 678, 752], "gz": [675, 678], "quote_minim": 675, "quote_al": 675, "quote_non": 675, "altogeth": [675, 708], "arrow": [675, 679, 680, 708, 711, 751], "pythonfil": [675, 679, 680], "abstractbufferedfil": [675, 679, 680], "throughput": [675, 679, 680], "decompos": [675, 679, 680, 710], "transfer": [675, 679, 680, 752], "pool": [675, 679, 680], "268435456": [675, 679, 680], "to_csv": [675, 712, 752], "fp": 675, "__fspath__": 677, "protocol": 677, "term": [677, 678, 704, 750, 755], "to_hdf": 677, "auto": [678, 706], "keep_quot": 678, "cudf_experiment": 678, "to_json": 678, "typ": [678, 719, 720, 725, 726, 731, 732, 737, 739, 742, 744], "recov": 678, "convert_ax": 678, "proper": 678, "convert_d": 678, "datelik": 678, "_at": 678, "_time": 678, "keep_default_d": 678, "precise_float": 678, "strtod": 678, "py3": 678, "jsonread": 678, "wrap": [678, 694, 705, 712, 750], "json_str": 678, "v1": 678, "v2": 678, "k1": 678, "use_index": 679, "timestamp_typ": 679, "predic": [679, 680, 710], "disjunct": [679, 680], "dnf": [679, 680], "conjunct": [679, 680, 705, 750], "AND": [679, 680], "outermost": 679, "OR": [679, 680], "notat": [679, 680], "seek": 679, "to_orc": [679, 752], "strings_to_categor": 680, "use_pandas_metadata": 680, "categorical_partit": 680, "open_file_opt": 680, "gdf_categori": 680, "gdf_string": 680, "discourag": 680, "open_parquet_fil": 680, "deactiv": 680, "precach": 680, "precache_opt": 680, "open_file_func": 680, "read_parquet_metadata": 680, "strip_delimit": 681, "compression_offset": 681, "datasourc": 681, "bgzip": 681, "virtual": 681, "baseexcept": 682, "check_dtyp": [683, 684, 686], "check_column_typ": [683, 684], "equiv": [683, 684, 685, 686], "check_less_precis": [683, 685, 686], "check_exact": [683, 684, 685, 686], "check_datetimelike_compat": [683, 684, 686], "check_categor": [683, 684, 685, 686], "check_category_ord": [683, 686], "rtol": [683, 684, 685, 686], "1e": [683, 684, 685, 686], "atol": [683, 684, 685, 686], "columnbas": [683, 684, 685, 686, 708], "intend": [683, 684, 685, 686, 708, 750], "inferred_typ": [683, 684, 685, 686], "idl": [683, 684, 686], "check_datetime_like_compat": [683, 684, 686], "appropri": [683, 684, 685, 686, 706, 708], "assert": [683, 684, 685, 686, 710], "messag": [683, 684, 685, 686, 705], "check_index_typ": [684, 686], "check_frame_typ": 684, "check_nam": [684, 685, 686], "by_block": 684, "check_lik": 684, "assertionerror": [684, 685, 686], "hitch": [684, 685, 686], "check_ord": 685, "id1": 685, "id2": 685, "check_series_typ": 686, "sr1": 686, "sr2": 686, "utc": 687, "infer_datetime_format": 687, "eg": 687, "bug": [687, 705], "strftime": 687, "denot": 687, "off": [687, 706, 712, 752], "10x": 687, "succeed": 687, "assembl": 687, "abbrevi": 687, "plural": 687, "2015": 687, "1490195805": 687, "22t15": 687, "1490195805433502912": 687, "1780": 687, "20t01": 687, "494253056": 687, "polici": [688, 705], "notifi": 688, "encount": [688, 705], "unsign": [688, 748], "down": [688, 704], "datatyp": 688, "decoupl": 688, "3e3": 688, "3000": 688, "cudf": [693, 694, 703, 705, 707, 708, 709, 713, 748, 749, 751, 752, 754], "usual": [693, 704], "permit": 693, "restrict": 693, "publicli": 694, "namespac": [694, 699, 706], "merg": [694, 704, 708, 710, 712, 747, 755], "timedeltaindex": 694, "deal": 694, "roll": [694, 708, 747, 751], "subwordtoken": [694, 711], "stringmethod": 694, "byte_count": 694, "character_ngram": 694, "character_token": 694, "code_point": 694, "detoken": 694, "edit_dist": 694, "edit_distance_matrix": 694, "filter_alphanum": 694, "filter_charact": 694, "filter_token": 694, "findal": 694, "find_multipl": 694, "get_json_object": 694, "hex_to_int": 694, "ip_to_int": 694, "is_conson": 694, "is_vowel": 694, "isempti": 694, "ishex": 694, "isipv4": 694, "istimestamp": 694, "istitl": [694, 750], "ngrams_token": 694, "normalize_charact": 694, "normalize_spac": 694, "porter_stemmer_measur": 694, "replace_token": 694, "replace_with_backref": 694, "rindex": 694, "slice_from": 694, "token_count": 694, "translat": [694, 708], "url_decod": 694, "url_encod": 694, "listmethod": 694, "structmethod": 694, "explod": 694, "get_opt": [694, 709], "set_opt": [694, 754], "describe_opt": [694, 754], "variant": 695, "thereof": 695, "reader": [696, 712, 752], "acceler": [696, 707, 711, 712, 750, 752], "cpu": [696, 712, 747, 752, 755], "futur": [696, 704, 705, 707, 712, 750, 753], "goal": [704, 705, 707], "repositori": 704, "pytest": 704, "plugin": [704, 706, 710], "framework": 704, "seamless": 704, "experi": [704, 706, 750], "develop": [704, 705, 706, 708, 709, 710, 711, 746, 750, 751], "public": [704, 706], "former": [704, 706], "macro": 704, "vi": 704, "\u00e0": 704, "help": [704, 705, 706], "quantifi": 704, "minim": [704, 705, 706], "bind": [704, 708], "focu": [704, 746], "footprint": 704, "At": [704, 707, 708, 750], "stabil": [704, 705], "free": [704, 710], "bench_class": 704, "eval": 704, "bench_datafram": 704, "hierarchi": [704, 708], "bench_frame_or_index": 704, "trigger": 704, "veri": [704, 746, 749, 750], "characterist": 704, "_intern": 704, "_apply_boolean_mask": 704, "bench_dataframe_intern": 704, "broadli": 704, "speak": 704, "live": [704, 705], "bench_io": 704, "discov": 704, "test_": [704, 710], "bench_": 704, "instal": [704, 706, 750], "termin": 704, "autosav": 704, "xxxx_": 704, "xxxx": 704, "yyyi": 704, "command": [704, 706], "short": [704, 706, 712], "param": [704, 710], "config": [704, 705], "hard": 704, "advertis": [704, 747], "littl": [704, 708], "natur": [704, 753], "meaning": 704, "care": 704, "interchang": [704, 708], "demonstr": [704, 706, 750], "bench_foo": 704, "six": 704, "did": [704, 750], "interest": 704, "cover": [704, 706, 707, 710, 750], "baselin": [704, 712], "coverag": [704, 710], "tweak": 704, "debug": [704, 705, 708], "num_col": 704, "aspect": 704, "want": [704, 706, 712, 746, 750, 753], "quantit": 704, "easi": [704, 706, 746, 747], "environ": [704, 706, 752], "cudf_benchmarks_use_panda": 704, "easili": [704, 706, 711], "simpli": [704, 706, 708, 746], "remap": 704, "why": 704, "critic": 704, "ci": [704, 712], "significantli": 704, "cycl": [704, 705], "balanc": 704, "cudf_benchmarks_debug_onli": 704, "advantag": [704, 746], "redefin": [704, 750], "crucial": 704, "although": 704, "suit": 704, "guidelin": [704, 706], "spy": 704, "svg": 704, "invoc": 704, "tool": [704, 705, 707], "strength": 704, "somewhat": 704, "workflow": [704, 705, 711, 712, 751], "encourag": [704, 706, 746, 747], "discuss": [704, 706, 707, 708, 710, 712, 753], "hood": [704, 706, 707, 708, 712], "magic": 704, "pytest_cas": 704, "programat": 704, "unambigu": 704, "classnam": 704, "_dtype_": 704, "_nulls_": 704, "_cols_": 704, "_rows_": 704, "dataframe_dtype_int_rows_100": 704, "cumbersom": [704, 708], "moreov": 704, "embed": 704, "problem": [704, 710, 750], "essenti": [704, 708, 750], "dataframe_dtype_int_cols_6": 704, "focus": 705, "high": [705, 708], "overview": [705, 711, 751], "practic": [705, 707, 708, 710, 712], "subpackag": [705, 710], "_lib": 705, "emploi": 705, "linter": 705, "manag": [705, 708, 750], "pre": [705, 750], "commit": 705, "strongli": [705, 706], "prior": 705, "yaml": 705, "repo": 705, "truth": 705, "lint": [705, 706], "flake8": 705, "complianc": 705, "black": 705, "formatt": 705, "isort": 705, "mypi": 705, "static": 705, "hint": 705, "difficult": [705, 747, 750], "pydocstyl": [705, 706], "docstr": [705, 707], "pyproject": 705, "toml": 705, "setup": [705, 712], "cfg": 705, "project": [705, 708, 747], "parti": 705, "addition": [705, 707, 708, 747], "hook": 705, "overal": [705, 707], "releas": [705, 750], "prevent": 705, "unexpect": 705, "sure": [705, 746, 750], "emit": 705, "futurewarn": [705, 712, 753], "opportun": 705, "thing": [705, 747, 750], "new_foo": 705, "signal": 705, "deprecationwarn": 705, "hidden": 705, "__main__": 705, "analog": [705, 708], "sometim": [705, 712, 746, 750], "latest": 705, "reason": [705, 706, 708, 752], "exorbit": 705, "runtim": [705, 750], "premium": 705, "believ": 705, "perfect": 705, "infeas": [705, 708], "undesir": 705, "consult": 705, "team": 705, "assess": 705, "proce": [705, 712, 746, 750], "substanti": 705, "power": [705, 706, 719, 725, 731], "friendli": 705, "profil": [705, 707], "expos": [705, 708, 746, 750, 752], "pxd": [705, 708], "declar": [705, 708], "pyx": 705, "thin": [705, 750], "layer": [705, 707, 712], "rare": 705, "benefit": [705, 706, 710], "happen": [705, 750, 753], "quit": 705, "justifi": 705, "benchmark": [705, 707, 711], "suffici": [705, 706], "mention": [705, 708, 747, 750], "logic_error": 705, "cuda_error": 705, "runtimeerror": 705, "payload": 705, "brittl": 705, "compromis": 705, "adopt": 705, "strategi": 705, "roadmap": 705, "diversifi": 705, "inlin": 706, "restructuredtext": 706, "myst": 706, "sphinx": 706, "contribut": [706, 707, 711], "lieu": 706, "explan": [706, 709], "commonli": [706, 755], "brief": 706, "_strongly_": 706, "numpydoc": 706, "scenario": 706, "getter": 706, "That": 706, "inherit": [706, 708], "codebas": 706, "pull": 706, "aim": 706, "api_doc": 706, "rst": 706, "discover": 706, "autosummari": 706, "api1": 706, "api2": 706, "render": 706, "layout": [706, 708], "stub": 706, "currentmodul": 706, "autofunct": 706, "autodoc": 706, "approach": [706, 708, 710, 750], "facilit": [706, 708], "bodi": 706, "api_nam": 706, "dedic": 706, "superset": 706, "markdown": 706, "syntax": [706, 750], "link": 706, "anchor": 706, "instruct": 706, "nb": 706, "straightforward": 706, "navig": [706, 751], "shell": 706, "server": 706, "Then": 706, "web": 706, "browser": 706, "localhost": 706, "8000": 706, "machin": [706, 712, 747], "visibl": 706, "network": 706, "ssh": 706, "local_port": 706, "remote_port": 706, "remote_ip": 706, "enforc": [706, 712], "regard": 706, "main": [707, 708, 710, 750], "dask_cudf": [707, 712, 747], "cudf_kafka": 707, "custreamz": 707, "robustli": 707, "guidanc": 707, "topic": 707, "cython": 707, "publish": 707, "advanc": [707, 746, 747, 750], "serv": 708, "face": 708, "bridg": 708, "review": [708, 710], "role": 708, "requisit": 708, "tradeoff": 708, "tie": 708, "holist": 708, "diagram": 708, "princip": 708, "eponym": 708, "tabular": [708, 712, 750], "columnar": [708, 711, 712], "meanwhil": 708, "abstract": 708, "materi": 708, "preliminari": 708, "let": [708, 746, 750], "dive": 708, "deeper": 708, "surmis": 708, "diamond": 708, "simpler": [708, 750], "flatten": 708, "ve": [708, 712, 750], "highlight": [708, 750], "concret": [708, 750], "eventu": 708, "almost": 708, "rewrit": 708, "alon": 708, "reimplement": 708, "behav": 708, "instanti": 708, "unfortun": 708, "mimick": 708, "__new__": 708, "tree": 708, "masquerad": 708, "stack": 708, "glue": 708, "own": [708, 752], "semant": 708, "apach": [708, 711, 712], "conduc": 708, "concept": [708, 712], "extent": 708, "interoper": [708, 711, 751], "simplifi": 708, "numericalcolumn": 708, "datetimecolumn": 708, "decis": 708, "4000": 708, "sizeof": 708, "chees": 708, "preexist": 708, "knowledg": [708, 750], "structdtyp": [708, 748], "decimaldtyp": 708, "intervaldtyp": 708, "contigu": [708, 746], "rmm": 708, "devicebuff": 708, "interact": [708, 712, 750], "explanatori": 708, "column_view": 708, "table_view": 708, "question": [708, 750], "trivial": 708, "descent": 708, "whole": 708, "fact": [708, 753], "act": 708, "reduct": [708, 747], "scan": 708, "bypass": 708, "straight": 708, "resampl": 708, "composit": 708, "explain": 709, "_register_opt": 709, "yield": [709, 710, 712, 755], "fixtur": 709, "clean": 709, "cov": [710, 749], "report": [710, 747, 755], "upload": 710, "codecov": 710, "pr": 710, "subdirectori": 710, "test_index": 710, "verifi": 710, "_max": 710, "excess": 710, "branch": 710, "obfusc": 710, "Such": 710, "alongsid": 710, "virtu": 710, "signific": 710, "lazili": 710, "wherea": 710, "primit": 710, "mind": [710, 753], "ground": 710, "test_some_properti": 710, "some_property_of": 710, "aris": 710, "nonempti": 710, "capabl": [710, 750], "potenti": [710, 750], "get_valu": 710, "test_even": 710, "test_odd": 710, "basi": 710, "_util": 710, "assert_eq": 710, "biggest": 710, "hammer": 710, "assert_": 710, "_equal": 710, "assert_exceptions_equ": 710, "scientist": 711, "program": 711, "dask": [711, 751], "introduct": 712, "gear": 712, "mainli": 712, "smooth": [712, 751], "cluster": [712, 747], "enough": [712, 747, 750], "comfort": [712, 750], "spread": [712, 747], "portion": [712, 750], "borrow": 712, "adapt": [712, 750], "cheatsheet": 712, "from_cudf": 712, "npartit": [712, 747], "thread_load": 712, "cuh": 712, "jitifi": 712, "thread_stor": 712, "ddf": 712, "dask_gdf": 712, "met": 712, "cudf_compar": 712, "dask_cudf_compar": 712, "isin": 712, "gdf1": 712, "rand": [712, 753], "082654": 712, "967955": 712, "399417": 712, "441425": 712, "784297": 712, "793582": 712, "070303": 712, "271711": 712, "gdf2": 712, "opt": [712, 753], "conda": [712, 750, 753], "env": [712, 753], "python3": [712, 753], "site": [712, 753], "column_accessor": 712, "251": 712, "343382": 712, "003700": 712, "20043": 712, "581614": 712, "907812": 712, "101512": 712, "24179": 712, "224180": 712, "var": [712, 749], "666666666666666": 712, "6666666666666667": 712, "map_partit": [712, 747], "add_ten": 712, "progress": 712, "ds2": 712, "restor": 712, "post": [712, 749], "ddf_a": 712, "ddf_b": 712, "paradigm": 712, "agg_col1": 712, "agg_col2": 712, "54": 712, "73": 712, "date_df": 712, "986051": 712, "232034": 712, "397617": 712, "103839": 712, "date_ddf": 712, "grade": 712, "dgdf": 712, "to_numpi": 712, "to_arrow": [712, 719, 725, 731, 737, 742, 755], "example_output": 712, "mkdir": 712, "foo_dask": 712, "star": 712, "temp_parquet": 712, "ddf_parquet_fil": 712, "cudf_root": 712, "orc_fil": 712, "testorcfil": 712, "test1": 712, "boolean1": 712, "byte1": 712, "short1": 712, "int1": 712, "long1": 712, "float1": 712, "double1": 712, "bytes1": 712, "string1": 712, "middl": 712, "1024": 712, "65536": 712, "2048": [712, 746], "100000000": 712, "chani": 712, "spark": 712, "lazi": 712, "moment": 712, "graph": 712, "delai": 712, "activ": 712, "background": [712, 750], "system": 712, "finish": 712, "downstream": [712, 746], "contract": 712, "upstream": 712, "snippet": 712, "localcudaclust": 712, "worker": 712, "beyond": 712, "scope": [712, 750], "client": 712, "dask_cuda": 712, "2022": 712, "878": 712, "preload": 712, "info": 712, "939": 712, "940": 712, "981": 712, "002": 712, "032": 712, "10000000": 712, "ddf2": 712, "2000000": 712, "8000000": 712, "9999999": 712, "nvidia": 712, "smi": 712, "sun": 712, "nov": 712, "495": 712, "bu": 712, "disp": 712, "volatil": 712, "uncorr": 712, "ecc": 712, "fan": 712, "perf": 712, "pwr": 712, "cap": 712, "mig": 712, "tesla": 712, "v100": 712, "pcie": 712, "00000000": 712, "26c": 712, "p0": 712, "32w": 712, "250w": 712, "1471mib": 712, "32510mib": 712, "27c": 712, "33w": 712, "307mib": 712, "30c": 712, "1458mib": 712, "24c": 712, "34w": 712, "85": 712, "gi": 712, "pid": 712, "twenti": 712, "800": [712, 746], "sleep": 712, "39": 712, "1875mib": 712, "711mib": 712, "38w": 712, "1862mib": 712, "25c": 712, "proceed": 712, "ll": [712, 746, 750], "ddf1": 712, "randint": [712, 755], "spent": 712, "results_ddf": 712, "sooner": 712, "had": 712, "doneandnotdonefutur": 712, "7479f2dc5c5c299e511e3b6192df199c": 712, "not_don": 712, "ordered": 714, "categrocialdtyp": [714, 716], "pd_dtype": [714, 716], "cudf_dtyp": [714, 716], "decimal128": [719, 720, 725, 726, 731, 732, 748, 752], "0042": [719, 725, 731], "1729": [719, 725, 731], "4200": [719, 725, 731], "0051": [719, 725, 731], "decimal128_dtyp": 719, "pa_typ": [719, 720, 725, 726, 731, 732], "decimal32dtyp": [719, 720, 731, 732, 748], "decimal64dtyp": [719, 720, 725, 726, 748], "items": [719, 725, 731], "decimal32": [725, 752], "decimal32_dtyp": 725, "decimal128dtyp": [725, 726, 731, 732, 748], "decimal64": [731, 752], "decimal64_dtyp": 731, "element_typ": 737, "list_dtyp": [737, 739, 741], "nested_list_dtyp": 737, "deep_nested_typ": [737, 738, 740], "listtyp": [737, 739, 741], "arrow_typ": [737, 739], "infer_typ": [737, 739], "leaf_typ": 737, "struct_dtyp": [742, 743], "nested_struct_dtyp": 742, "dict_data": 742, "structtyp": [742, 744, 745], "pa_struct_typ": [742, 744], "struct_typ": [742, 745], "notebook": [746, 750], "introductori": 746, "algebra": 746, "timeit": 746, "__version__": 746, "cupy_from_dlpack": 746, "from_dlpack": 746, "fromdlpack": 746, "to_cupi": 746, "500": 746, "arr_cupi": 746, "to_dlpack": 746, "193": 746, "\u00b5": 746, "dev": 746, "640": [746, 755], "87": 746, "638": 746, "501": 746, "1001": 746, "502": 746, "1002": 746, "9997": 746, "10497": 746, "10997": 746, "9998": 746, "10498": 746, "10998": 746, "9999": 746, "10499": 746, "10999": 746, "__cuda_array_interface__": [746, 750], "leverag": [746, 750, 755], "cola_cupi": 746, "93": 746, "332": 746, "219": 746, "969": 746, "209": 746, "83": 746, "norm": 746, "reshaped_arr": 746, "197": 746, "198": 746, "199": 746, "201": 746, "202": 746, "397": 746, "398": 746, "399": 746, "401": 746, "402": 746, "597": 746, "598": 746, "599": 746, "9400": 746, "9401": 746, "9402": 746, "9597": 746, "9598": 746, "9599": 746, "9600": 746, "9601": 746, "9602": 746, "9797": 746, "9798": 746, "9799": 746, "9800": 746, "9801": 746, "9802": 746, "603": 746, "804": 746, "1005": [746, 750], "1206": 746, "1407": 746, "1608": 746, "1809": 746, "2211": 746, "2412": 746, "2613": 746, "2814": 746, "3015": 746, "3216": 746, "3417": 746, "3618": 746, "3819": 746, "4020": 746, "4221": 746, "4422": 746, "4623": 746, "4824": 746, "5025": 746, "5226": 746, "5427": 746, "5628": 746, "5829": 746, "6030": 746, "6231": 746, "6432": 746, "6633": 746, "6834": 746, "7035": 746, "7236": 746, "7437": 746, "7638": 746, "7839": 746, "8040": 746, "8241": 746, "8442": 746, "8643": 746, "8844": 746, "9045": 746, "9246": 746, "9447": 746, "9648": 746, "9849": 746, "linalg": 746, "577306": 746, "967739": 746, "easiest": [746, 750], "beforehand": 746, "reshaped_df": 746, "190": 746, "191": 746, "192": 746, "194": 746, "195": 746, "196": 746, "203": 746, "204": 746, "205": 746, "206": 746, "207": 746, "208": 746, "391": 746, "392": 746, "393": 746, "394": 746, "395": 746, "396": 746, "403": 746, "405": 746, "406": 746, "407": 746, "408": 746, "409": 746, "590": 746, "591": 746, "592": 746, "593": 746, "594": 746, "595": 746, "596": 746, "600": 746, "601": 746, "602": 746, "604": 746, "605": 746, "606": 746, "607": 746, "608": 746, "609": 746, "790": 746, "791": 746, "792": 746, "793": 746, "794": 746, "795": 746, "796": 746, "797": 746, "798": 746, "799": 746, "801": 746, "802": 746, "803": 746, "805": 746, "806": 746, "807": 746, "808": 746, "809": 746, "990": 746, "991": 746, "992": 746, "993": 746, "995": 746, "997": [746, 750], "998": 746, "isfortran": 746, "fortran_arr": 746, "asfortranarrai": 746, "88": 746, "todlpack": 746, "91": 746, "ecosystem": [746, 750], "isn": 746, "matur": 746, "hundr": 746, "wouldn": 746, "previous": 746, "new_arr": 746, "19900": 746, "59900": 746, "99900": 746, "139900": 746, "179900": 746, "219900": 746, "259900": 746, "299900": 746, "339900": 746, "379900": 746, "419900": 746, "459900": 746, "499900": 746, "539900": 746, "579900": 746, "619900": 746, "659900": 746, "699900": 746, "739900": 746, "779900": 746, "819900": 746, "859900": 746, "899900": 746, "939900": 746, "979900": 746, "1019900": 746, "1059900": 746, "1099900": 746, "1139900": 746, "1179900": 746, "1219900": 746, "1259900": 746, "1299900": 746, "1339900": 746, "1379900": 746, "1419900": 746, "1459900": 746, "1499900": 746, "1539900": 746, "1579900": 746, "1619900": 746, "1659900": 746, "1699900": 746, "1739900": 746, "1779900": 746, "1819900": 746, "1859900": 746, "1899900": 746, "1939900": 746, "1979900": 746, "seamlessli": 746, "move": [746, 750], "enorm": 746, "sacrif": 746, "cleanli": 746, "cudf_to_cupy_sparse_matrix": 746, "sparseformat": 746, "_sparse_constructor": 746, "csc_matrix": 746, "csr_matrix": 746, "illustr": 746, "nonzero": 746, "arr": [746, 750], "a0": 746, "a4": 746, "a5": 746, "a6": 746, "a7": 746, "a8": 746, "a9": 746, "a10": 746, "a11": 746, "a12": 746, "a13": 746, "a14": 746, "a15": 746, "a16": 746, "a17": 746, "a18": 746, "a19": 746, "015911": 746, "202186": 746, "665527": 746, "845584": 746, "706308": 746, "221929": 746, "957103": 746, "384641": 746, "178298": 746, "sparse_data": 746, "221928949825931": 746, "386": 746, "348687775613373": 746, "259": 746, "419056061189738": 746, "135": 746, "551628550704209": 746, "519": 746, "067222864357332": 746, "137": 746, "9544753001371693": 746, "181440858603244": 746, "143": 746, "796528591074529": 746, "112702341098391": 746, "146": 746, "152020591785767": 746, "274": 746, "812753050058942": 746, "530": 746, "3489929569706867": 746, "609509849097609": 746, "148": 746, "022270886288795": 746, "277": 746, "881029000505813": 746, "996324112601226": 746, "477613070769417": 746, "534": 746, "692813750969182": 746, "154": 746, "78699119556277": 746, "413": 746, "832427588256862": 746, "2165579301920006": 746, "1154": 746, "620140339691506": 746, "1922": 746, "5414379322040475": 746, "1155": 746, "843686498973783": 746, "900": 746, "213859765553802": 746, "8315": 746, "5376113751290443": 746, "8699": 746, "782338574502947": 746, "9084": 746, "5245604965013553": 746, "8701": 746, "030042414860342": 746, "8447": 746, "10013329768228774": 746, "8575": 746, "4315472129801488": 746, "9186": 746, "586819207314888": 746, "9698": 746, "322897907321754": 746, "9571": 746, "549621808565031": 746, "9699": 746, "6472570131439431": 746, "9955": 746, "734103618663757": 746, "9444": 746, "485930116207062": 746, "9828": 746, "395054159269717": 746, "9830": 746, "052260103458554": 746, "4726883274076936": 746, "9193": 746, "641650665767851": 746, "9321": 746, "499454791017216": 746, "9195": 746, "0741625149263323": 746, "9454": 746, "215481294038779": 746, "9582": 746, "863540081673409": 746, "9840": 746, "117960520933725": 746, "9338": 746, "013600462916327771": 746, "9979": 746, "4278868824585373": 746, "9212": 746, "819434952550942": 746, "9853": 746, "43331650230166385": 746, "orchestr": 747, "cohes": 747, "ingest": 747, "decent": 747, "dayofweek": 747, "expens": 747, "cudf_df": 747, "persist": 747, "visual": 747, "comprehens": 747, "track": 747, "certainli": 747, "slight": 747, "inconsist": 747, "tracker": 747, "reus": 747, "newer": 747, "mislead": [747, 748], "frustrat": 747, "apolog": 747, "uint32": [748, 752], "durat": 748, "023": 748, "max_precis": 748, "psr": 748, "pq": 748, "exclus": 749, "nuisanc": 749, "gb1": 749, "gb2": 749, "gb3": 749, "extern": 749, "penalti": 749, "disambigu": 749, "ok": 749, "corr": 749, "866025": 749, "idxmin": 749, "idxmax": 749, "nuniqu": 749, "nth": 749, "randomdata": 750, "box": 750, "broader": 750, "pydata": [750, 751], "varieti": 750, "devicendarrai": 750, "offer": 750, "const": 750, "unari": [750, 755], "singleton": 750, "f_null_sensit": 750, "experiment": [750, 752], "channel": 750, "restart": 750, "string_udfs_en": 750, "_string_udfs_en": 750, "some_str": 750, "__contains__": 750, "grid": 750, "in_col": 750, "out_col": 750, "guard": 750, "cuda_array_interfac": 750, "963": 750, "9630": 750, "977": 750, "1026": 750, "980": 750, "9770": 750, "1048": 750, "1019": 750, "10480": 750, "1078": 750, "960": 750, "985": 750, "10780": 750, "979": 750, "982": 750, "1011": 750, "9790": 750, "theoret": 750, "spot": 750, "area": 750, "pipelin": 750, "job": 750, "entrypoint": 750, "onto": 750, "fulfil": 750, "ultim": 750, "428571429": 750, "constraint": 750, "str_df": 750, "fairli": 750, "streamlin": 750, "walk": 750, "conditional_add": 750, "heart": 750, "readi": 750, "successfulli": 750, "pessimist": 750, "explor": 750, "gpu_add": 750, "matter": 750, "1968": 750, "1961": 750, "propog": 750, "slide": 750, "answer": 750, "stock": 750, "mathemat": 750, "example_func": 750, "65": 750, "549834435": 750, "615773106": 750, "681145748": 750, "745966692": 750, "810249676": 750, "874007874": 750, "937253933": 750, "apply_group": 750, "drawn": 750, "691674": 750, "dan": 750, "958380": 750, "480099": 750, "729580": 750, "473370": 750, "xavier": 750, "767454": 750, "067479": 750, "380205": 750, "970850": 750, "sarah": 750, "342905": 750, "rolling_avg_": 750, "rolling_avg": 750, "win_siz": 750, "801430": 750, "632337": 750, "081887": 750, "933157": 750, "quinn": 750, "420826": 750, "184805": 750, "702013": 750, "837494": 750, "wendi": 750, "057540": 750, "401733": 750, "913899": 750, "ursula": 750, "466252": 750, "009502": 750, "725581": 750, "405245": 750, "271319": 750, "multiply_by_5": 750, "empty_lik": 750, "nondecim": 750, "outlin": 750, "github": 750, "properli": 750, "lot": 750, "hopefulli": 750, "feel": 750, "applymap": 751, "histogram": 751, "tip": 751, "magnum": 751, "gpudirect": 751, "integr": 751, "nvcomp": 751, "interweav": 751, "writer\u00b9": 752, "reader\u00b9": 752, "uint16": 752, "\u00b9": 752, "gd": 752, "dma": 752, "bounc": 752, "sdk": 752, "download": 752, "toolkit": 752, "libcudf_cufile_polici": 752, "kvikio": 752, "rapidsai": 752, "read_avro": 752, "libcudf_cufile_thread_count": 752, "libcudf_cufile_slice_s": 752, "4mb": 752, "libcudf_nvcomp_polici": 752, "deem": 752, "whenev": 752, "deflat": 752, "20120101": 753, "cumprod": 753, "prod": 753, "wish": 753, "dff": 753, "randn": 753, "993218": 753, "650563": 753, "690531": 753, "450115": 753, "566359": 753, "155397": 753, "554907": 753, "209379": 753, "408842": 753, "774219": 753, "995455": 753, "829050": 753, "681864": 753, "983840": 753, "196150": 753, "135637": 753, "173208": 753, "165269": 753, "725707": 753, "439173": 753, "873129": 753, "646838": 753, "191661": 753, "549703": 753, "193604": 753, "250044": 753, "1165": 753, "silenc": 753, "dot": 753, "476165026": 753, "542267227": 753, "046151174": 753, "09931232": 753, "916763513": 753, "651689091": 753, "081147404": 753, "600377541": 753, "df00": 753, "542267": 753, "046151": 753, "099312": 753, "916764": 753, "651689": 753, "081147": 753, "600378": 753, "behaviour": 755, "resid": 755, "extrem": 755, "poor": 755, "vast": 755, "accomplish": 755, "742": 755, "694": 755, "840": 755, "459": 755, "525": 755, "442": 755, "363": 755, "666": 755, "643": 755, "631": 755, "906": 755, "impact": 755, "compatibilti": 755, "impos": 755}, "objects": {"cudf": [[714, 0, 1, "", "CategoricalDtype"], [0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [186, 0, 1, "", "DatetimeIndex"], [719, 0, 1, "", "Decimal128Dtype"], [725, 0, 1, "", "Decimal32Dtype"], [731, 0, 1, "", "Decimal64Dtype"], [207, 0, 1, "", "Float64Index"], [208, 0, 1, "", "Grouper"], [209, 0, 1, "", "Index"], [259, 0, 1, "", "Int64Index"], [260, 0, 1, "", "IntervalIndex"], [737, 0, 1, "", "ListDtype"], [264, 0, 1, "", "MultiIndex"], [277, 0, 1, "", "RangeIndex"], [278, 0, 1, "", "Series"], [742, 0, 1, "", "StructDtype"], [453, 0, 1, "", "TimedeltaIndex"], [462, 0, 1, "", "UInt64Index"], [463, 3, 1, "", "concat"], [661, 3, 1, "", "crosstab"], [662, 3, 1, "", "cut"], [663, 3, 1, "", "describe_option"], [664, 3, 1, "", "from_dlpack"], [665, 3, 1, "", "get_dummies"], [666, 3, 1, "", "get_option"], [671, 3, 1, "", "melt"], [672, 3, 1, "", "pivot"], [673, 3, 1, "", "pivot_table"], [674, 3, 1, "", "read_avro"], [675, 3, 1, "", "read_csv"], [676, 3, 1, "", "read_feather"], [677, 3, 1, "", "read_hdf"], [678, 3, 1, "", "read_json"], [679, 3, 1, "", "read_orc"], [680, 3, 1, "", "read_parquet"], [681, 3, 1, "", "read_text"], [682, 3, 1, "", "set_option"], [687, 3, 1, "", "to_datetime"], [688, 3, 1, "", "to_numeric"], [689, 3, 1, "", "unstack"]], "cudf.CategoricalDtype": [[715, 1, 1, "", "categories"], [716, 2, 1, "", "from_pandas"], [717, 1, 1, "", "ordered"], [718, 2, 1, "", "to_pandas"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pivot_table"], [114, 2, 1, "", "pop"], [115, 2, 1, "", "pow"], [116, 2, 1, "", "prod"], [117, 2, 1, "", "product"], [118, 2, 1, "", "quantile"], [119, 2, 1, "", "quantiles"], [120, 2, 1, "", "query"], [121, 2, 1, "", "radd"], [122, 2, 1, "", "rank"], [123, 2, 1, "", "rdiv"], [124, 2, 1, "", "reindex"], [125, 2, 1, "", "rename"], [126, 2, 1, "", "repeat"], [127, 2, 1, "", "replace"], [128, 2, 1, "", "resample"], [129, 2, 1, "", "reset_index"], [130, 2, 1, "", "rfloordiv"], [131, 2, 1, "", "rmod"], [132, 2, 1, "", "rmul"], [133, 2, 1, "", "rolling"], [134, 2, 1, "", "round"], [135, 2, 1, "", "rpow"], [136, 2, 1, "", "rsub"], [137, 2, 1, "", "rtruediv"], [138, 2, 1, "", "sample"], [139, 2, 1, "", "scale"], [140, 2, 1, "", "scatter_by_map"], [141, 2, 1, "", "searchsorted"], [142, 2, 1, "", "select_dtypes"], [143, 2, 1, "", "serialize"], [144, 2, 1, "", "set_index"], [145, 1, 1, "", "shape"], [146, 2, 1, "", "shift"], [147, 1, 1, "", "size"], [148, 2, 1, "", "skew"], [149, 2, 1, "", "sort_index"], [150, 2, 1, "", "sort_values"], [151, 2, 1, "", "stack"], [152, 2, 1, "", "std"], [153, 2, 1, "", "sub"], [154, 2, 1, "", "subtract"], [155, 2, 1, "", "sum"], [156, 2, 1, "", "sum_of_squares"], [157, 2, 1, "", "swaplevel"], [158, 2, 1, "", "tail"], [159, 2, 1, "", "take"], [160, 2, 1, "", "tile"], [161, 2, 1, "", "to_arrow"], [162, 2, 1, "", "to_csv"], [163, 2, 1, "", "to_cupy"], [164, 2, 1, "", "to_dict"], [165, 2, 1, "", "to_dlpack"], [166, 2, 1, "", "to_feather"], [167, 2, 1, "", "to_hdf"], [168, 2, 1, "", "to_json"], [169, 2, 1, "", "to_numpy"], [170, 2, 1, "", "to_orc"], [171, 2, 1, "", "to_pandas"], [172, 2, 1, "", "to_parquet"], [173, 2, 1, "", "to_records"], [174, 2, 1, "", "to_string"], [175, 2, 1, "", "to_struct"], [176, 2, 1, "", "transpose"], [177, 2, 1, "", "truediv"], [178, 2, 1, "", "truncate"], [179, 2, 1, "", "unstack"], [180, 2, 1, "", "update"], [181, 2, 1, "", "value_counts"], [182, 1, 1, "", "values"], [183, 1, 1, "", "values_host"], [184, 2, 1, "", "var"], [185, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[187, 2, 1, "", "ceil"], [188, 1, 1, "", "day"], [189, 1, 1, "", "day_of_year"], [190, 1, 1, "", "dayofweek"], [191, 1, 1, "", "dayofyear"], [192, 2, 1, "", "floor"], [193, 1, 1, "", "hour"], [194, 1, 1, "", "is_leap_year"], [195, 2, 1, "", "isocalendar"], [196, 1, 1, "", "microsecond"], [197, 1, 1, "", "minute"], [198, 1, 1, "", "month"], [199, 1, 1, "", "nanosecond"], [200, 1, 1, "", "quarter"], [201, 2, 1, "", "round"], [202, 1, 1, "", "second"], [203, 2, 1, "", "to_frame"], [204, 2, 1, "", "to_series"], [205, 1, 1, "", "weekday"], [206, 1, 1, "", "year"]], "cudf.Decimal128Dtype": [[720, 2, 1, "", "from_arrow"], [721, 1, 1, "", "itemsize"], [722, 1, 1, "", "precision"], [723, 1, 1, "", "scale"], [724, 2, 1, "", "to_arrow"]], "cudf.Decimal32Dtype": [[726, 2, 1, "", "from_arrow"], [727, 1, 1, "", "itemsize"], [728, 1, 1, "", "precision"], [729, 1, 1, "", "scale"], [730, 2, 1, "", "to_arrow"]], "cudf.Decimal64Dtype": [[732, 2, 1, "", "from_arrow"], [733, 1, 1, "", "itemsize"], [734, 1, 1, "", "precision"], [735, 1, 1, "", "scale"], [736, 2, 1, "", "to_arrow"]], "cudf.Grouper": [[208, 2, 1, "", "__init__"]], "cudf.Index": [[210, 2, 1, "", "any"], [211, 2, 1, "", "append"], [212, 2, 1, "", "copy"], [213, 2, 1, "", "deserialize"], [214, 2, 1, "", "device_deserialize"], [215, 2, 1, "", "device_serialize"], [216, 2, 1, "", "difference"], [217, 2, 1, "", "drop_duplicates"], [218, 2, 1, "", "dropna"], [219, 2, 1, "", "fillna"], [220, 2, 1, "", "from_arrow"], [221, 2, 1, "", "from_pandas"], [222, 2, 1, "", "get_level_values"], [223, 2, 1, "", "get_loc"], [224, 2, 1, "", "get_slice_bound"], [225, 1, 1, "", "has_duplicates"], [226, 2, 1, "", "host_deserialize"], [227, 2, 1, "", "host_serialize"], [228, 2, 1, "", "intersection"], [229, 2, 1, "", "is_boolean"], [230, 2, 1, "", "is_categorical"], [231, 2, 1, "", "is_floating"], [232, 2, 1, "", "is_integer"], [233, 2, 1, "", "is_interval"], [234, 1, 1, "", "is_monotonic"], [235, 1, 1, "", "is_monotonic_decreasing"], [236, 1, 1, "", "is_monotonic_increasing"], [237, 2, 1, "", "is_numeric"], [238, 2, 1, "", "is_object"], [239, 2, 1, "", "isin"], [240, 2, 1, "", "isna"], [241, 2, 1, "", "join"], [242, 1, 1, "", "names"], [243, 1, 1, "", "nlevels"], [244, 2, 1, "", "notna"], [245, 2, 1, "", "rename"], [246, 2, 1, "", "repeat"], [247, 2, 1, "", "serialize"], [248, 2, 1, "", "set_names"], [249, 1, 1, "", "size"], [250, 2, 1, "", "sort_values"], [251, 2, 1, "", "take"], [252, 2, 1, "", "to_dlpack"], [253, 2, 1, "", "to_frame"], [254, 2, 1, "", "to_pandas"], [255, 2, 1, "", "to_series"], [256, 2, 1, "", "union"], [257, 2, 1, "", "unique"], [258, 1, 1, "", "values"]], "cudf.IntervalIndex": [[260, 2, 1, "", "__init__"], [261, 2, 1, "", "from_breaks"], [262, 2, 1, "", "get_loc"], [263, 1, 1, "", "values"]], "cudf.ListDtype": [[738, 1, 1, "", "element_type"], [739, 2, 1, "", "from_arrow"], [740, 1, 1, "", "leaf_type"], [741, 2, 1, "", "to_arrow"]], "cudf.MultiIndex": [[265, 1, 1, "", "codes"], [266, 2, 1, "", "droplevel"], [267, 2, 1, "", "from_arrow"], [268, 2, 1, "", "from_frame"], [269, 2, 1, "", "from_product"], [270, 2, 1, "", "from_tuples"], [271, 2, 1, "", "get_level_values"], [272, 2, 1, "", "get_loc"], [273, 1, 1, "", "levels"], [274, 1, 1, "", "names"], [275, 1, 1, "", "nlevels"], [276, 2, 1, "", "to_frame"]], "cudf.Series": [[279, 1, 1, "", "T"], [280, 2, 1, "", "__array__"], [281, 2, 1, "", "__iter__"], [282, 2, 1, "", "abs"], [283, 2, 1, "", "add"], [284, 2, 1, "", "add_prefix"], [285, 2, 1, "", "add_suffix"], [286, 2, 1, "", "all"], [287, 2, 1, "", "any"], [288, 2, 1, "", "append"], [289, 2, 1, "", "apply"], [290, 2, 1, "", "argsort"], [291, 2, 1, "", "astype"], [292, 2, 1, "", "autocorr"], [293, 1, 1, "", "axes"], [294, 2, 1, "", "backfill"], [295, 2, 1, "", "between"], [296, 2, 1, "", "bfill"], [297, 1, 1, "", "cat"], [298, 2, 1, "", "clip"], [299, 2, 1, "", "copy"], [300, 2, 1, "", "corr"], [301, 2, 1, "", "count"], [302, 2, 1, "", "cov"], [303, 2, 1, "", "cummax"], [304, 2, 1, "", "cummin"], [305, 2, 1, "", "cumprod"], [306, 2, 1, "", "cumsum"], [307, 1, 1, "", "data"], [308, 2, 1, "", "describe"], [309, 2, 1, "", "deserialize"], [310, 2, 1, "", "device_deserialize"], [311, 2, 1, "", "device_serialize"], [312, 2, 1, "", "diff"], [313, 2, 1, "", "digitize"], [314, 2, 1, "", "div"], [315, 2, 1, "", "divide"], [316, 2, 1, "", "dot"], [317, 2, 1, "", "drop"], [318, 2, 1, "", "drop_duplicates"], [319, 2, 1, "", "dropna"], [320, 1, 1, "", "dt"], [321, 1, 1, "", "dtype"], [322, 1, 1, "", "empty"], [323, 2, 1, "", "eq"], [324, 2, 1, "", "equals"], [325, 2, 1, "", "explode"], [326, 2, 1, "", "factorize"], [327, 2, 1, "", "ffill"], [328, 2, 1, "", "fillna"], [329, 2, 1, "", "first"], [330, 2, 1, "", "floordiv"], [331, 2, 1, "", "from_arrow"], [332, 2, 1, "", "from_categorical"], [333, 2, 1, "", "from_masked_array"], [334, 2, 1, "", "from_pandas"], [335, 2, 1, "", "ge"], [336, 2, 1, "", "groupby"], [337, 2, 1, "", "gt"], [338, 1, 1, "", "has_nulls"], [339, 2, 1, "", "hash_values"], [340, 2, 1, "", "head"], [341, 2, 1, "", "host_deserialize"], [342, 2, 1, "", "host_serialize"], [343, 1, 1, "", "iloc"], [344, 1, 1, "", "index"], [345, 2, 1, "", "interpolate"], [346, 1, 1, "", "is_monotonic"], [347, 1, 1, "", "is_monotonic_decreasing"], [348, 1, 1, "", "is_monotonic_increasing"], [349, 1, 1, "", "is_unique"], [350, 2, 1, "", "isin"], [351, 2, 1, "", "isna"], [352, 2, 1, "", "isnull"], [353, 2, 1, "", "items"], [354, 2, 1, "", "iteritems"], [355, 2, 1, "", "keys"], [356, 2, 1, "", "kurt"], [357, 2, 1, "", "kurtosis"], [358, 2, 1, "", "last"], [359, 2, 1, "", "le"], [360, 1, 1, "", "list"], [361, 1, 1, "", "loc"], [362, 2, 1, "", "lt"], [363, 2, 1, "", "map"], [364, 2, 1, "", "mask"], [365, 2, 1, "", "max"], [366, 2, 1, "", "mean"], [367, 2, 1, "", "median"], [368, 2, 1, "", "memory_usage"], [369, 2, 1, "", "min"], [370, 2, 1, "", "mod"], [371, 2, 1, "", "mode"], [372, 2, 1, "", "mul"], [373, 2, 1, "", "multiply"], [374, 1, 1, "", "name"], [375, 2, 1, "", "nans_to_nulls"], [376, 1, 1, "", "ndim"], [377, 2, 1, "", "ne"], [378, 2, 1, "", "nlargest"], [379, 2, 1, "", "notna"], [380, 2, 1, "", "notnull"], [381, 2, 1, "", "nsmallest"], [382, 1, 1, "", "null_count"], [383, 1, 1, "", "nullable"], [384, 1, 1, "", "nullmask"], [385, 2, 1, "", "nunique"], [386, 2, 1, "", "pad"], [387, 2, 1, "", "pct_change"], [388, 2, 1, "", "pipe"], [389, 2, 1, "", "pow"], [390, 2, 1, "", "prod"], [391, 2, 1, "", "product"], [392, 2, 1, "", "quantile"], [393, 2, 1, "", "radd"], [394, 2, 1, "", "rank"], [395, 2, 1, "", "rdiv"], [396, 2, 1, "", "reindex"], [397, 2, 1, "", "rename"], [398, 2, 1, "", "repeat"], [399, 2, 1, "", "replace"], [400, 2, 1, "", "resample"], [401, 2, 1, "", "reset_index"], [402, 2, 1, "", "rfloordiv"], [403, 2, 1, "", "rmod"], [404, 2, 1, "", "rmul"], [405, 2, 1, "", "rolling"], [406, 2, 1, "", "round"], [407, 2, 1, "", "rpow"], [408, 2, 1, "", "rsub"], [409, 2, 1, "", "rtruediv"], [410, 2, 1, "", "sample"], [411, 2, 1, "", "scale"], [412, 2, 1, "", "searchsorted"], [413, 2, 1, "", "serialize"], [414, 1, 1, "", "shape"], [415, 2, 1, "", "shift"], [416, 1, 1, "", "size"], [417, 2, 1, "", "skew"], [418, 2, 1, "", "sort_index"], [419, 2, 1, "", "sort_values"], [420, 2, 1, "", "std"], [421, 1, 1, "", "str"], [422, 1, 1, "", "struct"], [423, 2, 1, "", "sub"], [424, 2, 1, "", "subtract"], [425, 2, 1, "", "sum"], [426, 2, 1, "", "sum_of_squares"], [427, 2, 1, "", "tail"], [428, 2, 1, "", "take"], [429, 2, 1, "", "tile"], [430, 2, 1, "", "to_arrow"], [431, 2, 1, "", "to_cupy"], [432, 2, 1, "", "to_dict"], [433, 2, 1, "", "to_dlpack"], [434, 2, 1, "", "to_frame"], [435, 2, 1, "", "to_hdf"], [436, 2, 1, "", "to_json"], [437, 2, 1, "", "to_list"], [438, 2, 1, "", "to_numpy"], [439, 2, 1, "", "to_pandas"], [440, 2, 1, "", "to_string"], [441, 2, 1, "", "tolist"], [442, 2, 1, "", "transpose"], [443, 2, 1, "", "truediv"], [444, 2, 1, "", "truncate"], [445, 2, 1, "", "unique"], [446, 2, 1, "", "update"], [447, 1, 1, "", "valid_count"], [448, 2, 1, "", "value_counts"], [449, 1, 1, "", "values"], [450, 1, 1, "", "values_host"], [451, 2, 1, "", "var"], [452, 2, 1, "", "where"]], "cudf.StructDtype": [[743, 1, 1, "", "fields"], [744, 2, 1, "", "from_arrow"], [745, 2, 1, "", "to_arrow"]], "cudf.TimedeltaIndex": [[454, 1, 1, "", "components"], [455, 1, 1, "", "days"], [456, 1, 1, "", "inferred_freq"], [457, 1, 1, "", "microseconds"], [458, 1, 1, "", "nanoseconds"], [459, 1, 1, "", "seconds"], [460, 2, 1, "", "to_frame"], [461, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[464, 2, 1, "", "add_categories"], [465, 2, 1, "", "as_ordered"], [466, 2, 1, "", "as_unordered"], [467, 1, 1, "", "categories"], [468, 1, 1, "", "codes"], [469, 1, 1, "", "ordered"], [470, 2, 1, "", "remove_categories"], [471, 2, 1, "", "reorder_categories"], [472, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[473, 2, 1, "", "astype"], [474, 2, 1, "", "concat"], [475, 2, 1, "", "contains"], [476, 2, 1, "", "get"], [477, 2, 1, "", "index"], [478, 1, 1, "", "leaves"], [479, 2, 1, "", "len"], [480, 2, 1, "", "sort_values"], [481, 2, 1, "", "take"], [482, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[483, 2, 1, "", "byte_count"], [484, 2, 1, "", "capitalize"], [485, 2, 1, "", "cat"], [486, 2, 1, "", "center"], [487, 2, 1, "", "character_ngrams"], [488, 2, 1, "", "character_tokenize"], [489, 2, 1, "", "code_points"], [490, 2, 1, "", "contains"], [491, 2, 1, "", "count"], [492, 2, 1, "", "detokenize"], [493, 2, 1, "", "edit_distance"], [494, 2, 1, "", "edit_distance_matrix"], [495, 2, 1, "", "endswith"], [496, 2, 1, "", "extract"], [497, 2, 1, "", "filter_alphanum"], [498, 2, 1, "", "filter_characters"], [499, 2, 1, "", "filter_tokens"], [500, 2, 1, "", "find"], [501, 2, 1, "", "find_multiple"], [502, 2, 1, "", "findall"], [503, 2, 1, "", "get"], [504, 2, 1, "", "get_json_object"], [505, 2, 1, "", "hex_to_int"], [506, 2, 1, "", "htoi"], [507, 2, 1, "", "index"], [508, 2, 1, "", "insert"], [509, 2, 1, "", "ip2int"], [510, 2, 1, "", "ip_to_int"], [511, 2, 1, "", "is_consonant"], [512, 2, 1, "", "is_vowel"], [513, 2, 1, "", "isalnum"], [514, 2, 1, "", "isalpha"], [515, 2, 1, "", "isdecimal"], [516, 2, 1, "", "isdigit"], [517, 2, 1, "", "isempty"], [518, 2, 1, "", "isfloat"], [519, 2, 1, "", "ishex"], [520, 2, 1, "", "isinteger"], [521, 2, 1, "", "isipv4"], [522, 2, 1, "", "islower"], [523, 2, 1, "", "isnumeric"], [524, 2, 1, "", "isspace"], [525, 2, 1, "", "istimestamp"], [526, 2, 1, "", "istitle"], [527, 2, 1, "", "isupper"], [528, 2, 1, "", "join"], [529, 2, 1, "", "len"], [530, 2, 1, "", "like"], [531, 2, 1, "", "ljust"], [532, 2, 1, "", "lower"], [533, 2, 1, "", "lstrip"], [534, 2, 1, "", "match"], [535, 2, 1, "", "ngrams"], [536, 2, 1, "", "ngrams_tokenize"], [537, 2, 1, "", "normalize_characters"], [538, 2, 1, "", "normalize_spaces"], [539, 2, 1, "", "pad"], [540, 2, 1, "", "partition"], [541, 2, 1, "", "porter_stemmer_measure"], [542, 2, 1, "", "repeat"], [543, 2, 1, "", "replace"], [544, 2, 1, "", "replace_tokens"], [545, 2, 1, "", "replace_with_backrefs"], [546, 2, 1, "", "rfind"], [547, 2, 1, "", "rindex"], [548, 2, 1, "", "rjust"], [549, 2, 1, "", "rpartition"], [550, 2, 1, "", "rsplit"], [551, 2, 1, "", "rstrip"], [552, 2, 1, "", "slice"], [553, 2, 1, "", "slice_from"], [554, 2, 1, "", "slice_replace"], [555, 2, 1, "", "split"], [556, 2, 1, "", "startswith"], [557, 2, 1, "", "strip"], [558, 2, 1, "", "swapcase"], [559, 2, 1, "", "title"], [560, 2, 1, "", "token_count"], [561, 2, 1, "", "tokenize"], [562, 2, 1, "", "translate"], [563, 2, 1, "", "upper"], [564, 2, 1, "", "url_decode"], [565, 2, 1, "", "url_encode"], [566, 2, 1, "", "wrap"], [567, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[568, 2, 1, "", "explode"], [569, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[570, 2, 1, "", "__iter__"], [571, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[572, 2, 1, "", "aggregate"], [573, 2, 1, "", "backfill"], [574, 2, 1, "", "bfill"], [575, 2, 1, "", "count"], [576, 2, 1, "", "cumcount"], [577, 2, 1, "", "cummax"], [578, 2, 1, "", "cummin"], [579, 2, 1, "", "cumsum"], [580, 2, 1, "", "describe"], [581, 2, 1, "", "diff"], [582, 2, 1, "", "ffill"], [583, 2, 1, "", "fillna"], [584, 2, 1, "", "idxmax"], [585, 2, 1, "", "idxmin"], [586, 2, 1, "", "nunique"], [587, 2, 1, "", "pad"], [588, 2, 1, "", "quantile"], [589, 2, 1, "", "shift"], [590, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[591, 2, 1, "", "agg"], [592, 2, 1, "", "apply"], [593, 2, 1, "", "backfill"], [594, 2, 1, "", "bfill"], [595, 2, 1, "", "corr"], [596, 2, 1, "", "count"], [597, 2, 1, "", "cov"], [598, 2, 1, "", "cumcount"], [599, 2, 1, "", "cummax"], [600, 2, 1, "", "cummin"], [601, 2, 1, "", "cumsum"], [602, 2, 1, "", "ffill"], [603, 2, 1, "", "max"], [604, 2, 1, "", "mean"], [605, 2, 1, "", "median"], [606, 2, 1, "", "min"], [607, 2, 1, "", "ngroup"], [608, 2, 1, "", "nth"], [609, 2, 1, "", "pad"], [610, 2, 1, "", "pipe"], [611, 2, 1, "", "prod"], [612, 2, 1, "", "size"], [613, 2, 1, "", "std"], [614, 2, 1, "", "sum"], [615, 2, 1, "", "transform"], [616, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[617, 2, 1, "", "aggregate"], [618, 2, 1, "", "nunique"], [619, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[620, 2, 1, "", "ceil"], [621, 1, 1, "", "day"], [622, 1, 1, "", "day_of_year"], [623, 1, 1, "", "dayofweek"], [624, 1, 1, "", "dayofyear"], [625, 1, 1, "", "days_in_month"], [626, 2, 1, "", "floor"], [627, 1, 1, "", "hour"], [628, 1, 1, "", "is_leap_year"], [629, 1, 1, "", "is_month_end"], [630, 1, 1, "", "is_month_start"], [631, 1, 1, "", "is_quarter_end"], [632, 1, 1, "", "is_quarter_start"], [633, 1, 1, "", "is_year_end"], [634, 1, 1, "", "is_year_start"], [635, 2, 1, "", "isocalendar"], [636, 1, 1, "", "microsecond"], [637, 1, 1, "", "minute"], [638, 1, 1, "", "month"], [639, 1, 1, "", "nanosecond"], [640, 1, 1, "", "quarter"], [641, 2, 1, "", "round"], [642, 1, 1, "", "second"], [643, 2, 1, "", "strftime"], [644, 1, 1, "", "weekday"], [645, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[646, 1, 1, "", "components"], [647, 1, 1, "", "days"], [648, 1, 1, "", "microseconds"], [649, 1, 1, "", "nanoseconds"], [650, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[651, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[652, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[653, 2, 1, "", "apply"], [654, 2, 1, "", "count"], [655, 2, 1, "", "max"], [656, 2, 1, "", "mean"], [657, 2, 1, "", "min"], [658, 2, 1, "", "std"], [659, 2, 1, "", "sum"], [660, 2, 1, "", "var"]], "cudf.io.parquet": [[667, 0, 1, "", "ParquetDatasetWriter"], [670, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[668, 2, 1, "", "close"], [669, 2, 1, "", "write_table"]], "cudf.testing.testing": [[683, 3, 1, "", "assert_column_equal"], [684, 3, 1, "", "assert_frame_equal"], [685, 3, 1, "", "assert_index_equal"], [686, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 698, 704, 706, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 753, 755], "categoricalindex": [0, 1, 2, 3, 695], "categori": [1, 467, 715], "code": [2, 265, 468, 705], "equal": [3, 50, 324], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 690, 746, 750], "t": [5, 279], "__iter__": [6, 281, 570], "ab": [7, 282], "add": [8, 283], "add_prefix": [9, 284], "add_suffix": [10, 285], "agg": [11, 591], "all": [12, 286, 708], "ani": [13, 210, 287], "append": [14, 211, 288], "appli": [15, 289, 592, 653, 749, 750, 755], "apply_chunk": [16, 750], "apply_row": [17, 750], "applymap": [18, 712], "argsort": [19, 290], "assign": 20, "astyp": [21, 291, 473], "ax": [23, 293], "backfil": [24, 294, 573, 593], "bfill": [25, 296, 574, 594], "clip": [26, 298], "column": [27, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 708, 755], "copi": [28, 212, 299], "corr": [29, 300, 595], "count": [30, 301, 491, 575, 596, 654], "cov": [31, 302, 597], "cummax": [32, 303, 577, 599], "cummin": [33, 304, 578, 600], "cumprod": [34, 305], "cumsum": [35, 306, 579, 601], "describ": [36, 308, 580], "deseri": [37, 213, 309], "device_deseri": [38, 214, 310], "device_seri": [39, 215, 311], "diff": [40, 312, 581], "div": [41, 314], "divid": [42, 315], "dot": [43, 316], "drop": [44, 317, 753], "drop_dupl": [45, 217, 318], "dropna": [46, 218, 319, 753], "dtype": [47, 321, 752, 753], "empti": [48, 322], "eq": [49, 323], "eval": 51, "explod": [52, 325, 568], "ffill": [53, 327, 582, 602], "fillna": [54, 219, 328, 583, 753], "first": [55, 329], "floordiv": [56, 330], "from_arrow": [57, 220, 267, 331, 720, 726, 732, 739, 744], "from_panda": [58, 221, 334, 716], "from_record": 59, "ge": [60, 335], "groupbi": [61, 336, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 690, 693, 699, 749, 750, 753], "gt": [62, 337], "hash_valu": [63, 339], "head": [64, 340], "host_deseri": [65, 226, 341], "host_seri": [66, 227, 342], "iat": 67, "iloc": [68, 343], "index": [69, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 344, 477, 507, 690, 693, 695, 699, 708, 712, 749], "info": 70, "insert": [71, 508, 753], "interleave_column": 72, "interpol": [73, 345], "isin": [74, 239, 350], "isna": [75, 240, 351], "isnul": [76, 352], "item": [77, 353], "iterrow": 78, "itertupl": 79, "join": [80, 241, 528, 690, 695, 699, 712], "kei": [81, 355], "kurt": [82, 356], "kurtosi": [83, 357], "last": [84, 358], "le": [85, 359], "loc": [86, 361], "lt": [87, 362], "mask": [88, 364], "max": [89, 365, 603, 655], "mean": [90, 366, 604, 656], "median": [91, 367, 605], "melt": [92, 671], "memory_usag": [93, 368], "merg": [94, 690, 699], "min": [95, 369, 606, 657], "mod": [96, 370], "mode": [97, 371], "mul": [98, 372], "multipli": [99, 373], "nans_to_nul": [100, 375], "ndim": [101, 376], "ne": [102, 377], "nlargest": [103, 378], "notna": [104, 244, 379], "notnul": [105, 380], "nsmallest": [106, 381], "nuniqu": [107, 385, 586, 618], "pad": [108, 386, 539, 587, 609], "partition_by_hash": 109, "pct_chang": [110, 387], "pipe": [111, 388, 610], "pivot": [112, 672], "pivot_t": [113, 673], "pop": 114, "pow": [115, 389], "prod": [116, 390, 611], "product": [117, 391, 753], "quantil": [118, 119, 392, 588], "panda": [118, 124, 178, 185, 272, 396, 444, 452, 583, 592, 704, 705, 706, 712, 713, 755], "compat": [118, 124, 178, 185, 272, 396, 444, 452, 583, 592, 695, 705, 713], "note": [118, 124, 178, 185, 272, 396, 444, 452, 583, 592, 713, 748], "queri": 120, "radd": [121, 393], "rank": [122, 394], "rdiv": [123, 395], "reindex": [124, 396, 690, 699], "renam": [125, 245, 397], "repeat": [126, 246, 398, 542], "replac": [127, 399, 543, 753], "resampl": [128, 400], "reset_index": [129, 401], "rfloordiv": [130, 402], "rmod": [131, 403], "rmul": [132, 404], "roll": [133, 405, 653, 654, 655, 656, 657, 658, 659, 660, 703, 749, 750], "round": [134, 201, 406, 641], "rpow": [135, 407], "rsub": [136, 408], "rtruediv": [137, 409], "sampl": [138, 410], "scale": [139, 411, 723, 729, 735], "scatter_by_map": 140, "searchsort": [141, 412], "select_dtyp": 142, "serial": [143, 247, 413, 690, 699], "set_index": 144, "shape": [145, 414], "shift": [146, 415, 589], "size": [147, 249, 416, 590, 612], "skew": [148, 417], "sort_index": [149, 418], "sort_valu": [150, 250, 419, 480], "stack": 151, "std": [152, 420, 613, 658], "sub": [153, 423], "subtract": [154, 424], "sum": [155, 425, 614, 659, 753], "sum_of_squar": [156, 426], "swaplevel": 157, "tail": [158, 427], "take": [159, 251, 428, 481], "tile": [160, 429], "to_arrow": [161, 430, 724, 730, 736, 741, 745], "to_csv": 162, "to_cupi": [163, 431], "to_dict": [164, 432], "to_dlpack": [165, 252, 433], "to_feath": 166, "to_hdf": [167, 435], "to_json": [168, 436], "to_numpi": [169, 438], "to_orc": 170, "to_panda": [171, 254, 439, 718], "to_parquet": 172, "to_record": 173, "to_str": [174, 440], "to_struct": 175, "transpos": [176, 442, 690, 712], "truediv": [177, 443], "truncat": [178, 444], "unstack": [179, 689], "updat": [180, 446], "value_count": [181, 448], "valu": [182, 258, 263, 449, 695, 753, 755], "values_host": [183, 450], "var": [184, 451, 616, 660], "where": [185, 452], "datetimeindex": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 695], "ceil": [187, 620], "dai": [188, 455, 621, 647], "day_of_year": [189, 622], "dayofweek": [190, 623], "dayofyear": [191, 624], "floor": [192, 626], "hour": [193, 627], "is_leap_year": [194, 628], "isocalendar": [195, 635], "microsecond": [196, 457, 636, 648], "minut": [197, 637, 712], "month": [198, 638], "nanosecond": [199, 458, 639, 649], "quarter": [200, 640], "second": [202, 459, 642, 650], "to_fram": [203, 253, 276, 434, 460], "to_seri": [204, 255, 461], "weekdai": [205, 644], "year": [206, 645], "float64index": 207, "grouper": [208, 749], "differ": [216, 752], "get_level_valu": [222, 271], "get_loc": [223, 262, 272], "get_slice_bound": 224, "has_dupl": 225, "intersect": 228, "is_boolean": 229, "is_categor": 230, "is_float": 231, "is_integ": 232, "is_interv": 233, "is_monoton": [234, 346], "is_monotonic_decreas": [235, 347], "is_monotonic_increas": [236, 348], "is_numer": 237, "is_object": 238, "name": [242, 274, 374, 705, 755], "nlevel": [243, 275], "set_nam": 248, "union": [256, 704], "uniqu": [257, 445, 482, 619], "int64index": 259, "intervalindex": [260, 261, 262, 263, 695], "from_break": 261, "multiindex": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 695, 712], "droplevel": 266, "from_fram": 268, "from_product": 269, "from_tupl": 270, "level": [273, 691, 749, 750], "rangeindex": 277, "seri": [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 690, 699, 712, 746, 750], "__array__": 280, "autocorr": 292, "between": [295, 746], "cat": [297, 485], "data": [307, 690, 691, 699, 708, 712, 748, 750, 753, 755], "digit": 313, "dt": 320, "factor": 326, "from_categor": 332, "from_masked_arrai": 333, "has_nul": 338, "is_uniqu": 349, "iteritem": 354, "list": [360, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 697, 699, 748], "map": 363, "null_count": 382, "nullabl": [383, 750], "nullmask": 384, "str": 421, "struct": [422, 568, 569, 699, 701, 748], "to_list": 437, "tolist": 441, "valid_count": 447, "timedeltaindex": [453, 454, 455, 456, 457, 458, 459, 460, 461, 695], "compon": [454, 646, 695], "inferred_freq": 456, "uint64index": 462, "concat": [463, 474, 712], "core": [464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660], "categor": [464, 465, 466, 467, 468, 469, 470, 471, 472, 695, 699, 712], "categoricalaccessor": [464, 465, 466, 467, 468, 469, 470, 471, 472], "add_categori": 464, "as_ord": 465, "as_unord": 466, "order": [469, 717, 755], "remove_categori": 470, "reorder_categori": 471, "set_categori": 472, "listmethod": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "contain": [475, 490], "get": [476, 503, 712], "leav": 478, "len": [479, 529], "string": [483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 699, 700, 712, 750, 753], "stringmethod": [483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "byte_count": 483, "capit": 484, "center": 486, "character_ngram": 487, "character_token": 488, "code_point": 489, "detoken": 492, "edit_dist": 493, "edit_distance_matrix": 494, "endswith": 495, "extract": 496, "filter_alphanum": 497, "filter_charact": 498, "filter_token": 499, "find": 500, "find_multipl": 501, "findal": 502, "get_json_object": 504, "hex_to_int": 505, "htoi": 506, "ip2int": 509, "ip_to_int": 510, "is_conson": 511, "is_vowel": 512, "isalnum": 513, "isalpha": 514, "isdecim": 515, "isdigit": 516, "isempti": 517, "isfloat": 518, "ishex": 519, "isinteg": 520, "isipv4": 521, "islow": 522, "isnumer": 523, "isspac": 524, "istimestamp": 525, "istitl": 526, "isupp": 527, "like": 530, "ljust": 531, "lower": [532, 750], "lstrip": 533, "match": 534, "ngram": 535, "ngrams_token": 536, "normalize_charact": 537, "normalize_spac": 538, "partit": 540, "porter_stemmer_measur": 541, "replace_token": 544, "replace_with_backref": 545, "rfind": 546, "rindex": 547, "rjust": 548, "rpartit": 549, "rsplit": 550, "rstrip": 551, "slice": 552, "slice_from": 553, "slice_replac": 554, "split": 555, "startswith": 556, "strip": 557, "swapcas": 558, "titl": 559, "token_count": 560, "token": 561, "translat": 562, "upper": 563, "url_decod": 564, "url_encod": 565, "wrap": 566, "zfill": 567, "structmethod": [568, 569], "field": [569, 743], "group": [571, 712, 749], "dataframegroupbi": [572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590], "aggreg": [572, 617, 749], "cumcount": [576, 598], "idxmax": 584, "idxmin": 585, "ngroup": 607, "nth": 608, "transform": [615, 749], "seriesgroupbi": [617, 618, 619], "datetimeproperti": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "days_in_month": 625, "is_month_end": 629, "is_month_start": 630, "is_quarter_end": 631, "is_quarter_start": 632, "is_year_end": 633, "is_year_start": 634, "strftime": 643, "timedeltaproperti": [646, 647, 648, 649, 650], "subword_token": [651, 652], "subwordtoken": [651, 652, 702], "__call__": 652, "window": [653, 654, 655, 656, 657, 658, 659, 660, 690, 699, 703, 749, 750], "crosstab": 661, "cut": 662, "describe_opt": 663, "from_dlpack": 664, "get_dummi": 665, "get_opt": 666, "io": [667, 668, 669, 670, 690, 699, 752], "parquet": [667, 668, 669, 670, 696, 712], "parquetdatasetwrit": [667, 668, 669], "close": 668, "write_t": 669, "read_parquet_metadata": 670, "read_avro": 674, "read_csv": 675, "read_feath": 676, "read_hdf": 677, "read_json": 678, "Not": 678, "gpu": [678, 747], "acceler": 678, "experiment": 678, "featur": 678, "read_orc": 679, "read_parquet": 680, "read_text": 681, "set_opt": 682, "test": [683, 684, 685, 686, 692, 704, 710], "assert_column_equ": 683, "assert_frame_equ": 684, "assert_index_equ": 685, "assert_series_equ": 686, "to_datetim": 687, "to_numer": 688, "constructor": [690, 695, 699, 702], "attribut": [690, 699], "underli": 690, "convers": [690, 691, 695, 699], "iter": [690, 693, 699, 755], "binari": [690, 699], "oper": [690, 695, 699, 712, 749, 755], "function": [690, 691, 692, 693, 699, 703, 710, 750, 755], "applic": [690, 693, 699], "comput": [690, 693, 695, 699, 755], "descript": [690, 693, 699], "stat": [690, 693, 699, 712], "select": [690, 695, 699, 712], "label": [690, 699, 712, 753], "manipul": [690, 691, 699], "miss": [690, 695, 699, 712, 753, 755], "handl": [690, 697, 699, 700, 701, 705, 750], "reshap": [690, 699], "sort": [690, 695, 699], "combin": [690, 695, 699], "compar": [690, 699, 704, 706], "time": [690, 695, 699, 712], "relat": [690, 699], "gener": [691, 692, 753], "top": 691, "deal": 691, "datetimelik": [691, 699], "util": [692, 710], "api": [694, 747], "refer": 694, "document": [694, 706, 711], "object": [695, 712, 748, 749, 753, 755], "properti": [695, 699], "modifi": 695, "memori": 695, "usag": 695, "specif": 695, "set": 695, "numer": [695, 753], "date": 695, "input": [696, 752], "output": [696, 752], "csv": [696, 712], "text": 696, "json": 696, "orc": [696, 712], "hdfstore": 696, "pytabl": 696, "hdf5": 696, "feather": 696, "avro": 696, "option": [698, 709, 754], "accessor": 699, "datetim": [699, 753], "method": [699, 712], "timedelta": 699, "benchmark": 704, "organ": [704, 710], "run": 704, "content": [704, 710, 711], "configur": 704, "write": [704, 706, 710], "parametr": [704, 710], "profil": 704, "advanc": 704, "topic": 704, "understand": 704, "benchmark_with_object": 704, "fixtur": [704, 710], "The": [704, 708, 749], "decor": 704, "contribut": 705, "guid": [705, 707, 751], "directori": 705, "structur": 705, "file": 705, "style": 705, "deprec": 705, "remov": 705, "python": 705, "v": 705, "cython": [705, 708], "except": 705, "libcudf": 705, "docstr": 706, "publish": 706, "page": 706, "build": 706, "requir": 706, "view": [706, 712], "doc": 706, "intern": 706, "develop": [707, 747], "librari": [708, 712], "design": 708, "frame": 708, "layer": 708, "columnaccessor": 708, "type": [708, 748, 752, 755], "buffer": 708, "put": 708, "It": 708, "togeth": 708, "tool": 710, "custom": [710, 750], "pytest": 710, "mark": 710, "complex": 710, "welcom": 711, "": 711, "indic": 711, "tabl": 711, "10": 712, "dask": [712, 747], "what": [712, 747], "ar": 712, "when": 712, "us": [712, 752], "creation": 712, "posit": 712, "boolean": 712, "histogram": 712, "convert": [712, 746], "represent": 712, "numpi": [712, 748], "arrow": 712, "In": 712, "out": 712, "perform": 712, "tip": 712, "persist": 712, "wait": 712, "categoricaldtyp": [714, 715, 716, 717, 718], "decimal128dtyp": [719, 720, 721, 722, 723, 724], "items": [721, 727, 733], "precis": [722, 728, 734], "decimal32dtyp": [725, 726, 727, 728, 729, 730], "decimal64dtyp": [731, 732, 733, 734, 735, 736], "listdtyp": [737, 738, 739, 740, 741], "element_typ": 738, "leaf_typ": 740, "structdtyp": [742, 743, 744, 745], "interoper": 746, "cupi": [746, 750], "arrai": [746, 750], "interweav": 746, "smooth": 746, "pydata": 746, "workflow": 746, "spars": 746, "matrix": 746, "multi": 747, "work": [747, 753], "navig": 747, "support": [748, 749, 752, 755], "A": 748, "decim": 748, "nest": 748, "summari": [749, 750], "limit": [749, 755], "calcul": [749, 753], "overview": 750, "user": [750, 751], "defin": 750, "udf": 750, "addit": 750, "scalar": 750, "argument": 750, "control": 750, "numba": 750, "kernel": 750, "null": [750, 753, 755], "caveat": 750, "i": 752, "o": 752, "magnum": 752, "gpudirect": 752, "storag": 752, "integr": 752, "nvcomp": 752, "current": 752, "polici": 752, "how": 753, "detect": 753, "float": [753, 755], "nan": 753, "na": 753, "fill": 753, "axi": 753, "regular": 753, "express": 753, "comparison": 755, "result": 755, "point": 755, "No": 755, "true": 755}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [750, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_pandas": [[58, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[59, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[60, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[61, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[62, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[63, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[64, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[65, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[66, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[67, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[68, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[69, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[70, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[71, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[72, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[73, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[74, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[75, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[76, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[77, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[78, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[79, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[80, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[81, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[82, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[83, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[84, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[85, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[86, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[87, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[88, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[89, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[90, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[91, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[92, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[93, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[94, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[95, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[96, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[97, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[98, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[99, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[100, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[101, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[102, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[103, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[104, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[105, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[106, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[107, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[108, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[109, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[110, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[111, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[112, "cudf-dataframe-pivot"]], "cudf.DataFrame.pivot_table": [[113, "cudf-dataframe-pivot-table"]], "cudf.DataFrame.pop": [[114, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[115, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[116, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[117, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[118, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[118, "PandasCompat-0"], [124, "PandasCompat-0"], [178, "PandasCompat-0"], [185, "PandasCompat-0"], [272, "PandasCompat-0"], [396, "PandasCompat-0"], [444, "PandasCompat-0"], [452, "PandasCompat-0"], [583, "PandasCompat-0"], [592, "PandasCompat-0"], [713, null], [713, null], [713, null], [713, null], [713, null], [713, null], [713, null], [713, null], [713, null], [713, null]], "cudf.DataFrame.quantiles": [[119, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[120, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[121, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[122, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[123, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[124, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[125, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[126, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[127, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[128, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[129, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[130, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[131, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[132, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[133, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[134, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[135, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[136, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[137, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[138, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[139, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[140, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[141, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[142, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[143, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[144, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[145, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[146, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[147, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[148, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[149, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[150, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[151, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[152, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[153, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[154, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[155, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[156, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[157, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[158, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[159, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[160, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[161, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[162, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[163, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[164, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[165, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[166, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[167, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[168, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[169, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[170, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[171, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[172, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[173, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[174, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[175, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[176, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[177, "cudf-dataframe-truediv"]], "cudf.DataFrame.truncate": [[178, "cudf-dataframe-truncate"]], "cudf.DataFrame.unstack": [[179, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[180, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[181, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[182, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[183, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[184, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[185, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[186, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[187, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[188, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[189, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[190, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[191, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[192, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[193, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[194, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[195, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[196, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[197, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[198, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[199, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[200, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[201, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[202, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[203, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[204, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[205, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[206, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[207, "cudf-float64index"]], "cudf.Grouper": [[208, "cudf-grouper"]], "cudf.Index": [[209, "cudf-index"]], "cudf.Index.any": [[210, "cudf-index-any"]], "cudf.Index.append": [[211, "cudf-index-append"]], "cudf.Index.copy": [[212, "cudf-index-copy"]], "cudf.Index.deserialize": [[213, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[214, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[215, "cudf-index-device-serialize"]], "cudf.Index.difference": [[216, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[217, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[218, "cudf-index-dropna"]], "cudf.Index.fillna": [[219, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[220, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[221, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[222, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[223, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[224, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[225, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[226, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[227, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[228, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[229, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[230, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[231, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[232, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[233, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[234, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[235, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[236, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[237, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[238, "cudf-index-is-object"]], "cudf.Index.isin": [[239, "cudf-index-isin"]], "cudf.Index.isna": [[240, "cudf-index-isna"]], "cudf.Index.join": [[241, "cudf-index-join"]], "cudf.Index.names": [[242, "cudf-index-names"]], "cudf.Index.nlevels": [[243, "cudf-index-nlevels"]], "cudf.Index.notna": [[244, "cudf-index-notna"]], "cudf.Index.rename": [[245, "cudf-index-rename"]], "cudf.Index.repeat": [[246, "cudf-index-repeat"]], "cudf.Index.serialize": [[247, "cudf-index-serialize"]], "cudf.Index.set_names": [[248, "cudf-index-set-names"]], "cudf.Index.size": [[249, "cudf-index-size"]], "cudf.Index.sort_values": [[250, "cudf-index-sort-values"]], "cudf.Index.take": [[251, "cudf-index-take"]], "cudf.Index.to_dlpack": [[252, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[253, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[254, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[255, "cudf-index-to-series"]], "cudf.Index.union": [[256, "cudf-index-union"]], "cudf.Index.unique": [[257, "cudf-index-unique"]], "cudf.Index.values": [[258, "cudf-index-values"]], "cudf.Int64Index": [[259, "cudf-int64index"]], "cudf.IntervalIndex": [[260, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[261, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[262, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[263, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[264, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[265, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[266, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[267, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[268, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[269, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[270, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[271, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[272, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[273, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[274, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[275, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[276, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[277, "cudf-rangeindex"]], "cudf.Series": [[278, "cudf-series"]], "cudf.Series.T": [[279, "cudf-series-t"]], "cudf.Series.__array__": [[280, "cudf-series-array"]], "cudf.Series.__iter__": [[281, "cudf-series-iter"]], "cudf.Series.abs": [[282, "cudf-series-abs"]], "cudf.Series.add": [[283, "cudf-series-add"]], "cudf.Series.add_prefix": [[284, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[285, "cudf-series-add-suffix"]], "cudf.Series.all": [[286, "cudf-series-all"]], "cudf.Series.any": [[287, "cudf-series-any"]], "cudf.Series.append": [[288, "cudf-series-append"]], "cudf.Series.apply": [[289, "cudf-series-apply"], [750, "cudf-series-apply"]], "cudf.Series.argsort": [[290, "cudf-series-argsort"]], "cudf.Series.astype": [[291, "cudf-series-astype"]], "cudf.Series.autocorr": [[292, "cudf-series-autocorr"]], "cudf.Series.axes": [[293, "cudf-series-axes"]], "cudf.Series.backfill": [[294, "cudf-series-backfill"]], "cudf.Series.between": [[295, "cudf-series-between"]], "cudf.Series.bfill": [[296, "cudf-series-bfill"]], "cudf.Series.cat": [[297, "cudf-series-cat"]], "cudf.Series.clip": [[298, "cudf-series-clip"]], "cudf.Series.copy": [[299, "cudf-series-copy"]], "cudf.Series.corr": [[300, "cudf-series-corr"]], "cudf.Series.count": [[301, "cudf-series-count"]], "cudf.Series.cov": [[302, "cudf-series-cov"]], "cudf.Series.cummax": [[303, "cudf-series-cummax"]], "cudf.Series.cummin": [[304, "cudf-series-cummin"]], "cudf.Series.cumprod": [[305, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[306, "cudf-series-cumsum"]], "cudf.Series.data": [[307, "cudf-series-data"]], "cudf.Series.describe": [[308, "cudf-series-describe"]], "cudf.Series.deserialize": [[309, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[310, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[311, "cudf-series-device-serialize"]], "cudf.Series.diff": [[312, "cudf-series-diff"]], "cudf.Series.digitize": [[313, "cudf-series-digitize"]], "cudf.Series.div": [[314, "cudf-series-div"]], "cudf.Series.divide": [[315, "cudf-series-divide"]], "cudf.Series.dot": [[316, "cudf-series-dot"]], "cudf.Series.drop": [[317, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[318, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[319, "cudf-series-dropna"]], "cudf.Series.dt": [[320, "cudf-series-dt"]], "cudf.Series.dtype": [[321, "cudf-series-dtype"]], "cudf.Series.empty": [[322, "cudf-series-empty"]], "cudf.Series.eq": [[323, "cudf-series-eq"]], "cudf.Series.equals": [[324, "cudf-series-equals"]], "cudf.Series.explode": [[325, "cudf-series-explode"]], "cudf.Series.factorize": [[326, "cudf-series-factorize"]], "cudf.Series.ffill": [[327, "cudf-series-ffill"]], "cudf.Series.fillna": [[328, "cudf-series-fillna"]], "cudf.Series.first": [[329, "cudf-series-first"]], "cudf.Series.floordiv": [[330, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[331, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[332, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[333, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[334, "cudf-series-from-pandas"]], "cudf.Series.ge": [[335, "cudf-series-ge"]], "cudf.Series.groupby": [[336, "cudf-series-groupby"]], "cudf.Series.gt": [[337, "cudf-series-gt"]], "cudf.Series.has_nulls": [[338, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[339, "cudf-series-hash-values"]], "cudf.Series.head": [[340, "cudf-series-head"]], "cudf.Series.host_deserialize": [[341, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[342, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[343, "cudf-series-iloc"]], "cudf.Series.index": [[344, "cudf-series-index"]], "cudf.Series.interpolate": [[345, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[346, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[347, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[348, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[349, "cudf-series-is-unique"]], "cudf.Series.isin": [[350, "cudf-series-isin"]], "cudf.Series.isna": [[351, "cudf-series-isna"]], "cudf.Series.isnull": [[352, "cudf-series-isnull"]], "cudf.Series.items": [[353, "cudf-series-items"]], "cudf.Series.iteritems": [[354, "cudf-series-iteritems"]], "cudf.Series.keys": [[355, "cudf-series-keys"]], "cudf.Series.kurt": [[356, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[357, "cudf-series-kurtosis"]], "cudf.Series.last": [[358, "cudf-series-last"]], "cudf.Series.le": [[359, "cudf-series-le"]], "cudf.Series.list": [[360, "cudf-series-list"]], "cudf.Series.loc": [[361, "cudf-series-loc"]], "cudf.Series.lt": [[362, "cudf-series-lt"]], "cudf.Series.map": [[363, "cudf-series-map"]], "cudf.Series.mask": [[364, "cudf-series-mask"]], "cudf.Series.max": [[365, "cudf-series-max"]], "cudf.Series.mean": [[366, "cudf-series-mean"]], "cudf.Series.median": [[367, "cudf-series-median"]], "cudf.Series.memory_usage": [[368, "cudf-series-memory-usage"]], "cudf.Series.min": [[369, "cudf-series-min"]], "cudf.Series.mod": [[370, "cudf-series-mod"]], "cudf.Series.mode": [[371, "cudf-series-mode"]], "cudf.Series.mul": [[372, "cudf-series-mul"]], "cudf.Series.multiply": [[373, "cudf-series-multiply"]], "cudf.Series.name": [[374, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[375, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[376, "cudf-series-ndim"]], "cudf.Series.ne": [[377, "cudf-series-ne"]], "cudf.Series.nlargest": [[378, "cudf-series-nlargest"]], "cudf.Series.notna": [[379, "cudf-series-notna"]], "cudf.Series.notnull": [[380, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[381, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[382, "cudf-series-null-count"]], "cudf.Series.nullable": [[383, "cudf-series-nullable"]], "cudf.Series.nullmask": [[384, "cudf-series-nullmask"]], "cudf.Series.nunique": [[385, "cudf-series-nunique"]], "cudf.Series.pad": [[386, "cudf-series-pad"]], "cudf.Series.pct_change": [[387, "cudf-series-pct-change"]], "cudf.Series.pipe": [[388, "cudf-series-pipe"]], "cudf.Series.pow": [[389, "cudf-series-pow"]], "cudf.Series.prod": [[390, "cudf-series-prod"]], "cudf.Series.product": [[391, "cudf-series-product"]], "cudf.Series.quantile": [[392, "cudf-series-quantile"]], "cudf.Series.radd": [[393, "cudf-series-radd"]], "cudf.Series.rank": [[394, "cudf-series-rank"]], "cudf.Series.rdiv": [[395, "cudf-series-rdiv"]], "cudf.Series.reindex": [[396, "cudf-series-reindex"]], "cudf.Series.rename": [[397, "cudf-series-rename"]], "cudf.Series.repeat": [[398, "cudf-series-repeat"]], "cudf.Series.replace": [[399, "cudf-series-replace"]], "cudf.Series.resample": [[400, "cudf-series-resample"]], "cudf.Series.reset_index": [[401, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[402, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[403, "cudf-series-rmod"]], "cudf.Series.rmul": [[404, "cudf-series-rmul"]], "cudf.Series.rolling": [[405, "cudf-series-rolling"]], "cudf.Series.round": [[406, "cudf-series-round"]], "cudf.Series.rpow": [[407, "cudf-series-rpow"]], "cudf.Series.rsub": [[408, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[409, "cudf-series-rtruediv"]], "cudf.Series.sample": [[410, "cudf-series-sample"]], "cudf.Series.scale": [[411, "cudf-series-scale"]], "cudf.Series.searchsorted": [[412, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[413, "cudf-series-serialize"]], "cudf.Series.shape": [[414, "cudf-series-shape"]], "cudf.Series.shift": [[415, "cudf-series-shift"]], "cudf.Series.size": [[416, "cudf-series-size"]], "cudf.Series.skew": [[417, "cudf-series-skew"]], "cudf.Series.sort_index": [[418, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[419, "cudf-series-sort-values"]], "cudf.Series.std": [[420, "cudf-series-std"]], "cudf.Series.str": [[421, "cudf-series-str"]], "cudf.Series.struct": [[422, "cudf-series-struct"]], "cudf.Series.sub": [[423, "cudf-series-sub"]], "cudf.Series.subtract": [[424, "cudf-series-subtract"]], "cudf.Series.sum": [[425, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[426, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[427, "cudf-series-tail"]], "cudf.Series.take": [[428, "cudf-series-take"]], "cudf.Series.tile": [[429, "cudf-series-tile"]], "cudf.Series.to_arrow": [[430, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[431, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[432, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[433, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[434, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[435, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[436, "cudf-series-to-json"]], "cudf.Series.to_list": [[437, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[438, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[439, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[440, "cudf-series-to-string"]], "cudf.Series.tolist": [[441, "cudf-series-tolist"]], "cudf.Series.transpose": [[442, "cudf-series-transpose"]], "cudf.Series.truediv": [[443, "cudf-series-truediv"]], "cudf.Series.truncate": [[444, "cudf-series-truncate"]], "cudf.Series.unique": [[445, "cudf-series-unique"]], "cudf.Series.update": [[446, "cudf-series-update"]], "cudf.Series.valid_count": [[447, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[448, "cudf-series-value-counts"]], "cudf.Series.values": [[449, "cudf-series-values"]], "cudf.Series.values_host": [[450, "cudf-series-values-host"]], "cudf.Series.var": [[451, "cudf-series-var"]], "cudf.Series.where": [[452, "cudf-series-where"]], "cudf.TimedeltaIndex": [[453, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[454, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[455, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[456, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[457, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[458, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[459, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[460, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[461, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[462, "cudf-uint64index"]], "cudf.concat": [[463, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[464, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[465, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[466, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[467, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[468, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[469, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[470, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[471, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[472, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[473, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[474, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[475, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[476, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[477, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[478, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[479, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[480, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[481, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[482, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[483, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[484, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[485, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[486, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[487, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[488, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[489, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[490, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[491, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[492, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[493, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[494, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[495, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[496, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[497, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[498, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[499, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[500, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[501, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[502, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[503, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[504, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[505, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[506, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[507, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[508, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[509, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[510, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[511, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[512, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[513, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[514, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[515, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[516, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[517, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[518, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[519, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[520, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[521, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[522, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[523, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[524, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[525, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[526, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[527, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[528, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[529, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[530, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[531, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[532, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[533, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[534, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[535, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[536, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[537, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[538, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[539, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[540, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[541, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[542, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[543, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[544, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[545, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[546, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[547, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[548, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[549, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[550, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[551, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[552, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[553, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[554, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[555, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[556, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[557, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[558, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[559, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[560, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[561, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[562, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[563, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[564, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[565, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[566, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[567, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[568, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[569, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[570, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[571, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[572, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[573, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[574, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[575, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[576, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[577, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[578, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[579, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[580, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[581, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[582, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[583, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[584, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[585, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[586, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[587, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[588, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[589, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[590, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[591, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[592, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[593, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[594, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[595, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[596, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[597, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[598, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[599, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[600, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[601, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[602, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[603, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[604, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[605, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[606, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[607, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[608, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[609, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[610, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[611, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[612, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[613, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[614, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[615, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[616, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[617, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[618, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[619, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[620, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[621, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[622, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[623, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[624, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[625, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[626, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[627, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[628, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[629, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[630, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[631, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[632, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[633, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[634, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[635, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[636, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[637, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[638, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[639, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[640, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[641, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[642, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[643, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[644, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[645, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[646, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[647, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[648, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[649, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[650, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[651, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[652, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[653, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[654, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[655, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[656, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[657, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[658, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[659, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[660, "cudf-core-window-rolling-rolling-var"]], "cudf.crosstab": [[661, "cudf-crosstab"]], "cudf.cut": [[662, "cudf-cut"]], "cudf.describe_option": [[663, "cudf-describe-option"]], "cudf.from_dlpack": [[664, "cudf-from-dlpack"]], "cudf.get_dummies": [[665, "cudf-get-dummies"]], "cudf.get_option": [[666, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[667, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[668, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[669, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[670, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[671, "cudf-melt"]], "cudf.pivot": [[672, "cudf-pivot"]], "cudf.pivot_table": [[673, "cudf-pivot-table"]], "cudf.read_avro": [[674, "cudf-read-avro"]], "cudf.read_csv": [[675, "cudf-read-csv"]], "cudf.read_feather": [[676, "cudf-read-feather"]], "cudf.read_hdf": [[677, "cudf-read-hdf"]], "cudf.read_json": [[678, "cudf-read-json"]], "Not GPU-accelerated": [[678, null], [678, null], [678, null], [678, null], [678, null], [678, null], [678, null], [678, null], [678, null]], "GPU-accelerated": [[678, null]], "GPU-accelerated experimental feature": [[678, null]], "cudf.read_orc": [[679, "cudf-read-orc"]], "cudf.read_parquet": [[680, "cudf-read-parquet"]], "cudf.read_text": [[681, "cudf-read-text"]], "cudf.set_option": [[682, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[683, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[684, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[685, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[686, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[687, "cudf-to-datetime"]], "cudf.to_numeric": [[688, "cudf-to-numeric"]], "cudf.unstack": [[689, "cudf-unstack"]], "DataFrame": [[690, "dataframe"]], "Constructor": [[690, "constructor"], [699, "constructor"], [702, "constructor"]], "Attributes and underlying data": [[690, "attributes-and-underlying-data"]], "Conversion": [[690, "conversion"], [695, "conversion"], [695, "id3"], [695, "id4"], [699, "conversion"]], "Indexing, iteration": [[690, "indexing-iteration"], [693, "indexing-iteration"], [699, "indexing-iteration"]], "Binary operator functions": [[690, "binary-operator-functions"], [699, "binary-operator-functions"]], "Function application, GroupBy & window": [[690, "function-application-groupby-window"], [699, "function-application-groupby-window"]], "Computations / descriptive stats": [[690, "computations-descriptive-stats"], [693, "computations-descriptive-stats"], [699, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[690, "reindexing-selection-label-manipulation"], [699, "reindexing-selection-label-manipulation"]], "Missing data handling": [[690, "missing-data-handling"], [699, "missing-data-handling"]], "Reshaping, sorting, transposing": [[690, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[690, "combining-comparing-joining-merging"], [699, "combining-comparing-joining-merging"]], "Time Series-related": [[690, "time-series-related"], [699, "time-series-related"]], "Serialization / IO / conversion": [[690, "serialization-io-conversion"], [699, "serialization-io-conversion"]], "General Functions": [[691, "general-functions"]], "Data manipulations": [[691, "data-manipulations"]], "Top-level conversions": [[691, "top-level-conversions"]], "Top-level dealing with datetimelike": [[691, "top-level-dealing-with-datetimelike"]], "General Utilities": [[692, "general-utilities"]], "Testing functions": [[692, "testing-functions"]], "GroupBy": [[693, "groupby"], [749, "groupby"]], "Function application": [[693, "function-application"]], "API reference": [[694, "api-reference"]], "API Documentation": [[694, null]], "Index objects": [[695, "index-objects"]], "Index": [[695, "index"]], "Properties": [[695, "properties"]], "Modifying and computations": [[695, "modifying-and-computations"], [695, "id1"]], "Compatibility with MultiIndex": [[695, "compatibility-with-multiindex"]], "Missing values": [[695, "missing-values"]], "Memory usage": [[695, "memory-usage"]], "Sorting": [[695, "sorting"]], "Time-specific operations": [[695, "time-specific-operations"], [695, "id2"]], "Combining / joining / set operations": [[695, "combining-joining-set-operations"]], "Selecting": [[695, "selecting"]], "Numeric Index": [[695, "numeric-index"]], "CategoricalIndex": [[695, "categoricalindex"]], "Categorical components": [[695, "categorical-components"]], "IntervalIndex": [[695, "intervalindex"]], "IntervalIndex components": [[695, "intervalindex-components"]], "MultiIndex": [[695, "multiindex"], [712, "multiindex"]], "MultiIndex constructors": [[695, "multiindex-constructors"]], "MultiIndex properties": [[695, "multiindex-properties"]], "MultiIndex components": [[695, "multiindex-components"]], "MultiIndex selecting": [[695, "multiindex-selecting"]], "DatetimeIndex": [[695, "datetimeindex"]], "Time/date components": [[695, "time-date-components"]], "TimedeltaIndex": [[695, "timedeltaindex"]], "Components": [[695, "components"]], "Input/output": [[696, "input-output"]], "CSV": [[696, "csv"], [712, "csv"]], "Text": [[696, "text"]], "JSON": [[696, "json"]], "Parquet": [[696, "parquet"], [712, "parquet"]], "ORC": [[696, "orc"], [712, "orc"]], "HDFStore: PyTables (HDF5)": [[696, "hdfstore-pytables-hdf5"]], "Feather": [[696, "feather"]], "Avro": [[696, "avro"]], "List handling": [[697, "list-handling"], [699, "list-handling"]], "cudf Options": [[698, "cudf-options"]], "Series": [[699, "series"]], "Attributes": [[699, "attributes"]], "Reshaping, sorting": [[699, "reshaping-sorting"]], "Accessors": [[699, "accessors"]], "Datetimelike properties": [[699, "datetimelike-properties"]], "Datetime properties": [[699, "datetime-properties"]], "Datetime methods": [[699, "datetime-methods"]], "Timedelta properties": [[699, "timedelta-properties"]], "String handling": [[699, "string-handling"], [700, "string-handling"]], "Categorical accessor": [[699, "categorical-accessor"]], "Struct handling": [[699, "struct-handling"], [701, "struct-handling"]], "SubwordTokenizer": [[702, "subwordtokenizer"]], "Window": [[703, "window"]], "Rolling window functions": [[703, "rolling-window-functions"]], "Benchmarking cuDF": [[704, "benchmarking-cudf"]], "Benchmark organization": [[704, "benchmark-organization"]], "Running benchmarks": [[704, "running-benchmarks"]], "Benchmark contents": [[704, "benchmark-contents"]], "Benchmark configuration": [[704, "benchmark-configuration"]], "Writing benchmarks": [[704, "writing-benchmarks"]], "Parametrizing tests": [[704, "parametrizing-tests"]], "Comparing to pandas": [[704, "comparing-to-pandas"], [706, "comparing-to-pandas"]], "Testing benchmarks": [[704, "testing-benchmarks"]], "Profiling": [[704, "profiling"]], "Advanced Topics": [[704, "advanced-topics"]], "Understanding benchmark_with_object": [[704, "understanding-benchmark-with-object"]], "Fixture unions": [[704, "fixture-unions"]], "The benchmark_with_object decorator": [[704, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[705, "contributing-guide"]], "Directory structure and file naming": [[705, "directory-structure-and-file-naming"]], "Code style": [[705, "code-style"]], "Deprecating and removing code": [[705, "deprecating-and-removing-code"]], "pandas compatibility": [[705, "pandas-compatibility"]], "Python vs Cython": [[705, "python-vs-cython"]], "Exception handling": [[705, "exception-handling"]], "Handling libcudf Exceptions": [[705, "handling-libcudf-exceptions"]], "Writing documentation": [[706, "writing-documentation"]], "Docstrings": [[706, "docstrings"]], "Published documentation": [[706, "published-documentation"]], "Writing documentation pages": [[706, "writing-documentation-pages"]], "Building documentation": [[706, "building-documentation"]], "Requirements": [[706, "requirements"]], "Building and viewing docs": [[706, "building-and-viewing-docs"]], "Documenting cuDF internals": [[706, "documenting-cudf-internals"]], "Developer Guide": [[707, "developer-guide"]], "Library Design": [[708, "library-design"]], "The Frame layer": [[708, "the-frame-layer"]], "Frames": [[708, "frames"]], "Indexes": [[708, "indexes"]], "The Column layer": [[708, "the-column-layer"]], "ColumnAccessor": [[708, "columnaccessor"]], "Columns": [[708, "columns"]], "Data types": [[708, "data-types"], [755, "data-types"]], "Buffer": [[708, "buffer"]], "The Cython layer": [[708, "the-cython-layer"]], "Putting It All Together": [[708, "putting-it-all-together"]], "Options": [[709, "options"], [754, "options"]], "Testing cuDF": [[710, "testing-cudf"]], "Tooling": [[710, "tooling"]], "Test organization": [[710, "test-organization"]], "Test contents": [[710, "test-contents"]], "Writing tests": [[710, "writing-tests"]], "Parametrization: custom fixtures and pytest.mark.parametrize": [[710, "parametrization-custom-fixtures-and-pytest-mark-parametrize"]], "Complex parametrizations": [[710, "complex-parametrizations"]], "Testing utility functions": [[710, "testing-utility-functions"]], "Welcome to cuDF\u2019s documentation!": [[711, "welcome-to-cudf-s-documentation"]], "Contents:": [[711, null]], "Indices and tables": [[711, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[712, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[712, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[712, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[712, "object-creation"]], "Viewing Data": [[712, "viewing-data"]], "Selection": [[712, "selection"]], "Getting": [[712, "getting"]], "Selection by Label": [[712, "selection-by-label"]], "Selection by Position": [[712, "selection-by-position"]], "Boolean Indexing": [[712, "boolean-indexing"]], "Missing Data": [[712, "missing-data"]], "Operations": [[712, "operations"]], "Stats": [[712, "stats"]], "Applymap": [[712, "applymap"]], "Histogramming": [[712, "histogramming"]], "String Methods": [[712, "string-methods"]], "Concat": [[712, "concat"]], "Join": [[712, "join"]], "Grouping": [[712, "grouping"], [749, "grouping"]], "Transpose": [[712, "transpose"]], "Time Series": [[712, "time-series"]], "Categoricals": [[712, "categoricals"]], "Converting Data Representation": [[712, "converting-data-representation"]], "Pandas": [[712, "pandas"]], "Numpy": [[712, "numpy"]], "Arrow": [[712, "arrow"]], "Getting Data In/Out": [[712, "getting-data-in-out"]], "Dask Performance Tips": [[712, "dask-performance-tips"]], "Persisting Data": [[712, "persisting-data"]], "Wait": [[712, "wait"]], "Pandas Compatibility Notes": [[713, "pandas-compatibility-notes"]], "cudf.CategoricalDtype": [[714, "cudf-categoricaldtype"]], "cudf.CategoricalDtype.categories": [[715, "cudf-categoricaldtype-categories"]], "cudf.CategoricalDtype.from_pandas": [[716, "cudf-categoricaldtype-from-pandas"]], "cudf.CategoricalDtype.ordered": [[717, "cudf-categoricaldtype-ordered"]], "cudf.CategoricalDtype.to_pandas": [[718, "cudf-categoricaldtype-to-pandas"]], "cudf.Decimal128Dtype": [[719, "cudf-decimal128dtype"]], "cudf.Decimal128Dtype.from_arrow": [[720, "cudf-decimal128dtype-from-arrow"]], "cudf.Decimal128Dtype.itemsize": [[721, "cudf-decimal128dtype-itemsize"]], "cudf.Decimal128Dtype.precision": [[722, "cudf-decimal128dtype-precision"]], "cudf.Decimal128Dtype.scale": [[723, "cudf-decimal128dtype-scale"]], "cudf.Decimal128Dtype.to_arrow": [[724, "cudf-decimal128dtype-to-arrow"]], "cudf.Decimal32Dtype": [[725, "cudf-decimal32dtype"]], "cudf.Decimal32Dtype.from_arrow": [[726, "cudf-decimal32dtype-from-arrow"]], "cudf.Decimal32Dtype.itemsize": [[727, "cudf-decimal32dtype-itemsize"]], "cudf.Decimal32Dtype.precision": [[728, "cudf-decimal32dtype-precision"]], "cudf.Decimal32Dtype.scale": [[729, "cudf-decimal32dtype-scale"]], "cudf.Decimal32Dtype.to_arrow": [[730, "cudf-decimal32dtype-to-arrow"]], "cudf.Decimal64Dtype": [[731, "cudf-decimal64dtype"]], "cudf.Decimal64Dtype.from_arrow": [[732, "cudf-decimal64dtype-from-arrow"]], "cudf.Decimal64Dtype.itemsize": [[733, "cudf-decimal64dtype-itemsize"]], "cudf.Decimal64Dtype.precision": [[734, "cudf-decimal64dtype-precision"]], "cudf.Decimal64Dtype.scale": [[735, "cudf-decimal64dtype-scale"]], "cudf.Decimal64Dtype.to_arrow": [[736, "cudf-decimal64dtype-to-arrow"]], "cudf.ListDtype": [[737, "cudf-listdtype"]], "cudf.ListDtype.element_type": [[738, "cudf-listdtype-element-type"]], "cudf.ListDtype.from_arrow": [[739, "cudf-listdtype-from-arrow"]], "cudf.ListDtype.leaf_type": [[740, "cudf-listdtype-leaf-type"]], "cudf.ListDtype.to_arrow": [[741, "cudf-listdtype-to-arrow"]], "cudf.StructDtype": [[742, "cudf-structdtype"]], "cudf.StructDtype.fields": [[743, "cudf-structdtype-fields"]], "cudf.StructDtype.from_arrow": [[744, "cudf-structdtype-from-arrow"]], "cudf.StructDtype.to_arrow": [[745, "cudf-structdtype-to-arrow"]], "Interoperability between cuDF and CuPy": [[746, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[746, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[746, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[746, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[746, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[746, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[746, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Multi-GPU with Dask-cuDF": [[747, "multi-gpu-with-dask-cudf"]], "What works": [[747, "what-works"]], "Developing the API": [[747, "developing-the-api"]], "Navigating the API": [[747, "navigating-the-api"]], "Supported Data Types": [[748, "supported-data-types"]], "NumPy data types": [[748, "numpy-data-types"]], "A note on object": [[748, "a-note-on-object"]], "Decimal data types": [[748, "decimal-data-types"]], "Nested data types (List and Struct)": [[748, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[749, "summary-of-supported-operations"]], "Grouping by index levels": [[749, "grouping-by-index-levels"]], "The Grouper object": [[749, "the-grouper-object"]], "Aggregation": [[749, "aggregation"]], "GroupBy apply": [[749, "groupby-apply"]], "Limitations": [[749, "limitations"]], "Transform": [[749, "transform"]], "Rolling window calculations": [[749, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[750, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[750, "series-udfs"]], "Functions with Additional Scalar Arguments": [[750, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[750, "nullable-data"]], "String data": [[750, "string-data"]], "Lower level control with custom numba kernels": [[750, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[750, "dataframe-udfs"]], "String Data": [[750, "id1"]], "Numba kernels for DataFrames": [[750, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[750, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[750, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[750, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[750, "numba-kernels-on-cupy-arrays"]], "Caveats": [[750, "caveats"]], "Summary": [[750, "summary"]], "User Guide": [[751, "user-guide"]], "Input / Output": [[752, "input-output"]], "I/O Supported dtypes": [[752, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[752, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[752, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[752, "id1"]], "Working with missing data": [[753, "working-with-missing-data"]], "How to Detect missing values": [[753, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[753, "float-dtypes-and-missing-data"]], "Datetimes": [[753, "datetimes"]], "Calculations with missing data": [[753, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[753, "sum-product-of-null-nans"]], "NA values in GroupBy": [[753, "na-values-in-groupby"]], "Inserting missing data": [[753, "inserting-missing-data"]], "Filling missing values: fillna": [[753, "filling-missing-values-fillna"]], "Filling with cudf Object": [[753, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[753, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[753, "replacing-generic-values"]], "String/regular expression replacement": [[753, "string-regular-expression-replacement"]], "Numeric replacement": [[753, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[755, "comparison-of-cudf-and-pandas"]], "Supported operations": [[755, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[755, "null-or-missing-values"]], "Iteration": [[755, "iteration"]], "Result ordering": [[755, "result-ordering"]], "Floating-point computation": [[755, "floating-point-computation"]], "Column names": [[755, "column-names"]], "No true \"object\" data type": [[755, "no-true-object-data-type"]], ".apply() function limitations": [[755, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_pandas() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[60, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[61, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[62, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[63, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[64, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[65, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[66, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[67, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[68, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[69, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[70, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[71, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[72, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[73, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[74, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[75, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[76, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[77, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[78, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[79, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[80, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[81, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[82, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[84, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[85, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[86, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[87, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[88, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[89, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[90, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[91, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[92, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[93, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[94, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[95, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[96, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[97, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[98, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[99, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[100, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[101, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[102, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[103, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[104, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[105, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[106, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[107, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[108, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[109, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[110, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[111, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[112, "cudf.DataFrame.pivot"]], "pivot_table() (cudf.dataframe method)": [[113, "cudf.DataFrame.pivot_table"]], "pop() (cudf.dataframe method)": [[114, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[115, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[116, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[117, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[118, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[119, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[120, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[121, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[122, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[123, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[124, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[125, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[126, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[127, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[128, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[129, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[130, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[131, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[132, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[133, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[134, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[135, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[136, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[137, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[138, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[139, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[140, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[141, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[142, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[143, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[144, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[145, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[146, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[147, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[148, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[149, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[150, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[151, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[152, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[153, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[154, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[155, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[156, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[157, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[158, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[159, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[160, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[161, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[175, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[176, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[177, "cudf.DataFrame.truediv"]], "truncate() (cudf.dataframe method)": [[178, "cudf.DataFrame.truncate"]], "unstack() (cudf.dataframe method)": [[179, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[180, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[181, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[182, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[183, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[184, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[185, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[186, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[187, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[188, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[190, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[192, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[193, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[195, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[196, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[199, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[200, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[201, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[202, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[203, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[204, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[205, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[206, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[207, "cudf.Float64Index"]], "grouper (class in cudf)": [[208, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[208, "cudf.Grouper.__init__"]], "index (class in cudf)": [[209, "cudf.Index"]], "any() (cudf.index method)": [[210, "cudf.Index.any"]], "append() (cudf.index method)": [[211, "cudf.Index.append"]], "copy() (cudf.index method)": [[212, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[213, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[214, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[215, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[216, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[217, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[218, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[219, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[220, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[221, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[222, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[223, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[224, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[225, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[226, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[227, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[228, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[229, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[230, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[231, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[232, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[233, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[234, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[235, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[236, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[237, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[238, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[239, "cudf.Index.isin"]], "isna() (cudf.index method)": [[240, "cudf.Index.isna"]], "join() (cudf.index method)": [[241, "cudf.Index.join"]], "names (cudf.index property)": [[242, "cudf.Index.names"]], "nlevels (cudf.index property)": [[243, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[244, "cudf.Index.notna"]], "rename() (cudf.index method)": [[245, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[246, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[247, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[248, "cudf.Index.set_names"]], "size (cudf.index property)": [[249, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[250, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[251, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[252, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[253, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[254, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[255, "cudf.Index.to_series"]], "union() (cudf.index method)": [[256, "cudf.Index.union"]], "unique() (cudf.index method)": [[257, "cudf.Index.unique"]], "values (cudf.index property)": [[258, "cudf.Index.values"]], "int64index (class in cudf)": [[259, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[260, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[260, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[261, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[262, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[263, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[264, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[265, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[266, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[267, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[268, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[269, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[270, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[271, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[272, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[273, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[274, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[275, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[276, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[277, "cudf.RangeIndex"]], "series (class in cudf)": [[278, "cudf.Series"]], "t (cudf.series property)": [[279, "cudf.Series.T"]], "__array__() (cudf.series method)": [[280, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[281, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[282, "cudf.Series.abs"]], "add() (cudf.series method)": [[283, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[284, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[285, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[286, "cudf.Series.all"]], "any() (cudf.series method)": [[287, "cudf.Series.any"]], "append() (cudf.series method)": [[288, "cudf.Series.append"]], "apply() (cudf.series method)": [[289, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[290, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[291, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[292, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[293, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[294, "cudf.Series.backfill"]], "between() (cudf.series method)": [[295, "cudf.Series.between"]], "bfill() (cudf.series method)": [[296, "cudf.Series.bfill"]], "cat (cudf.series property)": [[297, "cudf.Series.cat"]], "clip() (cudf.series method)": [[298, "cudf.Series.clip"]], "copy() (cudf.series method)": [[299, "cudf.Series.copy"]], "corr() (cudf.series method)": [[300, "cudf.Series.corr"]], "count() (cudf.series method)": [[301, "cudf.Series.count"]], "cov() (cudf.series method)": [[302, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[303, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[304, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[305, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[306, "cudf.Series.cumsum"]], "data (cudf.series property)": [[307, "cudf.Series.data"]], "describe() (cudf.series method)": [[308, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[309, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[310, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[311, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[312, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[313, "cudf.Series.digitize"]], "div() (cudf.series method)": [[314, "cudf.Series.div"]], "divide() (cudf.series method)": [[315, "cudf.Series.divide"]], "dot() (cudf.series method)": [[316, "cudf.Series.dot"]], "drop() (cudf.series method)": [[317, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[318, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[319, "cudf.Series.dropna"]], "dt (cudf.series property)": [[320, "cudf.Series.dt"]], "dtype (cudf.series property)": [[321, "cudf.Series.dtype"]], "empty (cudf.series property)": [[322, "cudf.Series.empty"]], "eq() (cudf.series method)": [[323, "cudf.Series.eq"]], "equals() (cudf.series method)": [[324, "cudf.Series.equals"]], "explode() (cudf.series method)": [[325, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[326, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[327, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[328, "cudf.Series.fillna"]], "first() (cudf.series method)": [[329, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[330, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[331, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[332, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[333, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[334, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[335, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[336, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[337, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[338, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[339, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[340, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[341, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[342, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[343, "cudf.Series.iloc"]], "index (cudf.series property)": [[344, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[345, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[346, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[347, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[348, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[349, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[350, "cudf.Series.isin"]], "isna() (cudf.series method)": [[351, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[352, "cudf.Series.isnull"]], "items() (cudf.series method)": [[353, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[354, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[355, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[356, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[357, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[358, "cudf.Series.last"]], "le() (cudf.series method)": [[359, "cudf.Series.le"]], "list (cudf.series property)": [[360, "cudf.Series.list"]], "loc (cudf.series property)": [[361, "cudf.Series.loc"]], "lt() (cudf.series method)": [[362, "cudf.Series.lt"]], "map() (cudf.series method)": [[363, "cudf.Series.map"]], "mask() (cudf.series method)": [[364, "cudf.Series.mask"]], "max() (cudf.series method)": [[365, "cudf.Series.max"]], "mean() (cudf.series method)": [[366, "cudf.Series.mean"]], "median() (cudf.series method)": [[367, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[368, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[369, "cudf.Series.min"]], "mod() (cudf.series method)": [[370, "cudf.Series.mod"]], "mode() (cudf.series method)": [[371, "cudf.Series.mode"]], "mul() (cudf.series method)": [[372, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[373, "cudf.Series.multiply"]], "name (cudf.series property)": [[374, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[375, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[376, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[377, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[378, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[379, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[380, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[381, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[382, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[383, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[384, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[385, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[386, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[387, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[388, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[389, "cudf.Series.pow"]], "prod() (cudf.series method)": [[390, "cudf.Series.prod"]], "product() (cudf.series method)": [[391, "cudf.Series.product"]], "quantile() (cudf.series method)": [[392, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[393, "cudf.Series.radd"]], "rank() (cudf.series method)": [[394, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[395, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[396, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[397, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[398, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[399, "cudf.Series.replace"]], "resample() (cudf.series method)": [[400, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[401, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[402, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[403, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[404, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[405, "cudf.Series.rolling"]], "round() (cudf.series method)": [[406, "cudf.Series.round"]], "rpow() (cudf.series method)": [[407, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[408, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[409, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[410, "cudf.Series.sample"]], "scale() (cudf.series method)": [[411, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[412, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[413, "cudf.Series.serialize"]], "shape (cudf.series property)": [[414, "cudf.Series.shape"]], "shift() (cudf.series method)": [[415, "cudf.Series.shift"]], "size (cudf.series property)": [[416, "cudf.Series.size"]], "skew() (cudf.series method)": [[417, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[418, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[419, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[420, "cudf.Series.std"]], "str (cudf.series property)": [[421, "cudf.Series.str"]], "struct (cudf.series property)": [[422, "cudf.Series.struct"]], "sub() (cudf.series method)": [[423, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[424, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[425, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[426, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[427, "cudf.Series.tail"]], "take() (cudf.series method)": [[428, "cudf.Series.take"]], "tile() (cudf.series method)": [[429, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[430, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[431, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[432, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[433, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[434, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[435, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[436, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[437, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[438, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[439, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[440, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[441, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[442, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[443, "cudf.Series.truediv"]], "truncate() (cudf.series method)": [[444, "cudf.Series.truncate"]], "unique() (cudf.series method)": [[445, "cudf.Series.unique"]], "update() (cudf.series method)": [[446, "cudf.Series.update"]], "valid_count (cudf.series property)": [[447, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[448, "cudf.Series.value_counts"]], "values (cudf.series property)": [[449, "cudf.Series.values"]], "values_host (cudf.series property)": [[450, "cudf.Series.values_host"]], "var() (cudf.series method)": [[451, "cudf.Series.var"]], "where() (cudf.series method)": [[452, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[453, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[454, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[455, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[456, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[457, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[458, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[459, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[460, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[461, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[462, "cudf.UInt64Index"]], "concat() (in module cudf)": [[463, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[464, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[465, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[466, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[467, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[468, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[469, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[470, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[471, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[472, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[473, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[475, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[476, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[477, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[478, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[479, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[480, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[481, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[482, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[483, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[565, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[566, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[567, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[568, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[569, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[570, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[571, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[572, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[588, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[589, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[590, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[591, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[613, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[614, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[615, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[616, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[617, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[618, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[619, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[620, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[621, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[623, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[624, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[626, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[627, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[629, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[630, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[632, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[633, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[635, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[636, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[638, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[639, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[640, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[641, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[642, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[643, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[644, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[645, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[646, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[647, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[648, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[649, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[650, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[651, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[652, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[653, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[654, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[655, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[656, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[657, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[658, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[659, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[660, "cudf.core.window.rolling.Rolling.var"]], "crosstab() (in module cudf)": [[661, "cudf.crosstab"]], "cut() (in module cudf)": [[662, "cudf.cut"]], "describe_option() (in module cudf)": [[663, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[664, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[665, "cudf.get_dummies"]], "get_option() (in module cudf)": [[666, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[667, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[668, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[669, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[670, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[671, "cudf.melt"]], "pivot() (in module cudf)": [[672, "cudf.pivot"]], "pivot_table() (in module cudf)": [[673, "cudf.pivot_table"]], "read_avro() (in module cudf)": [[674, "cudf.read_avro"]], "read_csv() (in module cudf)": [[675, "cudf.read_csv"]], "read_feather() (in module cudf)": [[676, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[677, "cudf.read_hdf"]], "read_json() (in module cudf)": [[678, "cudf.read_json"]], "read_orc() (in module cudf)": [[679, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[680, "cudf.read_parquet"]], "read_text() (in module cudf)": [[681, "cudf.read_text"]], "set_option() (in module cudf)": [[682, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[683, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[684, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[685, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[686, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[687, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[688, "cudf.to_numeric"]], "unstack() (in module cudf)": [[689, "cudf.unstack"]], "categoricaldtype (class in cudf)": [[714, "cudf.CategoricalDtype"]], "categories (cudf.categoricaldtype property)": [[714, "cudf.CategoricalDtype.categories"], [715, "cudf.CategoricalDtype.categories"]], "from_pandas() (cudf.categoricaldtype class method)": [[714, "cudf.CategoricalDtype.from_pandas"], [716, "cudf.CategoricalDtype.from_pandas"]], "ordered (cudf.categoricaldtype property)": [[714, "cudf.CategoricalDtype.ordered"], [717, "cudf.CategoricalDtype.ordered"]], "to_pandas() (cudf.categoricaldtype method)": [[714, "cudf.CategoricalDtype.to_pandas"], [718, "cudf.CategoricalDtype.to_pandas"]], "decimal128dtype (class in cudf)": [[719, "cudf.Decimal128Dtype"]], "from_arrow() (cudf.decimal128dtype class method)": [[719, "cudf.Decimal128Dtype.from_arrow"], [720, "cudf.Decimal128Dtype.from_arrow"]], "itemsize (cudf.decimal128dtype property)": [[719, "cudf.Decimal128Dtype.itemsize"], [721, "cudf.Decimal128Dtype.itemsize"]], "precision (cudf.decimal128dtype property)": [[719, "cudf.Decimal128Dtype.precision"], [722, "cudf.Decimal128Dtype.precision"]], "scale (cudf.decimal128dtype property)": [[719, "cudf.Decimal128Dtype.scale"], [723, "cudf.Decimal128Dtype.scale"]], "to_arrow() (cudf.decimal128dtype method)": [[719, "cudf.Decimal128Dtype.to_arrow"], [724, "cudf.Decimal128Dtype.to_arrow"]], "decimal32dtype (class in cudf)": [[725, "cudf.Decimal32Dtype"]], "from_arrow() (cudf.decimal32dtype class method)": [[725, "cudf.Decimal32Dtype.from_arrow"], [726, "cudf.Decimal32Dtype.from_arrow"]], "itemsize (cudf.decimal32dtype property)": [[725, "cudf.Decimal32Dtype.itemsize"], [727, "cudf.Decimal32Dtype.itemsize"]], "precision (cudf.decimal32dtype property)": [[725, "cudf.Decimal32Dtype.precision"], [728, "cudf.Decimal32Dtype.precision"]], "scale (cudf.decimal32dtype property)": [[725, "cudf.Decimal32Dtype.scale"], [729, "cudf.Decimal32Dtype.scale"]], "to_arrow() (cudf.decimal32dtype method)": [[725, "cudf.Decimal32Dtype.to_arrow"], [730, "cudf.Decimal32Dtype.to_arrow"]], "decimal64dtype (class in cudf)": [[731, "cudf.Decimal64Dtype"]], "from_arrow() (cudf.decimal64dtype class method)": [[731, "cudf.Decimal64Dtype.from_arrow"], [732, "cudf.Decimal64Dtype.from_arrow"]], "itemsize (cudf.decimal64dtype property)": [[731, "cudf.Decimal64Dtype.itemsize"], [733, "cudf.Decimal64Dtype.itemsize"]], "precision (cudf.decimal64dtype property)": [[731, "cudf.Decimal64Dtype.precision"], [734, "cudf.Decimal64Dtype.precision"]], "scale (cudf.decimal64dtype property)": [[731, "cudf.Decimal64Dtype.scale"], [735, "cudf.Decimal64Dtype.scale"]], "to_arrow() (cudf.decimal64dtype method)": [[731, "cudf.Decimal64Dtype.to_arrow"], [736, "cudf.Decimal64Dtype.to_arrow"]], "listdtype (class in cudf)": [[737, "cudf.ListDtype"]], "element_type (cudf.listdtype property)": [[737, "cudf.ListDtype.element_type"], [738, "cudf.ListDtype.element_type"]], "from_arrow() (cudf.listdtype class method)": [[737, "cudf.ListDtype.from_arrow"], [739, "cudf.ListDtype.from_arrow"]], "leaf_type (cudf.listdtype property)": [[737, "cudf.ListDtype.leaf_type"], [740, "cudf.ListDtype.leaf_type"]], "to_arrow() (cudf.listdtype method)": [[737, "cudf.ListDtype.to_arrow"], [741, "cudf.ListDtype.to_arrow"]], "structdtype (class in cudf)": [[742, "cudf.StructDtype"]], "fields (cudf.structdtype property)": [[742, "cudf.StructDtype.fields"], [743, "cudf.StructDtype.fields"]], "from_arrow() (cudf.structdtype class method)": [[742, "cudf.StructDtype.from_arrow"], [744, "cudf.StructDtype.from_arrow"]], "to_arrow() (cudf.structdtype method)": [[742, "cudf.StructDtype.to_arrow"], [745, "cudf.StructDtype.to_arrow"]]}})