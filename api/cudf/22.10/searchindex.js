Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 128, 170, 184, 203, 204, 205, 209, 248, 253, 254, 258, 271, 272, 303, 433, 446, 455, 640, 655, 670, 671, 672, 673, 681, 691, 693, 695, 701], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 135, 136, 137, 142, 146, 152, 153, 154, 155, 156, 160, 164, 166, 167, 176, 178, 181, 183, 184, 185, 190, 197, 203, 205, 211, 217, 223, 225, 226, 227, 228, 229, 233, 234, 236, 241, 246, 253, 254, 255, 261, 272, 277, 283, 285, 291, 293, 302, 305, 308, 309, 310, 311, 317, 323, 324, 326, 327, 328, 329, 330, 331, 334, 336, 339, 352, 353, 356, 358, 359, 360, 363, 364, 366, 367, 370, 371, 382, 383, 384, 385, 386, 387, 388, 389, 391, 394, 396, 397, 398, 401, 402, 403, 404, 407, 410, 417, 418, 419, 420, 427, 429, 430, 437, 441, 443, 445, 446, 455, 466, 477, 481, 483, 491, 518, 524, 547, 550, 551, 553, 554, 555, 556, 557, 558, 572, 576, 577, 578, 580, 581, 589, 595, 596, 597, 598, 602, 605, 609, 611, 617, 630, 650, 652, 653, 660, 661, 662, 665, 666, 667, 671, 680, 681, 691, 692, 697, 699, 700, 701, 705, 706], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 152, 153, 154, 155, 161, 162, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 183, 184, 199, 200, 203, 204, 205, 212, 215, 217, 219, 220, 224, 236, 240, 242, 244, 245, 247, 249, 250, 253, 254, 255, 256, 258, 262, 263, 264, 266, 270, 271, 272, 274, 277, 280, 281, 284, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 302, 308, 309, 311, 312, 313, 316, 317, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 345, 346, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 409, 410, 411, 412, 414, 417, 418, 419, 420, 424, 425, 428, 430, 432, 433, 434, 437, 438, 441, 444, 445, 446, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 478, 479, 481, 483, 484, 488, 490, 491, 492, 493, 496, 499, 500, 509, 520, 521, 522, 525, 535, 536, 538, 539, 542, 543, 544, 546, 547, 548, 549, 554, 559, 565, 566, 572, 574, 575, 576, 577, 578, 579, 581, 585, 586, 594, 595, 596, 597, 598, 600, 602, 605, 609, 650, 651, 653, 655, 659, 660, 661, 662, 663, 665, 666, 667, 668, 674, 675, 676, 698, 699, 704, 707], "categori": [0, 2, 21, 36, 93, 94, 226, 234, 285, 291, 302, 320, 326, 457, 458, 459, 462, 463, 464, 465, 496, 529, 650, 653, 670, 673, 695, 698, 701, 702, 706, 709], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 121, 140, 142, 149, 156, 166, 171, 179, 184, 203, 236, 241, 244, 253, 284, 285, 310, 312, 320, 330, 365, 372, 375, 388, 406, 407, 413, 429, 441, 446, 455, 458, 459, 464, 465, 473, 475, 485, 553, 650, 652, 655, 662, 665, 670, 671, 672, 673, 674, 691, 698, 703, 705], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 162, 168, 170, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 240, 242, 244, 245, 248, 249, 250, 253, 254, 255, 258, 260, 267, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 291, 292, 293, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 425, 428, 432, 433, 437, 438, 439, 441, 444, 445, 446, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 572, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 650, 653, 662, 665, 667, 670, 671, 672, 673, 674, 675, 676, 686, 691, 695, 698, 699, 700, 702, 703, 704, 705, 709], "copi": [0, 5, 21, 44, 45, 46, 54, 123, 124, 162, 164, 168, 174, 175, 184, 203, 205, 244, 246, 253, 254, 255, 258, 271, 285, 311, 322, 390, 391, 425, 427, 432, 446, 455, 457, 458, 459, 463, 464, 465, 524, 535, 560, 652, 667, 693, 695, 706, 709], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 117, 121, 123, 124, 126, 128, 132, 137, 140, 141, 143, 148, 149, 158, 160, 162, 166, 167, 170, 171, 178, 179, 183, 184, 203, 205, 212, 213, 217, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 250, 253, 254, 255, 256, 258, 266, 271, 272, 280, 281, 282, 285, 289, 292, 293, 302, 307, 310, 311, 312, 313, 316, 317, 318, 319, 322, 328, 329, 330, 331, 332, 339, 344, 345, 346, 353, 356, 358, 362, 365, 369, 371, 373, 374, 388, 393, 395, 399, 404, 406, 412, 413, 422, 425, 429, 430, 433, 439, 441, 445, 446, 455, 456, 457, 458, 459, 463, 464, 465, 467, 468, 473, 480, 483, 488, 489, 490, 491, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 526, 529, 535, 542, 547, 548, 558, 575, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 619, 620, 622, 623, 624, 625, 641, 650, 653, 655, 656, 662, 665, 667, 670, 671, 672, 673, 674, 691, 696, 698, 699, 700, 703, 704, 707], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 114, 117, 119, 120, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 146, 148, 149, 152, 153, 161, 166, 169, 171, 174, 176, 177, 178, 184, 199, 200, 203, 205, 218, 236, 239, 242, 244, 247, 249, 253, 254, 255, 258, 259, 260, 262, 263, 264, 267, 270, 271, 272, 277, 284, 285, 302, 308, 309, 311, 312, 317, 324, 329, 330, 331, 337, 344, 345, 346, 353, 355, 356, 359, 360, 363, 364, 366, 367, 371, 373, 374, 383, 386, 387, 389, 391, 395, 396, 397, 398, 400, 401, 402, 403, 404, 410, 412, 417, 418, 428, 429, 437, 446, 453, 454, 455, 456, 542, 561, 564, 583, 608, 626, 651, 653, 654, 655, 658, 659, 660, 662, 664, 665, 669, 670, 671, 672, 673, 676, 691, 693, 694, 695, 696, 698, 702, 703, 704, 705, 707], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 119, 123, 124, 125, 126, 127, 132, 133, 137, 139, 142, 161, 166, 167, 169, 181, 183, 192, 209, 210, 217, 222, 240, 241, 258, 260, 278, 279, 282, 302, 303, 304, 307, 311, 314, 316, 322, 323, 326, 328, 330, 333, 335, 352, 358, 377, 382, 392, 393, 394, 399, 400, 404, 407, 429, 430, 438, 443, 445, 456, 466, 476, 478, 483, 484, 488, 489, 500, 505, 521, 522, 524, 535, 545, 546, 548, 550, 551, 555, 556, 557, 564, 583, 589, 601, 606, 608, 619, 641, 642, 650, 652, 655, 659, 662, 664, 675, 691, 692, 693, 695, 698, 703, 704, 705, 707], "categor": [0, 1, 2, 21, 36, 93, 94, 225, 226, 227, 228, 229, 233, 234, 285, 291, 302, 326, 650, 653, 667, 670, 671, 672, 673, 695, 702, 703, 705, 709], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 166, 167, 168, 170, 171, 173, 176, 178, 179, 181, 182, 183, 200, 205, 212, 214, 215, 217, 218, 224, 230, 231, 232, 235, 244, 245, 249, 251, 256, 265, 272, 276, 277, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 425, 429, 430, 432, 433, 434, 437, 438, 439, 440, 441, 443, 444, 445, 454, 456, 463, 465, 466, 467, 468, 471, 473, 476, 478, 482, 483, 485, 491, 496, 497, 498, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 526, 532, 534, 535, 541, 542, 546, 547, 556, 558, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 607, 609, 610, 641, 642, 650, 653, 654, 659, 660, 662, 665, 667, 669, 671, 672, 673, 675, 684, 686, 687, 688, 691, 693, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 708], "repres": [0, 23, 127, 144, 151, 161, 167, 182, 184, 272, 287, 289, 394, 408, 414, 430, 444, 446, 470, 478, 496, 497, 498, 515, 616, 647, 649, 650, 653, 691, 695, 702, 707, 709], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 140, 158, 167, 178, 192, 196, 207, 244, 245, 266, 284, 293, 307, 313, 316, 320, 322, 332, 339, 344, 345, 346, 373, 374, 377, 382, 406, 422, 430, 456, 468, 474, 476, 483, 485, 488, 521, 522, 532, 537, 541, 548, 601, 619, 620, 621, 622, 623, 624, 625, 629, 641, 650, 653, 662, 665, 680, 692, 695, 699, 704], "anoth": [0, 40, 162, 166, 168, 178, 282, 306, 357, 425, 429, 432, 558, 695], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 146, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 193, 199, 246, 247, 262, 264, 270, 272, 277, 278, 279, 280, 281, 284, 285, 291, 297, 298, 299, 300, 302, 308, 309, 311, 313, 316, 317, 318, 322, 324, 329, 330, 331, 333, 334, 337, 350, 351, 353, 355, 356, 359, 360, 363, 364, 366, 367, 371, 379, 383, 384, 385, 386, 387, 388, 389, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 410, 412, 414, 417, 418, 419, 421, 423, 425, 427, 428, 429, 430, 432, 434, 437, 444, 453, 456, 564, 567, 573, 575, 576, 577, 578, 580, 581, 583, 587, 588, 589, 595, 596, 597, 598, 602, 604, 605, 607, 608, 609, 610, 626, 640, 641, 642, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 680, 681, 691, 694, 698, 699, 700, 701, 703, 704, 705, 707], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 185, 190, 197, 199, 200, 203, 205, 207, 209, 210, 212, 215, 217, 218, 220, 222, 224, 235, 236, 239, 240, 242, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 339, 344, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 375, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 411, 412, 413, 414, 417, 418, 419, 420, 422, 423, 425, 427, 428, 429, 430, 432, 433, 437, 439, 441, 444, 445, 446, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 503, 504, 520, 522, 523, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 558, 559, 561, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 617, 630, 632, 640, 641, 642, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 691, 692, 693, 706, 707], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 75, 76, 88, 94, 104, 105, 117, 118, 119, 121, 123, 125, 126, 137, 140, 158, 162, 167, 168, 183, 184, 203, 205, 212, 224, 235, 240, 244, 245, 250, 253, 254, 255, 256, 258, 263, 266, 272, 282, 284, 292, 301, 307, 320, 325, 326, 327, 330, 345, 346, 358, 373, 374, 386, 388, 392, 393, 404, 406, 422, 424, 425, 430, 432, 445, 446, 455, 482, 486, 520, 536, 580, 642, 650, 653, 665, 674, 695, 698, 699, 705], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 61, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 114, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 152, 153, 158, 166, 167, 176, 177, 179, 183, 184, 185, 190, 197, 203, 205, 212, 215, 224, 235, 245, 250, 253, 254, 255, 260, 262, 264, 272, 277, 282, 289, 292, 302, 308, 309, 310, 311, 314, 317, 319, 322, 324, 326, 327, 329, 330, 331, 344, 353, 356, 358, 364, 366, 367, 371, 383, 386, 387, 388, 389, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 417, 418, 422, 429, 430, 437, 445, 446, 455, 456, 457, 463, 464, 465, 474, 483, 486, 488, 503, 504, 508, 520, 529, 535, 536, 542, 548, 572, 580, 611, 617, 630, 642, 650, 653, 661, 662, 665, 666, 667, 668, 670, 671, 673, 674, 676, 681, 682, 684, 686, 687, 688, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 707, 709], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 171, 173, 176, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 203, 205, 207, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 433, 434, 437, 438, 439, 441, 444, 445, 446, 450, 451, 452, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 573, 575, 581, 583, 584, 587, 589, 601, 604, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 647, 649, 650, 653, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 698, 699, 700, 702, 703, 704, 707, 709], "dimension": [0, 144, 184, 203, 205, 253, 254, 255, 258, 272, 408, 446, 455, 542, 547, 650], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 107, 109, 110, 115, 116, 123, 125, 126, 127, 132, 141, 142, 148, 150, 151, 154, 156, 159, 162, 167, 168, 171, 179, 180, 182, 186, 187, 188, 189, 191, 194, 195, 198, 200, 201, 202, 203, 205, 209, 210, 211, 222, 223, 227, 235, 240, 241, 242, 244, 245, 249, 253, 256, 257, 258, 262, 266, 272, 278, 279, 283, 284, 286, 301, 302, 303, 304, 305, 310, 312, 315, 318, 323, 326, 327, 334, 335, 336, 344, 352, 362, 372, 375, 378, 381, 384, 385, 392, 393, 394, 395, 399, 407, 412, 414, 419, 423, 425, 430, 432, 441, 442, 444, 454, 455, 456, 457, 460, 463, 464, 465, 475, 478, 480, 481, 483, 485, 486, 487, 489, 491, 492, 494, 496, 503, 504, 507, 508, 515, 518, 520, 526, 527, 528, 529, 532, 533, 535, 536, 541, 542, 545, 547, 552, 553, 558, 559, 576, 577, 578, 580, 581, 584, 589, 595, 596, 597, 598, 602, 604, 605, 607, 609, 611, 612, 613, 614, 615, 617, 618, 627, 628, 630, 631, 632, 633, 634, 641, 642, 647, 649, 650, 651, 654, 659, 662, 664, 665, 666, 667, 668, 669, 674, 675, 680, 692, 693, 694, 696, 698, 699, 700, 701, 702, 704, 706, 707, 709], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 170, 171, 176, 177, 178, 182, 184, 200, 205, 217, 236, 242, 249, 254, 255, 256, 262, 263, 266, 272, 277, 280, 281, 282, 284, 292, 297, 298, 299, 300, 302, 308, 309, 310, 311, 312, 313, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 344, 352, 353, 356, 357, 359, 360, 363, 364, 366, 367, 371, 382, 383, 384, 385, 386, 387, 389, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 412, 413, 414, 417, 418, 419, 429, 430, 433, 437, 439, 441, 444, 446, 454, 464, 465, 467, 469, 470, 473, 478, 483, 488, 489, 491, 494, 496, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 519, 520, 525, 529, 532, 535, 541, 542, 543, 547, 548, 549, 567, 575, 576, 577, 578, 588, 595, 596, 597, 598, 602, 605, 609, 640, 641, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 665, 666, 667, 669, 671, 672, 674, 675, 676, 691, 692, 693, 698, 699, 700, 701, 704, 706, 709], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 115, 116, 117, 119, 121, 123, 126, 127, 132, 133, 137, 140, 141, 142, 147, 151, 154, 161, 166, 167, 171, 178, 179, 182, 183, 192, 196, 212, 213, 218, 224, 230, 231, 232, 235, 241, 250, 254, 255, 256, 258, 262, 272, 276, 278, 279, 280, 281, 283, 284, 289, 293, 302, 311, 313, 316, 318, 322, 326, 327, 330, 340, 341, 342, 343, 344, 345, 346, 350, 351, 357, 358, 359, 361, 363, 372, 373, 374, 375, 382, 384, 385, 386, 388, 393, 394, 399, 400, 404, 406, 407, 411, 414, 419, 429, 430, 439, 444, 445, 456, 464, 465, 467, 470, 478, 483, 486, 487, 488, 489, 491, 492, 494, 496, 500, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 520, 525, 526, 529, 535, 536, 542, 543, 545, 547, 548, 549, 554, 556, 557, 558, 559, 560, 576, 577, 578, 589, 595, 596, 597, 598, 602, 605, 609, 619, 620, 621, 622, 623, 624, 625, 629, 632, 641, 642, 650, 653, 655, 659, 660, 662, 664, 665, 666, 667, 670, 671, 672, 673, 680, 682, 683, 686, 690, 691, 692, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "given": [0, 21, 44, 103, 112, 117, 118, 125, 126, 127, 128, 133, 137, 140, 171, 220, 240, 262, 285, 311, 327, 386, 392, 393, 394, 395, 400, 404, 406, 464, 465, 469, 474, 478, 483, 488, 491, 496, 517, 522, 532, 535, 542, 547, 548, 554, 558, 655, 660, 662, 666, 667, 674, 691, 692, 695, 706], "replac": [0, 46, 88, 137, 148, 183, 313, 358, 404, 412, 445, 491, 492, 500, 520, 536, 544, 546, 681, 691, 692, 693, 698, 700, 705, 709], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 120, 121, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 148, 152, 153, 166, 167, 170, 176, 205, 217, 227, 233, 244, 272, 277, 284, 302, 308, 309, 317, 318, 324, 328, 329, 331, 339, 345, 346, 353, 356, 357, 364, 365, 366, 367, 369, 371, 373, 374, 379, 383, 387, 388, 389, 390, 396, 397, 398, 399, 401, 402, 403, 412, 417, 418, 429, 430, 433, 437, 439, 441, 467, 473, 475, 483, 535, 572, 643, 653, 662, 699, 704, 705, 709], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 114, 117, 120, 122, 124, 126, 128, 129, 130, 131, 134, 135, 136, 139, 141, 142, 143, 148, 149, 152, 153, 161, 166, 167, 169, 171, 176, 177, 179, 183, 207, 209, 210, 211, 215, 222, 223, 235, 241, 242, 256, 260, 262, 263, 264, 267, 272, 277, 282, 283, 284, 287, 289, 291, 302, 303, 304, 305, 308, 309, 310, 311, 317, 319, 324, 329, 330, 331, 335, 336, 337, 344, 353, 356, 358, 364, 366, 367, 371, 383, 386, 387, 389, 393, 395, 396, 397, 398, 401, 402, 403, 407, 412, 413, 417, 418, 429, 430, 437, 445, 456, 457, 463, 465, 478, 480, 483, 487, 488, 494, 503, 504, 520, 535, 542, 547, 548, 552, 553, 564, 572, 581, 583, 608, 610, 642, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 676, 681, 693, 695, 697, 698, 700, 701, 703, 704, 705, 706, 707, 709], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 61, 70, 92, 110, 111, 112, 121, 123, 124, 127, 132, 133, 137, 140, 148, 161, 162, 166, 167, 168, 169, 171, 173, 174, 179, 184, 200, 207, 242, 244, 249, 254, 255, 256, 258, 262, 263, 264, 271, 272, 294, 302, 311, 313, 326, 327, 330, 381, 382, 386, 388, 391, 394, 395, 399, 400, 404, 406, 412, 425, 429, 430, 432, 434, 441, 446, 454, 456, 457, 458, 459, 463, 464, 465, 467, 469, 490, 491, 492, 544, 546, 572, 581, 587, 589, 601, 641, 650, 651, 653, 654, 656, 659, 660, 662, 664, 666, 667, 669, 681, 691, 694, 697, 704, 705, 706], "item": [0, 36, 48, 106, 113, 137, 143, 272, 302, 316, 320, 404, 464, 465, 662, 664], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 160, 176, 272, 277, 294, 308, 309, 316, 317, 318, 324, 329, 331, 353, 356, 364, 366, 367, 371, 377, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 464, 484, 642, 650, 691, 692, 693, 695, 698, 700, 702, 704, 709], "uniqu": [0, 36, 112, 124, 139, 179, 256, 258, 263, 266, 272, 302, 320, 343, 379, 441, 650, 653, 660, 665, 681, 698, 699, 703, 709], "here": [0, 36, 302, 533, 661, 662, 666, 667, 691, 693, 695, 700, 704, 706], "also": [0, 15, 36, 54, 94, 123, 124, 126, 128, 132, 133, 244, 302, 322, 357, 391, 393, 395, 399, 400, 439, 483, 484, 486, 493, 495, 499, 500, 503, 504, 508, 515, 529, 532, 539, 541, 650, 655, 665, 666, 667, 691, 692, 693, 694, 695, 697, 698, 700, 702, 703, 704, 706, 707, 709], "thei": [0, 15, 50, 94, 97, 121, 126, 171, 272, 283, 318, 326, 327, 375, 388, 393, 478, 485, 496, 553, 558, 655, 691, 692, 693, 695, 697, 702, 703, 704, 709], "infer": [0, 4, 167, 184, 254, 255, 263, 272, 430, 449, 662, 665, 674, 698], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 113, 117, 123, 124, 127, 128, 137, 143, 148, 149, 150, 164, 166, 167, 171, 175, 178, 179, 183, 187, 189, 196, 209, 210, 212, 214, 217, 218, 246, 254, 255, 256, 260, 261, 262, 263, 264, 266, 272, 282, 283, 302, 303, 304, 311, 313, 325, 326, 328, 330, 357, 358, 381, 390, 391, 394, 395, 404, 412, 413, 415, 427, 429, 430, 439, 445, 456, 469, 471, 473, 474, 478, 480, 489, 490, 491, 492, 495, 496, 525, 527, 528, 529, 530, 531, 535, 542, 543, 544, 546, 547, 549, 572, 576, 577, 578, 584, 589, 595, 596, 597, 598, 599, 602, 605, 609, 613, 615, 629, 640, 641, 642, 650, 652, 653, 659, 660, 661, 662, 663, 664, 666, 674, 675, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 704, 709], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 115, 116, 117, 121, 126, 128, 132, 137, 139, 140, 141, 147, 148, 149, 150, 151, 154, 160, 161, 162, 166, 167, 168, 171, 172, 179, 182, 183, 184, 203, 205, 208, 213, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 244, 250, 253, 254, 255, 258, 271, 272, 280, 281, 282, 283, 284, 285, 289, 292, 293, 297, 298, 299, 300, 302, 307, 310, 311, 312, 313, 316, 317, 318, 319, 328, 329, 330, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 365, 371, 373, 374, 379, 384, 385, 388, 393, 395, 399, 404, 406, 411, 412, 413, 414, 419, 425, 429, 430, 432, 441, 444, 445, 446, 455, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 473, 480, 483, 488, 489, 490, 491, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 526, 529, 532, 535, 541, 542, 547, 548, 567, 575, 576, 577, 578, 588, 595, 596, 597, 598, 602, 605, 609, 619, 620, 622, 623, 624, 625, 640, 641, 650, 655, 662, 664, 665, 666, 670, 671, 672, 673, 674, 704, 706, 707], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 117, 121, 143, 150, 160, 162, 167, 168, 170, 172, 183, 206, 212, 214, 224, 225, 227, 228, 229, 233, 234, 235, 250, 254, 255, 280, 281, 289, 302, 307, 311, 316, 318, 332, 344, 345, 346, 358, 373, 374, 377, 386, 388, 425, 430, 432, 433, 445, 457, 458, 459, 462, 463, 464, 465, 468, 483, 488, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 548, 641, 650, 662, 667, 670, 671, 672, 673, 680, 693, 700], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 152, 153, 154, 156, 164, 168, 169, 171, 173, 176, 182, 184, 199, 205, 209, 210, 212, 215, 218, 224, 230, 240, 241, 244, 246, 247, 266, 269, 270, 271, 272, 276, 277, 282, 283, 286, 289, 292, 293, 302, 303, 304, 307, 308, 309, 310, 317, 318, 323, 324, 326, 327, 329, 330, 331, 333, 334, 339, 340, 352, 353, 356, 364, 366, 367, 368, 371, 372, 375, 383, 384, 385, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 412, 413, 414, 415, 417, 418, 419, 427, 432, 434, 437, 438, 444, 446, 449, 453, 457, 458, 459, 460, 463, 464, 465, 469, 477, 478, 482, 484, 486, 487, 490, 491, 492, 494, 499, 501, 502, 505, 506, 507, 508, 510, 512, 514, 515, 516, 519, 520, 524, 525, 527, 528, 529, 532, 536, 537, 539, 541, 542, 543, 547, 549, 550, 551, 554, 555, 558, 560, 575, 581, 589, 601, 640, 641, 650, 652, 653, 655, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 681, 683, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 184, 192, 203, 205, 206, 210, 212, 215, 217, 218, 225, 226, 227, 228, 229, 230, 233, 234, 235, 240, 241, 242, 244, 246, 253, 256, 262, 264, 266, 271, 272, 273, 277, 280, 281, 282, 283, 284, 285, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 323, 324, 327, 328, 329, 330, 331, 334, 339, 340, 344, 345, 346, 352, 353, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 373, 374, 375, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 410, 412, 413, 414, 417, 418, 419, 421, 425, 427, 429, 430, 432, 433, 434, 436, 437, 439, 441, 444, 445, 446, 449, 455, 456, 464, 465, 467, 468, 469, 470, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 527, 528, 529, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 573, 581, 584, 587, 589, 601, 604, 606, 607, 611, 617, 619, 620, 622, 623, 624, 625, 630, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 658, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709], "treat": [0, 12, 13, 73, 94, 183, 280, 281, 289, 339, 445, 464, 465, 483, 527, 535, 542, 547, 699, 704, 706, 707], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 115, 116, 117, 119, 123, 124, 125, 132, 133, 137, 142, 146, 148, 151, 154, 164, 166, 182, 192, 200, 209, 218, 230, 240, 241, 244, 246, 249, 250, 255, 263, 265, 266, 272, 280, 281, 283, 292, 297, 298, 299, 300, 302, 303, 330, 337, 339, 340, 344, 345, 346, 362, 373, 374, 384, 385, 386, 390, 392, 399, 400, 404, 407, 410, 412, 414, 419, 427, 429, 444, 454, 462, 468, 469, 479, 481, 482, 483, 485, 488, 496, 501, 502, 505, 509, 513, 520, 523, 527, 528, 531, 540, 548, 559, 589, 606, 619, 641, 642, 650, 651, 652, 661, 663, 664, 665, 666, 674, 675, 680, 682, 691, 692, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 709], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 114, 115, 116, 117, 120, 122, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 143, 147, 150, 151, 152, 153, 154, 155, 161, 167, 170, 174, 176, 177, 179, 182, 200, 212, 224, 236, 249, 250, 256, 266, 272, 277, 280, 281, 283, 286, 294, 297, 298, 299, 300, 302, 308, 309, 310, 317, 319, 322, 324, 329, 330, 331, 339, 344, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 406, 411, 414, 417, 418, 419, 420, 430, 433, 437, 441, 444, 454, 456, 465, 467, 473, 478, 479, 491, 520, 523, 531, 540, 559, 564, 572, 575, 576, 577, 578, 583, 584, 587, 589, 595, 596, 597, 598, 601, 602, 605, 606, 608, 609, 650, 659, 660, 665, 668, 675, 676, 691, 692, 693, 695, 698, 699, 701, 702, 703, 704, 705, 707], "unord": [0, 94, 459, 650], "categoricaldtyp": [0, 21, 285, 695, 702], "cannot": [0, 54, 71, 137, 167, 215, 224, 322, 372, 375, 404, 430, 529, 575, 655, 691, 692, 702, 703], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 106, 107, 110, 111, 112, 117, 118, 119, 123, 124, 126, 127, 128, 132, 133, 137, 139, 143, 148, 151, 161, 162, 166, 167, 168, 169, 170, 171, 173, 178, 179, 182, 199, 200, 203, 215, 218, 247, 249, 253, 256, 262, 270, 271, 272, 282, 283, 285, 294, 302, 311, 313, 322, 326, 330, 333, 334, 337, 339, 344, 350, 351, 355, 357, 359, 360, 362, 363, 381, 382, 386, 390, 393, 394, 395, 399, 400, 404, 412, 414, 425, 428, 429, 430, 432, 433, 434, 439, 444, 453, 454, 455, 465, 467, 478, 482, 483, 484, 486, 488, 490, 491, 492, 493, 499, 507, 517, 520, 522, 527, 528, 529, 535, 536, 537, 538, 539, 542, 545, 547, 552, 553, 557, 558, 564, 575, 576, 577, 578, 580, 581, 583, 589, 595, 596, 597, 598, 602, 604, 605, 607, 608, 609, 632, 640, 641, 647, 649, 650, 653, 655, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 682, 683, 684, 686, 687, 688, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709], "togeth": [0, 111, 207, 382, 693, 694, 700, 703, 704], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 160, 161, 162, 166, 167, 168, 169, 170, 171, 175, 176, 178, 179, 182, 183, 184, 199, 200, 205, 212, 213, 214, 215, 217, 224, 236, 239, 242, 244, 247, 249, 250, 254, 255, 256, 258, 270, 271, 272, 277, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 293, 294, 297, 298, 299, 300, 302, 306, 308, 309, 310, 311, 312, 313, 317, 319, 322, 324, 328, 329, 330, 331, 333, 334, 339, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 371, 372, 375, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 411, 412, 413, 414, 417, 418, 419, 425, 428, 429, 430, 432, 433, 437, 441, 444, 445, 446, 453, 454, 456, 457, 458, 459, 463, 464, 465, 467, 469, 473, 478, 479, 480, 483, 484, 485, 489, 491, 492, 494, 496, 500, 520, 523, 525, 526, 527, 528, 529, 531, 532, 535, 536, 540, 541, 542, 543, 545, 546, 547, 549, 552, 553, 565, 566, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 589, 594, 595, 596, 597, 598, 600, 602, 605, 609, 640, 641, 647, 649, 650, 653, 655, 659, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 691, 692, 698, 703, 704, 706, 707, 708, 709], "make": [0, 28, 48, 161, 184, 203, 205, 253, 262, 263, 264, 293, 316, 439, 446, 455, 491, 535, 542, 547, 554, 662, 666, 691, 692, 693, 695, 698, 700, 704], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 114, 119, 120, 122, 129, 130, 131, 133, 134, 135, 136, 148, 152, 153, 159, 166, 176, 179, 184, 203, 205, 217, 253, 254, 255, 261, 277, 283, 284, 292, 302, 308, 309, 317, 320, 324, 325, 328, 329, 330, 331, 353, 356, 357, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 400, 401, 402, 403, 412, 417, 418, 423, 429, 437, 446, 455, 496, 520, 534, 606, 640, 641, 642, 650, 652, 655, 662, 665, 667, 668, 674, 675, 681, 691, 692, 695, 697, 700, 703, 704, 705], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 142, 143, 148, 152, 153, 158, 161, 164, 166, 167, 169, 170, 173, 176, 178, 184, 203, 205, 207, 209, 210, 211, 212, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 241, 242, 245, 246, 250, 253, 254, 255, 256, 258, 260, 266, 267, 271, 272, 277, 282, 283, 285, 288, 290, 291, 293, 302, 303, 304, 305, 308, 309, 310, 312, 313, 314, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 343, 345, 346, 349, 353, 356, 357, 362, 364, 366, 367, 368, 371, 373, 374, 380, 382, 383, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 407, 412, 417, 418, 422, 424, 427, 428, 429, 430, 434, 437, 438, 439, 441, 446, 455, 456, 477, 478, 479, 480, 481, 483, 485, 488, 489, 490, 491, 492, 495, 496, 499, 500, 518, 520, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 575, 581, 601, 626, 632, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 658, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 680, 681, 690, 691, 695, 696, 697, 700, 701, 704, 705], "store": [0, 166, 169, 171, 184, 203, 205, 253, 254, 255, 271, 272, 326, 429, 446, 455, 496, 650, 661, 662, 664, 666, 667, 691, 692, 693, 695, 696, 698, 702, 704, 709], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 164, 166, 167, 169, 171, 172, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 253, 254, 255, 256, 258, 260, 263, 264, 265, 266, 268, 270, 271, 272, 277, 282, 283, 284, 287, 292, 293, 297, 298, 299, 300, 302, 308, 309, 311, 313, 314, 316, 317, 319, 320, 322, 323, 324, 325, 327, 329, 330, 331, 337, 339, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 362, 363, 364, 366, 367, 371, 373, 374, 375, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 419, 423, 424, 427, 428, 429, 430, 433, 437, 439, 444, 446, 453, 454, 455, 456, 461, 464, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 573, 575, 584, 611, 617, 630, 641, 650, 655, 659, 660, 662, 665, 666, 667, 671, 672, 673, 676, 681, 691, 693, 697, 699, 701, 704, 705, 707, 709], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 199, 200, 203, 205, 206, 207, 209, 210, 211, 212, 215, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 432, 433, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 568, 572, 573, 575, 576, 577, 578, 581, 582, 583, 584, 587, 589, 590, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 608, 609, 611, 616, 617, 619, 620, 622, 623, 624, 625, 626, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 675, 676, 680, 686, 690, 693, 695, 696, 698, 699, 700, 703, 704], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 240, 242, 244, 245, 248, 250, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 428, 433, 434, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 575, 583, 584, 587, 589, 601, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 650, 653, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 691, 692, 693, 695, 698, 699, 700, 702, 703, 704, 707, 709], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 115, 116, 117, 119, 124, 125, 126, 132, 137, 138, 141, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 170, 173, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 236, 239, 242, 244, 248, 250, 255, 258, 259, 260, 261, 262, 266, 267, 271, 272, 280, 281, 282, 284, 285, 286, 287, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 310, 311, 313, 316, 318, 319, 320, 322, 325, 326, 327, 328, 330, 332, 333, 337, 344, 345, 346, 349, 350, 351, 355, 358, 359, 360, 361, 363, 365, 369, 372, 373, 374, 375, 384, 385, 386, 390, 391, 392, 393, 399, 404, 405, 410, 411, 412, 413, 414, 419, 420, 421, 423, 424, 428, 433, 434, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 572, 583, 584, 587, 589, 601, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 653, 658, 659, 661, 662, 663, 665, 666, 667, 671, 672, 673, 674, 675, 691, 692, 693, 698, 699, 700, 702, 703, 704, 707, 709], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 119, 124, 126, 132, 137, 148, 149, 161, 166, 170, 173, 175, 177, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 248, 250, 255, 283, 302, 326, 328, 330, 345, 346, 362, 373, 374, 391, 393, 399, 404, 412, 413, 415, 429, 433, 434, 473, 558, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 631, 632, 633, 634, 653, 659, 661, 664, 665, 667, 670, 671, 673, 675, 676, 683, 686, 694, 695, 697, 700, 701, 702, 703, 704, 705, 707, 708], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 250, 255, 266, 326, 328, 330, 345, 346, 373, 374, 399, 433, 515, 575, 584, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 661, 698, 699, 702, 704, 707, 709], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 124, 125, 126, 127, 128, 132, 133, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 170, 173, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 198, 201, 205, 207, 212, 215, 224, 225, 226, 227, 228, 233, 234, 235, 236, 239, 242, 244, 245, 250, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 310, 311, 312, 313, 316, 318, 319, 322, 323, 325, 326, 327, 328, 330, 332, 333, 334, 337, 344, 345, 346, 349, 350, 351, 352, 355, 357, 358, 359, 360, 361, 363, 365, 369, 373, 374, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 399, 400, 402, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 429, 433, 434, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 564, 572, 575, 583, 584, 587, 589, 601, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 650, 653, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 695, 698, 699, 700, 701, 702, 703, 704, 707, 709], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 205, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 245, 248, 250, 255, 256, 259, 260, 261, 262, 266, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 314, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 383, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 433, 434, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 490, 492, 493, 497, 498, 499, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 532, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 559, 560, 561, 564, 572, 583, 584, 587, 589, 601, 606, 608, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 650, 653, 655, 659, 660, 662, 665, 671, 672, 673, 674, 676, 698, 699, 700, 702, 703, 704, 707, 709], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 176, 179, 182, 183, 184, 187, 188, 189, 196, 201, 212, 215, 224, 227, 228, 233, 234, 235, 236, 242, 244, 245, 250, 261, 266, 272, 276, 277, 278, 279, 280, 281, 282, 283, 287, 289, 292, 293, 295, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 317, 319, 322, 323, 324, 327, 329, 330, 331, 332, 334, 337, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 437, 438, 439, 441, 444, 445, 446, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 486, 491, 509, 510, 511, 512, 522, 546, 547, 553, 556, 557, 560, 561, 564, 575, 583, 584, 587, 589, 601, 606, 608, 613, 614, 615, 616, 619, 620, 622, 623, 626, 629, 633, 635, 636, 637, 638, 639, 642, 650, 653, 655, 659, 660, 665, 672, 673, 674, 698, 699, 700, 702, 703, 704, 706, 707], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 114, 115, 116, 120, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 151, 152, 153, 154, 170, 176, 177, 178, 179, 182, 183, 215, 217, 277, 280, 281, 283, 289, 291, 295, 297, 298, 299, 300, 302, 306, 308, 309, 313, 316, 317, 319, 322, 324, 325, 327, 328, 329, 331, 332, 345, 346, 350, 351, 353, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 381, 383, 384, 385, 387, 389, 390, 393, 394, 396, 397, 398, 401, 402, 403, 410, 411, 414, 417, 418, 419, 428, 433, 437, 438, 439, 441, 444, 445, 456, 463, 465, 469, 470, 471, 472, 478, 479, 483, 484, 488, 489, 520, 521, 525, 526, 535, 542, 543, 547, 548, 549, 559, 565, 566, 572, 574, 575, 576, 577, 578, 579, 585, 586, 587, 589, 594, 595, 596, 597, 598, 600, 602, 605, 609, 626, 653, 660, 662, 675, 676, 698, 699, 703, 704, 705, 709], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 144, 146, 180, 181, 186, 187, 188, 189, 191, 192, 194, 195, 196, 198, 201, 202, 221, 230, 231, 232, 237, 238, 243, 252, 257, 259, 267, 268, 269, 273, 287, 291, 301, 314, 315, 316, 332, 337, 338, 340, 341, 342, 343, 354, 355, 368, 370, 376, 377, 378, 408, 410, 415, 416, 440, 442, 443, 447, 448, 449, 450, 451, 452, 460, 461, 462, 471, 563, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 684, 687, 688, 691, 693, 698], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 142, 148, 152, 153, 161, 167, 169, 171, 176, 178, 183, 207, 212, 213, 224, 236, 241, 250, 271, 277, 285, 289, 294, 296, 308, 309, 310, 317, 318, 324, 329, 331, 353, 356, 358, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 407, 412, 417, 418, 430, 437, 439, 445, 456, 465, 478, 483, 515, 532, 535, 541, 547, 575, 655, 662, 665, 691, 692, 693, 695, 698, 701, 704, 707, 709], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 115, 116, 139, 147, 151, 154, 163, 165, 166, 167, 169, 170, 171, 182, 205, 258, 280, 281, 283, 285, 295, 339, 350, 351, 359, 360, 361, 363, 382, 384, 385, 390, 393, 411, 412, 414, 419, 426, 429, 430, 433, 444, 558, 569, 570, 571, 576, 577, 578, 591, 592, 593, 595, 596, 597, 598, 601, 602, 605, 609, 632, 642, 644, 645, 646, 648, 655, 661, 663, 664, 665, 666, 667, 668, 704], "determin": [3, 16, 45, 61, 139, 283, 330, 482, 526, 542, 547, 662, 675, 692, 709], "two": [3, 14, 23, 50, 61, 97, 112, 117, 118, 123, 124, 212, 224, 239, 250, 272, 294, 318, 330, 386, 395, 456, 485, 532, 541, 580, 660, 662, 670, 671, 672, 673, 691, 692, 695, 700, 704], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 119, 124, 137, 142, 158, 159, 164, 166, 171, 178, 179, 197, 199, 209, 210, 211, 214, 222, 223, 237, 241, 245, 246, 247, 254, 265, 268, 270, 272, 287, 289, 302, 303, 304, 305, 307, 313, 314, 316, 318, 320, 326, 330, 332, 335, 336, 344, 395, 404, 407, 422, 423, 427, 429, 439, 441, 453, 464, 470, 478, 481, 487, 493, 496, 499, 520, 532, 537, 538, 539, 541, 542, 547, 548, 553, 564, 583, 608, 640, 641, 652, 662, 664, 665, 667, 668, 672, 681, 682, 691, 692, 693, 695, 698, 703, 704, 706, 709], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 121, 123, 125, 126, 133, 137, 148, 166, 171, 178, 183, 185, 190, 240, 242, 254, 272, 285, 302, 307, 313, 318, 339, 345, 346, 357, 358, 373, 374, 388, 392, 393, 400, 404, 412, 429, 445, 464, 469, 470, 478, 494, 499, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 534, 539, 548, 606, 632, 641, 643, 644, 645, 646, 647, 648, 649, 650, 653, 655, 662, 665, 671, 672, 674, 691, 692, 693, 695, 698, 701, 703, 704, 706, 707, 709], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 114, 120, 121, 122, 125, 129, 130, 131, 133, 134, 135, 136, 140, 141, 142, 146, 151, 152, 153, 176, 179, 182, 206, 212, 213, 224, 240, 241, 263, 276, 277, 280, 281, 289, 292, 306, 308, 309, 310, 317, 318, 319, 324, 329, 331, 344, 345, 346, 353, 356, 364, 366, 367, 371, 372, 373, 374, 375, 381, 383, 387, 388, 389, 392, 396, 397, 398, 400, 401, 402, 403, 406, 407, 410, 414, 417, 418, 437, 441, 444, 448, 450, 451, 452, 467, 468, 469, 470, 471, 472, 474, 475, 478, 480, 483, 484, 487, 488, 495, 505, 506, 507, 508, 514, 515, 516, 519, 520, 521, 522, 532, 537, 541, 542, 544, 547, 548, 647, 649, 662, 672, 695, 698, 701, 704], "out": [3, 48, 92, 158, 161, 166, 167, 170, 245, 301, 316, 332, 422, 429, 430, 433, 469, 542, 547, 584, 650, 659, 666, 667, 691, 695, 700, 704, 705], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 115, 116, 117, 121, 123, 124, 126, 128, 132, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 184, 199, 205, 206, 208, 213, 217, 225, 226, 227, 228, 229, 233, 234, 235, 242, 244, 245, 247, 256, 258, 266, 270, 272, 280, 281, 282, 283, 284, 285, 288, 289, 290, 292, 293, 297, 298, 299, 300, 310, 312, 313, 316, 317, 318, 319, 321, 322, 328, 329, 330, 331, 332, 344, 345, 346, 350, 351, 353, 356, 358, 359, 360, 361, 362, 363, 365, 371, 373, 374, 379, 380, 384, 385, 386, 388, 390, 391, 393, 395, 399, 404, 406, 411, 412, 413, 414, 419, 422, 425, 429, 430, 432, 433, 441, 444, 445, 453, 456, 457, 458, 459, 463, 465, 467, 468, 473, 480, 483, 488, 489, 490, 491, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 526, 529, 532, 535, 541, 542, 547, 548, 558, 567, 575, 588, 619, 620, 622, 623, 624, 625, 640, 641, 650, 653, 655, 662, 665, 666, 667, 670, 671, 672, 673, 674, 691, 696, 698, 699, 701, 703, 704, 705, 707], "ha": [3, 19, 57, 58, 61, 64, 70, 97, 177, 192, 217, 250, 263, 284, 325, 328, 330, 332, 334, 484, 489, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 519, 619, 667, 676, 691, 692, 695, 696, 698, 701, 703, 704, 706, 707, 708], "call": [3, 11, 15, 17, 28, 61, 123, 124, 137, 156, 167, 178, 218, 283, 293, 330, 404, 430, 457, 499, 539, 655, 680, 682, 690, 691, 692, 695, 698, 703, 704, 706], "otherwis": [3, 19, 44, 50, 51, 61, 133, 140, 161, 167, 242, 256, 266, 283, 284, 311, 318, 327, 330, 386, 400, 406, 415, 430, 473, 478, 662, 665, 675, 692, 696, 697, 698], "nan_as_nul": [4, 58, 59, 71, 100, 205, 217, 227, 272, 328, 369, 439, 653, 707], "gpu": [4, 16, 17, 94, 119, 272, 301, 378, 641, 662, 683, 692, 693, 694, 695, 697, 698, 700, 704, 705, 706, 709], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 262, 263, 264, 272, 382, 601, 664, 665, 681, 703, 704, 705], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 119, 124, 126, 133, 142, 161, 167, 209, 210, 211, 215, 222, 223, 241, 272, 285, 303, 304, 305, 322, 330, 335, 336, 357, 393, 400, 407, 430, 491, 554, 564, 575, 583, 608, 653, 662, 665, 667, 674, 695, 704, 707], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 119, 123, 126, 128, 132, 133, 137, 142, 151, 166, 170, 182, 209, 241, 266, 289, 292, 302, 303, 311, 312, 322, 323, 327, 330, 339, 352, 365, 382, 390, 393, 395, 399, 400, 404, 407, 414, 429, 433, 439, 441, 444, 465, 469, 478, 491, 493, 499, 515, 517, 520, 522, 527, 536, 539, 542, 547, 558, 564, 581, 583, 589, 601, 608, 632, 640, 641, 655, 659, 662, 664, 665, 667, 672, 674, 684, 686, 687, 688, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 709], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 164, 166, 167, 174, 176, 177, 178, 179, 183, 200, 226, 244, 246, 249, 258, 267, 271, 454, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 573, 575, 576, 577, 578, 581, 583, 589, 595, 596, 597, 598, 601, 602, 605, 606, 608, 609, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 665, 668, 673, 674, 675, 676, 680, 681, 682, 684, 687, 688, 690, 691, 692, 695, 697, 699, 701, 702, 703, 705, 707, 709], "constant": [4, 641, 642, 653], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 140, 141, 148, 149, 152, 153, 158, 159, 162, 168, 170, 176, 209, 210, 211, 222, 223, 261, 277, 303, 304, 305, 308, 309, 310, 317, 324, 329, 331, 334, 335, 336, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 406, 412, 417, 418, 422, 423, 425, 432, 437, 659, 665, 691, 694, 707], "Will": [4, 167, 171, 272, 430, 655], "rangeindex": [4, 23, 70, 143, 146, 148, 171, 272, 287, 349, 410, 412, 655, 672, 695], "inform": [4, 15, 19, 43, 61, 70, 166, 283, 284, 310, 330, 429, 464, 465, 641, 665, 674, 691, 692, 694, 695, 698, 704, 706, 707], "part": [4, 61, 171, 330, 532, 541, 584, 691, 692, 699], "provid": [4, 15, 16, 21, 22, 36, 54, 67, 124, 132, 133, 137, 161, 168, 177, 205, 218, 258, 262, 263, 266, 271, 272, 283, 285, 302, 322, 399, 400, 404, 432, 456, 469, 492, 536, 552, 553, 572, 650, 653, 665, 676, 681, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 708, 709], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 123, 124, 127, 137, 143, 148, 177, 178, 180, 181, 203, 204, 205, 220, 239, 242, 253, 256, 257, 258, 263, 265, 266, 272, 278, 279, 285, 311, 318, 319, 320, 330, 338, 355, 390, 394, 404, 412, 442, 443, 455, 473, 563, 650, 662, 665, 671, 676, 681, 695, 703, 705], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 166, 170, 173, 176, 177, 179, 182, 183, 188, 191, 194, 198, 201, 217, 218, 226, 227, 228, 229, 233, 234, 240, 242, 244, 245, 250, 255, 258, 259, 260, 261, 262, 263, 267, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 344, 345, 346, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 429, 433, 434, 437, 438, 439, 441, 444, 445, 446, 450, 451, 452, 456, 457, 458, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 573, 575, 576, 577, 578, 580, 581, 583, 584, 587, 589, 595, 596, 597, 598, 601, 602, 605, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 650, 653, 655, 658, 659, 661, 662, 663, 665, 666, 667, 671, 672, 673, 674, 675, 676, 693, 695, 698, 699, 700, 701, 702, 703, 704, 707, 709], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 121, 137, 151, 157, 161, 167, 171, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 258, 272, 286, 296, 319, 320, 334, 350, 351, 372, 375, 388, 404, 414, 421, 430, 444, 446, 473, 480, 481, 487, 496, 510, 516, 521, 525, 527, 528, 529, 535, 542, 543, 544, 547, 549, 589, 599, 604, 607, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 638, 647, 649, 662, 665, 674, 693, 698, 700, 702, 706, 707], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 115, 116, 117, 121, 125, 126, 128, 133, 137, 154, 155, 167, 169, 170, 173, 183, 185, 190, 200, 217, 225, 226, 227, 228, 229, 233, 234, 236, 240, 242, 248, 249, 261, 266, 271, 272, 283, 285, 293, 302, 307, 318, 325, 328, 330, 334, 339, 345, 346, 357, 358, 373, 374, 382, 384, 385, 388, 392, 393, 400, 404, 419, 420, 430, 433, 434, 439, 445, 446, 454, 456, 466, 478, 520, 542, 545, 547, 572, 581, 601, 641, 643, 644, 645, 646, 647, 648, 649, 650, 662, 664, 665, 674, 675, 680, 686, 691, 692, 697, 698, 699, 703, 704, 705, 707], "forc": [4, 167, 430, 665, 698], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 135, 136, 148, 149, 152, 153, 161, 166, 167, 169, 175, 176, 178, 180, 181, 183, 214, 218, 225, 226, 227, 228, 229, 233, 234, 256, 257, 276, 277, 284, 292, 293, 302, 308, 309, 311, 313, 316, 317, 324, 329, 330, 331, 339, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 383, 387, 388, 389, 391, 395, 396, 397, 398, 399, 401, 402, 403, 412, 413, 417, 418, 429, 430, 437, 438, 441, 442, 443, 445, 456, 477, 483, 484, 489, 490, 494, 496, 520, 526, 529, 542, 547, 550, 551, 555, 572, 573, 576, 577, 578, 581, 587, 595, 596, 597, 598, 602, 605, 609, 641, 650, 655, 661, 662, 663, 665, 666, 667, 670, 671, 672, 673, 680, 686, 691, 692, 694, 695, 698, 701, 704, 706, 707], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 167, 176, 177, 266, 272, 277, 308, 309, 311, 317, 324, 329, 330, 331, 337, 344, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 430, 437, 478, 486, 496, 522, 534, 536, 581, 662, 664, 666, 667, 676, 692, 695, 698, 700, 701, 703, 704], "allow": [4, 15, 21, 50, 51, 70, 94, 124, 137, 166, 167, 272, 283, 285, 318, 404, 429, 430, 496, 650, 665, 666, 667, 670, 671, 672, 673, 691, 693, 695, 698, 702, 704, 706, 709], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 123, 127, 132, 142, 143, 160, 162, 164, 167, 168, 170, 171, 172, 173, 205, 217, 241, 246, 248, 261, 262, 263, 264, 266, 272, 285, 325, 328, 357, 369, 390, 394, 399, 407, 424, 425, 427, 428, 430, 432, 433, 434, 477, 501, 502, 517, 524, 550, 551, 555, 557, 559, 632, 652, 664, 665, 674, 675, 695, 701, 705, 707], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 119, 128, 132, 168, 170, 205, 217, 227, 233, 272, 301, 302, 307, 328, 345, 346, 357, 369, 373, 374, 399, 432, 433, 439, 441, 483, 650, 653, 662, 675, 702, 704, 707], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 115, 116, 119, 127, 132, 140, 147, 149, 151, 154, 161, 167, 170, 173, 182, 205, 213, 214, 215, 217, 272, 280, 281, 283, 295, 297, 298, 299, 300, 311, 313, 316, 322, 327, 328, 332, 345, 346, 350, 351, 359, 360, 361, 363, 369, 373, 374, 376, 377, 378, 384, 385, 394, 399, 406, 411, 413, 414, 415, 419, 424, 430, 433, 434, 440, 444, 456, 463, 465, 467, 470, 473, 478, 487, 496, 520, 567, 581, 587, 588, 589, 653, 662, 675, 691, 692, 695, 705], "leav": [4, 58, 71, 92, 205, 217, 272, 328, 466, 659, 675, 681, 704], "build": [4, 254, 694, 704], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 259, 262, 267, 272, 277, 278, 279, 280, 281, 284, 285, 292, 297, 298, 299, 300, 302, 308, 309, 310, 311, 316, 317, 318, 322, 324, 329, 330, 331, 333, 334, 337, 345, 346, 350, 351, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 373, 374, 382, 383, 384, 385, 387, 389, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 406, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 423, 434, 437, 444, 445, 575, 584, 601, 606, 653, 657, 658, 659, 663, 665, 666, 667, 674, 676, 698, 699, 700, 701, 703, 704, 707, 709], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 133, 143, 148, 157, 161, 166, 173, 178, 200, 204, 219, 236, 244, 249, 256, 266, 272, 330, 334, 400, 412, 421, 429, 434, 454, 470, 491, 561, 563, 568, 584, 590, 654, 662, 664, 667, 674, 695, 696, 698, 699, 703, 704], "val": [4, 23, 64, 157, 173, 334, 421, 434, 584, 669, 698], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 114, 117, 118, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 152, 153, 157, 167, 173, 176, 203, 225, 226, 227, 228, 229, 233, 234, 256, 277, 286, 296, 308, 309, 317, 324, 329, 331, 334, 345, 346, 353, 356, 359, 360, 363, 364, 366, 367, 371, 373, 374, 383, 386, 387, 389, 390, 396, 397, 398, 401, 402, 403, 404, 417, 418, 421, 430, 434, 437, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 576, 577, 578, 580, 595, 596, 597, 598, 602, 605, 609, 662, 665, 670, 671, 672, 673, 674, 675, 693, 695, 698, 699, 702, 704, 705], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 115, 116, 117, 119, 124, 125, 126, 127, 137, 138, 140, 143, 146, 147, 151, 154, 155, 157, 167, 173, 182, 183, 207, 217, 229, 240, 244, 248, 259, 267, 271, 272, 276, 280, 281, 285, 297, 298, 299, 300, 302, 307, 310, 311, 318, 327, 328, 333, 334, 337, 349, 350, 351, 355, 358, 359, 360, 361, 363, 369, 384, 385, 390, 391, 392, 393, 394, 395, 404, 405, 406, 410, 411, 414, 419, 420, 421, 428, 430, 433, 434, 444, 445, 458, 459, 463, 464, 465, 481, 495, 501, 502, 507, 512, 523, 531, 584, 616, 619, 622, 623, 635, 636, 637, 639, 650, 655, 661, 674, 692, 697, 700, 704, 705, 707, 709], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 127, 157, 171, 173, 271, 272, 311, 334, 337, 394, 395, 421, 434, 456, 491, 650, 658, 662, 665, 668, 691, 698, 700, 704, 707, 709], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 61, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 117, 118, 119, 120, 124, 126, 127, 128, 132, 137, 138, 140, 141, 143, 146, 147, 156, 157, 159, 160, 177, 183, 187, 188, 189, 193, 201, 212, 224, 226, 229, 240, 244, 250, 261, 266, 272, 277, 278, 279, 282, 283, 286, 291, 294, 295, 297, 298, 299, 300, 302, 306, 307, 310, 311, 312, 318, 319, 322, 327, 330, 334, 337, 344, 345, 346, 349, 355, 358, 360, 361, 365, 372, 373, 374, 375, 386, 387, 393, 394, 399, 404, 405, 406, 410, 411, 413, 421, 423, 438, 439, 441, 445, 457, 458, 459, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 476, 479, 480, 481, 482, 484, 492, 493, 499, 505, 510, 538, 539, 544, 545, 553, 556, 557, 564, 580, 583, 584, 587, 589, 606, 608, 613, 614, 615, 616, 619, 620, 622, 623, 626, 633, 642, 650, 655, 659, 665, 670, 671, 672, 673, 674, 676, 695, 698, 699, 700, 702, 703, 704, 707, 709], "insert": [4, 64, 128, 140, 157, 334, 395, 406, 421, 546, 681, 695, 705], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 127, 132, 138, 140, 143, 146, 173, 244, 259, 267, 272, 311, 323, 327, 334, 349, 352, 355, 394, 395, 399, 405, 406, 410, 428, 434, 476, 481, 517, 616, 619, 658, 662, 663, 666, 667, 674, 698, 700, 703, 704, 706, 707], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 127, 138, 140, 143, 146, 173, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 259, 267, 272, 294, 296, 297, 298, 299, 300, 302, 311, 314, 327, 349, 355, 394, 395, 405, 406, 410, 428, 434, 481, 490, 496, 501, 502, 558, 584, 589, 613, 614, 615, 616, 619, 624, 625, 628, 629, 633, 634, 635, 636, 637, 638, 639, 674, 695, 698, 700, 704], "13": [4, 44, 55, 84, 94, 127, 140, 143, 157, 294, 296, 311, 314, 323, 327, 349, 352, 394, 395, 406, 421, 428, 481, 635, 636, 637, 639, 698, 700], "14": [4, 15, 70, 94, 100, 127, 140, 143, 157, 314, 327, 349, 369, 394, 406, 421, 481, 635, 636, 637, 639, 698, 704], "via": [4, 36, 137, 166, 302, 404, 429, 465, 683, 695, 698, 700, 703], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 119, 132, 137, 162, 168, 172, 181, 203, 205, 217, 253, 271, 272, 284, 285, 302, 328, 345, 346, 369, 373, 374, 399, 404, 425, 432, 443, 446, 455, 650, 653, 665, 674, 691, 693, 704, 705, 707, 709], "datetim": [4, 36, 47, 117, 119, 127, 132, 167, 184, 186, 191, 194, 197, 198, 202, 302, 314, 394, 399, 430, 446, 612, 618, 627, 631, 634, 658, 662, 663, 666, 667, 670, 671, 673, 674, 695, 698, 702, 703, 704, 705, 709], "timedelta": [4, 117, 132, 399, 447, 635, 702, 704], "t0": 4, "strptime": [4, 119, 674, 698], "2018": [4, 47, 55, 84, 119, 127, 242, 323, 352, 394, 624, 625, 658, 662, 663, 666, 667, 698], "07": [4, 119, 123, 127, 132, 187, 188, 189, 201, 394, 399, 613, 614, 615, 616, 626, 633, 700], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 123, 127, 132, 184, 185, 190, 191, 193, 194, 196, 197, 198, 276, 302, 314, 333, 345, 346, 373, 374, 394, 399, 446, 564, 583, 608, 611, 617, 618, 627, 629, 630, 631, 635, 636, 637, 638, 639, 658, 662, 663, 666, 667, 698, 707, 709], "y": [4, 15, 16, 17, 44, 119, 126, 146, 161, 202, 244, 311, 390, 393, 410, 470, 481, 517, 532, 541, 560, 632, 634, 674, 695, 698, 701, 704], "m": [4, 119, 127, 167, 171, 185, 190, 195, 197, 394, 430, 491, 517, 611, 617, 628, 629, 630, 632, 635, 636, 637, 639, 665, 674, 693, 698, 700, 702, 706], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 119, 120, 122, 126, 129, 130, 131, 134, 135, 136, 137, 140, 143, 148, 152, 153, 158, 161, 176, 177, 185, 186, 187, 188, 189, 190, 197, 201, 245, 266, 272, 277, 291, 292, 302, 307, 308, 309, 311, 317, 324, 329, 331, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 390, 393, 395, 396, 397, 398, 401, 402, 403, 404, 406, 412, 417, 418, 422, 428, 437, 439, 456, 476, 478, 479, 481, 483, 489, 495, 517, 520, 537, 556, 557, 611, 612, 613, 614, 615, 617, 630, 632, 633, 650, 674, 676, 695, 698, 700, 704, 707], "h": [4, 111, 185, 190, 191, 197, 382, 481, 520, 611, 617, 618, 630, 695, 698], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 117, 118, 125, 126, 133, 137, 140, 141, 148, 150, 158, 161, 167, 171, 178, 185, 190, 197, 198, 226, 239, 242, 272, 276, 278, 279, 284, 285, 286, 289, 291, 292, 293, 297, 298, 299, 300, 302, 307, 310, 311, 312, 314, 316, 318, 319, 320, 328, 330, 337, 344, 350, 351, 357, 365, 375, 386, 392, 393, 400, 404, 406, 412, 413, 415, 422, 430, 439, 441, 446, 457, 458, 459, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 572, 583, 584, 589, 601, 608, 611, 616, 617, 619, 620, 622, 623, 625, 629, 630, 631, 635, 636, 637, 638, 639, 642, 650, 653, 655, 658, 659, 660, 662, 665, 674, 675, 691, 692, 693, 694, 695, 698, 699, 700, 702, 704, 706, 707, 708, 709], "id": [4, 16, 587, 589, 640, 641, 698, 701], "arang": [4, 17, 698, 704], "second": [4, 44, 97, 111, 127, 142, 156, 167, 185, 190, 196, 197, 241, 260, 311, 314, 382, 394, 407, 430, 447, 450, 611, 617, 629, 630, 635, 637, 662, 665, 668, 674, 695, 698], "x": [4, 5, 15, 16, 17, 44, 61, 73, 146, 161, 175, 244, 266, 283, 311, 330, 339, 357, 410, 456, 470, 532, 541, 544, 546, 560, 564, 583, 584, 601, 608, 632, 650, 662, 666, 667, 693, 698, 699, 701, 703, 704], "01": [4, 36, 127, 132, 133, 184, 186, 187, 188, 189, 191, 194, 195, 197, 198, 201, 202, 302, 394, 399, 400, 446, 517, 559, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 638, 658, 662, 663, 666, 667, 701, 702, 707], "02": [4, 123, 127, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 314, 394, 399, 446, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 627, 628, 631, 633, 658, 662, 663, 666, 667, 674, 698, 701], "03": [4, 47, 127, 133, 186, 187, 188, 189, 195, 201, 314, 394, 400, 446, 612, 613, 614, 615, 616, 620, 622, 623, 628, 632, 633, 638, 674], "04": [4, 46, 55, 75, 76, 84, 104, 105, 123, 127, 132, 187, 188, 189, 197, 201, 323, 345, 346, 352, 373, 374, 394, 399, 446, 611, 613, 614, 615, 616, 617, 630, 633, 674], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 123, 127, 137, 139, 148, 150, 151, 156, 157, 158, 159, 161, 166, 169, 171, 179, 182, 203, 205, 213, 214, 245, 253, 264, 272, 278, 279, 280, 281, 287, 297, 298, 299, 300, 306, 311, 312, 313, 319, 323, 330, 334, 337, 338, 352, 355, 390, 394, 404, 412, 414, 421, 422, 423, 429, 444, 455, 456, 467, 468, 470, 471, 474, 478, 483, 485, 487, 489, 496, 520, 542, 547, 563, 573, 581, 584, 599, 641, 652, 658, 661, 662, 664, 665, 666, 667, 668, 671, 691, 698, 699, 700, 701, 703, 704, 707], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 128, 142, 144, 207, 237, 241, 262, 263, 264, 266, 268, 282, 283, 330, 382, 395, 407, 408, 601, 642, 659, 662, 665, 666, 667, 668, 674, 695, 698], "cat": [4, 133, 179, 320, 357, 400, 456, 457, 458, 459, 463, 464, 465, 484, 488, 496, 525, 543, 548, 549, 653, 681, 686, 698], "jump": [4, 128], "dog": [4, 74, 133, 179, 357, 400, 456, 483, 521, 698], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 115, 116, 117, 126, 127, 132, 133, 140, 147, 151, 154, 155, 159, 177, 182, 187, 189, 193, 226, 229, 272, 280, 281, 297, 298, 299, 300, 302, 310, 311, 334, 337, 350, 351, 355, 359, 360, 363, 365, 384, 385, 393, 394, 399, 400, 406, 411, 414, 419, 420, 423, 439, 441, 444, 467, 480, 481, 538, 587, 589, 613, 614, 615, 616, 619, 620, 622, 623, 626, 633, 650, 655, 676, 698, 700, 702, 704, 707, 709], "cow": [4, 44, 156, 311, 312, 344], "moo": 4, "occasion": [4, 692], "pdf": [4, 58, 170, 698, 702], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 170, 176, 177, 182, 183, 205, 218, 236, 245, 256, 259, 260, 261, 262, 266, 267, 272, 277, 278, 279, 280, 281, 285, 291, 292, 293, 297, 298, 299, 300, 302, 308, 309, 311, 317, 322, 324, 325, 326, 327, 329, 330, 331, 333, 337, 349, 350, 351, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 382, 383, 384, 385, 387, 389, 390, 392, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 410, 411, 412, 414, 417, 418, 419, 420, 422, 424, 428, 437, 438, 439, 444, 445, 456, 470, 478, 479, 481, 484, 489, 493, 494, 499, 505, 520, 522, 534, 539, 548, 556, 557, 560, 561, 564, 583, 584, 587, 589, 601, 606, 608, 650, 653, 655, 659, 660, 662, 665, 671, 672, 673, 676, 698, 699, 700, 702, 703, 704, 707, 709], "from_panda": [4, 224, 229, 250, 266, 575, 584, 698, 699, 701, 702, 709], "attribut": [4, 36, 142, 178, 205, 241, 254, 263, 272, 302, 391, 407, 459, 671, 672, 673, 681, 695, 696, 698], "iloc": [4, 67, 272, 584, 698, 699, 704, 707], "select": [4, 36, 44, 55, 64, 68, 84, 86, 97, 106, 124, 166, 245, 272, 302, 311, 312, 323, 334, 337, 352, 355, 429, 664, 665, 666, 667, 681, 695, 701, 705], "posit": [4, 15, 64, 68, 111, 140, 145, 158, 218, 220, 245, 272, 283, 334, 337, 382, 406, 409, 422, 469, 495, 500, 503, 504, 520, 544, 545, 546, 559, 561, 581, 589, 601, 705], "20": [4, 21, 40, 44, 50, 61, 68, 124, 125, 156, 166, 217, 248, 272, 285, 311, 318, 328, 330, 337, 390, 391, 392, 429, 433, 481, 540, 661, 698, 700, 701, 704], "30": [4, 21, 43, 44, 61, 63, 68, 124, 125, 127, 156, 185, 217, 272, 285, 310, 311, 328, 330, 333, 337, 390, 391, 392, 394, 433, 572, 616, 620, 622, 623, 624, 625, 626, 632, 661, 674, 698], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 114, 115, 116, 120, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 150, 152, 153, 154, 155, 160, 170, 177, 179, 183, 184, 207, 212, 215, 224, 235, 236, 239, 240, 242, 244, 248, 250, 253, 260, 267, 272, 277, 278, 279, 282, 283, 284, 285, 291, 292, 293, 301, 302, 306, 310, 311, 313, 316, 319, 322, 324, 327, 332, 333, 337, 349, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 372, 375, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 410, 411, 413, 417, 418, 419, 420, 433, 439, 445, 446, 457, 458, 459, 463, 464, 465, 466, 469, 471, 484, 487, 497, 498, 501, 502, 561, 636, 637, 638, 639, 642, 653, 676, 698, 699, 700, 702, 704, 706, 707, 709], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 61, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 114, 120, 122, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 143, 146, 148, 152, 153, 158, 161, 176, 177, 218, 245, 266, 272, 277, 291, 292, 302, 308, 309, 311, 317, 320, 322, 324, 326, 329, 330, 331, 337, 349, 353, 355, 356, 364, 366, 367, 371, 382, 383, 387, 389, 390, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 410, 412, 417, 418, 422, 428, 437, 438, 439, 456, 470, 478, 484, 520, 526, 534, 556, 557, 564, 583, 584, 587, 589, 608, 632, 650, 659, 660, 662, 671, 676, 692, 694, 695, 698, 699, 700, 703, 704, 707], "integ": [4, 16, 19, 51, 56, 68, 123, 125, 128, 129, 133, 169, 171, 177, 196, 218, 225, 226, 227, 228, 229, 233, 234, 240, 253, 256, 258, 260, 266, 269, 271, 272, 284, 320, 324, 337, 344, 390, 392, 395, 396, 400, 455, 469, 470, 476, 482, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 521, 552, 616, 629, 650, 662, 665, 674, 675, 676, 691, 695, 698, 699, 702, 707], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 149, 152, 153, 176, 177, 192, 218, 260, 263, 272, 277, 302, 308, 309, 310, 317, 324, 329, 331, 337, 353, 355, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 413, 417, 418, 437, 470, 489, 494, 581, 619, 642, 662, 665, 666, 667, 674, 676, 693, 695, 698, 700, 701, 703, 704, 706], "9": [4, 32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 115, 116, 126, 127, 132, 133, 151, 154, 166, 177, 182, 272, 294, 296, 297, 298, 299, 300, 302, 337, 350, 351, 355, 357, 359, 360, 363, 384, 385, 393, 394, 399, 400, 414, 419, 429, 439, 444, 467, 473, 481, 510, 587, 589, 616, 619, 655, 676, 695, 698, 700, 702, 703, 704, 707, 709], "18": [4, 68, 127, 132, 133, 185, 190, 193, 196, 272, 337, 394, 399, 400, 481, 629, 638, 698, 702], "slice": [4, 68, 220, 256, 266, 272, 337, 546, 681, 695, 698, 699], "both": [4, 8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 141, 152, 153, 176, 178, 200, 249, 254, 255, 272, 277, 289, 293, 302, 308, 309, 317, 318, 324, 329, 331, 337, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 454, 531, 559, 589, 655, 671, 672, 673, 680, 691, 692, 695, 701, 702, 703, 704, 709], "set": [4, 11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 117, 121, 132, 143, 161, 171, 173, 178, 199, 212, 235, 239, 242, 247, 270, 272, 282, 285, 289, 292, 302, 312, 337, 344, 345, 346, 355, 373, 374, 388, 399, 433, 434, 441, 453, 456, 458, 459, 463, 465, 480, 483, 490, 525, 527, 529, 532, 535, 541, 542, 543, 547, 549, 558, 581, 589, 606, 640, 650, 659, 662, 665, 667, 669, 674, 675, 691, 692, 693, 695, 696, 698, 703, 706, 707, 708], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 61, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 124, 126, 127, 140, 146, 147, 160, 177, 179, 187, 188, 189, 201, 212, 224, 250, 261, 272, 278, 279, 282, 297, 298, 299, 300, 302, 306, 307, 310, 311, 322, 330, 334, 337, 345, 346, 349, 355, 361, 365, 373, 374, 393, 394, 406, 410, 411, 438, 439, 441, 458, 459, 463, 464, 467, 468, 469, 470, 471, 479, 480, 481, 482, 484, 491, 556, 557, 584, 587, 589, 613, 614, 615, 616, 619, 620, 622, 623, 633, 635, 642, 650, 655, 659, 676, 691, 698, 700, 702, 703, 704, 707, 709], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 115, 116, 126, 127, 132, 147, 151, 154, 156, 159, 161, 177, 182, 183, 187, 189, 272, 289, 297, 298, 299, 300, 302, 306, 310, 311, 327, 334, 337, 350, 351, 355, 358, 359, 360, 363, 384, 385, 393, 394, 399, 411, 414, 419, 423, 439, 444, 445, 467, 473, 481, 482, 496, 556, 557, 584, 587, 589, 613, 614, 615, 616, 619, 620, 633, 641, 642, 650, 655, 665, 670, 671, 672, 673, 676, 695, 698, 700, 702, 704, 707], "more": [4, 11, 14, 15, 19, 21, 36, 43, 68, 70, 137, 161, 166, 177, 185, 190, 197, 260, 272, 283, 284, 285, 302, 310, 337, 404, 429, 465, 487, 494, 542, 589, 611, 617, 630, 662, 665, 666, 667, 668, 674, 676, 691, 692, 693, 694, 695, 696, 698, 703, 704, 706, 707, 708], "loc": [4, 22, 44, 71, 220, 256, 266, 272, 311, 698, 701, 704], "boolean": [4, 51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 117, 119, 123, 124, 143, 169, 170, 192, 199, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 247, 256, 266, 270, 272, 282, 289, 340, 341, 342, 343, 344, 345, 346, 355, 359, 360, 363, 373, 374, 377, 386, 390, 391, 433, 453, 468, 483, 488, 491, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 522, 526, 548, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 619, 620, 621, 622, 623, 624, 625, 653, 662, 665, 666, 667, 696, 704, 705], "mask": [4, 75, 76, 86, 104, 105, 126, 256, 266, 272, 283, 327, 345, 346, 355, 373, 374, 377, 378, 393, 695, 707], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 114, 120, 122, 127, 129, 130, 131, 134, 135, 136, 152, 153, 161, 167, 171, 173, 176, 272, 277, 278, 279, 283, 302, 308, 309, 313, 317, 324, 329, 331, 344, 345, 346, 353, 355, 356, 364, 366, 367, 371, 373, 374, 382, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 415, 417, 418, 430, 434, 437, 564, 583, 601, 608, 632, 640, 641, 642, 653, 658, 662, 663, 664, 665, 667, 668, 674, 681, 695, 697, 701, 702, 703, 705, 709], "e": [4, 8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 120, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 143, 152, 153, 158, 161, 171, 176, 177, 245, 266, 272, 277, 291, 302, 308, 309, 317, 324, 329, 331, 353, 355, 356, 364, 366, 367, 371, 383, 387, 388, 389, 393, 396, 397, 398, 399, 401, 402, 403, 417, 418, 422, 437, 439, 465, 481, 483, 484, 489, 494, 495, 520, 526, 529, 554, 556, 557, 632, 650, 655, 662, 668, 676, 691, 692, 693, 695, 698, 704], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 117, 118, 121, 123, 126, 127, 132, 137, 142, 148, 156, 178, 204, 205, 209, 210, 219, 241, 254, 256, 266, 272, 283, 286, 288, 290, 291, 294, 303, 304, 312, 321, 322, 330, 333, 339, 354, 380, 386, 388, 390, 393, 394, 399, 404, 407, 412, 415, 416, 465, 469, 482, 505, 506, 507, 508, 514, 515, 516, 519, 532, 541, 558, 575, 580, 587, 589, 606, 640, 655, 661, 662, 665, 666, 667, 668, 674, 675, 680, 681, 682, 684, 687, 688, 691, 695, 699, 701, 703, 704, 705, 707, 709], "iterrow": 4, "itertupl": 4, "to_dict": [4, 272], "transpos": [5, 273, 652, 681, 700, 705], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 157, 158, 159, 166, 175, 176, 209, 210, 212, 222, 224, 236, 239, 240, 242, 245, 277, 278, 279, 282, 283, 285, 291, 293, 303, 304, 307, 308, 309, 317, 324, 329, 331, 335, 353, 356, 364, 366, 367, 371, 372, 375, 383, 387, 389, 390, 392, 395, 396, 397, 398, 401, 402, 403, 404, 417, 418, 421, 422, 423, 429, 437, 456, 457, 464, 465, 466, 496, 500, 537, 546, 691, 692, 693, 695, 698, 701, 704, 706], "ncol": [5, 175], "nrow": [5, 175, 662, 698, 704], "self": [5, 14, 61, 88, 111, 117, 140, 159, 166, 175, 183, 224, 250, 273, 282, 286, 330, 358, 382, 395, 406, 423, 429, 436, 445, 488, 548, 693, 695], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 115, 116, 124, 126, 127, 137, 147, 148, 149, 151, 154, 161, 162, 167, 169, 174, 175, 179, 182, 218, 280, 281, 283, 285, 289, 293, 295, 296, 302, 307, 312, 316, 330, 350, 351, 357, 359, 361, 363, 384, 385, 391, 393, 394, 404, 411, 412, 413, 414, 419, 425, 430, 444, 449, 473, 483, 484, 488, 489, 494, 505, 526, 532, 535, 541, 542, 547, 558, 559, 560, 576, 577, 578, 581, 589, 595, 596, 597, 598, 602, 605, 606, 609, 632, 642, 650, 652, 653, 661, 662, 665, 666, 667, 671, 674, 675, 691, 693, 695, 697, 698, 703, 704, 705, 706, 707, 709], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 117, 123, 124, 126, 148, 149, 166, 171, 175, 205, 266, 306, 311, 318, 322, 330, 390, 391, 393, 412, 413, 429, 473, 503, 504, 532, 534, 542, 573, 575, 576, 577, 578, 589, 595, 596, 597, 598, 601, 602, 605, 609, 641, 653, 659, 665, 670, 671, 672, 673, 675, 680, 691, 692, 693, 695, 699, 704, 707, 709], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 114, 120, 122, 123, 124, 129, 130, 131, 134, 135, 136, 148, 149, 152, 153, 166, 167, 175, 176, 258, 277, 283, 308, 309, 313, 317, 324, 329, 331, 353, 356, 360, 364, 366, 367, 371, 381, 383, 387, 389, 390, 391, 396, 397, 398, 401, 402, 403, 412, 413, 417, 418, 429, 430, 437, 473, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 670, 671, 672, 673, 691, 706], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 143, 147, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 173, 175, 176, 178, 182, 183, 184, 205, 258, 272, 277, 280, 281, 282, 283, 284, 292, 295, 296, 308, 309, 317, 322, 324, 329, 331, 339, 350, 351, 353, 356, 357, 358, 359, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 390, 391, 393, 394, 396, 397, 398, 401, 402, 403, 404, 411, 412, 413, 414, 417, 418, 419, 429, 430, 434, 437, 444, 445, 446, 449, 473, 483, 484, 488, 489, 494, 500, 526, 532, 535, 541, 542, 558, 564, 573, 575, 576, 577, 578, 581, 583, 587, 595, 596, 597, 598, 602, 605, 606, 608, 609, 632, 641, 642, 659, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 691, 692, 693, 695, 697, 698, 699, 700, 701, 704, 705, 707], "becaus": [5, 12, 13, 97, 175, 280, 281, 283, 589, 659, 693, 698, 701, 702, 704, 707, 709], "behavior": [5, 126, 171, 175, 244, 266, 312, 393, 558, 641, 653, 662, 665, 674, 675, 691, 692, 695, 696, 698, 703, 704, 706, 708, 709], "absolut": [7, 205, 276, 589, 670, 671, 672, 673, 698, 709], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 117, 121, 126, 225, 226, 227, 228, 229, 233, 234, 248, 276, 302, 357, 359, 360, 363, 388, 393, 441, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 572, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 665, 675, 681, 692, 695, 698, 699, 702, 703, 704, 705, 709], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 125, 127, 132, 133, 139, 169, 171, 235, 240, 255, 258, 263, 264, 266, 276, 278, 279, 289, 302, 307, 312, 318, 319, 330, 344, 345, 346, 357, 373, 374, 392, 394, 399, 400, 448, 450, 451, 452, 456, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 533, 534, 536, 538, 539, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 564, 567, 568, 569, 570, 571, 573, 576, 577, 578, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 641, 650, 662, 665, 666, 667, 675, 691, 692, 693, 695, 696, 698, 700, 702, 703, 704, 706, 709], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 115, 116, 117, 124, 132, 137, 148, 151, 154, 164, 171, 177, 182, 215, 244, 246, 266, 276, 282, 283, 289, 297, 298, 299, 300, 318, 323, 330, 333, 334, 350, 351, 352, 357, 359, 360, 363, 382, 384, 385, 399, 404, 412, 414, 415, 419, 427, 444, 478, 482, 484, 491, 520, 527, 529, 554, 558, 564, 575, 583, 584, 601, 606, 608, 640, 642, 650, 652, 653, 661, 662, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 681, 684, 687, 688, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 707], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 115, 116, 124, 132, 148, 151, 154, 166, 182, 276, 286, 297, 298, 299, 300, 330, 350, 351, 359, 360, 363, 382, 384, 385, 399, 412, 414, 419, 429, 444, 477, 496, 550, 551, 555, 564, 583, 601, 606, 608, 650, 653, 662, 665, 684, 686, 687, 688, 698, 699, 705], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 115, 116, 127, 128, 142, 154, 161, 166, 167, 171, 177, 203, 205, 213, 214, 241, 242, 253, 276, 284, 285, 291, 292, 302, 311, 312, 318, 323, 334, 339, 352, 372, 375, 384, 385, 394, 395, 407, 419, 429, 430, 441, 455, 464, 478, 486, 490, 494, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 524, 525, 534, 535, 542, 543, 547, 549, 550, 551, 554, 555, 556, 557, 572, 581, 611, 617, 630, 651, 653, 656, 659, 660, 662, 665, 668, 674, 675, 676, 681, 691, 692, 693, 694, 698, 701, 702, 704, 706, 707, 708, 709], "33": [7, 30, 52, 240, 276, 700], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 117, 122, 132, 133, 136, 138, 141, 146, 147, 151, 170, 176, 182, 203, 217, 276, 283, 302, 308, 309, 316, 328, 330, 345, 346, 350, 351, 360, 369, 373, 374, 386, 389, 399, 400, 403, 405, 410, 411, 414, 433, 437, 441, 444, 466, 662, 675, 698, 702, 704, 706, 707], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 145, 147, 148, 149, 151, 152, 153, 154, 156, 158, 176, 182, 240, 245, 277, 280, 281, 284, 288, 290, 292, 297, 298, 299, 300, 308, 309, 311, 313, 317, 321, 322, 324, 329, 330, 331, 339, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 380, 383, 384, 385, 387, 388, 389, 392, 394, 396, 397, 398, 399, 401, 402, 403, 404, 409, 411, 412, 413, 414, 417, 418, 419, 422, 437, 444, 456, 473, 573, 575, 581, 680, 698, 700, 704, 705], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 114, 115, 116, 120, 122, 123, 124, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 148, 150, 151, 152, 153, 154, 156, 166, 171, 176, 177, 179, 182, 204, 218, 236, 238, 242, 244, 258, 260, 263, 264, 265, 266, 269, 277, 280, 281, 295, 308, 309, 311, 317, 324, 329, 330, 331, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 383, 384, 385, 387, 389, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 410, 411, 412, 414, 417, 418, 419, 429, 437, 444, 467, 655, 676, 681, 691, 692, 695], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 145, 152, 153, 176, 177, 245, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 390, 396, 397, 398, 401, 402, 403, 409, 417, 418, 437, 581, 676], "get": [8, 41, 42, 43, 49, 56, 60, 61, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 103, 104, 105, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 218, 244, 256, 266, 277, 308, 309, 310, 317, 324, 329, 330, 331, 338, 345, 346, 353, 356, 364, 366, 367, 368, 371, 373, 374, 383, 387, 389, 396, 397, 398, 401, 402, 403, 408, 417, 418, 437, 544, 573, 601, 610, 616, 653, 654, 662, 681, 696, 700, 704, 705], "addit": [8, 15, 51, 90, 120, 166, 277, 360, 387, 429, 479, 505, 523, 531, 540, 662, 664, 665, 670, 671, 672, 673, 691, 692, 693, 709], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 156, 176, 277, 292, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 456, 478, 573, 580, 581, 604, 607, 698, 700, 701], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 166, 171, 176, 277, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 429, 437, 656, 661, 666, 667, 681, 704, 709], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 114, 115, 116, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 154, 166, 176, 183, 185, 190, 197, 272, 277, 283, 291, 308, 309, 310, 311, 312, 313, 317, 322, 324, 329, 330, 331, 353, 356, 358, 364, 366, 367, 371, 383, 384, 385, 387, 389, 396, 397, 398, 401, 402, 403, 412, 417, 418, 419, 429, 437, 445, 544, 564, 576, 577, 578, 583, 595, 596, 597, 598, 602, 605, 606, 608, 609, 611, 617, 630, 681, 691, 695, 700, 701, 704, 705, 706, 707], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 142, 152, 153, 176, 209, 210, 222, 241, 277, 289, 303, 304, 308, 309, 311, 317, 324, 327, 329, 331, 334, 335, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 407, 417, 418, 437, 505, 506, 507, 508, 514, 515, 516, 518, 519, 520, 523, 524, 525, 531, 534, 535, 538, 540, 543, 544, 548, 549, 550, 551, 554, 555, 558, 691, 695, 698, 703, 707], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 357, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 672], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 150, 152, 153, 162, 168, 176, 183, 272, 277, 288, 290, 294, 296, 308, 309, 311, 317, 320, 321, 324, 329, 331, 345, 346, 353, 356, 364, 366, 367, 371, 373, 374, 380, 383, 387, 389, 390, 396, 397, 398, 401, 402, 403, 417, 418, 425, 432, 437, 445, 478, 581, 589, 660, 662, 681, 697, 699, 705], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 152, 153, 176, 177, 178, 179, 214, 218, 220, 239, 260, 264, 266, 277, 285, 308, 309, 313, 317, 324, 329, 331, 332, 344, 353, 356, 364, 365, 366, 367, 371, 383, 387, 389, 395, 396, 397, 398, 401, 402, 403, 417, 418, 437, 465, 467, 471, 483, 485, 489, 494, 505, 506, 515, 520, 589, 601, 653, 660, 662, 665, 666, 667, 668, 676, 691, 692, 693, 695, 698, 700, 703, 704, 707], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 152, 153, 176, 182, 183, 215, 272, 277, 283, 289, 292, 308, 309, 310, 317, 322, 324, 329, 331, 350, 351, 353, 356, 358, 361, 364, 366, 367, 371, 383, 387, 389, 391, 393, 396, 397, 398, 401, 402, 403, 417, 418, 437, 444, 445, 468, 469, 470, 520, 575, 581, 650, 659, 662, 674, 707], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 184, 203, 253, 258, 262, 263, 264, 272, 277, 308, 309, 310, 317, 324, 329, 330, 331, 344, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 446, 455, 469, 470, 481, 483, 486, 526, 534, 535, 536, 548, 552, 553, 641, 650, 653, 675, 695, 698], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 114, 119, 120, 122, 123, 126, 129, 130, 131, 133, 134, 135, 136, 142, 152, 153, 162, 168, 173, 176, 179, 212, 214, 241, 277, 283, 289, 293, 302, 308, 309, 310, 311, 316, 317, 324, 329, 331, 353, 356, 364, 366, 367, 369, 371, 383, 387, 389, 390, 393, 396, 397, 398, 400, 401, 402, 403, 407, 417, 418, 425, 432, 434, 437, 457, 463, 464, 465, 468, 469, 470, 474, 478, 483, 501, 502, 505, 520, 522, 526, 558, 564, 583, 608, 654, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 692, 693, 695, 698, 701, 703, 704, 706, 707, 709], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 164, 166, 176, 236, 246, 277, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 427, 429, 437, 652, 655, 694, 695, 698, 700, 704, 709], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 148, 151, 152, 153, 154, 156, 158, 161, 167, 176, 182, 218, 220, 240, 242, 245, 256, 258, 265, 266, 271, 277, 286, 294, 295, 306, 308, 309, 311, 317, 324, 327, 329, 330, 331, 334, 339, 353, 356, 359, 360, 363, 364, 366, 367, 371, 372, 375, 379, 381, 383, 384, 385, 387, 389, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 414, 417, 418, 419, 422, 430, 437, 441, 444, 469, 476, 479, 480, 483, 484, 489, 492, 493, 494, 495, 499, 500, 503, 504, 521, 523, 526, 527, 528, 531, 534, 535, 538, 539, 540, 542, 544, 546, 547, 558, 559, 561, 565, 566, 573, 574, 575, 576, 577, 578, 579, 581, 585, 586, 587, 589, 594, 595, 596, 597, 598, 600, 602, 604, 605, 607, 609, 641, 647, 649, 650, 655, 661, 662, 664, 665, 666, 667, 670, 672, 673, 674, 691, 693, 695, 698, 704], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 606, 703], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 589, 692, 693, 695, 698, 700, 701], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 61, 62, 74, 85, 87, 94, 96, 98, 99, 102, 114, 120, 122, 123, 126, 129, 130, 131, 134, 135, 136, 137, 149, 152, 153, 176, 178, 235, 256, 277, 293, 308, 309, 317, 324, 329, 330, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 390, 393, 396, 397, 398, 401, 402, 403, 404, 413, 417, 418, 437, 470, 478, 483, 488, 489, 494, 522, 535, 542, 547, 548, 558, 581, 665, 666, 667, 671, 681, 692, 693, 695, 698, 699, 703, 704, 707, 709], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 114, 120, 122, 123, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 152, 153, 162, 168, 171, 176, 178, 235, 277, 283, 285, 308, 309, 317, 324, 329, 330, 331, 344, 353, 356, 357, 360, 364, 365, 366, 367, 371, 382, 383, 387, 389, 393, 396, 397, 398, 399, 401, 402, 403, 404, 417, 418, 425, 432, 437, 439, 441, 456, 478, 483, 484, 489, 494, 500, 520, 526, 542, 547, 601, 650, 652, 655, 662, 664, 665, 666, 667, 671, 672, 673, 675, 691, 693, 698, 700, 704, 707, 709], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 114, 119, 120, 122, 124, 127, 128, 129, 130, 131, 134, 135, 136, 143, 146, 148, 152, 153, 156, 176, 179, 205, 218, 224, 236, 242, 244, 250, 277, 292, 308, 309, 311, 317, 324, 329, 330, 331, 339, 353, 356, 359, 360, 363, 364, 366, 367, 371, 383, 387, 389, 394, 395, 396, 397, 398, 401, 402, 403, 410, 412, 417, 418, 437, 532, 541, 542, 547, 681, 695, 699, 703, 705], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 124, 127, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 178, 184, 205, 258, 277, 296, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 381, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 412, 417, 418, 437, 446, 483, 488, 532, 535, 541, 542, 558, 632, 670, 672, 673, 692, 698, 701, 704, 707], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 114, 120, 122, 123, 127, 129, 130, 131, 134, 135, 136, 152, 153, 176, 215, 256, 277, 288, 290, 308, 309, 317, 321, 322, 324, 329, 331, 353, 356, 364, 366, 367, 371, 380, 381, 383, 387, 389, 394, 396, 397, 398, 401, 402, 403, 417, 418, 437, 456, 479, 482, 523, 531, 540, 559, 565, 566, 574, 575, 579, 581, 585, 586, 594, 600, 704, 705], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 143, 152, 153, 166, 176, 277, 308, 309, 311, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 393, 396, 397, 398, 401, 402, 403, 417, 418, 429, 437, 456, 654, 669, 692, 693, 698, 702, 709], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 152, 153, 176, 178, 272, 277, 308, 309, 317, 324, 329, 330, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 417, 418, 437, 439, 456, 692, 707], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 277, 278, 286, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 381, 383, 387, 389, 396, 397, 398, 401, 402, 403, 412, 417, 418, 437, 478, 532, 541, 546, 640, 652, 662, 665, 668, 682, 691, 695, 698, 700], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 114, 115, 116, 117, 118, 120, 121, 122, 129, 130, 131, 134, 135, 136, 147, 152, 153, 154, 176, 235, 236, 277, 286, 294, 296, 308, 309, 317, 324, 327, 329, 330, 331, 333, 350, 351, 353, 356, 359, 360, 361, 363, 364, 366, 367, 371, 381, 383, 384, 385, 386, 387, 388, 389, 396, 397, 398, 401, 402, 403, 411, 417, 418, 419, 437, 472, 476, 486, 487, 521, 533, 567, 576, 577, 578, 580, 587, 588, 589, 595, 596, 597, 598, 602, 604, 605, 607, 609, 650, 653, 681, 692, 693, 698, 701, 704, 705], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 170, 176, 183, 220, 277, 289, 308, 309, 311, 317, 320, 322, 324, 329, 331, 353, 356, 357, 358, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 404, 417, 418, 433, 437, 439, 445, 478, 483, 485, 520, 534, 536, 581, 662, 665, 692, 693, 695, 704], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 140, 152, 153, 176, 256, 258, 266, 277, 308, 309, 311, 317, 318, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 406, 417, 418, 437, 492, 528, 536, 552, 553, 661, 662, 665, 666, 667, 668, 692, 707], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 310, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437, 704, 707, 709], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 151, 152, 153, 176, 182, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 414, 417, 418, 437, 444, 480, 527, 528, 589, 604, 607, 647, 649], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 308, 309, 317, 324, 329, 331, 353, 356, 364, 366, 367, 371, 383, 387, 389, 396, 397, 398, 401, 402, 403, 417, 418, 437], "361": [8, 120, 277, 387], "181": [8, 120, 277, 387], "prefix": [9, 10, 278, 279, 653, 655, 662, 691], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 121, 126, 127, 132, 133, 148, 161, 166, 167, 218, 266, 278, 279, 283, 302, 311, 318, 323, 330, 334, 352, 382, 388, 393, 394, 395, 399, 400, 412, 429, 430, 467, 489, 494, 542, 575, 584, 589, 641, 650, 662, 665, 675, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 117, 119, 126, 127, 128, 133, 139, 140, 141, 143, 149, 156, 161, 162, 165, 166, 168, 169, 171, 184, 185, 190, 197, 199, 200, 218, 247, 249, 263, 264, 270, 272, 278, 279, 284, 313, 323, 339, 352, 381, 386, 393, 394, 395, 400, 406, 425, 428, 429, 432, 446, 453, 454, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 564, 581, 583, 606, 608, 611, 617, 630, 632, 640, 641, 650, 651, 653, 654, 655, 659, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 686, 687, 693, 698, 700, 704, 706], "add": [9, 10, 43, 61, 71, 80, 166, 278, 279, 310, 330, 429, 457, 458, 653, 662, 693, 695, 696, 698, 704], "updat": [9, 10, 28, 73, 278, 279, 293, 339, 691, 692], "add_suffix": [9, 278], "suffix": [9, 10, 94, 278, 279, 691], "item_": [9, 278], "item_0": [9, 278], "item_1": [9, 278], "item_2": [9, 278], "item_3": [9, 278], "col_": [9, 278], "col_a": [9, 278], "col_b": [9, 278], "after": [10, 126, 279, 283, 393, 415, 457, 532, 541, 546, 551, 662, 665, 668, 691, 698, 704], "add_prefix": [10, 279], "_item": [10, 279], "0_item": [10, 279], "1_item": [10, 279], "2_item": [10, 279], "3_item": [10, 279], "_col": [10, 279], "a_col": [10, 279], "b_col": [10, 279], "aggreg": [11, 61, 127, 330, 394, 583, 606, 642, 697, 698, 701, 705], "over": [11, 16, 17, 40, 77, 97, 137, 245, 404, 573, 584, 691, 692, 695, 703, 704, 709], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 107, 112, 117, 118, 123, 124, 126, 127, 132, 133, 137, 148, 149, 158, 166, 167, 171, 177, 185, 190, 197, 214, 215, 245, 260, 272, 292, 311, 322, 360, 386, 390, 393, 394, 399, 400, 404, 412, 413, 422, 429, 430, 446, 463, 464, 465, 466, 468, 469, 474, 478, 495, 500, 525, 534, 542, 543, 545, 546, 547, 549, 559, 561, 564, 575, 581, 583, 608, 611, 617, 630, 632, 641, 650, 655, 660, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 691, 692, 693, 695, 698, 702, 703, 704, 707], "accept": [11, 18, 19, 40, 80, 137, 207, 271, 284, 306, 357, 404, 483, 488, 495, 548, 564, 573, 583, 589, 608, 675, 691, 693, 695, 702, 703, 704, 709], "g": [11, 36, 111, 161, 302, 382, 465, 481, 483, 484, 489, 494, 520, 526, 529, 556, 557, 632, 662, 691, 692, 693, 695, 704], "sum": [11, 35, 61, 115, 116, 127, 132, 137, 155, 300, 330, 384, 385, 394, 399, 404, 420, 441, 564, 571, 583, 593, 608, 695, 698, 700, 701, 703, 705, 709], "min": [11, 33, 36, 121, 185, 190, 197, 244, 298, 302, 388, 564, 570, 572, 583, 592, 601, 608, 611, 617, 630, 703, 707], "max": [11, 32, 36, 61, 121, 132, 297, 302, 330, 388, 399, 564, 569, 572, 583, 591, 601, 606, 608, 698, 701, 703, 704], "per": [11, 16, 29, 70, 148, 179, 291, 412, 471, 489, 503, 504, 534, 564, 583, 587, 589, 606, 608, 662, 665, 692, 698, 700, 703, 706], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 61, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 115, 116, 117, 118, 137, 147, 154, 167, 171, 178, 179, 205, 224, 250, 271, 285, 293, 302, 310, 311, 323, 330, 350, 351, 352, 359, 360, 361, 363, 372, 375, 382, 384, 385, 386, 395, 404, 411, 419, 430, 483, 484, 494, 496, 499, 500, 520, 535, 539, 542, 547, 580, 650, 653, 655, 662, 664, 665, 666, 670, 671, 672, 673, 675, 691, 692, 693, 695, 696, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709], "sever": [11, 686, 687, 692, 704, 706], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 163, 165, 166, 167, 169, 171, 283, 357, 382, 390, 393, 412, 426, 429, 430, 569, 570, 571, 576, 577, 578, 584, 591, 592, 593, 595, 596, 597, 598, 601, 602, 605, 609, 632, 642, 644, 645, 646, 648, 663, 664, 665, 667, 674, 675, 704], "bool_onli": [12, 13, 280, 281], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 115, 116, 147, 151, 154, 182, 280, 281, 297, 298, 299, 300, 350, 351, 359, 360, 361, 363, 384, 385, 411, 414, 419, 444, 707], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 115, 116, 141, 147, 151, 154, 182, 272, 280, 281, 289, 294, 296, 297, 298, 299, 300, 302, 350, 351, 359, 360, 361, 363, 384, 385, 411, 414, 419, 441, 444, 572, 587, 589, 707], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 151, 182, 280, 281, 285, 297, 298, 299, 300, 316, 414, 444, 667, 691, 700, 704], "empti": [12, 13, 75, 76, 81, 104, 105, 115, 116, 125, 141, 146, 154, 240, 280, 281, 313, 345, 346, 373, 374, 384, 385, 392, 410, 419, 478, 509, 520, 532, 541, 653, 662, 704, 707], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 121, 126, 132, 137, 200, 213, 224, 249, 250, 280, 281, 317, 329, 339, 353, 371, 388, 393, 399, 404, 454, 520, 559, 650, 670, 671, 672, 673, 675, 707, 709], "zero": [12, 13, 23, 280, 281, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 519, 662, 665, 704], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 115, 116, 123, 125, 126, 137, 143, 147, 151, 154, 161, 169, 182, 215, 240, 272, 280, 281, 282, 292, 295, 339, 350, 351, 357, 359, 361, 363, 384, 385, 392, 393, 404, 411, 414, 419, 444, 449, 483, 484, 489, 494, 526, 558, 587, 606, 641, 670, 671, 673, 683, 691, 692, 693, 695, 696, 698, 701, 704, 708], "ignore_index": [14, 45, 52, 137, 148, 149, 282, 312, 319, 404, 412, 413, 456, 473], "verify_integr": [14, 143, 258, 282], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 103, 106, 140, 148, 149, 179, 212, 224, 236, 244, 250, 266, 272, 284, 312, 323, 330, 352, 365, 372, 375, 406, 412, 413, 441, 456, 473, 650, 681, 691, 692, 698, 699, 701, 703, 709], "end": [14, 19, 148, 149, 185, 190, 197, 244, 284, 314, 412, 413, 473, 488, 493, 494, 499, 500, 530, 538, 539, 542, 545, 546, 548, 611, 616, 617, 619, 620, 622, 623, 626, 630, 662, 665, 668, 704], "caller": [14, 28, 55, 64, 73, 84, 88, 121, 125, 137, 183, 240, 242, 293, 323, 334, 339, 352, 357, 358, 388, 392, 404, 445, 478, 542, 547], "ad": [14, 457, 458, 465, 529, 691, 692, 693, 698], "do": [14, 15, 44, 46, 50, 123, 128, 143, 212, 224, 250, 266, 282, 283, 311, 313, 318, 390, 395, 464, 465, 601, 662, 666, 667, 691, 692, 693, 695, 698, 699, 700, 701, 704, 707, 709], "concat": [14, 282, 478, 658, 681, 693, 705], "gener": [14, 15, 36, 37, 51, 70, 137, 142, 209, 241, 282, 302, 303, 404, 407, 480, 527, 528, 572, 589, 641, 642, 655, 681, 691, 692, 693, 695, 697, 701, 704, 705], "concaten": [14, 282, 456, 467, 478, 485, 520, 666, 698, 703, 709], "unchang": [14, 28, 293, 559], "computation": 14, "intens": [14, 700], "than": [14, 15, 46, 60, 62, 70, 85, 87, 115, 116, 123, 137, 154, 179, 289, 329, 331, 353, 356, 384, 385, 390, 404, 419, 441, 450, 451, 452, 465, 483, 487, 492, 494, 503, 504, 532, 535, 541, 558, 559, 576, 577, 578, 589, 595, 596, 597, 598, 602, 605, 609, 637, 639, 655, 691, 692, 693, 695, 698, 699, 702, 704, 707, 709], "better": [14, 61, 137, 330, 404, 662, 692, 703], "solut": [14, 142, 241, 407, 691, 701], "those": [14, 15, 36, 121, 283, 302, 388, 456, 520, 564, 583, 608, 665, 682, 691, 692, 695, 704], "origin": [14, 21, 28, 51, 88, 93, 124, 127, 139, 178, 183, 199, 200, 247, 249, 270, 285, 293, 314, 358, 394, 395, 439, 445, 453, 454, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 544, 640, 641, 643, 644, 645, 646, 647, 648, 649, 674, 691, 701], "onc": [14, 137, 404, 494, 665, 691, 693, 695, 698], "ab": [14, 256, 480, 489, 499, 523, 539, 540, 546, 704, 707], "df2": [14, 456, 655, 671, 698, 704, 707], "With": [14, 28, 70, 133, 196, 282, 289, 293, 312, 400, 441, 629, 665, 695, 698, 700, 701, 704], "follow": [14, 15, 70, 106, 127, 161, 283, 306, 394, 395, 483, 520, 532, 541, 558, 564, 583, 608, 632, 641, 662, 667, 675, 680, 691, 692, 693, 695, 696, 701, 703, 704, 706, 709], "while": [14, 97, 161, 171, 291, 584, 655, 693, 695, 699, 704, 707], "recommend": [14, 123, 124, 692, 693], "show": [14, 70, 74, 75, 76, 104, 105, 127, 345, 346, 373, 374, 394, 670, 671, 672, 673, 692, 695, 698, 704], "wai": [14, 61, 126, 330, 393, 642, 674, 691, 692, 693, 695, 700, 702, 704, 707, 709], "sourc": [14, 16, 17, 164, 246, 427, 652, 661, 662, 666, 667, 692, 693, 699], "less": [14, 46, 85, 87, 289, 353, 356, 450, 451, 452, 465, 558, 559, 637, 639, 665, 692], "effici": [14, 16, 93, 173, 434, 694, 695, 707], "abov": [14, 15, 61, 143, 283, 330, 691, 695, 701, 704, 707], "func": [15, 16, 17, 18, 111, 283, 382, 564, 583, 584, 601, 608, 642, 698], "raw": [15, 640, 661, 666, 667], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 121, 148, 149, 339, 359, 360, 363, 388, 412, 413, 456, 707], "reli": [15, 283, 694, 695, 698, 709], "numba": [15, 16, 119, 283, 642, 705, 709], "jit": [15, 16, 283, 704, 709], "compil": [15, 119, 283, 484, 526, 535, 537, 642, 693, 704, 709], "thu": [15, 283, 469, 694, 702, 704], "within": [15, 55, 61, 84, 132, 283, 323, 330, 352, 399, 483, 492, 503, 504, 527, 528, 536, 576, 577, 578, 581, 595, 596, 597, 598, 602, 605, 609, 662, 665, 668, 686, 691, 693, 704], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 123, 126, 283, 288, 290, 302, 321, 322, 339, 380, 381, 390, 393, 542, 547, 565, 566, 574, 575, 579, 584, 585, 586, 594, 600, 692, 699, 705], "cuda": [15, 16, 17, 283, 640, 641, 642, 694, 697, 698, 700, 704, 706], "python": [15, 18, 21, 43, 119, 242, 283, 285, 310, 415, 478, 488, 505, 506, 507, 508, 514, 515, 516, 519, 542, 547, 584, 632, 642, 661, 662, 665, 666, 667, 674, 691, 693, 694, 695, 697, 698, 702, 704, 707, 709], "target": [15, 123, 283, 486, 536, 691, 692], "see": [15, 16, 19, 28, 43, 48, 50, 61, 119, 161, 166, 185, 190, 197, 283, 284, 293, 310, 316, 318, 330, 429, 542, 547, 564, 583, 589, 608, 611, 617, 630, 661, 662, 664, 665, 666, 667, 674, 691, 692, 696, 698, 701, 703, 704, 706, 708, 709], "guid": [15, 166, 283, 429, 564, 583, 608, 693, 696, 697, 704], "user": [15, 16, 17, 51, 166, 271, 283, 429, 564, 583, 608, 642, 675, 691, 692, 693, 695, 696, 697, 698, 701, 706, 709], "defin": [15, 17, 37, 46, 132, 142, 209, 241, 283, 303, 326, 399, 407, 531, 584, 641, 642, 650, 691, 695, 697, 698, 700, 705, 709], "udf": [15, 283, 642, 700, 705, 709], "through": [15, 121, 283, 388, 483, 484, 489, 494, 526, 554, 681, 695, 704, 706, 707], "strings_udf": [15, 283, 704], "rapid": [15, 146, 283, 410, 495, 523, 526, 538, 540, 556, 557, 653, 661, 665, 693, 698, 700, 704, 707], "librari": [15, 166, 283, 429, 542, 547, 558, 632, 674, 694, 697, 700, 701, 705, 706, 709], "includ": [15, 28, 36, 51, 59, 61, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 117, 133, 141, 167, 171, 172, 179, 192, 272, 283, 289, 293, 302, 330, 345, 346, 359, 360, 362, 363, 365, 373, 374, 379, 386, 400, 430, 441, 457, 463, 464, 465, 496, 508, 515, 522, 525, 529, 543, 546, 549, 567, 572, 576, 577, 578, 588, 595, 596, 597, 598, 602, 605, 609, 619, 650, 655, 661, 662, 664, 665, 666, 667, 668, 691, 692, 693, 694, 695, 698, 702, 704, 706, 707, 709], "subset": [15, 45, 46, 55, 84, 141, 158, 166, 179, 245, 283, 323, 352, 422, 429, 662, 701, 703, 704], "expect": [15, 26, 88, 111, 117, 148, 167, 183, 283, 292, 358, 382, 412, 430, 445, 483, 556, 601, 641, 665, 691, 692, 695, 699, 700, 701, 704], "refer": [15, 28, 36, 43, 119, 283, 293, 302, 310, 496, 537, 696, 697, 702, 704, 707, 708], "caveat": [15, 283, 692, 705], "referenc": [15, 283, 707], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 127, 133, 141, 148, 158, 164, 166, 167, 169, 171, 173, 192, 196, 217, 245, 246, 254, 258, 273, 294, 296, 302, 307, 311, 313, 325, 328, 345, 346, 373, 374, 382, 394, 400, 412, 422, 427, 429, 430, 434, 436, 463, 465, 483, 485, 486, 529, 531, 532, 541, 589, 619, 629, 632, 641, 650, 652, 653, 655, 667, 668, 670, 671, 673, 674, 691, 692, 693, 695, 698, 700, 701, 703, 704, 706, 707, 709], "expand": [15, 489, 532, 541, 542, 547, 694], "reduc": [15, 691], "argument": [15, 16, 17, 19, 20, 21, 31, 61, 90, 111, 123, 124, 143, 148, 151, 161, 166, 167, 177, 182, 244, 283, 284, 285, 330, 360, 382, 395, 412, 414, 429, 430, 444, 456, 564, 583, 601, 608, 641, 653, 662, 664, 665, 667, 674, 675, 676, 680, 691, 692, 695, 700, 708], "simpl": [15, 465, 691, 695, 698, 704], "variabl": [15, 46, 92, 94, 119, 132, 133, 313, 399, 400, 642, 650, 659, 691, 698, 706], "could": [15, 589, 695, 700, 704], "def": [15, 16, 17, 132, 283, 399, 520, 527, 584, 642, 662, 691, 693, 698, 700, 702, 704], "f": [15, 36, 111, 266, 283, 302, 382, 495, 520, 535, 544, 556, 557, 674, 693, 704], "els": [15, 75, 76, 283, 345, 346, 693, 698, 700, 704], "awar": [15, 291, 704], "manner": [15, 16, 283], "mai": [15, 16, 17, 21, 61, 137, 140, 166, 169, 227, 266, 283, 285, 330, 357, 404, 406, 429, 483, 486, 503, 504, 575, 589, 662, 665, 666, 667, 668, 680, 683, 691, 692, 693, 694, 695, 698, 699, 700, 703, 704], "condition": [15, 283, 691, 704], "mix": [15, 36, 117, 166, 227, 302, 429, 505, 675, 699, 704], "common": [15, 36, 94, 142, 224, 241, 283, 302, 407, 674, 691, 692, 695, 704], "rather": [15, 123, 162, 179, 390, 425, 441, 691, 693, 695, 699, 704, 709], "howev": [15, 171, 283, 483, 529, 589, 691, 692, 693, 695, 698, 702, 704, 707], "promot": [15, 704], "safe": [15, 698, 704], "regardless": [15, 36, 119, 302, 675, 701, 704], "op": [15, 704], "against": [15, 16, 17, 50, 318, 486, 505], "v": [15, 148, 149, 412, 413, 537, 575, 694, 699], "w": [15, 127, 166, 394, 429, 481, 662], "z": [15, 16, 17, 44, 54, 126, 161, 311, 322, 390, 393, 470, 491, 560, 701], "manipul": [15, 283, 681, 697, 698], "long": [15, 92, 283, 558, 659, 665, 691], "neither": [15, 28, 254, 255, 266, 283, 289, 293, 699], "modifi": [15, 51, 128, 143, 178, 242, 283, 395, 439, 575, 665], "place": [15, 45, 73, 88, 123, 126, 128, 133, 142, 143, 148, 167, 178, 183, 241, 283, 339, 358, 393, 395, 400, 407, 412, 430, 439, 445, 457, 459, 465, 478, 490, 491, 492, 520, 662, 666, 667, 706, 707], "nor": [15, 28, 166, 266, 283, 293, 429, 699, 709], "creat": [15, 28, 123, 125, 127, 128, 143, 166, 199, 200, 205, 240, 242, 247, 249, 270, 283, 293, 325, 326, 327, 392, 394, 395, 429, 453, 454, 532, 537, 541, 589, 640, 662, 691, 693, 698, 700, 701, 702, 703, 704], "st": [15, 283, 704], "str_col": [15, 704], "scale": [15, 698, 701, 702, 704], "len": [15, 16, 171, 283, 482, 641, 681, 698, 704], "elif": [15, 283, 704], "startswith": [15, 283, 681, 704], "42": [15, 185, 283, 703, 704], "abc": [15, 256, 283, 313, 357, 476, 480, 482, 487, 493, 499, 501, 502, 509, 511, 512, 520, 522, 527, 538, 539, 546, 662, 702, 704, 707], "some_exampl": [15, 283, 704], "sinc": [15, 167, 168, 171, 218, 283, 375, 430, 432, 642, 691, 692, 693, 695, 704, 707], "requir": [15, 29, 37, 38, 39, 65, 66, 115, 116, 132, 137, 142, 154, 171, 209, 210, 211, 222, 223, 241, 283, 303, 304, 305, 335, 336, 384, 385, 399, 404, 407, 419, 576, 577, 578, 587, 589, 595, 596, 597, 598, 602, 605, 609, 640, 667, 691, 692, 695, 703, 704], "creation": [15, 38, 210, 283, 304, 705], "upper": [15, 26, 36, 283, 292, 302, 524, 529, 550, 551, 681], "rais": [15, 21, 44, 55, 57, 58, 84, 124, 126, 141, 178, 184, 217, 261, 283, 285, 311, 314, 323, 325, 328, 344, 352, 393, 464, 469, 483, 499, 520, 532, 535, 539, 541, 558, 650, 654, 669, 674, 675, 692, 693, 695, 700, 701, 702, 704], "attributeerror": [15, 283], "complet": [15, 283, 693, 698, 706], "http": [15, 43, 161, 283, 310, 486, 542, 547, 556, 557, 589, 642, 661, 662, 665, 666, 667, 668, 674, 693], "doc": [15, 43, 283, 310, 542, 547, 632, 665, 674, 700, 709], "ai": [15, 103, 106, 146, 283, 410, 523, 526, 538, 540, 556, 557, 661], "api": [15, 16, 110, 283, 381, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 705, 706, 707, 708, 709], "stabl": [15, 19, 283, 284, 642, 706], "user_guid": [15, 283, 693], "html": [15, 43, 283, 310, 542, 547, 556, 557, 642, 674, 693], "incol": [16, 17, 704], "outcol": [16, 17, 704], "pessimistic_nul": [16, 17], "chunk": [16, 171, 584, 668], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 124, 319, 529, 584, 642, 698, 700, 704, 705], "execut": [16, 17, 693, 698, 704, 709], "Or": [16, 17, 123, 702, 704], "dictionari": [16, 17, 21, 111, 142, 241, 285, 382, 407, 563, 601, 653, 667, 695, 696, 702, 704], "map": [16, 17, 61, 75, 76, 104, 105, 111, 124, 169, 200, 249, 330, 345, 346, 373, 374, 382, 454, 491, 554, 563, 564, 583, 601, 608, 653, 662, 692, 694, 695, 698, 703, 704, 707], "col1": [16, 17, 704], "arg1": [16, 17, 111, 382, 704], "output": [16, 17, 36, 51, 61, 70, 109, 119, 137, 139, 161, 164, 167, 169, 171, 172, 173, 246, 272, 302, 330, 404, 427, 430, 434, 446, 467, 485, 492, 542, 547, 584, 641, 642, 653, 655, 665, 668, 670, 671, 672, 673, 681, 691, 693, 695, 697, 701, 703, 704, 705, 709], "extra": [16, 17, 21, 124, 161, 285, 530, 662], "These": [16, 17, 94, 642, 683, 684, 686, 687, 688, 691, 692, 693, 695, 702, 704, 707], "directli": [16, 17, 44, 178, 242, 311, 457, 682, 695, 698, 700, 704], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 121, 125, 126, 133, 137, 140, 148, 167, 169, 171, 178, 205, 209, 210, 211, 218, 222, 223, 240, 244, 302, 303, 304, 305, 335, 336, 388, 390, 392, 393, 400, 404, 406, 412, 430, 463, 465, 487, 518, 537, 581, 641, 650, 655, 667, 668, 682, 691, 692, 693, 695, 698, 704, 709], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 115, 116, 117, 125, 132, 154, 159, 177, 178, 187, 189, 215, 240, 244, 272, 295, 313, 316, 322, 373, 374, 384, 385, 392, 399, 419, 423, 439, 440, 441, 456, 490, 494, 520, 576, 577, 578, 589, 595, 596, 597, 598, 602, 605, 609, 613, 615, 641, 643, 650, 653, 662, 665, 675, 676, 691, 692, 695, 699, 707, 709], "underli": [16, 17, 124, 146, 181, 259, 370, 391, 410, 443, 681, 691, 695, 698, 707], "garbag": [16, 17, 327], "chunksiz": [16, 161, 664, 665], "offset": [16, 55, 84, 127, 132, 171, 323, 352, 394, 399, 662, 665, 668, 695], "start": [16, 23, 94, 119, 127, 146, 161, 271, 287, 314, 349, 394, 410, 493, 499, 500, 526, 529, 535, 538, 539, 544, 545, 546, 547, 548, 556, 557, 616, 619, 620, 622, 623, 626, 661, 662, 664, 665, 666, 668, 674, 694, 695], "span": 16, "th": [16, 320, 469, 470, 487], "size": [16, 26, 75, 76, 93, 104, 105, 132, 169, 171, 205, 292, 345, 346, 373, 374, 399, 478, 482, 487, 544, 606, 650, 655, 662, 665, 668, 691, 695, 703, 704, 706], "thread": [16, 17, 662, 698, 704], "block": [16, 529, 662], "kernel": [16, 17, 119, 705], "foral": [16, 704], "built": [16, 529, 695, 697, 698, 700], "queri": [16, 166, 429, 496, 698, 701], "driver": [16, 698], "optim": [16, 70, 667, 706, 709], "launch": [16, 704], "configur": [16, 661, 662, 666, 667, 668, 692, 704, 708], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 209, 210, 211, 222, 223, 303, 304, 305, 335, 336, 681], "It": [16, 64, 97, 137, 148, 205, 218, 334, 357, 404, 412, 655, 691, 692, 694, 704, 707, 709], "good": [16, 641, 650, 692, 694, 698], "point": [16, 73, 117, 118, 140, 167, 339, 386, 406, 430, 482, 528, 552, 553, 580, 662, 694, 695, 702, 704, 705, 707], "ineffici": 16, "Its": [16, 695], "maximum": [16, 26, 89, 169, 171, 256, 292, 359, 491, 558, 601, 641, 650, 662, 702, 706], "possibl": [16, 73, 166, 205, 339, 429, 665, 675, 691, 692, 693, 695, 704, 706, 707, 709], "avail": [16, 166, 429, 484, 532, 541, 651, 661, 662, 666, 667, 680, 682, 686, 693, 698, 703, 704, 706, 707], "resourc": [16, 70, 691], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 115, 116, 123, 124, 125, 132, 133, 137, 146, 151, 154, 159, 167, 169, 171, 182, 238, 240, 260, 263, 264, 269, 286, 294, 295, 302, 320, 327, 334, 370, 376, 379, 381, 384, 385, 392, 399, 400, 404, 410, 414, 419, 423, 430, 440, 441, 444, 448, 450, 451, 452, 456, 476, 478, 480, 484, 487, 492, 495, 507, 522, 527, 528, 531, 535, 542, 547, 552, 567, 576, 577, 578, 581, 587, 588, 589, 595, 596, 597, 598, 602, 605, 609, 616, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 653, 658, 661, 662, 664, 665, 666, 668, 670, 671, 672, 673, 674, 691, 692, 693, 695, 698, 702, 703, 704, 706], "concurr": [16, 17], "To": [16, 36, 45, 126, 171, 302, 393, 441, 532, 601, 662, 665, 666, 667, 691, 693, 695, 700, 703, 704, 707, 708, 709], "access": [16, 36, 166, 302, 429, 681, 684, 686, 687, 688, 695, 698, 704, 706], "count": [16, 36, 70, 89, 90, 95, 97, 107, 132, 159, 179, 302, 359, 360, 363, 365, 379, 399, 423, 441, 568, 572, 590, 642, 681, 698, 701, 703, 704], "threadidx": [16, 704], "blockdim": [16, 704], "respect": [16, 61, 94, 126, 167, 330, 393, 430, 465, 542, 547, 561, 650, 665, 671, 691, 700, 702], "document": [16, 542, 674, 691, 692, 694, 695, 696, 698, 704, 709], "In": [16, 26, 61, 106, 124, 166, 283, 292, 330, 395, 429, 520, 542, 547, 584, 674, 691, 692, 693, 694, 695, 699, 700, 702, 704, 705, 707, 709], "below": [16, 26, 28, 36, 48, 292, 293, 302, 316, 589, 691, 698, 704, 709], "invok": [16, 17, 691, 695], "By": [16, 36, 45, 61, 70, 97, 121, 133, 166, 167, 179, 212, 302, 330, 388, 400, 429, 430, 478, 655, 662, 667, 691, 695, 698, 700, 704, 707, 709], "loop": [16, 17, 695, 700, 704], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 283, 531, 559, 666, 667, 695, 702, 703, 704, 707, 709], "so": [17, 132, 171, 179, 266, 375, 399, 441, 691, 692, 693, 695, 697, 700, 701, 704, 707, 709], "must": [17, 37, 50, 51, 74, 80, 94, 109, 124, 126, 127, 132, 133, 139, 140, 142, 149, 159, 166, 168, 178, 185, 190, 197, 205, 209, 241, 242, 256, 272, 303, 318, 327, 393, 394, 399, 400, 406, 407, 413, 423, 429, 432, 463, 469, 470, 478, 484, 496, 611, 617, 630, 650, 662, 665, 666, 667, 671, 672, 691, 692, 695, 698, 704, 707, 709], "independ": [17, 693, 704], "stride": [17, 169, 641], "improv": [17, 662, 666], "parallel": [17, 183, 445, 662, 698, 699, 701, 704, 706, 709], "resembl": 17, "code": [17, 44, 146, 156, 244, 258, 311, 320, 326, 410, 482, 691, 693, 694, 695, 698, 704], "nelem": [17, 700], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 704], "zip": [17, 167, 430, 662, 665, 698, 704], "callabl": [18, 88, 111, 148, 167, 183, 358, 382, 412, 430, 445, 564, 583, 587, 601, 606, 608, 703], "na_act": [18, 357], "elementwis": [18, 642], "everi": [18, 46, 74, 535, 564, 583, 608, 695, 698, 704], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 124, 126, 133, 169, 178, 285, 302, 311, 339, 357, 362, 393, 395, 400, 456, 467, 478, 572, 653, 662, 664, 666, 670, 671, 673, 674, 675, 704, 707], "propag": [18, 21, 54, 285, 322, 357, 542, 547, 575, 704, 706, 707], "without": [18, 28, 36, 44, 70, 124, 242, 251, 293, 302, 311, 357, 478, 529, 542, 546, 547, 662, 671, 672, 673, 691, 692, 697, 700, 704], "them": [18, 61, 330, 357, 441, 485, 490, 492, 642, 674, 693, 695, 702, 703, 704, 709], "kind": [19, 94, 127, 148, 149, 220, 242, 284, 394, 412, 413, 473, 702], "quicksort": [19, 149, 284, 413, 473], "ascend": [19, 121, 140, 148, 149, 179, 244, 284, 375, 388, 406, 412, 413, 441, 473], "na_posit": [19, 140, 148, 149, 244, 284, 406, 412, 413, 473], "last": [19, 36, 45, 54, 64, 103, 106, 124, 140, 148, 149, 157, 213, 244, 284, 302, 312, 322, 334, 372, 375, 406, 412, 413, 421, 457, 473, 499, 532, 539, 541, 575, 620, 622, 624, 641, 662, 674, 704], "would": [19, 140, 166, 244, 283, 284, 406, 429, 536, 674, 691, 693, 698, 704, 707], "effect": [19, 61, 123, 284, 330, 390, 691, 699, 701], "compat": [19, 22, 67, 93, 177, 218, 284, 313, 362, 665, 676, 693, 694, 695, 697, 702, 705, 706], "mergesort": [19, 284], "heapsort": [19, 284], "choic": [19, 70, 284, 674, 693, 700], "algorithm": [19, 117, 284, 386, 486, 487, 533, 695], "descend": [19, 103, 140, 148, 149, 179, 244, 284, 372, 406, 412, 413, 441, 473], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 121, 127, 140, 142, 148, 149, 156, 167, 179, 184, 196, 213, 241, 244, 260, 283, 284, 302, 306, 312, 318, 330, 334, 372, 375, 388, 394, 395, 406, 407, 412, 413, 430, 441, 473, 489, 518, 524, 532, 542, 547, 550, 551, 555, 559, 573, 621, 623, 625, 629, 641, 650, 662, 665, 668, 674, 691, 692, 693, 695, 698, 704], "put": [19, 148, 149, 244, 284, 412, 413, 473, 694], "begin": [19, 148, 149, 244, 284, 412, 413, 473, 500, 530, 545, 546, 547, 623, 662, 665, 698], "cupi": [19, 31, 61, 117, 137, 140, 162, 180, 235, 244, 257, 284, 320, 330, 404, 406, 425, 442, 641, 691, 695, 697, 698, 705, 707, 709], "ndarrai": [19, 59, 92, 137, 162, 168, 180, 181, 184, 192, 244, 257, 272, 284, 320, 404, 425, 432, 442, 443, 641, 650, 659, 675, 698, 700, 704], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 127, 132, 141, 200, 249, 272, 283, 284, 292, 311, 323, 334, 352, 375, 394, 399, 454, 474, 483, 487, 497, 498, 507, 522, 641, 660, 664, 665, 674, 691, 692, 695, 698, 702, 704], "int32": [19, 21, 63, 140, 244, 284, 285, 307, 333, 406, 441, 470, 472, 476, 482, 484, 486, 493, 499, 521, 533, 538, 539, 552, 641, 650, 662, 695, 698, 702, 704, 706], "foo": [19, 47, 161, 284, 395, 535, 662, 691, 692, 693, 698], "idx": [19, 75, 76, 104, 105, 207, 218, 225, 226, 227, 228, 229, 233, 234, 235, 242, 244, 245, 248, 260, 284, 327, 345, 346, 373, 374, 483, 532, 541, 698], "keyword": [20, 31, 90, 111, 123, 124, 236, 360, 382, 390, 456, 542, 547, 601, 664, 698, 704], "error": [21, 44, 124, 161, 166, 178, 283, 285, 311, 344, 429, 650, 664, 674, 675, 692, 702, 704, 706], "cast": [21, 51, 115, 116, 123, 154, 155, 285, 384, 385, 390, 419, 420, 466, 665, 699, 707], "altern": [21, 44, 46, 111, 285, 311, 382, 536, 601, 662, 691, 693], "col": [21, 72, 285, 691, 700], "where": [21, 38, 44, 46, 51, 61, 70, 75, 76, 88, 103, 104, 105, 106, 111, 117, 123, 125, 140, 151, 169, 182, 210, 235, 240, 285, 304, 311, 330, 345, 346, 358, 373, 374, 375, 382, 386, 390, 392, 406, 414, 444, 480, 487, 493, 496, 499, 503, 504, 538, 539, 601, 638, 647, 649, 664, 691, 692, 693, 695, 698, 699, 703, 706], "specif": [21, 45, 51, 94, 133, 285, 400, 680, 686, 691, 692, 693, 694, 695, 698, 707, 708], "deep": [21, 28, 70, 93, 164, 208, 246, 285, 293, 362, 427, 652], "henc": [21, 285, 707], "chang": [21, 28, 110, 123, 151, 156, 178, 182, 285, 293, 312, 381, 390, 391, 414, 441, 444, 464, 465, 529, 550, 691, 692, 707], "warn": [21, 124, 285, 674, 692, 698, 707], "control": [21, 36, 124, 170, 285, 302, 433, 529, 641, 662, 691, 706], "except": [21, 45, 64, 124, 127, 192, 213, 224, 250, 285, 312, 334, 394, 499, 539, 557, 619, 642, 662, 674, 694, 695, 703, 706], "invalid": [21, 57, 58, 124, 217, 261, 285, 325, 328, 669, 674, 675], "suppress": [21, 44, 124, 285, 311], "On": [21, 124, 285, 465, 698, 701], "constructor": [21, 285, 681, 693, 695, 698, 700, 707], "float32": [21, 285, 441, 675, 702, 706], "custom": [21, 132, 285, 399, 642, 659, 667, 691, 692, 695, 701, 708, 709], "cat_dtyp": [21, 285], "enabl": [21, 169, 285, 662, 665, 691, 693, 695, 702, 706], "s1": [21, 282, 285, 456, 467, 483, 505, 506, 515], "s2": [21, 282, 285, 395, 456, 466, 467, 483, 505, 515], "alia": [22, 67, 230, 340, 349], "cdf1": 23, "k2": [23, 665], "temp": [23, 262, 490, 698], "stop": [23, 110, 146, 271, 287, 349, 381, 410, 544, 545, 546, 664], "step": [23, 271, 287, 349, 465, 544], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 124, 126, 128, 143, 148, 149, 183, 239, 242, 288, 290, 291, 292, 311, 312, 313, 321, 322, 339, 358, 380, 391, 393, 395, 412, 413, 445, 457, 458, 459, 463, 464, 465, 473, 575, 707], "synonym": [24, 25, 53, 108, 288, 290, 321, 380], "fillna": [24, 25, 46, 53, 108, 126, 288, 290, 313, 321, 380, 393, 698, 699, 701, 705], "bfill": [24, 54, 127, 256, 288, 322, 394, 575], "lower": [26, 36, 117, 118, 292, 302, 386, 477, 529, 550, 551, 554, 555, 580, 681, 695, 698], "trim": [26, 292, 530], "threshold": [26, 292, 589], "assign": [26, 51, 121, 124, 139, 291, 292, 388, 433, 698, 701, 707], "outsid": [26, 166, 292, 429, 456, 704], "boundari": [26, 132, 289, 292, 399, 704], "singular": [26, 292], "latter": [26, 292, 691, 692, 693, 700], "case": [26, 51, 64, 94, 117, 124, 148, 203, 224, 250, 253, 292, 334, 395, 412, 455, 483, 486, 520, 526, 529, 535, 542, 641, 674, 691, 692, 693, 695, 699, 700, 703, 704, 707, 709], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 115, 116, 137, 148, 154, 166, 183, 185, 190, 197, 210, 222, 272, 286, 292, 304, 312, 330, 335, 358, 384, 385, 404, 412, 419, 429, 433, 445, 465, 529, 556, 557, 564, 576, 577, 578, 583, 595, 596, 597, 598, 602, 605, 608, 609, 611, 617, 630, 662, 666, 670, 671, 672, 673, 691, 692, 695, 700, 703, 704, 705, 706, 707, 709], "array_lik": [26, 292], "minimum": [26, 29, 95, 132, 292, 294, 363, 399, 479, 491, 492, 523, 531, 540, 559, 587, 589, 601, 650, 691], "sr": [26, 127, 137, 283, 292, 349, 394, 404, 424, 441, 486, 492, 536, 704], "t": [28, 43, 55, 84, 93, 97, 107, 117, 124, 137, 171, 179, 185, 190, 194, 197, 293, 310, 323, 352, 365, 379, 404, 441, 481, 488, 510, 516, 520, 525, 529, 530, 543, 549, 567, 588, 611, 617, 627, 630, 665, 691, 698, 699, 700, 701, 704, 707], "modif": [28, 293], "reflect": [28, 43, 293, 310, 692], "shallow": [28, 293], "vice": [28, 293, 550], "versa": [28, 293, 550], "s_copi": [28, 293], "versu": [28, 293, 692, 707], "share": [28, 293, 456, 691, 692, 695], "remain": [28, 112, 260, 293, 478, 524, 550, 551, 555, 559, 660, 691], "pearson": [29, 147, 286, 294, 411, 587, 703], "min_period": [29, 132, 294, 296, 399, 587, 589, 642, 704], "correl": [29, 286, 294, 587, 589], "matrix": [29, 31, 487, 587, 589, 705], "spearman": [29, 294, 587], "standard": [29, 151, 161, 193, 294, 414, 538, 542, 547, 554, 604, 626, 632, 647, 662, 691, 692, 693, 695, 698, 701, 704], "coeffici": [29, 294, 587], "rank": [29, 294], "observ": [29, 61, 132, 262, 294, 295, 330, 399, 575, 587, 589, 643, 698], "pair": [29, 77, 126, 161, 393, 587, 589, 662, 665, 667], "have": [29, 36, 48, 50, 55, 61, 74, 84, 94, 97, 106, 109, 111, 121, 123, 127, 137, 141, 170, 171, 178, 179, 272, 294, 302, 316, 318, 323, 330, 352, 382, 388, 394, 404, 433, 462, 478, 487, 497, 498, 520, 587, 589, 642, 659, 691, 692, 693, 695, 698, 700, 703, 704, 707], "valid": [29, 46, 115, 116, 132, 133, 154, 258, 294, 313, 327, 384, 385, 399, 400, 419, 484, 496, 520, 575, 576, 577, 578, 587, 589, 595, 596, 597, 598, 602, 605, 609, 665, 669, 691, 693, 695, 696, 706], "request": [29, 90, 91, 161, 171, 218, 256, 265, 360, 361, 662], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 115, 116, 117, 121, 147, 151, 154, 182, 350, 351, 359, 360, 361, 363, 384, 385, 388, 411, 414, 419, 444, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609], "cell": [30, 700, 704], "nat": [30, 46, 75, 76, 97, 104, 105, 184, 345, 346, 365, 373, 374, 626, 674, 707], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 161, 213, 311, 313, 316, 318, 345, 346, 365, 373, 374, 465, 520, 642, 662, 691, 693, 695, 704, 707], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 161, 183, 312, 313, 345, 346, 358, 373, 374, 445, 520, 662, 665, 672, 691], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 345, 346, 373, 374], "24": [30, 32, 33, 34, 35, 61, 91, 93, 115, 116, 127, 128, 132, 297, 298, 299, 300, 330, 361, 384, 385, 394, 399, 481, 572, 698, 707], "21": [30, 127, 132, 133, 394, 399, 400, 481, 698, 703], "26": [30, 43, 61, 294, 296, 310, 330, 481, 572, 620, 622, 623, 698, 700], "covari": [31, 296, 589], "cumul": [32, 33, 34, 35, 297, 298, 299, 300, 568, 569, 570, 571, 590, 591, 592, 593, 707], "indexedfram": [32, 33, 34, 35, 695], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 157, 183, 289, 295, 297, 298, 299, 300, 313, 322, 330, 334, 345, 346, 358, 361, 373, 374, 421, 433, 445, 481, 503, 504, 520, 528, 529, 530, 533, 552, 553, 626, 704], "cumsum": [32, 33, 34, 297, 298, 299, 695, 707], "15": [32, 33, 34, 35, 45, 55, 84, 127, 132, 140, 143, 248, 297, 298, 299, 300, 323, 349, 352, 394, 399, 406, 428, 481, 511, 512, 698, 704], "34": [32, 33, 34, 35, 154, 297, 298, 299, 300, 419, 490, 707], "product": [34, 43, 115, 154, 262, 263, 264, 299, 310, 384, 419, 691, 705, 706], "percentil": [36, 121, 302, 388], "datetime_is_numer": [36, 302], "descript": [36, 70, 302, 572, 651, 681, 693, 696, 698, 708], "statist": [36, 70, 132, 169, 171, 272, 302, 399, 572, 655, 666, 667, 698], "summar": [36, 302, 572, 703], "central": [36, 302, 572], "tendenc": [36, 302, 572], "dispers": [36, 302, 572], "shape": [36, 50, 93, 140, 148, 302, 318, 406, 412, 572, 695, 700, 704, 707], "dataset": [36, 169, 171, 302, 365, 572, 655, 657, 661, 662, 665, 666, 667, 691, 704], "distribut": [36, 137, 302, 404, 572, 691, 698], "analyz": [36, 302, 572, 698], "well": [36, 117, 142, 218, 241, 302, 407, 461, 529, 672, 693, 695, 700], "vari": [36, 302, 641, 670, 671, 672, 673, 698], "depend": [36, 51, 94, 124, 162, 167, 168, 170, 205, 236, 260, 302, 425, 430, 432, 433, 542, 547, 650, 652, 664, 665, 674, 675, 691, 695, 698, 700, 706], "what": [36, 302, 474, 691, 692, 695, 704, 705, 709], "detail": [36, 161, 185, 190, 197, 283, 302, 589, 611, 617, 630, 632, 661, 662, 666, 667, 691, 696, 697, 698, 703, 704, 708, 709], "fall": [36, 302, 616, 691, 695, 706], "between": [36, 51, 73, 110, 117, 118, 121, 272, 286, 294, 296, 302, 339, 381, 386, 388, 485, 487, 493, 499, 520, 527, 528, 530, 538, 539, 573, 580, 589, 601, 691, 692, 693, 695, 697, 701, 703, 704, 705, 706, 707, 709], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 132, 286, 302, 330, 333, 345, 346, 361, 373, 374, 386, 399, 481, 572, 626, 672, 673, 698, 704], "75": [36, 70, 302, 386, 564, 572, 583, 608, 709], "25th": [36, 302], "50th": [36, 302], "75th": [36, 302], "submit": [36, 302], "instead": [36, 70, 111, 119, 127, 132, 171, 192, 205, 242, 262, 302, 326, 344, 382, 394, 399, 456, 467, 488, 490, 499, 539, 601, 619, 691, 692, 695, 698, 706, 707], "style": [36, 45, 61, 94, 123, 302, 330, 693, 694, 698, 704], "select_dtyp": [36, 302], "o": [36, 302, 481, 691, 695, 698, 705], "omit": [36, 44, 179, 302, 311, 478, 572, 664], "noth": [36, 171, 302, 500], "output_fram": [36, 302], "summari": [36, 70, 302, 572, 705], "mean": [36, 48, 61, 115, 116, 127, 154, 283, 302, 316, 330, 384, 385, 394, 419, 484, 546, 564, 572, 583, 608, 691, 692, 698, 700, 701, 703, 704, 707, 709], "std": [36, 302, 572, 700, 701, 703], "50": [36, 44, 63, 70, 126, 127, 207, 302, 311, 333, 386, 393, 394, 572, 671, 700, 702, 704], "median": [36, 302, 703], "top": [36, 121, 302, 388, 467, 681, 691, 698], "freq": [36, 55, 84, 110, 127, 145, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 204, 302, 314, 323, 352, 381, 394, 409, 446, 581, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 627, 628, 630, 631, 632, 633, 634, 698], "most": [36, 97, 179, 302, 441, 499, 539, 642, 667, 682, 691, 692, 695, 698, 701], "frequenc": [36, 97, 127, 179, 185, 190, 197, 302, 394, 441, 449, 611, 617, 630], "timestamp": [36, 47, 75, 76, 104, 105, 132, 167, 171, 302, 345, 346, 373, 374, 399, 430, 517, 611, 617, 630, 665, 674, 698, 701, 707, 709], "highest": [36, 97, 121, 302, 388, 457, 538, 539, 691], "arbitrarili": [36, 302], "chosen": [36, 137, 302, 404], "among": [36, 43, 302, 310, 589, 709], "analysi": [36, 302, 589], "consist": [36, 140, 225, 226, 227, 228, 229, 233, 234, 258, 302, 406, 691, 692, 693, 695, 704], "union": [36, 94, 162, 168, 272, 302, 425, 432, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 483, 534, 535, 548, 641, 672], "00000": [36, 147, 302, 411, 700], "50000": [36, 302], "02765": [36, 302], "25000": [36, 302], "75000": [36, 302], "datetime64": [36, 46, 47, 75, 76, 104, 105, 119, 127, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 302, 345, 346, 373, 374, 394, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 674, 702, 706, 707], "2000": [36, 127, 186, 191, 194, 195, 198, 202, 302, 394, 612, 616, 618, 619, 620, 622, 623, 627, 628, 631, 632, 634], "2010": [36, 302, 619, 626, 700], "2006": [36, 302, 619], "09": [36, 55, 84, 127, 132, 302, 323, 352, 394, 399, 616, 620, 622, 623, 632, 698], "08": [36, 119, 123, 127, 132, 185, 187, 188, 189, 190, 193, 196, 201, 302, 394, 399, 613, 614, 615, 616, 620, 629, 633, 670, 671, 672, 673, 692], "2004": [36, 302, 619], "31": [36, 127, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 302, 394, 613, 614, 615, 616, 619, 620, 624, 625, 628, 629, 632, 633, 634, 635, 636, 637, 639], "field": [36, 171, 302, 496, 560, 641, 662, 681, 695], "classmethod": [37, 38, 57, 58, 59, 65, 209, 210, 216, 217, 222, 261, 262, 263, 264, 303, 304, 325, 326, 327, 328, 335], "header": [37, 38, 39, 50, 65, 66, 161, 209, 210, 211, 222, 223, 303, 304, 305, 318, 335, 336, 662, 695], "represent": [37, 70, 142, 180, 181, 209, 241, 257, 262, 303, 407, 442, 443, 478, 702, 705], "subclass": [37, 38, 65, 132, 142, 205, 209, 210, 222, 241, 303, 304, 335, 357, 399, 407, 693, 695], "implement": [37, 90, 110, 142, 178, 209, 241, 271, 303, 360, 381, 407, 558, 664, 695, 698, 701, 704, 706], "how": [37, 46, 57, 80, 94, 110, 121, 133, 142, 166, 178, 209, 214, 236, 241, 303, 313, 381, 388, 400, 407, 429, 456, 664, 691, 692, 693, 696, 698, 700, 704, 705, 706], "construct": [37, 112, 142, 184, 209, 241, 255, 303, 407, 446, 660, 695], "metadata": [37, 38, 39, 65, 66, 142, 171, 209, 210, 211, 222, 223, 241, 303, 304, 305, 335, 336, 407, 641, 656, 658, 666, 667], "reconstruct": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 303, 304, 305, 335, 336, 407], "buffer": [37, 38, 65, 66, 70, 142, 209, 210, 222, 223, 241, 301, 303, 304, 335, 336, 378, 407, 664, 706], "memoryview": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 301, 303, 304, 305, 335, 336, 407], "serializ": [37, 38, 65, 142, 167, 209, 210, 222, 241, 303, 304, 335, 407, 430], "instanc": [37, 38, 55, 65, 84, 143, 209, 210, 222, 271, 303, 304, 323, 335, 352, 478, 486, 494, 527, 536, 662, 691, 695, 696, 698], "cl": [37, 38, 65, 209, 210, 222, 303, 304, 335, 691], "wa": [37, 38, 65, 209, 210, 222, 244, 303, 304, 335, 701], "produc": [37, 38, 61, 65, 112, 123, 137, 209, 210, 222, 303, 304, 330, 335, 404, 467, 660, 665, 698, 703, 704, 709], "meta": [37, 38, 39, 65, 66, 142, 160, 209, 210, 211, 222, 223, 241, 303, 304, 305, 335, 336, 407], "privat": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 303, 304, 305, 335, 336, 407], "devic": [38, 39, 65, 142, 168, 210, 211, 222, 241, 283, 304, 305, 335, 407, 432, 641, 695], "side": [38, 65, 94, 123, 127, 140, 210, 220, 222, 254, 255, 304, 335, 390, 394, 406, 479, 523, 525, 531, 540, 543, 549, 559, 650, 699], "deseri": [38, 65, 142, 210, 222, 241, 304, 335, 407], "task": [38, 65, 210, 222, 304, 335, 695, 698, 704, 709], "primari": [38, 210, 304, 691, 692, 695], "purpos": [38, 210, 304, 691, 692, 695], "memori": [38, 39, 66, 70, 93, 161, 164, 168, 210, 211, 223, 246, 283, 304, 305, 336, 362, 427, 432, 640, 641, 652, 665, 667, 691, 692, 695, 697, 698, 700, 706], "host": [38, 66, 161, 168, 181, 210, 223, 272, 304, 336, 432, 443, 662, 667, 693, 695], "necessari": [38, 43, 162, 210, 304, 310, 425, 522, 691, 692, 693, 695, 698, 704], "associ": [39, 66, 211, 223, 272, 305, 336, 702, 709], "devicebufferlik": [39, 211, 305], "period": [40, 55, 84, 110, 127, 132, 145, 186, 191, 194, 195, 198, 202, 306, 323, 352, 381, 394, 399, 409, 573, 581, 612, 618, 624, 625, 627, 628, 631, 632, 634, 698], "discret": [40, 306, 650, 691], "calcul": [40, 70, 110, 132, 151, 182, 193, 220, 294, 306, 327, 381, 399, 414, 444, 573, 589, 626, 642, 643, 644, 645, 646, 647, 648, 649, 674, 698, 700, 705], "compar": [40, 50, 212, 224, 306, 318, 344, 584, 670, 671, 672, 673, 681, 694, 699, 703, 707, 709], "previou": [40, 123, 256, 306], "shift": [40, 110, 286, 306, 381, 573], "neg": [40, 64, 125, 159, 240, 306, 334, 392, 423, 495, 500, 573], "take": [40, 106, 111, 164, 246, 382, 427, 478, 520, 564, 573, 583, 608, 642, 652, 681, 691, 700, 704], "gdf": [40, 572, 575, 584, 587, 589, 698, 699, 702], "16": [40, 132, 140, 357, 399, 406, 481, 497, 498, 674, 698, 704, 706], "36": [40, 132, 399, 698, 704], "divis": [41, 42, 56, 122, 129, 136, 176, 192, 308, 309, 324, 389, 396, 403, 437, 619], "truediv": [41, 42, 308, 309], "inf": [41, 42, 75, 76, 104, 105, 122, 136, 176, 308, 309, 345, 346, 373, 374, 389, 403, 437], "flexibl": [43, 166, 310, 429, 691, 692, 695, 698, 700, 704, 707], "wrapper": [43, 310, 692, 695, 704], "sub": [43, 153, 310, 418, 482, 493, 499, 535, 538, 539], "mul": [43, 99, 310, 367], "div": [43, 310], "mod": [43, 310], "pow": [43, 310], "swap": [43, 156, 310, 691], "operand": [43, 310], "org": [43, 310, 542, 547, 589, 674], "datamodel": [43, 310], "__ror__": [43, 310], "70": [43, 310], "174": [43, 310], "remov": [44, 45, 128, 180, 181, 257, 260, 311, 312, 313, 395, 442, 443, 463, 465, 490, 491, 492, 525, 529, 530, 543, 549, 694, 695, 704], "multi": [44, 51, 80, 258, 311, 659, 697, 698, 705], "keyerror": [44, 311, 654, 669], "found": [44, 94, 140, 235, 266, 272, 311, 357, 406, 494, 499, 532, 536, 537, 539, 541, 542, 547, 553, 632, 662, 695, 698, 699], "dropna": [44, 48, 61, 97, 107, 150, 166, 179, 311, 316, 330, 332, 365, 379, 429, 441, 467, 567, 588, 705], "drop_dupl": [44, 311], "duplic": [44, 45, 103, 106, 124, 143, 213, 251, 311, 312, 372, 375, 534, 650, 662, 709], "certain": [44, 45, 94, 311, 529, 542, 547, 691, 696, 704], "reindex": [44, 311, 575, 681, 699], "midx": [44, 146, 156, 244, 259, 267, 311, 410], "from_product": [44, 242, 262, 264, 311], "40": [44, 127, 185, 193, 196, 311, 390, 394, 483, 629, 698], "lama": [44, 311, 312, 344], "falcon": [44, 61, 64, 74, 128, 156, 179, 311, 330, 334], "speed": [44, 61, 128, 156, 311, 330, 572, 662, 674, 692, 700], "weight": [44, 137, 156, 311, 404], "length": [44, 48, 55, 84, 88, 94, 126, 137, 139, 149, 156, 183, 235, 250, 272, 311, 316, 323, 352, 358, 393, 404, 413, 445, 469, 470, 472, 487, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 542, 547, 558, 559, 581, 641, 650, 653, 704], "big": [44, 70, 156, 311], "small": [44, 156, 311, 662, 666, 691, 693, 695, 700, 701, 703, 704], "45": [44, 156, 197, 311, 611, 617, 630, 674, 700, 704], "200": [44, 123, 156, 207, 311, 700], "100": [44, 61, 117, 126, 127, 156, 192, 207, 244, 311, 330, 393, 394, 510, 512, 619, 671, 698, 700, 704, 707], "250": [44, 156, 311], "150": [44, 156, 311], "320": [44, 156, 311], "keep": [45, 46, 88, 103, 106, 109, 121, 178, 183, 213, 312, 313, 358, 372, 375, 388, 445, 490, 491], "identifi": [45, 61, 75, 76, 92, 104, 105, 148, 166, 330, 345, 346, 373, 374, 412, 429, 485, 492, 536, 537, 632, 659, 664, 691], "drop": [45, 46, 48, 109, 113, 128, 143, 150, 213, 214, 260, 312, 313, 316, 395, 467, 650, 705, 709], "occurr": [45, 103, 106, 213, 312, 372, 375, 484, 494, 520, 532, 535, 541, 698], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 115, 116, 154, 171, 196, 312, 384, 385, 419, 468, 470, 493, 499, 538, 539, 544, 629, 670, 671, 672, 673, 691, 698, 704], "guarante": [45, 137, 312, 404, 475, 589, 662, 691, 703, 709], "thresh": 46, "decid": [46, 214, 692], "least": [46, 109, 178, 214, 332, 467, 520, 702, 704], "isna": [46, 76, 313, 346, 707], "notna": [46, 105, 313, 374, 707], "alfr": [46, 75, 76, 104, 105, 345, 346, 373, 374], "batman": [46, 75, 76, 104, 105, 345, 346, 373, 374], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 345, 346, 373, 374, 503, 504, 704], "batmobil": [46, 75, 76, 104, 105, 345, 346, 373, 374], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 345, 346, 373, 374], "1940": [46, 75, 76, 104, 105, 345, 346, 373, 374], "look": [46, 691, 692, 693, 695, 700, 701, 704], "20180310": 47, "u": [47, 167, 171, 185, 190, 197, 430, 481, 495, 611, 617, 630, 665, 674, 691, 692, 693, 695, 700, 702, 704, 706, 707], "ax": [48, 112, 166, 180, 181, 257, 316, 429, 442, 443, 456, 546, 660, 665, 677, 686], "still": [48, 316, 693], "we": [48, 61, 74, 106, 123, 124, 127, 205, 316, 330, 365, 394, 520, 662, 664, 691, 692, 693, 695, 698, 700, 701, 702, 704, 707, 709], "our": [48, 316, 691, 692, 693, 695, 698, 700, 704, 709], "test": [50, 64, 318, 334, 344, 483, 488, 522, 530, 548, 662, 681, 692, 694, 696, 698, 701, 709], "exactly_equ": [50, 318], "different_column_typ": [50, 318], "expr": [51, 119], "evalu": [51, 488, 505, 548, 698], "describ": [51, 70, 166, 167, 429, 430, 533, 666, 667, 703], "express": [51, 119, 483, 484, 488, 489, 494, 526, 535, 537, 542, 547, 548, 666, 667, 705], "mutat": 51, "typic": [51, 691, 695, 709], "statement": [51, 698, 704], "bitwis": [51, 704], "logic": [51, 94, 283, 666, 667, 695, 698, 704], "automat": [51, 57, 272, 327, 589, 665, 691, 692, 693, 698, 703, 707], "respons": 51, "suitabl": [51, 140, 167, 406, 430, 695], "later": 51, "condit": [51, 88, 119, 183, 358, 445, 698, 704], "upon": [51, 142, 241, 407], "earlier": 51, "though": [51, 698, 704], "line": [51, 64, 167, 334, 430, 499, 539, 558, 662, 665, 691, 692, 700], "replic": [52, 319], "22": [52, 127, 193, 240, 394, 481, 692, 698, 707], "44": [52, 190, 700, 704], "ffill": [54, 108, 110, 256, 322, 380, 381, 575], "forward": [54, 161, 322, 574, 575, 579, 594, 600, 662, 693], "next": [54, 256, 322, 494, 575, 691, 693, 695, 698, 700, 704], "backward": [54, 322, 565, 566, 585, 586], "initi": [55, 323, 695, 698, 704], "time": [55, 84, 110, 125, 127, 132, 159, 161, 167, 240, 272, 323, 352, 381, 392, 394, 399, 423, 430, 470, 477, 484, 550, 551, 555, 589, 642, 662, 666, 667, 674, 681, 691, 692, 695, 700, 701, 704, 705, 707], "date": [55, 84, 167, 184, 192, 196, 323, 352, 430, 616, 619, 620, 621, 622, 623, 624, 625, 629, 632, 662, 665, 674, 691, 698, 701], "few": [55, 84, 323, 352, 695, 704, 707, 709], "1m": [55, 323, 616], "displai": [55, 70, 84, 121, 323, 352, 388, 650, 693], "month": [55, 185, 190, 197, 323, 611, 616, 617, 620, 621, 630, 674], "typeerror": [55, 57, 58, 84, 126, 212, 217, 261, 314, 323, 325, 328, 344, 352, 393, 520, 675, 704], "datetimeindex": [55, 84, 323, 352, 674, 681], "date_rang": [55, 84, 127, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 314, 323, 352, 394, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 698], "2d": [55, 84, 323, 352, 652], "3d": [55, 84, 323, 352], "9223372036854775807": [56, 129, 324, 396, 698], "tabl": [57, 72, 112, 159, 160, 166, 167, 169, 261, 423, 429, 430, 491, 554, 660, 665, 691, 695, 698, 703, 706], "pyarrow": [57, 160, 261, 325, 424, 666, 667, 698], "doe": [57, 61, 74, 124, 156, 162, 166, 283, 314, 330, 425, 429, 465, 496, 542, 584, 642, 654, 659, 669, 675, 691, 692, 695, 699, 702, 703, 704, 709], "similar": [57, 94, 148, 166, 283, 412, 429, 542, 547, 670, 671, 673, 691, 701, 703, 704, 707, 709], "to_panda": [57, 698, 701, 703, 704, 707, 709], "work": [57, 132, 399, 441, 640, 641, 691, 693, 695, 696, 697, 698, 702, 703, 704, 705], "pa": [57, 261, 325], "record": [59, 94, 121, 167, 388, 430, 527, 665, 691], "recarrai": [59, 172], "ndim": 59, "greater": [60, 62, 71, 289, 329, 331, 559, 589, 675, 702], "as_index": [61, 330], "group_kei": [61, 330], "squeez": [61, 330], "group": [61, 121, 166, 169, 330, 388, 429, 441, 489, 537, 564, 568, 569, 570, 571, 573, 576, 577, 578, 580, 581, 582, 583, 584, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 658, 664, 666, 667, 691, 695, 699, 701, 704, 705, 707, 709], "mapper": [61, 124, 330], "involv": [61, 272, 330, 695], "some": [61, 73, 123, 266, 330, 339, 415, 473, 484, 535, 584, 674, 691, 692, 695, 698, 699, 703, 704, 706, 709], "combin": [61, 143, 179, 330, 456, 485, 525, 542, 543, 549, 564, 583, 608, 666, 667, 681, 691, 698, 706], "split": [61, 167, 255, 330, 430, 481, 528, 532, 541, 542, 552, 553, 665, 668, 681, 693, 698, 706], "larg": [61, 137, 330, 404, 662, 695, 701, 703], "amount": [61, 70, 330, 693, 695, 704], "notic": [61, 266, 330, 702, 704], "interpret": [61, 166, 330, 429, 497, 498, 542, 547, 662, 666, 667], "hierarch": [61, 89, 90, 95, 166, 177, 258, 330, 359, 360, 363, 429, 676, 695, 698], "particular": [61, 89, 90, 95, 161, 330, 359, 360, 363, 415, 484, 662, 691, 692, 693, 695, 703, 709], "relev": [61, 330, 691], "sql": [61, 94, 330, 698], "influenc": [61, 330, 706], "preserv": [61, 126, 283, 330, 393, 559, 611, 617, 630, 662, 707], "piec": [61, 330, 691, 693, 695], "dataframegroupbi": [61, 680], "about": [61, 70, 330, 589, 640, 641, 691, 694, 695, 698, 706], "390": [61, 330, 700], "350": [61, 330], "parrot": [61, 64, 128, 330, 334, 483], "370": [61, 330, 572], "anim": [61, 74, 312, 330, 344, 456], "380": [61, 330, 572], "375": [61, 330], "captiv": [61, 330], "wild": [61, 330], "from_arrai": [61, 224, 250, 330], "185": [61, 330], "210": [61, 330], "g1": [61, 330], "g2": [61, 330], "variou": [61, 330, 686, 691, 692, 693, 695], "lambda": [61, 330, 357, 564, 583, 584, 601, 608, 699, 701, 703, 704], "333333": [61, 122, 127, 136, 330, 389, 394, 403, 441, 589], "666667": [61, 182, 330, 444], "000000": [61, 75, 76, 104, 105, 127, 138, 330, 345, 346, 373, 374, 394, 405, 587, 589, 700, 703, 707], "murmur3": [63, 333], "hash": [63, 109, 333, 640], "md5": [63, 333], "murmurhash3": [63, 333], "120": [63, 333, 482], "1930516747": [63, 333], "422619251": [63, 333], "941520876": [63, 333], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 333], "947ca8d2c5f0f27437f156cfbfab0969": [63, 333], "d0580ef52d27c043c8e341fd5039b166": [63, 333], "330519225": [63, 333], "397962448": [63, 333], "1345834934": [63, 333], "57ce879751b5169c525907d5c563fae1": [63, 333], "948d6221a7c4963d4be411bcead7e32b": [63, 333], "fe061786ea286a515b772d91b0dfcd70": [63, 333], "quickli": [64, 334, 700], "your": [64, 123, 124, 334, 693, 698, 700, 704], "right": [64, 80, 94, 127, 132, 140, 220, 229, 236, 254, 255, 289, 307, 334, 394, 399, 406, 479, 493, 499, 523, 531, 538, 539, 543, 547, 549, 559, 650, 653, 670, 671, 672, 673, 701, 702], "tail": [64, 334], "allig": [64, 334], "bee": [64, 334, 525, 543, 549], "lion": [64, 128, 334, 494], "monkei": [64, 128, 334, 456, 494], "shark": [64, 334], "whale": [64, 334], "zebra": [64, 334], "view": [64, 162, 168, 334, 425, 432, 575, 691, 695, 705], "three": [64, 106, 112, 334, 485, 650, 660, 695, 700, 704, 706], "verbos": 70, "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 327], "print": [70, 124, 132, 173, 399, 434, 584, 651, 674, 700, 704, 708], "concis": 70, "usag": [70, 93, 362, 665, 691, 692, 696, 698, 704], "full": [70, 94, 166, 429, 601, 664, 693, 698, 700, 701, 704, 709], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 128, 205, 382, 395, 481, 491, 527, 601, 650, 692, 693, 695, 698, 700, 702, 703, 704, 707, 709], "further": 70, "process": [70, 173, 434, 698, 700, 703, 704], "switch": [70, 674], "truncat": [70, 641], "total": [70, 93, 362, 559, 616, 658, 661, 666, 702, 704], "alwai": [70, 101, 121, 137, 245, 283, 365, 388, 404, 520, 662, 692, 695, 703, 704, 706, 709], "never": [70, 469, 695, 704], "introspect": 70, "shown": [70, 494], "human": 70, "readabl": 70, "unit": [70, 167, 430, 446, 665, 674], "estim": [70, 296, 589], "made": [70, 162, 174, 266, 425, 560, 691, 699, 707], "assum": [70, 307, 483, 487, 535, 542, 547, 589, 652, 691, 693, 694, 695, 704], "consum": [70, 691, 704], "real": 70, "cost": [70, 692], "smaller": [70, 93, 492], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 642], "delta": [70, 151, 182, 414, 444, 446, 589, 604, 607, 647, 649], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 170, 248, 261, 301, 433, 681, 693, 695, 698, 704, 707], "130": 70, "byte": [70, 93, 362, 476, 557, 640, 655, 661, 662, 665, 666, 667, 668, 695, 706], "its": [70, 111, 160, 178, 286, 382, 674, 692, 693, 695, 696, 698, 706], "pipe": [70, 703], "content": [70, 166, 429, 520, 694, 695, 704], "io": [70, 642, 662, 666, 667, 681, 705], "stringio": [70, 662, 665, 668], "getvalu": 70, "mode": [70, 166, 429, 664, 691, 706], "special": [70, 203, 253, 455, 484, 508, 520, 641, 695, 702, 709], "fine": [70, 693], "tune": [70, 706], "random_strings_arrai": 70, "random": [70, 137, 171, 404, 589, 698, 700, 707, 709], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 169, 171], "999999": 70, "mb": [70, 655, 698], "num": [71, 698], "interleav": [72, 159, 423], "major": [72, 652, 709], "a1": [72, 489, 700], "a2": [72, 700], "a3": [72, 700], "b1": 72, "b2": [72, 489], "b3": 72, "linear": [73, 117, 339, 386, 580, 695, 700, 701], "limit_direct": [73, 339], "limit_area": [73, 339], "downcast": [73, 215, 339, 575, 675], "techniqu": [73, 339], "space": [73, 171, 339, 485, 520, 528, 529, 532, 542, 551, 662], "linearli": [73, 339], "unsort": [73, 339, 701], "lead": [73, 161, 339, 525, 543, 549, 589, 700, 701, 704], "erron": [73, 339], "num_leg": [74, 179], "num_w": [74, 179], "check": [74, 143, 225, 226, 227, 228, 229, 233, 234, 235, 258, 307, 344, 465, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 526, 556, 557, 670, 671, 672, 673, 692, 700, 709], "present": [74, 115, 116, 154, 384, 385, 419, 467, 520, 542, 547, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 641, 692, 694, 704], "leg": [74, 97], "wing": [74, 97], "separ": [74, 478, 485, 527, 528, 532, 541, 542, 547, 653, 668, 686, 691, 693, 695, 704], "spider": 74, "everyth": [75, 76, 89, 90, 95, 345, 346, 359, 360, 363, 456, 546, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609], "timedelta64": [75, 76, 104, 105, 345, 346, 373, 374, 446, 635, 636, 637, 638, 639, 706, 707], "charact": [75, 76, 104, 105, 345, 346, 373, 374, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 497, 498, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 528, 529, 531, 535, 536, 540, 543, 547, 549, 550, 551, 552, 554, 555, 556, 557, 559, 640, 662, 668, 692, 695], "incas": [75, 76, 104, 105, 345, 346, 373, 374], "1939": [75, 76, 104, 105, 345, 346, 373, 374], "05": [75, 76, 104, 105, 127, 185, 187, 188, 189, 190, 193, 196, 197, 201, 286, 345, 346, 373, 374, 394, 611, 613, 614, 615, 616, 617, 629, 630, 633, 670, 671, 672, 673, 674, 698], "27": [75, 76, 104, 105, 345, 346, 373, 374, 481, 620, 622, 623, 698], "joker": [75, 76, 104, 105, 345, 346, 373, 374], "32": [75, 76, 104, 105, 133, 345, 346, 373, 374, 400], "float64index": [75, 76, 104, 105, 146, 217, 345, 346, 373, 374, 410], "left": [80, 94, 124, 127, 133, 140, 178, 220, 229, 236, 254, 255, 289, 307, 394, 400, 406, 479, 493, 499, 525, 531, 535, 538, 539, 540, 549, 554, 559, 650, 670, 671, 672, 673, 691, 698, 701], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 236, 456, 666, 667], "outer": [80, 94, 236, 456, 667], "suffic": [80, 704], "avoid": [80, 283, 691, 692, 695, 706, 709], "conflict": 80, "ensur": [80, 162, 168, 425, 432, 483, 667, 691, 692, 693, 698], "now": [80, 653, 691, 695, 698, 700, 704], "due": [80, 584, 662, 692, 698, 699, 701, 704], "lack": 80, "five": [81, 642], "int64index": [81, 146, 207, 212, 215, 224, 235, 236, 239, 240, 242, 244, 248, 250, 260, 291, 410, 484, 672, 695], "fisher": [82, 83, 147, 350, 351, 411], "unbias": [82, 83, 147, 182, 296, 350, 351, 411, 444, 589], "kurtosi": [82, 350], "sampl": [82, 83, 147, 151, 294, 350, 351, 411, 414, 428, 698], "obtain": [82, 83, 350, 351, 471, 558, 642, 709], "definit": [82, 83, 273, 350, 351, 370, 436, 589], "normal": [82, 83, 137, 151, 179, 182, 184, 296, 350, 351, 404, 414, 441, 444, 529, 589, 604, 607, 666, 667, 700], "1999999999999904": [82, 83, 350, 351], "kurt": [83, 351], "final": [84, 352, 666, 667, 695, 704], "dai": [84, 171, 184, 187, 188, 189, 192, 193, 201, 314, 352, 446, 447, 452, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 633, 635, 637, 639, 674, 704, 707], "cond": [88, 183, 358, 445], "dimens": [88, 101, 183, 358, 370, 445], "collaps": [89, 90, 95, 359, 360, 363], "attempt": [89, 90, 95, 205, 212, 266, 359, 360, 363, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609, 653, 662, 674, 692, 699, 704], "17": [91, 127, 132, 140, 286, 361, 394, 399, 406, 481, 698, 700, 707], "unpivot": [92, 659], "wide": [92, 659, 691, 693, 704], "format": [92, 161, 165, 166, 167, 169, 171, 173, 429, 430, 434, 517, 518, 556, 557, 558, 575, 632, 659, 662, 665, 674, 692, 693, 695, 697, 698, 699, 700, 701, 702, 706], "id_var": [92, 659], "value_var": [92, 659], "var_nam": [92, 659], "value_nam": [92, 659], "whose": [93, 112, 560, 653, 660, 691, 695], "ones": [93, 464], "5000": 93, "astyp": [93, 226, 234, 681, 698], "head": [93, 698, 700, 704, 709], "40000": 93, "storag": [93, 161, 662, 705], "mani": [93, 372, 375, 589, 682, 691, 693, 695, 698, 701, 702, 704, 706, 709], "repeat": [93, 159, 423, 484, 681], "5008": 93, "43": [93, 638, 704], "give": [93, 272, 691, 692, 695, 700, 703], "rest": [93, 518, 546, 551, 693], "necessarili": [93, 177, 676], "left_on": 94, "right_on": 94, "left_index": [94, 701], "right_index": [94, 701], "_x": 94, "_y": 94, "databas": 94, "join": [94, 178, 456, 662, 681, 697, 701, 705, 709], "intersect": [94, 456], "leftsemi": 94, "leftanti": 94, "exact": [94, 117, 137, 256, 386, 404, 650, 672, 674], "opposit": 94, "were": [94, 463, 553, 698, 704], "overlap": [94, 141, 178, 456, 491, 494, 641, 650], "determinist": [94, 709], "df_a": [94, 698], "vals_a": [94, 698], "df_b": [94, 698], "vals_b": [94, 698], "df_merg": 94, "sort_valu": [94, 681, 698], "typecast": 94, "ambigu": [94, 184], "exactli": [94, 670, 671, 672, 673, 692, 703], "extend": [94, 650, 691, 698, 704], "semi": [94, 589], "anti": 94, "modulo": [96, 130, 364, 397], "4294967295": [96, 130, 364, 397], "appear": [97, 121, 327, 372, 375, 388, 485, 559], "often": [97, 680, 691, 701, 704, 707], "search": [97, 166, 266, 429, 468, 470, 483, 493, 494, 499, 536, 538, 539, 691, 697, 707, 709], "don": [97, 107, 124, 179, 365, 379, 441, 567, 588, 665, 691, 701, 704, 707], "value_count": [97, 698], "speci": [97, 242], "bird": [97, 128, 456], "mammal": [97, 128], "arthropod": 97, "multipli": [98, 366, 704], "largest": [103, 372], "priorit": [103, 704], "popul": [103, 106, 700, 704], "59000000": [103, 106, 372, 375], "65000000": [103, 106, 372, 375], "434000": [103, 106, 372, 375], "337000": [103, 106, 372, 375], "11300": [103, 106, 372, 375], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 155, 420, 702], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "itali": [103, 106, 372, 375], "franc": [103, 106, 372, 375], "malta": [103, 106, 372, 375], "maldiv": [103, 106, 372, 375], "brunei": [103, 106, 372, 375], "iceland": [103, 106, 372, 375], "nauru": [103, 106, 372, 375], "tuvalu": [103, 106, 372, 375], "anguilla": [103, 106, 372, 375], "smallest": [106, 121, 375, 388, 470, 675], "retriev": [106, 496, 664], "ti": [106, 121, 256, 388], "resolv": 106, "revers": [106, 372, 375, 698], "distinct": [107, 344, 695], "npart": 109, "keep_index": [109, 139], "partit": [109, 171, 655, 667, 681, 698], "fill_method": [110, 381], "percent": [110, 381], "sequenti": [110, 381, 703, 704, 709], "form": [110, 112, 121, 159, 224, 250, 381, 388, 423, 507, 510, 511, 512, 513, 655, 660, 666, 667, 695, 701], "handl": [110, 161, 166, 167, 178, 312, 381, 415, 429, 430, 456, 542, 547, 664, 675, 681, 694, 695, 697, 706], "consecut": [110, 125, 240, 381, 392, 480, 527, 528, 662], "increment": [110, 381, 655], "data_keyword": [111, 382, 601], "chain": [111, 382], "groupbi": [111, 382, 681, 695, 697, 698, 699, 701, 705, 709], "write": [111, 161, 165, 166, 167, 169, 171, 382, 429, 430, 655, 657, 662, 664, 692, 694, 697, 698, 700, 704, 706], "arg2": [111, 382], "arg3": [111, 382], "sai": [111, 382, 496, 704], "suppos": [111, 382], "reshap": [112, 150, 660, 681, 700], "organ": [112, 660, 693, 694], "rearrang": [112, 660], "exponenti": [114, 134, 383, 401], "min_count": [115, 116, 154, 384, 385, 419, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609], "fewer": [115, 116, 154, 384, 385, 419, 576, 577, 578, 595, 596, 597, 598, 602, 605, 609], "5040": [115, 116, 384, 385], "q": [117, 118, 386, 580, 632], "interpol": [117, 118, 386, 580], "higher": [117, 118, 386, 580, 665, 695, 706], "midpoint": [117, 386, 580], "nearest": [117, 118, 256, 386, 580], "desir": [117, 118, 158, 245, 386, 422, 580, 662, 665, 692, 704, 709], "li": [117, 118, 386, 580], "j": [117, 118, 156, 386, 487, 704], "approxim": [117, 386], "One": [117, 123, 166, 167, 185, 190, 197, 272, 390, 429, 430, 611, 617, 630, 691, 699, 700, 702, 707], "notabl": [117, 148, 412, 699], "doesn": [117, 137, 171, 404, 520, 698, 699, 707], "under": [117, 667, 686, 691, 693, 694, 695, 698, 699], "cp": [117, 641, 698, 700, 704, 707, 709], "55": [117, 240, 704], "local_dict": [119, 698], "local": [119, 655, 661, 662, 664, 665, 666, 667, 668, 693, 698], "filter": [119, 491, 666, 667, 691, 697, 698, 709], "search_dat": [119, 698], "search_date2": 119, "averag": [121, 388, 704], "na_opt": [121, 388], "pct": [121, 388], "direct": [121, 388, 581, 665, 693, 698, 706], "dens": [121, 388, 700], "lowest": [121, 388, 493, 499, 538, 695], "increas": [121, 232, 307, 340, 342, 375, 388, 662, 674], "bottom": [121, 388, 662], "rtruediv": [122, 389], "002778": [122, 136, 389, 403], "005556": [122, 136, 389, 403], "250000": [122, 136, 389, 403], "toler": [123, 219, 256, 266, 390, 670, 671, 672, 673], "conform": [123, 236, 390, 693], "unless": [123, 415, 542, 547, 691], "either": [123, 133, 137, 149, 170, 178, 218, 395, 400, 404, 413, 433, 470, 478, 483, 653, 661, 662, 665, 666, 667, 668, 693, 698, 700, 704, 706], "even": [123, 162, 283, 365, 425, 662, 665, 691, 692, 704, 707], "convent": [123, 124, 127, 394], "index_label": 123, "column_label": 123, "_highly_": 123, "clarifi": [123, 124], "intent": [123, 124], "fiction": [123, 496], "firefox": 123, "chrome": 123, "safari": 123, "ie10": 123, "konqueror": 123, "http_statu": [123, 699], "404": [123, 700], "301": [123, 698], "response_tim": 123, "new_index": 123, "iceweasel": 123, "comodo": 123, "dragon": 123, "retain": [123, 390, 492, 699, 707], "user_ag": 123, "alter": [124, 171, 239, 391], "throw": [124, 167, 430, 692, 706], "index_mapp": 124, "columns_mapp": 124, "highli": [124, 667, 709], "overwrit": [124, 178, 262], "postfix": 124, "repetit": [125, 240, 392], "newli": [125, 240, 392, 395, 581, 695], "to_replac": [126, 393], "regex": [126, 393, 483, 484, 489, 494, 526, 535, 537, 542, 547], "valueerror": [126, 141, 166, 167, 178, 393, 429, 430, 464, 499, 520, 539, 650, 693, 700, 703], "mismatch": [126, 393, 672, 673], "actual": [126, 393, 520, 692, 695, 698, 704, 707], "exhibit": [126, 393, 693], "silent": [126, 393], "rule": [127, 394, 691], "close": [127, 184, 204, 254, 255, 289, 394, 446, 655, 664, 693, 695, 709], "loffset": [127, 394], "start_dai": [127, 394], "dateoffset": [127, 394], "bin": [127, 307, 394, 441, 650], "interv": [127, 225, 226, 227, 228, 229, 233, 234, 254, 255, 307, 394, 650, 695, 703], "edg": [127, 132, 307, 394, 399, 493, 499, 538, 539, 650, 692], "bucket": [127, 394], "closest": [127, 394], "nanosecond": [127, 167, 171, 394, 430, 447, 635, 665, 674], "millisecond": [127, 167, 394, 430, 447, 635, 665, 674], "minut": [127, 394, 447, 635, 674, 697, 705], "2001": [127, 197, 202, 314, 394, 611, 616, 617, 619, 630, 634, 701], "1t": [127, 394], "06": [127, 185, 187, 188, 189, 201, 394, 611, 613, 614, 615, 616, 632, 633, 635, 636, 637, 639, 698], "downsampl": [127, 394], "3t": [127, 394], "23": [127, 394, 481, 483, 507, 508, 515, 698, 702, 707], "57": [127, 394, 704], "upsampl": [127, 394], "asfreq": [127, 394], "price": [127, 394, 496, 704], "19": [127, 394, 481, 589, 695, 698, 700], "volum": [127, 394], "60": [127, 394, 698], "week_start": [127, 394], "7d": [127, 394], "29": [127, 195, 394, 481, 620, 622, 623, 626, 628, 698, 709], "28": [127, 394, 481, 616, 620, 622, 623, 698], "63": [127, 394, 703], "col_level": [128, 659], "col_fil": 128, "reset": [128, 282, 395, 456], "try": [128, 395, 665, 675, 691, 692], "389": 128, "80": [128, 572], "max_spe": 128, "from_tupl": [128, 262, 263, 266, 395, 698, 699], "fly": [128, 662, 665], "run": [128, 505, 506, 507, 508, 514, 515, 516, 519, 640, 641, 692, 693, 694, 698, 700, 704, 709], "window": [132, 399, 681, 697, 705, 709], "center": [132, 399, 531, 559, 681, 692, 704], "win_typ": [132, 399], "baseindex": [132, 205, 208, 399, 460, 695], "As": [132, 166, 399, 429, 691, 692, 695, 701, 704], "oppos": [132, 399, 698], "fix": [132, 166, 185, 190, 197, 357, 399, 429, 611, 617, 630, 695, 701, 702], "accommod": [132, 399], "get_window_bound": [132, 399], "20190101": [132, 399], "2019": [132, 242, 399], "01t09": [132, 399], "000": [132, 399, 505, 658, 662, 663, 666, 667], "math": [132, 399, 642, 704], "49": [132, 399, 704], "64": [132, 399, 695, 704], "81": [132, 399, 698, 704], "some_func": [132, 399], "sqrt": [132, 399, 704], "And": [132, 399, 704], "decim": [133, 167, 400, 430, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 662, 703, 705, 709], "half_even": [133, 400], "half_up": [133, 400], "affect": [133, 169, 400, 691, 706], "67": [133, 400, 700], "66": [133, 400], "subtract": [135, 152, 402, 417], "359": [135, 152, 153, 402, 417, 418], "179": [135, 152, 153, 402, 417, 418], "frac": [137, 404], "random_st": [137, 404], "reproduc": [137, 404], "ident": [137, 173, 404, 434, 456, 542, 547, 606, 670, 671, 672, 673, 709], "fraction": [137, 404, 515], "disallow": [137, 404], "state": [137, 262, 404], "uniform": [137, 404, 650], "probabl": [137, 404], "unlik": [137, 404, 693, 703, 706, 709], "randomst": [137, 404], "seed": [137, 404, 698, 704], "stat": [137, 404, 681, 693, 705], "randomli": [137, 404, 698], "slow": [137, 404, 691, 703], "achiev": [137, 404, 558, 703], "especi": [137, 404, 691, 703], "advis": [137, 404, 696], "826087": [138, 405], "913043": [138, 405], "043478": [138, 405], "map_index": 139, "map_siz": 139, "scatter": 139, "destin": [139, 704], "conserv": 139, "find": [140, 205, 256, 406, 484, 494, 499, 538, 681, 691, 692, 693, 704], "maintain": [140, 406, 692, 698], "hypothet": [140, 406], "monoton": [140, 231, 232, 256, 266, 271, 307, 340, 341, 342, 406], "wrong": [140, 406], "correct": [140, 406, 665, 704], "values_df": [140, 406], "reinterpret": [142, 241, 407], "lightweight": [142, 241, 407], "append": [143, 166, 429, 478, 542, 547, 653], "becom": [143, 700], "too": [143, 494, 691, 704], "hello": [146, 410, 476, 477, 481, 485, 495, 523, 529, 530, 533, 538, 540, 545, 552, 553, 661, 665], "37037": [147, 411], "sort_remain": [148, 412], "quick": [148, 412], "builtin": [148, 412, 661, 662, 665, 666, 667, 668], "vector": [148, 289, 412, 415], "prescrib": 150, "ddof": [151, 182, 414, 444, 589, 604, 607, 647, 649], "deviat": [151, 266, 414, 604, 647, 692, 699, 701], "freedom": [151, 182, 414, 444, 589, 604, 607, 647, 649], "divisor": [151, 182, 414, 444, 604, 607, 647, 649], "290994": [151, 414], "squar": [155, 420], "249": [155, 420, 698], "llama": 156, "cdf": 156, "unsupport": [158, 245, 422, 565, 566, 574, 575, 579, 581, 585, 586, 594, 600, 642, 703, 704], "preserve_index": 160, "save": [160, 171, 655, 691, 695], "path_or_buf": [161, 166, 167, 429, 430, 664, 665], "sep": [161, 478, 520, 528, 532, 541, 662], "na_rep": [161, 478], "encod": [161, 166, 167, 320, 429, 430, 556, 557, 640, 641, 653, 664, 665, 695], "compress": [161, 166, 167, 169, 171, 429, 430, 655, 662, 665, 706], "line_termin": 161, "storage_opt": [161, 662], "csv": [161, 662, 681, 705, 706], "file": [161, 165, 166, 167, 169, 171, 429, 430, 499, 539, 640, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 691, 694, 695, 698, 702, 706], "path": [161, 165, 166, 167, 169, 171, 429, 430, 640, 655, 658, 661, 662, 663, 664, 665, 666, 667, 668, 691, 692, 693, 698, 706], "char": [161, 531, 662], "delimit": [161, 167, 430, 492, 520, 528, 536, 542, 547, 552, 553, 662, 665, 668], "utf": [161, 482, 556, 557, 665, 695], "scheme": [161, 691], "sens": [161, 662, 695], "connect": [161, 662], "port": [161, 662, 693], "usernam": [161, 662], "password": [161, 662], "etc": [161, 655, 662, 680, 690, 691, 693, 702, 703], "url": [161, 542, 556, 557, 655, 661, 662, 665, 666, 667, 668], "urllib": [161, 662], "s3": [161, 282, 507, 655, 661, 662, 665, 666, 667, 668], "gc": [161, 662], "fsspec": [161, 662, 666, 667], "open": [161, 164, 166, 246, 289, 427, 429, 441, 652, 656, 661, 662, 664, 665, 666, 667, 668, 693], "pleas": [161, 166, 357, 429, 662, 698, 704], "read_csv": [161, 698, 701], "quote_nonnumer": [161, 662], "filenam": [161, 167, 430, 655, 658, 662, 663, 666, 667, 691], "set_index": [161, 177, 236, 676, 703], "na_valu": [162, 168, 425, 432, 662], "asarrai": [162, 168, 425, 432, 700, 704], "strictli": [162, 425, 691, 695], "dlpack": [164, 246, 427, 652, 700, 706], "tensor": [164, 246, 427, 641, 652], "dmlc": [164, 246, 427, 652], "pycapsul": [164, 246, 427, 652], "pointer": [164, 246, 427, 652], "cudf_obj": [164, 246, 427], "pycapsule_obj": [164, 246, 427, 652], "encapsul": [164, 246, 427, 652, 695], "feather": [165, 166, 429, 663, 681, 706], "read_feath": 165, "hdf5": [166, 429, 681], "hdfstore": [166, 429, 664, 681], "hdf": [166, 429, 664, 683, 706], "applic": [166, 429, 589, 681, 695], "hold": [166, 225, 226, 227, 228, 229, 233, 234, 429], "relat": [166, 429, 681, 706], "individu": [166, 218, 429, 465, 481, 483, 695, 707], "r": [166, 415, 429, 481, 489, 516, 529, 554, 558, 664], "delet": [166, 429], "read": [166, 429, 658, 661, 662, 663, 664, 665, 666, 667, 668, 695, 698, 702, 706], "alreadi": [166, 429, 456, 529, 695, 700, 701], "fast": [166, 429, 665, 695, 698, 701, 709], "searchabl": [166, 429], "pytabl": [166, 429, 681], "wors": [166, 429], "data_column": [166, 429], "disk": [166, 429, 662, 665, 702], "complevel": [166, 429], "disabl": [166, 429, 662, 706], "complib": [166, 429], "zlib": [166, 429], "lzo": [166, 429], "bzip2": [166, 429], "blosc": [166, 429], "v0": [166, 429], "compressor": [166, 429], "blosclz": [166, 429], "lz4": [166, 429], "lz4hc": [166, 429], "snappi": [166, 169, 171, 429, 655, 706], "zstd": [166, 169, 171, 429, 706], "issu": [166, 429, 691, 701, 704], "fletcher32": [166, 429], "checksum": [166, 429], "written": [166, 169, 171, 429, 655, 691, 693, 704], "strict": [166, 429, 664, 670, 671, 672, 673, 674], "decod": [166, 429, 556, 664, 665], "read_hdf": [166, 429], "to_parquet": [166, 429, 667, 698, 702, 706], "parquet": [166, 171, 429, 666, 667, 681, 701, 705, 706], "to_feath": [166, 429, 663], "json": [167, 430, 496, 665, 681, 691, 706], "unix": [167, 430, 674], "orient": [167, 430, 665], "just": [167, 430, 546, 665, 691, 695, 700, 702, 704], "schema": [167, 430, 658, 665, 667], "compon": [167, 430, 495, 691, 693, 695], "date_format": [167, 430, 632], "epoch": [167, 430, 674], "iso": [167, 193, 430, 626], "convers": [167, 430, 433, 681, 695, 700], "iso8601": [167, 430], "double_precis": [167, 430], "force_ascii": [167, 430], "ascii": [167, 430, 477, 529, 550, 551, 555, 557], "date_unit": [167, 430, 665], "govern": [167, 430], "precis": [167, 430, 650, 665, 702, 709], "microsecond": [167, 430, 447, 451, 635, 638, 639, 665], "default_handl": [167, 430], "handler": [167, 430, 661, 662, 665, 666, 667, 668], "receiv": [167, 430, 675], "incorrect": [167, 430], "gzip": [167, 430, 662, 665], "bz2": [167, 430, 665], "xz": [167, 430, 665], "read_json": [167, 430], "fname": [169, 658], "orc": [169, 666, 681, 705, 706], "enable_statist": 169, "stripe_size_byt": 169, "stripe": [169, 171, 666], "67108864": 169, "64mb": 169, "stripe_size_row": 169, "row_index_strid": 169, "10000": [169, 700], "cols_as_map_typ": 169, "listdtyp": [169, 466, 487, 665, 695, 702], "read_orc": [169, 667, 698, 706], "struct": [169, 174, 665, 681, 695, 697, 703, 705, 706, 709], "experiment": [169, 704, 706], "reliabl": 169, "datatyp": [169, 675], "nullabl": [170, 183, 433, 445, 691, 695, 699, 702, 709], "root": [171, 655, 692], "directori": [171, 655, 667, 691, 694, 698], "partition_offset": 171, "engin": [171, 483, 484, 489, 494, 526, 661, 665, 666, 667, 697], "much": [171, 691, 692, 695, 698], "faster": [171, 465, 666, 674, 691, 704], "partition_col": [171, 655], "partition_file_nam": 171, "uuid4": 171, "hex": [171, 497, 498, 511, 556, 557], "rowgroup": [171, 655], "page": [171, 655, 681, 694, 697, 706, 709], "metadata_file_path": 171, "blob": [171, 656], "footer": [171, 656], "file_path": [171, 698], "int96_timestamp": 171, "int96": 171, "julian": 171, "midnight": 171, "row_group_size_byt": 171, "134217728": 171, "128mb": 171, "row_group_size_row": 171, "max_page_size_byt": 171, "uncompress": 171, "524288": 171, "512kb": 171, "max_page_size_row": 171, "20000": 171, "return_metadata": [171, 656], "read_parquet": [171, 658, 698, 702, 706], "intern": [173, 184, 205, 434, 446, 662, 670, 671, 672, 673, 691, 692, 694, 695, 696, 706], "transpar": [173, 434], "dure": [173, 434, 542, 547, 675, 692], "n0": [173, 434], "n1": [173, 434], "n2": [173, 434], "compos": [174, 692, 695, 702, 704], "pivot": [177, 676], "innermost": [177, 471, 666, 667, 676], "filter_func": 178, "There": [178, 196, 313, 629, 692, 700, 706, 709], "coercibl": [178, 439], "notimplementederror": [178, 483, 532, 535, 541, 558, 692, 695], "proport": 179, "frequent": [179, 441, 695], "occur": [179, 441, 483, 692, 698], "ant": [179, 525, 543, 549], "varianc": [182, 444, 589, 607, 649], "falsi": [183, 445, 699], "treatment": [183, 445, 699], "gsr": [183, 445, 699, 702], "tz": 184, "dayfirst": [184, 662, 674], "yearfirst": [184, 674], "immut": [184, 203, 253, 254, 271, 446, 455], "sliceabl": [184, 203, 253, 446, 455], "pytz": 184, "timezon": 184, "dateutil": [184, 674], "tzfile": 184, "pars": [184, 662, 665, 674, 675, 698, 700], "year": [184, 187, 189, 192, 193, 196, 242, 613, 615, 619, 624, 625, 626, 629, 674, 704], "1970": 184, "000000001": 184, "000000002": 184, "000000003": 184, "000000004": 184, "l": [185, 190, 197, 481, 491, 611, 617, 630, 693], "me": [185, 190, 197, 492, 536, 611, 617, 630], "alias": [185, 190, 197, 611, 617, 630, 691], "gindex": [185, 190, 193, 196], "2020": [185, 190, 193, 196, 629], "1999": [185, 190, 193, 196, 629], "41": [185, 483], "datetime_index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202], "int16index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 672], "int16": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 314, 612, 613, 614, 615, 616, 618, 627, 628, 631, 633, 634, 675, 702, 706], "365": [187, 189, 192, 613, 615, 619], "leap": [187, 189, 192, 613, 615, 619], "366": [187, 189, 192, 613, 615, 619], "2016": [187, 188, 189, 201, 613, 614, 615, 633, 674], "2017": [187, 188, 189, 201, 613, 614, 615, 624, 625, 633, 674], "week": [188, 193, 201, 614, 626, 633], "mondai": [188, 201, 614, 633], "sundai": [188, 201, 614, 633], "59": [190, 658, 662, 663, 666, 667, 704], "belong": [192, 196, 307, 619, 629, 691], "29th": [192, 619], "februari": [192, 619], "intercalari": [192, 619], "four": [192, 619, 691, 706], "400": [192, 207, 619, 700], "datafram": [193, 199, 205, 236, 244, 246, 247, 257, 258, 259, 260, 262, 263, 264, 267, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 284, 285, 292, 293, 297, 298, 299, 300, 302, 308, 309, 310, 311, 313, 316, 317, 318, 322, 323, 324, 329, 330, 331, 333, 334, 337, 339, 345, 346, 350, 351, 352, 353, 355, 356, 358, 359, 360, 363, 364, 366, 367, 369, 371, 373, 374, 382, 383, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 437, 441, 442, 443, 444, 445, 447, 453, 456, 489, 494, 532, 541, 542, 547, 560, 564, 572, 573, 575, 576, 577, 578, 581, 583, 584, 587, 589, 595, 596, 597, 598, 601, 602, 605, 606, 608, 609, 626, 635, 643, 644, 645, 646, 647, 648, 649, 652, 653, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 674, 676, 680, 681, 682, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709], "accord": [193, 357, 626, 691, 695], "8601": [193, 626], "52": 193, "januari": [195, 196, 628, 629], "decemb": [195, 196, 628, 629], "march": [196, 629], "april": [196, 629], "june": [196, 629], "third": [196, 260, 629], "juli": [196, 629], "septemb": [196, 629], "fourth": [196, 629], "octob": [196, 629], "int8index": [196, 672], "int8": [196, 320, 629, 675, 702, 706], "dt_idx": 197, "58": [197, 611, 617, 630, 704], "dame": [200, 249, 454], "2002": [202, 619, 634], "basic": [203, 205, 253, 283, 455, 564, 583, 608, 698, 703, 704], "pure": [203, 253, 455, 692, 695], "__init__": [204, 254, 693], "tupleize_col": 205, "best": [205, 266, 528, 641, 691, 692, 694, 698, 699, 709], "fit": [205, 372, 375, 698], "design": [205, 258, 691, 692, 694, 697, 701], "factori": [205, 695], "re": [205, 483, 484, 489, 494, 526, 535, 545, 642, 698, 700, 704], "intim": 205, "familiar": [205, 691, 693, 694, 695, 697], "uint64": [205, 455, 702, 706], "uint64index": 205, "has_dupl": 205, "from_arrow": [205, 709], "get_loc": [205, 699], "collect": [207, 357, 474, 693, 698, 703, 709], "incompar": 212, "caught": 212, "catch": [212, 692], "idx1": [212, 224, 250], "idx2": [212, 224, 250], "nulls_are_equ": 213, "obj": [216, 456, 670, 671, 672, 673], "pdi": 217, "primarili": [218, 691], "stringindex": [218, 245, 320, 325, 349, 483, 532, 541, 698], "bound": [220, 255, 289, 469, 704], "leftmost": 220, "past": [220, 668, 704], "rightmost": [220, 650], "ix": 220, "getitem": 220, "red": [224, 250, 258, 264], "blue": [224, 250, 258, 264], "is_integ": [225, 226, 227, 229, 233, 234], "is_float": [225, 226, 228, 229, 233, 234], "is_numer": [225, 226, 227, 228, 229, 234], "is_object": [225, 226, 227, 228, 229, 233], "is_categor": [225, 227, 228, 229, 233, 234], "is_interv": [225, 226, 227, 228, 233, 234], "categoricalindex": [226, 291, 650, 681], "is_boolean": [226, 227, 228, 229, 233, 234], "watermelon": [226, 228, 234], "orang": [226, 234], "appl": [226, 228, 233, 234, 675], "peter": 226, "victor": 226, "elisabeth": 226, "mar": 226, "mango": [228, 234], "intervalindex": [229, 650, 681], "monotonic_increas": 230, "is_monotonic_increas": [230, 340], "decreas": [231, 341, 372], "cold": 233, "sought": 235, "is_contain": 235, "return_index": [236, 244], "join_index": 236, "lexicograph": [236, 266, 699], "lh": 236, "rh": 236, "renamed_index": 239, "abl": [242, 700, 701], "partial": [242, 704], "renam": [242, 465], "quarter": [242, 622, 623], "cobra": 242, "frozenlist": 242, "itself": [244, 532, 541, 695], "sorted_index": 244, "1000": [244, 559, 695, 700, 704, 709], "allow_fil": 245, "green": [250, 263], "break": [255, 692], "pad": [256, 529, 542, 547, 559, 575, 641, 681, 695], "backfil": [256, 575], "distanc": [256, 486, 487], "broken": 256, "prefer": [256, 666, 667, 674, 691, 692], "larger": [256, 503, 504, 641, 662, 666, 698, 706], "inexact": 256, "satisfi": [256, 691], "equat": 256, "unique_index": 256, "monotonic_index": 256, "abbc": 256, "non_monotonic_index": 256, "abcb": 256, "numeric_unique_index": 256, "sortord": 258, "from_fram": [259, 260, 263, 264, 267, 698], "cartesian": [262, 263, 264, 691], "hi": [262, 698], "precip": 262, "nj": 262, "explicit": [262, 271, 704], "explicitli": [263, 642, 662, 693, 698, 700, 707, 709], "color": [263, 264], "purpl": 263, "effort": [266, 699], "fail": [266, 693, 706], "situat": [266, 584, 699, 709], "mi": 266, "non_monotonic_non_unique_idx": 266, "coerc": [266, 674, 675, 699, 700, 709], "unus": [271, 457, 465], "homogen": 271, "hashabl": 272, "been": [272, 695, 701, 706], "overridden": 272, "1d": [272, 327, 620, 622, 623, 642, 652, 695], "overrid": [272, 695], "extensiondtyp": [272, 709], "iteritem": 272, "to_list": 272, "tolist": 272, "to_append": 282, "convert_dtyp": 283, "cach": [283, 674], "recompil": 283, "incur": [283, 692], "overhead": [283, 691], "nest": [283, 467, 471, 705], "decor": 283, "someth": [283, 532, 693, 698, 704], "upcast": 283, "deriv": [283, 357], "lag": 286, "autocorrel": 286, "1438853844": 286, "9647548490": 286, "csf1": 287, "inclus": [289, 491, 650], "wherev": [289, 695], "gt": [289, 698, 704, 707], "lt": [289, 698, 704, 707], "alic": [289, 704], "bob": [289, 704], "carol": 289, "ev": 289, "anna": 289, "daniel": 289, "accessor": [291, 314, 681, 701], "Be": 291, "parent": [291, 695, 698], "reorder_categori": 291, "remove_categori": 291, "set_categori": 291, "abcd": [291, 480, 546], "as_ord": [291, 459], "as_unord": 291, "ser1": [294, 296], "62": [294, 296], "ser2": [294, 296], "51": [294, 296], "20454263717316112": 294, "015750000000000004": 296, "uint8": [301, 653, 675, 698, 706], "3rd": 306, "ind": [307, 424, 662], "beetl": [312, 344], "hippo": [312, 344], "discard": [312, 662], "kept": [313, 375, 691, 692], "datetimelik": [314, 681], "1h": 314, "hour": [314, 447, 635], "na_sentinel": 320, "chunkedarrai": 325, "singlecolumnfram": [325, 695], "pd_categor": 326, "set_mask": 327, "skip": [327, 661, 662, 666, 675], "mark": [327, 692], "bit": [327, 695], "_column": 327, "seriesgroupbi": [330, 680], "turn": [344, 695], "therefor": [344, 465, 559, 691, 692, 695], "width": [357, 479, 523, 531, 540, 558, 559, 650, 695], "rabbit": [357, 494], "kitten": [357, 486], "puppi": [357, 486], "countries_popul": [372, 375], "montserrat": [372, 375], "5200": [372, 375], "quant_index": 386, "renamed_seri": 391, "numeric_seri": 391, "come": [395, 692, 693], "bar": [395, 693], "baz": [395, 535, 693], "mimic": [415, 693], "interfac": [415, 695, 700, 704], "stai": 415, "pattern": [415, 483, 484, 488, 489, 494, 522, 535, 542, 547, 548, 695], "inspir": 415, "stringr": [415, 558], "packag": [415, 691, 692, 698, 700, 701, 704, 707], "lib": [424, 698, 707], "stringarrai": 424, "0x7f796b0e7600": 424, "0x7f796b0e7750": 424, "rel": [441, 670, 671, 672, 673, 691], "half": 441, "divid": [441, 691], "500000": [441, 587, 589], "166667": 441, "996": [441, 700], "1132223": 446, "2023232": 446, "342234324": 446, "4234324": 446, "001132223": 446, "002023232": 446, "004234324": 446, "clear": [456, 695], "df1": [456, 655, 671, 698, 707], "letter": [456, 518, 551, 557], "df3": 456, "horizont": 456, "df4": 456, "polli": 456, "georg": [456, 532, 541, 704], "new_categori": [457, 464, 465], "seriesorindex": [457, 458, 459, 463, 464, 465, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "relationship": [462, 589, 695], "old": [463, 464, 465, 692], "reorder": [464, 465], "action": 465, "simultan": 465, "specialis": 465, "hand": 465, "surpris": 465, "leaf": 466, "genericindex": [467, 468, 469, 470, 471, 472, 473, 474, 475, 483, 695], "search_kei": [468, 470], "extract": [469, 495, 537, 545, 561, 681], "indexerror": 469, "possibli": 471, "flat": 471, "criterion": 473, "lists_indic": 474, "ef": [476, 480], "bye": [476, 698], "thank": [476, 481, 704], "sentenc": [477, 524, 542, 547, 550, 551, 554, 555], "swapcas": [477, 524, 551, 554, 555, 681], "friend": 477, "goodby": [477, 481, 552, 553], "stringcolumn": [478, 695], "again": [478, 704], "aa": [478, 534], "bb": [478, 522, 534], "dd": [478, 662], "fillchar": [479, 523, 531, 540], "whitespac": [479, 492, 505, 506, 507, 508, 510, 512, 514, 515, 516, 519, 523, 525, 529, 530, 531, 532, 536, 540, 541, 542, 543, 547, 549, 552, 553, 662], "as_list": 480, "gram": [480, 527, 528], "bigram": [480, 527], "ngram": [480, 528, 681], "str_seri": [480, 527, 641], "efgh": 480, "xyz": [480, 482, 527], "bc": [480, 487], "cd": 480, "fg": 480, "gh": 480, "xy": 480, "yz": 480, "bcd": 480, "efg": 480, "fgh": 480, "world": [481, 485, 495, 523, 529, 530, 538, 540, 552, 553, 665], "k": [481, 520, 575, 665, 699], "\u00e9ee": 482, "97": 482, "121": 482, "122": 482, "50089": 482, "101": [482, 641, 698], "98": 482, "99": [482, 496, 529], "pat": [483, 484, 488, 489, 494, 522, 526, 535, 537, 542, 547, 548], "flag": [483, 484, 489, 494, 526, 535, 700], "regular": [483, 484, 488, 489, 494, 526, 535, 542, 547, 548, 693, 705], "multilin": [483, 484, 489, 494, 526], "liter": [483, 484, 522, 535, 542, 547, 665], "anyth": [483, 532, 535, 541], "dotal": [483, 484, 489, 494, 526], "mous": 483, "hous": 483, "og": 483, "digit": [483, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 519, 557, 691, 702], "might": [483, 700, 704], "35": [483, 635, 636, 637, 639, 658, 662, 663, 666, 667], "escap": [484, 522], "aaba": [484, 698], "baca": [484, 698], "caba": [484, 698], "dollar": 484, "sign": [484, 559, 675, 702], "aab": 484, "ca": 484, "token": [485, 492, 527, 528, 529, 530, 536, 552, 640, 641, 681], "measur": [486, 487, 533, 589, 691], "levenshtein": [486, 487], "edit": [486, 487], "www": 486, "cuelog": 486, "com": [486, 556, 557], "blog": 486, "doggi": 486, "kitti": 486, "pup": 486, "dogi": 486, "tell": 487, "symmetr": 487, "diagon": [487, 700], "cba": 487, "nativ": [488, 692], "bat": [488, 548], "bear": [488, 548], "captur": [489, 691], "subject": [489, 704], "c3": 489, "repl": [490, 491, 500, 535, 537, 546], "alphanumer": [490, 505, 506, 507, 508, 510, 512, 514, 515, 516, 519], "pear": 490, "plum": 490, "72": [490, 698], "100k": 490, "unicod": [491, 508, 515, 529, 554], "ordin": [491, 554], "maketran": [491, 554], "helper": [491, 554, 695, 700], "caus": 491, "undefin": [491, 641, 704], "aeiou": 491, "0123456789": [491, 500], "aei": 491, "ou": 491, "456": [491, 513, 658, 662, 663, 666, 667], "_": [491, 492, 500, 520, 522, 523, 527, 528, 536, 540, 557, 653], "___ou": 491, "aei__": 491, "0123___789": 491, "min_token_length": 492, "theme": [492, 536, 693], "music": [492, 536], "substr": [493, 499, 538, 539, 544, 545], "fulli": [493, 499, 538, 539, 698, 702, 704], "failur": [493, 538], "ddb": [493, 499, 539], "word": [494, 518, 524, 550, 555, 640, 641], "json_path": 496, "allow_single_quot": 496, "strip_quotes_from_single_str": 496, "missing_fields_as_nul": 496, "jsonpath": 496, "quot": [496, 662, 665], "doubl": [496, 665], "strip": [496, 525, 543, 681], "book": [496, 527, 528, 641], "author": 496, "nigel": 496, "ree": 496, "titl": [496, 518, 524, 550, 555, 681], "centuri": 496, "95": 496, "evelyn": 496, "waugh": 496, "sword": 496, "honour": 496, "1234": [497, 498], "abcdef": [497, 498], "1a2": [497, 498], "cafe": [497, 498], "htoi": [497, 681], "4660": [497, 498], "11259375": [497, 498], "418": [497, 498], "51966": [497, 498], "traceback": [499, 539], "recent": [499, 539], "stdin": [499, 539], "modul": [499, 539, 681, 691, 692, 696, 698, 709], "abb": [499, 539], "abcdefghij": 500, "ab_cdefghij": 500, "01_23456789": 500, "abcdefghij_": 500, "0123456789_": 500, "ip": [501, 502, 693], "168": [501, 502], "212336897": [501, 502], "167772161": [501, 502], "ip2int": [502, 681], "conson": [503, 504], "troubl": [503, 504, 695], "vowel": 504, "isalpha": [505, 507, 508, 510, 512, 514, 515, 516, 519, 681, 704], "isdigit": [505, 506, 507, 510, 511, 512, 514, 515, 516, 519, 681, 704], "isnumer": [505, 506, 507, 508, 510, 511, 512, 514, 516, 519, 681], "isdecim": [505, 506, 508, 510, 511, 512, 514, 515, 516, 519, 681, 704], "alphabet": [505, 506, 507, 508, 510, 512, 514, 515, 516, 519], "isinteg": [505, 506, 507, 508, 510, 514, 515, 516, 519, 681], "isfloat": [505, 506, 507, 508, 511, 512, 514, 515, 516, 519, 681], "islow": [505, 506, 507, 508, 510, 512, 515, 516, 519, 681, 704], "lowercas": [505, 506, 507, 508, 510, 512, 514, 515, 516, 518, 519, 524, 550, 551, 555, 640], "isspac": [505, 506, 507, 508, 510, 512, 514, 515, 519, 681, 704], "isupp": [505, 506, 507, 508, 510, 512, 514, 515, 516, 681, 704], "uppercas": [505, 506, 507, 508, 510, 512, 514, 515, 516, 518, 519, 524, 550, 551, 555], "one1": [505, 506, 515], "punctuat": [505, 529], "isalnum": [506, 507, 508, 510, 512, 514, 515, 516, 519, 681, 704], "\u00b3": [507, 508, 515], "\u2155": [507, 508, 515], "superscript": 508, "subscript": 508, "123213": 510, "123": [510, 513, 525, 532, 541, 549, 635, 636, 637, 638, 639, 658, 662, 663, 666, 667], "0001": 510, "234": [510, 635, 636, 637, 638, 639, 698, 702], "plain": 510, "text": [510, 512, 640, 641, 658, 661, 662, 663, 666, 667, 668, 681, 696], "123def": 511, "0x2d3": 511, "plan": [512, 692, 704], "ipv4": 513, "address": [513, 693, 695], "127": 513, "255": 513, "leopard": [514, 518, 519], "golden": [514, 518, 519], "eagl": [514, 518, 519], "snake": [514, 518, 519], "quantiti": 515, "20201101": 517, "192011": 517, "18200111": 517, "2120": 517, "string_na_rep": 520, "sep_na_rep": 520, "themselv": [520, 693], "interven": 520, "suppli": [520, 653, 704], "ghi": [520, 662, 702], "a_b_c": 520, "d_e_f": 520, "g_h_i": 520, "a_b_k": 520, "c_d": 520, "esc": 522, "ddbc": 522, "b_": 522, "wildcard": [522, 695, 698], "ai_": 523, "__": [523, 540], "capit": [524, 550, 551, 554, 555, 681], "to_strip": [525, 543, 549], "trail": [525, 543, 549], "newlin": [525, 543, 549, 692], "rstrip": [525, 549, 681], "ac": 526, "my": 527, "favorit": 527, "my_favorit": 527, "hhh": 527, "abc_def": 527, "def_xyz": 527, "xyz_hhh": 527, "white": 528, "this_i": 528, "is_th": 528, "best_book": 528, "do_low": [529, 640], "subword_token": 529, "around": [529, 532, 542, 547, 692, 695, 704], "p": 529, "symbol": 529, "cjk": 529, "cc": [529, 534], "cf": 529, "do_lower_cas": [529, 640, 641], "accent": 529, "h\u00e9llo": 529, "tworld": 529, "\u0103\u0107c\u0117\u00f1ted": 529, "up": [531, 542, 547, 611, 617, 674, 691, 692, 696, 698, 704, 709], "rjust": [531, 559, 681], "ljust": [531, 559, 681], "zfill": [531, 681], "prepend": [531, 559], "carib": 531, "tiger": 531, "rpartit": [532, 681], "linda": [532, 541], "van": [532, 541], "der": [532, 541], "berg": [532, 541], "pitt": [532, 541], "river": [532, 541], "999": [532, 541, 698, 700], "porter": 533, "stemmer": 533, "super": 533, "ccc": 534, "fuz": 535, "ba": 535, "bao": 535, "insid": [536, 642, 662, 668, 693, 703, 704], "back": [537, 662, 666, 667, 695, 698, 706, 709], "ref": [537, 564, 583, 608], "templat": 537, "section": [537, 546, 691, 692, 693, 694, 698, 703, 704, 707, 709], "a543": 537, "z756": 537, "av453": 537, "zv576": 537, "rfind": [539, 681, 704], "_________hello": 540, "___________rapid": 540, "version": [542, 547, 680, 692, 698, 700, 707], "tutori": [542, 698], "throughout": [542, 547], "slightli": [542, 662, 680, 691], "complex": [542, 642, 693, 695, 704], "lstrip": [543, 549, 681], "slice_replac": [544, 681], "koala": 544, "fox": 544, "chameleon": 544, "oala": 544, "ox": 544, "hameleon": 544, "ko": 544, "fo": 544, "ch": 544, "kaa": 544, "fx": 544, "caeen": 544, "kl": 544, "cm": 544, "ello": 545, "abdc": 546, "until": [546, 698], "xc": 546, "xdc": 546, "xcde": 546, "axc": 546, "axd": 546, "rsplit": [547, 681], "endswith": [548, 681, 704], "unmap": 554, "untouch": 554, "swapc1s": 554, "low": [554, 704], "nt": 554, "nc": 554, "swapc1": 554, "No": [556, 557, 641, 650, 695, 705], "2fb": [556, 557], "2fd": [556, 557], "20f": [556, 557], "2c6": [556, 557], "3a": [556, 557], "2f": [556, 557], "2frapid": [556, 557], "2fstart": [556, 557], "2fmedium": [556, 557], "medium": [556, 557, 650], "paragraph": 558, "expand_tabsbool": 558, "replace_whitespac": 558, "drop_whitespac": 558, "break_long_word": 558, "break_on_hyphen": 558, "str_wrap": 558, "expand_tab": 558, "nwrap": 558, "nto": 558, "reach": [559, 695], "longer": [559, 693, 694], "001": 559, "children": [561, 695], "agg": [564, 606, 608, 698, 701, 703], "f1": [564, 583, 608], "quantil": [564, 583, 608, 699, 703], "__name__": [564, 583, 608], "q0": [564, 583, 608], "f2": [564, 583, 608], "score": 572, "90": [572, 698], "hole": 575, "gap": [575, 695], "introduc": [581, 692], "indetermin": 581, "mult": 584, "redund": [584, 699], "pairwis": [587, 589], "kendal": 587, "val1": [587, 589], "val2": [587, 589], "val3": [587, 589], "385727": 587, "714575": 587, "bia": 589, "comparison": [589, 691, 692, 697, 705, 707], "understand": 589, "member": [589, 692], "invert": 589, "matric": [589, 700], "en": [589, 642], "wikipedia": 589, "wiki": 589, "estimation_of_covariance_matric": 589, "833333": 589, "round": [611, 617], "dt": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 686, 698, 701], "datetime_seri": [612, 613, 614, 615, 618, 627, 628, 631, 633, 634, 707], "2013": 619, "1y": 619, "2003": [619, 704], "2005": [619, 701], "2007": 619, "2008": 619, "2009": [619, 626], "2011": 619, "2012": [619, 674, 707], "2021": 626, "serindex": 626, "to_datetim": 626, "53": 626, "dt_sr": 630, "weekday_seri": 632, "12231312123": [635, 636, 637, 638, 639], "1231231231": [635, 636, 637, 638, 639], "1123236768712": [635, 636, 637, 638, 639], "2135656": [635, 636, 637, 638, 639], "3244334234": [635, 636, 637, 638, 639], "141": [635, 636, 637, 639], "231": [635, 636, 637, 638, 639], "13000": [635, 636, 637, 639], "48": [635, 636, 637, 639, 709], "712": [635, 636, 637, 638, 639], "656": [635, 636, 637, 638, 639], "37": [635, 636, 637, 639, 707], "123000": [637, 639], "231000": [637, 639], "712000": [637, 639], "656000": [637, 639], "234000": [637, 639], "231312123": 638, "231231231": 638, "236768712": 638, "002135656": 638, "244334234": 638, "48912": 639, "21631": 639, "36768": 639, "2135": 639, "47534": 639, "hash_fil": 640, "bert": [640, 641], "subword": [640, 641], "vocabulari": [640, 641], "pretrain": [640, 641], "21x": 640, "util": [640, 641, 681, 697, 698], "hash_vocab_util": [640, 641], "hash_vocab": [640, 641], "max_length": 641, "max_num_row": 641, "add_special_token": 641, "return_tensor": 641, "return_token_type_id": 641, "batch": 641, "alloc": [641, 662, 695, 704], "temporari": 641, "twice": [641, 691], "classif": 641, "model": [641, 695, 698], "do_not_trunc": 641, "huggingfac": 641, "pt": 641, "tf": 641, "tensorflow": 641, "pytorch": 641, "torch": 641, "input_id": 641, "fed": 641, "attention_mask": 641, "attend": 641, "vocab": 641, "txt": 641, "voc_hash": 641, "cudf_token": 641, "tokenizer_output": 641, "1142": 641, "1110": 641, "1103": 641, "102": [641, 698], "1436": 641, "1520": 641, "featur": [642, 691, 692, 693, 708], "readthedoc": 642, "cudapysupport": 642, "cmath": 642, "libcudf": [642, 694, 695], "ptx": 642, "sin": 642, "co": 642, "tan": 642, "lgamma": 642, "global": [642, 708], "known": [642, 674], "count_if_gt_3": 642, "retbin": 650, "include_lowest": 650, "segment": 650, "go": [650, 691, 693, 695, 697, 700, 704], "continu": [650, 668, 700], "criteria": [650, 664], "extens": [650, 662], "done": [650, 698], "994": [650, 700], "bad": 650, "unspecifi": 651, "fortran": [652, 700], "prefix_sep": 653, "dummy_na": 653, "spars": [653, 705], "drop_first": 653, "hot": 653, "dummi": 653, "value1": 653, "value2": 653, "a_value1": 653, "a_value2": 653, "a_non": 653, "a_1": 653, "a_2": 653, "a_nan": 653, "a_nul": 653, "max_file_s": 655, "file_name_prefix": 655, "exceed": 655, "writer": [655, 683, 691, 706], "gb": 655, "mandatori": 655, "context": 655, "cw": 655, "write_t": 655, "manual": [655, 693], "num_row": [658, 661, 666, 691], "num_row_group": 658, "row_group": [658, 667], "num1": [658, 662, 663, 666, 667], "13t12": [658, 662, 663, 666, 667], "5451": [658, 662, 663, 666, 667], "14t12": [658, 662, 663, 666, 667], "5784": [658, 662, 663, 666, 667], "789": [658, 662, 663, 666, 667], "15t18": [658, 662, 663, 666, 667], "6117": [658, 662, 663, 666, 667], "myvarnam": 659, "myvalnam": 659, "filepath_or_buff": [661, 662, 666, 667, 668], "skiprow": [661, 662, 666], "load": [661, 662, 663, 665, 666, 667, 697, 698], "avro": [661, 681, 706], "pathlib": [661, 662, 664, 665, 666, 667, 668, 698], "py": [661, 662, 664, 665, 666, 667, 668, 691, 698, 707], "_path": [661, 662, 664, 665, 666, 667, 668], "localpath": [661, 662, 664, 665, 666, 667, 668], "ftp": [661, 662, 665, 666, 667, 668], "bytesio": [661, 666, 667], "parser": [661, 665, 666, 667], "remot": [661, 662, 666, 667, 693], "pandavro": 661, "pandas_df": 661, "to_avro": 661, "index_col": 662, "usecol": 662, "mangle_dupe_col": 662, "true_valu": 662, "false_valu": 662, "skipinitialspac": 662, "skipfoot": 662, "keep_default_na": 662, "na_filt": 662, "skip_blank_lin": 662, "parse_d": 662, "thousand": [662, 700], "linetermin": 662, "quotechar": 662, "doublequot": 662, "comment": [662, 693], "delim_whitespac": 662, "byte_rang": [662, 665, 668], "use_python_file_object": [662, 666, 667], "bytes_per_thread": 662, "comma": 662, "seper": 662, "recogn": 662, "qnan": 662, "detect": [662, 665, 691, 705], "unusu": 662, "mm": 662, "european": 662, "decompress": [662, 665, 706], "gz": [662, 665], "quote_minim": 662, "quote_al": 662, "quote_non": 662, "altogeth": [662, 695], "arrow": [662, 666, 667, 695, 697, 705], "pythonfil": [662, 666, 667], "abstractbufferedfil": [662, 666, 667], "throughput": 662, "decompos": 662, "transfer": [662, 706], "pool": 662, "256_000_000": 662, "to_csv": [662, 698, 706], "fp": 662, "__fspath__": 664, "protocol": 664, "term": [664, 665, 691, 704, 709], "to_hdf": 664, "auto": [665, 693], "keep_quot": 665, "cudf_experiment": 665, "to_json": 665, "typ": 665, "recov": 665, "convert_ax": 665, "proper": 665, "convert_d": 665, "datelik": 665, "_at": 665, "_time": 665, "keep_default_d": 665, "precise_float": 665, "strtod": 665, "py3": 665, "jsonread": 665, "wrap": [665, 681, 692, 698, 704], "json_str": 665, "v1": 665, "v2": 665, "k1": 665, "use_index": 666, "timestamp_typ": 666, "predic": [666, 667], "disjunct": [666, 667], "dnf": [666, 667], "conjunct": [666, 667, 692, 704], "AND": [666, 667], "outermost": 666, "OR": [666, 667], "notat": [666, 667], "deprec": [666, 694], "seek": 666, "to_orc": [666, 706], "strings_to_categor": 667, "use_pandas_metadata": 667, "categorical_partit": 667, "open_file_opt": 667, "gdf_categori": 667, "gdf_string": 667, "discourag": 667, "open_parquet_fil": 667, "deactiv": 667, "precach": 667, "precache_opt": 667, "open_file_func": 667, "read_parquet_metadata": 667, "datasourc": 668, "baseexcept": 669, "check_dtyp": [670, 671, 673], "check_column_typ": [670, 671], "equiv": [670, 671, 672, 673], "check_less_precis": [670, 672, 673], "check_exact": [670, 671, 672, 673], "check_datetimelike_compat": [670, 671, 673], "check_categor": [670, 671, 672, 673], "check_category_ord": [670, 673], "rtol": [670, 671, 672, 673], "1e": [670, 671, 672, 673], "atol": [670, 671, 672, 673], "columnbas": [670, 671, 672, 673, 695], "intend": [670, 671, 672, 673, 695, 704], "inferred_typ": [670, 671, 672, 673], "idl": [670, 671, 673], "check_datetime_like_compat": [670, 671, 673], "appropri": [670, 671, 672, 673, 693, 695], "assert": [670, 671, 672, 673], "messag": [670, 671, 672, 673, 692], "check_index_typ": [671, 673], "check_frame_typ": 671, "check_nam": [671, 672, 673], "by_block": 671, "check_lik": 671, "assertionerror": [671, 672, 673], "hitch": [671, 672, 673], "check_ord": 672, "int32index": 672, "id1": 672, "id2": 672, "check_series_typ": 673, "sr1": 673, "sr2": 673, "utc": 674, "infer_datetime_format": 674, "eg": 674, "bug": [674, 692], "strftime": 674, "denot": 674, "off": [674, 693, 698, 706], "10x": 674, "succeed": 674, "assembl": 674, "abbrevi": 674, "plural": 674, "2015": 674, "1490195805": 674, "22t15": 674, "000000000": 674, "1490195805433502912": 674, "1780": 674, "20t01": 674, "494253056": 674, "polici": [675, 692], "notifi": 675, "encount": [675, 692], "unsign": [675, 702], "down": [675, 691], "decoupl": 675, "3e3": 675, "3000": 675, "cudf": [680, 681, 690, 692, 694, 695, 696, 699, 702, 703, 705, 706, 708], "usual": [680, 691], "permit": 680, "restrict": 680, "publicli": 681, "namespac": [681, 686, 693], "merg": [681, 691, 695, 698, 701, 709], "timedeltaindex": 681, "deal": 681, "roll": [681, 695, 701, 705], "subwordtoken": [681, 697], "stringmethod": 681, "byte_count": 681, "character_ngram": 681, "character_token": 681, "code_point": 681, "detoken": 681, "edit_dist": 681, "edit_distance_matrix": 681, "filter_alphanum": 681, "filter_charact": 681, "filter_token": 681, "findal": 681, "get_json_object": 681, "hex_to_int": 681, "ip_to_int": 681, "is_conson": 681, "is_vowel": 681, "isempti": 681, "ishex": 681, "isipv4": 681, "istimestamp": 681, "istitl": [681, 704], "ngrams_token": 681, "normalize_charact": 681, "normalize_spac": 681, "porter_stemmer_measur": 681, "replace_token": 681, "replace_with_backref": 681, "rindex": 681, "slice_from": 681, "token_count": 681, "translat": [681, 695], "url_decod": 681, "url_encod": 681, "listmethod": 681, "structmethod": 681, "explod": 681, "get_opt": [681, 696], "set_opt": [681, 708], "describe_opt": [681, 708], "variant": 682, "thereof": 682, "reader": [683, 698, 706], "acceler": [683, 694, 697, 698, 704, 706], "cpu": [683, 698, 701, 706, 709], "futur": [683, 691, 692, 694, 698, 704, 707], "goal": [691, 692, 694], "repositori": 691, "pytest": 691, "plugin": [691, 693], "framework": 691, "seamless": 691, "experi": [691, 693, 704], "develop": [691, 692, 693, 695, 696, 697, 700, 704, 705], "public": [691, 693], "former": [691, 693], "macro": 691, "vi": 691, "\u00e0": 691, "help": [691, 692, 693], "quantifi": 691, "minim": [691, 692, 693], "bind": [691, 695], "focu": [691, 700], "footprint": 691, "At": [691, 694, 695, 704], "stabil": [691, 692], "free": 691, "bench_class": 691, "eval": 691, "bench_datafram": 691, "hierarchi": [691, 695], "bench_frame_or_index": 691, "trigger": 691, "veri": [691, 700, 703, 704], "characterist": 691, "_intern": 691, "_apply_boolean_mask": 691, "bench_dataframe_intern": 691, "broadli": 691, "speak": 691, "live": [691, 692], "bench_io": 691, "discov": 691, "test_": 691, "bench_": 691, "instal": [691, 693, 704], "termin": 691, "autosav": 691, "xxxx_": 691, "xxxx": 691, "yyyi": 691, "command": [691, 693], "short": [691, 693, 698], "param": 691, "config": [691, 692], "hard": 691, "advertis": [691, 701], "littl": [691, 695], "natur": [691, 707], "meaning": 691, "care": 691, "interchang": [691, 695], "demonstr": [691, 693, 704], "bench_foo": 691, "six": 691, "did": [691, 704], "interest": 691, "cover": [691, 693, 694, 704], "baselin": [691, 698], "coverag": 691, "tweak": 691, "debug": [691, 692, 695], "num_col": 691, "aspect": 691, "want": [691, 693, 698, 700, 704, 707], "quantit": 691, "easi": [691, 693, 700, 701], "environ": [691, 693, 706], "cudf_benchmarks_use_panda": 691, "easili": [691, 693, 697], "simpli": [691, 693, 695, 700], "remap": 691, "why": 691, "critic": 691, "ci": [691, 698], "significantli": 691, "cycl": [691, 692], "balanc": 691, "cudf_benchmarks_debug_onli": 691, "advantag": [691, 700], "redefin": [691, 704], "crucial": 691, "although": 691, "suit": 691, "guidelin": [691, 693], "spy": 691, "svg": 691, "invoc": 691, "tool": [691, 692], "strength": 691, "somewhat": 691, "workflow": [691, 692, 697, 698, 705], "encourag": [691, 693, 700, 701], "discuss": [691, 693, 694, 695, 698, 707], "hood": [691, 693, 694, 695, 698], "magic": 691, "pytest_cas": 691, "programat": 691, "unambigu": 691, "classnam": 691, "_dtype_": 691, "_nulls_": 691, "_cols_": 691, "_rows_": 691, "dataframe_dtype_int_rows_100": 691, "cumbersom": [691, 695], "moreov": 691, "embed": 691, "problem": [691, 704], "essenti": [691, 695, 704], "dataframe_dtype_int_cols_6": 691, "focus": 692, "high": [692, 695], "overview": [692, 697, 705], "practic": [692, 694, 695, 698], "subpackag": 692, "_lib": 692, "emploi": 692, "linter": 692, "manag": [692, 695, 704], "pre": [692, 704], "commit": 692, "strongli": [692, 693], "prior": 692, "yaml": 692, "repo": 692, "truth": 692, "lint": [692, 693], "flake8": 692, "complianc": 692, "black": 692, "formatt": 692, "isort": 692, "mypi": 692, "static": 692, "hint": 692, "difficult": [692, 701, 704], "pydocstyl": [692, 693], "docstr": [692, 694], "pyproject": 692, "toml": 692, "setup": [692, 698], "cfg": 692, "project": [692, 695, 701], "parti": 692, "addition": [692, 694, 695, 701], "hook": 692, "overal": [692, 694], "releas": [692, 704], "prevent": 692, "unexpect": 692, "sure": [692, 700, 704], "emit": 692, "futurewarn": [692, 698, 707], "opportun": 692, "thing": [692, 701, 704], "new_foo": 692, "signal": 692, "deprecationwarn": 692, "hidden": 692, "__main__": 692, "analog": [692, 695], "sometim": [692, 698, 700, 704], "latest": 692, "reason": [692, 693, 695, 706], "exorbit": 692, "runtim": [692, 704], "premium": 692, "believ": 692, "perfect": 692, "infeas": [692, 695], "undesir": 692, "consult": 692, "team": 692, "assess": 692, "proce": [692, 698, 700, 704], "substanti": 692, "power": [692, 693], "friendli": 692, "profil": [692, 694], "expos": [692, 695, 700, 704, 706], "pxd": [692, 695], "declar": [692, 695], "pyx": 692, "thin": [692, 704], "layer": [692, 694, 698], "rare": 692, "benefit": [692, 693], "happen": [692, 704, 707], "quit": 692, "justifi": 692, "benchmark": [692, 694, 697], "suffici": [692, 693], "mention": [692, 695, 701, 704], "logic_error": 692, "cuda_error": 692, "runtimeerror": 692, "payload": 692, "brittl": 692, "compromis": 692, "adopt": 692, "strategi": 692, "roadmap": 692, "diversifi": 692, "inlin": 693, "restructuredtext": 693, "myst": 693, "sphinx": 693, "contribut": [693, 694, 697], "lieu": 693, "explan": [693, 696], "commonli": [693, 709], "brief": 693, "_strongly_": 693, "numpydoc": 693, "scenario": 693, "getter": 693, "That": 693, "inherit": [693, 695], "codebas": 693, "pull": 693, "aim": 693, "api_doc": 693, "rst": 693, "discover": 693, "autosummari": 693, "api1": 693, "api2": 693, "render": 693, "layout": [693, 695], "stub": 693, "currentmodul": 693, "autofunct": 693, "autodoc": 693, "approach": [693, 695, 704], "facilit": [693, 695], "bodi": 693, "api_nam": 693, "dedic": 693, "superset": 693, "markdown": 693, "syntax": [693, 704], "link": 693, "anchor": 693, "instruct": 693, "nb": 693, "straightforward": 693, "navig": [693, 705], "shell": 693, "server": 693, "Then": 693, "web": 693, "browser": 693, "localhost": 693, "8000": 693, "machin": [693, 698, 701], "visibl": 693, "network": 693, "ssh": 693, "local_port": 693, "remote_port": 693, "remote_ip": 693, "enforc": [693, 698], "regard": 693, "main": [694, 695, 704], "dask_cudf": [694, 698, 701], "cudf_kafka": 694, "custreamz": 694, "robustli": 694, "guidanc": 694, "topic": 694, "cython": 694, "publish": 694, "advanc": [694, 700, 701, 704], "serv": 695, "face": 695, "bridg": 695, "review": 695, "role": 695, "requisit": 695, "tradeoff": 695, "tie": 695, "holist": 695, "diagram": 695, "princip": 695, "eponym": 695, "tabular": [695, 698, 704], "columnar": [695, 697, 698], "meanwhil": 695, "abstract": 695, "materi": 695, "preliminari": 695, "let": [695, 700, 704], "dive": 695, "deeper": 695, "surmis": 695, "diamond": 695, "simpler": [695, 704], "flatten": 695, "ve": [695, 698, 704], "highlight": [695, 704], "concret": [695, 704], "eventu": 695, "almost": 695, "rewrit": 695, "alon": 695, "reimplement": 695, "behav": 695, "instanti": 695, "unfortun": 695, "mimick": 695, "__new__": 695, "tree": 695, "masquerad": 695, "stack": 695, "glue": 695, "own": [695, 706], "semant": 695, "apach": [695, 697, 698], "conduc": 695, "concept": [695, 698], "extent": 695, "interoper": [695, 697, 705], "simplifi": 695, "numericalcolumn": 695, "datetimecolumn": 695, "decis": 695, "4000": 695, "sizeof": 695, "128": 695, "chees": 695, "preexist": 695, "knowledg": [695, 704], "structdtyp": [695, 702], "decimaldtyp": 695, "intervaldtyp": 695, "contigu": [695, 700], "rmm": 695, "devicebuff": 695, "interact": [695, 698, 704], "explanatori": 695, "column_view": 695, "table_view": 695, "question": [695, 704], "trivial": 695, "descent": 695, "whole": 695, "fact": [695, 707], "act": 695, "reduct": [695, 701], "scan": 695, "bypass": 695, "straight": 695, "resampl": 695, "composit": 695, "explain": 696, "_register_opt": 696, "yield": [696, 698, 709], "fixtur": 696, "clean": 696, "scientist": 697, "program": 697, "dask": [697, 705], "introduct": 698, "gear": 698, "mainli": 698, "smooth": [698, 705], "cluster": [698, 701], "enough": [698, 701, 704], "comfort": [698, 704], "spread": [698, 701], "portion": [698, 704], "borrow": 698, "adapt": [698, 704], "cheatsheet": 698, "from_cudf": 698, "npartit": [698, 701], "thread_load": 698, "cuh": 698, "jitifi": 698, "thread_stor": 698, "ddf": 698, "dask_gdf": 698, "met": 698, "cudf_compar": 698, "dask_cudf_compar": 698, "isin": 698, "gdf1": 698, "rand": [698, 707], "082654": 698, "967955": 698, "399417": 698, "441425": 698, "784297": 698, "793582": 698, "070303": 698, "271711": 698, "gdf2": 698, "opt": [698, 707], "conda": [698, 704, 707], "env": [698, 707], "python3": [698, 707], "site": [698, 707], "column_accessor": 698, "251": 698, "343382": 698, "003700": 698, "20043": 698, "581614": 698, "907812": 698, "101512": 698, "24179": 698, "224180": 698, "var": [698, 703], "666666666666666": 698, "6666666666666667": 698, "map_partit": [698, 701], "add_ten": 698, "progress": 698, "ds2": 698, "restor": 698, "post": [698, 703], "ddf_a": 698, "ddf_b": 698, "paradigm": 698, "agg_col1": 698, "agg_col2": 698, "54": 698, "73": 698, "date_df": 698, "986051": 698, "232034": 698, "397617": 698, "103839": 698, "date_ddf": 698, "grade": 698, "dgdf": 698, "to_numpi": 698, "to_arrow": [698, 709], "example_output": 698, "mkdir": 698, "foo_dask": 698, "star": 698, "temp_parquet": 698, "example_fil": 698, "cudf_root": 698, "orc_fil": 698, "testorcfil": 698, "test1": 698, "boolean1": 698, "byte1": 698, "short1": 698, "int1": 698, "long1": 698, "float1": 698, "double1": 698, "bytes1": 698, "string1": 698, "middl": 698, "1024": 698, "65536": 698, "2048": 698, "100000000": 698, "chani": 698, "spark": 698, "lazi": 698, "moment": 698, "graph": 698, "delai": 698, "activ": 698, "background": [698, 704], "system": 698, "finish": 698, "downstream": [698, 700], "contract": 698, "upstream": 698, "snippet": 698, "localcudaclust": 698, "worker": 698, "beyond": 698, "scope": [698, 704], "client": 698, "dask_cuda": 698, "2022": 698, "preload": 698, "info": 698, "235": 698, "248": 698, "291": 698, "292": 698, "10000000": 698, "ddf2": 698, "2000000": 698, "8000000": 698, "9999999": 698, "nvidia": 698, "smi": 698, "fri": 698, "oct": 698, "495": 698, "bu": 698, "disp": 698, "volatil": 698, "uncorr": 698, "ecc": 698, "fan": 698, "perf": 698, "pwr": 698, "cap": 698, "mig": 698, "tesla": 698, "v100": 698, "pcie": 698, "00000000": 698, "26c": 698, "p0": 698, "32w": 698, "250w": 698, "1469mib": 698, "32510mib": 698, "27c": 698, "33w": 698, "307mib": 698, "29c": 698, "2122mib": 698, "25c": 698, "2140mib": 698, "85": 698, "2362mib": 698, "gi": 698, "pid": 698, "twenti": 698, "800": [698, 700], "sleep": 698, "1873mib": 698, "711mib": 698, "2526mib": 698, "2544mib": 698, "2768mib": 698, "proceed": 698, "ll": [698, 700, 704], "ddf1": 698, "randint": [698, 709], "spent": 698, "results_ddf": 698, "sooner": 698, "had": 698, "doneandnotdonefutur": 698, "fad33f693247f2c0369c2556fa8a5fd2": 698, "not_don": 698, "notebook": [700, 704], "introductori": 700, "algebra": 700, "timeit": 700, "__version__": 700, "cupy_from_dlpack": 700, "from_dlpack": 700, "fromdlpack": 700, "as_gpu_matrix": 700, "500": 700, "arr_cupi": 700, "to_dlpack": 700, "to_cupi": 700, "194": 700, "\u00b5": 700, "dev": 700, "638": 700, "637": 700, "501": 700, "1001": 700, "502": 700, "1002": 700, "9997": 700, "10497": 700, "10997": 700, "9998": 700, "10498": 700, "10998": 700, "9999": 700, "10499": 700, "10999": 700, "__cuda_array_interface__": [700, 704], "leverag": [700, 704, 709], "cola_cupi": 700, "93": 700, "528": 700, "216": 700, "203": 700, "norm": 700, "reshaped_arr": 700, "197": 700, "198": 700, "199": 700, "201": 700, "202": 700, "397": 700, "398": 700, "399": 700, "401": 700, "402": 700, "597": 700, "598": 700, "599": 700, "9400": 700, "9401": 700, "9402": 700, "9597": 700, "9598": 700, "9599": 700, "9600": 700, "9601": 700, "9602": 700, "9797": 700, "9798": 700, "9799": 700, "9800": 700, "9801": 700, "9802": 700, "603": 700, "804": 700, "1005": [700, 704], "1206": 700, "1407": 700, "1608": 700, "1809": 700, "2211": 700, "2412": 700, "2613": 700, "2814": 700, "3015": 700, "3216": 700, "3417": 700, "3618": 700, "3819": 700, "4020": 700, "4221": 700, "4422": 700, "4623": 700, "4824": 700, "5025": 700, "5226": 700, "5427": 700, "5628": 700, "5829": 700, "6030": 700, "6231": 700, "6432": 700, "6633": 700, "6834": 700, "7035": 700, "7236": 700, "7437": 700, "7638": 700, "7839": 700, "8040": 700, "8241": 700, "8442": 700, "8643": 700, "8844": 700, "9045": 700, "9246": 700, "9447": 700, "9648": 700, "9849": 700, "linalg": 700, "577306": 700, "967739": 700, "easiest": [700, 704], "beforehand": 700, "reshaped_df": 700, "282": 700, "190": 700, "191": 700, "192": 700, "193": 700, "195": 700, "196": 700, "204": 700, "205": 700, "206": 700, "207": 700, "208": 700, "209": 700, "391": 700, "392": 700, "393": 700, "394": 700, "395": 700, "396": 700, "403": 700, "405": 700, "406": 700, "407": 700, "408": 700, "409": 700, "590": 700, "591": 700, "592": 700, "593": 700, "594": 700, "595": 700, "596": 700, "600": 700, "601": 700, "602": 700, "604": 700, "605": 700, "606": 700, "607": 700, "608": 700, "609": 700, "790": 700, "791": 700, "792": 700, "793": 700, "794": 700, "795": 700, "796": 700, "797": 700, "798": 700, "799": 700, "801": 700, "802": 700, "803": 700, "805": 700, "806": 700, "807": 700, "808": 700, "809": 700, "990": 700, "991": 700, "992": 700, "993": 700, "995": 700, "997": [700, 704], "998": 700, "isfortran": 700, "fortran_arr": 700, "asfortranarrai": 700, "224": 700, "todlpack": 700, "47": 700, "ecosystem": [700, 704], "isn": 700, "matur": 700, "hundr": 700, "wouldn": 700, "previous": 700, "new_arr": 700, "19900": 700, "59900": 700, "99900": 700, "139900": 700, "179900": 700, "219900": 700, "259900": 700, "299900": 700, "339900": 700, "379900": 700, "419900": 700, "459900": 700, "499900": 700, "539900": 700, "579900": 700, "619900": 700, "659900": 700, "699900": 700, "739900": 700, "779900": 700, "819900": 700, "859900": 700, "899900": 700, "939900": 700, "979900": 700, "1019900": 700, "1059900": 700, "1099900": 700, "1139900": 700, "1179900": 700, "1219900": 700, "1259900": 700, "1299900": 700, "1339900": 700, "1379900": 700, "1419900": 700, "1459900": 700, "1499900": 700, "1539900": 700, "1579900": 700, "1619900": 700, "1659900": 700, "1699900": 700, "1739900": 700, "1779900": 700, "1819900": 700, "1859900": 700, "1899900": 700, "1939900": 700, "1979900": 700, "seamlessli": 700, "move": [700, 704], "enorm": 700, "sacrif": 700, "cleanli": 700, "cudf_to_cupy_sparse_matrix": 700, "sparseformat": 700, "_sparse_constructor": 700, "csc_matrix": 700, "csr_matrix": 700, "illustr": 700, "nonzero": 700, "arr": [700, 704], "a0": 700, "a4": 700, "a5": 700, "a6": 700, "a7": 700, "a8": 700, "a9": 700, "a10": 700, "a11": 700, "a12": 700, "a13": 700, "a14": 700, "a15": 700, "a16": 700, "a17": 700, "a18": 700, "a19": 700, "419925": 700, "811446": 700, "445278": 700, "989873": 700, "474866": 700, "092986": 700, "16536": 700, "027939": 700, "615997": 700, "452672": 700, "sparse_data": 700, "1280": 700, "5670880659367485": 700, "770": 700, "715978161350032": 700, "132": 700, "492661465874374": 700, "1412": 700, "9980361461718683": 700, "517": 700, "9312209075144693": 700, "1285": 700, "267839386383176": 700, "646": 700, "100103811340932": 700, "902": 700, "26973878686978": 700, "1030": 700, "228380614301443": 700, "158476207701623": 700, "777": 700, "0276278413182183": 700, "1033": 700, "548078860080489": 700, "1290": 700, "92375369577165": 700, "523": 700, "188613714553635": 700, "524": 700, "721462342824374": 700, "1293": 700, "32613928075787": 700, "782": 700, "437697900087931": 700, "1678": 700, "017482987723956": 700, "12091270371453855": 700, "1168": 700, "475555585453966": 700, "1552": 700, "3798444632432365": 700, "1680": 700, "541115409964386": 700, "12891299760422": 700, "273": 700, "216608153460485": 700, "1553": 700, "8090510487680197": 700, "9060": 700, "414022472679292": 700, "9189": 700, "452580728119603": 700, "9317": 700, "015907606611893": 700, "9062": 700, "1598071662292888": 700, "9192": 700, "122399297462413": 700, "9833": 700, "751710335549054": 700, "9322": 700, "978586933490522": 700, "8939": 700, "8011960394053883": 700, "9451": 700, "954135543573258": 700, "9581": 700, "619497901092586": 700, "8686": 700, "118586764333951": 700, "9326": 700, "234350420537601": 700, "8945": 700, "485723627070414": 700, "8946": 700, "020181538151879": 700, "9714": 700, "4356597970342175": 700, "9461": 700, "539409607732672": 700, "9206": 700, "292250948271068": 700, "9079": 700, "402930294667397": 700, "9975": 700, "441607774726697": 700, "9337": 700, "8229019319822093": 700, "9593": 700, "767731910807748": 700, "9213": 700, "697400326588953": 700, "9214": 700, "5351515233639441": 700, "9854": 700, "002187786636774": 700, "9215": 700, "577792661777576": 700, "orchestr": 701, "cohes": 701, "ingest": 701, "decent": 701, "dayofweek": 701, "expens": 701, "cudf_df": 701, "persist": 701, "visual": 701, "comprehens": 701, "track": 701, "certainli": 701, "slight": 701, "inconsist": 701, "tracker": 701, "report": [701, 709], "reus": 701, "newer": 701, "mislead": [701, 702], "frustrat": 701, "apolog": 701, "uint32": [702, 706], "durat": 702, "decimal32dtyp": 702, "decimal64dtyp": 702, "decimal128dtyp": 702, "023": 702, "max_precis": 702, "decimal128": [702, 706], "psr": 702, "pq": 702, "exclus": 703, "nuisanc": 703, "gb1": 703, "gb2": 703, "gb3": 703, "extern": 703, "penalti": 703, "disambigu": 703, "ok": 703, "corr": 703, "866025": 703, "idxmin": 703, "idxmax": 703, "nuniqu": 703, "nth": 703, "cov": 703, "randomdata": 704, "box": 704, "broader": 704, "pydata": [704, 705], "varieti": 704, "devicendarrai": 704, "offer": 704, "const": 704, "unari": [704, 709], "capabl": 704, "singleton": 704, "f_null_sensit": 704, "channel": 704, "restart": 704, "string_udfs_en": 704, "_string_udfs_en": 704, "some_str": 704, "__contains__": 704, "grid": 704, "in_col": 704, "out_col": 704, "guard": 704, "cuda_array_interfac": 704, "963": 704, "9630": 704, "977": 704, "1026": 704, "980": 704, "9770": 704, "1048": 704, "1019": 704, "10480": 704, "1078": 704, "960": 704, "985": 704, "10780": 704, "979": 704, "982": 704, "1011": 704, "9790": 704, "theoret": 704, "potenti": 704, "spot": 704, "area": 704, "pipelin": 704, "job": 704, "entrypoint": 704, "onto": 704, "fulfil": 704, "ultim": 704, "428571429": 704, "constraint": 704, "str_df": 704, "fairli": 704, "streamlin": 704, "walk": 704, "conditional_add": 704, "heart": 704, "readi": 704, "successfulli": 704, "pessimist": 704, "explor": 704, "gpu_add": 704, "matter": 704, "1968": 704, "1961": 704, "propog": 704, "slide": 704, "answer": 704, "stock": 704, "mathemat": 704, "example_func": 704, "65": 704, "56": 704, "549834435": 704, "615773106": 704, "681145748": 704, "745966692": 704, "810249676": 704, "874007874": 704, "937253933": 704, "apply_group": 704, "drawn": 704, "691674": 704, "dan": 704, "958380": 704, "480099": 704, "729580": 704, "473370": 704, "xavier": 704, "767454": 704, "067479": 704, "380205": 704, "970850": 704, "sarah": 704, "342905": 704, "rolling_avg_": 704, "rolling_avg": 704, "win_siz": 704, "801430": 704, "632337": 704, "081887": 704, "933157": 704, "quinn": 704, "420826": 704, "184805": 704, "702013": 704, "837494": 704, "wendi": 704, "057540": 704, "401733": 704, "913899": 704, "ursula": 704, "466252": 704, "009502": 704, "725581": 704, "405245": 704, "271319": 704, "multiply_by_5": 704, "empty_lik": 704, "nondecim": 704, "outlin": 704, "github": 704, "properli": 704, "lot": 704, "hopefulli": 704, "feel": 704, "applymap": 705, "histogram": 705, "tip": 705, "magnum": 705, "gpudirect": 705, "integr": 705, "nvcomp": 705, "interweav": 705, "writer\u00b9": 706, "reader\u00b9": 706, "uint16": 706, "decimal32": 706, "decimal64": 706, "\u00b9": 706, "gd": 706, "dma": 706, "bounc": 706, "sdk": 706, "download": 706, "toolkit": 706, "libcudf_cufile_polici": 706, "kvikio": 706, "rapidsai": 706, "read_avro": 706, "libcudf_cufile_thread_count": 706, "libcudf_cufile_slice_s": 706, "4mb": 706, "libcudf_nvcomp_polici": 706, "deem": 706, "whenev": 706, "deflat": 706, "mind": 707, "20120101": 707, "cumprod": 707, "prod": 707, "wish": 707, "dff": 707, "randn": 707, "853979": 707, "762982": 707, "547631": 707, "401858": 707, "399720": 707, "116554": 707, "809861": 707, "903618": 707, "291107": 707, "907849": 707, "259951": 707, "264322": 707, "256100": 707, "149518": 707, "698963": 707, "173565": 707, "428345": 707, "072658": 707, "659725": 707, "192445": 707, "453863": 707, "715335": 707, "636106": 707, "112275": 707, "218176": 707, "046092": 707, "1182": 707, "silenc": 707, "dot": 707, "700107754": 707, "363606484": 707, "665725563": 707, "370653959": 707, "874684946": 707, "562597219": 707, "094158859": 707, "777766698": 707, "490823102": 707, "473159165": 707, "df00": 707, "700108": 707, "363606": 707, "665726": 707, "370654": 707, "874685": 707, "562597": 707, "094159": 707, "777767": 707, "490823": 707, "473159": 707, "complement": 708, "behaviour": 709, "resid": 709, "extrem": 709, "poor": 709, "vast": 709, "accomplish": 709, "742": 709, "694": 709, "840": 709, "459": 709, "525": 709, "442": 709, "363": 709, "666": 709, "643": 709, "631": 709, "906": 709, "640": 709, "impact": 709, "compatibilti": 709, "impos": 709}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [184, 0, 1, "", "DatetimeIndex"], [203, 0, 1, "", "Float64Index"], [204, 0, 1, "", "Grouper"], [205, 0, 1, "", "Index"], [253, 0, 1, "", "Int64Index"], [254, 0, 1, "", "IntervalIndex"], [258, 0, 1, "", "MultiIndex"], [271, 0, 1, "", "RangeIndex"], [272, 0, 1, "", "Series"], [446, 0, 1, "", "TimedeltaIndex"], [455, 0, 1, "", "UInt64Index"], [456, 3, 1, "", "concat"], [650, 3, 1, "", "cut"], [651, 3, 1, "", "describe_option"], [652, 3, 1, "", "from_dlpack"], [653, 3, 1, "", "get_dummies"], [654, 3, 1, "", "get_option"], [659, 3, 1, "", "melt"], [660, 3, 1, "", "pivot"], [661, 3, 1, "", "read_avro"], [662, 3, 1, "", "read_csv"], [663, 3, 1, "", "read_feather"], [664, 3, 1, "", "read_hdf"], [665, 3, 1, "", "read_json"], [666, 3, 1, "", "read_orc"], [667, 3, 1, "", "read_parquet"], [668, 3, 1, "", "read_text"], [669, 3, 1, "", "set_option"], [674, 3, 1, "", "to_datetime"], [675, 3, 1, "", "to_numeric"], [676, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pop"], [114, 2, 1, "", "pow"], [115, 2, 1, "", "prod"], [116, 2, 1, "", "product"], [117, 2, 1, "", "quantile"], [118, 2, 1, "", "quantiles"], [119, 2, 1, "", "query"], [120, 2, 1, "", "radd"], [121, 2, 1, "", "rank"], [122, 2, 1, "", "rdiv"], [123, 2, 1, "", "reindex"], [124, 2, 1, "", "rename"], [125, 2, 1, "", "repeat"], [126, 2, 1, "", "replace"], [127, 2, 1, "", "resample"], [128, 2, 1, "", "reset_index"], [129, 2, 1, "", "rfloordiv"], [130, 2, 1, "", "rmod"], [131, 2, 1, "", "rmul"], [132, 2, 1, "", "rolling"], [133, 2, 1, "", "round"], [134, 2, 1, "", "rpow"], [135, 2, 1, "", "rsub"], [136, 2, 1, "", "rtruediv"], [137, 2, 1, "", "sample"], [138, 2, 1, "", "scale"], [139, 2, 1, "", "scatter_by_map"], [140, 2, 1, "", "searchsorted"], [141, 2, 1, "", "select_dtypes"], [142, 2, 1, "", "serialize"], [143, 2, 1, "", "set_index"], [144, 1, 1, "", "shape"], [145, 2, 1, "", "shift"], [146, 1, 1, "", "size"], [147, 2, 1, "", "skew"], [148, 2, 1, "", "sort_index"], [149, 2, 1, "", "sort_values"], [150, 2, 1, "", "stack"], [151, 2, 1, "", "std"], [152, 2, 1, "", "sub"], [153, 2, 1, "", "subtract"], [154, 2, 1, "", "sum"], [155, 2, 1, "", "sum_of_squares"], [156, 2, 1, "", "swaplevel"], [157, 2, 1, "", "tail"], [158, 2, 1, "", "take"], [159, 2, 1, "", "tile"], [160, 2, 1, "", "to_arrow"], [161, 2, 1, "", "to_csv"], [162, 2, 1, "", "to_cupy"], [163, 2, 1, "", "to_dict"], [164, 2, 1, "", "to_dlpack"], [165, 2, 1, "", "to_feather"], [166, 2, 1, "", "to_hdf"], [167, 2, 1, "", "to_json"], [168, 2, 1, "", "to_numpy"], [169, 2, 1, "", "to_orc"], [170, 2, 1, "", "to_pandas"], [171, 2, 1, "", "to_parquet"], [172, 2, 1, "", "to_records"], [173, 2, 1, "", "to_string"], [174, 2, 1, "", "to_struct"], [175, 2, 1, "", "transpose"], [176, 2, 1, "", "truediv"], [177, 2, 1, "", "unstack"], [178, 2, 1, "", "update"], [179, 2, 1, "", "value_counts"], [180, 1, 1, "", "values"], [181, 1, 1, "", "values_host"], [182, 2, 1, "", "var"], [183, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[185, 2, 1, "", "ceil"], [186, 1, 1, "", "day"], [187, 1, 1, "", "day_of_year"], [188, 1, 1, "", "dayofweek"], [189, 1, 1, "", "dayofyear"], [190, 2, 1, "", "floor"], [191, 1, 1, "", "hour"], [192, 1, 1, "", "is_leap_year"], [193, 2, 1, "", "isocalendar"], [194, 1, 1, "", "minute"], [195, 1, 1, "", "month"], [196, 1, 1, "", "quarter"], [197, 2, 1, "", "round"], [198, 1, 1, "", "second"], [199, 2, 1, "", "to_frame"], [200, 2, 1, "", "to_series"], [201, 1, 1, "", "weekday"], [202, 1, 1, "", "year"]], "cudf.Grouper": [[204, 2, 1, "", "__init__"]], "cudf.Index": [[206, 2, 1, "", "any"], [207, 2, 1, "", "append"], [208, 2, 1, "", "copy"], [209, 2, 1, "", "deserialize"], [210, 2, 1, "", "device_deserialize"], [211, 2, 1, "", "device_serialize"], [212, 2, 1, "", "difference"], [213, 2, 1, "", "drop_duplicates"], [214, 2, 1, "", "dropna"], [215, 2, 1, "", "fillna"], [216, 2, 1, "", "from_arrow"], [217, 2, 1, "", "from_pandas"], [218, 2, 1, "", "get_level_values"], [219, 2, 1, "", "get_loc"], [220, 2, 1, "", "get_slice_bound"], [221, 1, 1, "", "has_duplicates"], [222, 2, 1, "", "host_deserialize"], [223, 2, 1, "", "host_serialize"], [224, 2, 1, "", "intersection"], [225, 2, 1, "", "is_boolean"], [226, 2, 1, "", "is_categorical"], [227, 2, 1, "", "is_floating"], [228, 2, 1, "", "is_integer"], [229, 2, 1, "", "is_interval"], [230, 1, 1, "", "is_monotonic"], [231, 1, 1, "", "is_monotonic_decreasing"], [232, 1, 1, "", "is_monotonic_increasing"], [233, 2, 1, "", "is_numeric"], [234, 2, 1, "", "is_object"], [235, 2, 1, "", "isin"], [236, 2, 1, "", "join"], [237, 1, 1, "", "names"], [238, 1, 1, "", "nlevels"], [239, 2, 1, "", "rename"], [240, 2, 1, "", "repeat"], [241, 2, 1, "", "serialize"], [242, 2, 1, "", "set_names"], [243, 1, 1, "", "size"], [244, 2, 1, "", "sort_values"], [245, 2, 1, "", "take"], [246, 2, 1, "", "to_dlpack"], [247, 2, 1, "", "to_frame"], [248, 2, 1, "", "to_pandas"], [249, 2, 1, "", "to_series"], [250, 2, 1, "", "union"], [251, 2, 1, "", "unique"], [252, 1, 1, "", "values"]], "cudf.IntervalIndex": [[254, 2, 1, "", "__init__"], [255, 2, 1, "", "from_breaks"], [256, 2, 1, "", "get_loc"], [257, 1, 1, "", "values"]], "cudf.MultiIndex": [[259, 1, 1, "", "codes"], [260, 2, 1, "", "droplevel"], [261, 2, 1, "", "from_arrow"], [262, 2, 1, "", "from_frame"], [263, 2, 1, "", "from_product"], [264, 2, 1, "", "from_tuples"], [265, 2, 1, "", "get_level_values"], [266, 2, 1, "", "get_loc"], [267, 1, 1, "", "levels"], [268, 1, 1, "", "names"], [269, 1, 1, "", "nlevels"], [270, 2, 1, "", "to_frame"]], "cudf.Series": [[273, 1, 1, "", "T"], [274, 2, 1, "", "__array__"], [275, 2, 1, "", "__iter__"], [276, 2, 1, "", "abs"], [277, 2, 1, "", "add"], [278, 2, 1, "", "add_prefix"], [279, 2, 1, "", "add_suffix"], [280, 2, 1, "", "all"], [281, 2, 1, "", "any"], [282, 2, 1, "", "append"], [283, 2, 1, "", "apply"], [284, 2, 1, "", "argsort"], [285, 2, 1, "", "astype"], [286, 2, 1, "", "autocorr"], [287, 1, 1, "", "axes"], [288, 2, 1, "", "backfill"], [289, 2, 1, "", "between"], [290, 2, 1, "", "bfill"], [291, 1, 1, "", "cat"], [292, 2, 1, "", "clip"], [293, 2, 1, "", "copy"], [294, 2, 1, "", "corr"], [295, 2, 1, "", "count"], [296, 2, 1, "", "cov"], [297, 2, 1, "", "cummax"], [298, 2, 1, "", "cummin"], [299, 2, 1, "", "cumprod"], [300, 2, 1, "", "cumsum"], [301, 1, 1, "", "data"], [302, 2, 1, "", "describe"], [303, 2, 1, "", "deserialize"], [304, 2, 1, "", "device_deserialize"], [305, 2, 1, "", "device_serialize"], [306, 2, 1, "", "diff"], [307, 2, 1, "", "digitize"], [308, 2, 1, "", "div"], [309, 2, 1, "", "divide"], [310, 2, 1, "", "dot"], [311, 2, 1, "", "drop"], [312, 2, 1, "", "drop_duplicates"], [313, 2, 1, "", "dropna"], [314, 1, 1, "", "dt"], [315, 1, 1, "", "dtype"], [316, 1, 1, "", "empty"], [317, 2, 1, "", "eq"], [318, 2, 1, "", "equals"], [319, 2, 1, "", "explode"], [320, 2, 1, "", "factorize"], [321, 2, 1, "", "ffill"], [322, 2, 1, "", "fillna"], [323, 2, 1, "", "first"], [324, 2, 1, "", "floordiv"], [325, 2, 1, "", "from_arrow"], [326, 2, 1, "", "from_categorical"], [327, 2, 1, "", "from_masked_array"], [328, 2, 1, "", "from_pandas"], [329, 2, 1, "", "ge"], [330, 2, 1, "", "groupby"], [331, 2, 1, "", "gt"], [332, 1, 1, "", "has_nulls"], [333, 2, 1, "", "hash_values"], [334, 2, 1, "", "head"], [335, 2, 1, "", "host_deserialize"], [336, 2, 1, "", "host_serialize"], [337, 1, 1, "", "iloc"], [338, 1, 1, "", "index"], [339, 2, 1, "", "interpolate"], [340, 1, 1, "", "is_monotonic"], [341, 1, 1, "", "is_monotonic_decreasing"], [342, 1, 1, "", "is_monotonic_increasing"], [343, 1, 1, "", "is_unique"], [344, 2, 1, "", "isin"], [345, 2, 1, "", "isna"], [346, 2, 1, "", "isnull"], [347, 2, 1, "", "items"], [348, 2, 1, "", "iteritems"], [349, 2, 1, "", "keys"], [350, 2, 1, "", "kurt"], [351, 2, 1, "", "kurtosis"], [352, 2, 1, "", "last"], [353, 2, 1, "", "le"], [354, 1, 1, "", "list"], [355, 1, 1, "", "loc"], [356, 2, 1, "", "lt"], [357, 2, 1, "", "map"], [358, 2, 1, "", "mask"], [359, 2, 1, "", "max"], [360, 2, 1, "", "mean"], [361, 2, 1, "", "median"], [362, 2, 1, "", "memory_usage"], [363, 2, 1, "", "min"], [364, 2, 1, "", "mod"], [365, 2, 1, "", "mode"], [366, 2, 1, "", "mul"], [367, 2, 1, "", "multiply"], [368, 1, 1, "", "name"], [369, 2, 1, "", "nans_to_nulls"], [370, 1, 1, "", "ndim"], [371, 2, 1, "", "ne"], [372, 2, 1, "", "nlargest"], [373, 2, 1, "", "notna"], [374, 2, 1, "", "notnull"], [375, 2, 1, "", "nsmallest"], [376, 1, 1, "", "null_count"], [377, 1, 1, "", "nullable"], [378, 1, 1, "", "nullmask"], [379, 2, 1, "", "nunique"], [380, 2, 1, "", "pad"], [381, 2, 1, "", "pct_change"], [382, 2, 1, "", "pipe"], [383, 2, 1, "", "pow"], [384, 2, 1, "", "prod"], [385, 2, 1, "", "product"], [386, 2, 1, "", "quantile"], [387, 2, 1, "", "radd"], [388, 2, 1, "", "rank"], [389, 2, 1, "", "rdiv"], [390, 2, 1, "", "reindex"], [391, 2, 1, "", "rename"], [392, 2, 1, "", "repeat"], [393, 2, 1, "", "replace"], [394, 2, 1, "", "resample"], [395, 2, 1, "", "reset_index"], [396, 2, 1, "", "rfloordiv"], [397, 2, 1, "", "rmod"], [398, 2, 1, "", "rmul"], [399, 2, 1, "", "rolling"], [400, 2, 1, "", "round"], [401, 2, 1, "", "rpow"], [402, 2, 1, "", "rsub"], [403, 2, 1, "", "rtruediv"], [404, 2, 1, "", "sample"], [405, 2, 1, "", "scale"], [406, 2, 1, "", "searchsorted"], [407, 2, 1, "", "serialize"], [408, 1, 1, "", "shape"], [409, 2, 1, "", "shift"], [410, 1, 1, "", "size"], [411, 2, 1, "", "skew"], [412, 2, 1, "", "sort_index"], [413, 2, 1, "", "sort_values"], [414, 2, 1, "", "std"], [415, 1, 1, "", "str"], [416, 1, 1, "", "struct"], [417, 2, 1, "", "sub"], [418, 2, 1, "", "subtract"], [419, 2, 1, "", "sum"], [420, 2, 1, "", "sum_of_squares"], [421, 2, 1, "", "tail"], [422, 2, 1, "", "take"], [423, 2, 1, "", "tile"], [424, 2, 1, "", "to_arrow"], [425, 2, 1, "", "to_cupy"], [426, 2, 1, "", "to_dict"], [427, 2, 1, "", "to_dlpack"], [428, 2, 1, "", "to_frame"], [429, 2, 1, "", "to_hdf"], [430, 2, 1, "", "to_json"], [431, 2, 1, "", "to_list"], [432, 2, 1, "", "to_numpy"], [433, 2, 1, "", "to_pandas"], [434, 2, 1, "", "to_string"], [435, 2, 1, "", "tolist"], [436, 2, 1, "", "transpose"], [437, 2, 1, "", "truediv"], [438, 2, 1, "", "unique"], [439, 2, 1, "", "update"], [440, 1, 1, "", "valid_count"], [441, 2, 1, "", "value_counts"], [442, 1, 1, "", "values"], [443, 1, 1, "", "values_host"], [444, 2, 1, "", "var"], [445, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[447, 1, 1, "", "components"], [448, 1, 1, "", "days"], [449, 1, 1, "", "inferred_freq"], [450, 1, 1, "", "microseconds"], [451, 1, 1, "", "nanoseconds"], [452, 1, 1, "", "seconds"], [453, 2, 1, "", "to_frame"], [454, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[457, 2, 1, "", "add_categories"], [458, 2, 1, "", "as_ordered"], [459, 2, 1, "", "as_unordered"], [460, 1, 1, "", "categories"], [461, 1, 1, "", "codes"], [462, 1, 1, "", "ordered"], [463, 2, 1, "", "remove_categories"], [464, 2, 1, "", "reorder_categories"], [465, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[466, 2, 1, "", "astype"], [467, 2, 1, "", "concat"], [468, 2, 1, "", "contains"], [469, 2, 1, "", "get"], [470, 2, 1, "", "index"], [471, 1, 1, "", "leaves"], [472, 2, 1, "", "len"], [473, 2, 1, "", "sort_values"], [474, 2, 1, "", "take"], [475, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[476, 2, 1, "", "byte_count"], [477, 2, 1, "", "capitalize"], [478, 2, 1, "", "cat"], [479, 2, 1, "", "center"], [480, 2, 1, "", "character_ngrams"], [481, 2, 1, "", "character_tokenize"], [482, 2, 1, "", "code_points"], [483, 2, 1, "", "contains"], [484, 2, 1, "", "count"], [485, 2, 1, "", "detokenize"], [486, 2, 1, "", "edit_distance"], [487, 2, 1, "", "edit_distance_matrix"], [488, 2, 1, "", "endswith"], [489, 2, 1, "", "extract"], [490, 2, 1, "", "filter_alphanum"], [491, 2, 1, "", "filter_characters"], [492, 2, 1, "", "filter_tokens"], [493, 2, 1, "", "find"], [494, 2, 1, "", "findall"], [495, 2, 1, "", "get"], [496, 2, 1, "", "get_json_object"], [497, 2, 1, "", "hex_to_int"], [498, 2, 1, "", "htoi"], [499, 2, 1, "", "index"], [500, 2, 1, "", "insert"], [501, 2, 1, "", "ip2int"], [502, 2, 1, "", "ip_to_int"], [503, 2, 1, "", "is_consonant"], [504, 2, 1, "", "is_vowel"], [505, 2, 1, "", "isalnum"], [506, 2, 1, "", "isalpha"], [507, 2, 1, "", "isdecimal"], [508, 2, 1, "", "isdigit"], [509, 2, 1, "", "isempty"], [510, 2, 1, "", "isfloat"], [511, 2, 1, "", "ishex"], [512, 2, 1, "", "isinteger"], [513, 2, 1, "", "isipv4"], [514, 2, 1, "", "islower"], [515, 2, 1, "", "isnumeric"], [516, 2, 1, "", "isspace"], [517, 2, 1, "", "istimestamp"], [518, 2, 1, "", "istitle"], [519, 2, 1, "", "isupper"], [520, 2, 1, "", "join"], [521, 2, 1, "", "len"], [522, 2, 1, "", "like"], [523, 2, 1, "", "ljust"], [524, 2, 1, "", "lower"], [525, 2, 1, "", "lstrip"], [526, 2, 1, "", "match"], [527, 2, 1, "", "ngrams"], [528, 2, 1, "", "ngrams_tokenize"], [529, 2, 1, "", "normalize_characters"], [530, 2, 1, "", "normalize_spaces"], [531, 2, 1, "", "pad"], [532, 2, 1, "", "partition"], [533, 2, 1, "", "porter_stemmer_measure"], [534, 2, 1, "", "repeat"], [535, 2, 1, "", "replace"], [536, 2, 1, "", "replace_tokens"], [537, 2, 1, "", "replace_with_backrefs"], [538, 2, 1, "", "rfind"], [539, 2, 1, "", "rindex"], [540, 2, 1, "", "rjust"], [541, 2, 1, "", "rpartition"], [542, 2, 1, "", "rsplit"], [543, 2, 1, "", "rstrip"], [544, 2, 1, "", "slice"], [545, 2, 1, "", "slice_from"], [546, 2, 1, "", "slice_replace"], [547, 2, 1, "", "split"], [548, 2, 1, "", "startswith"], [549, 2, 1, "", "strip"], [550, 2, 1, "", "swapcase"], [551, 2, 1, "", "title"], [552, 2, 1, "", "token_count"], [553, 2, 1, "", "tokenize"], [554, 2, 1, "", "translate"], [555, 2, 1, "", "upper"], [556, 2, 1, "", "url_decode"], [557, 2, 1, "", "url_encode"], [558, 2, 1, "", "wrap"], [559, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[560, 2, 1, "", "explode"], [561, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[562, 2, 1, "", "__iter__"], [563, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[564, 2, 1, "", "aggregate"], [565, 2, 1, "", "backfill"], [566, 2, 1, "", "bfill"], [567, 2, 1, "", "count"], [568, 2, 1, "", "cumcount"], [569, 2, 1, "", "cummax"], [570, 2, 1, "", "cummin"], [571, 2, 1, "", "cumsum"], [572, 2, 1, "", "describe"], [573, 2, 1, "", "diff"], [574, 2, 1, "", "ffill"], [575, 2, 1, "", "fillna"], [576, 2, 1, "", "idxmax"], [577, 2, 1, "", "idxmin"], [578, 2, 1, "", "nunique"], [579, 2, 1, "", "pad"], [580, 2, 1, "", "quantile"], [581, 2, 1, "", "shift"], [582, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[583, 2, 1, "", "agg"], [584, 2, 1, "", "apply"], [585, 2, 1, "", "backfill"], [586, 2, 1, "", "bfill"], [587, 2, 1, "", "corr"], [588, 2, 1, "", "count"], [589, 2, 1, "", "cov"], [590, 2, 1, "", "cumcount"], [591, 2, 1, "", "cummax"], [592, 2, 1, "", "cummin"], [593, 2, 1, "", "cumsum"], [594, 2, 1, "", "ffill"], [595, 2, 1, "", "max"], [596, 2, 1, "", "mean"], [597, 2, 1, "", "median"], [598, 2, 1, "", "min"], [599, 2, 1, "", "nth"], [600, 2, 1, "", "pad"], [601, 2, 1, "", "pipe"], [602, 2, 1, "", "prod"], [603, 2, 1, "", "size"], [604, 2, 1, "", "std"], [605, 2, 1, "", "sum"], [606, 2, 1, "", "transform"], [607, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[608, 2, 1, "", "aggregate"], [609, 2, 1, "", "nunique"], [610, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[611, 2, 1, "", "ceil"], [612, 1, 1, "", "day"], [613, 1, 1, "", "day_of_year"], [614, 1, 1, "", "dayofweek"], [615, 1, 1, "", "dayofyear"], [616, 1, 1, "", "days_in_month"], [617, 2, 1, "", "floor"], [618, 1, 1, "", "hour"], [619, 1, 1, "", "is_leap_year"], [620, 1, 1, "", "is_month_end"], [621, 1, 1, "", "is_month_start"], [622, 1, 1, "", "is_quarter_end"], [623, 1, 1, "", "is_quarter_start"], [624, 1, 1, "", "is_year_end"], [625, 1, 1, "", "is_year_start"], [626, 2, 1, "", "isocalendar"], [627, 1, 1, "", "minute"], [628, 1, 1, "", "month"], [629, 1, 1, "", "quarter"], [630, 2, 1, "", "round"], [631, 1, 1, "", "second"], [632, 2, 1, "", "strftime"], [633, 1, 1, "", "weekday"], [634, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[635, 1, 1, "", "components"], [636, 1, 1, "", "days"], [637, 1, 1, "", "microseconds"], [638, 1, 1, "", "nanoseconds"], [639, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[640, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[641, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[642, 2, 1, "", "apply"], [643, 2, 1, "", "count"], [644, 2, 1, "", "max"], [645, 2, 1, "", "mean"], [646, 2, 1, "", "min"], [647, 2, 1, "", "std"], [648, 2, 1, "", "sum"], [649, 2, 1, "", "var"]], "cudf.io.parquet": [[655, 0, 1, "", "ParquetDatasetWriter"], [658, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[656, 2, 1, "", "close"], [657, 2, 1, "", "write_table"]], "cudf.testing.testing": [[670, 3, 1, "", "assert_column_equal"], [671, 3, 1, "", "assert_frame_equal"], [672, 3, 1, "", "assert_index_equal"], [673, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 685, 691, 693, 697, 698, 700, 701, 704, 707, 709], "categoricalindex": [0, 1, 2, 3, 682], "categori": [1, 460], "code": [2, 259, 461, 692], "equal": [3, 50, 318], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 677, 700, 704], "t": [5, 273], "__iter__": [6, 275, 562], "ab": [7, 276], "add": [8, 277], "add_prefix": [9, 278], "add_suffix": [10, 279], "agg": [11, 583], "all": [12, 280, 695], "ani": [13, 206, 281], "append": [14, 207, 282], "appli": [15, 283, 584, 642, 703, 704, 709], "apply_chunk": [16, 704], "apply_row": [17, 704], "applymap": [18, 698], "argsort": [19, 284], "assign": 20, "astyp": [21, 285, 466], "ax": [23, 287], "backfil": [24, 288, 565, 585], "bfill": [25, 290, 566, 586], "clip": [26, 292], "column": [27, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 695, 709], "copi": [28, 208, 293], "corr": [29, 294, 587], "count": [30, 295, 484, 567, 588, 643], "cov": [31, 296, 589], "cummax": [32, 297, 569, 591], "cummin": [33, 298, 570, 592], "cumprod": [34, 299], "cumsum": [35, 300, 571, 593], "describ": [36, 302, 572], "deseri": [37, 209, 303], "device_deseri": [38, 210, 304], "device_seri": [39, 211, 305], "diff": [40, 306, 573], "div": [41, 308], "divid": [42, 309], "dot": [43, 310], "drop": [44, 311, 707], "drop_dupl": [45, 213, 312], "dropna": [46, 214, 313, 707], "dtype": [47, 315, 706, 707], "empti": [48, 316], "eq": [49, 317], "eval": 51, "explod": [52, 319, 560], "ffill": [53, 321, 574, 594], "fillna": [54, 215, 322, 575, 707], "first": [55, 323], "floordiv": [56, 324], "from_arrow": [57, 216, 261, 325], "from_panda": [58, 217, 328], "from_record": 59, "ge": [60, 329], "groupbi": [61, 330, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 677, 680, 686, 703, 704, 707], "gt": [62, 331], "hash_valu": [63, 333], "head": [64, 334], "host_deseri": [65, 222, 335], "host_seri": [66, 223, 336], "iat": 67, "iloc": [68, 337], "index": [69, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 338, 470, 499, 677, 680, 682, 686, 695, 698, 703], "info": 70, "insert": [71, 500, 707], "interleave_column": 72, "interpol": [73, 339], "isin": [74, 235, 344], "isna": [75, 345], "isnul": [76, 346], "item": [77, 347], "iterrow": 78, "itertupl": 79, "join": [80, 236, 520, 677, 682, 686, 698], "kei": [81, 349], "kurt": [82, 350], "kurtosi": [83, 351], "last": [84, 352], "le": [85, 353], "loc": [86, 355], "lt": [87, 356], "mask": [88, 358], "max": [89, 359, 595, 644], "mean": [90, 360, 596, 645], "median": [91, 361, 597], "melt": [92, 659], "memory_usag": [93, 362], "merg": [94, 677, 686], "min": [95, 363, 598, 646], "mod": [96, 364], "mode": [97, 365], "mul": [98, 366], "multipli": [99, 367], "nans_to_nul": [100, 369], "ndim": [101, 370], "ne": [102, 371], "nlargest": [103, 372], "notna": [104, 373], "notnul": [105, 374], "nsmallest": [106, 375], "nuniqu": [107, 379, 578, 609], "pad": [108, 380, 531, 579, 600], "partition_by_hash": 109, "pct_chang": [110, 381], "pipe": [111, 382, 601], "pivot": [112, 660], "pop": 113, "pow": [114, 383], "prod": [115, 384, 602], "product": [116, 385, 707], "quantil": [117, 118, 386, 580], "panda": [117, 123, 183, 266, 390, 445, 575, 584, 691, 692, 693, 698, 699, 709], "compat": [117, 123, 183, 266, 390, 445, 575, 584, 682, 692, 699], "note": [117, 123, 183, 266, 390, 445, 575, 584, 699, 702], "queri": 119, "radd": [120, 387], "rank": [121, 388], "rdiv": [122, 389], "reindex": [123, 390, 677, 686], "renam": [124, 239, 391], "repeat": [125, 240, 392, 534], "replac": [126, 393, 535, 707], "resampl": [127, 394], "reset_index": [128, 395], "rfloordiv": [129, 396], "rmod": [130, 397], "rmul": [131, 398], "roll": [132, 399, 642, 643, 644, 645, 646, 647, 648, 649, 690, 703, 704], "round": [133, 197, 400, 630], "rpow": [134, 401], "rsub": [135, 402], "rtruediv": [136, 403], "sampl": [137, 404], "scale": [138, 405], "scatter_by_map": 139, "searchsort": [140, 406], "select_dtyp": 141, "serial": [142, 241, 407, 677, 686], "set_index": 143, "shape": [144, 408], "shift": [145, 409, 581], "size": [146, 243, 410, 582, 603], "skew": [147, 411], "sort_index": [148, 412], "sort_valu": [149, 244, 413, 473], "stack": 150, "std": [151, 414, 604, 647], "sub": [152, 417], "subtract": [153, 418], "sum": [154, 419, 605, 648, 707], "sum_of_squar": [155, 420], "swaplevel": 156, "tail": [157, 421], "take": [158, 245, 422, 474], "tile": [159, 423], "to_arrow": [160, 424], "to_csv": 161, "to_cupi": [162, 425], "to_dict": [163, 426], "to_dlpack": [164, 246, 427], "to_feath": 165, "to_hdf": [166, 429], "to_json": [167, 430], "to_numpi": [168, 432], "to_orc": 169, "to_panda": [170, 248, 433], "to_parquet": 171, "to_record": 172, "to_str": [173, 434], "to_struct": 174, "transpos": [175, 436, 677, 698], "truediv": [176, 437], "unstack": [177, 676], "updat": [178, 439], "value_count": [179, 441], "valu": [180, 252, 257, 442, 682, 707, 709], "values_host": [181, 443], "var": [182, 444, 607, 649], "where": [183, 445], "datetimeindex": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 682], "ceil": [185, 611], "dai": [186, 448, 612, 636], "day_of_year": [187, 613], "dayofweek": [188, 614], "dayofyear": [189, 615], "floor": [190, 617], "hour": [191, 618], "is_leap_year": [192, 619], "isocalendar": [193, 626], "minut": [194, 627, 698], "month": [195, 628], "quarter": [196, 629], "second": [198, 452, 631, 639], "to_fram": [199, 247, 270, 428, 453], "to_seri": [200, 249, 454], "weekdai": [201, 633], "year": [202, 634], "float64index": 203, "grouper": [204, 703], "differ": [212, 706], "get_level_valu": [218, 265], "get_loc": [219, 256, 266], "get_slice_bound": 220, "has_dupl": 221, "intersect": 224, "is_boolean": 225, "is_categor": 226, "is_float": 227, "is_integ": 228, "is_interv": 229, "is_monoton": [230, 340], "is_monotonic_decreas": [231, 341], "is_monotonic_increas": [232, 342], "is_numer": 233, "is_object": 234, "name": [237, 268, 368, 692, 709], "nlevel": [238, 269], "set_nam": 242, "union": [250, 691], "uniqu": [251, 438, 475, 610], "int64index": 253, "intervalindex": [254, 255, 256, 257, 682], "from_break": 255, "multiindex": [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 682, 698], "droplevel": 260, "from_fram": 262, "from_product": 263, "from_tupl": 264, "level": [267, 678, 703, 704], "rangeindex": 271, "seri": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 677, 686, 698, 700, 704], "__array__": 274, "autocorr": 286, "between": [289, 700], "cat": [291, 478], "data": [301, 677, 678, 686, 695, 698, 702, 704, 707, 709], "digit": 307, "dt": 314, "factor": 320, "from_categor": 326, "from_masked_arrai": 327, "has_nul": 332, "is_uniqu": 343, "iteritem": 348, "list": [354, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 684, 686, 702], "map": 357, "null_count": 376, "nullabl": [377, 704], "nullmask": 378, "str": 415, "struct": [416, 560, 561, 686, 688, 702], "to_list": 431, "tolist": 435, "valid_count": 440, "timedeltaindex": [446, 447, 448, 449, 450, 451, 452, 453, 454, 682], "compon": [447, 635, 682], "inferred_freq": 449, "microsecond": [450, 637], "nanosecond": [451, 638], "uint64index": 455, "concat": [456, 467, 698], "core": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "categor": [457, 458, 459, 460, 461, 462, 463, 464, 465, 682, 686, 698], "categoricalaccessor": [457, 458, 459, 460, 461, 462, 463, 464, 465], "add_categori": 457, "as_ord": 458, "as_unord": 459, "order": [462, 709], "remove_categori": 463, "reorder_categori": 464, "set_categori": 465, "listmethod": [466, 467, 468, 469, 470, 471, 472, 473, 474, 475], "contain": [468, 483], "get": [469, 495, 698], "leav": 471, "len": [472, 521], "string": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 686, 687, 698, 704, 707], "stringmethod": [476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "byte_count": 476, "capit": 477, "center": 479, "character_ngram": 480, "character_token": 481, "code_point": 482, "detoken": 485, "edit_dist": 486, "edit_distance_matrix": 487, "endswith": 488, "extract": 489, "filter_alphanum": 490, "filter_charact": 491, "filter_token": 492, "find": 493, "findal": 494, "get_json_object": 496, "hex_to_int": 497, "htoi": 498, "ip2int": 501, "ip_to_int": 502, "is_conson": 503, "is_vowel": 504, "isalnum": 505, "isalpha": 506, "isdecim": 507, "isdigit": 508, "isempti": 509, "isfloat": 510, "ishex": 511, "isinteg": 512, "isipv4": 513, "islow": 514, "isnumer": 515, "isspac": 516, "istimestamp": 517, "istitl": 518, "isupp": 519, "like": 522, "ljust": 523, "lower": [524, 704], "lstrip": 525, "match": 526, "ngram": 527, "ngrams_token": 528, "normalize_charact": 529, "normalize_spac": 530, "partit": 532, "porter_stemmer_measur": 533, "replace_token": 536, "replace_with_backref": 537, "rfind": 538, "rindex": 539, "rjust": 540, "rpartit": 541, "rsplit": 542, "rstrip": 543, "slice": 544, "slice_from": 545, "slice_replac": 546, "split": 547, "startswith": 548, "strip": 549, "swapcas": 550, "titl": 551, "token_count": 552, "token": 553, "translat": 554, "upper": 555, "url_decod": 556, "url_encod": 557, "wrap": 558, "zfill": 559, "structmethod": [560, 561], "field": 561, "group": [563, 698, 703], "dataframegroupbi": [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582], "aggreg": [564, 608, 703], "cumcount": [568, 590], "idxmax": 576, "idxmin": 577, "nth": 599, "transform": [606, 703], "seriesgroupbi": [608, 609, 610], "datetimeproperti": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634], "days_in_month": 616, "is_month_end": 620, "is_month_start": 621, "is_quarter_end": 622, "is_quarter_start": 623, "is_year_end": 624, "is_year_start": 625, "strftime": 632, "timedeltaproperti": [635, 636, 637, 638, 639], "subword_token": [640, 641], "subwordtoken": [640, 641, 689], "__call__": 641, "window": [642, 643, 644, 645, 646, 647, 648, 649, 677, 686, 690, 703, 704], "cut": 650, "describe_opt": 651, "from_dlpack": 652, "get_dummi": 653, "get_opt": 654, "io": [655, 656, 657, 658, 677, 686, 706], "parquet": [655, 656, 657, 658, 683, 698], "parquetdatasetwrit": [655, 656, 657], "close": 656, "write_t": 657, "read_parquet_metadata": 658, "read_avro": 661, "read_csv": 662, "read_feath": 663, "read_hdf": 664, "read_json": 665, "read_orc": 666, "read_parquet": 667, "read_text": 668, "set_opt": 669, "test": [670, 671, 672, 673, 679, 691], "assert_column_equ": 670, "assert_frame_equ": 671, "assert_index_equ": 672, "assert_series_equ": 673, "to_datetim": 674, "to_numer": 675, "constructor": [677, 682, 686, 689], "attribut": [677, 686], "underli": 677, "convers": [677, 678, 682, 686], "iter": [677, 680, 686, 709], "binari": [677, 686], "oper": [677, 682, 686, 698, 703, 709], "function": [677, 678, 679, 680, 686, 690, 704, 709], "applic": [677, 680, 686], "comput": [677, 680, 682, 686, 709], "descript": [677, 680, 686], "stat": [677, 680, 686, 698], "select": [677, 682, 686, 698], "label": [677, 686, 698, 707], "manipul": [677, 678, 686], "miss": [677, 682, 686, 698, 707, 709], "handl": [677, 684, 686, 687, 688, 692, 704], "reshap": [677, 686], "sort": [677, 682, 686], "combin": [677, 682, 686], "compar": [677, 686, 691, 693], "time": [677, 682, 686, 698], "relat": [677, 686], "gener": [678, 679, 707], "top": 678, "deal": 678, "datetimelik": [678, 686], "util": 679, "api": [681, 701], "refer": 681, "document": [681, 693, 697], "object": [682, 698, 702, 703, 707, 709], "properti": [682, 686], "modifi": 682, "memori": 682, "usag": 682, "specif": 682, "set": 682, "numer": [682, 707], "date": 682, "input": [683, 706], "output": [683, 706], "csv": [683, 698], "text": 683, "json": 683, "orc": [683, 698], "hdfstore": 683, "pytabl": 683, "hdf5": 683, "feather": 683, "avro": 683, "option": [685, 696, 708], "accessor": 686, "datetim": [686, 707], "method": [686, 698], "timedelta": 686, "benchmark": 691, "organ": 691, "run": 691, "content": [691, 697], "configur": 691, "write": [691, 693], "parametr": 691, "profil": 691, "advanc": 691, "topic": 691, "understand": 691, "benchmark_with_object": 691, "fixtur": 691, "The": [691, 695, 703], "decor": 691, "contribut": 692, "guid": [692, 694, 705], "directori": 692, "structur": 692, "file": 692, "style": 692, "deprec": 692, "remov": 692, "python": 692, "v": 692, "cython": [692, 695], "except": 692, "libcudf": 692, "docstr": 693, "publish": 693, "page": 693, "build": 693, "requir": 693, "view": [693, 698], "doc": 693, "intern": 693, "develop": [694, 701], "librari": [695, 698], "design": 695, "frame": 695, "layer": 695, "columnaccessor": 695, "type": [695, 702, 706, 709], "buffer": 695, "put": 695, "It": 695, "togeth": 695, "welcom": 697, "": 697, "indic": 697, "tabl": 697, "10": 698, "dask": [698, 701], "what": [698, 701], "ar": 698, "when": 698, "us": [698, 706], "creation": 698, "posit": 698, "boolean": 698, "histogram": 698, "convert": [698, 700], "represent": 698, "numpi": [698, 702], "arrow": 698, "In": 698, "out": 698, "perform": 698, "tip": 698, "persist": 698, "wait": 698, "interoper": 700, "cupi": [700, 704], "arrai": [700, 704], "interweav": 700, "smooth": 700, "pydata": 700, "workflow": 700, "spars": 700, "matrix": 700, "multi": 701, "gpu": 701, "work": [701, 707], "navig": 701, "support": [702, 703, 706, 709], "A": 702, "decim": 702, "nest": 702, "summari": [703, 704], "limit": [703, 709], "calcul": [703, 707], "overview": 704, "user": [704, 705], "defin": 704, "udf": 704, "addit": 704, "scalar": 704, "argument": 704, "control": 704, "custom": 704, "numba": 704, "kernel": 704, "null": [704, 707, 709], "caveat": 704, "i": 706, "o": 706, "magnum": 706, "gpudirect": 706, "storag": 706, "integr": 706, "nvcomp": 706, "current": 706, "polici": 706, "how": 707, "detect": 707, "float": [707, 709], "nan": 707, "na": 707, "fill": 707, "axi": 707, "regular": 707, "express": 707, "comparison": 709, "result": 709, "point": 709, "No": 709, "true": 709}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [704, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.empty": [[48, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[49, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[50, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[51, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[52, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[53, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[54, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[55, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[56, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[57, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_pandas": [[58, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[59, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[60, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[61, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[62, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[63, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[64, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[65, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[66, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[67, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[68, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[69, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[70, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[71, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[72, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[73, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[74, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[75, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[76, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[77, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[78, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[79, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[80, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[81, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[82, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[83, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[84, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[85, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[86, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[87, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[88, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[89, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[90, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[91, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[92, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[93, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[94, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[95, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[96, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[97, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[98, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[99, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[100, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[101, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[102, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[103, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[104, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[105, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[106, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[107, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[108, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[109, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[110, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[111, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[112, "cudf-dataframe-pivot"]], "cudf.DataFrame.pop": [[113, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[114, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[115, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[116, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[117, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[117, "PandasCompat-0"], [123, "PandasCompat-0"], [183, "PandasCompat-0"], [266, "PandasCompat-0"], [390, "PandasCompat-0"], [445, "PandasCompat-0"], [575, "PandasCompat-0"], [584, "PandasCompat-0"], [699, null], [699, null], [699, null], [699, null], [699, null], [699, null], [699, null], [699, null]], "cudf.DataFrame.quantiles": [[118, "cudf-dataframe-quantiles"]], "cudf.DataFrame.query": [[119, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[120, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[121, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[122, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[123, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[124, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[125, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[126, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[127, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[128, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[129, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[130, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[131, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[132, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[133, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[134, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[135, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[136, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[137, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[138, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[139, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[140, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[141, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[142, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[143, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[144, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[145, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[146, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[147, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[148, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[149, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[150, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[151, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[152, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[153, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[154, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[155, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[156, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[157, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[158, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[159, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[160, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[161, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[162, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[163, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[164, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[165, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[166, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[167, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[168, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[169, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[170, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[171, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[172, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[173, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[174, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[175, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[176, "cudf-dataframe-truediv"]], "cudf.DataFrame.unstack": [[177, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[178, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[179, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[180, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[181, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[182, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[183, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[184, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[185, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[186, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[187, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[188, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[189, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[190, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[191, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[192, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[193, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.minute": [[194, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[195, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.quarter": [[196, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[197, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[198, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[199, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[200, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[201, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[202, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[203, "cudf-float64index"]], "cudf.Grouper": [[204, "cudf-grouper"]], "cudf.Index": [[205, "cudf-index"]], "cudf.Index.any": [[206, "cudf-index-any"]], "cudf.Index.append": [[207, "cudf-index-append"]], "cudf.Index.copy": [[208, "cudf-index-copy"]], "cudf.Index.deserialize": [[209, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[210, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[211, "cudf-index-device-serialize"]], "cudf.Index.difference": [[212, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[213, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[214, "cudf-index-dropna"]], "cudf.Index.fillna": [[215, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[216, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[217, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[218, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[219, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[220, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[221, "cudf-index-has-duplicates"]], "cudf.Index.host_deserialize": [[222, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[223, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[224, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[225, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[226, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[227, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[228, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[229, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[230, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[231, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[232, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[233, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[234, "cudf-index-is-object"]], "cudf.Index.isin": [[235, "cudf-index-isin"]], "cudf.Index.join": [[236, "cudf-index-join"]], "cudf.Index.names": [[237, "cudf-index-names"]], "cudf.Index.nlevels": [[238, "cudf-index-nlevels"]], "cudf.Index.rename": [[239, "cudf-index-rename"]], "cudf.Index.repeat": [[240, "cudf-index-repeat"]], "cudf.Index.serialize": [[241, "cudf-index-serialize"]], "cudf.Index.set_names": [[242, "cudf-index-set-names"]], "cudf.Index.size": [[243, "cudf-index-size"]], "cudf.Index.sort_values": [[244, "cudf-index-sort-values"]], "cudf.Index.take": [[245, "cudf-index-take"]], "cudf.Index.to_dlpack": [[246, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[247, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[248, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[249, "cudf-index-to-series"]], "cudf.Index.union": [[250, "cudf-index-union"]], "cudf.Index.unique": [[251, "cudf-index-unique"]], "cudf.Index.values": [[252, "cudf-index-values"]], "cudf.Int64Index": [[253, "cudf-int64index"]], "cudf.IntervalIndex": [[254, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[255, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[256, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[257, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[258, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[259, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[260, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[261, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[262, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[263, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[264, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[265, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[266, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[267, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[268, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[269, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[270, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[271, "cudf-rangeindex"]], "cudf.Series": [[272, "cudf-series"]], "cudf.Series.T": [[273, "cudf-series-t"]], "cudf.Series.__array__": [[274, "cudf-series-array"]], "cudf.Series.__iter__": [[275, "cudf-series-iter"]], "cudf.Series.abs": [[276, "cudf-series-abs"]], "cudf.Series.add": [[277, "cudf-series-add"]], "cudf.Series.add_prefix": [[278, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[279, "cudf-series-add-suffix"]], "cudf.Series.all": [[280, "cudf-series-all"]], "cudf.Series.any": [[281, "cudf-series-any"]], "cudf.Series.append": [[282, "cudf-series-append"]], "cudf.Series.apply": [[283, "cudf-series-apply"], [704, "cudf-series-apply"]], "cudf.Series.argsort": [[284, "cudf-series-argsort"]], "cudf.Series.astype": [[285, "cudf-series-astype"]], "cudf.Series.autocorr": [[286, "cudf-series-autocorr"]], "cudf.Series.axes": [[287, "cudf-series-axes"]], "cudf.Series.backfill": [[288, "cudf-series-backfill"]], "cudf.Series.between": [[289, "cudf-series-between"]], "cudf.Series.bfill": [[290, "cudf-series-bfill"]], "cudf.Series.cat": [[291, "cudf-series-cat"]], "cudf.Series.clip": [[292, "cudf-series-clip"]], "cudf.Series.copy": [[293, "cudf-series-copy"]], "cudf.Series.corr": [[294, "cudf-series-corr"]], "cudf.Series.count": [[295, "cudf-series-count"]], "cudf.Series.cov": [[296, "cudf-series-cov"]], "cudf.Series.cummax": [[297, "cudf-series-cummax"]], "cudf.Series.cummin": [[298, "cudf-series-cummin"]], "cudf.Series.cumprod": [[299, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[300, "cudf-series-cumsum"]], "cudf.Series.data": [[301, "cudf-series-data"]], "cudf.Series.describe": [[302, "cudf-series-describe"]], "cudf.Series.deserialize": [[303, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[304, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[305, "cudf-series-device-serialize"]], "cudf.Series.diff": [[306, "cudf-series-diff"]], "cudf.Series.digitize": [[307, "cudf-series-digitize"]], "cudf.Series.div": [[308, "cudf-series-div"]], "cudf.Series.divide": [[309, "cudf-series-divide"]], "cudf.Series.dot": [[310, "cudf-series-dot"]], "cudf.Series.drop": [[311, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[312, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[313, "cudf-series-dropna"]], "cudf.Series.dt": [[314, "cudf-series-dt"]], "cudf.Series.dtype": [[315, "cudf-series-dtype"]], "cudf.Series.empty": [[316, "cudf-series-empty"]], "cudf.Series.eq": [[317, "cudf-series-eq"]], "cudf.Series.equals": [[318, "cudf-series-equals"]], "cudf.Series.explode": [[319, "cudf-series-explode"]], "cudf.Series.factorize": [[320, "cudf-series-factorize"]], "cudf.Series.ffill": [[321, "cudf-series-ffill"]], "cudf.Series.fillna": [[322, "cudf-series-fillna"]], "cudf.Series.first": [[323, "cudf-series-first"]], "cudf.Series.floordiv": [[324, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[325, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[326, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[327, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[328, "cudf-series-from-pandas"]], "cudf.Series.ge": [[329, "cudf-series-ge"]], "cudf.Series.groupby": [[330, "cudf-series-groupby"]], "cudf.Series.gt": [[331, "cudf-series-gt"]], "cudf.Series.has_nulls": [[332, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[333, "cudf-series-hash-values"]], "cudf.Series.head": [[334, "cudf-series-head"]], "cudf.Series.host_deserialize": [[335, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[336, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[337, "cudf-series-iloc"]], "cudf.Series.index": [[338, "cudf-series-index"]], "cudf.Series.interpolate": [[339, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[340, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[341, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[342, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[343, "cudf-series-is-unique"]], "cudf.Series.isin": [[344, "cudf-series-isin"]], "cudf.Series.isna": [[345, "cudf-series-isna"]], "cudf.Series.isnull": [[346, "cudf-series-isnull"]], "cudf.Series.items": [[347, "cudf-series-items"]], "cudf.Series.iteritems": [[348, "cudf-series-iteritems"]], "cudf.Series.keys": [[349, "cudf-series-keys"]], "cudf.Series.kurt": [[350, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[351, "cudf-series-kurtosis"]], "cudf.Series.last": [[352, "cudf-series-last"]], "cudf.Series.le": [[353, "cudf-series-le"]], "cudf.Series.list": [[354, "cudf-series-list"]], "cudf.Series.loc": [[355, "cudf-series-loc"]], "cudf.Series.lt": [[356, "cudf-series-lt"]], "cudf.Series.map": [[357, "cudf-series-map"]], "cudf.Series.mask": [[358, "cudf-series-mask"]], "cudf.Series.max": [[359, "cudf-series-max"]], "cudf.Series.mean": [[360, "cudf-series-mean"]], "cudf.Series.median": [[361, "cudf-series-median"]], "cudf.Series.memory_usage": [[362, "cudf-series-memory-usage"]], "cudf.Series.min": [[363, "cudf-series-min"]], "cudf.Series.mod": [[364, "cudf-series-mod"]], "cudf.Series.mode": [[365, "cudf-series-mode"]], "cudf.Series.mul": [[366, "cudf-series-mul"]], "cudf.Series.multiply": [[367, "cudf-series-multiply"]], "cudf.Series.name": [[368, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[369, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[370, "cudf-series-ndim"]], "cudf.Series.ne": [[371, "cudf-series-ne"]], "cudf.Series.nlargest": [[372, "cudf-series-nlargest"]], "cudf.Series.notna": [[373, "cudf-series-notna"]], "cudf.Series.notnull": [[374, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[375, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[376, "cudf-series-null-count"]], "cudf.Series.nullable": [[377, "cudf-series-nullable"]], "cudf.Series.nullmask": [[378, "cudf-series-nullmask"]], "cudf.Series.nunique": [[379, "cudf-series-nunique"]], "cudf.Series.pad": [[380, "cudf-series-pad"]], "cudf.Series.pct_change": [[381, "cudf-series-pct-change"]], "cudf.Series.pipe": [[382, "cudf-series-pipe"]], "cudf.Series.pow": [[383, "cudf-series-pow"]], "cudf.Series.prod": [[384, "cudf-series-prod"]], "cudf.Series.product": [[385, "cudf-series-product"]], "cudf.Series.quantile": [[386, "cudf-series-quantile"]], "cudf.Series.radd": [[387, "cudf-series-radd"]], "cudf.Series.rank": [[388, "cudf-series-rank"]], "cudf.Series.rdiv": [[389, "cudf-series-rdiv"]], "cudf.Series.reindex": [[390, "cudf-series-reindex"]], "cudf.Series.rename": [[391, "cudf-series-rename"]], "cudf.Series.repeat": [[392, "cudf-series-repeat"]], "cudf.Series.replace": [[393, "cudf-series-replace"]], "cudf.Series.resample": [[394, "cudf-series-resample"]], "cudf.Series.reset_index": [[395, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[396, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[397, "cudf-series-rmod"]], "cudf.Series.rmul": [[398, "cudf-series-rmul"]], "cudf.Series.rolling": [[399, "cudf-series-rolling"]], "cudf.Series.round": [[400, "cudf-series-round"]], "cudf.Series.rpow": [[401, "cudf-series-rpow"]], "cudf.Series.rsub": [[402, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[403, "cudf-series-rtruediv"]], "cudf.Series.sample": [[404, "cudf-series-sample"]], "cudf.Series.scale": [[405, "cudf-series-scale"]], "cudf.Series.searchsorted": [[406, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[407, "cudf-series-serialize"]], "cudf.Series.shape": [[408, "cudf-series-shape"]], "cudf.Series.shift": [[409, "cudf-series-shift"]], "cudf.Series.size": [[410, "cudf-series-size"]], "cudf.Series.skew": [[411, "cudf-series-skew"]], "cudf.Series.sort_index": [[412, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[413, "cudf-series-sort-values"]], "cudf.Series.std": [[414, "cudf-series-std"]], "cudf.Series.str": [[415, "cudf-series-str"]], "cudf.Series.struct": [[416, "cudf-series-struct"]], "cudf.Series.sub": [[417, "cudf-series-sub"]], "cudf.Series.subtract": [[418, "cudf-series-subtract"]], "cudf.Series.sum": [[419, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[420, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[421, "cudf-series-tail"]], "cudf.Series.take": [[422, "cudf-series-take"]], "cudf.Series.tile": [[423, "cudf-series-tile"]], "cudf.Series.to_arrow": [[424, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[425, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[426, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[427, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[428, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[429, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[430, "cudf-series-to-json"]], "cudf.Series.to_list": [[431, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[432, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[433, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[434, "cudf-series-to-string"]], "cudf.Series.tolist": [[435, "cudf-series-tolist"]], "cudf.Series.transpose": [[436, "cudf-series-transpose"]], "cudf.Series.truediv": [[437, "cudf-series-truediv"]], "cudf.Series.unique": [[438, "cudf-series-unique"]], "cudf.Series.update": [[439, "cudf-series-update"]], "cudf.Series.valid_count": [[440, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[441, "cudf-series-value-counts"]], "cudf.Series.values": [[442, "cudf-series-values"]], "cudf.Series.values_host": [[443, "cudf-series-values-host"]], "cudf.Series.var": [[444, "cudf-series-var"]], "cudf.Series.where": [[445, "cudf-series-where"]], "cudf.TimedeltaIndex": [[446, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[447, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[448, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[449, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[450, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[451, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[452, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[453, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[454, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[455, "cudf-uint64index"]], "cudf.concat": [[456, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[457, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[458, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[459, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[460, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[461, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[462, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[463, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[464, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[465, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[466, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[467, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[468, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[469, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[470, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[471, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[472, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[473, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[474, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[475, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[476, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[477, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[478, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[479, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[480, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[481, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[482, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[483, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[484, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[485, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[486, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[487, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[488, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[489, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[490, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[491, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[492, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[493, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.findall": [[494, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[495, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[496, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[497, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[498, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[499, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[500, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[501, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[502, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[503, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[504, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[505, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[506, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[507, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[508, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[509, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[510, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[511, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[512, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[513, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[514, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[515, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[516, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[517, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[518, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[519, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[520, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[521, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[522, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[523, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[524, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[525, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[526, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[527, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[528, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[529, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[530, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[531, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[532, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[533, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.repeat": [[534, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[535, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[536, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[537, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[538, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[539, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[540, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[541, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[542, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[543, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[544, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[545, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[546, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[547, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[548, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[549, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[550, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[551, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[552, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[553, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[554, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[555, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[556, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[557, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[558, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[559, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[560, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[561, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[562, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[563, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[564, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[565, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[566, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[567, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[568, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[569, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[570, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[571, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[572, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[573, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[574, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[575, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[576, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[577, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[578, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[579, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[580, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[581, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[582, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[583, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[584, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[585, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[586, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[587, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[588, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[589, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[590, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[591, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[592, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[593, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[594, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.max": [[595, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[596, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[597, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[598, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.nth": [[599, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.pad": [[600, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[601, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[602, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.size": [[603, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[604, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[605, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[606, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[607, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[608, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[609, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[610, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[611, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[612, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[613, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[614, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[615, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[616, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[617, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[618, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[619, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[620, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[621, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[622, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[623, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[624, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[625, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[626, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.minute": [[627, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[628, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.quarter": [[629, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[630, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[631, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[632, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[633, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[634, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[635, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[636, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[637, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[638, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[639, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[640, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[641, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[642, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[643, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[644, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[645, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[646, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[647, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[648, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[649, "cudf-core-window-rolling-rolling-var"]], "cudf.cut": [[650, "cudf-cut"]], "cudf.describe_option": [[651, "cudf-describe-option"]], "cudf.from_dlpack": [[652, "cudf-from-dlpack"]], "cudf.get_dummies": [[653, "cudf-get-dummies"]], "cudf.get_option": [[654, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[655, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[656, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[657, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[658, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[659, "cudf-melt"]], "cudf.pivot": [[660, "cudf-pivot"]], "cudf.read_avro": [[661, "cudf-read-avro"]], "cudf.read_csv": [[662, "cudf-read-csv"]], "cudf.read_feather": [[663, "cudf-read-feather"]], "cudf.read_hdf": [[664, "cudf-read-hdf"]], "cudf.read_json": [[665, "cudf-read-json"]], "cudf.read_orc": [[666, "cudf-read-orc"]], "cudf.read_parquet": [[667, "cudf-read-parquet"]], "cudf.read_text": [[668, "cudf-read-text"]], "cudf.set_option": [[669, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[670, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[671, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[672, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[673, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[674, "cudf-to-datetime"]], "cudf.to_numeric": [[675, "cudf-to-numeric"]], "cudf.unstack": [[676, "cudf-unstack"]], "DataFrame": [[677, "dataframe"]], "Constructor": [[677, "constructor"], [686, "constructor"], [689, "constructor"]], "Attributes and underlying data": [[677, "attributes-and-underlying-data"]], "Conversion": [[677, "conversion"], [682, "conversion"], [682, "id3"], [682, "id4"], [686, "conversion"]], "Indexing, iteration": [[677, "indexing-iteration"], [680, "indexing-iteration"], [686, "indexing-iteration"]], "Binary operator functions": [[677, "binary-operator-functions"], [686, "binary-operator-functions"]], "Function application, GroupBy & window": [[677, "function-application-groupby-window"], [686, "function-application-groupby-window"]], "Computations / descriptive stats": [[677, "computations-descriptive-stats"], [680, "computations-descriptive-stats"], [686, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[677, "reindexing-selection-label-manipulation"], [686, "reindexing-selection-label-manipulation"]], "Missing data handling": [[677, "missing-data-handling"], [686, "missing-data-handling"]], "Reshaping, sorting, transposing": [[677, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[677, "combining-comparing-joining-merging"], [686, "combining-comparing-joining-merging"]], "Time Series-related": [[677, "time-series-related"], [686, "time-series-related"]], "Serialization / IO / conversion": [[677, "serialization-io-conversion"], [686, "serialization-io-conversion"]], "General Functions": [[678, "general-functions"]], "Data manipulations": [[678, "data-manipulations"]], "Top-level conversions": [[678, "top-level-conversions"]], "Top-level dealing with datetimelike": [[678, "top-level-dealing-with-datetimelike"]], "General Utilities": [[679, "general-utilities"]], "Testing functions": [[679, "testing-functions"]], "GroupBy": [[680, "groupby"], [703, "groupby"]], "Function application": [[680, "function-application"]], "API reference": [[681, "api-reference"]], "API Documentation": [[681, null]], "Index objects": [[682, "index-objects"]], "Index": [[682, "index"]], "Properties": [[682, "properties"]], "Modifying and computations": [[682, "modifying-and-computations"], [682, "id1"]], "Compatibility with MultiIndex": [[682, "compatibility-with-multiindex"]], "Missing values": [[682, "missing-values"]], "Memory usage": [[682, "memory-usage"]], "Sorting": [[682, "sorting"]], "Time-specific operations": [[682, "time-specific-operations"], [682, "id2"]], "Combining / joining / set operations": [[682, "combining-joining-set-operations"]], "Selecting": [[682, "selecting"]], "Numeric Index": [[682, "numeric-index"]], "CategoricalIndex": [[682, "categoricalindex"]], "Categorical components": [[682, "categorical-components"]], "IntervalIndex": [[682, "intervalindex"]], "IntervalIndex components": [[682, "intervalindex-components"]], "MultiIndex": [[682, "multiindex"], [698, "multiindex"]], "MultiIndex constructors": [[682, "multiindex-constructors"]], "MultiIndex properties": [[682, "multiindex-properties"]], "MultiIndex components": [[682, "multiindex-components"]], "MultiIndex selecting": [[682, "multiindex-selecting"]], "DatetimeIndex": [[682, "datetimeindex"]], "Time/date components": [[682, "time-date-components"]], "TimedeltaIndex": [[682, "timedeltaindex"]], "Components": [[682, "components"]], "Input/output": [[683, "input-output"]], "CSV": [[683, "csv"], [698, "csv"]], "Text": [[683, "text"]], "JSON": [[683, "json"]], "Parquet": [[683, "parquet"], [698, "parquet"]], "ORC": [[683, "orc"], [698, "orc"]], "HDFStore: PyTables (HDF5)": [[683, "hdfstore-pytables-hdf5"]], "Feather": [[683, "feather"]], "Avro": [[683, "avro"]], "List handling": [[684, "list-handling"], [686, "list-handling"]], "cudf Options": [[685, "cudf-options"]], "Series": [[686, "series"]], "Attributes": [[686, "attributes"]], "Reshaping, sorting": [[686, "reshaping-sorting"]], "Accessors": [[686, "accessors"]], "Datetimelike properties": [[686, "datetimelike-properties"]], "Datetime properties": [[686, "datetime-properties"]], "Datetime methods": [[686, "datetime-methods"]], "Timedelta properties": [[686, "timedelta-properties"]], "String handling": [[686, "string-handling"], [687, "string-handling"]], "Categorical accessor": [[686, "categorical-accessor"]], "Struct handling": [[686, "struct-handling"], [688, "struct-handling"]], "SubwordTokenizer": [[689, "subwordtokenizer"]], "Window": [[690, "window"]], "Rolling window functions": [[690, "rolling-window-functions"]], "Benchmarking cuDF": [[691, "benchmarking-cudf"]], "Benchmark organization": [[691, "benchmark-organization"]], "Running benchmarks": [[691, "running-benchmarks"]], "Benchmark contents": [[691, "benchmark-contents"]], "Benchmark configuration": [[691, "benchmark-configuration"]], "Writing benchmarks": [[691, "writing-benchmarks"]], "Parametrizing tests": [[691, "parametrizing-tests"]], "Comparing to pandas": [[691, "comparing-to-pandas"], [693, "comparing-to-pandas"]], "Testing benchmarks": [[691, "testing-benchmarks"]], "Profiling": [[691, "profiling"]], "Advanced Topics": [[691, "advanced-topics"]], "Understanding benchmark_with_object": [[691, "understanding-benchmark-with-object"]], "Fixture unions": [[691, "fixture-unions"]], "The benchmark_with_object decorator": [[691, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[692, "contributing-guide"]], "Directory structure and file naming": [[692, "directory-structure-and-file-naming"]], "Code style": [[692, "code-style"]], "Deprecating and removing code": [[692, "deprecating-and-removing-code"]], "pandas compatibility": [[692, "pandas-compatibility"]], "Python vs Cython": [[692, "python-vs-cython"]], "Exception handling": [[692, "exception-handling"]], "Handling libcudf Exceptions": [[692, "handling-libcudf-exceptions"]], "Writing documentation": [[693, "writing-documentation"]], "Docstrings": [[693, "docstrings"]], "Published documentation": [[693, "published-documentation"]], "Writing documentation pages": [[693, "writing-documentation-pages"]], "Building documentation": [[693, "building-documentation"]], "Requirements": [[693, "requirements"]], "Building and viewing docs": [[693, "building-and-viewing-docs"]], "Documenting cuDF internals": [[693, "documenting-cudf-internals"]], "Developer Guide": [[694, "developer-guide"]], "Library Design": [[695, "library-design"]], "The Frame layer": [[695, "the-frame-layer"]], "Frames": [[695, "frames"]], "Indexes": [[695, "indexes"]], "The Column layer": [[695, "the-column-layer"]], "ColumnAccessor": [[695, "columnaccessor"]], "Columns": [[695, "columns"]], "Data types": [[695, "data-types"], [709, "data-types"]], "Buffer": [[695, "buffer"]], "The Cython layer": [[695, "the-cython-layer"]], "Putting It All Together": [[695, "putting-it-all-together"]], "Options": [[696, "options"], [708, "options"]], "Welcome to cuDF\u2019s documentation!": [[697, "welcome-to-cudf-s-documentation"]], "Contents:": [[697, null]], "Indices and tables": [[697, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[698, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[698, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[698, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[698, "object-creation"]], "Viewing Data": [[698, "viewing-data"]], "Selection": [[698, "selection"]], "Getting": [[698, "getting"]], "Selection by Label": [[698, "selection-by-label"]], "Selection by Position": [[698, "selection-by-position"]], "Boolean Indexing": [[698, "boolean-indexing"]], "Missing Data": [[698, "missing-data"]], "Operations": [[698, "operations"]], "Stats": [[698, "stats"]], "Applymap": [[698, "applymap"]], "Histogramming": [[698, "histogramming"]], "String Methods": [[698, "string-methods"]], "Concat": [[698, "concat"]], "Join": [[698, "join"]], "Grouping": [[698, "grouping"], [703, "grouping"]], "Transpose": [[698, "transpose"]], "Time Series": [[698, "time-series"]], "Categoricals": [[698, "categoricals"]], "Converting Data Representation": [[698, "converting-data-representation"]], "Pandas": [[698, "pandas"]], "Numpy": [[698, "numpy"]], "Arrow": [[698, "arrow"]], "Getting Data In/Out": [[698, "getting-data-in-out"]], "Dask Performance Tips": [[698, "dask-performance-tips"]], "Persisting Data": [[698, "persisting-data"]], "Wait": [[698, "wait"]], "Pandas Compatibility Notes": [[699, "pandas-compatibility-notes"]], "Interoperability between cuDF and CuPy": [[700, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[700, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[700, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[700, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[700, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[700, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[700, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Multi-GPU with Dask-cuDF": [[701, "multi-gpu-with-dask-cudf"]], "What works": [[701, "what-works"]], "Developing the API": [[701, "developing-the-api"]], "Navigating the API": [[701, "navigating-the-api"]], "Supported Data Types": [[702, "supported-data-types"]], "NumPy data types": [[702, "numpy-data-types"]], "A note on object": [[702, "a-note-on-object"]], "Decimal data types": [[702, "decimal-data-types"]], "Nested data types (List and Struct)": [[702, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[703, "summary-of-supported-operations"]], "Grouping by index levels": [[703, "grouping-by-index-levels"]], "The Grouper object": [[703, "the-grouper-object"]], "Aggregation": [[703, "aggregation"]], "GroupBy apply": [[703, "groupby-apply"]], "Limitations": [[703, "limitations"]], "Transform": [[703, "transform"]], "Rolling window calculations": [[703, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[704, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[704, "series-udfs"]], "Functions with Additional Scalar Arguments": [[704, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[704, "nullable-data"]], "String data": [[704, "string-data"]], "Lower level control with custom numba kernels": [[704, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[704, "dataframe-udfs"]], "String Data": [[704, "id1"]], "Numba kernels for DataFrames": [[704, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[704, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[704, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[704, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[704, "numba-kernels-on-cupy-arrays"]], "Caveats": [[704, "caveats"]], "Summary": [[704, "summary"]], "User Guide": [[705, "user-guide"]], "Input / Output": [[706, "input-output"]], "I/O Supported dtypes": [[706, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[706, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[706, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[706, "id1"]], "Working with missing data": [[707, "working-with-missing-data"]], "How to Detect missing values": [[707, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[707, "float-dtypes-and-missing-data"]], "Datetimes": [[707, "datetimes"]], "Calculations with missing data": [[707, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[707, "sum-product-of-null-nans"]], "NA values in GroupBy": [[707, "na-values-in-groupby"]], "Inserting missing data": [[707, "inserting-missing-data"]], "Filling missing values: fillna": [[707, "filling-missing-values-fillna"]], "Filling with cudf Object": [[707, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[707, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[707, "replacing-generic-values"]], "String/regular expression replacement": [[707, "string-regular-expression-replacement"]], "Numeric replacement": [[707, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[709, "comparison-of-cudf-and-pandas"]], "Supported operations": [[709, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[709, "null-or-missing-values"]], "Iteration": [[709, "iteration"]], "Result ordering": [[709, "result-ordering"]], "Floating-point computation": [[709, "floating-point-computation"]], "Column names": [[709, "column-names"]], "No true \"object\" data type": [[709, "no-true-object-data-type"]], ".apply() function limitations": [[709, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "empty (cudf.dataframe property)": [[48, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[49, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[50, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[51, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[52, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[53, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[54, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[55, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[56, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[57, "cudf.DataFrame.from_arrow"]], "from_pandas() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[60, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[61, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[62, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[63, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[64, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[65, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[66, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[67, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[68, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[69, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[70, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[71, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[72, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[73, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[74, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[75, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[76, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[77, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[78, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[79, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[80, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[81, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[82, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[83, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[84, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[85, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[86, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[87, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[88, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[89, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[90, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[91, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[92, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[93, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[94, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[95, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[96, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[97, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[98, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[99, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[100, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[101, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[102, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[103, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[104, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[105, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[106, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[107, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[108, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[109, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[110, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[111, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[112, "cudf.DataFrame.pivot"]], "pop() (cudf.dataframe method)": [[113, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[114, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[115, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[116, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[117, "cudf.DataFrame.quantile"]], "quantiles() (cudf.dataframe method)": [[118, "cudf.DataFrame.quantiles"]], "query() (cudf.dataframe method)": [[119, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[120, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[121, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[122, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[123, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[124, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[125, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[126, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[127, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[128, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[129, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[130, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[131, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[132, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[133, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[134, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[135, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[136, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[137, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[138, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[139, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[140, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[141, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[142, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[143, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[144, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[145, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[146, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[147, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[148, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[149, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[150, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[151, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[152, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[153, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[154, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[155, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[156, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[157, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[158, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[159, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[160, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[161, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[175, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[176, "cudf.DataFrame.truediv"]], "unstack() (cudf.dataframe method)": [[177, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[178, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[179, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[180, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[181, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[182, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[183, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[184, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[185, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[186, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[187, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[188, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[190, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.isocalendar"]], "minute (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.month"]], "quarter (cudf.datetimeindex property)": [[196, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[197, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[199, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[200, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[202, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[203, "cudf.Float64Index"]], "grouper (class in cudf)": [[204, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[204, "cudf.Grouper.__init__"]], "index (class in cudf)": [[205, "cudf.Index"]], "any() (cudf.index method)": [[206, "cudf.Index.any"]], "append() (cudf.index method)": [[207, "cudf.Index.append"]], "copy() (cudf.index method)": [[208, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[209, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[210, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[211, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[212, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[213, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[214, "cudf.Index.dropna"]], "fillna() (cudf.index method)": [[215, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[216, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[217, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[218, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[219, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[220, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[221, "cudf.Index.has_duplicates"]], "host_deserialize() (cudf.index class method)": [[222, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[223, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[224, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[225, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[226, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[227, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[228, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[229, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[230, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[231, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[232, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[233, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[234, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[235, "cudf.Index.isin"]], "join() (cudf.index method)": [[236, "cudf.Index.join"]], "names (cudf.index property)": [[237, "cudf.Index.names"]], "nlevels (cudf.index property)": [[238, "cudf.Index.nlevels"]], "rename() (cudf.index method)": [[239, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[240, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[241, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[242, "cudf.Index.set_names"]], "size (cudf.index property)": [[243, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[244, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[245, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[246, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[247, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[248, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[249, "cudf.Index.to_series"]], "union() (cudf.index method)": [[250, "cudf.Index.union"]], "unique() (cudf.index method)": [[251, "cudf.Index.unique"]], "values (cudf.index property)": [[252, "cudf.Index.values"]], "int64index (class in cudf)": [[253, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[254, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[254, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[255, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[256, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[257, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[258, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[259, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[260, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[261, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[262, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[263, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[264, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[265, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[266, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[267, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[268, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[269, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[270, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[271, "cudf.RangeIndex"]], "series (class in cudf)": [[272, "cudf.Series"]], "t (cudf.series property)": [[273, "cudf.Series.T"]], "__array__() (cudf.series method)": [[274, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[275, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[276, "cudf.Series.abs"]], "add() (cudf.series method)": [[277, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[278, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[279, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[280, "cudf.Series.all"]], "any() (cudf.series method)": [[281, "cudf.Series.any"]], "append() (cudf.series method)": [[282, "cudf.Series.append"]], "apply() (cudf.series method)": [[283, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[284, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[285, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[286, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[287, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[288, "cudf.Series.backfill"]], "between() (cudf.series method)": [[289, "cudf.Series.between"]], "bfill() (cudf.series method)": [[290, "cudf.Series.bfill"]], "cat (cudf.series property)": [[291, "cudf.Series.cat"]], "clip() (cudf.series method)": [[292, "cudf.Series.clip"]], "copy() (cudf.series method)": [[293, "cudf.Series.copy"]], "corr() (cudf.series method)": [[294, "cudf.Series.corr"]], "count() (cudf.series method)": [[295, "cudf.Series.count"]], "cov() (cudf.series method)": [[296, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[297, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[298, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[299, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[300, "cudf.Series.cumsum"]], "data (cudf.series property)": [[301, "cudf.Series.data"]], "describe() (cudf.series method)": [[302, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[303, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[304, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[305, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[306, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[307, "cudf.Series.digitize"]], "div() (cudf.series method)": [[308, "cudf.Series.div"]], "divide() (cudf.series method)": [[309, "cudf.Series.divide"]], "dot() (cudf.series method)": [[310, "cudf.Series.dot"]], "drop() (cudf.series method)": [[311, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[312, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[313, "cudf.Series.dropna"]], "dt (cudf.series property)": [[314, "cudf.Series.dt"]], "dtype (cudf.series property)": [[315, "cudf.Series.dtype"]], "empty (cudf.series property)": [[316, "cudf.Series.empty"]], "eq() (cudf.series method)": [[317, "cudf.Series.eq"]], "equals() (cudf.series method)": [[318, "cudf.Series.equals"]], "explode() (cudf.series method)": [[319, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[320, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[321, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[322, "cudf.Series.fillna"]], "first() (cudf.series method)": [[323, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[324, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[325, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[326, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[327, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[328, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[329, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[330, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[331, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[332, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[333, "cudf.Series.hash_values"]], "head() (cudf.series method)": [[334, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[335, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[336, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[337, "cudf.Series.iloc"]], "index (cudf.series property)": [[338, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[339, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[340, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[341, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[342, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[343, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[344, "cudf.Series.isin"]], "isna() (cudf.series method)": [[345, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[346, "cudf.Series.isnull"]], "items() (cudf.series method)": [[347, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[348, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[349, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[350, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[351, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[352, "cudf.Series.last"]], "le() (cudf.series method)": [[353, "cudf.Series.le"]], "list (cudf.series property)": [[354, "cudf.Series.list"]], "loc (cudf.series property)": [[355, "cudf.Series.loc"]], "lt() (cudf.series method)": [[356, "cudf.Series.lt"]], "map() (cudf.series method)": [[357, "cudf.Series.map"]], "mask() (cudf.series method)": [[358, "cudf.Series.mask"]], "max() (cudf.series method)": [[359, "cudf.Series.max"]], "mean() (cudf.series method)": [[360, "cudf.Series.mean"]], "median() (cudf.series method)": [[361, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[362, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[363, "cudf.Series.min"]], "mod() (cudf.series method)": [[364, "cudf.Series.mod"]], "mode() (cudf.series method)": [[365, "cudf.Series.mode"]], "mul() (cudf.series method)": [[366, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[367, "cudf.Series.multiply"]], "name (cudf.series property)": [[368, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[369, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[370, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[371, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[372, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[373, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[374, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[375, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[376, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[377, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[378, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[379, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[380, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[381, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[382, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[383, "cudf.Series.pow"]], "prod() (cudf.series method)": [[384, "cudf.Series.prod"]], "product() (cudf.series method)": [[385, "cudf.Series.product"]], "quantile() (cudf.series method)": [[386, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[387, "cudf.Series.radd"]], "rank() (cudf.series method)": [[388, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[389, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[390, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[391, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[392, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[393, "cudf.Series.replace"]], "resample() (cudf.series method)": [[394, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[395, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[396, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[397, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[398, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[399, "cudf.Series.rolling"]], "round() (cudf.series method)": [[400, "cudf.Series.round"]], "rpow() (cudf.series method)": [[401, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[402, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[403, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[404, "cudf.Series.sample"]], "scale() (cudf.series method)": [[405, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[406, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[407, "cudf.Series.serialize"]], "shape (cudf.series property)": [[408, "cudf.Series.shape"]], "shift() (cudf.series method)": [[409, "cudf.Series.shift"]], "size (cudf.series property)": [[410, "cudf.Series.size"]], "skew() (cudf.series method)": [[411, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[412, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[413, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[414, "cudf.Series.std"]], "str (cudf.series property)": [[415, "cudf.Series.str"]], "struct (cudf.series property)": [[416, "cudf.Series.struct"]], "sub() (cudf.series method)": [[417, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[418, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[419, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[420, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[421, "cudf.Series.tail"]], "take() (cudf.series method)": [[422, "cudf.Series.take"]], "tile() (cudf.series method)": [[423, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[424, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[425, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[426, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[427, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[428, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[429, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[430, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[431, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[432, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[433, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[434, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[435, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[436, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[437, "cudf.Series.truediv"]], "unique() (cudf.series method)": [[438, "cudf.Series.unique"]], "update() (cudf.series method)": [[439, "cudf.Series.update"]], "valid_count (cudf.series property)": [[440, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[441, "cudf.Series.value_counts"]], "values (cudf.series property)": [[442, "cudf.Series.values"]], "values_host (cudf.series property)": [[443, "cudf.Series.values_host"]], "var() (cudf.series method)": [[444, "cudf.Series.var"]], "where() (cudf.series method)": [[445, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[446, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[447, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[448, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[449, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[450, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[451, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[452, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[453, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[454, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[455, "cudf.UInt64Index"]], "concat() (in module cudf)": [[456, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[457, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[458, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[459, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[460, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[461, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[462, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[463, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[464, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[465, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[466, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[467, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[468, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[469, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[470, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[471, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[472, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[473, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[474, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[475, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[476, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[477, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[478, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[479, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[480, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[481, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[482, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[483, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[484, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[485, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[486, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[487, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.find"]], "findall() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "repeat() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[560, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[561, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[562, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[563, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[564, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[565, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[566, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[567, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[568, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[569, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[570, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[571, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[572, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[573, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[574, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[575, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[576, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[577, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[578, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[583, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[584, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[585, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[586, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[587, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[588, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[589, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[590, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[591, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[592, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[593, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[594, "cudf.core.groupby.groupby.GroupBy.ffill"]], "max() (cudf.core.groupby.groupby.groupby method)": [[595, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[596, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[597, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.min"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.nth"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.prod"]], "size() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[608, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[609, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[610, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[611, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[612, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[613, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[614, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[615, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[616, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[617, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[618, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[619, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[620, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[621, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[622, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[623, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[624, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[625, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[626, "cudf.core.series.DatetimeProperties.isocalendar"]], "minute (cudf.core.series.datetimeproperties property)": [[627, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[628, "cudf.core.series.DatetimeProperties.month"]], "quarter (cudf.core.series.datetimeproperties property)": [[629, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[630, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[631, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[632, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[633, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[634, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[635, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[636, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[637, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[638, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[639, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[640, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[641, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[642, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[643, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[644, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[645, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[646, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[647, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[648, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[649, "cudf.core.window.rolling.Rolling.var"]], "cut() (in module cudf)": [[650, "cudf.cut"]], "describe_option() (in module cudf)": [[651, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[652, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[653, "cudf.get_dummies"]], "get_option() (in module cudf)": [[654, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[655, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[656, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[657, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[658, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[659, "cudf.melt"]], "pivot() (in module cudf)": [[660, "cudf.pivot"]], "read_avro() (in module cudf)": [[661, "cudf.read_avro"]], "read_csv() (in module cudf)": [[662, "cudf.read_csv"]], "read_feather() (in module cudf)": [[663, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[664, "cudf.read_hdf"]], "read_json() (in module cudf)": [[665, "cudf.read_json"]], "read_orc() (in module cudf)": [[666, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[667, "cudf.read_parquet"]], "read_text() (in module cudf)": [[668, "cudf.read_text"]], "set_option() (in module cudf)": [[669, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[670, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[671, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[672, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[673, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[674, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[675, "cudf.to_numeric"]], "unstack() (in module cudf)": [[676, "cudf.unstack"]]}})