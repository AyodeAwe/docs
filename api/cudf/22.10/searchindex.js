Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.quantiles", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.applymap", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cupy-interop", "user_guide/dask-cudf", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.quantiles.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.applymap.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cupy-interop.ipynb", "user_guide/dask-cudf.md", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.quantiles", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.applymap", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "cudf Options", "Series", "String handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Interoperability between cuDF and CuPy", "Multi-GPU with Dask-cuDF", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 70, 128, 170, 184, 203, 204, 205, 209, 248, 253, 254, 258, 271, 272, 304, 434, 447, 456, 637, 652, 667, 668, 669, 670, 678, 686, 688, 690, 696], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 70, 73, 84, 85, 87, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 134, 135, 136, 137, 142, 146, 152, 153, 154, 155, 156, 160, 164, 166, 167, 176, 178, 181, 183, 184, 185, 190, 197, 203, 205, 211, 217, 223, 225, 226, 227, 228, 229, 233, 234, 236, 241, 246, 253, 254, 255, 261, 272, 277, 283, 286, 292, 294, 303, 306, 309, 310, 311, 312, 318, 324, 325, 327, 328, 329, 330, 331, 332, 335, 337, 340, 353, 354, 357, 359, 360, 361, 364, 365, 367, 368, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 397, 398, 399, 402, 403, 404, 405, 408, 411, 418, 419, 420, 421, 428, 430, 431, 438, 442, 444, 446, 447, 456, 475, 479, 481, 489, 516, 521, 544, 547, 548, 550, 551, 552, 553, 554, 555, 569, 573, 574, 575, 577, 578, 586, 592, 593, 594, 595, 599, 602, 606, 608, 614, 627, 647, 649, 650, 657, 658, 659, 662, 663, 664, 668, 677, 678, 686, 687, 692, 694, 695, 696, 700, 701], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 141, 145, 146, 147, 148, 151, 152, 153, 154, 155, 161, 162, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 183, 184, 199, 200, 203, 204, 205, 212, 215, 217, 219, 220, 224, 236, 240, 242, 244, 245, 247, 249, 250, 253, 254, 255, 256, 258, 262, 263, 264, 266, 270, 271, 272, 274, 277, 280, 281, 284, 285, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 309, 310, 312, 313, 314, 317, 318, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340, 346, 347, 351, 352, 354, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 410, 411, 412, 413, 415, 418, 419, 420, 421, 425, 426, 429, 431, 433, 434, 435, 438, 439, 442, 445, 446, 447, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 479, 481, 482, 486, 488, 489, 490, 491, 494, 497, 498, 507, 518, 519, 522, 532, 533, 535, 536, 539, 540, 541, 543, 544, 545, 546, 551, 556, 562, 563, 569, 571, 572, 573, 574, 575, 576, 578, 582, 583, 591, 592, 593, 594, 595, 597, 599, 602, 606, 647, 648, 650, 652, 656, 657, 658, 659, 660, 662, 663, 664, 665, 671, 672, 673, 693, 694, 699, 702], "categori": [0, 2, 21, 36, 93, 94, 226, 234, 286, 292, 303, 321, 327, 458, 459, 460, 463, 464, 465, 466, 494, 526, 647, 650, 667, 670, 690, 693, 696, 697, 701, 704], "order": [0, 14, 17, 19, 21, 43, 45, 61, 80, 94, 103, 106, 121, 140, 142, 149, 156, 166, 171, 179, 184, 203, 236, 241, 244, 253, 285, 286, 311, 313, 321, 331, 366, 373, 376, 389, 407, 408, 414, 430, 442, 447, 456, 459, 460, 465, 466, 471, 473, 483, 550, 647, 649, 652, 659, 662, 667, 668, 669, 670, 671, 686, 693, 698, 700], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 51, 54, 56, 58, 59, 60, 61, 62, 63, 64, 68, 70, 72, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 162, 168, 170, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 240, 242, 244, 245, 248, 249, 250, 253, 254, 255, 258, 260, 267, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 290, 292, 293, 294, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 345, 346, 347, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 418, 419, 420, 421, 423, 426, 429, 433, 434, 438, 439, 440, 442, 445, 446, 447, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 569, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 647, 650, 659, 662, 664, 667, 668, 669, 670, 671, 672, 673, 682, 686, 690, 693, 694, 695, 697, 698, 699, 700, 704], "copi": [0, 5, 21, 44, 45, 46, 54, 123, 124, 162, 164, 168, 174, 175, 184, 203, 205, 244, 246, 253, 254, 255, 258, 271, 286, 312, 323, 391, 392, 426, 428, 433, 447, 456, 458, 459, 460, 464, 465, 466, 521, 532, 557, 649, 664, 688, 690, 701, 704], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 70, 71, 73, 74, 75, 76, 80, 85, 87, 88, 93, 94, 97, 100, 102, 104, 105, 117, 121, 123, 124, 126, 128, 132, 137, 140, 141, 143, 148, 149, 158, 160, 162, 166, 167, 170, 171, 178, 179, 183, 184, 203, 205, 212, 213, 217, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 250, 253, 254, 255, 256, 258, 266, 271, 272, 280, 281, 282, 284, 286, 290, 293, 294, 303, 308, 311, 312, 313, 314, 317, 318, 319, 320, 323, 329, 330, 331, 332, 333, 340, 345, 346, 347, 354, 357, 359, 363, 366, 370, 372, 374, 375, 389, 394, 396, 400, 405, 407, 413, 414, 423, 426, 430, 431, 434, 440, 442, 446, 447, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 471, 478, 481, 486, 487, 488, 489, 494, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 526, 532, 539, 544, 545, 555, 572, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 616, 617, 619, 620, 621, 622, 638, 647, 650, 652, 653, 659, 662, 664, 667, 668, 669, 670, 671, 686, 691, 693, 694, 695, 698, 699, 702], "name": [0, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 49, 51, 56, 59, 60, 61, 62, 68, 71, 74, 75, 76, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106, 109, 112, 114, 117, 119, 120, 122, 123, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 146, 148, 149, 152, 153, 161, 166, 169, 171, 174, 176, 177, 178, 184, 199, 200, 203, 205, 218, 236, 239, 242, 244, 247, 249, 253, 254, 255, 258, 259, 260, 262, 263, 264, 267, 270, 271, 272, 277, 285, 286, 303, 309, 310, 312, 313, 318, 325, 330, 331, 332, 338, 345, 346, 347, 354, 356, 357, 360, 361, 364, 365, 367, 368, 372, 374, 375, 384, 387, 388, 390, 392, 396, 397, 398, 399, 401, 402, 403, 404, 405, 411, 413, 418, 419, 429, 430, 438, 447, 454, 455, 456, 457, 539, 558, 561, 580, 605, 623, 648, 650, 651, 652, 655, 656, 657, 659, 661, 666, 667, 668, 669, 670, 673, 686, 688, 689, 690, 691, 693, 697, 698, 699, 700, 702], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 48, 51, 54, 55, 58, 61, 63, 65, 70, 84, 88, 107, 111, 119, 123, 124, 125, 126, 127, 132, 133, 137, 139, 142, 161, 166, 167, 181, 183, 192, 209, 210, 217, 222, 240, 241, 258, 260, 278, 279, 282, 303, 304, 305, 308, 312, 315, 317, 323, 324, 327, 329, 331, 334, 336, 353, 359, 378, 383, 393, 394, 395, 400, 401, 405, 408, 430, 431, 439, 444, 446, 457, 474, 476, 481, 482, 486, 487, 498, 503, 519, 521, 532, 542, 543, 545, 547, 548, 552, 553, 554, 561, 580, 586, 598, 603, 605, 616, 638, 639, 647, 649, 652, 656, 659, 661, 672, 686, 687, 688, 690, 693, 698, 699, 700, 702], "categor": [0, 1, 2, 21, 36, 93, 94, 225, 226, 227, 228, 229, 233, 234, 286, 292, 303, 327, 647, 650, 664, 667, 668, 669, 670, 690, 697, 698, 700, 704], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 68, 70, 71, 73, 74, 75, 76, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 166, 167, 168, 170, 171, 173, 176, 178, 179, 181, 182, 183, 200, 205, 212, 214, 215, 217, 218, 224, 230, 231, 232, 235, 244, 245, 249, 251, 256, 265, 272, 276, 277, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 426, 430, 431, 433, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 455, 457, 464, 466, 467, 468, 471, 474, 476, 480, 481, 483, 489, 494, 495, 496, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 523, 529, 531, 532, 538, 539, 543, 544, 553, 555, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 604, 606, 607, 638, 639, 647, 650, 651, 656, 657, 659, 662, 664, 666, 668, 669, 670, 672, 682, 683, 686, 688, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 703], "repres": [0, 23, 127, 144, 151, 161, 167, 182, 184, 272, 288, 290, 395, 409, 415, 431, 445, 447, 476, 494, 495, 496, 513, 613, 644, 646, 647, 650, 686, 690, 697, 702, 704], "indic": [0, 19, 28, 46, 48, 54, 73, 75, 76, 94, 104, 105, 111, 140, 158, 167, 178, 192, 196, 207, 244, 245, 266, 285, 294, 308, 314, 317, 321, 323, 333, 340, 345, 346, 347, 374, 375, 378, 383, 407, 423, 431, 457, 468, 472, 474, 481, 483, 486, 519, 529, 534, 538, 545, 598, 616, 617, 618, 619, 620, 621, 622, 626, 638, 647, 650, 659, 662, 677, 687, 690, 694, 699], "anoth": [0, 40, 162, 166, 168, 178, 282, 307, 358, 426, 430, 433, 555, 690], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 74, 77, 80, 81, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 141, 143, 146, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 193, 199, 246, 247, 262, 264, 270, 272, 277, 278, 279, 280, 281, 284, 285, 286, 292, 298, 299, 300, 301, 303, 309, 310, 312, 314, 317, 318, 319, 323, 325, 330, 331, 332, 334, 335, 338, 351, 352, 354, 356, 357, 360, 361, 364, 365, 367, 368, 372, 380, 384, 385, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 411, 413, 415, 418, 419, 420, 422, 424, 426, 428, 429, 430, 431, 433, 435, 438, 445, 454, 457, 561, 564, 570, 572, 573, 574, 575, 577, 578, 580, 584, 585, 586, 592, 593, 594, 595, 599, 601, 602, 604, 605, 606, 607, 623, 637, 638, 639, 649, 650, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 677, 678, 686, 689, 693, 694, 695, 696, 698, 699, 700, 702], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 185, 190, 197, 199, 200, 203, 205, 207, 209, 210, 212, 215, 217, 218, 220, 222, 224, 235, 236, 239, 240, 242, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 340, 345, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 376, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 412, 413, 414, 415, 418, 419, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 438, 440, 442, 445, 446, 447, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 471, 472, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 501, 502, 518, 520, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 555, 556, 558, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 608, 614, 627, 629, 637, 638, 639, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 686, 687, 688, 701, 702], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 71, 88, 94, 117, 118, 119, 121, 123, 125, 126, 137, 140, 158, 162, 167, 168, 183, 184, 203, 205, 212, 224, 235, 240, 244, 245, 250, 253, 254, 255, 256, 258, 263, 266, 272, 282, 285, 293, 302, 308, 321, 326, 327, 328, 331, 359, 387, 389, 393, 394, 405, 407, 423, 425, 426, 431, 433, 446, 447, 456, 480, 484, 518, 533, 577, 639, 647, 650, 662, 671, 690, 693, 694, 700], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 49, 52, 54, 56, 59, 60, 62, 71, 85, 87, 88, 94, 96, 97, 98, 99, 102, 114, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 152, 153, 158, 166, 167, 176, 177, 179, 183, 184, 185, 190, 197, 203, 205, 212, 215, 224, 235, 245, 250, 253, 254, 255, 260, 262, 264, 272, 277, 282, 284, 290, 293, 303, 309, 310, 311, 312, 315, 318, 320, 323, 325, 327, 328, 330, 332, 345, 354, 357, 359, 365, 367, 368, 372, 384, 387, 388, 389, 390, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 418, 419, 423, 430, 431, 438, 446, 447, 456, 457, 458, 464, 465, 466, 472, 481, 484, 486, 501, 502, 506, 518, 526, 532, 533, 539, 545, 569, 577, 608, 614, 627, 647, 650, 658, 659, 662, 663, 664, 665, 667, 668, 670, 671, 673, 679, 682, 683, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 702, 704], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 71, 72, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 171, 173, 176, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 203, 205, 207, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 434, 435, 438, 439, 440, 442, 445, 446, 447, 451, 452, 453, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 569, 570, 572, 578, 580, 581, 584, 586, 598, 601, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 644, 646, 647, 650, 652, 655, 656, 657, 658, 659, 660, 663, 664, 668, 669, 670, 671, 672, 673, 693, 694, 695, 697, 698, 699, 702, 704], "dimension": [0, 144, 184, 203, 205, 253, 254, 255, 258, 272, 409, 447, 456, 539, 544, 647], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 50, 51, 55, 59, 64, 65, 66, 70, 72, 74, 80, 84, 93, 97, 103, 107, 109, 110, 115, 116, 123, 125, 126, 127, 132, 141, 142, 148, 150, 151, 154, 156, 159, 162, 167, 168, 171, 179, 180, 182, 186, 187, 188, 189, 191, 194, 195, 198, 200, 201, 202, 203, 205, 209, 210, 211, 222, 223, 227, 235, 240, 241, 242, 244, 245, 249, 253, 256, 257, 258, 262, 266, 272, 278, 279, 283, 284, 285, 287, 302, 303, 304, 305, 306, 311, 313, 319, 324, 327, 328, 335, 336, 337, 345, 353, 363, 373, 376, 379, 382, 385, 386, 393, 394, 395, 396, 400, 408, 413, 415, 420, 424, 426, 431, 433, 442, 443, 445, 455, 456, 457, 458, 461, 464, 465, 466, 473, 476, 478, 479, 481, 483, 484, 485, 487, 489, 490, 492, 494, 501, 502, 505, 506, 513, 516, 518, 523, 524, 525, 526, 529, 530, 532, 533, 538, 539, 542, 544, 549, 550, 555, 556, 573, 574, 575, 577, 578, 581, 586, 592, 593, 594, 595, 599, 601, 602, 604, 606, 608, 609, 610, 611, 612, 614, 615, 624, 625, 627, 628, 629, 630, 631, 638, 644, 646, 647, 648, 651, 656, 659, 661, 662, 663, 664, 665, 666, 671, 672, 677, 687, 688, 689, 691, 693, 694, 695, 696, 697, 699, 701, 702, 704], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 70, 71, 74, 84, 85, 87, 89, 90, 94, 95, 96, 97, 98, 99, 102, 111, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 170, 171, 176, 177, 178, 182, 184, 200, 205, 217, 236, 242, 249, 254, 255, 256, 262, 263, 266, 272, 277, 280, 281, 282, 285, 293, 298, 299, 300, 301, 303, 309, 310, 311, 312, 313, 314, 317, 318, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 345, 353, 354, 357, 358, 360, 361, 364, 365, 367, 368, 372, 383, 384, 385, 386, 387, 388, 390, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 413, 414, 415, 418, 419, 420, 430, 431, 434, 438, 440, 442, 445, 447, 455, 465, 466, 467, 469, 471, 476, 481, 486, 487, 489, 492, 494, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 522, 526, 529, 532, 538, 539, 540, 544, 545, 546, 564, 572, 573, 574, 575, 585, 592, 593, 594, 595, 599, 602, 606, 637, 638, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 662, 663, 664, 666, 668, 669, 671, 672, 673, 686, 687, 688, 693, 694, 695, 696, 699, 701, 704], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 50, 51, 54, 61, 75, 76, 82, 83, 88, 89, 91, 92, 94, 95, 97, 103, 104, 105, 106, 111, 112, 115, 116, 117, 119, 121, 123, 126, 127, 132, 133, 137, 140, 141, 142, 147, 151, 154, 166, 167, 171, 178, 179, 182, 183, 192, 196, 212, 213, 218, 224, 230, 231, 232, 235, 241, 250, 254, 255, 256, 258, 262, 272, 276, 278, 279, 280, 281, 283, 284, 285, 290, 294, 303, 312, 314, 317, 319, 323, 327, 328, 331, 341, 342, 343, 344, 345, 346, 347, 351, 352, 358, 359, 360, 362, 364, 373, 374, 375, 376, 383, 385, 386, 387, 389, 394, 395, 400, 401, 405, 407, 408, 412, 415, 420, 430, 431, 440, 445, 446, 457, 465, 466, 467, 476, 481, 484, 485, 486, 487, 489, 490, 492, 494, 498, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 518, 522, 523, 526, 532, 533, 539, 540, 542, 544, 545, 546, 551, 553, 554, 555, 556, 557, 573, 574, 575, 586, 592, 593, 594, 595, 599, 602, 606, 616, 617, 618, 619, 620, 621, 622, 626, 629, 638, 647, 650, 652, 656, 657, 659, 661, 662, 663, 664, 667, 668, 669, 670, 677, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704], "given": [0, 21, 44, 103, 112, 117, 118, 125, 126, 127, 128, 133, 137, 140, 171, 220, 240, 262, 286, 312, 328, 387, 393, 394, 395, 396, 401, 405, 407, 465, 466, 469, 472, 476, 481, 486, 489, 494, 515, 529, 532, 539, 544, 545, 551, 555, 652, 657, 659, 663, 664, 671, 686, 687, 690, 701], "replac": [0, 46, 88, 137, 148, 183, 314, 359, 405, 413, 446, 489, 490, 498, 518, 533, 541, 543, 678, 686, 687, 688, 693, 695, 700, 704], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 49, 50, 56, 58, 60, 62, 71, 73, 75, 76, 85, 87, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 120, 121, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 148, 152, 153, 166, 167, 170, 176, 205, 217, 227, 233, 244, 272, 277, 285, 303, 309, 310, 318, 319, 325, 329, 330, 332, 340, 346, 347, 354, 357, 358, 365, 366, 367, 368, 370, 372, 374, 375, 380, 384, 388, 389, 390, 391, 397, 398, 399, 400, 402, 403, 404, 413, 418, 419, 430, 431, 434, 438, 440, 442, 467, 471, 473, 481, 532, 569, 640, 650, 659, 694, 699, 700, 704], "list": [0, 4, 8, 11, 14, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 49, 52, 56, 59, 60, 61, 62, 65, 66, 68, 74, 85, 87, 88, 92, 94, 96, 98, 99, 102, 103, 106, 109, 112, 114, 117, 120, 122, 124, 126, 128, 129, 130, 131, 134, 135, 136, 139, 141, 142, 143, 148, 149, 152, 153, 161, 166, 167, 171, 176, 177, 179, 183, 207, 209, 210, 211, 215, 222, 223, 235, 241, 242, 256, 260, 262, 263, 264, 267, 277, 282, 284, 285, 288, 290, 292, 303, 304, 305, 306, 309, 310, 311, 312, 318, 320, 325, 330, 331, 332, 336, 337, 338, 345, 354, 357, 359, 365, 367, 368, 372, 384, 387, 388, 390, 394, 396, 397, 398, 399, 402, 403, 404, 408, 413, 414, 418, 419, 430, 431, 438, 446, 457, 458, 464, 466, 476, 478, 481, 485, 486, 501, 502, 518, 532, 539, 544, 545, 549, 550, 561, 569, 578, 580, 605, 607, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 673, 678, 688, 690, 693, 695, 696, 698, 699, 700, 701, 702, 704], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 70, 92, 110, 111, 112, 121, 123, 124, 127, 132, 133, 137, 140, 148, 161, 162, 166, 167, 168, 171, 173, 174, 179, 184, 200, 207, 242, 244, 249, 254, 255, 256, 258, 262, 263, 264, 271, 272, 284, 295, 303, 312, 314, 327, 328, 382, 383, 387, 389, 392, 395, 396, 400, 401, 405, 407, 413, 426, 430, 431, 433, 435, 442, 447, 455, 457, 458, 459, 460, 463, 464, 465, 466, 467, 469, 488, 489, 490, 541, 543, 569, 578, 584, 586, 598, 638, 647, 648, 650, 651, 653, 656, 657, 659, 661, 663, 664, 666, 678, 686, 689, 692, 699, 700, 701], "item": [0, 36, 48, 106, 113, 137, 143, 272, 303, 317, 321, 405, 465, 466, 659, 661], "need": [0, 8, 41, 42, 48, 49, 50, 56, 60, 62, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 160, 176, 272, 277, 284, 295, 309, 310, 317, 318, 319, 325, 330, 332, 354, 357, 365, 367, 368, 372, 378, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 465, 482, 647, 686, 687, 688, 690, 693, 695, 697, 699, 704], "uniqu": [0, 36, 112, 124, 139, 179, 256, 258, 263, 266, 272, 303, 321, 344, 380, 442, 647, 650, 657, 662, 693, 694, 698, 704], "here": [0, 36, 303, 530, 658, 659, 663, 664, 686, 688, 690, 695, 699, 701], "also": [0, 15, 36, 54, 94, 123, 124, 126, 128, 132, 133, 244, 303, 323, 358, 392, 394, 396, 400, 401, 440, 481, 482, 484, 491, 493, 497, 498, 501, 502, 506, 513, 526, 529, 536, 538, 647, 652, 662, 663, 664, 686, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 701, 702, 704], "thei": [0, 50, 94, 97, 121, 126, 171, 272, 319, 327, 328, 376, 389, 394, 476, 483, 494, 550, 555, 652, 686, 687, 688, 690, 692, 697, 698, 699, 704], "infer": [0, 4, 167, 184, 254, 255, 263, 272, 431, 450, 659, 662, 671, 693], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 51, 57, 58, 61, 70, 80, 88, 92, 94, 103, 106, 110, 112, 113, 117, 123, 124, 127, 128, 137, 143, 148, 149, 150, 164, 166, 167, 171, 175, 178, 179, 183, 187, 189, 196, 209, 210, 212, 214, 217, 218, 246, 254, 255, 256, 260, 261, 262, 263, 264, 266, 272, 282, 283, 284, 303, 304, 305, 312, 314, 326, 327, 329, 331, 358, 359, 382, 391, 392, 395, 396, 405, 413, 414, 416, 428, 430, 431, 440, 446, 457, 469, 471, 472, 476, 478, 487, 488, 489, 490, 493, 494, 522, 524, 525, 526, 527, 528, 532, 539, 540, 541, 543, 544, 546, 556, 569, 573, 574, 575, 581, 586, 592, 593, 594, 595, 596, 599, 602, 606, 610, 612, 626, 637, 638, 647, 649, 650, 656, 657, 658, 659, 660, 661, 663, 671, 672, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 699, 704], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 71, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 95, 97, 102, 104, 105, 107, 115, 116, 117, 121, 126, 128, 132, 137, 139, 140, 141, 147, 148, 149, 150, 151, 154, 160, 161, 162, 166, 167, 168, 171, 172, 179, 182, 183, 184, 203, 205, 208, 213, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 242, 244, 250, 253, 254, 255, 258, 271, 272, 280, 281, 282, 283, 284, 285, 286, 290, 293, 294, 298, 299, 300, 301, 303, 308, 311, 312, 313, 314, 317, 318, 319, 320, 329, 330, 331, 332, 333, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 366, 372, 374, 375, 380, 385, 386, 389, 394, 396, 400, 405, 407, 412, 413, 414, 415, 420, 426, 430, 431, 433, 442, 445, 446, 447, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 471, 478, 481, 486, 487, 488, 489, 492, 494, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 526, 529, 532, 538, 539, 544, 545, 564, 572, 573, 574, 575, 585, 592, 593, 594, 595, 599, 602, 606, 616, 617, 619, 620, 621, 622, 637, 638, 647, 652, 659, 661, 663, 667, 668, 669, 670, 671, 699, 701, 702], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 48, 50, 51, 70, 74, 75, 76, 88, 93, 104, 105, 109, 117, 121, 143, 150, 160, 162, 167, 168, 170, 172, 183, 206, 212, 214, 224, 225, 227, 228, 229, 233, 234, 235, 250, 254, 255, 280, 281, 290, 303, 308, 312, 317, 319, 333, 345, 346, 347, 359, 374, 375, 378, 387, 389, 426, 431, 433, 434, 446, 458, 459, 460, 463, 464, 465, 466, 468, 481, 486, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 545, 638, 647, 659, 664, 667, 668, 669, 670, 677, 688, 695], "thi": [0, 1, 2, 7, 8, 14, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 49, 50, 55, 56, 60, 61, 62, 63, 64, 70, 73, 81, 84, 85, 87, 94, 96, 98, 99, 102, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 142, 148, 149, 151, 152, 153, 154, 156, 164, 168, 171, 173, 176, 182, 184, 199, 205, 209, 210, 212, 215, 218, 224, 230, 240, 241, 244, 246, 247, 266, 269, 270, 271, 272, 276, 277, 282, 283, 287, 290, 293, 294, 303, 304, 305, 308, 309, 310, 311, 318, 319, 324, 325, 327, 328, 330, 331, 332, 334, 335, 340, 341, 353, 354, 357, 365, 367, 368, 369, 372, 373, 376, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 413, 414, 415, 416, 418, 419, 420, 428, 433, 435, 438, 439, 445, 447, 450, 454, 458, 459, 460, 461, 464, 465, 466, 469, 475, 476, 480, 482, 484, 485, 488, 489, 490, 492, 497, 499, 500, 503, 504, 505, 506, 508, 510, 512, 513, 514, 517, 518, 521, 522, 524, 525, 526, 529, 533, 534, 536, 538, 539, 540, 544, 546, 547, 548, 551, 552, 555, 557, 572, 578, 586, 598, 637, 638, 647, 649, 650, 652, 659, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 678, 680, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 64, 70, 71, 73, 74, 75, 76, 80, 81, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 184, 192, 203, 205, 206, 210, 212, 215, 217, 218, 225, 226, 227, 228, 229, 230, 233, 234, 235, 240, 241, 242, 244, 246, 253, 256, 262, 264, 266, 271, 272, 273, 277, 280, 281, 282, 283, 284, 285, 286, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 324, 325, 328, 329, 330, 331, 332, 335, 340, 341, 345, 346, 347, 353, 354, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 374, 375, 376, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 411, 413, 414, 415, 418, 419, 420, 422, 426, 428, 430, 431, 433, 434, 435, 437, 438, 440, 442, 445, 446, 447, 450, 456, 457, 465, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 524, 525, 526, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 570, 578, 581, 584, 586, 598, 601, 603, 604, 608, 614, 616, 617, 619, 620, 621, 622, 627, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704], "treat": [0, 12, 13, 73, 94, 183, 280, 281, 290, 340, 446, 465, 466, 481, 524, 532, 539, 544, 556, 694, 699, 701, 702], "an": [0, 3, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 51, 61, 68, 73, 75, 76, 93, 94, 104, 105, 115, 116, 117, 119, 123, 124, 125, 132, 133, 137, 142, 146, 148, 151, 154, 164, 166, 182, 192, 200, 209, 218, 230, 240, 241, 244, 246, 249, 250, 255, 263, 265, 266, 280, 281, 284, 293, 298, 299, 300, 301, 303, 304, 331, 338, 340, 341, 345, 346, 347, 363, 374, 375, 385, 386, 387, 391, 393, 400, 401, 405, 408, 411, 413, 415, 420, 428, 430, 445, 455, 463, 468, 469, 477, 479, 480, 481, 483, 486, 494, 499, 500, 503, 507, 511, 518, 520, 524, 525, 528, 537, 545, 556, 586, 603, 616, 638, 639, 647, 648, 649, 658, 660, 661, 663, 671, 672, 677, 679, 686, 687, 688, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 49, 52, 54, 56, 60, 61, 62, 73, 74, 82, 83, 85, 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 112, 114, 115, 116, 117, 120, 122, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 143, 147, 150, 151, 152, 153, 154, 155, 161, 167, 170, 174, 176, 177, 179, 182, 200, 212, 224, 236, 249, 250, 256, 266, 272, 277, 280, 281, 283, 284, 287, 295, 298, 299, 300, 301, 303, 309, 310, 311, 318, 320, 323, 325, 330, 331, 332, 340, 345, 351, 352, 354, 357, 360, 361, 362, 364, 365, 367, 368, 372, 384, 385, 386, 388, 390, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 407, 412, 415, 418, 419, 420, 421, 431, 434, 438, 442, 445, 455, 457, 466, 467, 471, 476, 477, 489, 518, 520, 528, 537, 556, 561, 569, 572, 573, 574, 575, 580, 581, 584, 586, 592, 593, 594, 595, 598, 599, 602, 603, 605, 606, 647, 656, 657, 662, 665, 672, 673, 686, 687, 688, 690, 693, 694, 696, 697, 698, 699, 700, 702], "unord": [0, 94, 460, 647], "categoricaldtyp": [0, 21, 286, 690, 697], "cannot": [0, 54, 71, 137, 167, 215, 224, 284, 323, 373, 376, 405, 431, 526, 572, 652, 686, 687, 697, 698], "us": [0, 4, 11, 14, 16, 21, 29, 36, 44, 45, 51, 54, 59, 61, 63, 64, 68, 70, 73, 82, 83, 86, 89, 90, 92, 93, 94, 95, 106, 107, 110, 111, 112, 117, 118, 119, 123, 124, 126, 127, 128, 132, 133, 137, 139, 143, 148, 151, 161, 162, 166, 167, 168, 169, 170, 171, 173, 178, 179, 182, 199, 200, 203, 215, 218, 247, 249, 253, 256, 262, 270, 271, 272, 282, 283, 284, 286, 295, 303, 312, 314, 323, 327, 331, 334, 335, 338, 340, 345, 351, 352, 356, 358, 360, 361, 363, 364, 382, 383, 387, 391, 394, 395, 396, 400, 401, 405, 413, 415, 426, 429, 430, 431, 433, 434, 435, 440, 445, 454, 455, 456, 466, 467, 476, 480, 481, 482, 484, 486, 488, 489, 490, 491, 497, 505, 515, 518, 524, 525, 526, 532, 533, 534, 535, 536, 539, 542, 544, 549, 550, 554, 555, 561, 572, 573, 574, 575, 577, 578, 580, 586, 592, 593, 594, 595, 599, 601, 602, 604, 605, 606, 629, 637, 638, 644, 646, 647, 650, 652, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 679, 680, 682, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704], "togeth": [0, 111, 207, 383, 688, 689, 695, 698, 699], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 56, 58, 59, 60, 61, 62, 63, 64, 70, 71, 73, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 110, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 151, 152, 153, 154, 156, 160, 161, 162, 166, 167, 168, 169, 170, 171, 175, 176, 178, 179, 182, 183, 184, 199, 200, 205, 212, 213, 214, 215, 217, 224, 236, 239, 242, 244, 247, 249, 250, 254, 255, 256, 258, 270, 271, 272, 277, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 293, 294, 295, 298, 299, 300, 301, 303, 307, 309, 310, 311, 312, 313, 314, 318, 320, 323, 325, 329, 330, 331, 332, 334, 335, 340, 351, 352, 354, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 372, 373, 376, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 412, 413, 414, 415, 418, 419, 420, 426, 429, 430, 431, 433, 434, 438, 442, 445, 446, 447, 454, 455, 457, 458, 459, 460, 464, 465, 466, 467, 469, 471, 476, 477, 478, 481, 482, 483, 487, 489, 490, 492, 494, 498, 518, 520, 522, 523, 524, 525, 526, 528, 529, 532, 533, 537, 538, 539, 540, 542, 543, 544, 546, 549, 550, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 584, 586, 591, 592, 593, 594, 595, 597, 599, 602, 606, 637, 638, 644, 646, 647, 650, 652, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 686, 687, 693, 698, 699, 701, 702, 703, 704], "make": [0, 28, 48, 184, 203, 205, 253, 262, 263, 264, 294, 317, 440, 447, 456, 489, 532, 539, 544, 551, 659, 663, 686, 687, 688, 690, 693, 695, 699], "input": [0, 4, 8, 16, 17, 19, 26, 36, 41, 42, 49, 56, 57, 58, 60, 61, 62, 72, 85, 87, 96, 98, 99, 102, 114, 119, 120, 122, 129, 130, 131, 133, 134, 135, 136, 148, 152, 153, 159, 166, 176, 179, 184, 203, 205, 217, 253, 254, 255, 261, 277, 285, 293, 303, 309, 310, 318, 321, 325, 326, 329, 330, 331, 332, 354, 357, 358, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 401, 402, 403, 404, 413, 418, 419, 424, 430, 438, 447, 456, 494, 518, 531, 603, 637, 638, 639, 647, 649, 652, 659, 662, 664, 671, 672, 678, 686, 687, 690, 692, 695, 698, 699, 700], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 49, 50, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 81, 85, 87, 93, 94, 96, 98, 99, 102, 104, 105, 108, 111, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 142, 143, 148, 152, 153, 158, 161, 164, 166, 167, 169, 170, 173, 176, 178, 184, 203, 205, 207, 209, 210, 211, 212, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 241, 242, 245, 246, 250, 253, 254, 255, 256, 258, 260, 266, 267, 271, 272, 277, 282, 283, 284, 286, 289, 291, 292, 294, 302, 303, 304, 305, 306, 309, 310, 311, 313, 314, 315, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 340, 341, 342, 343, 344, 346, 347, 350, 354, 357, 358, 363, 365, 367, 368, 369, 372, 374, 375, 381, 383, 384, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 413, 418, 419, 423, 425, 428, 429, 430, 431, 435, 438, 439, 440, 442, 447, 456, 457, 475, 476, 477, 478, 479, 481, 483, 486, 487, 488, 489, 490, 493, 494, 497, 498, 516, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 572, 578, 598, 623, 629, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 655, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 677, 678, 685, 686, 690, 691, 692, 695, 696, 699, 700], "store": [0, 166, 169, 171, 184, 203, 205, 253, 254, 255, 271, 272, 284, 327, 430, 447, 456, 494, 647, 658, 659, 661, 663, 664, 686, 687, 688, 690, 691, 693, 697, 699, 704], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 62, 68, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 156, 159, 160, 161, 164, 166, 167, 169, 171, 172, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 253, 254, 255, 256, 258, 260, 263, 264, 265, 266, 268, 270, 271, 272, 277, 282, 284, 285, 288, 293, 294, 298, 299, 300, 301, 303, 309, 310, 312, 314, 315, 317, 318, 320, 321, 323, 324, 325, 326, 328, 330, 331, 332, 338, 340, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 363, 364, 365, 367, 368, 372, 374, 375, 376, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 411, 413, 414, 415, 416, 418, 419, 420, 424, 425, 428, 429, 430, 431, 434, 438, 440, 445, 447, 454, 455, 456, 457, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 570, 572, 581, 608, 614, 627, 638, 647, 652, 656, 657, 659, 662, 663, 664, 668, 669, 670, 673, 678, 686, 688, 692, 694, 696, 699, 700, 702, 704], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 196, 197, 199, 200, 203, 205, 206, 207, 209, 210, 211, 212, 215, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 433, 434, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 565, 569, 570, 572, 573, 574, 575, 578, 579, 580, 581, 584, 586, 587, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 605, 606, 608, 613, 614, 616, 617, 619, 620, 621, 622, 623, 626, 627, 629, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 671, 672, 673, 677, 682, 685, 688, 690, 691, 693, 694, 695, 698, 699], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 240, 242, 244, 245, 248, 250, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 429, 434, 435, 438, 439, 440, 442, 445, 446, 447, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 569, 572, 580, 581, 584, 586, 598, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 647, 650, 652, 655, 656, 657, 658, 659, 660, 663, 664, 668, 669, 670, 671, 672, 673, 686, 687, 688, 690, 693, 694, 695, 697, 698, 699, 702, 704], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 50, 52, 54, 57, 58, 61, 63, 68, 70, 72, 74, 75, 76, 81, 82, 83, 86, 88, 89, 90, 91, 94, 95, 97, 100, 103, 104, 105, 106, 107, 115, 116, 117, 119, 124, 125, 126, 132, 137, 138, 141, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 170, 173, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 201, 202, 205, 207, 212, 215, 217, 218, 224, 225, 226, 227, 228, 229, 233, 234, 236, 239, 242, 244, 248, 250, 255, 258, 259, 260, 261, 262, 266, 267, 271, 280, 281, 282, 284, 285, 286, 287, 288, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 311, 312, 314, 317, 319, 320, 321, 323, 326, 327, 328, 329, 331, 333, 334, 338, 345, 346, 347, 350, 351, 352, 356, 359, 360, 361, 362, 364, 366, 370, 373, 374, 375, 376, 385, 386, 387, 391, 392, 393, 394, 400, 405, 406, 411, 412, 413, 414, 415, 420, 421, 422, 424, 425, 429, 434, 435, 439, 440, 442, 445, 446, 447, 457, 458, 459, 460, 464, 465, 466, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 569, 580, 581, 584, 586, 598, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 650, 655, 656, 658, 659, 660, 663, 664, 668, 669, 670, 671, 672, 686, 687, 688, 693, 694, 695, 697, 698, 699, 702, 704], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 51, 58, 61, 67, 70, 75, 76, 79, 80, 93, 103, 104, 105, 106, 119, 124, 126, 132, 137, 148, 149, 161, 166, 170, 173, 175, 177, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 248, 250, 255, 283, 303, 327, 329, 331, 346, 347, 363, 374, 375, 392, 394, 400, 405, 413, 414, 416, 430, 434, 435, 471, 555, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 624, 625, 628, 629, 630, 631, 639, 650, 656, 658, 661, 662, 664, 667, 668, 670, 672, 673, 680, 682, 689, 690, 692, 695, 696, 697, 698, 699, 700, 702, 703], "pd": [0, 4, 47, 58, 61, 75, 76, 104, 105, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 217, 224, 229, 250, 255, 266, 327, 329, 331, 346, 347, 374, 375, 400, 434, 513, 572, 581, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 658, 693, 694, 697, 699, 702, 704], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 124, 125, 126, 127, 128, 132, 133, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 170, 173, 177, 179, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 196, 198, 201, 205, 207, 212, 215, 224, 225, 226, 227, 228, 233, 234, 235, 236, 239, 242, 244, 245, 250, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 307, 308, 311, 312, 313, 314, 317, 319, 320, 323, 324, 326, 327, 328, 329, 331, 333, 334, 335, 338, 345, 346, 347, 350, 351, 352, 353, 356, 358, 359, 360, 361, 362, 364, 366, 370, 374, 375, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 400, 401, 403, 405, 406, 407, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 430, 434, 435, 439, 440, 442, 445, 446, 447, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 561, 569, 572, 580, 581, 584, 586, 598, 603, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 647, 650, 652, 655, 656, 657, 658, 659, 660, 663, 664, 668, 669, 670, 671, 672, 673, 690, 693, 694, 695, 696, 697, 698, 699, 702, 704], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 176, 177, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 205, 212, 215, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 239, 242, 244, 245, 248, 250, 255, 256, 259, 260, 261, 262, 266, 267, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 338, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 384, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 434, 435, 438, 439, 440, 442, 445, 446, 447, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 488, 490, 491, 495, 496, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 556, 557, 558, 561, 569, 580, 581, 584, 586, 598, 603, 605, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 647, 650, 652, 656, 657, 659, 668, 669, 670, 671, 673, 693, 694, 695, 697, 698, 699, 702, 704], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 55, 56, 57, 58, 60, 62, 64, 68, 70, 72, 74, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 176, 179, 182, 183, 184, 187, 188, 189, 196, 201, 212, 215, 224, 227, 228, 233, 234, 235, 236, 242, 244, 245, 250, 261, 266, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 290, 293, 294, 296, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 318, 320, 323, 324, 325, 328, 330, 332, 333, 335, 338, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 384, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 438, 439, 440, 442, 445, 446, 447, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 484, 489, 507, 508, 509, 510, 543, 544, 550, 553, 554, 557, 558, 561, 572, 580, 581, 584, 586, 598, 603, 605, 610, 611, 612, 613, 616, 617, 619, 620, 623, 626, 630, 632, 633, 634, 635, 636, 639, 647, 650, 652, 656, 657, 669, 670, 671, 693, 694, 695, 697, 698, 699, 701, 702], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 48, 49, 52, 54, 56, 60, 62, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 110, 112, 114, 115, 116, 120, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 151, 152, 153, 154, 170, 176, 177, 178, 179, 182, 183, 215, 217, 277, 280, 281, 283, 290, 292, 296, 298, 299, 300, 301, 303, 307, 309, 310, 314, 317, 318, 320, 323, 325, 326, 328, 329, 330, 332, 333, 346, 347, 351, 352, 354, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 382, 384, 385, 386, 388, 390, 391, 394, 395, 397, 398, 399, 402, 403, 404, 411, 412, 415, 418, 419, 420, 429, 434, 438, 439, 440, 442, 445, 446, 457, 464, 466, 469, 470, 476, 477, 481, 482, 486, 487, 492, 518, 519, 522, 523, 532, 539, 540, 544, 545, 546, 556, 562, 563, 569, 571, 572, 573, 574, 575, 576, 582, 583, 584, 586, 591, 592, 593, 594, 595, 597, 599, 602, 606, 623, 650, 657, 659, 672, 673, 693, 694, 698, 699, 700, 704], "properti": [1, 2, 5, 22, 23, 27, 47, 48, 67, 68, 69, 86, 101, 144, 146, 180, 181, 186, 187, 188, 189, 191, 192, 194, 195, 196, 198, 201, 202, 221, 230, 231, 232, 237, 238, 243, 252, 257, 259, 267, 268, 269, 273, 288, 292, 302, 315, 316, 317, 333, 338, 339, 341, 342, 343, 344, 355, 356, 369, 371, 377, 378, 379, 409, 411, 416, 417, 441, 443, 444, 448, 449, 450, 451, 452, 453, 461, 462, 463, 560, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 683, 686, 688, 693], "other": [3, 8, 14, 17, 21, 41, 42, 43, 49, 50, 56, 60, 62, 74, 80, 85, 87, 88, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 142, 148, 152, 153, 167, 169, 171, 176, 178, 183, 207, 212, 213, 224, 236, 241, 250, 271, 277, 284, 286, 290, 295, 297, 309, 310, 311, 318, 319, 325, 330, 332, 354, 357, 359, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 408, 413, 418, 419, 431, 438, 440, 446, 457, 466, 476, 481, 513, 529, 532, 538, 544, 572, 652, 662, 686, 687, 688, 690, 693, 696, 699, 702, 704], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 50, 51, 73, 82, 83, 89, 90, 91, 92, 95, 111, 115, 116, 139, 147, 151, 154, 161, 163, 165, 166, 167, 169, 170, 171, 182, 205, 258, 280, 281, 283, 286, 296, 340, 351, 352, 360, 361, 362, 364, 383, 385, 386, 391, 394, 412, 413, 415, 420, 427, 430, 431, 434, 445, 555, 566, 567, 568, 573, 574, 575, 588, 589, 590, 592, 593, 594, 595, 598, 599, 602, 606, 629, 639, 641, 642, 643, 645, 652, 658, 659, 660, 661, 662, 663, 664, 665, 699], "determin": [3, 16, 45, 61, 139, 283, 331, 480, 523, 539, 544, 659, 672, 687, 704], "two": [3, 14, 23, 50, 97, 112, 117, 118, 123, 124, 212, 224, 239, 250, 272, 295, 319, 387, 396, 457, 483, 529, 538, 577, 657, 659, 667, 668, 669, 670, 686, 687, 690, 695, 699], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 50, 51, 61, 65, 66, 72, 74, 97, 119, 124, 137, 142, 158, 159, 164, 166, 171, 178, 179, 197, 199, 209, 210, 211, 214, 222, 223, 237, 241, 245, 246, 247, 254, 265, 268, 270, 272, 288, 290, 303, 304, 305, 306, 308, 314, 315, 317, 319, 321, 327, 331, 333, 336, 337, 345, 396, 405, 408, 423, 424, 428, 430, 440, 442, 454, 465, 476, 479, 485, 491, 494, 497, 518, 529, 534, 535, 536, 538, 539, 544, 545, 550, 561, 580, 605, 637, 638, 649, 659, 661, 662, 664, 669, 678, 679, 686, 687, 688, 690, 693, 698, 699, 701, 704], "same": [3, 21, 36, 46, 50, 51, 70, 73, 75, 76, 88, 104, 105, 121, 123, 125, 126, 133, 137, 148, 166, 171, 178, 183, 185, 190, 240, 242, 254, 272, 284, 286, 303, 308, 314, 319, 340, 346, 347, 358, 359, 374, 375, 389, 393, 394, 401, 405, 413, 430, 446, 465, 469, 476, 492, 497, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 531, 536, 545, 603, 629, 638, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 659, 662, 668, 669, 671, 686, 687, 688, 690, 693, 696, 698, 699, 701, 702, 704], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 49, 50, 51, 52, 56, 60, 62, 70, 74, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 107, 110, 114, 120, 121, 122, 125, 129, 130, 131, 133, 134, 135, 136, 140, 141, 142, 146, 151, 152, 153, 176, 179, 182, 206, 212, 213, 224, 240, 241, 263, 276, 277, 280, 281, 290, 293, 307, 309, 310, 311, 318, 319, 320, 325, 330, 332, 345, 346, 347, 354, 357, 365, 367, 368, 372, 373, 374, 375, 376, 382, 384, 388, 389, 390, 393, 397, 398, 399, 401, 402, 403, 404, 407, 408, 411, 415, 418, 419, 438, 442, 445, 449, 451, 452, 453, 467, 468, 469, 470, 472, 473, 476, 478, 481, 482, 485, 486, 493, 503, 504, 505, 506, 512, 513, 514, 517, 518, 519, 529, 534, 538, 539, 541, 544, 545, 644, 646, 659, 669, 690, 693, 696, 699], "out": [3, 48, 92, 158, 161, 166, 167, 170, 245, 302, 317, 333, 423, 430, 431, 434, 469, 539, 544, 581, 647, 656, 663, 664, 686, 690, 695, 699, 700], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 70, 71, 74, 75, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 97, 102, 104, 105, 107, 108, 109, 115, 116, 117, 121, 123, 124, 126, 128, 132, 137, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 184, 199, 205, 206, 208, 213, 217, 225, 226, 227, 228, 229, 233, 234, 235, 242, 244, 245, 247, 256, 258, 266, 270, 272, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 293, 294, 298, 299, 300, 301, 311, 313, 314, 317, 318, 319, 320, 322, 323, 329, 330, 331, 332, 333, 345, 346, 347, 351, 352, 354, 357, 359, 360, 361, 362, 363, 364, 366, 372, 374, 375, 380, 381, 385, 386, 387, 389, 391, 392, 394, 396, 400, 405, 407, 412, 413, 414, 415, 420, 423, 426, 430, 431, 433, 434, 442, 445, 446, 454, 457, 458, 459, 460, 464, 466, 467, 468, 471, 478, 481, 486, 487, 488, 489, 492, 494, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 526, 529, 532, 538, 539, 544, 545, 555, 564, 572, 585, 616, 617, 619, 620, 621, 622, 637, 638, 647, 650, 652, 659, 662, 663, 664, 667, 668, 669, 670, 671, 686, 691, 693, 694, 696, 698, 699, 700, 702], "ha": [3, 19, 57, 58, 64, 70, 97, 177, 192, 217, 250, 263, 285, 326, 329, 333, 335, 482, 487, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 556, 616, 664, 673, 686, 687, 690, 691, 693, 696, 698, 699, 701, 702, 703], "call": [3, 11, 17, 28, 61, 123, 124, 137, 156, 167, 178, 218, 283, 284, 294, 331, 405, 431, 458, 497, 536, 652, 677, 679, 685, 686, 687, 690, 693, 698, 699, 701], "otherwis": [3, 19, 44, 50, 51, 133, 140, 161, 167, 242, 256, 266, 283, 285, 312, 319, 328, 387, 401, 407, 416, 431, 471, 476, 659, 662, 672, 687, 691, 692, 693], "nan_as_nul": [4, 58, 59, 71, 100, 205, 217, 227, 272, 329, 370, 440, 650, 702], "gpu": [4, 16, 17, 94, 119, 272, 284, 302, 379, 638, 659, 665, 680, 687, 688, 689, 690, 692, 693, 695, 699, 700, 701, 704], "iter": [4, 11, 14, 17, 74, 77, 97, 111, 262, 263, 264, 272, 383, 598, 661, 662, 678, 698, 699, 700], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 54, 61, 65, 66, 74, 93, 119, 124, 126, 133, 142, 167, 209, 210, 211, 215, 222, 223, 241, 272, 286, 304, 305, 306, 323, 331, 336, 337, 358, 394, 401, 408, 431, 489, 551, 561, 572, 580, 605, 650, 659, 662, 664, 671, 690, 699, 702], "can": [4, 14, 16, 26, 36, 37, 44, 51, 54, 55, 61, 73, 74, 84, 94, 97, 107, 111, 119, 123, 126, 128, 132, 133, 137, 142, 151, 166, 170, 182, 209, 241, 266, 290, 293, 303, 304, 312, 313, 323, 324, 328, 331, 340, 353, 366, 383, 391, 394, 396, 400, 401, 405, 408, 415, 430, 434, 440, 442, 445, 466, 469, 476, 489, 491, 497, 513, 515, 518, 524, 533, 536, 539, 544, 555, 561, 578, 580, 586, 598, 605, 629, 637, 638, 652, 656, 659, 661, 662, 664, 669, 671, 682, 683, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 704], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 60, 61, 62, 63, 64, 68, 71, 72, 73, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 164, 166, 167, 174, 176, 177, 178, 179, 183, 200, 226, 244, 246, 249, 258, 267, 271, 455, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 569, 570, 572, 573, 574, 575, 578, 580, 586, 592, 593, 594, 595, 598, 599, 602, 603, 605, 606, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 662, 665, 670, 671, 672, 673, 677, 678, 679, 683, 685, 686, 687, 690, 692, 694, 696, 697, 698, 700, 702, 704], "constant": [4, 284, 638, 650], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 49, 56, 60, 62, 64, 65, 66, 70, 85, 87, 92, 94, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 140, 141, 148, 149, 152, 153, 158, 159, 162, 168, 170, 176, 209, 210, 211, 222, 223, 261, 277, 304, 305, 306, 309, 310, 311, 318, 325, 330, 332, 335, 336, 337, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 407, 413, 418, 419, 423, 424, 426, 433, 438, 656, 662, 686, 689, 702], "Will": [4, 167, 171, 272, 431, 652], "rangeindex": [4, 23, 70, 143, 146, 148, 171, 272, 288, 350, 411, 413, 652, 669, 690], "inform": [4, 15, 19, 43, 61, 70, 166, 283, 285, 311, 331, 430, 465, 466, 638, 662, 671, 686, 687, 689, 690, 693, 699, 701, 702], "part": [4, 171, 529, 538, 581, 686, 687, 694], "provid": [4, 16, 21, 22, 36, 54, 67, 124, 132, 133, 137, 161, 168, 177, 205, 218, 258, 262, 263, 266, 271, 272, 286, 303, 323, 400, 401, 405, 433, 457, 469, 490, 533, 549, 550, 569, 647, 650, 662, 673, 678, 682, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 702, 703, 704], "label": [4, 9, 10, 11, 14, 21, 44, 45, 50, 52, 61, 69, 71, 74, 86, 94, 103, 123, 124, 127, 137, 143, 148, 177, 178, 180, 181, 203, 204, 205, 220, 239, 242, 253, 256, 257, 258, 263, 265, 266, 272, 278, 279, 286, 312, 319, 320, 321, 331, 339, 356, 391, 395, 405, 413, 443, 444, 456, 471, 560, 647, 659, 662, 668, 673, 678, 690, 698, 700], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 64, 68, 70, 72, 73, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 166, 170, 173, 176, 177, 179, 182, 183, 188, 191, 194, 198, 201, 217, 218, 226, 227, 228, 229, 233, 234, 240, 242, 244, 245, 250, 255, 258, 259, 260, 261, 262, 263, 267, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 345, 346, 347, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 430, 434, 435, 438, 439, 440, 442, 445, 446, 447, 451, 452, 453, 457, 458, 459, 460, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 569, 570, 572, 573, 574, 575, 577, 578, 580, 581, 584, 586, 592, 593, 594, 595, 598, 599, 602, 603, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 647, 650, 652, 655, 656, 658, 659, 660, 663, 664, 668, 669, 670, 671, 672, 673, 688, 690, 693, 694, 695, 696, 697, 698, 699, 702, 704], "n": [4, 15, 45, 52, 64, 82, 83, 103, 106, 121, 137, 151, 157, 161, 167, 171, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 258, 272, 287, 297, 320, 321, 335, 351, 352, 373, 376, 389, 405, 415, 422, 431, 445, 447, 471, 478, 479, 485, 494, 508, 514, 519, 522, 524, 525, 526, 532, 539, 540, 541, 544, 546, 586, 596, 601, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 631, 635, 644, 646, 659, 662, 671, 688, 693, 695, 697, 701, 702], "type": [4, 11, 15, 21, 28, 36, 47, 50, 51, 57, 58, 61, 64, 73, 75, 76, 88, 94, 97, 104, 105, 111, 115, 116, 117, 121, 125, 126, 128, 133, 137, 154, 155, 167, 170, 173, 183, 185, 190, 200, 217, 225, 226, 227, 228, 229, 233, 234, 236, 240, 242, 248, 249, 261, 266, 271, 272, 283, 286, 294, 303, 308, 319, 326, 329, 331, 335, 340, 346, 347, 358, 359, 374, 375, 383, 385, 386, 389, 393, 394, 401, 405, 420, 421, 431, 434, 435, 440, 446, 447, 455, 457, 476, 518, 539, 542, 544, 569, 578, 598, 638, 640, 641, 642, 643, 644, 645, 646, 647, 659, 661, 662, 671, 672, 677, 682, 686, 687, 692, 693, 694, 698, 699, 700, 702], "forc": [4, 167, 431, 662, 693], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 51, 56, 60, 61, 62, 70, 73, 74, 80, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 120, 121, 122, 124, 128, 129, 130, 131, 132, 134, 135, 136, 148, 149, 152, 153, 161, 166, 167, 175, 176, 178, 180, 181, 183, 214, 218, 225, 226, 227, 228, 229, 233, 234, 256, 257, 276, 277, 284, 285, 293, 294, 303, 309, 310, 312, 314, 317, 318, 325, 330, 331, 332, 340, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 384, 388, 389, 390, 392, 396, 397, 398, 399, 400, 402, 403, 404, 413, 414, 418, 419, 430, 431, 438, 439, 442, 443, 444, 446, 457, 475, 481, 482, 487, 488, 492, 494, 518, 523, 526, 539, 544, 547, 548, 552, 569, 570, 573, 574, 575, 578, 584, 592, 593, 594, 595, 599, 602, 606, 638, 647, 652, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 677, 682, 686, 687, 689, 690, 693, 696, 699, 701, 702], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 49, 51, 56, 60, 61, 62, 68, 72, 80, 85, 86, 87, 96, 98, 99, 102, 103, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 167, 176, 177, 266, 277, 309, 310, 312, 318, 325, 330, 331, 332, 338, 345, 354, 356, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 431, 438, 476, 484, 494, 531, 533, 578, 659, 661, 663, 664, 665, 673, 687, 690, 693, 695, 696, 698, 699], "allow": [4, 15, 21, 50, 51, 70, 94, 124, 137, 166, 167, 272, 283, 286, 319, 405, 430, 431, 494, 647, 662, 663, 664, 667, 668, 669, 670, 686, 688, 690, 693, 697, 699, 701, 704], "convert": [4, 21, 57, 58, 59, 71, 72, 100, 123, 127, 132, 142, 143, 160, 162, 164, 167, 168, 170, 171, 172, 173, 205, 217, 241, 246, 248, 261, 262, 263, 264, 266, 272, 286, 326, 329, 358, 370, 391, 395, 400, 408, 425, 426, 428, 429, 431, 433, 434, 435, 475, 499, 500, 515, 521, 547, 548, 552, 554, 556, 629, 649, 661, 662, 671, 672, 690, 696, 700, 702], "np": [4, 17, 30, 36, 46, 58, 70, 71, 75, 76, 93, 100, 104, 105, 119, 128, 132, 168, 170, 205, 217, 227, 233, 272, 303, 308, 329, 346, 347, 358, 370, 374, 375, 400, 433, 434, 440, 442, 481, 647, 650, 659, 672, 697, 699, 702], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 48, 54, 58, 70, 71, 75, 76, 82, 83, 89, 90, 91, 95, 100, 104, 105, 115, 116, 119, 127, 132, 140, 147, 149, 151, 154, 161, 167, 170, 173, 182, 205, 213, 214, 215, 217, 272, 280, 281, 283, 296, 298, 299, 300, 301, 312, 314, 317, 323, 328, 329, 333, 346, 347, 351, 352, 360, 361, 362, 364, 370, 374, 375, 377, 378, 379, 385, 386, 395, 400, 407, 412, 414, 415, 416, 420, 425, 431, 434, 435, 441, 445, 457, 464, 466, 467, 471, 476, 485, 494, 518, 564, 578, 584, 585, 586, 650, 659, 672, 686, 687, 690, 700], "leav": [4, 58, 71, 92, 205, 217, 272, 329, 656, 672, 699], "build": [4, 254, 689, 699], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 64, 68, 70, 72, 74, 75, 76, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 170, 173, 176, 177, 179, 182, 183, 259, 262, 267, 277, 278, 279, 280, 281, 285, 286, 293, 298, 299, 300, 301, 303, 309, 310, 311, 312, 317, 318, 319, 323, 325, 330, 331, 332, 334, 335, 338, 346, 347, 351, 352, 354, 356, 357, 359, 360, 361, 364, 365, 367, 368, 370, 372, 374, 375, 383, 384, 385, 386, 388, 390, 393, 394, 395, 397, 398, 399, 401, 402, 403, 404, 405, 407, 411, 412, 413, 415, 416, 418, 419, 420, 421, 422, 424, 435, 438, 445, 446, 572, 581, 598, 603, 650, 654, 655, 656, 660, 663, 664, 671, 673, 693, 694, 695, 696, 698, 699, 702, 704], "kei": [4, 14, 23, 61, 64, 74, 80, 94, 133, 143, 148, 157, 166, 173, 178, 200, 204, 219, 236, 244, 249, 256, 266, 272, 331, 335, 401, 413, 422, 430, 435, 455, 489, 558, 560, 565, 581, 587, 651, 661, 664, 671, 690, 691, 693, 694, 698, 699], "val": [4, 23, 64, 157, 173, 335, 422, 435, 581, 666, 693], "float": [4, 8, 41, 42, 47, 49, 56, 60, 62, 64, 75, 76, 85, 87, 89, 90, 94, 95, 96, 98, 99, 102, 104, 105, 114, 117, 118, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 152, 153, 157, 167, 173, 176, 203, 225, 226, 227, 228, 229, 233, 234, 256, 277, 287, 297, 309, 310, 318, 325, 330, 332, 335, 346, 347, 354, 357, 360, 361, 364, 365, 367, 368, 372, 374, 375, 384, 387, 388, 390, 391, 397, 398, 399, 402, 403, 404, 405, 418, 419, 422, 431, 435, 438, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 573, 574, 575, 577, 592, 593, 594, 595, 599, 602, 606, 659, 667, 668, 669, 670, 671, 672, 688, 690, 693, 694, 697, 699, 700], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 50, 51, 63, 64, 68, 70, 82, 83, 86, 88, 89, 90, 91, 94, 95, 100, 115, 116, 117, 119, 124, 125, 126, 127, 137, 138, 140, 143, 146, 147, 151, 154, 155, 157, 167, 173, 182, 183, 207, 217, 229, 240, 244, 248, 259, 267, 271, 276, 280, 281, 284, 286, 298, 299, 300, 301, 303, 308, 311, 312, 319, 328, 329, 334, 335, 338, 350, 351, 352, 356, 359, 360, 361, 362, 364, 370, 385, 386, 391, 392, 393, 394, 395, 396, 405, 406, 407, 411, 412, 415, 420, 421, 422, 429, 431, 434, 435, 445, 446, 459, 460, 464, 465, 466, 479, 493, 499, 500, 505, 510, 520, 528, 581, 613, 616, 619, 620, 632, 633, 634, 636, 647, 652, 658, 671, 687, 692, 695, 699, 700, 702, 704], "rang": [4, 14, 16, 44, 51, 64, 68, 93, 94, 127, 157, 171, 173, 271, 312, 335, 338, 395, 396, 422, 435, 457, 489, 647, 655, 659, 662, 686, 693, 695, 699, 702, 704], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 50, 51, 52, 54, 57, 64, 68, 70, 72, 75, 76, 86, 88, 90, 91, 94, 104, 105, 107, 117, 118, 119, 120, 124, 126, 127, 128, 132, 137, 138, 140, 141, 143, 146, 147, 156, 157, 159, 160, 177, 183, 187, 188, 189, 193, 201, 212, 224, 226, 229, 240, 244, 250, 261, 266, 277, 278, 279, 282, 283, 284, 287, 292, 295, 296, 298, 299, 300, 301, 303, 307, 308, 311, 312, 313, 319, 320, 323, 328, 335, 338, 345, 346, 347, 350, 356, 359, 361, 362, 366, 373, 374, 375, 376, 387, 388, 394, 395, 400, 405, 406, 407, 411, 412, 414, 422, 424, 439, 440, 442, 446, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 472, 474, 477, 478, 479, 480, 482, 490, 491, 497, 503, 508, 535, 536, 541, 542, 550, 553, 554, 561, 577, 580, 581, 584, 586, 603, 605, 610, 611, 612, 613, 616, 617, 619, 620, 623, 630, 639, 647, 652, 656, 667, 668, 669, 670, 671, 673, 690, 693, 694, 695, 697, 698, 699, 702, 704], "insert": [4, 64, 128, 140, 157, 335, 396, 407, 422, 543, 678, 690, 700], "11": [4, 44, 51, 52, 55, 64, 84, 86, 94, 127, 132, 138, 140, 143, 146, 173, 244, 259, 267, 312, 324, 328, 335, 350, 353, 356, 395, 396, 400, 406, 407, 411, 429, 435, 474, 479, 515, 613, 616, 655, 659, 660, 663, 664, 671, 693, 695, 698, 701, 702], "12": [4, 32, 33, 34, 35, 36, 40, 44, 86, 94, 127, 138, 140, 143, 146, 173, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 259, 267, 295, 297, 298, 299, 300, 301, 303, 312, 315, 328, 350, 356, 395, 396, 406, 407, 411, 429, 435, 479, 488, 494, 499, 500, 555, 581, 586, 610, 611, 612, 613, 616, 621, 622, 625, 626, 630, 631, 632, 633, 634, 635, 636, 671, 690, 693, 695, 699], "13": [4, 44, 55, 84, 94, 127, 140, 143, 157, 295, 297, 312, 315, 324, 328, 350, 353, 395, 396, 407, 422, 429, 479, 632, 633, 634, 636, 693, 695], "14": [4, 15, 70, 94, 100, 127, 140, 143, 157, 315, 328, 350, 370, 395, 407, 422, 479, 632, 633, 634, 636, 693, 699], "via": [4, 36, 137, 166, 303, 405, 430, 466, 680, 690, 693, 695, 698], "numpi": [4, 17, 19, 21, 30, 36, 59, 70, 75, 76, 100, 104, 105, 119, 132, 137, 162, 168, 172, 181, 203, 205, 217, 253, 271, 272, 284, 285, 286, 303, 329, 346, 347, 370, 374, 375, 400, 405, 426, 433, 444, 447, 456, 647, 650, 662, 671, 686, 688, 699, 700, 702, 704], "datetim": [4, 36, 47, 117, 119, 127, 132, 167, 184, 186, 191, 194, 197, 198, 202, 303, 315, 395, 400, 431, 447, 609, 615, 624, 628, 631, 655, 659, 660, 663, 664, 667, 668, 670, 671, 690, 693, 697, 698, 699, 700, 704], "timedelta": [4, 117, 132, 400, 448, 632, 697, 699], "t0": 4, "strptime": [4, 119, 671, 693], "2018": [4, 47, 55, 84, 119, 127, 242, 324, 353, 395, 621, 622, 655, 659, 660, 663, 664, 693], "07": [4, 119, 123, 127, 132, 187, 188, 189, 201, 395, 400, 610, 611, 612, 613, 623, 630], "00": [4, 7, 36, 46, 63, 70, 75, 76, 104, 105, 123, 127, 132, 184, 185, 190, 191, 193, 194, 196, 197, 198, 276, 303, 315, 334, 346, 347, 374, 375, 395, 400, 447, 561, 580, 605, 608, 614, 615, 624, 626, 627, 628, 632, 633, 634, 635, 636, 655, 659, 660, 663, 664, 693, 702, 704], "y": [4, 15, 16, 17, 44, 119, 126, 146, 161, 202, 244, 312, 391, 394, 411, 479, 515, 529, 538, 557, 629, 631, 671, 690, 693, 696, 699], "m": [4, 119, 127, 167, 171, 185, 190, 195, 197, 395, 431, 489, 515, 608, 614, 625, 626, 627, 629, 632, 633, 634, 636, 662, 671, 688, 693, 695, 697, 701], "d": [4, 8, 15, 26, 36, 41, 42, 44, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 119, 120, 122, 126, 129, 130, 131, 134, 135, 136, 137, 140, 143, 148, 152, 153, 158, 161, 176, 177, 185, 186, 187, 188, 189, 190, 197, 201, 245, 266, 277, 292, 293, 303, 308, 309, 310, 312, 318, 325, 330, 332, 354, 356, 357, 365, 367, 368, 372, 384, 388, 390, 391, 394, 396, 397, 398, 399, 402, 403, 404, 405, 407, 413, 418, 419, 423, 429, 438, 440, 457, 474, 476, 477, 479, 481, 487, 493, 515, 518, 534, 553, 554, 608, 609, 610, 611, 612, 614, 627, 629, 630, 647, 671, 673, 690, 693, 695, 699, 702], "h": [4, 111, 185, 190, 191, 197, 383, 479, 518, 608, 614, 615, 627, 690], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 50, 57, 61, 68, 74, 82, 83, 92, 93, 94, 97, 103, 112, 117, 118, 125, 126, 133, 137, 140, 141, 148, 150, 158, 167, 171, 178, 185, 190, 197, 198, 226, 239, 242, 276, 278, 279, 284, 285, 286, 287, 290, 292, 293, 294, 298, 299, 300, 301, 303, 308, 311, 312, 313, 315, 317, 319, 320, 321, 329, 331, 338, 345, 351, 352, 358, 366, 376, 387, 393, 394, 401, 405, 407, 413, 414, 416, 423, 431, 440, 442, 447, 458, 459, 460, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 569, 580, 581, 586, 598, 605, 608, 613, 614, 616, 617, 619, 620, 622, 626, 627, 628, 632, 633, 634, 635, 636, 639, 647, 650, 652, 655, 656, 657, 659, 662, 671, 672, 686, 687, 688, 689, 690, 693, 694, 695, 697, 699, 701, 702, 703, 704], "id": [4, 16, 584, 586, 637, 638, 693, 696], "arang": [4, 17, 693, 699], "second": [4, 44, 97, 111, 127, 142, 156, 167, 185, 190, 196, 197, 241, 260, 312, 315, 383, 395, 408, 431, 448, 451, 608, 614, 626, 627, 632, 634, 659, 662, 671, 690, 693], "x": [4, 5, 15, 16, 17, 44, 73, 146, 161, 175, 244, 266, 283, 284, 312, 340, 358, 411, 457, 529, 538, 541, 543, 557, 561, 580, 581, 598, 605, 629, 647, 659, 663, 664, 688, 693, 694, 696, 698, 699], "01": [4, 36, 127, 132, 133, 184, 186, 187, 188, 189, 191, 194, 195, 197, 198, 201, 202, 303, 395, 400, 401, 447, 515, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 635, 655, 659, 660, 663, 664, 696, 697, 702], "02": [4, 123, 127, 132, 186, 187, 188, 189, 191, 194, 195, 198, 201, 315, 395, 400, 447, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 624, 625, 628, 630, 655, 659, 660, 663, 664, 671, 693, 696], "03": [4, 47, 127, 133, 186, 187, 188, 189, 195, 201, 315, 395, 401, 447, 609, 610, 611, 612, 613, 617, 619, 620, 625, 629, 630, 635, 671], "04": [4, 46, 55, 75, 76, 84, 104, 105, 123, 127, 132, 187, 188, 189, 197, 201, 324, 346, 347, 353, 374, 375, 395, 400, 447, 608, 610, 611, 612, 613, 614, 627, 630, 671], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 51, 52, 55, 61, 64, 68, 69, 70, 72, 84, 86, 94, 97, 103, 106, 107, 123, 127, 137, 139, 148, 150, 151, 156, 157, 158, 159, 161, 166, 169, 171, 179, 182, 203, 205, 213, 214, 245, 253, 264, 278, 279, 280, 281, 288, 298, 299, 300, 301, 307, 312, 313, 314, 320, 324, 331, 335, 338, 339, 353, 356, 391, 395, 405, 413, 415, 422, 423, 424, 430, 445, 456, 457, 467, 468, 472, 476, 481, 483, 485, 487, 494, 518, 539, 544, 560, 570, 578, 581, 596, 638, 649, 655, 658, 659, 661, 662, 663, 664, 665, 668, 686, 693, 694, 695, 696, 698, 699, 702], "tupl": [4, 11, 15, 27, 61, 92, 94, 111, 128, 142, 144, 207, 237, 241, 262, 263, 264, 266, 268, 282, 283, 331, 383, 396, 408, 409, 598, 639, 656, 659, 662, 663, 664, 671, 690, 693], "cat": [4, 133, 179, 321, 358, 401, 457, 458, 459, 460, 464, 465, 466, 482, 486, 494, 522, 540, 545, 546, 650, 678, 682, 693], "jump": [4, 128], "dog": [4, 74, 133, 179, 358, 401, 457, 481, 519, 693], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 51, 64, 68, 82, 83, 86, 89, 90, 95, 115, 116, 117, 126, 127, 132, 133, 140, 147, 151, 154, 155, 159, 177, 182, 187, 189, 193, 226, 229, 280, 281, 298, 299, 300, 301, 303, 311, 312, 335, 338, 351, 352, 356, 360, 361, 364, 366, 385, 386, 394, 395, 400, 401, 407, 412, 415, 420, 421, 424, 440, 442, 445, 467, 478, 479, 535, 584, 586, 610, 611, 612, 613, 616, 617, 619, 620, 623, 630, 647, 652, 673, 693, 695, 697, 699, 702, 704], "cow": [4, 44, 156, 312, 313, 345], "moo": 4, "occasion": [4, 687], "pdf": [4, 58, 170, 693, 697], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 51, 52, 54, 56, 57, 58, 60, 62, 63, 68, 70, 81, 82, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 98, 99, 100, 102, 107, 111, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 170, 176, 177, 182, 183, 205, 218, 236, 245, 256, 259, 260, 261, 262, 266, 267, 277, 278, 279, 280, 281, 286, 292, 293, 294, 298, 299, 300, 301, 303, 309, 310, 312, 318, 323, 325, 326, 327, 328, 330, 332, 334, 338, 350, 351, 352, 354, 356, 357, 359, 360, 361, 364, 365, 367, 368, 370, 372, 383, 384, 385, 386, 388, 390, 391, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 411, 412, 413, 415, 418, 419, 420, 421, 423, 425, 429, 438, 439, 440, 445, 446, 457, 476, 477, 479, 482, 487, 491, 492, 497, 503, 518, 531, 536, 545, 553, 554, 557, 558, 561, 580, 581, 584, 586, 598, 603, 605, 647, 650, 652, 656, 657, 659, 668, 669, 670, 673, 693, 694, 695, 697, 698, 699, 702, 704], "from_panda": [4, 224, 229, 250, 266, 572, 581, 693, 694, 696, 697, 704], "attribut": [4, 36, 142, 178, 205, 241, 254, 263, 272, 303, 392, 408, 460, 668, 669, 670, 678, 690, 691, 693], "method": [4, 14, 18, 24, 25, 29, 37, 38, 53, 54, 61, 63, 70, 73, 108, 117, 118, 121, 123, 126, 127, 132, 137, 142, 148, 156, 178, 204, 205, 209, 210, 219, 241, 254, 256, 266, 272, 284, 287, 289, 291, 292, 295, 304, 305, 313, 322, 323, 331, 334, 340, 355, 381, 387, 389, 391, 394, 395, 400, 405, 408, 413, 416, 417, 466, 469, 480, 503, 504, 505, 506, 512, 513, 514, 517, 529, 538, 555, 572, 577, 584, 586, 603, 637, 652, 658, 659, 662, 663, 664, 665, 671, 672, 677, 678, 679, 683, 686, 690, 694, 696, 698, 699, 700, 702, 704], "iterrow": 4, "itertupl": 4, "to_dict": [4, 272], "transpos": [5, 273, 649, 678, 695, 700], "new": [5, 8, 9, 10, 14, 21, 28, 37, 38, 41, 42, 49, 51, 56, 60, 62, 65, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 157, 158, 159, 166, 175, 176, 209, 210, 212, 222, 224, 236, 239, 240, 242, 245, 277, 278, 279, 282, 286, 292, 294, 304, 305, 308, 309, 310, 318, 325, 330, 332, 336, 354, 357, 365, 367, 368, 372, 373, 376, 384, 388, 390, 391, 393, 396, 397, 398, 399, 402, 403, 404, 405, 418, 419, 422, 423, 424, 430, 438, 457, 458, 465, 466, 494, 498, 534, 543, 686, 687, 688, 690, 693, 696, 699, 701], "ncol": [5, 175], "nrow": [5, 175, 659, 693, 699], "self": [5, 14, 61, 88, 111, 117, 140, 159, 166, 175, 183, 224, 250, 273, 282, 287, 331, 359, 383, 396, 407, 424, 430, 437, 446, 486, 545, 688, 690], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 48, 51, 57, 61, 74, 80, 82, 83, 89, 91, 94, 95, 97, 103, 106, 115, 116, 124, 126, 127, 137, 147, 148, 149, 151, 154, 161, 162, 167, 169, 174, 175, 179, 182, 218, 280, 281, 283, 284, 286, 290, 294, 296, 297, 303, 308, 313, 317, 331, 351, 352, 358, 360, 362, 364, 385, 386, 392, 394, 395, 405, 412, 413, 414, 415, 420, 426, 431, 445, 450, 471, 481, 482, 486, 487, 492, 503, 523, 529, 532, 538, 539, 544, 555, 556, 557, 573, 574, 575, 578, 586, 592, 593, 594, 595, 599, 602, 603, 606, 629, 639, 647, 649, 650, 658, 659, 662, 663, 664, 668, 671, 672, 686, 688, 690, 692, 693, 698, 699, 700, 701, 702, 704], "differ": [5, 11, 40, 44, 50, 51, 54, 61, 80, 103, 106, 117, 123, 124, 126, 148, 149, 166, 171, 175, 205, 266, 307, 312, 319, 323, 331, 391, 392, 394, 413, 414, 430, 471, 501, 502, 529, 531, 539, 556, 570, 572, 573, 574, 575, 586, 592, 593, 594, 595, 598, 599, 602, 606, 638, 650, 656, 662, 667, 668, 669, 670, 672, 677, 686, 687, 688, 690, 694, 699, 702, 704], "Not": [5, 8, 11, 15, 41, 42, 49, 51, 56, 60, 62, 85, 87, 90, 93, 96, 98, 99, 102, 110, 114, 120, 122, 123, 124, 129, 130, 131, 134, 135, 136, 148, 149, 152, 153, 166, 167, 175, 176, 258, 277, 283, 309, 310, 314, 318, 325, 330, 332, 354, 357, 361, 365, 367, 368, 372, 382, 384, 388, 390, 391, 392, 397, 398, 399, 402, 403, 404, 413, 414, 418, 419, 430, 431, 438, 471, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 667, 668, 669, 670, 686, 701], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 49, 51, 54, 56, 57, 60, 62, 73, 80, 82, 83, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 102, 103, 106, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 136, 137, 143, 147, 148, 149, 151, 152, 153, 154, 161, 166, 167, 169, 173, 175, 176, 178, 182, 183, 184, 205, 258, 272, 277, 280, 281, 282, 283, 284, 285, 293, 296, 297, 309, 310, 318, 323, 325, 330, 332, 340, 351, 352, 354, 357, 358, 359, 360, 362, 364, 365, 367, 368, 372, 384, 385, 386, 388, 390, 391, 392, 394, 395, 397, 398, 399, 402, 403, 404, 405, 412, 413, 414, 415, 418, 419, 420, 430, 431, 435, 438, 445, 446, 447, 450, 471, 481, 482, 486, 487, 492, 498, 523, 529, 532, 538, 539, 555, 561, 570, 572, 573, 574, 575, 578, 580, 584, 592, 593, 594, 595, 599, 602, 603, 605, 606, 629, 638, 656, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 686, 687, 688, 690, 692, 693, 694, 695, 696, 699, 700, 702], "becaus": [5, 12, 13, 97, 175, 280, 281, 283, 586, 656, 688, 693, 696, 697, 699, 702, 704], "behavior": [5, 126, 171, 175, 244, 266, 313, 394, 555, 638, 650, 659, 662, 671, 672, 686, 687, 690, 691, 693, 698, 699, 701, 703, 704], "absolut": [7, 205, 276, 586, 667, 668, 669, 670, 693, 704], "numer": [7, 36, 40, 51, 89, 90, 95, 97, 117, 121, 126, 225, 226, 227, 228, 229, 233, 234, 248, 276, 303, 358, 360, 361, 364, 389, 394, 442, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 569, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 662, 672, 678, 687, 690, 693, 694, 697, 698, 699, 700, 704], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 50, 52, 61, 74, 75, 76, 93, 97, 104, 105, 125, 127, 132, 133, 139, 169, 171, 235, 240, 255, 258, 263, 264, 266, 276, 278, 279, 290, 303, 308, 313, 319, 320, 331, 345, 346, 347, 358, 374, 375, 393, 395, 400, 401, 449, 451, 452, 453, 457, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 530, 531, 533, 535, 536, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 561, 564, 565, 566, 567, 568, 570, 573, 574, 575, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 638, 647, 659, 662, 663, 664, 672, 686, 687, 688, 690, 691, 693, 695, 697, 698, 699, 701, 704], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 50, 51, 55, 61, 63, 64, 82, 83, 84, 89, 90, 95, 111, 115, 116, 117, 124, 132, 137, 148, 151, 154, 164, 171, 177, 182, 215, 244, 246, 266, 276, 282, 283, 284, 290, 298, 299, 300, 301, 319, 324, 331, 334, 335, 351, 352, 353, 358, 360, 361, 364, 383, 385, 386, 400, 405, 413, 415, 416, 420, 428, 445, 476, 480, 482, 489, 518, 524, 526, 551, 555, 561, 572, 580, 581, 598, 603, 605, 637, 639, 647, 649, 650, 658, 659, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 678, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 702], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 61, 82, 83, 89, 90, 94, 95, 97, 111, 115, 116, 124, 132, 148, 151, 154, 166, 182, 276, 284, 287, 298, 299, 300, 301, 331, 351, 352, 360, 361, 364, 383, 385, 386, 400, 413, 415, 420, 430, 445, 475, 494, 547, 548, 552, 561, 580, 598, 603, 605, 647, 650, 659, 662, 682, 683, 693, 694, 700], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 50, 55, 64, 70, 73, 74, 84, 92, 94, 112, 115, 116, 127, 128, 142, 154, 161, 166, 167, 171, 177, 203, 205, 213, 214, 241, 242, 253, 276, 285, 286, 292, 293, 303, 312, 313, 319, 324, 335, 340, 353, 373, 376, 385, 386, 395, 396, 408, 420, 430, 431, 442, 456, 465, 476, 484, 488, 492, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 521, 522, 531, 532, 539, 540, 544, 546, 547, 548, 551, 552, 553, 554, 569, 578, 608, 614, 627, 648, 650, 653, 656, 657, 659, 662, 671, 672, 673, 678, 686, 687, 688, 689, 693, 696, 697, 699, 701, 702, 703, 704], "33": [7, 30, 52, 240, 276], "float64": [7, 15, 17, 36, 41, 42, 47, 48, 61, 70, 75, 76, 82, 83, 90, 93, 100, 104, 105, 117, 122, 132, 133, 136, 138, 141, 146, 147, 151, 170, 176, 182, 203, 217, 276, 283, 284, 303, 309, 310, 317, 329, 331, 346, 347, 351, 352, 361, 370, 374, 375, 387, 390, 400, 401, 404, 406, 411, 412, 415, 434, 438, 442, 445, 659, 672, 693, 697, 699, 701, 702], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 49, 53, 54, 56, 60, 61, 62, 73, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 107, 108, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 145, 147, 148, 149, 151, 152, 153, 154, 156, 158, 176, 182, 240, 245, 277, 280, 281, 285, 289, 291, 293, 298, 299, 300, 301, 309, 310, 312, 314, 318, 322, 323, 325, 330, 331, 332, 340, 351, 352, 354, 357, 360, 361, 362, 364, 365, 367, 368, 372, 381, 384, 385, 386, 388, 389, 390, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 410, 412, 413, 414, 415, 418, 419, 420, 423, 438, 445, 457, 471, 570, 572, 578, 677, 693, 695, 699, 700], "level": [8, 12, 13, 30, 41, 42, 44, 49, 56, 60, 61, 62, 82, 83, 85, 87, 89, 90, 91, 94, 95, 96, 98, 99, 102, 114, 115, 116, 120, 122, 123, 124, 127, 128, 129, 130, 131, 134, 135, 136, 146, 147, 148, 150, 151, 152, 153, 154, 156, 166, 171, 176, 177, 179, 182, 204, 218, 236, 238, 242, 244, 258, 260, 263, 264, 265, 266, 269, 277, 280, 281, 296, 309, 310, 312, 318, 325, 330, 331, 332, 351, 352, 354, 357, 360, 361, 362, 364, 365, 367, 368, 372, 384, 385, 386, 388, 390, 391, 392, 395, 396, 397, 398, 399, 402, 403, 404, 411, 412, 413, 415, 418, 419, 420, 430, 438, 445, 467, 652, 673, 678, 686, 687, 690], "fill_valu": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 145, 152, 153, 176, 177, 245, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 391, 397, 398, 399, 402, 403, 404, 410, 418, 419, 438, 578, 673], "get": [8, 41, 42, 43, 49, 56, 60, 62, 69, 75, 76, 81, 85, 87, 96, 97, 98, 99, 102, 103, 104, 105, 106, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 218, 244, 256, 266, 277, 309, 310, 311, 318, 325, 330, 332, 339, 346, 347, 354, 357, 365, 367, 368, 369, 372, 374, 375, 384, 388, 390, 397, 398, 399, 402, 403, 404, 409, 418, 419, 438, 541, 570, 598, 607, 613, 650, 651, 678, 691, 695, 699, 700], "addit": [8, 15, 51, 90, 120, 166, 277, 361, 388, 430, 477, 503, 520, 528, 537, 659, 661, 667, 668, 669, 670, 686, 687, 688, 704], "wise": [8, 17, 26, 40, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 107, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 156, 176, 277, 293, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 457, 476, 570, 577, 578, 601, 604, 693, 695, 696], "binari": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 166, 171, 176, 277, 309, 310, 311, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 430, 438, 653, 658, 663, 664, 678, 699, 704], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 49, 51, 54, 56, 60, 61, 62, 85, 87, 88, 94, 96, 98, 99, 102, 114, 115, 116, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 154, 166, 176, 183, 185, 190, 197, 272, 277, 283, 292, 309, 310, 311, 312, 313, 314, 318, 323, 325, 330, 331, 332, 354, 357, 359, 365, 367, 368, 372, 384, 385, 386, 388, 390, 397, 398, 399, 402, 403, 404, 413, 418, 419, 420, 430, 438, 446, 541, 561, 573, 574, 575, 580, 592, 593, 594, 595, 599, 602, 603, 605, 606, 608, 614, 627, 678, 686, 690, 695, 696, 699, 700, 701, 702], "equival": [8, 37, 38, 41, 42, 44, 49, 56, 60, 62, 64, 65, 70, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 137, 142, 152, 153, 176, 209, 210, 222, 241, 277, 290, 304, 305, 309, 310, 312, 318, 325, 328, 330, 332, 335, 336, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 405, 408, 418, 419, 438, 503, 504, 505, 506, 512, 513, 514, 516, 517, 518, 520, 521, 522, 528, 531, 532, 535, 537, 540, 541, 545, 546, 547, 548, 551, 552, 555, 686, 690, 693, 698, 702], "substitut": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 358, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 669], "miss": [8, 24, 25, 41, 42, 44, 49, 53, 56, 60, 62, 75, 76, 85, 87, 96, 97, 98, 99, 102, 104, 105, 108, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 150, 152, 153, 162, 168, 176, 183, 272, 277, 289, 291, 295, 297, 309, 310, 312, 318, 321, 322, 325, 330, 332, 346, 347, 354, 357, 365, 367, 368, 372, 374, 375, 381, 384, 388, 390, 391, 397, 398, 399, 402, 403, 404, 418, 419, 426, 433, 438, 446, 476, 578, 586, 657, 659, 678, 692, 694, 700], "one": [8, 11, 21, 23, 41, 42, 46, 49, 56, 60, 62, 81, 85, 87, 94, 96, 97, 98, 99, 102, 109, 112, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 152, 153, 176, 177, 178, 179, 214, 218, 220, 239, 260, 264, 266, 277, 284, 286, 309, 310, 314, 318, 325, 330, 332, 333, 345, 354, 357, 365, 366, 367, 368, 372, 384, 388, 390, 396, 397, 398, 399, 402, 403, 404, 418, 419, 438, 466, 467, 481, 483, 487, 492, 503, 504, 513, 518, 586, 598, 650, 657, 659, 662, 663, 664, 673, 686, 687, 688, 690, 693, 695, 698, 699, 702], "scalar": [8, 15, 18, 26, 41, 42, 43, 49, 54, 56, 60, 62, 82, 83, 85, 87, 88, 91, 92, 93, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 152, 153, 176, 182, 183, 215, 272, 277, 283, 284, 290, 293, 309, 310, 311, 318, 323, 325, 330, 332, 351, 352, 354, 357, 359, 362, 365, 367, 368, 372, 384, 388, 390, 392, 394, 397, 398, 399, 402, 403, 404, 418, 419, 438, 445, 446, 468, 469, 518, 572, 578, 647, 656, 659, 671, 702], "sequenc": [8, 41, 42, 43, 45, 49, 51, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 109, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 184, 203, 253, 258, 262, 263, 264, 272, 277, 309, 310, 311, 318, 325, 330, 331, 332, 345, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 447, 456, 469, 479, 481, 484, 523, 531, 532, 533, 545, 549, 550, 638, 647, 650, 672, 690, 693], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 100, 102, 114, 119, 120, 122, 123, 126, 129, 130, 131, 133, 134, 135, 136, 142, 152, 153, 162, 168, 173, 176, 179, 212, 214, 241, 277, 283, 290, 294, 303, 309, 310, 311, 312, 317, 318, 325, 330, 332, 354, 357, 365, 367, 368, 370, 372, 384, 388, 390, 391, 394, 397, 398, 399, 401, 402, 403, 404, 408, 418, 419, 426, 433, 435, 438, 458, 464, 465, 466, 468, 469, 472, 476, 481, 499, 500, 503, 518, 523, 555, 561, 580, 605, 651, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 687, 688, 690, 693, 696, 698, 699, 701, 702, 704], "multipl": [8, 14, 15, 17, 36, 41, 42, 43, 49, 51, 56, 60, 62, 68, 85, 86, 87, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 149, 152, 153, 176, 177, 192, 218, 260, 263, 277, 284, 303, 309, 310, 311, 318, 325, 330, 332, 338, 354, 356, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 414, 418, 419, 438, 487, 492, 578, 616, 662, 663, 664, 671, 673, 688, 690, 693, 695, 696, 698, 699, 701], "structur": [8, 41, 42, 43, 49, 56, 59, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 164, 166, 176, 236, 246, 277, 309, 310, 311, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 428, 430, 438, 649, 652, 689, 690, 693, 695, 699, 704], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 49, 56, 58, 60, 61, 62, 64, 70, 71, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 103, 106, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 148, 151, 152, 153, 154, 156, 158, 161, 167, 176, 182, 218, 220, 240, 242, 245, 256, 258, 265, 266, 271, 277, 287, 295, 296, 307, 309, 310, 312, 318, 325, 328, 330, 331, 332, 335, 340, 354, 357, 360, 361, 364, 365, 367, 368, 372, 373, 376, 380, 382, 384, 385, 386, 388, 390, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 415, 418, 419, 420, 423, 431, 438, 442, 445, 469, 474, 477, 478, 481, 482, 487, 490, 491, 492, 493, 497, 498, 501, 502, 519, 520, 523, 524, 525, 528, 531, 532, 535, 536, 537, 539, 541, 543, 544, 555, 556, 558, 562, 563, 570, 571, 572, 573, 574, 575, 576, 578, 582, 583, 584, 586, 591, 592, 593, 594, 595, 597, 599, 601, 602, 604, 606, 638, 644, 646, 647, 652, 658, 659, 661, 663, 664, 667, 669, 670, 671, 686, 688, 690, 693, 699], "string": [8, 9, 10, 11, 36, 41, 42, 47, 49, 51, 56, 60, 62, 71, 75, 76, 85, 86, 87, 96, 98, 99, 102, 104, 105, 111, 114, 120, 122, 127, 129, 130, 131, 134, 135, 136, 152, 153, 161, 167, 171, 173, 176, 277, 278, 279, 284, 303, 309, 310, 314, 318, 325, 330, 332, 345, 346, 347, 354, 356, 357, 365, 367, 368, 372, 374, 375, 383, 384, 388, 390, 395, 397, 398, 399, 402, 403, 404, 416, 418, 419, 431, 435, 438, 561, 580, 598, 605, 629, 637, 638, 650, 655, 659, 660, 661, 662, 664, 665, 671, 678, 690, 692, 696, 697, 698, 699, 700, 704], "broadcast": [8, 15, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 603, 698], "across": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 586, 687, 688, 690, 693, 695, 696], "match": [8, 16, 17, 28, 41, 42, 49, 56, 60, 62, 74, 85, 87, 94, 96, 98, 99, 102, 114, 120, 122, 123, 126, 129, 130, 131, 134, 135, 136, 137, 149, 152, 153, 176, 178, 235, 256, 277, 294, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 391, 394, 397, 398, 399, 402, 403, 404, 405, 414, 418, 419, 438, 476, 481, 486, 487, 492, 532, 539, 544, 545, 555, 578, 662, 663, 664, 668, 678, 687, 688, 690, 693, 694, 698, 699, 702, 704], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 49, 56, 60, 61, 62, 70, 74, 85, 87, 90, 96, 98, 99, 102, 111, 114, 120, 122, 123, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 152, 153, 162, 168, 171, 176, 178, 235, 277, 283, 286, 309, 310, 318, 325, 330, 331, 332, 345, 354, 357, 358, 361, 365, 366, 367, 368, 372, 383, 384, 388, 390, 394, 397, 398, 399, 400, 402, 403, 404, 405, 418, 419, 426, 433, 438, 440, 442, 457, 476, 481, 482, 487, 492, 498, 518, 523, 539, 544, 598, 647, 649, 652, 659, 661, 662, 663, 664, 668, 669, 670, 672, 686, 688, 693, 695, 699, 702, 704], "multiindex": [8, 26, 41, 42, 44, 49, 56, 60, 61, 62, 73, 85, 87, 89, 90, 95, 96, 98, 99, 102, 114, 119, 120, 122, 124, 127, 128, 129, 130, 131, 134, 135, 136, 143, 146, 148, 152, 153, 156, 176, 179, 205, 218, 224, 236, 242, 244, 250, 277, 293, 309, 310, 312, 318, 325, 330, 331, 332, 340, 354, 357, 360, 361, 364, 365, 367, 368, 372, 384, 388, 390, 395, 396, 397, 398, 399, 402, 403, 404, 411, 413, 418, 419, 438, 529, 538, 539, 544, 678, 690, 694, 698, 700], "yet": [8, 11, 14, 15, 41, 42, 49, 56, 60, 62, 80, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 124, 127, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 178, 184, 205, 258, 277, 297, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 382, 384, 388, 390, 395, 397, 398, 399, 402, 403, 404, 413, 418, 419, 438, 447, 481, 486, 529, 532, 538, 539, 555, 629, 667, 669, 670, 687, 693, 696, 699, 702], "fill": [8, 24, 25, 41, 42, 49, 53, 54, 56, 60, 62, 85, 87, 96, 98, 99, 102, 108, 110, 114, 120, 122, 123, 127, 129, 130, 131, 134, 135, 136, 152, 153, 176, 215, 256, 277, 289, 291, 309, 310, 318, 322, 323, 325, 330, 332, 354, 357, 365, 367, 368, 372, 381, 382, 384, 388, 390, 395, 397, 398, 399, 402, 403, 404, 418, 419, 438, 457, 477, 480, 520, 528, 537, 556, 562, 563, 571, 572, 576, 578, 582, 583, 591, 597, 699, 700], "exist": [8, 41, 42, 44, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 126, 129, 130, 131, 134, 135, 136, 143, 152, 153, 166, 176, 277, 309, 310, 312, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 394, 397, 398, 399, 402, 403, 404, 418, 419, 430, 438, 457, 651, 666, 687, 688, 693, 697, 704], "success": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "align": [8, 14, 41, 42, 49, 56, 60, 61, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 152, 153, 176, 178, 272, 277, 309, 310, 318, 325, 330, 331, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 405, 418, 419, 438, 440, 457, 687, 702], "befor": [8, 9, 41, 42, 49, 51, 56, 60, 62, 85, 87, 96, 98, 99, 102, 110, 114, 120, 122, 129, 130, 131, 134, 135, 136, 148, 152, 153, 176, 277, 278, 287, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 382, 384, 388, 390, 397, 398, 399, 402, 403, 404, 413, 418, 419, 438, 476, 529, 538, 543, 637, 649, 659, 662, 679, 686, 690, 693, 695], "comput": [8, 16, 29, 31, 41, 42, 49, 56, 60, 61, 62, 63, 70, 82, 83, 85, 87, 89, 90, 91, 95, 96, 97, 98, 99, 102, 110, 114, 115, 116, 117, 118, 120, 121, 122, 129, 130, 131, 134, 135, 136, 147, 152, 153, 154, 176, 235, 236, 277, 287, 295, 297, 309, 310, 318, 325, 328, 330, 331, 332, 334, 351, 352, 354, 357, 360, 361, 362, 364, 365, 367, 368, 372, 382, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 402, 403, 404, 412, 418, 419, 420, 438, 470, 474, 484, 485, 519, 530, 564, 573, 574, 575, 577, 584, 585, 586, 592, 593, 594, 595, 599, 601, 602, 604, 606, 647, 650, 678, 687, 688, 693, 696, 699, 700], "both": [8, 28, 36, 41, 42, 49, 50, 56, 60, 62, 68, 74, 85, 87, 94, 96, 97, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 141, 152, 153, 176, 178, 200, 249, 254, 255, 272, 277, 290, 294, 303, 309, 310, 318, 319, 325, 330, 332, 338, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 455, 528, 556, 586, 652, 668, 669, 670, 677, 686, 687, 690, 696, 697, 698, 699, 704], "correspond": [8, 16, 17, 41, 42, 44, 49, 54, 56, 60, 62, 70, 85, 87, 88, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 137, 143, 152, 153, 170, 176, 183, 220, 277, 290, 309, 310, 312, 318, 321, 323, 325, 330, 332, 354, 357, 358, 359, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 405, 418, 419, 434, 438, 440, 446, 476, 481, 483, 518, 531, 533, 578, 659, 662, 687, 688, 690, 699], "locat": [8, 41, 42, 44, 49, 50, 56, 60, 62, 71, 74, 85, 87, 96, 98, 99, 102, 114, 120, 122, 123, 129, 130, 131, 134, 135, 136, 140, 152, 153, 176, 256, 258, 266, 277, 309, 310, 312, 318, 319, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 407, 418, 419, 438, 490, 525, 533, 549, 550, 658, 659, 662, 663, 664, 665, 687, 702], "arithmet": [8, 41, 42, 43, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 311, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438, 699, 702, 704], "angl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "degre": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 151, 152, 153, 176, 182, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 415, 418, 419, 438, 445, 478, 524, 525, 586, 601, 604, 644, 646], "360": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "180": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "circl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "triangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "rectangl": [8, 41, 42, 49, 56, 60, 62, 85, 87, 96, 98, 99, 102, 114, 120, 122, 129, 130, 131, 134, 135, 136, 152, 153, 176, 277, 309, 310, 318, 325, 330, 332, 354, 357, 365, 367, 368, 372, 384, 388, 390, 397, 398, 399, 402, 403, 404, 418, 419, 438], "361": [8, 120, 277, 388, 693], "181": [8, 120, 277, 388], "c": [8, 15, 26, 36, 40, 41, 42, 44, 49, 51, 54, 56, 60, 62, 68, 70, 81, 85, 86, 87, 93, 96, 98, 99, 102, 111, 112, 114, 120, 122, 124, 126, 129, 130, 131, 132, 134, 135, 136, 137, 141, 143, 146, 148, 152, 153, 158, 161, 176, 177, 218, 245, 266, 277, 292, 293, 303, 309, 310, 312, 318, 321, 323, 325, 327, 330, 332, 338, 350, 354, 356, 357, 365, 367, 368, 372, 383, 384, 388, 390, 391, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 411, 413, 418, 419, 423, 429, 438, 439, 440, 457, 476, 482, 518, 523, 531, 553, 554, 561, 580, 581, 584, 586, 605, 629, 647, 656, 657, 659, 668, 673, 687, 689, 690, 693, 694, 695, 698, 699, 702], "e": [8, 11, 15, 36, 41, 42, 49, 51, 56, 60, 62, 85, 86, 87, 96, 98, 99, 102, 114, 120, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 143, 152, 153, 158, 171, 176, 177, 245, 266, 277, 292, 303, 309, 310, 318, 325, 330, 332, 354, 356, 357, 365, 367, 368, 372, 384, 388, 389, 390, 394, 397, 398, 399, 400, 402, 403, 404, 418, 419, 423, 438, 440, 466, 479, 481, 482, 487, 492, 493, 518, 523, 526, 551, 553, 554, 629, 647, 652, 659, 673, 686, 687, 688, 690, 693, 699], "int64": [8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 48, 51, 54, 56, 63, 68, 70, 81, 86, 88, 89, 91, 93, 95, 96, 98, 99, 107, 114, 115, 116, 120, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 146, 147, 150, 152, 153, 154, 155, 160, 170, 177, 179, 183, 184, 207, 212, 215, 224, 235, 236, 239, 240, 242, 244, 248, 250, 253, 260, 267, 277, 278, 279, 282, 283, 284, 285, 286, 292, 293, 294, 302, 303, 307, 311, 312, 314, 317, 320, 323, 325, 328, 333, 334, 338, 350, 356, 358, 359, 360, 362, 364, 365, 366, 367, 368, 373, 376, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 411, 412, 414, 418, 419, 420, 421, 434, 440, 446, 447, 458, 459, 460, 464, 465, 466, 469, 482, 485, 495, 496, 499, 500, 558, 633, 634, 635, 636, 639, 650, 673, 693, 694, 695, 697, 699, 701, 702, 704], "prefix": [9, 10, 278, 279, 650, 652, 659, 686], "For": [9, 10, 15, 16, 30, 36, 44, 50, 55, 61, 64, 84, 93, 94, 111, 121, 126, 127, 132, 133, 148, 166, 167, 218, 266, 278, 279, 283, 303, 312, 319, 324, 331, 335, 353, 383, 389, 394, 395, 396, 400, 401, 413, 430, 431, 467, 487, 492, 539, 572, 581, 586, 638, 647, 659, 662, 672, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704], "str": [9, 10, 18, 19, 51, 52, 55, 59, 70, 73, 80, 84, 92, 94, 106, 109, 110, 117, 119, 126, 127, 128, 133, 139, 140, 141, 143, 149, 156, 161, 162, 165, 166, 168, 169, 171, 184, 185, 190, 197, 199, 200, 218, 247, 249, 263, 264, 270, 272, 278, 279, 285, 314, 324, 340, 353, 382, 387, 394, 395, 396, 401, 407, 426, 429, 430, 433, 447, 454, 455, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 561, 578, 580, 603, 605, 608, 614, 627, 629, 637, 638, 647, 648, 650, 651, 652, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 682, 683, 688, 693, 695, 699, 701], "add": [9, 10, 43, 71, 80, 166, 278, 279, 311, 430, 458, 459, 650, 659, 688, 690, 691, 693, 699], "updat": [9, 10, 28, 73, 278, 279, 294, 340, 686, 687], "add_suffix": [9, 278], "suffix": [9, 10, 94, 278, 279, 686], "item_": [9, 278], "item_0": [9, 278], "item_1": [9, 278], "item_2": [9, 278], "item_3": [9, 278], "6": [9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 54, 57, 64, 68, 70, 75, 76, 86, 91, 104, 105, 107, 124, 126, 127, 140, 146, 147, 160, 177, 179, 187, 188, 189, 201, 212, 224, 250, 261, 278, 279, 282, 284, 298, 299, 300, 301, 303, 307, 308, 311, 312, 323, 335, 338, 346, 347, 350, 356, 362, 366, 374, 375, 394, 395, 407, 411, 412, 439, 440, 442, 459, 460, 464, 465, 467, 468, 469, 477, 478, 479, 480, 482, 489, 553, 554, 581, 584, 586, 610, 611, 612, 613, 616, 617, 619, 620, 630, 632, 639, 647, 652, 656, 673, 686, 693, 695, 697, 698, 699, 702, 704], "col_": [9, 278], "col_a": [9, 278], "col_b": [9, 278], "after": [10, 126, 279, 283, 394, 416, 458, 529, 538, 543, 548, 659, 662, 686, 693, 699], "add_prefix": [10, 279], "_item": [10, 279], "0_item": [10, 279], "1_item": [10, 279], "2_item": [10, 279], "3_item": [10, 279], "_col": [10, 279], "a_col": [10, 279], "b_col": [10, 279], "aggreg": [11, 61, 127, 331, 395, 580, 603, 692, 693, 696, 700], "more": [11, 14, 15, 19, 21, 36, 43, 68, 70, 137, 166, 177, 185, 190, 197, 260, 283, 285, 286, 303, 311, 338, 405, 430, 466, 485, 492, 539, 586, 608, 614, 627, 662, 663, 664, 671, 673, 686, 687, 688, 689, 690, 691, 693, 698, 699, 701, 702, 703], "over": [11, 16, 17, 40, 77, 97, 137, 245, 405, 570, 581, 686, 687, 690, 698, 699, 704], "specifi": [11, 16, 26, 44, 46, 54, 70, 71, 90, 93, 107, 112, 117, 118, 123, 124, 126, 127, 132, 133, 137, 148, 149, 158, 166, 167, 171, 177, 185, 190, 197, 214, 215, 245, 260, 272, 293, 312, 323, 361, 387, 391, 394, 395, 400, 401, 405, 413, 414, 423, 430, 431, 447, 464, 465, 466, 468, 469, 472, 476, 493, 498, 522, 531, 539, 540, 542, 543, 544, 546, 556, 558, 561, 572, 578, 580, 605, 608, 614, 627, 629, 638, 647, 652, 657, 659, 661, 662, 663, 664, 667, 668, 669, 670, 671, 673, 686, 687, 688, 690, 693, 697, 698, 699, 702], "set": [11, 14, 17, 21, 26, 36, 57, 68, 70, 75, 76, 80, 86, 92, 97, 104, 105, 117, 121, 132, 143, 161, 171, 173, 178, 199, 212, 235, 239, 242, 247, 270, 282, 286, 290, 293, 303, 313, 338, 345, 346, 347, 356, 374, 375, 389, 400, 434, 435, 442, 454, 457, 459, 460, 464, 466, 478, 481, 488, 522, 524, 526, 529, 532, 538, 539, 540, 544, 546, 555, 578, 586, 603, 637, 647, 656, 659, 662, 664, 666, 671, 672, 686, 687, 688, 690, 691, 693, 698, 701, 702, 703], "accept": [11, 18, 19, 40, 80, 137, 207, 271, 285, 307, 358, 405, 481, 486, 493, 545, 561, 570, 580, 586, 605, 672, 686, 688, 690, 697, 698, 699, 704], "g": [11, 36, 111, 303, 383, 466, 479, 481, 482, 487, 492, 518, 523, 526, 553, 554, 629, 659, 686, 687, 688, 690, 699], "sum": [11, 35, 115, 116, 127, 132, 137, 155, 301, 385, 386, 395, 400, 405, 421, 442, 561, 568, 580, 590, 605, 690, 693, 695, 696, 698, 700, 704], "min": [11, 33, 36, 121, 185, 190, 197, 244, 299, 303, 389, 561, 567, 569, 580, 589, 598, 605, 608, 614, 627, 698, 702], "max": [11, 32, 36, 61, 121, 132, 298, 303, 331, 389, 400, 561, 566, 569, 580, 588, 598, 603, 605, 693, 696, 698, 699], "per": [11, 16, 29, 70, 148, 179, 292, 413, 487, 501, 502, 531, 561, 580, 584, 586, 603, 605, 662, 687, 693, 695, 698, 701], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 55, 70, 74, 80, 82, 83, 84, 89, 90, 91, 94, 95, 106, 111, 115, 116, 117, 118, 137, 147, 154, 167, 171, 178, 179, 205, 224, 250, 271, 286, 294, 303, 311, 312, 324, 351, 352, 353, 360, 361, 362, 364, 373, 376, 383, 385, 386, 387, 396, 405, 412, 420, 431, 481, 482, 492, 494, 497, 498, 518, 532, 536, 539, 544, 577, 647, 650, 652, 659, 661, 662, 663, 667, 668, 669, 670, 672, 686, 687, 688, 690, 691, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704], "sever": [11, 682, 683, 687, 701], "arg": [11, 15, 17, 32, 33, 34, 35, 111, 163, 165, 166, 167, 169, 171, 283, 358, 383, 391, 394, 413, 427, 430, 431, 566, 567, 568, 573, 574, 575, 581, 588, 589, 590, 592, 593, 594, 595, 598, 599, 602, 606, 629, 639, 641, 642, 643, 645, 660, 661, 662, 664, 671, 672, 699], "bool_onli": [12, 13, 280, 281], "skipna": [12, 13, 32, 33, 34, 35, 82, 83, 89, 90, 91, 95, 115, 116, 147, 151, 154, 182, 280, 281, 298, 299, 300, 301, 351, 352, 360, 361, 362, 364, 385, 386, 412, 415, 420, 445, 702], "exclud": [12, 13, 32, 33, 34, 35, 36, 82, 83, 89, 90, 91, 95, 115, 116, 141, 147, 151, 154, 182, 272, 280, 281, 290, 295, 297, 298, 299, 300, 301, 303, 351, 352, 360, 361, 362, 364, 385, 386, 412, 415, 420, 442, 445, 569, 584, 586, 702], "entir": [12, 13, 21, 32, 33, 34, 35, 48, 151, 182, 280, 281, 286, 298, 299, 300, 301, 317, 415, 445, 664, 686, 695, 699], "empti": [12, 13, 75, 76, 81, 104, 105, 115, 116, 125, 141, 146, 154, 240, 280, 281, 314, 346, 347, 374, 375, 385, 386, 393, 411, 420, 476, 507, 518, 529, 538, 650, 659, 699, 702], "equal": [12, 13, 49, 60, 73, 85, 94, 102, 121, 126, 132, 137, 200, 213, 224, 249, 250, 280, 281, 318, 330, 340, 354, 372, 389, 394, 400, 405, 455, 518, 556, 647, 667, 668, 669, 670, 672, 702, 704], "zero": [12, 13, 23, 280, 281, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 556, 659, 662, 699], "current": [12, 13, 14, 26, 30, 40, 51, 73, 82, 83, 89, 91, 95, 97, 115, 116, 123, 125, 126, 137, 143, 147, 151, 154, 161, 169, 182, 215, 240, 272, 280, 281, 282, 293, 296, 340, 351, 352, 358, 360, 362, 364, 385, 386, 393, 394, 405, 412, 415, 420, 445, 450, 481, 482, 487, 492, 523, 555, 584, 603, 638, 665, 667, 668, 670, 680, 686, 687, 688, 690, 691, 693, 696, 699, 703], "ignore_index": [14, 45, 52, 137, 148, 149, 282, 313, 320, 405, 413, 414, 457, 471], "verify_integr": [14, 143, 258, 282], "sort": [14, 19, 45, 55, 61, 80, 84, 94, 103, 106, 140, 148, 149, 179, 212, 224, 236, 244, 250, 266, 272, 285, 313, 324, 331, 353, 366, 373, 376, 407, 413, 414, 442, 457, 471, 647, 678, 686, 687, 693, 694, 696, 698, 704], "end": [14, 19, 148, 149, 185, 190, 197, 244, 285, 315, 413, 414, 471, 486, 491, 492, 497, 498, 527, 535, 536, 539, 542, 543, 545, 608, 613, 614, 616, 617, 619, 620, 623, 627, 659, 662, 699], "caller": [14, 28, 55, 64, 73, 84, 88, 121, 125, 137, 183, 240, 242, 294, 324, 335, 340, 353, 358, 359, 389, 393, 405, 446, 476, 539, 544], "ad": [14, 458, 459, 466, 526, 556, 686, 687, 688, 693], "do": [14, 44, 46, 50, 123, 128, 143, 212, 224, 250, 266, 282, 312, 314, 319, 391, 396, 465, 466, 598, 659, 663, 664, 686, 687, 688, 690, 693, 694, 695, 696, 699, 702, 704], "concat": [14, 282, 476, 655, 688, 700], "gener": [14, 15, 36, 37, 51, 70, 137, 142, 209, 241, 282, 284, 303, 304, 405, 408, 478, 524, 525, 569, 586, 638, 652, 678, 686, 687, 688, 690, 692, 696, 699, 700], "concaten": [14, 282, 457, 467, 476, 483, 518, 663, 693, 698, 704], "unchang": [14, 28, 294, 556], "computation": 14, "intens": [14, 695], "than": [14, 15, 46, 60, 62, 70, 85, 87, 115, 116, 123, 137, 154, 179, 290, 330, 332, 354, 357, 385, 386, 391, 405, 420, 442, 451, 452, 453, 466, 481, 485, 490, 492, 501, 502, 529, 532, 538, 555, 556, 573, 574, 575, 586, 592, 593, 594, 595, 599, 602, 606, 634, 636, 652, 686, 687, 688, 690, 693, 694, 697, 699, 702, 704], "better": [14, 61, 137, 331, 405, 687, 698], "solut": [14, 142, 241, 408, 686, 696], "those": [14, 15, 36, 121, 283, 303, 389, 457, 518, 561, 580, 605, 662, 679, 686, 687, 690, 699], "origin": [14, 21, 28, 51, 88, 93, 124, 127, 139, 178, 183, 199, 200, 247, 249, 270, 286, 294, 315, 359, 395, 396, 440, 446, 454, 455, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 541, 637, 638, 640, 641, 642, 643, 644, 645, 646, 671, 686, 696], "onc": [14, 137, 405, 492, 662, 686, 688, 690, 693], "ab": [14, 256, 478, 487, 497, 520, 536, 537, 543, 699, 702], "df2": [14, 457, 652, 668, 693, 699, 702], "8": [14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 51, 64, 68, 74, 82, 83, 86, 88, 89, 90, 95, 97, 115, 116, 126, 127, 132, 147, 151, 154, 156, 159, 161, 177, 182, 183, 187, 189, 290, 298, 299, 300, 301, 303, 307, 311, 312, 328, 335, 338, 351, 352, 356, 359, 360, 361, 364, 385, 386, 394, 395, 400, 412, 415, 420, 424, 440, 445, 446, 467, 471, 479, 480, 494, 553, 554, 581, 584, 586, 610, 611, 612, 613, 616, 617, 630, 638, 639, 647, 652, 662, 667, 668, 669, 670, 673, 690, 693, 695, 697, 699, 702], "With": [14, 28, 70, 133, 196, 282, 290, 294, 313, 401, 442, 626, 662, 690, 693, 695, 696, 699], "follow": [14, 70, 106, 127, 161, 307, 395, 396, 481, 518, 529, 538, 555, 561, 580, 605, 629, 638, 659, 664, 672, 677, 686, 687, 688, 690, 691, 696, 698, 699, 701, 704], "while": [14, 97, 161, 171, 292, 581, 652, 688, 690, 694, 699, 702], "recommend": [14, 123, 124, 687, 688], "show": [14, 70, 74, 75, 76, 104, 105, 127, 346, 347, 374, 375, 395, 667, 668, 669, 670, 687, 690, 693], "wai": [14, 126, 284, 394, 671, 686, 687, 688, 690, 695, 697, 699, 702, 704], "sourc": [14, 16, 17, 164, 246, 284, 428, 649, 658, 659, 663, 664, 687, 688, 694], "less": [14, 46, 85, 87, 290, 354, 357, 451, 452, 453, 466, 555, 556, 634, 636, 662, 687], "effici": [14, 16, 93, 173, 435, 689, 690, 702], "abov": [14, 143, 686, 690, 696, 699, 702], "func": [15, 16, 17, 18, 111, 283, 383, 561, 580, 581, 598, 605, 639, 693], "raw": [15, 637, 658, 663, 664], "result_typ": 15, "along": [15, 73, 89, 90, 95, 97, 121, 148, 149, 340, 360, 361, 364, 389, 413, 414, 457, 702], "reli": [15, 283, 689, 690, 693, 704], "numba": [15, 16, 119, 283, 284, 700, 704], "jit": [15, 16, 283, 284, 699, 704], "compil": [15, 119, 283, 284, 482, 523, 532, 534, 688, 699, 704], "thu": [15, 283, 469, 689, 697, 699], "within": [15, 55, 61, 84, 132, 283, 324, 331, 353, 400, 481, 490, 501, 502, 524, 525, 533, 573, 574, 575, 578, 592, 593, 594, 595, 599, 602, 606, 659, 662, 682, 686, 688, 699], "limit": [15, 16, 24, 25, 36, 53, 54, 73, 108, 110, 123, 126, 283, 289, 291, 303, 322, 323, 340, 381, 382, 391, 394, 539, 544, 562, 563, 571, 572, 576, 581, 582, 583, 591, 597, 687, 694, 700], "cuda": [15, 16, 17, 283, 284, 637, 638, 689, 692, 693, 695, 699, 701], "python": [15, 18, 21, 43, 119, 242, 283, 284, 286, 311, 416, 476, 486, 503, 504, 505, 506, 512, 513, 514, 517, 539, 544, 581, 629, 658, 663, 664, 671, 686, 688, 689, 690, 692, 693, 697, 699, 702, 704], "target": [15, 123, 283, 484, 533, 686, 687], "see": [15, 16, 19, 28, 43, 48, 50, 61, 119, 166, 185, 190, 197, 283, 285, 294, 311, 317, 319, 331, 430, 539, 544, 561, 580, 586, 605, 608, 614, 627, 639, 658, 659, 661, 662, 663, 664, 671, 686, 687, 691, 693, 696, 698, 699, 701, 703, 704], "guid": [15, 166, 283, 430, 561, 580, 605, 688, 691, 692, 699], "user": [15, 16, 17, 51, 166, 271, 283, 284, 430, 561, 580, 605, 639, 672, 686, 687, 688, 690, 691, 692, 693, 696, 701, 704], "defin": [15, 17, 37, 46, 132, 142, 209, 241, 283, 284, 304, 327, 400, 408, 528, 581, 638, 639, 647, 686, 690, 692, 693, 695, 700, 704], "which": [15, 16, 17, 36, 44, 45, 46, 51, 57, 58, 74, 75, 76, 93, 104, 105, 111, 127, 133, 141, 148, 158, 164, 166, 167, 171, 173, 192, 196, 217, 245, 246, 254, 258, 273, 284, 295, 297, 303, 308, 312, 314, 326, 329, 346, 347, 374, 375, 383, 395, 401, 413, 423, 428, 430, 431, 435, 437, 464, 466, 481, 483, 484, 526, 528, 529, 538, 556, 586, 616, 626, 629, 638, 647, 649, 650, 652, 664, 667, 668, 670, 671, 686, 687, 688, 690, 693, 695, 696, 698, 699, 701, 702, 704], "expand": [15, 487, 492, 529, 538, 539, 544, 689], "reduc": [15, 686], "posit": [15, 64, 68, 111, 140, 145, 158, 218, 220, 245, 283, 335, 338, 383, 407, 410, 423, 469, 493, 498, 501, 502, 518, 541, 542, 543, 558, 578, 586, 598, 700], "argument": [15, 16, 17, 19, 20, 21, 31, 90, 111, 123, 124, 143, 148, 151, 161, 166, 167, 177, 182, 244, 283, 284, 285, 286, 361, 383, 396, 413, 415, 430, 431, 445, 457, 561, 580, 598, 605, 638, 650, 659, 661, 664, 671, 672, 673, 677, 686, 687, 690, 695, 703], "simpl": [15, 284, 466, 686, 690, 693, 699], "variabl": [15, 46, 92, 94, 119, 132, 133, 284, 314, 400, 401, 647, 656, 686, 693, 701], "could": [15, 586, 690, 695, 699], "def": [15, 16, 17, 132, 283, 284, 400, 518, 524, 581, 639, 659, 686, 688, 693, 695, 697, 699], "f": [15, 36, 111, 266, 283, 303, 383, 493, 518, 532, 541, 553, 554, 671, 688, 699], "els": [15, 75, 76, 283, 284, 346, 347, 688, 693, 695, 699], "awar": [15, 292, 699], "manner": [15, 16], "mai": [15, 16, 17, 21, 61, 137, 140, 166, 169, 227, 266, 283, 286, 331, 358, 405, 407, 430, 481, 484, 501, 502, 572, 586, 659, 662, 663, 664, 677, 680, 686, 687, 688, 689, 690, 693, 694, 695, 698, 699], "condition": [15, 283, 686, 699], "mix": [15, 36, 117, 166, 227, 303, 430, 503, 672, 694, 699], "common": [15, 36, 94, 142, 224, 241, 283, 303, 408, 671, 686, 687, 690, 699], "rather": [15, 123, 162, 179, 391, 426, 442, 686, 688, 690, 694, 699, 704], "howev": [15, 171, 481, 526, 586, 686, 687, 688, 690, 693, 697, 699, 702], "promot": [15, 699], "safe": [15, 693, 699], "regardless": [15, 36, 119, 303, 672, 696, 699], "op": [15, 699], "against": [15, 16, 17, 50, 319, 484, 503], "v": [15, 148, 149, 413, 414, 534, 572, 689, 694], "w": [15, 127, 166, 395, 430, 479, 659], "z": [15, 16, 17, 44, 54, 126, 161, 312, 323, 391, 394, 489, 557, 696], "incol": [16, 17, 699], "outcol": [16, 17, 699], "pessimistic_nul": [16, 17], "chunk": [16, 171, 581, 665], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 52, 124, 284, 320, 526, 581, 639, 693, 695, 699, 700], "execut": [16, 17, 688, 693, 699, 704], "Or": [16, 17, 123, 697, 699], "dictionari": [16, 17, 21, 111, 142, 241, 286, 383, 408, 560, 598, 650, 664, 690, 691, 697, 699], "map": [16, 17, 61, 75, 76, 104, 105, 111, 124, 200, 249, 331, 346, 347, 374, 375, 383, 455, 489, 551, 560, 561, 580, 598, 605, 650, 659, 687, 689, 690, 693, 698, 699, 702], "col1": [16, 17, 699], "arg1": [16, 17, 111, 383, 699], "output": [16, 17, 36, 51, 61, 70, 109, 119, 137, 139, 161, 164, 167, 169, 171, 172, 173, 246, 272, 284, 303, 331, 405, 428, 431, 435, 447, 467, 483, 490, 539, 544, 581, 638, 650, 652, 662, 667, 668, 669, 670, 678, 686, 688, 690, 692, 696, 698, 699, 700, 704], "extra": [16, 17, 21, 124, 286, 527], "These": [16, 17, 94, 284, 680, 682, 683, 686, 687, 688, 690, 697, 699, 702], "directli": [16, 17, 44, 178, 242, 312, 458, 679, 690, 693, 695, 699], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 65, 66, 70, 121, 125, 126, 133, 137, 140, 148, 167, 171, 178, 205, 209, 210, 211, 218, 222, 223, 240, 244, 303, 304, 305, 306, 336, 337, 389, 391, 393, 394, 401, 405, 407, 413, 431, 464, 466, 485, 516, 534, 578, 638, 647, 652, 664, 665, 679, 686, 687, 688, 690, 693, 699, 704], "non": [16, 17, 30, 46, 48, 54, 70, 94, 104, 105, 115, 116, 117, 125, 132, 154, 159, 177, 178, 187, 189, 215, 240, 244, 272, 296, 314, 317, 323, 374, 375, 385, 386, 393, 400, 420, 424, 440, 441, 442, 457, 488, 492, 518, 573, 574, 575, 586, 592, 593, 594, 595, 599, 602, 606, 610, 612, 638, 640, 647, 650, 659, 662, 672, 673, 686, 687, 690, 694, 702, 704], "underli": [16, 17, 124, 146, 181, 259, 371, 392, 411, 444, 678, 686, 690, 693, 702], "garbag": [16, 17, 328], "chunksiz": [16, 161, 661, 662], "integ": [16, 19, 51, 56, 68, 123, 125, 128, 129, 133, 169, 171, 177, 196, 218, 225, 226, 227, 228, 229, 233, 234, 240, 253, 256, 258, 260, 266, 269, 271, 272, 285, 321, 325, 338, 345, 391, 393, 396, 397, 401, 456, 469, 474, 480, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 519, 549, 613, 626, 647, 659, 662, 671, 672, 673, 686, 690, 693, 694, 697, 702], "offset": [16, 55, 84, 127, 132, 171, 324, 353, 395, 400, 659, 662, 690], "start": [16, 23, 94, 119, 127, 146, 271, 288, 315, 350, 395, 411, 491, 497, 498, 523, 526, 532, 535, 536, 541, 542, 543, 544, 545, 553, 554, 613, 616, 617, 619, 620, 623, 658, 659, 661, 662, 663, 671, 689, 690], "span": 16, "th": [16, 321, 469, 485], "size": [16, 26, 75, 76, 93, 104, 105, 132, 169, 171, 205, 293, 346, 347, 374, 375, 400, 476, 480, 485, 541, 603, 647, 652, 659, 662, 686, 690, 698, 699, 701], "len": [16, 171, 480, 638, 678, 693, 699], "thread": [16, 17, 699], "block": [16, 526], "kernel": [16, 17, 119, 700], "foral": [16, 699], "built": [16, 526, 690, 692, 693, 695], "queri": [16, 166, 430, 494, 693, 696], "driver": [16, 693], "api": [16, 110, 382, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 700, 701, 702, 703, 704], "optim": [16, 70, 664, 701, 704], "launch": [16, 699], "configur": [16, 658, 659, 663, 664, 665, 687, 699, 703], "emul": 16, "serial": [16, 17, 37, 38, 39, 65, 66, 209, 210, 211, 222, 223, 304, 305, 306, 336, 337, 678], "It": [16, 64, 97, 137, 148, 205, 218, 335, 358, 405, 413, 652, 686, 687, 689, 699, 702, 704], "good": [16, 638, 647, 687, 689, 693], "point": [16, 73, 117, 118, 140, 167, 340, 387, 407, 431, 480, 525, 549, 550, 577, 659, 689, 690, 697, 699, 700, 702], "ineffici": 16, "Its": [16, 690], "maximum": [16, 26, 89, 169, 171, 256, 293, 360, 489, 555, 598, 638, 647, 659, 697, 701], "possibl": [16, 73, 166, 205, 340, 430, 662, 672, 686, 687, 688, 690, 699, 701, 702, 704], "avail": [16, 166, 430, 482, 529, 538, 648, 658, 659, 663, 664, 677, 679, 682, 688, 693, 698, 701, 702], "resourc": [16, 70, 686], "number": [16, 29, 30, 36, 64, 70, 71, 74, 103, 106, 107, 109, 110, 115, 116, 123, 124, 125, 132, 133, 137, 146, 151, 154, 159, 167, 169, 171, 182, 238, 240, 260, 263, 264, 269, 284, 287, 295, 296, 303, 321, 328, 335, 371, 377, 380, 382, 385, 386, 393, 400, 401, 405, 411, 415, 420, 424, 431, 441, 442, 445, 449, 451, 452, 453, 457, 474, 476, 478, 482, 485, 490, 493, 505, 524, 525, 528, 532, 539, 544, 549, 564, 573, 574, 575, 578, 584, 585, 586, 592, 593, 594, 595, 599, 602, 606, 613, 633, 634, 635, 636, 637, 638, 644, 646, 647, 650, 655, 658, 659, 661, 662, 663, 667, 668, 669, 670, 671, 686, 687, 688, 690, 693, 697, 698, 699, 701], "concurr": [16, 17], "To": [16, 36, 45, 126, 171, 303, 394, 442, 529, 598, 659, 663, 664, 686, 688, 690, 695, 698, 699, 702, 703, 704], "access": [16, 36, 166, 303, 430, 678, 682, 683, 690, 693, 699, 701], "count": [16, 36, 70, 89, 90, 95, 97, 107, 132, 159, 179, 303, 360, 361, 364, 366, 380, 400, 424, 442, 565, 569, 587, 639, 678, 693, 696, 698], "threadidx": [16, 699], "blockdim": [16, 699], "respect": [16, 94, 126, 167, 394, 431, 466, 539, 544, 558, 647, 662, 668, 686, 695, 697], "document": [16, 539, 671, 686, 687, 689, 690, 691, 693, 699, 704], "In": [16, 26, 106, 124, 166, 283, 293, 396, 430, 518, 539, 544, 581, 671, 686, 687, 688, 689, 690, 694, 695, 697, 699, 700, 702, 704], "below": [16, 26, 28, 36, 48, 293, 294, 303, 317, 586, 686, 693, 699, 704], "invok": [16, 17, 686, 690], "By": [16, 36, 45, 70, 97, 121, 133, 166, 167, 179, 212, 284, 303, 389, 401, 430, 431, 476, 652, 659, 664, 686, 690, 693, 695, 699, 702, 704], "loop": [16, 17, 690, 695, 699], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 283, 528, 556, 663, 664, 690, 697, 698, 699, 702, 704], "so": [17, 132, 171, 179, 266, 376, 400, 442, 686, 687, 688, 690, 692, 695, 696, 699, 702, 704], "must": [17, 37, 50, 51, 74, 80, 94, 109, 124, 126, 127, 132, 133, 139, 140, 142, 149, 159, 166, 168, 178, 185, 190, 197, 205, 209, 241, 242, 256, 272, 304, 319, 328, 394, 395, 400, 401, 407, 408, 414, 424, 430, 433, 464, 469, 476, 482, 494, 608, 614, 627, 647, 659, 662, 663, 664, 668, 669, 686, 687, 690, 693, 699, 702, 704], "independ": [17, 688, 699], "stride": [17, 169, 638], "improv": [17, 659, 663], "parallel": [17, 183, 446, 693, 694, 696, 699, 701, 704], "resembl": 17, "code": [17, 44, 146, 156, 244, 258, 312, 321, 327, 411, 480, 686, 688, 689, 690, 693, 699], "nelem": [17, 695], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 699], "zip": [17, 167, 431, 659, 662, 693, 699], "callabl": [18, 88, 111, 148, 167, 183, 284, 359, 383, 413, 431, 446, 561, 580, 584, 598, 603, 605, 698], "na_act": [18, 358], "elementwis": [18, 284, 639], "everi": [18, 46, 74, 532, 561, 580, 605, 690, 693, 699], "ignor": [18, 21, 36, 44, 73, 93, 94, 97, 107, 124, 126, 133, 178, 286, 303, 312, 340, 358, 363, 394, 396, 401, 457, 467, 476, 569, 650, 659, 661, 663, 667, 668, 670, 671, 672, 699, 702], "propag": [18, 21, 54, 286, 323, 358, 539, 544, 572, 699, 701, 702], "without": [18, 28, 36, 44, 70, 124, 242, 251, 294, 303, 312, 358, 476, 526, 539, 543, 544, 659, 668, 669, 670, 686, 687, 692, 695, 699], "them": [18, 284, 358, 442, 483, 488, 490, 671, 688, 690, 697, 698, 699, 704], "kind": [19, 94, 127, 148, 149, 220, 242, 285, 395, 413, 414, 471, 697], "quicksort": [19, 149, 285, 414, 471], "ascend": [19, 121, 140, 148, 149, 179, 244, 285, 376, 389, 407, 413, 414, 442, 471], "na_posit": [19, 140, 148, 149, 244, 285, 407, 413, 414, 471], "last": [19, 36, 45, 54, 64, 103, 106, 124, 140, 148, 149, 157, 213, 244, 285, 303, 313, 323, 335, 373, 376, 407, 413, 414, 422, 458, 471, 497, 529, 536, 538, 572, 617, 619, 621, 638, 659, 671, 699], "would": [19, 140, 166, 244, 283, 285, 407, 430, 533, 556, 671, 686, 688, 693, 699, 702], "effect": [19, 61, 123, 285, 331, 391, 686, 694, 696], "compat": [19, 22, 67, 93, 177, 218, 285, 314, 363, 662, 673, 688, 689, 690, 692, 697, 700, 701], "mergesort": [19, 285], "heapsort": [19, 285], "stabl": [19, 285, 701], "choic": [19, 70, 285, 671, 688, 695], "algorithm": [19, 117, 285, 387, 484, 485, 530, 690, 693], "descend": [19, 103, 140, 148, 149, 179, 244, 285, 373, 407, 413, 414, 442, 471], "first": [19, 36, 40, 45, 50, 61, 64, 103, 106, 121, 127, 140, 142, 148, 149, 156, 167, 179, 184, 196, 213, 241, 244, 260, 283, 285, 303, 307, 313, 319, 331, 335, 373, 376, 389, 395, 396, 407, 408, 413, 414, 431, 442, 471, 487, 516, 521, 529, 539, 544, 547, 548, 552, 570, 618, 620, 622, 626, 638, 647, 659, 662, 671, 686, 687, 688, 690, 693, 699], "put": [19, 148, 149, 244, 285, 413, 414, 471, 689], "begin": [19, 148, 149, 244, 285, 413, 414, 471, 498, 527, 542, 543, 544, 620, 659, 662, 693], "cupi": [19, 31, 61, 117, 137, 140, 162, 180, 235, 244, 257, 285, 321, 331, 405, 407, 426, 443, 638, 686, 690, 692, 693, 700, 702, 704], "ndarrai": [19, 59, 92, 137, 162, 168, 180, 181, 184, 192, 244, 257, 272, 285, 321, 405, 426, 433, 443, 444, 638, 647, 656, 672, 693, 695, 699], "base": [19, 26, 44, 45, 55, 64, 70, 74, 84, 112, 127, 132, 141, 200, 249, 272, 283, 285, 293, 312, 324, 335, 353, 376, 395, 400, 455, 472, 481, 485, 495, 496, 505, 638, 657, 661, 662, 671, 686, 687, 690, 693, 697, 699], "int32": [19, 21, 63, 140, 244, 285, 286, 308, 334, 407, 442, 470, 474, 480, 482, 484, 491, 497, 519, 530, 535, 536, 549, 638, 647, 659, 690, 693, 697, 699, 701], "foo": [19, 47, 161, 285, 396, 532, 659, 686, 687, 688, 693], "idx": [19, 75, 76, 104, 105, 207, 218, 225, 226, 227, 228, 229, 233, 234, 235, 242, 244, 245, 248, 260, 285, 328, 346, 347, 374, 375, 481, 529, 538, 693], "keyword": [20, 31, 90, 111, 123, 124, 236, 361, 383, 391, 457, 539, 544, 598, 661, 693, 699], "error": [21, 44, 124, 161, 166, 178, 283, 286, 312, 345, 430, 647, 661, 671, 672, 687, 697, 701], "rais": [21, 44, 55, 57, 58, 84, 124, 126, 141, 178, 184, 217, 261, 283, 286, 312, 315, 324, 326, 329, 345, 353, 394, 465, 469, 481, 497, 518, 529, 532, 536, 538, 555, 647, 651, 666, 671, 672, 687, 688, 690, 695, 696, 697, 699], "cast": [21, 51, 115, 116, 123, 154, 155, 286, 385, 386, 391, 420, 421, 694, 702], "altern": [21, 44, 46, 111, 286, 312, 383, 533, 598, 659, 686, 688], "col": [21, 72, 286, 686, 695], "where": [21, 38, 44, 46, 51, 70, 75, 76, 88, 103, 104, 105, 106, 111, 117, 123, 125, 140, 151, 169, 182, 210, 235, 240, 286, 305, 312, 346, 347, 359, 374, 375, 376, 383, 387, 391, 393, 407, 415, 445, 478, 485, 491, 494, 497, 501, 502, 535, 536, 598, 635, 644, 646, 661, 686, 687, 688, 690, 693, 694, 698, 701], "specif": [21, 45, 51, 94, 133, 286, 401, 677, 682, 686, 687, 688, 689, 690, 693, 702, 703], "deep": [21, 28, 70, 93, 164, 208, 246, 286, 294, 363, 428, 649], "henc": [21, 286, 702], "chang": [21, 28, 110, 123, 151, 156, 178, 182, 286, 294, 313, 382, 391, 392, 415, 442, 445, 465, 466, 526, 547, 686, 687, 702], "warn": [21, 124, 286, 671, 687, 702], "control": [21, 36, 124, 170, 286, 303, 434, 526, 638, 659, 686, 701], "except": [21, 45, 64, 124, 127, 192, 213, 224, 250, 284, 286, 313, 335, 395, 497, 536, 554, 616, 659, 671, 689, 690, 698, 701], "invalid": [21, 57, 58, 124, 217, 261, 286, 326, 329, 666, 671, 672], "suppress": [21, 44, 124, 286, 312], "On": [21, 124, 286, 466, 693, 696], "constructor": [21, 286, 678, 688, 690, 693, 695, 702], "20": [21, 40, 44, 50, 61, 68, 124, 125, 156, 166, 217, 248, 286, 312, 319, 329, 331, 338, 391, 392, 393, 430, 434, 479, 537, 658, 693, 695, 696, 699], "30": [21, 43, 44, 61, 63, 68, 124, 125, 127, 156, 185, 217, 286, 311, 312, 329, 331, 334, 338, 391, 392, 393, 395, 434, 569, 613, 617, 619, 620, 621, 622, 623, 629, 658, 671, 693], "float32": [21, 286, 442, 672, 697, 701], "custom": [21, 132, 286, 400, 656, 664, 686, 687, 690, 696, 703, 704], "cat_dtyp": [21, 286], "enabl": [21, 169, 286, 659, 662, 686, 688, 690, 697, 701], "s1": [21, 282, 286, 457, 467, 481, 503, 504, 513], "s2": [21, 282, 286, 396, 457, 467, 481, 503, 513], "alia": [22, 67, 230, 341, 350], "loc": [22, 44, 71, 220, 256, 266, 312, 693, 696, 699], "cdf1": 23, "k2": 23, "temp": [23, 262, 488, 693], "stop": [23, 110, 146, 271, 288, 350, 382, 411, 541, 542, 543, 661], "step": [23, 271, 288, 350, 466, 541], "inplac": [24, 25, 26, 44, 45, 46, 51, 53, 54, 73, 88, 108, 124, 126, 128, 143, 148, 149, 183, 239, 242, 289, 291, 292, 293, 312, 313, 314, 322, 323, 340, 359, 381, 392, 394, 396, 413, 414, 446, 458, 459, 460, 464, 465, 466, 471, 572, 702], "synonym": [24, 25, 53, 108, 289, 291, 322, 381], "fillna": [24, 25, 46, 53, 108, 126, 289, 291, 314, 322, 381, 394, 693, 694, 696, 700], "bfill": [24, 54, 127, 256, 289, 323, 395, 572], "lower": [26, 36, 117, 118, 293, 303, 387, 475, 526, 547, 548, 551, 552, 577, 678, 690, 693], "upper": [26, 36, 293, 303, 521, 526, 547, 548, 678], "trim": [26, 293, 527], "threshold": [26, 293, 586], "assign": [26, 51, 121, 124, 139, 292, 293, 389, 434, 693, 696, 702], "outsid": [26, 166, 293, 430, 457, 699], "boundari": [26, 132, 290, 293, 400, 699], "singular": [26, 293], "latter": [26, 293, 686, 687, 688, 695], "case": [26, 51, 64, 94, 117, 124, 148, 203, 224, 250, 253, 293, 335, 396, 413, 456, 481, 484, 518, 523, 526, 532, 539, 638, 671, 686, 687, 688, 690, 694, 695, 698, 699, 702, 704], "perform": [26, 38, 51, 61, 65, 70, 88, 94, 115, 116, 137, 148, 154, 166, 183, 185, 190, 197, 210, 222, 272, 287, 293, 305, 313, 331, 336, 359, 385, 386, 405, 413, 420, 430, 434, 446, 466, 526, 553, 554, 561, 573, 574, 575, 580, 592, 593, 594, 595, 599, 602, 605, 606, 608, 614, 627, 659, 663, 667, 668, 669, 670, 686, 687, 690, 695, 698, 699, 700, 701, 702, 704], "array_lik": [26, 293], "minimum": [26, 29, 95, 132, 293, 295, 364, 400, 477, 489, 490, 520, 528, 537, 556, 584, 586, 598, 647, 686], "expect": [26, 88, 111, 117, 148, 167, 183, 284, 293, 359, 383, 413, 431, 446, 481, 553, 598, 638, 662, 686, 687, 690, 694, 695, 696, 699], "sr": [26, 127, 137, 283, 293, 350, 395, 405, 425, 442, 484, 490, 533, 699], "t": [28, 43, 55, 84, 93, 97, 107, 117, 124, 137, 171, 179, 185, 190, 194, 197, 294, 311, 324, 353, 366, 380, 405, 442, 479, 486, 508, 514, 518, 522, 526, 527, 540, 546, 564, 585, 608, 614, 624, 627, 662, 686, 693, 694, 695, 696, 699, 702], "creat": [28, 123, 125, 127, 128, 143, 166, 199, 200, 205, 240, 242, 247, 249, 270, 294, 326, 327, 328, 393, 395, 396, 430, 454, 455, 529, 534, 538, 586, 637, 659, 686, 688, 693, 695, 696, 697, 698, 699], "modif": [28, 294], "reflect": [28, 43, 294, 311, 687], "refer": [28, 36, 43, 119, 284, 294, 303, 311, 494, 534, 691, 692, 697, 699, 702, 703], "shallow": [28, 294], "vice": [28, 294, 547], "versa": [28, 294, 547], "includ": [28, 36, 51, 59, 70, 75, 76, 89, 90, 93, 95, 104, 105, 107, 117, 133, 141, 167, 171, 172, 179, 192, 272, 290, 294, 303, 346, 347, 360, 361, 363, 364, 366, 374, 375, 380, 387, 401, 431, 442, 458, 464, 465, 466, 494, 506, 513, 522, 526, 540, 543, 546, 564, 569, 573, 574, 575, 585, 592, 593, 594, 595, 599, 602, 606, 616, 647, 652, 658, 659, 661, 662, 663, 664, 665, 686, 687, 688, 689, 690, 693, 697, 699, 701, 702, 704], "neither": [28, 254, 255, 266, 290, 294, 694], "nor": [28, 166, 266, 294, 430, 694, 704], "s_copi": [28, 294], "versu": [28, 294, 687, 702], "share": [28, 294, 457, 686, 687, 690], "remain": [28, 112, 260, 294, 476, 521, 547, 548, 552, 556, 657, 686], "pearson": [29, 147, 287, 295, 412, 584, 698], "min_period": [29, 132, 295, 297, 400, 584, 586, 639, 699], "correl": [29, 287, 295, 584, 586], "matrix": [29, 31, 485, 584, 586, 700], "spearman": [29, 295, 584], "standard": [29, 151, 161, 193, 295, 415, 535, 539, 544, 551, 601, 623, 629, 644, 659, 686, 687, 688, 690, 693, 696, 699], "coeffici": [29, 295, 584], "rank": [29, 295], "observ": [29, 61, 132, 262, 295, 296, 331, 400, 572, 584, 586, 640, 693], "requir": [29, 37, 38, 39, 65, 66, 115, 116, 132, 137, 142, 154, 171, 209, 210, 211, 222, 223, 241, 283, 304, 305, 306, 336, 337, 385, 386, 400, 405, 408, 420, 573, 574, 575, 584, 586, 592, 593, 594, 595, 599, 602, 606, 637, 664, 686, 687, 690, 698, 699], "pair": [29, 77, 126, 394, 584, 586, 664], "have": [29, 36, 48, 50, 55, 74, 84, 94, 97, 106, 109, 111, 121, 123, 127, 137, 141, 170, 171, 178, 179, 272, 284, 295, 303, 317, 319, 324, 353, 383, 389, 395, 405, 434, 463, 476, 485, 495, 496, 518, 556, 584, 586, 656, 686, 687, 688, 690, 693, 695, 698, 699, 702], "valid": [29, 46, 115, 116, 132, 133, 154, 258, 295, 314, 328, 385, 386, 400, 401, 420, 482, 494, 518, 572, 573, 574, 575, 584, 586, 592, 593, 594, 595, 599, 602, 606, 662, 666, 686, 688, 690, 691, 701], "request": [29, 90, 91, 171, 218, 256, 265, 361, 362], "numeric_onli": [30, 82, 83, 89, 90, 91, 95, 97, 115, 116, 117, 121, 147, 151, 154, 182, 351, 352, 360, 361, 362, 364, 385, 386, 389, 412, 415, 420, 445, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606], "cell": [30, 695, 699], "nat": [30, 46, 75, 76, 97, 104, 105, 184, 346, 347, 366, 374, 375, 623, 671, 702], "consid": [30, 44, 45, 46, 48, 50, 75, 76, 97, 104, 105, 161, 213, 284, 312, 314, 317, 319, 346, 347, 366, 374, 375, 466, 518, 659, 686, 688, 690, 699, 702], "entri": [30, 46, 70, 75, 76, 88, 104, 105, 161, 183, 313, 314, 346, 347, 359, 374, 375, 446, 518, 659, 662, 669, 686], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 75, 76, 104, 105, 346, 347, 374, 375], "24": [30, 32, 33, 34, 35, 61, 91, 93, 115, 116, 127, 128, 132, 298, 299, 300, 301, 331, 362, 385, 386, 395, 400, 479, 569, 693, 702], "21": [30, 127, 132, 133, 395, 400, 401, 479, 693, 698], "26": [30, 43, 61, 295, 297, 311, 331, 479, 569, 617, 619, 620, 693], "covari": [31, 297, 586], "cumul": [32, 33, 34, 35, 298, 299, 300, 301, 565, 566, 567, 568, 587, 588, 589, 590, 702], "indexedfram": [32, 33, 34, 35, 690], "ser": [32, 33, 34, 35, 54, 61, 64, 75, 76, 88, 91, 104, 105, 157, 183, 290, 296, 298, 299, 300, 301, 314, 323, 331, 335, 346, 347, 359, 362, 374, 375, 422, 434, 446, 479, 501, 502, 518, 525, 526, 527, 530, 549, 550, 623, 699], "cumsum": [32, 33, 34, 298, 299, 300, 690, 702], "15": [32, 33, 34, 35, 45, 55, 84, 127, 132, 140, 143, 248, 284, 298, 299, 300, 301, 324, 350, 353, 395, 400, 407, 429, 479, 509, 510, 693, 699], "9": [32, 33, 34, 35, 36, 40, 51, 68, 82, 83, 86, 89, 90, 95, 115, 116, 126, 127, 132, 133, 151, 154, 166, 177, 182, 295, 297, 298, 299, 300, 301, 303, 338, 351, 352, 356, 358, 360, 361, 364, 385, 386, 394, 395, 400, 401, 415, 420, 430, 440, 445, 467, 471, 479, 508, 584, 586, 613, 616, 652, 673, 690, 693, 695, 697, 698, 699, 702, 704], "34": [32, 33, 34, 35, 154, 298, 299, 300, 301, 420, 488, 702], "product": [34, 43, 115, 154, 262, 263, 264, 300, 311, 385, 420, 686, 700, 701], "percentil": [36, 121, 303, 389], "datetime_is_numer": [36, 303], "descript": [36, 70, 303, 569, 648, 678, 688, 691, 693, 703], "statist": [36, 70, 132, 169, 171, 272, 303, 400, 569, 652, 663, 664, 693], "summar": [36, 303, 569, 698], "central": [36, 303, 569], "tendenc": [36, 303, 569], "dispers": [36, 303, 569], "shape": [36, 50, 93, 140, 148, 303, 319, 407, 413, 569, 690, 695, 699, 702], "dataset": [36, 169, 171, 303, 366, 569, 652, 654, 658, 659, 662, 663, 664, 686, 699], "distribut": [36, 137, 303, 405, 569, 686, 693], "analyz": [36, 303, 569, 693], "well": [36, 117, 142, 218, 241, 303, 408, 462, 526, 669, 688, 690, 695], "vari": [36, 303, 638, 667, 668, 669, 670, 693], "depend": [36, 51, 94, 124, 162, 167, 168, 170, 205, 236, 260, 303, 426, 431, 433, 434, 539, 544, 647, 649, 661, 662, 671, 672, 686, 690, 693, 695, 701], "what": [36, 303, 472, 686, 687, 690, 699, 700, 704], "detail": [36, 185, 190, 197, 283, 303, 586, 608, 614, 627, 629, 658, 659, 663, 664, 686, 691, 692, 693, 698, 699, 703, 704], "fall": [36, 303, 613, 686, 690, 701], "between": [36, 51, 73, 110, 117, 118, 121, 272, 287, 295, 297, 303, 340, 382, 387, 389, 483, 485, 491, 497, 518, 524, 525, 527, 535, 536, 570, 577, 586, 598, 686, 687, 688, 690, 692, 696, 698, 699, 700, 701, 702, 704], "25": [36, 40, 46, 61, 63, 70, 75, 76, 91, 104, 105, 132, 287, 303, 331, 334, 346, 347, 362, 374, 375, 387, 400, 479, 569, 623, 669, 670, 693, 699], "75": [36, 70, 303, 387, 561, 569, 580, 605, 704], "25th": [36, 303], "50th": [36, 303], "75th": [36, 303], "submit": [36, 303], "instead": [36, 70, 111, 119, 127, 132, 171, 192, 205, 242, 262, 303, 327, 345, 383, 395, 400, 457, 467, 486, 488, 497, 536, 598, 616, 686, 687, 690, 693, 701, 702], "style": [36, 45, 61, 94, 123, 303, 331, 688, 689, 693, 699], "select_dtyp": [36, 303], "o": [36, 303, 479, 686, 690, 693, 700], "select": [36, 44, 55, 64, 68, 84, 86, 97, 106, 124, 166, 245, 303, 312, 313, 324, 335, 338, 353, 356, 430, 661, 662, 663, 664, 678, 690, 696, 700], "omit": [36, 44, 179, 303, 312, 476, 569, 661], "noth": [36, 171, 303, 498], "output_fram": [36, 303], "summari": [36, 70, 303, 569, 700], "mean": [36, 48, 61, 115, 116, 127, 154, 283, 303, 317, 331, 385, 386, 395, 420, 482, 543, 561, 569, 580, 605, 686, 687, 693, 695, 696, 698, 699, 702, 704], "std": [36, 303, 569, 695, 696, 698], "50": [36, 44, 63, 70, 126, 127, 207, 303, 312, 334, 387, 394, 395, 569, 668, 695, 697, 699], "median": [36, 303, 698], "top": [36, 121, 303, 389, 467, 678, 686, 693], "freq": [36, 55, 84, 110, 127, 145, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 204, 303, 315, 324, 353, 382, 395, 410, 447, 578, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 624, 625, 627, 628, 629, 630, 631, 693], "most": [36, 97, 179, 284, 303, 442, 497, 536, 664, 679, 686, 687, 690, 693, 696], "frequenc": [36, 97, 127, 179, 185, 190, 197, 303, 395, 442, 450, 608, 614, 627], "timestamp": [36, 47, 75, 76, 104, 105, 132, 167, 171, 303, 346, 347, 374, 375, 400, 431, 515, 608, 614, 627, 662, 671, 693, 696, 702, 704], "highest": [36, 97, 121, 303, 389, 458, 535, 536, 686], "arbitrarili": [36, 303], "chosen": [36, 137, 303, 405], "among": [36, 43, 303, 311, 586, 704], "analysi": [36, 303, 586], "consist": [36, 140, 225, 226, 227, 228, 229, 233, 234, 258, 303, 407, 686, 687, 688, 690, 699], "union": [36, 94, 162, 168, 272, 303, 426, 433, 467, 468, 469, 470, 471, 472, 473, 476, 481, 531, 532, 545, 638, 669], "00000": [36, 147, 303, 412], "50000": [36, 303], "02765": [36, 303], "25000": [36, 303], "75000": [36, 303], "datetime64": [36, 46, 47, 75, 76, 104, 105, 119, 127, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 303, 346, 347, 374, 375, 395, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 671, 697, 701, 702], "2000": [36, 127, 186, 191, 194, 195, 198, 202, 303, 395, 609, 613, 615, 616, 617, 619, 620, 624, 625, 628, 629, 631], "2010": [36, 303, 616, 623, 695], "2006": [36, 303, 616], "09": [36, 55, 84, 127, 132, 303, 324, 353, 395, 400, 613, 617, 619, 620, 629, 693], "08": [36, 119, 123, 127, 132, 185, 187, 188, 189, 190, 193, 196, 201, 303, 395, 400, 610, 611, 612, 613, 617, 626, 630, 667, 668, 669, 670, 687, 693], "2004": [36, 303, 616], "31": [36, 127, 185, 187, 188, 189, 190, 193, 195, 196, 201, 202, 303, 395, 610, 611, 612, 613, 616, 617, 621, 622, 625, 626, 629, 630, 631, 632, 633, 634, 636], "field": [36, 171, 303, 494, 557, 638, 659, 690], "classmethod": [37, 38, 57, 58, 59, 65, 209, 210, 216, 217, 222, 261, 262, 263, 264, 304, 305, 326, 327, 328, 329, 336], "header": [37, 38, 39, 50, 65, 66, 161, 209, 210, 211, 222, 223, 304, 305, 306, 319, 336, 337, 659, 690], "represent": [37, 70, 142, 180, 181, 209, 241, 257, 262, 304, 408, 443, 444, 476, 697, 700], "subclass": [37, 38, 65, 132, 142, 205, 209, 210, 222, 241, 304, 305, 336, 358, 400, 408, 688, 690], "implement": [37, 90, 110, 142, 178, 209, 241, 271, 304, 361, 382, 408, 555, 661, 690, 693, 696, 699, 701], "how": [37, 46, 57, 80, 94, 110, 121, 133, 142, 166, 178, 209, 214, 236, 241, 304, 314, 382, 389, 401, 408, 430, 457, 661, 686, 687, 688, 691, 693, 695, 699, 700, 701], "construct": [37, 112, 142, 184, 209, 241, 255, 304, 408, 447, 657, 690], "metadata": [37, 38, 39, 65, 66, 142, 171, 209, 210, 211, 222, 223, 241, 304, 305, 306, 336, 337, 408, 638, 653, 655, 663, 664], "reconstruct": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 304, 305, 306, 336, 337, 408], "buffer": [37, 38, 39, 65, 66, 70, 142, 209, 210, 211, 222, 223, 241, 302, 304, 305, 306, 336, 337, 379, 408, 661, 701], "memoryview": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 304, 305, 306, 336, 337, 408], "serializ": [37, 38, 65, 142, 167, 209, 210, 222, 241, 304, 305, 336, 408, 431], "instanc": [37, 38, 55, 65, 84, 143, 209, 210, 222, 271, 304, 305, 324, 336, 353, 476, 484, 492, 524, 533, 659, 686, 690, 691, 693], "cl": [37, 38, 65, 209, 210, 222, 304, 305, 336, 686], "wa": [37, 38, 65, 209, 210, 222, 244, 304, 305, 336, 696], "produc": [37, 38, 65, 112, 123, 137, 209, 210, 222, 304, 305, 336, 405, 467, 657, 662, 693, 698, 699, 704], "meta": [37, 38, 39, 65, 66, 142, 160, 209, 210, 211, 222, 223, 241, 304, 305, 306, 336, 337, 408], "privat": [37, 38, 39, 65, 66, 142, 209, 210, 211, 222, 223, 241, 304, 305, 306, 336, 337, 408], "devic": [38, 39, 65, 142, 168, 210, 211, 222, 241, 283, 284, 305, 306, 336, 408, 433, 638, 690], "side": [38, 65, 94, 123, 127, 140, 210, 220, 222, 254, 255, 305, 336, 391, 395, 407, 477, 520, 522, 528, 537, 540, 546, 556, 647, 694], "deseri": [38, 65, 142, 210, 222, 241, 305, 336, 408], "task": [38, 65, 210, 222, 305, 336, 690, 693, 699, 704], "primari": [38, 210, 305, 686, 687, 690], "purpos": [38, 210, 305, 686, 687, 690], "creation": [38, 210, 305, 700], "memori": [38, 39, 66, 70, 93, 161, 164, 168, 210, 211, 223, 246, 283, 305, 306, 337, 363, 428, 433, 637, 638, 649, 662, 664, 686, 687, 690, 692, 693, 695, 701], "host": [38, 66, 168, 181, 210, 223, 272, 305, 337, 433, 444, 664, 688, 690], "necessari": [38, 43, 162, 210, 305, 311, 426, 686, 687, 688, 690, 693, 699], "associ": [39, 66, 211, 223, 272, 306, 337, 697, 704], "period": [40, 55, 84, 110, 127, 132, 145, 186, 191, 194, 195, 198, 202, 307, 324, 353, 382, 395, 400, 410, 570, 578, 609, 615, 621, 622, 624, 625, 628, 629, 631, 693], "discret": [40, 307, 647, 686], "calcul": [40, 70, 110, 132, 151, 182, 193, 220, 295, 307, 328, 382, 400, 415, 445, 570, 586, 623, 640, 641, 642, 643, 644, 645, 646, 671, 693, 695, 700], "compar": [40, 50, 212, 224, 307, 319, 345, 581, 667, 668, 669, 670, 678, 689, 694, 698, 702, 704], "previou": [40, 123, 256, 307], "shift": [40, 110, 287, 307, 382, 570], "neg": [40, 64, 125, 159, 240, 307, 335, 393, 424, 493, 498, 570], "take": [40, 106, 111, 164, 246, 284, 383, 428, 476, 518, 561, 570, 580, 605, 639, 649, 686, 695, 699], "gdf": [40, 569, 572, 581, 584, 586, 693, 694, 697], "16": [40, 132, 140, 358, 400, 407, 479, 495, 496, 671, 693, 695, 699, 701], "36": [40, 132, 400, 693, 699], "divis": [41, 42, 56, 122, 129, 136, 176, 192, 309, 310, 325, 390, 397, 404, 438, 616], "truediv": [41, 42, 309, 310], "inf": [41, 42, 75, 76, 104, 105, 122, 136, 176, 309, 310, 346, 347, 374, 375, 390, 404, 438], "flexibl": [43, 166, 311, 430, 686, 687, 690, 693, 695, 699, 702], "wrapper": [43, 311, 687, 690, 699], "sub": [43, 153, 311, 419, 480, 491, 497, 532, 535, 536], "mul": [43, 99, 311, 368], "div": [43, 311], "mod": [43, 311], "pow": [43, 311], "swap": [43, 156, 311, 686], "operand": [43, 311], "http": [43, 284, 311, 484, 539, 544, 553, 554, 586, 658, 659, 662, 663, 664, 665, 671, 688, 701], "doc": [43, 284, 311, 539, 544, 629, 662, 671, 695, 704], "org": [43, 284, 311, 539, 544, 586, 671], "datamodel": [43, 311], "html": [43, 284, 311, 539, 544, 553, 554, 671, 688], "__ror__": [43, 311], "70": [43, 311], "174": [43, 311], "remov": [44, 45, 128, 180, 181, 257, 260, 312, 313, 314, 396, 443, 444, 464, 466, 488, 489, 490, 522, 526, 527, 540, 546, 689, 690, 699], "multi": [44, 51, 80, 258, 312, 656, 692, 693, 700], "keyerror": [44, 312, 651, 666], "found": [44, 94, 140, 235, 266, 272, 312, 358, 407, 492, 497, 529, 533, 534, 536, 538, 539, 544, 550, 629, 659, 690, 694], "dropna": [44, 48, 61, 97, 107, 150, 166, 179, 312, 317, 331, 333, 366, 380, 430, 442, 467, 564, 585, 700], "drop_dupl": [44, 312], "duplic": [44, 45, 103, 106, 124, 143, 213, 251, 312, 313, 373, 376, 531, 647, 659, 704], "certain": [44, 45, 94, 312, 526, 539, 544, 686, 691, 699], "reindex": [44, 312, 572, 678, 694], "midx": [44, 146, 156, 244, 259, 267, 312, 411], "from_product": [44, 242, 262, 264, 312], "40": [44, 127, 185, 193, 196, 312, 391, 395, 481, 626, 693], "lama": [44, 312, 313, 345], "falcon": [44, 61, 64, 74, 128, 156, 179, 312, 331, 335], "speed": [44, 61, 128, 156, 312, 331, 569, 659, 671, 687, 695], "weight": [44, 137, 156, 312, 405], "length": [44, 48, 55, 84, 88, 94, 126, 137, 139, 149, 156, 183, 235, 250, 272, 312, 317, 324, 353, 359, 394, 405, 414, 446, 469, 470, 485, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 539, 544, 555, 556, 578, 638, 647, 650, 699], "big": [44, 70, 156, 312], "small": [44, 156, 312, 659, 663, 686, 688, 690, 695, 696, 698, 699], "45": [44, 156, 197, 312, 608, 614, 627, 671, 699], "200": [44, 123, 156, 207, 284, 312, 695], "100": [44, 61, 117, 126, 127, 156, 192, 207, 244, 284, 312, 331, 394, 395, 508, 510, 616, 668, 693, 695, 699, 702], "250": [44, 156, 312], "150": [44, 156, 312], "320": [44, 156, 312], "subset": [45, 46, 55, 84, 141, 158, 166, 179, 245, 324, 353, 423, 430, 659, 696, 698], "keep": [45, 46, 88, 103, 106, 109, 121, 178, 183, 213, 313, 314, 359, 373, 376, 389, 446, 488, 489], "identifi": [45, 75, 76, 92, 104, 105, 148, 166, 346, 347, 374, 375, 413, 430, 483, 490, 533, 534, 629, 656, 661, 686], "drop": [45, 46, 48, 109, 113, 128, 143, 150, 213, 214, 260, 313, 314, 317, 396, 467, 647, 700, 704], "occurr": [45, 103, 106, 213, 313, 373, 376, 482, 492, 518, 529, 532, 538, 693], "place": [45, 73, 88, 123, 126, 128, 133, 142, 143, 148, 167, 178, 183, 241, 340, 359, 394, 396, 401, 408, 413, 431, 440, 446, 458, 460, 466, 476, 488, 489, 490, 518, 659, 663, 664, 701, 702], "brand": 45, "yum": 45, "indomi": 45, "cup": 45, "pack": 45, "rate": 45, "being": [45, 115, 116, 154, 171, 196, 313, 385, 386, 420, 468, 491, 497, 535, 536, 541, 626, 667, 668, 669, 670, 686, 693, 699], "guarante": [45, 137, 313, 405, 473, 586, 659, 686, 698, 704], "thresh": 46, "decid": [46, 214, 687], "least": [46, 109, 178, 214, 333, 467, 518, 697, 699], "isna": [46, 314, 702], "notna": [46, 314, 702], "alfr": [46, 75, 76, 104, 105, 346, 347, 374, 375], "batman": [46, 75, 76, 104, 105, 346, 347, 374, 375], "catwoman": 46, "toi": [46, 75, 76, 104, 105, 346, 347, 374, 375, 501, 502, 699], "batmobil": [46, 75, 76, 104, 105, 346, 347, 374, 375], "bullwhip": 46, "born": [46, 75, 76, 104, 105, 346, 347, 374, 375], "1940": [46, 75, 76, 104, 105, 346, 347, 374, 375], "look": [46, 686, 687, 688, 690, 695, 696, 699], "20180310": 47, "u": [47, 167, 171, 185, 190, 197, 431, 479, 493, 608, 614, 627, 662, 671, 686, 687, 688, 690, 695, 697, 699, 701, 702], "ax": [48, 112, 166, 180, 181, 257, 317, 430, 443, 444, 457, 543, 657, 662, 674, 682], "still": [48, 317, 688], "we": [48, 74, 106, 123, 124, 127, 205, 317, 366, 395, 518, 661, 686, 687, 688, 690, 693, 695, 696, 697, 699, 702, 704], "our": [48, 317, 686, 687, 688, 690, 693, 695, 699, 704], "test": [50, 64, 319, 335, 345, 481, 486, 527, 545, 659, 678, 687, 689, 691, 693, 696, 704], "exactly_equ": [50, 319], "different_column_typ": [50, 319], "expr": [51, 119], "evalu": [51, 486, 503, 545, 693], "describ": [51, 70, 166, 167, 430, 431, 530, 663, 664, 698], "express": [51, 119, 481, 482, 486, 487, 492, 523, 532, 534, 539, 544, 545, 663, 664, 700], "mutat": 51, "typic": [51, 686, 690, 704], "statement": [51, 693, 699], "bitwis": [51, 699], "logic": [51, 94, 283, 663, 664, 690, 693, 699], "boolean": [51, 74, 75, 76, 86, 89, 90, 95, 104, 105, 109, 117, 119, 123, 124, 143, 169, 170, 192, 199, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 247, 256, 266, 270, 282, 284, 290, 341, 342, 343, 344, 345, 346, 347, 356, 360, 361, 364, 374, 375, 378, 387, 391, 392, 434, 454, 468, 481, 486, 489, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 523, 545, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 616, 617, 618, 619, 620, 621, 622, 650, 659, 662, 663, 664, 691, 699, 700], "automat": [51, 57, 272, 328, 586, 662, 686, 687, 688, 693, 698, 702], "respons": 51, "suitabl": [51, 140, 167, 407, 431, 690], "later": 51, "condit": [51, 88, 119, 183, 359, 446, 693, 699], "upon": [51, 142, 241, 408], "earlier": 51, "though": [51, 693, 699], "modifi": [51, 128, 143, 178, 242, 396, 440, 572, 662], "line": [51, 64, 167, 335, 431, 497, 536, 555, 659, 662, 686, 687, 695], "replic": [52, 320], "22": [52, 127, 193, 240, 395, 479, 687, 693, 702], "44": [52, 190, 699], "ffill": [54, 108, 110, 256, 323, 381, 382, 572], "forward": [54, 323, 571, 572, 576, 591, 597, 688], "next": [54, 256, 323, 492, 572, 686, 688, 690, 693, 695, 699], "backward": [54, 323, 562, 563, 582, 583], "initi": [55, 324, 690, 693], "time": [55, 84, 110, 125, 127, 132, 159, 161, 167, 240, 272, 284, 324, 353, 382, 393, 395, 400, 424, 431, 475, 482, 547, 548, 552, 586, 659, 663, 664, 671, 678, 686, 687, 690, 695, 696, 699, 700, 702], "date": [55, 84, 167, 184, 192, 196, 324, 353, 431, 613, 616, 617, 618, 619, 620, 621, 622, 626, 629, 659, 662, 671, 686, 693, 696], "few": [55, 84, 324, 353, 690, 699, 702, 704], "1m": [55, 324, 613], "displai": [55, 70, 84, 121, 324, 353, 389, 647, 688], "month": [55, 185, 190, 197, 324, 608, 613, 614, 617, 618, 627, 671], "typeerror": [55, 57, 58, 84, 126, 212, 217, 261, 315, 324, 326, 329, 345, 353, 394, 518, 672, 699], "datetimeindex": [55, 84, 324, 353, 671, 678], "date_rang": [55, 84, 127, 186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 315, 324, 353, 395, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 693], "2d": [55, 84, 324, 353, 649], "3d": [55, 84, 324, 353], "9223372036854775807": [56, 129, 325, 397, 693], "tabl": [57, 72, 112, 159, 160, 166, 167, 169, 261, 424, 430, 431, 489, 551, 657, 662, 686, 690, 693, 698, 701], "pyarrow": [57, 160, 261, 326, 425, 663, 664, 693], "doe": [57, 61, 74, 124, 156, 162, 166, 283, 284, 315, 331, 426, 430, 466, 494, 539, 581, 651, 656, 666, 672, 686, 687, 690, 694, 697, 698, 699, 704], "similar": [57, 94, 148, 166, 283, 413, 430, 539, 544, 667, 668, 670, 686, 696, 698, 699, 702, 704], "to_panda": [57, 693, 696, 698, 699, 702, 704], "work": [57, 132, 400, 442, 637, 638, 686, 688, 690, 691, 692, 693, 697, 698, 699, 700], "pa": [57, 261, 326], "record": [59, 94, 121, 167, 389, 431, 524, 662, 686], "recarrai": [59, 172], "ndim": 59, "greater": [60, 62, 71, 290, 330, 332, 556, 586, 672, 697], "as_index": [61, 331], "group_kei": [61, 331], "squeez": [61, 331], "group": [61, 121, 166, 169, 331, 389, 430, 442, 487, 534, 561, 565, 566, 567, 568, 570, 573, 574, 575, 577, 578, 579, 580, 581, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 655, 661, 663, 664, 686, 690, 694, 696, 699, 700, 702, 704], "mapper": [61, 124, 331], "involv": [61, 272, 331, 690], "some": [61, 73, 123, 266, 331, 340, 416, 471, 482, 532, 581, 671, 686, 687, 690, 693, 694, 698, 699, 701, 704], "combin": [61, 143, 179, 331, 457, 483, 522, 539, 540, 546, 561, 580, 605, 663, 664, 678, 686, 693, 701], "split": [61, 167, 255, 331, 431, 479, 525, 529, 538, 539, 549, 550, 662, 665, 678, 688, 693, 701], "larg": [61, 137, 331, 405, 690, 696, 698], "amount": [61, 70, 331, 688, 690, 699], "notic": [61, 266, 331, 697, 699], "interpret": [61, 166, 331, 430, 495, 496, 539, 544, 659, 663, 664], "hierarch": [61, 89, 90, 95, 166, 177, 258, 331, 360, 361, 364, 430, 673, 690, 693], "particular": [61, 89, 90, 95, 331, 360, 361, 364, 416, 482, 659, 686, 687, 688, 690, 698, 704], "relev": [61, 331, 686], "sql": [61, 94, 331, 693], "influenc": [61, 331, 701], "preserv": [61, 126, 284, 331, 394, 608, 614, 627, 659, 702], "dataframegroupbi": [61, 677], "about": [61, 70, 331, 586, 637, 638, 686, 689, 690, 693, 701], "390": [61, 331, 695], "350": [61, 331], "parrot": [61, 64, 128, 331, 335, 481], "370": [61, 331, 569], "anim": [61, 74, 313, 331, 345, 457], "380": [61, 331, 569], "375": [61, 331], "captiv": [61, 331], "wild": [61, 331], "from_arrai": [61, 224, 250, 331], "185": [61, 331], "210": [61, 331], "murmur3": [63, 334], "hash": [63, 109, 334, 637], "md5": [63, 334], "murmurhash3": [63, 334], "120": [63, 334, 480], "1930516747": [63, 334], "422619251": [63, 334], "941520876": [63, 334], "7be4bbacbfdb05fb3044e36c22b41e8b": [63, 334], "947ca8d2c5f0f27437f156cfbfab0969": [63, 334], "d0580ef52d27c043c8e341fd5039b166": [63, 334], "330519225": [63, 334], "397962448": [63, 334], "1345834934": [63, 334], "57ce879751b5169c525907d5c563fae1": [63, 334], "948d6221a7c4963d4be411bcead7e32b": [63, 334], "fe061786ea286a515b772d91b0dfcd70": [63, 334], "quickli": [64, 335, 695], "your": [64, 123, 124, 335, 688, 693, 695, 699], "right": [64, 80, 94, 127, 132, 140, 220, 229, 236, 254, 255, 290, 308, 335, 395, 400, 407, 477, 491, 497, 520, 528, 535, 536, 540, 544, 546, 556, 647, 650, 667, 668, 669, 670, 696, 697], "tail": [64, 335], "allig": [64, 335], "bee": [64, 335, 522, 540, 546], "lion": [64, 128, 335, 492], "monkei": [64, 128, 335, 457, 492], "shark": [64, 335], "whale": [64, 335], "zebra": [64, 335], "view": [64, 162, 168, 335, 426, 433, 572, 686, 690, 700], "three": [64, 106, 112, 335, 483, 647, 657, 690, 695, 699, 701], "iloc": [67, 581, 693, 694, 699, 702], "18": [68, 127, 132, 133, 185, 190, 193, 196, 338, 395, 400, 401, 479, 626, 635, 693, 697], "slice": [68, 220, 256, 266, 338, 543, 678, 690, 693, 694], "verbos": 70, "buf": 70, "max_col": 70, "memory_usag": 70, "null_count": [70, 328], "print": [70, 124, 132, 173, 400, 435, 581, 648, 671, 695, 703], "concis": 70, "usag": [70, 93, 363, 662, 686, 687, 691, 693], "full": [70, 94, 166, 430, 598, 661, 688, 693, 695, 696, 704], "max_info_column": 70, "writabl": 70, "sy": 70, "stdout": 70, "send": 70, "you": [70, 111, 128, 205, 383, 396, 479, 489, 524, 598, 647, 687, 688, 690, 693, 695, 697, 698, 699, 702, 704], "further": 70, "process": [70, 173, 435, 693, 695, 698, 699], "switch": [70, 671], "truncat": [70, 638], "total": [70, 93, 363, 556, 613, 655, 658, 663, 697, 699], "alwai": [70, 101, 121, 137, 245, 283, 366, 389, 405, 518, 659, 687, 690, 698, 699, 701, 704], "never": [70, 469, 690, 699], "introspect": 70, "shown": [70, 492], "human": 70, "readabl": 70, "unit": [70, 167, 431, 447, 662, 671], "estim": [70, 297, 586], "made": [70, 162, 174, 266, 426, 557, 686, 694, 702], "assum": [70, 308, 481, 485, 532, 539, 544, 586, 649, 686, 688, 689, 690, 699], "consum": [70, 686, 699], "real": 70, "cost": [70, 687], "smaller": [70, 93, 490], "max_info_row": 70, "int_valu": 70, "text_valu": 70, "alpha": [70, 103, 106], "beta": 70, "gamma": [70, 284], "delta": [70, 151, 182, 415, 445, 447, 586, 601, 604, 644, 646], "epsilon": 70, "float_valu": 70, "int_col": 70, "text_col": 70, "float_col": 70, "core": [70, 170, 248, 261, 302, 434, 678, 688, 690, 693, 699, 702], "130": 70, "byte": [70, 93, 363, 474, 554, 637, 652, 658, 659, 662, 663, 664, 690, 701], "its": [70, 111, 160, 178, 287, 383, 671, 687, 688, 690, 691, 693, 701], "pipe": [70, 698], "content": [70, 166, 430, 518, 689, 690, 699], "io": [70, 659, 663, 664, 678, 700], "stringio": [70, 659, 662, 665], "getvalu": 70, "mode": [70, 166, 430, 661, 686, 701], "special": [70, 203, 253, 456, 482, 506, 518, 556, 638, 690, 697, 704], "fine": [70, 688], "tune": [70, 701], "random_strings_arrai": 70, "random": [70, 137, 171, 405, 586, 693, 695, 702, 704], "column_1": 70, "column_2": 70, "column_3": 70, "1000000": [70, 169, 171, 284], "999999": 70, "mb": [70, 652, 693], "num": [71, 693], "interleav": [72, 159, 424], "major": [72, 649, 704], "a1": [72, 487, 695], "a2": [72, 695], "a3": [72, 695], "b1": 72, "b2": [72, 487], "b3": 72, "linear": [73, 117, 340, 387, 577, 690, 695, 696], "limit_direct": [73, 340], "limit_area": [73, 340], "downcast": [73, 215, 340, 572, 672], "techniqu": [73, 340], "space": [73, 171, 340, 483, 518, 525, 526, 529, 539, 548, 659], "linearli": [73, 340], "unsort": [73, 340, 696], "lead": [73, 161, 340, 522, 540, 546, 586, 695, 696, 699], "erron": [73, 340], "num_leg": [74, 179], "num_w": [74, 179], "check": [74, 143, 225, 226, 227, 228, 229, 233, 234, 235, 258, 308, 345, 466, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 523, 553, 554, 667, 668, 669, 670, 687, 695, 704], "present": [74, 115, 116, 154, 385, 386, 420, 467, 518, 539, 544, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 638, 687, 689], "leg": [74, 97], "wing": [74, 97], "separ": [74, 476, 483, 524, 525, 529, 538, 539, 544, 650, 665, 682, 686, 688, 690], "spider": 74, "everyth": [75, 76, 89, 90, 95, 346, 347, 360, 361, 364, 457, 543, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606], "mask": [75, 76, 86, 104, 105, 126, 256, 266, 284, 328, 346, 347, 356, 374, 375, 378, 379, 394, 690, 702], "timedelta64": [75, 76, 104, 105, 346, 347, 374, 375, 447, 632, 633, 634, 635, 636, 701, 702], "charact": [75, 76, 104, 105, 346, 347, 374, 375, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 495, 496, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 525, 526, 528, 532, 533, 537, 540, 544, 546, 547, 548, 549, 551, 552, 553, 554, 556, 637, 659, 687, 690], "incas": [75, 76, 104, 105, 346, 347, 374, 375], "1939": [75, 76, 104, 105, 346, 347, 374, 375], "05": [75, 76, 104, 105, 127, 185, 187, 188, 189, 190, 193, 196, 197, 201, 287, 346, 347, 374, 375, 395, 608, 610, 611, 612, 613, 614, 626, 627, 630, 667, 668, 669, 670, 671, 693], "27": [75, 76, 104, 105, 346, 347, 374, 375, 479, 617, 619, 620, 693, 695], "joker": [75, 76, 104, 105, 346, 347, 374, 375], "000000": [75, 76, 104, 105, 127, 138, 346, 347, 374, 375, 395, 406, 584, 586, 695, 698, 702], "isnul": [75, 346], "32": [75, 76, 104, 105, 133, 346, 347, 374, 375, 401], "float64index": [75, 76, 104, 105, 146, 217, 346, 347, 374, 375, 411], "genericindex": [75, 76, 104, 105, 346, 347, 374, 375, 467, 468, 469, 470, 471, 472, 473, 481, 690], "left": [80, 94, 124, 127, 133, 140, 178, 220, 229, 236, 254, 255, 290, 308, 395, 401, 407, 477, 491, 497, 522, 528, 532, 535, 536, 537, 546, 551, 556, 647, 667, 668, 669, 670, 686, 693, 696], "lsuffix": [80, 94], "rsuffix": [80, 94], "inner": [80, 94, 236, 457, 663, 664], "outer": [80, 94, 236, 457, 664], "suffic": [80, 699], "avoid": [80, 283, 686, 687, 690, 701, 704], "conflict": 80, "ensur": [80, 162, 168, 426, 433, 481, 664, 686, 687, 688, 693], "now": [80, 650, 686, 690, 693, 695, 699], "due": [80, 581, 659, 687, 693, 694, 696, 699], "lack": 80, "five": [81, 284], "int64index": [81, 146, 207, 212, 215, 224, 235, 236, 239, 240, 242, 244, 248, 250, 260, 292, 411, 482, 669, 690], "fisher": [82, 83, 147, 351, 352, 412], "unbias": [82, 83, 147, 182, 297, 351, 352, 412, 445, 586], "kurtosi": [82, 351], "sampl": [82, 83, 147, 151, 295, 351, 352, 412, 415, 429, 693], "obtain": [82, 83, 284, 351, 352, 555, 704], "definit": [82, 83, 273, 351, 352, 371, 437, 586], "normal": [82, 83, 137, 151, 179, 182, 184, 297, 351, 352, 405, 415, 442, 445, 526, 586, 601, 604, 663, 664, 695], "1999999999999904": [82, 83, 351, 352], "kurt": [83, 352], "final": [84, 353, 663, 664, 690, 699], "dai": [84, 171, 184, 187, 188, 189, 192, 193, 201, 315, 353, 447, 448, 453, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 630, 632, 634, 636, 671, 699, 702], "cond": [88, 183, 359, 446], "dimens": [88, 101, 183, 359, 371, 446], "collaps": [89, 90, 95, 360, 361, 364], "attempt": [89, 90, 95, 205, 212, 266, 360, 361, 364, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606, 650, 659, 671, 687, 694, 699], "17": [91, 127, 132, 140, 287, 362, 395, 400, 407, 479, 693, 702], "unpivot": [92, 656], "wide": [92, 656, 686, 688, 699], "format": [92, 161, 165, 166, 167, 169, 171, 173, 430, 431, 435, 515, 516, 553, 554, 555, 572, 629, 656, 659, 662, 671, 687, 688, 690, 692, 693, 694, 695, 696, 697, 701], "long": [92, 555, 656, 662, 686], "id_var": [92, 656], "value_var": [92, 656], "var_nam": [92, 656], "value_nam": [92, 656], "whose": [93, 112, 557, 650, 657, 686, 690], "ones": [93, 465], "5000": 93, "astyp": [93, 226, 234, 693], "head": [93, 693, 695, 699, 704], "40000": [93, 284], "storag": [93, 700], "mani": [93, 373, 376, 586, 679, 686, 688, 690, 693, 696, 697, 699, 701, 704], "repeat": [93, 159, 424, 482, 678], "5008": 93, "43": [93, 635, 699], "give": [93, 272, 686, 687, 690, 695, 698], "rest": [93, 516, 543, 548, 688], "necessarili": [93, 177, 673], "left_on": 94, "right_on": 94, "left_index": [94, 696], "right_index": [94, 696], "_x": 94, "_y": 94, "databas": 94, "join": [94, 178, 457, 659, 678, 692, 696, 700, 704], "intersect": [94, 457], "leftsemi": 94, "leftanti": 94, "exact": [94, 117, 137, 256, 387, 405, 647, 669, 671], "opposit": 94, "were": [94, 464, 550, 693, 699], "overlap": [94, 141, 178, 457, 489, 492, 638, 647], "determinist": [94, 704], "df_a": [94, 693], "vals_a": [94, 693], "df_b": [94, 693], "vals_b": [94, 693], "df_merg": 94, "sort_valu": [94, 693], "typecast": 94, "ambigu": [94, 184], "exactli": [94, 667, 668, 669, 670, 687, 698], "extend": [94, 647, 686, 693], "semi": [94, 586], "anti": 94, "modulo": [96, 130, 365, 398], "4294967295": [96, 130, 365, 398], "appear": [97, 121, 328, 373, 376, 389, 483], "often": [97, 677, 686, 696, 699, 702], "search": [97, 166, 266, 430, 468, 481, 491, 492, 497, 533, 535, 536, 686, 692, 702, 704], "don": [97, 107, 124, 179, 366, 380, 442, 564, 585, 662, 686, 696, 699, 702], "value_count": [97, 693], "speci": [97, 242], "bird": [97, 128, 457], "mammal": [97, 128], "arthropod": 97, "multipli": [98, 367, 699], "largest": [103, 373], "priorit": [103, 699], "popul": [103, 106, 695, 699], "59000000": [103, 106, 373, 376], "65000000": [103, 106, 373, 376], "434000": [103, 106, 373, 376], "337000": [103, 106, 373, 376], "11300": [103, 106, 373, 376], "gdp": [103, 106], "1937894": [103, 106], "2583560": [103, 106], "12011": [103, 106], "4520": [103, 106], "12128": [103, 106], "17036": [103, 106], "182": [103, 106], "38": [103, 106, 155, 421, 697], "311": [103, 106], "IT": [103, 106], "fr": [103, 106], "mt": [103, 106], "mv": [103, 106], "bn": [103, 106], "nr": [103, 106], "tv": [103, 106], "ai": [103, 106, 146, 411, 520, 523, 535, 537, 553, 554, 658], "itali": [103, 106, 373, 376], "franc": [103, 106, 373, 376], "malta": [103, 106, 373, 376], "maldiv": [103, 106, 373, 376], "brunei": [103, 106, 373, 376], "iceland": [103, 106, 373, 376], "nauru": [103, 106, 373, 376], "tuvalu": [103, 106, 373, 376], "anguilla": [103, 106, 373, 376], "notnul": [104, 374], "smallest": [106, 121, 376, 389, 672], "retriev": [106, 494, 661], "ti": [106, 121, 256, 389], "resolv": 106, "revers": [106, 373, 376, 693], "distinct": [107, 345, 690], "npart": 109, "keep_index": [109, 139], "partit": [109, 171, 652, 664, 678, 693], "fill_method": [110, 382], "percent": [110, 382], "sequenti": [110, 382, 698, 699, 704], "form": [110, 112, 121, 159, 224, 250, 382, 389, 424, 505, 508, 509, 510, 511, 652, 657, 663, 664, 690, 696], "handl": [110, 161, 166, 167, 178, 313, 382, 416, 430, 431, 457, 539, 544, 556, 661, 672, 678, 689, 690, 692, 701], "consecut": [110, 125, 240, 382, 393, 478, 524, 525, 659], "increment": [110, 382, 652], "data_keyword": [111, 383, 598], "chain": [111, 383], "groupbi": [111, 383, 678, 690, 692, 693, 694, 696, 700, 704], "write": [111, 161, 165, 166, 167, 169, 171, 383, 430, 431, 652, 654, 659, 661, 687, 689, 692, 693, 695, 699, 701], "arg2": [111, 383], "arg3": [111, 383], "sai": [111, 383, 494, 699], "suppos": [111, 383], "reshap": [112, 150, 657, 678, 695], "organ": [112, 657, 688, 689], "rearrang": [112, 657], "exponenti": [114, 134, 384, 402], "min_count": [115, 116, 154, 385, 386, 420, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606], "fewer": [115, 116, 154, 385, 386, 420, 573, 574, 575, 592, 593, 594, 595, 599, 602, 606], "5040": [115, 116, 385, 386], "q": [117, 118, 387, 577, 629], "interpol": [117, 118, 387, 577], "higher": [117, 118, 387, 577, 662, 690, 701], "midpoint": [117, 387, 577], "nearest": [117, 118, 256, 387, 577], "desir": [117, 118, 158, 245, 387, 423, 577, 659, 662, 687, 699, 704], "li": [117, 118, 387, 577], "j": [117, 118, 156, 387, 485, 699], "approxim": [117, 387], "One": [117, 123, 166, 167, 185, 190, 197, 272, 391, 430, 431, 608, 614, 627, 686, 694, 695, 697, 702], "notabl": [117, 148, 413, 694], "doesn": [117, 137, 171, 405, 518, 693, 694, 702], "under": [117, 664, 682, 686, 688, 689, 690, 693, 694], "cp": [117, 638, 693, 695, 699, 702, 704], "55": [117, 240, 699], "local_dict": [119, 693], "local": [119, 652, 658, 659, 661, 662, 663, 664, 665, 688, 693], "filter": [119, 489, 663, 664, 686, 692, 693, 704], "search_dat": [119, 693], "search_date2": 119, "averag": [121, 389, 699], "na_opt": [121, 389], "pct": [121, 389], "through": [121, 389, 481, 482, 487, 492, 523, 551, 678, 690, 699, 701, 702], "direct": [121, 389, 578, 662, 688, 693, 701], "dens": [121, 389, 695], "lowest": [121, 389, 491, 497, 535, 690], "increas": [121, 232, 308, 341, 343, 376, 389, 659, 671], "bottom": [121, 389, 659], "rtruediv": [122, 390], "002778": [122, 136, 390, 404], "333333": [122, 127, 136, 390, 395, 404, 442, 586], "005556": [122, 136, 390, 404], "250000": [122, 136, 390, 404], "toler": [123, 219, 256, 266, 391, 667, 668, 669, 670], "conform": [123, 236, 391, 688], "unless": [123, 416, 539, 544, 686], "either": [123, 133, 137, 149, 170, 178, 218, 284, 396, 401, 405, 414, 434, 476, 481, 650, 658, 659, 662, 663, 664, 665, 688, 693, 695, 699, 701], "even": [123, 162, 283, 366, 426, 659, 662, 686, 687, 699, 702], "convent": [123, 124, 127, 395], "index_label": 123, "column_label": 123, "_highly_": 123, "clarifi": [123, 124], "intent": [123, 124], "fiction": [123, 494], "firefox": 123, "chrome": 123, "safari": 123, "ie10": 123, "konqueror": 123, "http_statu": [123, 694], "404": [123, 695], "301": 123, "response_tim": 123, "new_index": 123, "iceweasel": 123, "comodo": 123, "dragon": 123, "retain": [123, 391, 490, 694, 702], "user_ag": 123, "alter": [124, 171, 239, 392], "throw": [124, 167, 431, 687, 699, 701], "index_mapp": 124, "columns_mapp": 124, "highli": [124, 664, 704], "overwrit": [124, 178, 262], "postfix": 124, "repetit": [125, 240, 393], "newli": [125, 240, 393, 396, 578, 690], "to_replac": [126, 394], "regex": [126, 394, 481, 482, 487, 492, 523, 532, 534, 539, 544], "valueerror": [126, 141, 166, 167, 178, 394, 430, 431, 465, 497, 518, 536, 647, 688, 695, 698], "mismatch": [126, 394, 669, 670], "actual": [126, 394, 518, 687, 690, 693, 699, 702], "exhibit": [126, 394, 688], "silent": [126, 394], "rule": [127, 395, 686], "close": [127, 184, 204, 254, 255, 290, 395, 447, 652, 661, 688, 690, 704], "loffset": [127, 395], "start_dai": [127, 395], "dateoffset": [127, 395], "bin": [127, 308, 395, 442, 647], "interv": [127, 225, 226, 227, 228, 229, 233, 234, 254, 255, 308, 395, 647, 690, 698], "edg": [127, 132, 308, 395, 400, 491, 497, 535, 536, 647, 687], "bucket": [127, 395], "closest": [127, 395], "nanosecond": [127, 167, 171, 395, 431, 448, 632, 662, 671], "millisecond": [127, 167, 395, 431, 448, 632, 662, 671], "minut": [127, 395, 448, 632, 671, 692, 700], "2001": [127, 197, 202, 315, 395, 608, 613, 614, 616, 627, 631, 696], "1t": [127, 395], "06": [127, 185, 187, 188, 189, 201, 395, 608, 610, 611, 612, 613, 629, 630, 632, 633, 634, 636, 693], "downsampl": [127, 395], "3t": [127, 395], "23": [127, 395, 479, 481, 505, 506, 513, 693, 697, 702], "57": [127, 395, 699], "upsampl": [127, 395], "asfreq": [127, 395], "price": [127, 395, 494, 699], "19": [127, 395, 479, 586, 690, 693, 695], "volum": [127, 395], "60": [127, 395, 693], "week_start": [127, 395], "7d": [127, 395], "29": [127, 195, 395, 479, 617, 619, 620, 623, 625, 693, 704], "28": [127, 395, 479, 613, 617, 619, 620, 693], "63": [127, 395, 698], "col_level": [128, 656], "col_fil": 128, "reset": [128, 282, 396, 457], "try": [128, 396, 662, 672, 686, 687], "389": 128, "80": [128, 569], "max_spe": 128, "from_tupl": [128, 262, 263, 266, 396, 693, 694], "fly": [128, 659, 662], "run": [128, 503, 504, 505, 506, 512, 513, 514, 517, 637, 638, 687, 688, 689, 693, 695, 699, 704], "window": [132, 400, 678, 692, 700, 704], "center": [132, 400, 528, 556, 678, 687, 699], "win_typ": [132, 400], "baseindex": [132, 205, 208, 400, 461, 690], "As": [132, 166, 400, 430, 686, 687, 690, 696, 699], "oppos": [132, 400, 693], "fix": [132, 166, 185, 190, 197, 358, 400, 430, 608, 614, 627, 690, 696, 697], "accommod": [132, 400], "get_window_bound": [132, 400], "20190101": [132, 400], "2019": [132, 242, 400], "01t09": [132, 400], "000": [132, 400, 503, 655, 659, 660, 663, 664], "math": [132, 284, 400, 699], "49": [132, 400, 699], "64": [132, 400, 690, 699], "81": [132, 400, 693, 699], "some_func": [132, 400], "sqrt": [132, 400, 699], "And": [132, 400, 699], "decim": [133, 167, 401, 431, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 659, 698, 700, 704], "half_even": [133, 401], "half_up": [133, 401], "affect": [133, 401, 686, 701], "67": [133, 401], "66": [133, 401, 695], "subtract": [135, 152, 403, 418], "359": [135, 152, 153, 403, 418, 419], "179": [135, 152, 153, 403, 418, 419], "frac": [137, 405], "random_st": [137, 405], "reproduc": [137, 405], "ident": [137, 173, 405, 435, 457, 539, 544, 603, 667, 668, 669, 670, 704], "fraction": [137, 405, 513], "disallow": [137, 405], "state": [137, 262, 405], "uniform": [137, 405, 647], "probabl": [137, 405], "unlik": [137, 405, 688, 698, 701, 704], "randomst": [137, 405], "seed": [137, 405, 693, 699], "stat": [137, 405, 678, 688, 700], "randomli": [137, 405, 693], "slow": [137, 405, 686, 698], "achiev": [137, 405, 555, 698], "especi": [137, 405, 686, 698], "advis": [137, 405, 691], "826087": [138, 406], "913043": [138, 406], "043478": [138, 406], "map_index": 139, "map_siz": 139, "scatter": 139, "destin": [139, 699], "conserv": 139, "find": [140, 205, 256, 407, 482, 492, 497, 535, 678, 686, 687, 688], "maintain": [140, 407, 687, 693], "hypothet": [140, 407], "monoton": [140, 231, 232, 256, 266, 271, 308, 341, 342, 343, 407], "wrong": [140, 407], "correct": [140, 407, 662, 699], "values_df": [140, 407], "reinterpret": [142, 241, 408], "lightweight": [142, 241, 408], "append": [143, 166, 430, 476, 539, 544, 650], "becom": [143, 695], "too": [143, 492, 686, 699], "hello": [146, 411, 474, 475, 479, 483, 493, 520, 526, 527, 530, 535, 537, 542, 549, 550, 658], "rapid": [146, 411, 493, 520, 523, 535, 537, 553, 554, 650, 658, 688, 693, 695, 699, 702], "37037": [147, 412], "sort_remain": [148, 413], "quick": [148, 413], "builtin": [148, 413, 658, 659, 662, 663, 664, 665], "vector": [148, 290, 413, 416], "prescrib": 150, "ddof": [151, 182, 415, 445, 586, 601, 604, 644, 646], "deviat": [151, 266, 415, 601, 644, 687, 694, 696], "freedom": [151, 182, 415, 445, 586, 601, 604, 644, 646], "divisor": [151, 182, 415, 445, 601, 604, 644, 646], "290994": [151, 415], "squar": [155, 421], "249": [155, 421], "llama": 156, "cdf": 156, "unsupport": [158, 245, 423, 562, 563, 571, 572, 576, 578, 582, 583, 591, 597, 639, 698], "preserve_index": 160, "save": [160, 171, 652, 686, 690], "path_or_buf": [161, 166, 167, 430, 431, 661, 662], "sep": [161, 476, 518, 525, 529, 538, 659], "na_rep": [161, 476], "line_termin": 161, "encod": [161, 166, 167, 321, 430, 431, 553, 554, 637, 638, 650, 661, 662, 690], "compress": [161, 166, 167, 169, 171, 430, 431, 652, 659, 662, 701], "csv": [161, 659, 678, 700, 701], "file": [161, 165, 166, 167, 169, 171, 430, 431, 497, 536, 637, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 686, 689, 690, 693, 697, 701], "path": [161, 165, 166, 167, 169, 171, 430, 431, 637, 652, 655, 658, 659, 660, 661, 662, 663, 664, 665, 686, 687, 688, 693, 701], "char": [161, 528, 659], "delimit": [161, 167, 431, 490, 518, 525, 533, 539, 544, 549, 550, 659, 662, 665], "utf": [161, 480, 553, 554, 662, 690], "scheme": [161, 686], "read_csv": [161, 693, 696], "quote_nonnumer": [161, 659], "filenam": [161, 167, 431, 652, 655, 659, 660, 663, 664, 686], "set_index": [161, 177, 236, 673, 698], "na_valu": [162, 168, 426, 433, 659], "asarrai": [162, 168, 426, 433, 695, 699], "strictli": [162, 426, 686, 690], "dlpack": [164, 246, 428, 649, 695, 701], "tensor": [164, 246, 428, 638, 649], "open": [164, 166, 246, 290, 428, 430, 442, 649, 653, 658, 659, 661, 662, 663, 664, 665, 688], "dmlc": [164, 246, 428, 649], "pycapsul": [164, 246, 428, 649], "pointer": [164, 246, 428, 649], "cudf_obj": [164, 246, 428], "pycapsule_obj": [164, 246, 428, 649], "encapsul": [164, 246, 428, 649, 690], "feather": [165, 166, 430, 660, 678, 701], "read_feath": 165, "hdf5": [166, 430, 678], "hdfstore": [166, 430, 661, 678], "hdf": [166, 430, 661, 680, 701], "applic": [166, 430, 586, 678, 690], "hold": [166, 225, 226, 227, 228, 229, 233, 234, 430], "relat": [166, 430, 678, 701], "individu": [166, 218, 430, 466, 479, 481, 690, 702], "pleas": [166, 358, 430, 693, 699], "r": [166, 416, 430, 479, 487, 514, 526, 551, 555, 661], "delet": [166, 430], "read": [166, 430, 655, 658, 659, 660, 661, 662, 663, 664, 665, 690, 693, 697, 701], "alreadi": [166, 284, 430, 457, 526, 690, 695, 696], "fast": [166, 430, 662, 690, 693, 696, 704], "searchabl": [166, 430], "pytabl": [166, 430, 678], "wors": [166, 430], "data_column": [166, 430], "disk": [166, 430, 659, 662, 697], "complevel": [166, 430], "disabl": [166, 430, 659, 701], "complib": [166, 430], "zlib": [166, 169, 430], "lzo": [166, 430], "bzip2": [166, 430], "blosc": [166, 430], "librari": [166, 430, 539, 544, 555, 629, 671, 689, 692, 695, 696, 700, 701, 704], "v0": [166, 430], "compressor": [166, 430], "blosclz": [166, 430], "lz4": [166, 430], "lz4hc": [166, 430], "snappi": [166, 169, 171, 430, 652, 701], "zstd": [166, 430, 701], "issu": [166, 430, 686, 696, 699], "fletcher32": [166, 430], "checksum": [166, 430], "written": [166, 171, 430, 652, 686, 688, 699], "strict": [166, 430, 661, 667, 668, 669, 670, 671], "decod": [166, 430, 553, 661, 662], "read_hdf": [166, 430], "to_parquet": [166, 430, 664, 693, 697, 701], "parquet": [166, 171, 430, 663, 664, 678, 696, 700, 701], "to_feath": [166, 430, 660], "json": [167, 431, 494, 662, 678, 686, 701], "unix": [167, 431, 671], "orient": [167, 431, 662], "just": [167, 431, 543, 662, 686, 690, 695, 697, 699], "schema": [167, 431, 655, 662, 664], "compon": [167, 431, 493, 686, 688, 690], "date_format": [167, 431, 629], "epoch": [167, 431, 671], "iso": [167, 193, 431, 623], "convers": [167, 431, 434, 678, 690, 695], "iso8601": [167, 431], "double_precis": [167, 431], "force_ascii": [167, 431], "ascii": [167, 431, 475, 526, 547, 548, 552, 554], "date_unit": [167, 431, 662], "govern": [167, 431], "precis": [167, 431, 647, 662, 697, 704], "microsecond": [167, 431, 448, 452, 632, 635, 636, 662], "default_handl": [167, 431], "handler": [167, 431, 658, 659, 662, 663, 664, 665], "receiv": [167, 431, 672], "incorrect": [167, 431], "sinc": [167, 168, 171, 218, 284, 376, 431, 433, 686, 687, 688, 690, 699, 702], "gzip": [167, 431, 659, 662], "bz2": [167, 431, 662], "xz": [167, 431, 662], "read_json": [167, 431], "fname": [169, 655], "orc": [169, 663, 678, 700, 701], "enable_statist": 169, "stripe_size_byt": 169, "stripe": [169, 171, 663], "67108864": 169, "64mb": 169, "stripe_size_row": 169, "row_index_strid": 169, "10000": [169, 284, 695], "read_orc": [169, 664, 693, 701], "struct": [169, 174, 690, 698, 700, 701, 704], "experiment": [169, 701], "reliabl": 169, "datatyp": [169, 672], "nullabl": [170, 183, 434, 446, 686, 690, 694, 697, 704], "root": [171, 652, 687], "directori": [171, 652, 664, 686, 689, 693], "partition_offset": 171, "engin": [171, 481, 482, 487, 492, 523, 658, 662, 663, 664, 692], "much": [171, 686, 687, 690, 693], "faster": [171, 466, 663, 671, 686, 699], "partition_col": [171, 652], "partition_file_nam": 171, "uuid4": 171, "hex": [171, 495, 496, 509, 553, 554], "rowgroup": [171, 652], "page": [171, 652, 678, 689, 692, 701, 704], "metadata_file_path": 171, "blob": [171, 653], "footer": [171, 653], "file_path": [171, 693], "int96_timestamp": 171, "int96": 171, "julian": 171, "midnight": 171, "row_group_size_byt": 171, "134217728": 171, "128mb": 171, "row_group_size_row": 171, "return_metadata": [171, 653], "read_parquet": [171, 655, 693, 697, 701], "intern": [173, 184, 205, 435, 447, 667, 668, 669, 670, 686, 687, 689, 690, 691, 701], "transpar": [173, 435], "dure": [173, 435, 539, 544, 672, 687], "n0": [173, 435], "n1": [173, 435], "n2": [173, 435], "compos": [174, 687, 690, 697, 699], "pivot": [177, 673], "innermost": [177, 663, 664, 673], "filter_func": 178, "There": [178, 196, 314, 626, 687, 695, 701, 704], "coercibl": [178, 440], "notimplementederror": [178, 481, 529, 532, 538, 555, 687, 690], "proport": 179, "frequent": [179, 442, 690], "occur": [179, 442, 481, 687, 693], "ant": [179, 522, 540, 546], "varianc": [182, 445, 586, 604, 646], "666667": [182, 445], "falsi": [183, 446, 694], "treatment": [183, 446, 694], "gsr": [183, 446, 694, 697], "tz": 184, "dayfirst": [184, 659, 671], "yearfirst": [184, 671], "immut": [184, 203, 253, 254, 271, 447, 456], "sliceabl": [184, 203, 253, 447, 456], "pytz": 184, "timezon": 184, "dateutil": [184, 671], "tzfile": 184, "pars": [184, 659, 662, 671, 672, 693, 695], "year": [184, 187, 189, 192, 193, 196, 242, 610, 612, 616, 621, 622, 623, 626, 671, 699], "1970": 184, "000000001": 184, "000000002": 184, "000000003": 184, "000000004": 184, "l": [185, 190, 197, 479, 489, 608, 614, 627, 688], "me": [185, 190, 197, 490, 533, 608, 614, 627], "alias": [185, 190, 197, 608, 614, 627, 686], "gindex": [185, 190, 193, 196], "2020": [185, 190, 193, 196, 626], "42": [185, 283, 698, 699], "1999": [185, 190, 193, 196, 626], "41": [185, 481], "datetime_index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202], "int16index": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 669], "int16": [186, 187, 188, 189, 191, 194, 195, 198, 201, 202, 315, 609, 610, 611, 612, 613, 615, 624, 625, 628, 630, 631, 672, 697, 701], "365": [187, 189, 192, 610, 612, 616], "leap": [187, 189, 192, 610, 612, 616], "366": [187, 189, 192, 610, 612, 616], "2016": [187, 188, 189, 201, 610, 611, 612, 630, 671], "2017": [187, 188, 189, 201, 610, 611, 612, 621, 622, 630, 671], "week": [188, 193, 201, 611, 623, 630], "mondai": [188, 201, 611, 630], "sundai": [188, 201, 611, 630], "59": [190, 284, 655, 659, 660, 663, 664, 699], "belong": [192, 196, 308, 616, 626, 686], "29th": [192, 616], "februari": [192, 616], "intercalari": [192, 616], "four": [192, 616, 686, 701], "400": [192, 207, 616, 695], "datafram": [193, 199, 205, 236, 244, 246, 247, 257, 258, 259, 260, 262, 263, 264, 267, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 285, 286, 293, 294, 298, 299, 300, 301, 303, 309, 310, 311, 312, 314, 317, 318, 319, 323, 324, 325, 330, 331, 332, 334, 335, 338, 340, 346, 347, 351, 352, 353, 354, 356, 357, 359, 360, 361, 364, 365, 367, 368, 370, 372, 374, 375, 383, 384, 385, 386, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 433, 435, 438, 442, 443, 444, 445, 446, 448, 454, 457, 487, 492, 529, 538, 539, 544, 557, 561, 569, 570, 572, 573, 574, 575, 578, 580, 581, 584, 586, 592, 593, 594, 595, 598, 599, 602, 603, 605, 606, 623, 632, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 671, 673, 677, 678, 679, 685, 686, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704], "accord": [193, 358, 623, 686, 690], "8601": [193, 623], "52": 193, "januari": [195, 196, 625, 626], "decemb": [195, 196, 625, 626], "march": [196, 626], "april": [196, 626], "june": [196, 626], "third": [196, 260, 626], "juli": [196, 626], "septemb": [196, 626], "fourth": [196, 626], "octob": [196, 626], "int8index": [196, 669], "int8": [196, 321, 626, 672, 697, 701], "dt_idx": 197, "58": [197, 608, 614, 627, 699], "dame": [200, 249, 455], "2002": [202, 616, 631], "basic": [203, 205, 253, 283, 456, 561, 580, 605, 693, 698, 699], "pure": [203, 253, 456, 687, 690], "__init__": [204, 254, 688], "tupleize_col": 205, "best": [205, 266, 525, 638, 686, 687, 689, 693, 694, 704], "fit": [205, 373, 376, 693], "design": [205, 258, 686, 687, 689, 692, 696], "factori": [205, 690], "re": [205, 284, 481, 482, 487, 492, 523, 532, 542, 693, 695, 699], "intim": 205, "familiar": [205, 686, 688, 689, 690, 692], "uint64": [205, 456, 697, 701], "uint64index": 205, "has_dupl": 205, "from_arrow": [205, 704], "get_loc": [205, 694], "collect": [207, 358, 472, 688, 693, 698, 704], "incompar": 212, "caught": 212, "catch": [212, 687], "idx1": [212, 224, 250], "idx2": [212, 224, 250], "nulls_are_equ": 213, "obj": [216, 457, 667, 668, 669, 670], "pdi": 217, "primarili": [218, 686], "stringindex": [218, 245, 321, 326, 350, 481, 529, 538, 693], "bound": [220, 255, 290, 469, 699], "leftmost": 220, "past": [220, 699], "rightmost": [220, 647], "ix": 220, "getitem": 220, "red": [224, 250, 258, 264], "blue": [224, 250, 258, 264], "is_integ": [225, 226, 227, 229, 233, 234], "is_float": [225, 226, 228, 229, 233, 234], "is_numer": [225, 226, 227, 228, 229, 234], "is_object": [225, 226, 227, 228, 229, 233], "is_categor": [225, 227, 228, 229, 233, 234], "is_interv": [225, 226, 227, 228, 233, 234], "categoricalindex": [226, 292, 647, 678], "is_boolean": [226, 227, 228, 229, 233, 234], "watermelon": [226, 228, 234], "orang": [226, 234], "appl": [226, 228, 233, 234, 672], "peter": 226, "victor": 226, "elisabeth": 226, "mar": 226, "mango": [228, 234], "intervalindex": [229, 647, 678], "monotonic_increas": 230, "is_monotonic_increas": [230, 341], "decreas": [231, 342, 373], "cold": 233, "sought": 235, "is_contain": 235, "return_index": [236, 244], "join_index": 236, "lexicograph": [236, 266, 694], "lh": 236, "rh": 236, "renamed_index": 239, "abl": [242, 695, 696], "partial": 242, "renam": [242, 466], "quarter": [242, 619, 620], "cobra": 242, "frozenlist": 242, "itself": [244, 529, 538, 690], "sorted_index": 244, "1000": [244, 284, 556, 690, 695, 699, 704], "allow_fil": 245, "green": [250, 263], "break": [255, 687], "pad": [256, 526, 539, 544, 556, 572, 638, 678, 690], "backfil": [256, 572], "distanc": [256, 484, 485], "broken": 256, "prefer": [256, 663, 664, 671, 686, 687], "larger": [256, 501, 502, 638, 659, 663, 693, 701], "inexact": 256, "satisfi": [256, 686], "equat": 256, "unique_index": 256, "abc": [256, 314, 358, 474, 478, 480, 485, 491, 497, 499, 500, 507, 509, 510, 518, 524, 535, 536, 543, 659, 697, 702], "monotonic_index": 256, "abbc": 256, "non_monotonic_index": 256, "abcb": 256, "numeric_unique_index": 256, "sortord": 258, "from_fram": [259, 260, 263, 264, 267], "cartesian": [262, 263, 264, 686], "hi": [262, 693], "precip": 262, "nj": 262, "explicit": [262, 271, 699], "explicitli": [263, 284, 659, 688, 693, 695, 702, 704], "color": [263, 264], "purpl": 263, "effort": [266, 694], "fail": [266, 688, 701], "situat": [266, 581, 694, 704], "mi": 266, "non_monotonic_non_unique_idx": 266, "coerc": [266, 671, 672, 694, 695, 704], "unus": [271, 458, 466], "homogen": 271, "hashabl": 272, "been": [272, 690, 696, 701], "overridden": 272, "1d": [272, 328, 617, 619, 620, 639, 649, 690], "overrid": [272, 690], "extensiondtyp": [272, 704], "iteritem": 272, "to_list": 272, "tolist": 272, "to_append": 282, "s3": [282, 505, 652, 658, 659, 662, 663, 664, 665], "convert_dtyp": 283, "udf": [283, 284, 695, 700, 704], "cach": [283, 671], "recompil": 283, "incur": [283, 687], "overhead": [283, 686], "nest": [283, 467, 700], "decor": [283, 284], "someth": [283, 529, 688, 693, 699], "upcast": 283, "deriv": [283, 358], "out_dtyp": 284, "global": [284, 703], "featur": [284, 686, 687, 688, 703], "pydata": [284, 699, 700], "dev": [284, 695], "cudapysupport": 284, "cmath": 284, "libcudf": [284, 689, 690], "complex": [284, 539, 688, 690, 699], "ptx": 284, "sin": 284, "co": 284, "tan": 284, "lgamma": 284, "insid": [284, 533, 659, 688, 698, 699], "known": [284, 671], "liter": [284, 481, 482, 532, 539, 544], "pattern": [284, 416, 481, 482, 486, 487, 492, 532, 539, 544, 545, 690], "lambda": [284, 358, 561, 580, 581, 598, 605, 694, 696, 698, 699], "105": 284, "95": [284, 494, 695], "40100": 284, "10050": 284, "cube_funct": 284, "8000000": [284, 693], "custom_udf": 284, "205": [284, 695], "lag": 287, "autocorrel": 287, "1438853844": 287, "9647548490": 287, "csf1": 288, "inclus": [290, 489, 647], "wherev": [290, 690], "gt": [290, 693, 699, 702], "lt": [290, 693, 699, 702], "alic": [290, 699], "bob": [290, 699], "carol": 290, "ev": 290, "anna": 290, "daniel": 290, "accessor": [292, 315, 678, 696], "Be": 292, "parent": [292, 690, 693], "reorder_categori": 292, "remove_categori": 292, "set_categori": 292, "abcd": [292, 478, 543], "as_ord": [292, 460], "as_unord": 292, "ser1": [295, 297], "62": [295, 297], "ser2": [295, 297], "51": [295, 297], "20454263717316112": 295, "015750000000000004": 297, "0x": 302, "to_host_arrai": 302, "uint8": [302, 650, 672, 693, 701], "3rd": 307, "ind": [308, 425, 659], "beetl": [313, 345], "hippo": [313, 345], "discard": [313, 659], "kept": [314, 376, 686, 687], "datetimelik": [315, 678], "1h": 315, "hour": [315, 448, 632], "na_sentinel": 321, "chunkedarrai": 326, "singlecolumnfram": [326, 690], "pd_categor": 327, "set_mask": 328, "skip": [328, 658, 659, 663, 672], "mark": [328, 687], "bit": [328, 690], "_column": 328, "seriesgroupbi": [331, 677], "turn": [345, 690], "therefor": [345, 466, 556, 686, 687, 690], "width": [358, 477, 520, 528, 537, 555, 556, 647, 690], "rabbit": [358, 492], "kitten": [358, 484], "puppi": [358, 484], "countries_popul": [373, 376], "montserrat": [373, 376], "5200": [373, 376], "quant_index": 387, "renamed_seri": 392, "numeric_seri": 392, "come": [396, 687, 688], "bar": [396, 688], "baz": [396, 532, 688], "mimic": [416, 688], "interfac": [416, 690, 695, 699], "stai": 416, "inspir": 416, "stringr": [416, 555], "packag": [416, 686, 687, 693, 695, 696, 702], "lib": [425, 693, 702], "stringarrai": 425, "0x7f796b0e7600": 425, "0x7f796b0e7750": 425, "rel": [442, 667, 668, 669, 670, 686], "half": 442, "divid": [442, 686], "500000": [442, 584, 586], "166667": 442, "996": [442, 695], "1132223": 447, "2023232": 447, "342234324": 447, "4234324": 447, "001132223": 447, "002023232": 447, "004234324": 447, "clear": [457, 690], "df1": [457, 652, 668, 693, 702], "letter": [457, 516, 548, 554], "df3": 457, "horizont": 457, "df4": 457, "polli": 457, "georg": [457, 529, 538, 699], "new_categori": [458, 465, 466], "seriesorindex": [458, 459, 460, 464, 465, 466, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "relationship": [463, 586, 690], "old": [464, 465, 466, 687], "reorder": [465, 466], "action": 466, "simultan": 466, "specialis": 466, "hand": 466, "surpris": 466, "search_kei": 468, "extract": [469, 493, 534, 542, 558, 678], "indexerror": 469, "criterion": 471, "lists_indic": 472, "ef": [474, 478], "bye": [474, 693], "thank": [474, 479, 699], "sentenc": [475, 521, 539, 544, 547, 548, 551, 552], "swapcas": [475, 521, 548, 551, 552, 678], "friend": 475, "goodby": [475, 479, 549, 550], "stringcolumn": [476, 690], "again": [476, 699], "aa": [476, 531], "bb": [476, 531], "dd": 476, "fillchar": [477, 520, 528, 537], "whitespac": [477, 490, 503, 504, 505, 506, 508, 510, 512, 513, 514, 517, 520, 522, 526, 527, 528, 529, 533, 537, 538, 539, 540, 544, 546, 549, 550, 659], "as_list": 478, "gram": [478, 524, 525], "bigram": [478, 524], "ngram": [478, 525, 678], "str_seri": [478, 524, 638], "efgh": 478, "xyz": [478, 480, 524], "bc": [478, 485], "cd": 478, "fg": 478, "gh": 478, "xy": 478, "yz": 478, "bcd": 478, "efg": 478, "fgh": 478, "world": [479, 483, 493, 520, 526, 527, 535, 537, 549, 550], "k": [479, 518, 572, 694], "\u00e9ee": 480, "97": 480, "121": 480, "122": 480, "50089": 480, "101": [480, 638, 693], "98": 480, "99": [480, 494, 526, 695], "pat": [481, 482, 486, 487, 492, 523, 532, 534, 539, 544, 545], "flag": [481, 482, 487, 492, 523, 532, 695], "regular": [481, 482, 486, 487, 492, 523, 532, 539, 544, 545, 556, 688, 700], "multilin": [481, 482, 487, 492, 523], "anyth": [481, 529, 532, 538], "dotal": [481, 482, 487, 492, 523], "mous": 481, "hous": 481, "og": 481, "digit": [481, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 517, 554, 686, 697], "might": [481, 695, 699], "35": [481, 632, 633, 634, 636, 655, 659, 660, 663, 664], "escap": 482, "aaba": [482, 693], "baca": [482, 693], "caba": [482, 693], "dollar": 482, "sign": [482, 556, 672, 697], "aab": 482, "ca": 482, "token": [483, 490, 524, 525, 526, 527, 533, 549, 637, 638, 678], "measur": [484, 485, 530, 586, 686], "levenshtein": [484, 485], "edit": [484, 485], "www": 484, "cuelog": 484, "com": [484, 553, 554, 701], "blog": 484, "doggi": 484, "kitti": 484, "pup": 484, "dogi": 484, "listdtyp": [485, 690, 697], "tell": 485, "symmetr": 485, "diagon": [485, 695], "cba": 485, "nativ": [486, 687], "bat": [486, 545], "bear": [486, 545], "captur": [487, 686], "subject": 487, "c3": 487, "repl": [488, 489, 498, 532, 534, 543], "alphanumer": [488, 503, 504, 505, 506, 508, 510, 512, 513, 514, 517], "pear": 488, "plum": 488, "72": [488, 693, 695], "100k": 488, "unicod": [489, 506, 513, 526, 551], "ordin": [489, 551], "maketran": [489, 551], "helper": [489, 551, 690, 695], "caus": 489, "undefin": [489, 638, 699], "aeiou": 489, "0123456789": [489, 498], "aei": 489, "ou": 489, "456": [489, 511, 655, 659, 660, 663, 664], "_": [489, 490, 498, 518, 520, 524, 525, 533, 537, 554, 650], "___ou": 489, "aei__": 489, "0123___789": 489, "min_token_length": 490, "theme": [490, 533, 688], "music": [490, 533], "substr": [491, 497, 535, 536, 541, 542], "fulli": [491, 497, 535, 536, 693, 697, 699], "failur": [491, 535], "ddb": [491, 497, 536], "word": [492, 516, 521, 547, 552, 637, 638], "json_path": 494, "allow_single_quot": 494, "strip_quotes_from_single_str": 494, "missing_fields_as_nul": 494, "jsonpath": 494, "quot": [494, 659], "doubl": [494, 662], "strip": [494, 522, 540, 678], "book": [494, 524, 525, 638], "author": 494, "nigel": 494, "ree": 494, "titl": [494, 516, 521, 547, 552, 678], "centuri": 494, "evelyn": 494, "waugh": 494, "sword": 494, "honour": 494, "1234": [495, 496], "abcdef": [495, 496], "1a2": [495, 496], "cafe": [495, 496], "htoi": [495, 678], "4660": [495, 496], "11259375": [495, 496], "418": [495, 496], "51966": [495, 496], "traceback": [497, 536], "recent": [497, 536], "stdin": [497, 536], "modul": [497, 536, 678, 686, 687, 691, 693, 704], "abb": [497, 536], "abcdefghij": 498, "ab_cdefghij": 498, "01_23456789": 498, "abcdefghij_": 498, "0123456789_": 498, "ip": [499, 500, 688], "168": [499, 500], "212336897": [499, 500], "167772161": [499, 500], "ip2int": [500, 678], "conson": [501, 502], "troubl": [501, 502, 690], "vowel": 502, "isalpha": [503, 505, 506, 508, 510, 512, 513, 514, 517, 678], "isdigit": [503, 504, 505, 508, 509, 510, 512, 513, 514, 517, 678], "isnumer": [503, 504, 505, 506, 508, 509, 510, 512, 514, 517, 678], "isdecim": [503, 504, 506, 508, 509, 510, 512, 513, 514, 517, 678], "alphabet": [503, 504, 505, 506, 508, 510, 512, 513, 514, 517], "isinteg": [503, 504, 505, 506, 508, 512, 513, 514, 517, 678], "isfloat": [503, 504, 505, 506, 509, 510, 512, 513, 514, 517, 678], "islow": [503, 504, 505, 506, 508, 510, 513, 514, 517, 678], "lowercas": [503, 504, 505, 506, 508, 510, 512, 513, 514, 516, 517, 521, 547, 548, 552, 637], "isspac": [503, 504, 505, 506, 508, 510, 512, 513, 517, 678], "isupp": [503, 504, 505, 506, 508, 510, 512, 513, 514, 678], "uppercas": [503, 504, 505, 506, 508, 510, 512, 513, 514, 516, 517, 521, 547, 548, 552], "one1": [503, 504, 513], "punctuat": [503, 526], "isalnum": [504, 505, 506, 508, 510, 512, 513, 514, 517, 678], "\u00b3": [505, 506, 513], "\u2155": [505, 506, 513], "superscript": 506, "subscript": 506, "123213": 508, "123": [508, 511, 522, 529, 538, 546, 632, 633, 634, 635, 636, 655, 659, 660, 663, 664], "0001": 508, "234": [508, 632, 633, 634, 635, 636, 697], "plain": 508, "text": [508, 510, 637, 638, 655, 658, 659, 660, 663, 664, 665, 678, 691], "123def": 509, "0x2d3": 509, "plan": [510, 687, 699], "ipv4": 511, "address": [511, 688, 690], "127": 511, "255": 511, "leopard": [512, 516, 517], "golden": [512, 516, 517], "eagl": [512, 516, 517], "snake": [512, 516, 517], "quantiti": 513, "20201101": 515, "192011": 515, "18200111": 515, "2120": 515, "string_na_rep": 518, "sep_na_rep": 518, "themselv": [518, 688], "interven": 518, "suppli": [518, 650, 699], "ghi": [518, 659, 697], "a_b_c": 518, "d_e_f": 518, "g_h_i": 518, "a_b_k": 518, "c_d": 518, "ai_": 520, "__": [520, 537], "capit": [521, 547, 548, 551, 552, 678], "to_strip": [522, 540, 546], "trail": [522, 540, 546], "newlin": [522, 540, 546, 687], "rstrip": [522, 546, 678], "ac": 523, "my": 524, "favorit": 524, "my_favorit": 524, "hhh": 524, "abc_def": 524, "def_xyz": 524, "xyz_hhh": 524, "white": 525, "this_i": 525, "is_th": 525, "best_book": 525, "do_low": [526, 637], "subword_token": 526, "around": [526, 529, 539, 544, 687, 690, 699], "p": 526, "symbol": 526, "cjk": 526, "cc": [526, 531], "cf": 526, "do_lower_cas": [526, 637, 638], "accent": 526, "h\u00e9llo": 526, "tworld": 526, "\u0103\u0107c\u0117\u00f1ted": 526, "up": [528, 539, 544, 608, 614, 671, 686, 687, 691, 693, 699, 704], "rjust": [528, 556, 678], "ljust": [528, 556, 678], "zfill": [528, 678], "prepend": [528, 556], "carib": 528, "tiger": 528, "rpartit": [529, 678], "linda": [529, 538], "van": [529, 538], "der": [529, 538], "berg": [529, 538], "pitt": [529, 538], "river": [529, 538], "999": [529, 538, 693, 695], "porter": 530, "stemmer": 530, "super": 530, "ccc": 531, "fuz": 532, "ba": 532, "bao": 532, "back": [534, 659, 663, 664, 690, 693, 701, 704], "ref": [534, 561, 580, 605], "templat": 534, "section": [534, 543, 686, 687, 688, 689, 693, 698, 699, 702, 704], "a543": 534, "z756": 534, "av453": 534, "zv576": 534, "rfind": [536, 678], "_________hello": 537, "___________rapid": 537, "version": [539, 544, 677, 687, 693, 695, 702], "tutori": [539, 693], "throughout": [539, 544], "slightli": [539, 677, 686], "url": [539, 553, 554, 652, 658, 659, 662, 663, 664, 665], "lstrip": [540, 546, 678], "slice_replac": [541, 678], "koala": 541, "fox": 541, "chameleon": 541, "oala": 541, "ox": 541, "hameleon": 541, "ko": 541, "fo": 541, "ch": 541, "kaa": 541, "fx": 541, "caeen": 541, "kl": 541, "cm": 541, "ello": 542, "abdc": 543, "until": [543, 693], "xc": 543, "xdc": 543, "xcde": 543, "axc": 543, "axd": 543, "rsplit": [544, 678], "endswith": [545, 678], "unmap": 551, "untouch": 551, "swapc1s": 551, "low": [551, 699], "nt": 551, "nc": 551, "swapc1": 551, "No": [553, 554, 638, 647, 690, 700], "2fb": [553, 554], "2fd": [553, 554], "20f": [553, 554], "2c6": [553, 554], "3a": [553, 554], "2f": [553, 554], "2frapid": [553, 554], "2fstart": [553, 554], "2fmedium": [553, 554], "medium": [553, 554, 647], "paragraph": 555, "expand_tabsbool": 555, "replace_whitespac": 555, "drop_whitespac": 555, "break_long_word": 555, "break_on_hyphen": 555, "str_wrap": 555, "expand_tab": 555, "nwrap": 555, "nto": 555, "reach": [556, 690], "minu": 556, "move": [556, 695, 699], "longer": [556, 688, 689], "001": 556, "children": [558, 690], "agg": [561, 603, 605, 693, 696, 698], "f1": [561, 580, 605], "quantil": [561, 580, 605, 694, 698], "__name__": [561, 580, 605], "q0": [561, 580, 605], "f2": [561, 580, 605], "score": 569, "90": [569, 693], "hole": 572, "gap": [572, 690], "introduc": [578, 687], "indetermin": 578, "mult": 581, "redund": [581, 694], "pairwis": [584, 586], "kendal": 584, "val1": [584, 586], "val2": [584, 586], "val3": [584, 586], "385727": 584, "714575": 584, "bia": 586, "comparison": [586, 686, 687, 692, 700, 702], "understand": 586, "member": [586, 687], "invert": 586, "matric": [586, 695], "en": 586, "wikipedia": 586, "wiki": 586, "estimation_of_covariance_matric": 586, "833333": 586, "round": [608, 614], "dt": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 682, 693, 696], "datetime_seri": [609, 610, 611, 612, 615, 624, 625, 628, 630, 631, 702], "2013": 616, "1y": 616, "2003": [616, 699], "2005": [616, 696], "2007": 616, "2008": 616, "2009": [616, 623], "2011": 616, "2012": [616, 671, 702], "2021": 623, "serindex": 623, "to_datetim": 623, "53": 623, "dt_sr": 627, "weekday_seri": 629, "12231312123": [632, 633, 634, 635, 636], "1231231231": [632, 633, 634, 635, 636], "1123236768712": [632, 633, 634, 635, 636], "2135656": [632, 633, 634, 635, 636], "3244334234": [632, 633, 634, 635, 636], "141": [632, 633, 634, 636], "231": [632, 633, 634, 635, 636], "13000": [632, 633, 634, 636], "48": [632, 633, 634, 636, 704], "712": [632, 633, 634, 635, 636], "656": [632, 633, 634, 635, 636], "37": [632, 633, 634, 636, 702], "123000": [634, 636], "231000": [634, 636], "712000": [634, 636], "656000": [634, 636], "234000": [634, 636], "231312123": 635, "231231231": 635, "236768712": 635, "002135656": 635, "244334234": 635, "48912": 636, "21631": 636, "36768": 636, "2135": 636, "47534": 636, "hash_fil": 637, "bert": [637, 638], "subword": [637, 638], "vocabulari": [637, 638], "pretrain": [637, 638], "21x": 637, "util": [637, 638, 678, 692, 693], "hash_vocab_util": [637, 638], "hash_vocab": [637, 638], "max_length": 638, "max_num_row": 638, "add_special_token": 638, "return_tensor": 638, "return_token_type_id": 638, "batch": 638, "alloc": [638, 690, 699], "temporari": 638, "twice": [638, 686], "classif": 638, "model": [638, 690, 693], "do_not_trunc": 638, "huggingfac": 638, "pt": 638, "tf": 638, "tensorflow": 638, "pytorch": 638, "torch": 638, "input_id": 638, "fed": 638, "attention_mask": 638, "attend": 638, "vocab": 638, "txt": 638, "voc_hash": 638, "cudf_token": 638, "tokenizer_output": 638, "1142": 638, "1110": 638, "1103": 638, "102": [638, 693], "1436": 638, "1520": 638, "counterpart": 639, "applymap": [639, 700], "count_if_gt_3": 639, "retbin": 647, "include_lowest": 647, "segment": 647, "go": [647, 686, 688, 690, 692, 695, 699], "continu": [647, 695], "criteria": [647, 661], "extens": [647, 659], "done": [647, 693], "994": [647, 695], "bad": 647, "unspecifi": 648, "fortran": [649, 695], "prefix_sep": 650, "dummy_na": 650, "spars": [650, 700], "drop_first": 650, "hot": 650, "dummi": 650, "value1": 650, "value2": 650, "a_value1": 650, "a_value2": 650, "a_non": 650, "a_1": 650, "a_2": 650, "a_nan": 650, "a_nul": 650, "max_file_s": 652, "file_name_prefix": 652, "exceed": 652, "writer": [652, 680, 686, 701], "gb": 652, "etc": [652, 677, 685, 686, 688, 697, 698], "mandatori": 652, "context": 652, "cw": 652, "write_t": 652, "manual": [652, 688], "num_row": [655, 658, 663, 686], "num_row_group": 655, "row_group": [655, 664], "num1": [655, 659, 660, 663, 664], "13t12": [655, 659, 660, 663, 664], "5451": [655, 659, 660, 663, 664], "14t12": [655, 659, 660, 663, 664], "5784": [655, 659, 660, 663, 664], "789": [655, 659, 660, 663, 664], "15t18": [655, 659, 660, 663, 664], "6117": [655, 659, 660, 663, 664], "myvarnam": 656, "myvalnam": 656, "filepath_or_buff": [658, 659, 663, 664, 665], "skiprow": [658, 659, 663], "load": [658, 659, 660, 662, 663, 664, 692, 693], "avro": [658, 678, 701], "pathlib": [658, 659, 661, 662, 663, 664, 665, 693], "py": [658, 659, 661, 662, 663, 664, 665, 686, 693, 702], "_path": [658, 659, 661, 662, 663, 664, 665], "localpath": [658, 659, 661, 662, 663, 664, 665], "ftp": [658, 659, 662, 663, 664, 665], "bytesio": [658, 663, 664], "parser": [658, 662, 663, 664], "remot": [658, 659, 663, 664, 688], "pandavro": 658, "pandas_df": 658, "to_avro": 658, "linetermin": 659, "quotechar": 659, "doublequot": 659, "mangle_dupe_col": 659, "usecol": 659, "delim_whitespac": 659, "skipinitialspac": 659, "skipfoot": 659, "thousand": [659, 695], "true_valu": 659, "false_valu": 659, "byte_rang": [659, 662, 665], "skip_blank_lin": 659, "parse_d": 659, "comment": [659, 688], "keep_default_na": 659, "na_filt": 659, "index_col": 659, "use_python_file_object": [659, 663, 664], "comma": 659, "seper": 659, "quote_minim": 659, "quote_al": 659, "quote_non": 659, "decompress": [659, 662, 701], "detect": [659, 662, 686, 700], "gz": [659, 662], "recogn": 659, "unusu": 659, "altogeth": [659, 690], "qnan": 659, "arrow": [659, 663, 664, 690, 692, 700], "pythonfil": [659, 663, 664], "fsspec": [659, 663, 664], "abstractbufferedfil": [659, 663, 664], "to_csv": [659, 693, 701], "fp": 659, "__fspath__": 661, "protocol": 661, "term": [661, 662, 686, 699, 704], "to_hdf": 661, "auto": [662, 688], "cudf_experiment": 662, "to_json": 662, "typ": 662, "recov": 662, "convert_ax": 662, "proper": 662, "convert_d": 662, "datelik": 662, "_at": 662, "_time": 662, "keep_default_d": 662, "precise_float": 662, "strtod": 662, "py3": 662, "jsonread": 662, "use_index": 663, "timestamp_typ": 663, "predic": [663, 664], "disjunct": [663, 664], "dnf": [663, 664], "conjunct": [663, 664, 687, 699], "AND": [663, 664], "outermost": 663, "OR": [663, 664], "notat": [663, 664], "seek": 663, "to_orc": [663, 701], "strings_to_categor": 664, "use_pandas_metadata": 664, "categorical_partit": 664, "open_file_opt": 664, "gdf_categori": 664, "gdf_string": 664, "discourag": 664, "open_parquet_fil": 664, "deactiv": 664, "precach": 664, "precache_opt": 664, "open_file_func": 664, "read_parquet_metadata": 664, "datasourc": 665, "baseexcept": 666, "check_dtyp": [667, 668, 670], "check_column_typ": [667, 668], "equiv": [667, 668, 669, 670], "check_less_precis": [667, 669, 670], "check_exact": [667, 668, 669, 670], "check_datetimelike_compat": [667, 668, 670], "check_categor": [667, 668, 669, 670], "check_category_ord": [667, 670], "rtol": [667, 668, 669, 670], "1e": [667, 668, 669, 670], "atol": [667, 668, 669, 670], "columnbas": [667, 668, 669, 670, 690], "intend": [667, 668, 669, 670, 690, 699], "inferred_typ": [667, 668, 669, 670], "idl": [667, 668, 670], "check_datetime_like_compat": [667, 668, 670], "appropri": [667, 668, 669, 670, 688, 690], "assert": [667, 668, 669, 670], "messag": [667, 668, 669, 670, 687], "check_index_typ": [668, 670], "check_frame_typ": 668, "check_nam": [668, 669, 670], "by_block": 668, "check_lik": 668, "assertionerror": [668, 669, 670], "hitch": [668, 669, 670], "check_ord": 669, "int32index": 669, "id1": 669, "id2": 669, "check_series_typ": 670, "sr1": 670, "sr2": 670, "utc": 671, "infer_datetime_format": 671, "eg": 671, "bug": [671, 687], "strftime": 671, "denot": 671, "off": [671, 688, 693, 701], "10x": 671, "succeed": 671, "assembl": 671, "abbrevi": 671, "plural": 671, "2015": 671, "1490195805": 671, "22t15": 671, "000000000": 671, "1490195805433502912": 671, "1780": 671, "20t01": 671, "494253056": 671, "polici": [672, 687], "notifi": 672, "encount": [672, 687], "unsign": [672, 697], "down": [672, 686], "decoupl": 672, "3e3": 672, "3000": 672, "cudf": [677, 678, 685, 687, 689, 690, 691, 694, 697, 698, 700, 701, 703], "usual": [677, 686], "permit": 677, "restrict": 677, "publicli": 678, "namespac": [678, 682, 688], "manipul": [678, 692, 693], "merg": [678, 686, 690, 693, 696, 704], "timedeltaindex": 678, "deal": 678, "roll": [678, 690, 696, 700], "subwordtoken": [678, 692], "stringmethod": 678, "byte_count": 678, "character_ngram": 678, "character_token": 678, "code_point": 678, "detoken": 678, "edit_dist": 678, "edit_distance_matrix": 678, "filter_alphanum": 678, "filter_charact": 678, "filter_token": 678, "findal": 678, "get_json_object": 678, "hex_to_int": 678, "ip_to_int": 678, "is_conson": 678, "is_vowel": 678, "isempti": 678, "ishex": 678, "isipv4": 678, "istimestamp": 678, "istitl": 678, "ngrams_token": 678, "normalize_charact": 678, "normalize_spac": 678, "porter_stemmer_measur": 678, "replace_token": 678, "replace_with_backref": 678, "rindex": 678, "slice_from": 678, "startswith": 678, "token_count": 678, "translat": [678, 690], "url_decod": 678, "url_encod": 678, "wrap": [678, 687, 693, 699], "get_opt": [678, 691], "set_opt": [678, 703], "describe_opt": [678, 703], "variant": 679, "thereof": 679, "reader": [680, 693, 701], "acceler": [680, 689, 692, 693, 699, 701], "cpu": [680, 693, 696, 701, 704], "futur": [680, 686, 687, 689, 693, 699, 702], "variou": [682, 686, 687, 688, 690], "goal": [686, 687, 689], "repositori": 686, "pytest": 686, "plugin": [686, 688], "framework": 686, "seamless": 686, "experi": [686, 688, 699], "develop": [686, 687, 688, 690, 691, 692, 695, 699, 700], "public": [686, 688], "former": [686, 688], "macro": 686, "vi": 686, "\u00e0": 686, "help": [686, 687, 688], "quantifi": 686, "minim": [686, 687, 688], "bind": [686, 690], "focu": [686, 695], "footprint": 686, "At": [686, 689, 690, 699], "stabil": [686, 687], "free": 686, "bench_class": 686, "eval": 686, "bench_datafram": 686, "hierarchi": [686, 690], "bench_frame_or_index": 686, "trigger": 686, "veri": [686, 695, 698, 699], "characterist": 686, "_intern": 686, "_apply_boolean_mask": 686, "bench_dataframe_intern": 686, "broadli": 686, "speak": 686, "live": [686, 687], "bench_io": 686, "discov": 686, "test_": 686, "bench_": 686, "instal": [686, 688], "termin": 686, "autosav": 686, "xxxx_": 686, "xxxx": 686, "yyyi": 686, "command": [686, 688], "short": [686, 688, 693], "param": 686, "config": [686, 687], "hard": 686, "advertis": [686, 696], "littl": [686, 690], "natur": [686, 702], "meaning": 686, "care": 686, "interchang": [686, 690], "demonstr": [686, 688, 699], "bench_foo": 686, "six": 686, "did": [686, 699], "interest": 686, "cover": [686, 688, 689, 699], "baselin": [686, 693], "coverag": 686, "tweak": 686, "debug": [686, 687, 690], "num_col": 686, "aspect": 686, "want": [686, 688, 693, 695, 699, 702], "quantit": 686, "easi": [686, 688, 695, 696], "environ": [686, 688, 701], "cudf_benchmarks_use_panda": 686, "easili": [686, 688, 692], "simpli": [686, 688, 690, 695], "remap": 686, "why": 686, "critic": 686, "ci": [686, 693], "significantli": 686, "cycl": [686, 687], "balanc": 686, "cudf_benchmarks_debug_onli": 686, "advantag": [686, 695], "redefin": [686, 699], "crucial": 686, "although": 686, "suit": 686, "guidelin": [686, 688], "spy": 686, "svg": 686, "invoc": 686, "tool": [686, 687], "strength": 686, "somewhat": 686, "workflow": [686, 687, 692, 693, 700], "encourag": [686, 688, 695, 696], "discuss": [686, 688, 689, 690, 693, 702], "hood": [686, 688, 689, 690, 693], "piec": [686, 688, 690], "magic": 686, "pytest_cas": 686, "programat": 686, "unambigu": 686, "classnam": 686, "_dtype_": 686, "_nulls_": 686, "_cols_": 686, "_rows_": 686, "dataframe_dtype_int_rows_100": 686, "cumbersom": [686, 690], "moreov": 686, "embed": 686, "problem": [686, 699], "essenti": [686, 690, 699], "dataframe_dtype_int_cols_6": 686, "focus": 687, "high": [687, 690], "overview": [687, 692, 700], "practic": [687, 689, 690, 693], "subpackag": 687, "_lib": 687, "emploi": 687, "linter": 687, "manag": [687, 690, 699], "pre": [687, 699], "commit": 687, "strongli": [687, 688], "prior": 687, "yaml": 687, "repo": 687, "truth": 687, "lint": [687, 688], "flake8": 687, "complianc": 687, "black": 687, "formatt": 687, "isort": 687, "mypi": 687, "static": 687, "hint": 687, "difficult": [687, 696, 699], "pydocstyl": [687, 688], "docstr": [687, 689], "pyproject": 687, "toml": 687, "setup": [687, 693], "cfg": 687, "project": [687, 690, 696], "caveat": [687, 700], "parti": 687, "addition": [687, 689, 690, 696], "hook": 687, "overal": [687, 689], "releas": [687, 699], "prevent": 687, "unexpect": 687, "sure": [687, 695, 699], "emit": 687, "futurewarn": [687, 693, 702], "opportun": 687, "thing": [687, 696, 699], "new_foo": 687, "signal": 687, "deprecationwarn": 687, "hidden": 687, "__main__": 687, "analog": [687, 690], "sometim": [687, 693, 695, 699], "latest": 687, "reason": [687, 688, 690, 701], "exorbit": 687, "runtim": [687, 699], "premium": 687, "believ": 687, "perfect": 687, "infeas": [687, 690], "undesir": 687, "consult": 687, "team": 687, "assess": 687, "proce": [687, 693, 695], "substanti": 687, "power": [687, 688], "friendli": 687, "profil": [687, 689], "expos": [687, 690, 695, 699, 701], "pxd": [687, 690], "declar": [687, 690], "pyx": 687, "thin": [687, 699], "layer": [687, 689, 693], "rare": 687, "benefit": [687, 688], "happen": [687, 699, 702], "quit": 687, "justifi": 687, "benchmark": [687, 689, 692], "suffici": [687, 688], "mention": [687, 690, 696, 699], "logic_error": 687, "cuda_error": 687, "runtimeerror": 687, "payload": 687, "brittl": 687, "compromis": 687, "adopt": 687, "strategi": 687, "roadmap": 687, "diversifi": 687, "inlin": 688, "restructuredtext": 688, "myst": 688, "sphinx": 688, "contribut": [688, 689, 692], "lieu": 688, "complet": [688, 693, 701], "explan": [688, 691], "commonli": [688, 704], "brief": 688, "_strongly_": 688, "numpydoc": 688, "scenario": 688, "getter": 688, "That": 688, "inherit": [688, 690], "codebas": 688, "pull": 688, "aim": 688, "api_doc": 688, "rst": 688, "discover": 688, "autosummari": 688, "api1": 688, "api2": 688, "render": 688, "layout": [688, 690], "stub": 688, "currentmodul": 688, "autofunct": 688, "autodoc": 688, "approach": [688, 690, 699], "facilit": [688, 690], "bodi": 688, "api_nam": 688, "dedic": 688, "user_guid": 688, "superset": 688, "markdown": 688, "syntax": [688, 699], "link": 688, "anchor": 688, "instruct": 688, "nb": 688, "straightforward": 688, "navig": [688, 700], "shell": 688, "server": 688, "Then": 688, "web": 688, "browser": 688, "localhost": 688, "8000": 688, "port": 688, "machin": [688, 693, 696], "visibl": 688, "network": 688, "ssh": 688, "local_port": 688, "remote_port": 688, "remote_ip": 688, "enforc": [688, 693], "regard": 688, "main": [689, 690, 699], "dask_cudf": [689, 693, 696], "cudf_kafka": 689, "custreamz": 689, "robustli": 689, "guidanc": 689, "topic": 689, "cython": 689, "deprec": 689, "publish": 689, "advanc": [689, 695, 696, 699], "serv": 690, "face": 690, "bridg": 690, "review": 690, "role": 690, "requisit": 690, "tradeoff": 690, "tie": 690, "holist": 690, "diagram": 690, "princip": 690, "eponym": 690, "tabular": [690, 693, 699], "columnar": [690, 692, 693], "meanwhil": 690, "abstract": 690, "materi": 690, "preliminari": 690, "let": [690, 695, 699], "dive": 690, "deeper": 690, "surmis": 690, "diamond": 690, "simpler": [690, 699], "flatten": 690, "ve": [690, 693, 699], "highlight": [690, 699], "concret": [690, 699], "eventu": 690, "almost": 690, "rewrit": 690, "alon": 690, "reimplement": 690, "behav": 690, "instanti": 690, "unfortun": 690, "mimick": 690, "__new__": 690, "tree": 690, "masquerad": 690, "stack": 690, "glue": 690, "own": [690, 701], "semant": 690, "wildcard": [690, 693], "apach": [690, 692, 693], "conduc": 690, "concept": [690, 693], "extent": 690, "interoper": [690, 692, 700], "simplifi": 690, "sens": 690, "numericalcolumn": 690, "datetimecolumn": 690, "decis": 690, "4000": 690, "sizeof": 690, "128": [690, 695], "chees": 690, "preexist": 690, "knowledg": [690, 699], "structdtyp": [690, 697], "decimaldtyp": 690, "intervaldtyp": 690, "contigu": [690, 695], "rmm": 690, "devicebuff": 690, "interact": [690, 693, 699], "explanatori": 690, "column_view": 690, "table_view": 690, "question": [690, 699], "trivial": 690, "descent": 690, "whole": 690, "fact": [690, 702], "act": 690, "reduct": [690, 696], "scan": 690, "bypass": 690, "straight": 690, "resampl": 690, "composit": 690, "explain": 691, "_register_opt": 691, "yield": [691, 693, 704], "fixtur": 691, "clean": 691, "scientist": 692, "program": 692, "dask": [692, 700], "introduct": 693, "gear": 693, "mainli": 693, "scale": [693, 696, 697], "smooth": [693, 700], "cluster": [693, 696], "enough": [693, 696, 699], "comfort": [693, 699], "spread": [693, 696], "portion": [693, 699], "borrow": 693, "adapt": [693, 699], "cheatsheet": 693, "from_cudf": 693, "npartit": [693, 696], "ddf": 693, "dask_gdf": 693, "met": 693, "cudf_compar": 693, "dask_cudf_compar": 693, "isin": 693, "gdf1": 693, "rand": [693, 702], "082654": 693, "967955": 693, "399417": 693, "441425": 693, "784297": 693, "793582": 693, "070303": 693, "271711": 693, "gdf2": 693, "opt": [693, 702], "conda": [693, 702], "env": [693, 702], "python3": [693, 702], "site": [693, 702], "798": [693, 695], "343382": 693, "003700": 693, "20043": 693, "581614": 693, "907812": 693, "101512": 693, "24179": 693, "224180": 693, "var": [693, 698], "666666666666666": 693, "6666666666666667": 693, "map_partit": [693, 696], "add_ten": 693, "progress": 693, "ds2": 693, "restor": 693, "post": [693, 698], "ddf_a": 693, "ddf_b": 693, "paradigm": 693, "agg_col1": 693, "agg_col2": 693, "54": 693, "73": [693, 695], "date_df": 693, "986051": 693, "232034": 693, "397617": 693, "103839": 693, "date_ddf": 693, "grade": 693, "dgdf": 693, "to_numpi": 693, "to_arrow": [693, 704], "example_output": 693, "mkdir": 693, "foo_dask": 693, "star": 693, "temp_parquet": 693, "example_fil": 693, "cudf_root": 693, "orc_fil": 693, "testorcfil": 693, "test1": 693, "boolean1": 693, "byte1": 693, "short1": 693, "int1": 693, "long1": 693, "float1": 693, "double1": 693, "bytes1": 693, "string1": 693, "middl": 693, "1024": [693, 695], "65536": 693, "2048": 693, "100000000": 693, "chani": 693, "spark": 693, "lazi": 693, "moment": 693, "graph": 693, "delai": 693, "activ": 693, "background": [693, 699], "system": 693, "finish": 693, "downstream": [693, 695], "contract": 693, "upstream": 693, "snippet": 693, "localcudaclust": 693, "worker": 693, "beyond": 693, "scope": [693, 699], "client": 693, "dask_cuda": 693, "2022": 693, "242": 693, "preload": 693, "info": 693, "282": 693, "290": 693, "10000000": 693, "ddf2": 693, "2000000": 693, "9999999": 693, "nvidia": 693, "smi": 693, "tue": 693, "aug": 693, "495": 693, "bu": 693, "disp": 693, "volatil": 693, "uncorr": 693, "ecc": 693, "fan": 693, "perf": 693, "pwr": 693, "cap": 693, "mig": 693, "tesla": 693, "v100": 693, "pcie": 693, "00000000": 693, "38c": 693, "p0": 693, "98w": 693, "250w": 693, "2754mib": 693, "32510mib": 693, "25c": 693, "33w": 693, "307mib": 693, "26c": 693, "32w": 693, "23c": 693, "85": 693, "gi": 693, "pid": 693, "twenti": 693, "800": [693, 695], "sleep": 693, "28c": 693, "2744mib": 693, "693mib": 693, "24c": 693, "proceed": 693, "ll": [693, 695, 699], "ddf1": 693, "randint": [693, 704], "spent": 693, "results_ddf": 693, "sooner": 693, "had": 693, "doneandnotdonefutur": 693, "15d227b3bcf2c5a1b3872339308c808d": 693, "not_don": 693, "notebook": 695, "introductori": 695, "algebra": 695, "timeit": 695, "__version__": 695, "cupy_from_dlpack": 695, "from_dlpack": 695, "fromdlpack": 695, "as_gpu_matrix": 695, "500": 695, "arr_cupi": 695, "to_dlpack": 695, "to_cupi": 695, "209": 695, "\u00b5": 695, "989": 695, "652": 695, "89": 695, "649": 695, "501": 695, "1001": 695, "502": 695, "1002": 695, "9997": 695, "10497": 695, "10997": 695, "9998": 695, "10498": 695, "10998": 695, "9999": 695, "10499": 695, "10999": 695, "__cuda_array_interface__": [695, 699], "leverag": [695, 699, 704], "cola_cupi": 695, "226": 695, "56": [695, 699], "206": 695, "norm": 695, "reshaped_arr": 695, "197": 695, "198": 695, "199": 695, "201": 695, "202": 695, "397": 695, "398": 695, "399": 695, "401": 695, "402": 695, "597": 695, "598": 695, "599": 695, "9400": 695, "9401": 695, "9402": 695, "9597": 695, "9598": 695, "9599": 695, "9600": 695, "9601": 695, "9602": 695, "9797": 695, "9798": 695, "9799": 695, "9800": 695, "9801": 695, "9802": 695, "603": 695, "804": 695, "1005": [695, 699], "1206": 695, "1407": 695, "1608": 695, "1809": 695, "2211": 695, "2412": 695, "2613": 695, "2814": 695, "3015": 695, "3216": 695, "3417": 695, "3618": 695, "3819": 695, "4020": 695, "4221": 695, "4422": 695, "4623": 695, "4824": 695, "5025": 695, "5226": 695, "5427": 695, "5628": 695, "5829": 695, "6030": 695, "6231": 695, "6432": 695, "6633": 695, "6834": 695, "7035": 695, "7236": 695, "7437": 695, "7638": 695, "7839": 695, "8040": 695, "8241": 695, "8442": 695, "8643": 695, "8844": 695, "9045": 695, "9246": 695, "9447": 695, "9648": 695, "9849": 695, "linalg": 695, "577306": 695, "967739": 695, "easiest": [695, 699], "beforehand": 695, "reshaped_df": 695, "190": 695, "191": 695, "192": 695, "193": 695, "194": 695, "195": 695, "196": 695, "203": 695, "204": 695, "207": 695, "208": 695, "391": 695, "392": 695, "393": 695, "394": 695, "395": 695, "396": 695, "403": 695, "405": 695, "406": 695, "407": 695, "408": 695, "409": 695, "590": 695, "591": 695, "592": 695, "593": 695, "594": 695, "595": 695, "596": 695, "600": 695, "601": 695, "602": 695, "604": 695, "605": 695, "606": 695, "607": 695, "608": 695, "609": 695, "790": 695, "791": 695, "792": 695, "793": 695, "794": 695, "795": 695, "796": 695, "797": 695, "799": 695, "801": 695, "802": 695, "803": 695, "805": 695, "806": 695, "807": 695, "808": 695, "809": 695, "990": 695, "991": 695, "992": 695, "993": 695, "995": 695, "997": [695, 699], "998": 695, "isfortran": 695, "fortran_arr": 695, "asfortranarrai": 695, "926": 695, "todlpack": 695, "453": 695, "ecosystem": [695, 699], "isn": 695, "matur": 695, "hundr": 695, "wouldn": 695, "previous": 695, "new_arr": 695, "19900": 695, "59900": 695, "99900": 695, "139900": 695, "179900": 695, "219900": 695, "259900": 695, "299900": 695, "339900": 695, "379900": 695, "419900": 695, "459900": 695, "499900": 695, "539900": 695, "579900": 695, "619900": 695, "659900": 695, "699900": 695, "739900": 695, "779900": 695, "819900": 695, "859900": 695, "899900": 695, "939900": 695, "979900": 695, "1019900": 695, "1059900": 695, "1099900": 695, "1139900": 695, "1179900": 695, "1219900": 695, "1259900": 695, "1299900": 695, "1339900": 695, "1379900": 695, "1419900": 695, "1459900": 695, "1499900": 695, "1539900": 695, "1579900": 695, "1619900": 695, "1659900": 695, "1699900": 695, "1739900": 695, "1779900": 695, "1819900": 695, "1859900": 695, "1899900": 695, "1939900": 695, "1979900": 695, "seamlessli": 695, "enorm": 695, "sacrif": 695, "cleanli": 695, "cudf_to_cupy_sparse_matrix": 695, "sparseformat": 695, "_sparse_constructor": 695, "csc_matrix": 695, "csr_matrix": 695, "illustr": 695, "nonzero": 695, "arr": [695, 699], "a0": 695, "a4": 695, "a5": 695, "a6": 695, "a7": 695, "a8": 695, "a9": 695, "a10": 695, "a11": 695, "a12": 695, "a13": 695, "a14": 695, "a15": 695, "a16": 695, "a17": 695, "a18": 695, "a19": 695, "152086": 695, "561649": 695, "485533": 695, "175431": 695, "453176": 695, "149709": 695, "744613": 695, "283115": 695, "sparse_data": 695, "2712563866465363": 695, "13857522860265": 695, "561648821033125": 695, "642": 695, "950553987870826": 695, "516": 695, "0529139066121662": 695, "280158154495327": 695, "646": 695, "189000553650967": 695, "993271547995388": 695, "777": 695, "383063732690364": 695, "522": 695, "871797158129175": 695, "7045024890429215": 695, "139": 695, "231746093809849": 695, "651": 695, "619490453867872": 695, "1035": 695, "1139264585975401": 695, "140": 695, "120250391966685": 695, "9143550196318867": 695, "27264269679647346": 695, "656283914466597": 695, "527": 695, "7105435578827257": 695, "145": 695, "969280610723894": 695, "461914621761432": 695, "151": 695, "9786538171224937": 695, "152": 695, "147529962461245": 695, "7712268373837692": 695, "8877949957407971": 695, "9462": 695, "3751631823191923": 695, "9209": 695, "169669932227343": 695, "9338": 695, "714842754466629": 695, "9466": 695, "45933398578307416": 695, "8955": 695, "8376856356704474": 695, "9341": 695, "440381589616374": 695, "8830": 695, "842571548495662": 695, "9697": 695, "903118067908503": 695, "9827": 695, "111622075051688": 695, "9831": 695, "0830953684446": 695, "9576": 695, "9854616429676213": 695, "9835": 695, "4264549282564225": 695, "9710": 695, "9197530722861613": 695, "9712": 695, "200869972915589": 695, "9840": 695, "09137020169652232": 695, "9841": 695, "8407772816828": 695, "9969": 695, "621699149701599": 695, "9715": 695, "636078998069104": 695, "9844": 695, "539408889665578": 695, "9590": 695, "63776997467301": 695, "9718": 695, "232380223582725": 695, "9978": 695, "28855768031374": 695, "9980": 695, "985192742289772": 695, "360114809028974": 695, "525525739724532": 695, "orchestr": 696, "cohes": 696, "ingest": 696, "decent": 696, "dayofweek": 696, "expens": 696, "cudf_df": 696, "persist": 696, "visual": 696, "comprehens": 696, "track": 696, "certainli": 696, "slight": 696, "inconsist": 696, "tracker": 696, "report": [696, 704], "reus": 696, "newer": 696, "mislead": [696, 697], "frustrat": 696, "apolog": 696, "uint32": [697, 701], "durat": 697, "decimal32dtyp": 697, "decimal64dtyp": 697, "decimal128dtyp": 697, "023": 697, "max_precis": 697, "decimal128": [697, 701], "psr": 697, "pq": 697, "exclus": 698, "nuisanc": 698, "gb1": 698, "gb2": 698, "gb3": 698, "extern": 698, "penalti": 698, "disambigu": 698, "ok": 698, "corr": 698, "866025": 698, "idxmin": 698, "idxmax": 698, "nuniqu": 698, "nth": 698, "cov": 698, "randomdata": 699, "box": 699, "broader": 699, "varieti": 699, "devicendarrai": 699, "offer": 699, "const": 699, "unari": [699, 704], "capabl": 699, "singleton": 699, "f_null_sensit": 699, "grid": 699, "in_col": 699, "out_col": 699, "guard": 699, "cuda_array_interfac": 699, "963": 699, "9630": 699, "977": 699, "1026": 699, "980": 699, "9770": 699, "1048": 699, "1019": 699, "10480": 699, "1078": 699, "960": 699, "985": 699, "10780": 699, "979": 699, "982": 699, "1011": 699, "9790": 699, "theoret": 699, "potenti": 699, "spot": 699, "area": 699, "pipelin": 699, "job": 699, "entrypoint": 699, "onto": 699, "fulfil": 699, "ultim": 699, "428571429": 699, "fairli": 699, "streamlin": 699, "walk": 699, "conditional_add": 699, "heart": 699, "readi": 699, "successfulli": 699, "pessimist": 699, "explor": 699, "gpu_add": 699, "matter": 699, "1968": 699, "1961": 699, "propog": 699, "slide": 699, "answer": 699, "stock": 699, "mathemat": 699, "example_func": 699, "65": 699, "549834435": 699, "615773106": 699, "681145748": 699, "745966692": 699, "810249676": 699, "874007874": 699, "937253933": 699, "apply_group": 699, "drawn": 699, "691674": 699, "dan": 699, "958380": 699, "480099": 699, "729580": 699, "473370": 699, "xavier": 699, "767454": 699, "067479": 699, "380205": 699, "970850": 699, "sarah": 699, "342905": 699, "rolling_avg_": 699, "rolling_avg": 699, "win_siz": 699, "801430": 699, "632337": 699, "081887": 699, "933157": 699, "quinn": 699, "420826": 699, "184805": 699, "702013": 699, "837494": 699, "wendi": 699, "057540": 699, "401733": 699, "913899": 699, "ursula": 699, "466252": 699, "009502": 699, "725581": 699, "405245": 699, "271319": 699, "multiply_by_5": 699, "empty_lik": 699, "nondecim": 699, "github": [699, 701], "properli": 699, "lot": 699, "hopefulli": 699, "feel": 699, "histogram": 700, "tip": 700, "magnum": 700, "gpudirect": 700, "integr": 700, "nvcomp": 700, "interweav": 700, "writer\u00b9": 701, "reader\u00b9": 701, "uint16": 701, "decimal32": 701, "decimal64": 701, "\u00b9": 701, "gd": 701, "dma": 701, "transfer": 701, "bounc": 701, "sdk": 701, "download": 701, "toolkit": 701, "libcudf_cufile_polici": 701, "kvikio": 701, "rapidsai": 701, "read_avro": 701, "libcudf_cufile_thread_count": 701, "libcudf_cufile_slice_s": 701, "4mb": 701, "libcudf_nvcomp_polici": 701, "deem": 701, "whenev": 701, "deflat": 701, "referenc": 702, "mind": 702, "20120101": 702, "cumprod": 702, "prod": 702, "wish": 702, "dff": 702, "randn": 702, "141326": 702, "025052": 702, "009415": 702, "578327": 702, "155470": 702, "138444": 702, "680860": 702, "110731": 702, "220937": 702, "184934": 702, "513565": 702, "564378": 702, "216305": 702, "117368": 702, "456806": 702, "597794": 702, "047292": 702, "647043": 702, "126043": 702, "179262": 702, "230851": 702, "174966": 702, "756328": 702, "040815": 702, "074036": 702, "172516": 702, "1186": 702, "silenc": 702, "dot": 702, "442167308": 702, "676699326": 702, "208228543": 702, "425947109": 702, "df00": 702, "442167": 702, "676699": 702, "208229": 702, "425947": 702, "complement": 703, "behaviour": 704, "resid": 704, "extrem": 704, "poor": 704, "vast": 704, "accomplish": 704, "742": 704, "694": 704, "840": 704, "459": 704, "525": 704, "442": 704, "363": 704, "666": 704, "643": 704, "631": 704, "906": 704, "640": 704, "impact": 704, "compatibilti": 704, "impos": 704}, "objects": {"cudf": [[0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [184, 0, 1, "", "DatetimeIndex"], [203, 0, 1, "", "Float64Index"], [204, 0, 1, "", "Grouper"], [205, 0, 1, "", "Index"], [253, 0, 1, "", "Int64Index"], [254, 0, 1, "", "IntervalIndex"], [258, 0, 1, "", "MultiIndex"], [271, 0, 1, "", "RangeIndex"], [272, 0, 1, "", "Series"], [447, 0, 1, "", "TimedeltaIndex"], [456, 0, 1, "", "UInt64Index"], [457, 3, 1, "", "concat"], [647, 3, 1, "", "cut"], [648, 3, 1, "", "describe_option"], [649, 3, 1, "", "from_dlpack"], [650, 3, 1, "", "get_dummies"], [651, 3, 1, "", "get_option"], [656, 3, 1, "", "melt"], [657, 3, 1, "", "pivot"], [658, 3, 1, "", "read_avro"], [659, 3, 1, "", "read_csv"], [660, 3, 1, "", "read_feather"], [661, 3, 1, "", "read_hdf"], [662, 3, 1, "", "read_json"], [663, 3, 1, "", "read_orc"], [664, 3, 1, "", "read_parquet"], [665, 3, 1, "", "read_text"], [666, 3, 1, "", "set_option"], [671, 3, 1, "", "to_datetime"], [672, 3, 1, "", "to_numeric"], [673, 3, 1, "", "unstack"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 1, 1, "", "empty"], [49, 2, 1, "", "eq"], [50, 2, 1, "", "equals"], [51, 2, 1, "", "eval"], [52, 2, 1, "", "explode"], [53, 2, 1, "", "ffill"], [54, 2, 1, "", "fillna"], [55, 2, 1, "", "first"], [56, 2, 1, "", "floordiv"], [57, 2, 1, "", "from_arrow"], [58, 2, 1, "", "from_pandas"], [59, 2, 1, "", "from_records"], [60, 2, 1, "", "ge"], [61, 2, 1, "", "groupby"], [62, 2, 1, "", "gt"], [63, 2, 1, "", "hash_values"], [64, 2, 1, "", "head"], [65, 2, 1, "", "host_deserialize"], [66, 2, 1, "", "host_serialize"], [67, 1, 1, "", "iat"], [68, 1, 1, "", "iloc"], [69, 1, 1, "", "index"], [70, 2, 1, "", "info"], [71, 2, 1, "", "insert"], [72, 2, 1, "", "interleave_columns"], [73, 2, 1, "", "interpolate"], [74, 2, 1, "", "isin"], [75, 2, 1, "", "isna"], [76, 2, 1, "", "isnull"], [77, 2, 1, "", "items"], [78, 2, 1, "", "iterrows"], [79, 2, 1, "", "itertuples"], [80, 2, 1, "", "join"], [81, 2, 1, "", "keys"], [82, 2, 1, "", "kurt"], [83, 2, 1, "", "kurtosis"], [84, 2, 1, "", "last"], [85, 2, 1, "", "le"], [86, 1, 1, "", "loc"], [87, 2, 1, "", "lt"], [88, 2, 1, "", "mask"], [89, 2, 1, "", "max"], [90, 2, 1, "", "mean"], [91, 2, 1, "", "median"], [92, 2, 1, "", "melt"], [93, 2, 1, "", "memory_usage"], [94, 2, 1, "", "merge"], [95, 2, 1, "", "min"], [96, 2, 1, "", "mod"], [97, 2, 1, "", "mode"], [98, 2, 1, "", "mul"], [99, 2, 1, "", "multiply"], [100, 2, 1, "", "nans_to_nulls"], [101, 1, 1, "", "ndim"], [102, 2, 1, "", "ne"], [103, 2, 1, "", "nlargest"], [104, 2, 1, "", "notna"], [105, 2, 1, "", "notnull"], [106, 2, 1, "", "nsmallest"], [107, 2, 1, "", "nunique"], [108, 2, 1, "", "pad"], [109, 2, 1, "", "partition_by_hash"], [110, 2, 1, "", "pct_change"], [111, 2, 1, "", "pipe"], [112, 2, 1, "", "pivot"], [113, 2, 1, "", "pop"], [114, 2, 1, "", "pow"], [115, 2, 1, "", "prod"], [116, 2, 1, "", "product"], [117, 2, 1, "", "quantile"], [118, 2, 1, "", "quantiles"], [119, 2, 1, "", "query"], [120, 2, 1, "", "radd"], [121, 2, 1, "", "rank"], [122, 2, 1, "", "rdiv"], [123, 2, 1, "", "reindex"], [124, 2, 1, "", "rename"], [125, 2, 1, "", "repeat"], [126, 2, 1, "", "replace"], [127, 2, 1, "", "resample"], [128, 2, 1, "", "reset_index"], [129, 2, 1, "", "rfloordiv"], [130, 2, 1, "", "rmod"], [131, 2, 1, "", "rmul"], [132, 2, 1, "", "rolling"], [133, 2, 1, "", "round"], [134, 2, 1, "", "rpow"], [135, 2, 1, "", "rsub"], [136, 2, 1, "", "rtruediv"], [137, 2, 1, "", "sample"], [138, 2, 1, "", "scale"], [139, 2, 1, "", "scatter_by_map"], [140, 2, 1, "", "searchsorted"], [141, 2, 1, "", "select_dtypes"], [142, 2, 1, "", "serialize"], [143, 2, 1, "", "set_index"], [144, 1, 1, "", "shape"], [145, 2, 1, "", "shift"], [146, 1, 1, "", "size"], [147, 2, 1, "", "skew"], [148, 2, 1, "", "sort_index"], [149, 2, 1, "", "sort_values"], [150, 2, 1, "", "stack"], [151, 2, 1, "", "std"], [152, 2, 1, "", "sub"], [153, 2, 1, "", "subtract"], [154, 2, 1, "", "sum"], [155, 2, 1, "", "sum_of_squares"], [156, 2, 1, "", "swaplevel"], [157, 2, 1, "", "tail"], [158, 2, 1, "", "take"], [159, 2, 1, "", "tile"], [160, 2, 1, "", "to_arrow"], [161, 2, 1, "", "to_csv"], [162, 2, 1, "", "to_cupy"], [163, 2, 1, "", "to_dict"], [164, 2, 1, "", "to_dlpack"], [165, 2, 1, "", "to_feather"], [166, 2, 1, "", "to_hdf"], [167, 2, 1, "", "to_json"], [168, 2, 1, "", "to_numpy"], [169, 2, 1, "", "to_orc"], [170, 2, 1, "", "to_pandas"], [171, 2, 1, "", "to_parquet"], [172, 2, 1, "", "to_records"], [173, 2, 1, "", "to_string"], [174, 2, 1, "", "to_struct"], [175, 2, 1, "", "transpose"], [176, 2, 1, "", "truediv"], [177, 2, 1, "", "unstack"], [178, 2, 1, "", "update"], [179, 2, 1, "", "value_counts"], [180, 1, 1, "", "values"], [181, 1, 1, "", "values_host"], [182, 2, 1, "", "var"], [183, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[185, 2, 1, "", "ceil"], [186, 1, 1, "", "day"], [187, 1, 1, "", "day_of_year"], [188, 1, 1, "", "dayofweek"], [189, 1, 1, "", "dayofyear"], [190, 2, 1, "", "floor"], [191, 1, 1, "", "hour"], [192, 1, 1, "", "is_leap_year"], [193, 2, 1, "", "isocalendar"], [194, 1, 1, "", "minute"], [195, 1, 1, "", "month"], [196, 1, 1, "", "quarter"], [197, 2, 1, "", "round"], [198, 1, 1, "", "second"], [199, 2, 1, "", "to_frame"], [200, 2, 1, "", "to_series"], [201, 1, 1, "", "weekday"], [202, 1, 1, "", "year"]], "cudf.Grouper": [[204, 2, 1, "", "__init__"]], "cudf.Index": [[206, 2, 1, "", "any"], [207, 2, 1, "", "append"], [208, 2, 1, "", "copy"], [209, 2, 1, "", "deserialize"], [210, 2, 1, "", "device_deserialize"], [211, 2, 1, "", "device_serialize"], [212, 2, 1, "", "difference"], [213, 2, 1, "", "drop_duplicates"], [214, 2, 1, "", "dropna"], [215, 2, 1, "", "fillna"], [216, 2, 1, "", "from_arrow"], [217, 2, 1, "", "from_pandas"], [218, 2, 1, "", "get_level_values"], [219, 2, 1, "", "get_loc"], [220, 2, 1, "", "get_slice_bound"], [221, 1, 1, "", "has_duplicates"], [222, 2, 1, "", "host_deserialize"], [223, 2, 1, "", "host_serialize"], [224, 2, 1, "", "intersection"], [225, 2, 1, "", "is_boolean"], [226, 2, 1, "", "is_categorical"], [227, 2, 1, "", "is_floating"], [228, 2, 1, "", "is_integer"], [229, 2, 1, "", "is_interval"], [230, 1, 1, "", "is_monotonic"], [231, 1, 1, "", "is_monotonic_decreasing"], [232, 1, 1, "", "is_monotonic_increasing"], [233, 2, 1, "", "is_numeric"], [234, 2, 1, "", "is_object"], [235, 2, 1, "", "isin"], [236, 2, 1, "", "join"], [237, 1, 1, "", "names"], [238, 1, 1, "", "nlevels"], [239, 2, 1, "", "rename"], [240, 2, 1, "", "repeat"], [241, 2, 1, "", "serialize"], [242, 2, 1, "", "set_names"], [243, 1, 1, "", "size"], [244, 2, 1, "", "sort_values"], [245, 2, 1, "", "take"], [246, 2, 1, "", "to_dlpack"], [247, 2, 1, "", "to_frame"], [248, 2, 1, "", "to_pandas"], [249, 2, 1, "", "to_series"], [250, 2, 1, "", "union"], [251, 2, 1, "", "unique"], [252, 1, 1, "", "values"]], "cudf.IntervalIndex": [[254, 2, 1, "", "__init__"], [255, 2, 1, "", "from_breaks"], [256, 2, 1, "", "get_loc"], [257, 1, 1, "", "values"]], "cudf.MultiIndex": [[259, 1, 1, "", "codes"], [260, 2, 1, "", "droplevel"], [261, 2, 1, "", "from_arrow"], [262, 2, 1, "", "from_frame"], [263, 2, 1, "", "from_product"], [264, 2, 1, "", "from_tuples"], [265, 2, 1, "", "get_level_values"], [266, 2, 1, "", "get_loc"], [267, 1, 1, "", "levels"], [268, 1, 1, "", "names"], [269, 1, 1, "", "nlevels"], [270, 2, 1, "", "to_frame"]], "cudf.Series": [[273, 1, 1, "", "T"], [274, 2, 1, "", "__array__"], [275, 2, 1, "", "__iter__"], [276, 2, 1, "", "abs"], [277, 2, 1, "", "add"], [278, 2, 1, "", "add_prefix"], [279, 2, 1, "", "add_suffix"], [280, 2, 1, "", "all"], [281, 2, 1, "", "any"], [282, 2, 1, "", "append"], [283, 2, 1, "", "apply"], [284, 2, 1, "", "applymap"], [285, 2, 1, "", "argsort"], [286, 2, 1, "", "astype"], [287, 2, 1, "", "autocorr"], [288, 1, 1, "", "axes"], [289, 2, 1, "", "backfill"], [290, 2, 1, "", "between"], [291, 2, 1, "", "bfill"], [292, 1, 1, "", "cat"], [293, 2, 1, "", "clip"], [294, 2, 1, "", "copy"], [295, 2, 1, "", "corr"], [296, 2, 1, "", "count"], [297, 2, 1, "", "cov"], [298, 2, 1, "", "cummax"], [299, 2, 1, "", "cummin"], [300, 2, 1, "", "cumprod"], [301, 2, 1, "", "cumsum"], [302, 1, 1, "", "data"], [303, 2, 1, "", "describe"], [304, 2, 1, "", "deserialize"], [305, 2, 1, "", "device_deserialize"], [306, 2, 1, "", "device_serialize"], [307, 2, 1, "", "diff"], [308, 2, 1, "", "digitize"], [309, 2, 1, "", "div"], [310, 2, 1, "", "divide"], [311, 2, 1, "", "dot"], [312, 2, 1, "", "drop"], [313, 2, 1, "", "drop_duplicates"], [314, 2, 1, "", "dropna"], [315, 1, 1, "", "dt"], [316, 1, 1, "", "dtype"], [317, 1, 1, "", "empty"], [318, 2, 1, "", "eq"], [319, 2, 1, "", "equals"], [320, 2, 1, "", "explode"], [321, 2, 1, "", "factorize"], [322, 2, 1, "", "ffill"], [323, 2, 1, "", "fillna"], [324, 2, 1, "", "first"], [325, 2, 1, "", "floordiv"], [326, 2, 1, "", "from_arrow"], [327, 2, 1, "", "from_categorical"], [328, 2, 1, "", "from_masked_array"], [329, 2, 1, "", "from_pandas"], [330, 2, 1, "", "ge"], [331, 2, 1, "", "groupby"], [332, 2, 1, "", "gt"], [333, 1, 1, "", "has_nulls"], [334, 2, 1, "", "hash_values"], [335, 2, 1, "", "head"], [336, 2, 1, "", "host_deserialize"], [337, 2, 1, "", "host_serialize"], [338, 1, 1, "", "iloc"], [339, 1, 1, "", "index"], [340, 2, 1, "", "interpolate"], [341, 1, 1, "", "is_monotonic"], [342, 1, 1, "", "is_monotonic_decreasing"], [343, 1, 1, "", "is_monotonic_increasing"], [344, 1, 1, "", "is_unique"], [345, 2, 1, "", "isin"], [346, 2, 1, "", "isna"], [347, 2, 1, "", "isnull"], [348, 2, 1, "", "items"], [349, 2, 1, "", "iteritems"], [350, 2, 1, "", "keys"], [351, 2, 1, "", "kurt"], [352, 2, 1, "", "kurtosis"], [353, 2, 1, "", "last"], [354, 2, 1, "", "le"], [355, 1, 1, "", "list"], [356, 1, 1, "", "loc"], [357, 2, 1, "", "lt"], [358, 2, 1, "", "map"], [359, 2, 1, "", "mask"], [360, 2, 1, "", "max"], [361, 2, 1, "", "mean"], [362, 2, 1, "", "median"], [363, 2, 1, "", "memory_usage"], [364, 2, 1, "", "min"], [365, 2, 1, "", "mod"], [366, 2, 1, "", "mode"], [367, 2, 1, "", "mul"], [368, 2, 1, "", "multiply"], [369, 1, 1, "", "name"], [370, 2, 1, "", "nans_to_nulls"], [371, 1, 1, "", "ndim"], [372, 2, 1, "", "ne"], [373, 2, 1, "", "nlargest"], [374, 2, 1, "", "notna"], [375, 2, 1, "", "notnull"], [376, 2, 1, "", "nsmallest"], [377, 1, 1, "", "null_count"], [378, 1, 1, "", "nullable"], [379, 1, 1, "", "nullmask"], [380, 2, 1, "", "nunique"], [381, 2, 1, "", "pad"], [382, 2, 1, "", "pct_change"], [383, 2, 1, "", "pipe"], [384, 2, 1, "", "pow"], [385, 2, 1, "", "prod"], [386, 2, 1, "", "product"], [387, 2, 1, "", "quantile"], [388, 2, 1, "", "radd"], [389, 2, 1, "", "rank"], [390, 2, 1, "", "rdiv"], [391, 2, 1, "", "reindex"], [392, 2, 1, "", "rename"], [393, 2, 1, "", "repeat"], [394, 2, 1, "", "replace"], [395, 2, 1, "", "resample"], [396, 2, 1, "", "reset_index"], [397, 2, 1, "", "rfloordiv"], [398, 2, 1, "", "rmod"], [399, 2, 1, "", "rmul"], [400, 2, 1, "", "rolling"], [401, 2, 1, "", "round"], [402, 2, 1, "", "rpow"], [403, 2, 1, "", "rsub"], [404, 2, 1, "", "rtruediv"], [405, 2, 1, "", "sample"], [406, 2, 1, "", "scale"], [407, 2, 1, "", "searchsorted"], [408, 2, 1, "", "serialize"], [409, 1, 1, "", "shape"], [410, 2, 1, "", "shift"], [411, 1, 1, "", "size"], [412, 2, 1, "", "skew"], [413, 2, 1, "", "sort_index"], [414, 2, 1, "", "sort_values"], [415, 2, 1, "", "std"], [416, 1, 1, "", "str"], [417, 1, 1, "", "struct"], [418, 2, 1, "", "sub"], [419, 2, 1, "", "subtract"], [420, 2, 1, "", "sum"], [421, 2, 1, "", "sum_of_squares"], [422, 2, 1, "", "tail"], [423, 2, 1, "", "take"], [424, 2, 1, "", "tile"], [425, 2, 1, "", "to_arrow"], [426, 2, 1, "", "to_cupy"], [427, 2, 1, "", "to_dict"], [428, 2, 1, "", "to_dlpack"], [429, 2, 1, "", "to_frame"], [430, 2, 1, "", "to_hdf"], [431, 2, 1, "", "to_json"], [432, 2, 1, "", "to_list"], [433, 2, 1, "", "to_numpy"], [434, 2, 1, "", "to_pandas"], [435, 2, 1, "", "to_string"], [436, 2, 1, "", "tolist"], [437, 2, 1, "", "transpose"], [438, 2, 1, "", "truediv"], [439, 2, 1, "", "unique"], [440, 2, 1, "", "update"], [441, 1, 1, "", "valid_count"], [442, 2, 1, "", "value_counts"], [443, 1, 1, "", "values"], [444, 1, 1, "", "values_host"], [445, 2, 1, "", "var"], [446, 2, 1, "", "where"]], "cudf.TimedeltaIndex": [[448, 1, 1, "", "components"], [449, 1, 1, "", "days"], [450, 1, 1, "", "inferred_freq"], [451, 1, 1, "", "microseconds"], [452, 1, 1, "", "nanoseconds"], [453, 1, 1, "", "seconds"], [454, 2, 1, "", "to_frame"], [455, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[458, 2, 1, "", "add_categories"], [459, 2, 1, "", "as_ordered"], [460, 2, 1, "", "as_unordered"], [461, 1, 1, "", "categories"], [462, 1, 1, "", "codes"], [463, 1, 1, "", "ordered"], [464, 2, 1, "", "remove_categories"], [465, 2, 1, "", "reorder_categories"], [466, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[467, 2, 1, "", "concat"], [468, 2, 1, "", "contains"], [469, 2, 1, "", "get"], [470, 2, 1, "", "len"], [471, 2, 1, "", "sort_values"], [472, 2, 1, "", "take"], [473, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[474, 2, 1, "", "byte_count"], [475, 2, 1, "", "capitalize"], [476, 2, 1, "", "cat"], [477, 2, 1, "", "center"], [478, 2, 1, "", "character_ngrams"], [479, 2, 1, "", "character_tokenize"], [480, 2, 1, "", "code_points"], [481, 2, 1, "", "contains"], [482, 2, 1, "", "count"], [483, 2, 1, "", "detokenize"], [484, 2, 1, "", "edit_distance"], [485, 2, 1, "", "edit_distance_matrix"], [486, 2, 1, "", "endswith"], [487, 2, 1, "", "extract"], [488, 2, 1, "", "filter_alphanum"], [489, 2, 1, "", "filter_characters"], [490, 2, 1, "", "filter_tokens"], [491, 2, 1, "", "find"], [492, 2, 1, "", "findall"], [493, 2, 1, "", "get"], [494, 2, 1, "", "get_json_object"], [495, 2, 1, "", "hex_to_int"], [496, 2, 1, "", "htoi"], [497, 2, 1, "", "index"], [498, 2, 1, "", "insert"], [499, 2, 1, "", "ip2int"], [500, 2, 1, "", "ip_to_int"], [501, 2, 1, "", "is_consonant"], [502, 2, 1, "", "is_vowel"], [503, 2, 1, "", "isalnum"], [504, 2, 1, "", "isalpha"], [505, 2, 1, "", "isdecimal"], [506, 2, 1, "", "isdigit"], [507, 2, 1, "", "isempty"], [508, 2, 1, "", "isfloat"], [509, 2, 1, "", "ishex"], [510, 2, 1, "", "isinteger"], [511, 2, 1, "", "isipv4"], [512, 2, 1, "", "islower"], [513, 2, 1, "", "isnumeric"], [514, 2, 1, "", "isspace"], [515, 2, 1, "", "istimestamp"], [516, 2, 1, "", "istitle"], [517, 2, 1, "", "isupper"], [518, 2, 1, "", "join"], [519, 2, 1, "", "len"], [520, 2, 1, "", "ljust"], [521, 2, 1, "", "lower"], [522, 2, 1, "", "lstrip"], [523, 2, 1, "", "match"], [524, 2, 1, "", "ngrams"], [525, 2, 1, "", "ngrams_tokenize"], [526, 2, 1, "", "normalize_characters"], [527, 2, 1, "", "normalize_spaces"], [528, 2, 1, "", "pad"], [529, 2, 1, "", "partition"], [530, 2, 1, "", "porter_stemmer_measure"], [531, 2, 1, "", "repeat"], [532, 2, 1, "", "replace"], [533, 2, 1, "", "replace_tokens"], [534, 2, 1, "", "replace_with_backrefs"], [535, 2, 1, "", "rfind"], [536, 2, 1, "", "rindex"], [537, 2, 1, "", "rjust"], [538, 2, 1, "", "rpartition"], [539, 2, 1, "", "rsplit"], [540, 2, 1, "", "rstrip"], [541, 2, 1, "", "slice"], [542, 2, 1, "", "slice_from"], [543, 2, 1, "", "slice_replace"], [544, 2, 1, "", "split"], [545, 2, 1, "", "startswith"], [546, 2, 1, "", "strip"], [547, 2, 1, "", "swapcase"], [548, 2, 1, "", "title"], [549, 2, 1, "", "token_count"], [550, 2, 1, "", "tokenize"], [551, 2, 1, "", "translate"], [552, 2, 1, "", "upper"], [553, 2, 1, "", "url_decode"], [554, 2, 1, "", "url_encode"], [555, 2, 1, "", "wrap"], [556, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[557, 2, 1, "", "explode"], [558, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[559, 2, 1, "", "__iter__"], [560, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[561, 2, 1, "", "aggregate"], [562, 2, 1, "", "backfill"], [563, 2, 1, "", "bfill"], [564, 2, 1, "", "count"], [565, 2, 1, "", "cumcount"], [566, 2, 1, "", "cummax"], [567, 2, 1, "", "cummin"], [568, 2, 1, "", "cumsum"], [569, 2, 1, "", "describe"], [570, 2, 1, "", "diff"], [571, 2, 1, "", "ffill"], [572, 2, 1, "", "fillna"], [573, 2, 1, "", "idxmax"], [574, 2, 1, "", "idxmin"], [575, 2, 1, "", "nunique"], [576, 2, 1, "", "pad"], [577, 2, 1, "", "quantile"], [578, 2, 1, "", "shift"], [579, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[580, 2, 1, "", "agg"], [581, 2, 1, "", "apply"], [582, 2, 1, "", "backfill"], [583, 2, 1, "", "bfill"], [584, 2, 1, "", "corr"], [585, 2, 1, "", "count"], [586, 2, 1, "", "cov"], [587, 2, 1, "", "cumcount"], [588, 2, 1, "", "cummax"], [589, 2, 1, "", "cummin"], [590, 2, 1, "", "cumsum"], [591, 2, 1, "", "ffill"], [592, 2, 1, "", "max"], [593, 2, 1, "", "mean"], [594, 2, 1, "", "median"], [595, 2, 1, "", "min"], [596, 2, 1, "", "nth"], [597, 2, 1, "", "pad"], [598, 2, 1, "", "pipe"], [599, 2, 1, "", "prod"], [600, 2, 1, "", "size"], [601, 2, 1, "", "std"], [602, 2, 1, "", "sum"], [603, 2, 1, "", "transform"], [604, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[605, 2, 1, "", "aggregate"], [606, 2, 1, "", "nunique"], [607, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[608, 2, 1, "", "ceil"], [609, 1, 1, "", "day"], [610, 1, 1, "", "day_of_year"], [611, 1, 1, "", "dayofweek"], [612, 1, 1, "", "dayofyear"], [613, 1, 1, "", "days_in_month"], [614, 2, 1, "", "floor"], [615, 1, 1, "", "hour"], [616, 1, 1, "", "is_leap_year"], [617, 1, 1, "", "is_month_end"], [618, 1, 1, "", "is_month_start"], [619, 1, 1, "", "is_quarter_end"], [620, 1, 1, "", "is_quarter_start"], [621, 1, 1, "", "is_year_end"], [622, 1, 1, "", "is_year_start"], [623, 2, 1, "", "isocalendar"], [624, 1, 1, "", "minute"], [625, 1, 1, "", "month"], [626, 1, 1, "", "quarter"], [627, 2, 1, "", "round"], [628, 1, 1, "", "second"], [629, 2, 1, "", "strftime"], [630, 1, 1, "", "weekday"], [631, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[632, 1, 1, "", "components"], [633, 1, 1, "", "days"], [634, 1, 1, "", "microseconds"], [635, 1, 1, "", "nanoseconds"], [636, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[637, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[638, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[639, 2, 1, "", "apply"], [640, 2, 1, "", "count"], [641, 2, 1, "", "max"], [642, 2, 1, "", "mean"], [643, 2, 1, "", "min"], [644, 2, 1, "", "std"], [645, 2, 1, "", "sum"], [646, 2, 1, "", "var"]], "cudf.io.parquet": [[652, 0, 1, "", "ParquetDatasetWriter"], [655, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[653, 2, 1, "", "close"], [654, 2, 1, "", "write_table"]], "cudf.testing.testing": [[667, 3, 1, "", "assert_column_equal"], [668, 3, 1, "", "assert_frame_equal"], [669, 3, 1, "", "assert_index_equal"], [670, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 681, 686, 688, 692, 693, 695, 696, 699, 702, 704], "categoricalindex": [0, 1, 2, 3, 679], "categori": [1, 461], "code": [2, 259, 462, 687], "equal": [3, 50, 319], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 674, 695, 699], "t": [5, 273], "__iter__": [6, 275, 559], "ab": [7, 276], "add": [8, 277], "add_prefix": [9, 278], "add_suffix": [10, 279], "agg": [11, 580], "all": [12, 280, 690], "ani": [13, 206, 281], "append": [14, 207, 282], "appli": [15, 283, 581, 639, 698, 699, 704], "apply_chunk": [16, 699], "apply_row": [17, 699], "applymap": [18, 284, 693], "argsort": [19, 285], "assign": 20, "astyp": [21, 286], "ax": [23, 288], "backfil": [24, 289, 562, 582], "bfill": [25, 291, 563, 583], "clip": [26, 293], "column": [27, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 690, 704], "copi": [28, 208, 294], "corr": [29, 295, 584], "count": [30, 296, 482, 564, 585, 640], "cov": [31, 297, 586], "cummax": [32, 298, 566, 588], "cummin": [33, 299, 567, 589], "cumprod": [34, 300], "cumsum": [35, 301, 568, 590], "describ": [36, 303, 569], "deseri": [37, 209, 304], "device_deseri": [38, 210, 305], "device_seri": [39, 211, 306], "diff": [40, 307, 570], "div": [41, 309], "divid": [42, 310], "dot": [43, 311], "drop": [44, 312, 702], "drop_dupl": [45, 213, 313], "dropna": [46, 214, 314, 702], "dtype": [47, 316, 701, 702], "empti": [48, 317], "eq": [49, 318], "eval": 51, "explod": [52, 320, 557], "ffill": [53, 322, 571, 591], "fillna": [54, 215, 323, 572, 702], "first": [55, 324], "floordiv": [56, 325], "from_arrow": [57, 216, 261, 326], "from_panda": [58, 217, 329], "from_record": 59, "ge": [60, 330], "groupbi": [61, 331, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 674, 677, 682, 698, 699, 702], "gt": [62, 332], "hash_valu": [63, 334], "head": [64, 335], "host_deseri": [65, 222, 336], "host_seri": [66, 223, 337], "iat": 67, "iloc": [68, 338], "index": [69, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 339, 497, 674, 677, 679, 682, 690, 693, 698], "info": 70, "insert": [71, 498, 702], "interleave_column": 72, "interpol": [73, 340], "isin": [74, 235, 345], "isna": [75, 346], "isnul": [76, 347], "item": [77, 348], "iterrow": 78, "itertupl": 79, "join": [80, 236, 518, 674, 679, 682, 693], "kei": [81, 350], "kurt": [82, 351], "kurtosi": [83, 352], "last": [84, 353], "le": [85, 354], "loc": [86, 356], "lt": [87, 357], "mask": [88, 359], "max": [89, 360, 592, 641], "mean": [90, 361, 593, 642], "median": [91, 362, 594], "melt": [92, 656], "memory_usag": [93, 363], "merg": [94, 674, 682], "min": [95, 364, 595, 643], "mod": [96, 365], "mode": [97, 366], "mul": [98, 367], "multipli": [99, 368], "nans_to_nul": [100, 370], "ndim": [101, 371], "ne": [102, 372], "nlargest": [103, 373], "notna": [104, 374], "notnul": [105, 375], "nsmallest": [106, 376], "nuniqu": [107, 380, 575, 606], "pad": [108, 381, 528, 576, 597], "partition_by_hash": 109, "pct_chang": [110, 382], "pipe": [111, 383, 598], "pivot": [112, 657], "pop": 113, "pow": [114, 384], "prod": [115, 385, 599], "product": [116, 386, 702], "quantil": [117, 118, 387, 577], "panda": [117, 123, 183, 266, 391, 446, 572, 581, 686, 687, 688, 693, 694, 704], "compat": [117, 123, 183, 266, 391, 446, 572, 581, 679, 687, 694], "note": [117, 123, 183, 266, 391, 446, 572, 581, 694, 697], "queri": 119, "radd": [120, 388], "rank": [121, 389], "rdiv": [122, 390], "reindex": [123, 391, 674, 682], "renam": [124, 239, 392], "repeat": [125, 240, 393, 531], "replac": [126, 394, 532, 702], "resampl": [127, 395], "reset_index": [128, 396], "rfloordiv": [129, 397], "rmod": [130, 398], "rmul": [131, 399], "roll": [132, 400, 639, 640, 641, 642, 643, 644, 645, 646, 685, 698, 699], "round": [133, 197, 401, 627], "rpow": [134, 402], "rsub": [135, 403], "rtruediv": [136, 404], "sampl": [137, 405], "scale": [138, 406], "scatter_by_map": 139, "searchsort": [140, 407], "select_dtyp": 141, "serial": [142, 241, 408, 674, 682], "set_index": 143, "shape": [144, 409], "shift": [145, 410, 578], "size": [146, 243, 411, 579, 600], "skew": [147, 412], "sort_index": [148, 413], "sort_valu": [149, 244, 414, 471], "stack": 150, "std": [151, 415, 601, 644], "sub": [152, 418], "subtract": [153, 419], "sum": [154, 420, 602, 645, 702], "sum_of_squar": [155, 421], "swaplevel": 156, "tail": [157, 422], "take": [158, 245, 423, 472], "tile": [159, 424], "to_arrow": [160, 425], "to_csv": 161, "to_cupi": [162, 426], "to_dict": [163, 427], "to_dlpack": [164, 246, 428], "to_feath": 165, "to_hdf": [166, 430], "to_json": [167, 431], "to_numpi": [168, 433], "to_orc": 169, "to_panda": [170, 248, 434], "to_parquet": 171, "to_record": 172, "to_str": [173, 435], "to_struct": 174, "transpos": [175, 437, 674, 693], "truediv": [176, 438], "unstack": [177, 673], "updat": [178, 440], "value_count": [179, 442], "valu": [180, 252, 257, 443, 679, 702, 704], "values_host": [181, 444], "var": [182, 445, 604, 646], "where": [183, 446], "datetimeindex": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 679], "ceil": [185, 608], "dai": [186, 449, 609, 633], "day_of_year": [187, 610], "dayofweek": [188, 611], "dayofyear": [189, 612], "floor": [190, 614], "hour": [191, 615], "is_leap_year": [192, 616], "isocalendar": [193, 623], "minut": [194, 624, 693], "month": [195, 625], "quarter": [196, 626], "second": [198, 453, 628, 636], "to_fram": [199, 247, 270, 429, 454], "to_seri": [200, 249, 455], "weekdai": [201, 630], "year": [202, 631], "float64index": 203, "grouper": [204, 698], "differ": [212, 701], "get_level_valu": [218, 265], "get_loc": [219, 256, 266], "get_slice_bound": 220, "has_dupl": 221, "intersect": 224, "is_boolean": 225, "is_categor": 226, "is_float": 227, "is_integ": 228, "is_interv": 229, "is_monoton": [230, 341], "is_monotonic_decreas": [231, 342], "is_monotonic_increas": [232, 343], "is_numer": 233, "is_object": 234, "name": [237, 268, 369, 687, 704], "nlevel": [238, 269], "set_nam": 242, "union": [250, 686], "uniqu": [251, 439, 473, 607], "int64index": 253, "intervalindex": [254, 255, 256, 257, 679], "from_break": 255, "multiindex": [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 679, 693], "droplevel": 260, "from_fram": 262, "from_product": 263, "from_tupl": 264, "level": [267, 675, 698, 699], "rangeindex": 271, "seri": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 674, 682, 693, 695, 699], "__array__": 274, "autocorr": 287, "between": [290, 695], "cat": [292, 476], "data": [302, 674, 675, 682, 690, 693, 697, 699, 702, 704], "digit": 308, "dt": 315, "factor": 321, "from_categor": 327, "from_masked_arrai": 328, "has_nul": 333, "is_uniqu": 344, "iteritem": 349, "list": [355, 467, 468, 469, 470, 471, 472, 473, 682, 697], "map": 358, "null_count": 377, "nullabl": [378, 699], "nullmask": 379, "str": 416, "struct": [417, 557, 558, 682, 697], "to_list": 432, "tolist": 436, "valid_count": 441, "timedeltaindex": [447, 448, 449, 450, 451, 452, 453, 454, 455, 679], "compon": [448, 632, 679], "inferred_freq": 450, "microsecond": [451, 634], "nanosecond": [452, 635], "uint64index": 456, "concat": [457, 467, 693], "core": [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646], "categor": [458, 459, 460, 461, 462, 463, 464, 465, 466, 679, 682, 693], "categoricalaccessor": [458, 459, 460, 461, 462, 463, 464, 465, 466], "add_categori": 458, "as_ord": 459, "as_unord": 460, "order": [463, 704], "remove_categori": 464, "reorder_categori": 465, "set_categori": 466, "listmethod": [467, 468, 469, 470, 471, 472, 473], "contain": [468, 481], "get": [469, 493, 693], "len": [470, 519], "string": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 682, 683, 693, 702], "stringmethod": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "byte_count": 474, "capit": 475, "center": 477, "character_ngram": 478, "character_token": 479, "code_point": 480, "detoken": 483, "edit_dist": 484, "edit_distance_matrix": 485, "endswith": 486, "extract": 487, "filter_alphanum": 488, "filter_charact": 489, "filter_token": 490, "find": 491, "findal": 492, "get_json_object": 494, "hex_to_int": 495, "htoi": 496, "ip2int": 499, "ip_to_int": 500, "is_conson": 501, "is_vowel": 502, "isalnum": 503, "isalpha": 504, "isdecim": 505, "isdigit": 506, "isempti": 507, "isfloat": 508, "ishex": 509, "isinteg": 510, "isipv4": 511, "islow": 512, "isnumer": 513, "isspac": 514, "istimestamp": 515, "istitl": 516, "isupp": 517, "ljust": 520, "lower": [521, 699], "lstrip": 522, "match": 523, "ngram": 524, "ngrams_token": 525, "normalize_charact": 526, "normalize_spac": 527, "partit": 529, "porter_stemmer_measur": 530, "replace_token": 533, "replace_with_backref": 534, "rfind": 535, "rindex": 536, "rjust": 537, "rpartit": 538, "rsplit": 539, "rstrip": 540, "slice": 541, "slice_from": 542, "slice_replac": 543, "split": 544, "startswith": 545, "strip": 546, "swapcas": 547, "titl": 548, "token_count": 549, "token": 550, "translat": 551, "upper": 552, "url_decod": 553, "url_encod": 554, "wrap": 555, "zfill": 556, "structmethod": [557, 558], "field": 558, "group": [560, 693, 698], "dataframegroupbi": [561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579], "aggreg": [561, 605, 698], "cumcount": [565, 587], "idxmax": 573, "idxmin": 574, "nth": 596, "transform": [603, 698], "seriesgroupbi": [605, 606, 607], "datetimeproperti": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631], "days_in_month": 613, "is_month_end": 617, "is_month_start": 618, "is_quarter_end": 619, "is_quarter_start": 620, "is_year_end": 621, "is_year_start": 622, "strftime": 629, "timedeltaproperti": [632, 633, 634, 635, 636], "subword_token": [637, 638], "subwordtoken": [637, 638, 684], "__call__": 638, "window": [639, 640, 641, 642, 643, 644, 645, 646, 674, 682, 685, 698, 699], "cut": 647, "describe_opt": 648, "from_dlpack": 649, "get_dummi": 650, "get_opt": 651, "io": [652, 653, 654, 655, 674, 682, 701], "parquet": [652, 653, 654, 655, 680, 693], "parquetdatasetwrit": [652, 653, 654], "close": 653, "write_t": 654, "read_parquet_metadata": 655, "read_avro": 658, "read_csv": 659, "read_feath": 660, "read_hdf": 661, "read_json": 662, "read_orc": 663, "read_parquet": 664, "read_text": 665, "set_opt": 666, "test": [667, 668, 669, 670, 676, 686], "assert_column_equ": 667, "assert_frame_equ": 668, "assert_index_equ": 669, "assert_series_equ": 670, "to_datetim": 671, "to_numer": 672, "constructor": [674, 679, 682, 684], "attribut": [674, 682], "underli": 674, "convers": [674, 675, 679, 682], "iter": [674, 677, 682, 704], "binari": [674, 682], "oper": [674, 679, 682, 693, 698, 704], "function": [674, 675, 676, 677, 682, 685, 699, 704], "applic": [674, 677, 682], "comput": [674, 677, 679, 682, 704], "descript": [674, 677, 682], "stat": [674, 677, 682, 693], "select": [674, 679, 682, 693], "label": [674, 682, 693, 702], "manipul": [674, 675, 682], "miss": [674, 679, 682, 693, 702, 704], "handl": [674, 682, 683, 687, 699], "reshap": [674, 682], "sort": [674, 679, 682], "combin": [674, 679, 682], "compar": [674, 682, 686, 688], "time": [674, 679, 682, 693], "relat": [674, 682], "gener": [675, 676, 702], "top": 675, "deal": 675, "datetimelik": [675, 682], "util": 676, "api": [678, 696], "refer": 678, "document": [678, 688, 692], "object": [679, 693, 697, 698, 702, 704], "properti": [679, 682], "modifi": 679, "memori": 679, "usag": 679, "specif": 679, "set": 679, "numer": [679, 702], "date": 679, "input": [680, 701], "output": [680, 701], "csv": [680, 693], "text": 680, "json": 680, "orc": [680, 693], "hdfstore": 680, "pytabl": 680, "hdf5": 680, "feather": 680, "avro": 680, "option": [681, 691, 703], "accessor": 682, "datetim": [682, 702], "method": [682, 693], "timedelta": 682, "benchmark": 686, "organ": 686, "run": 686, "content": [686, 692], "configur": 686, "write": [686, 688], "parametr": 686, "profil": 686, "advanc": 686, "topic": 686, "understand": 686, "benchmark_with_object": 686, "fixtur": 686, "The": [686, 690, 698], "decor": 686, "contribut": 687, "guid": [687, 689, 700], "directori": 687, "structur": 687, "file": 687, "style": 687, "deprec": 687, "remov": 687, "python": 687, "v": 687, "cython": [687, 690], "except": 687, "libcudf": 687, "docstr": 688, "publish": 688, "page": 688, "build": 688, "requir": 688, "view": [688, 693], "doc": 688, "intern": 688, "develop": [689, 696], "librari": [690, 693], "design": 690, "frame": 690, "layer": 690, "columnaccessor": 690, "type": [690, 697, 701, 704], "buffer": 690, "put": 690, "It": 690, "togeth": 690, "welcom": 692, "": 692, "indic": 692, "tabl": 692, "10": 693, "dask": [693, 696], "what": [693, 696], "ar": 693, "when": 693, "us": [693, 701], "creation": 693, "posit": 693, "boolean": 693, "histogram": 693, "convert": [693, 695], "represent": 693, "numpi": [693, 697], "arrow": 693, "In": 693, "out": 693, "perform": 693, "tip": 693, "persist": 693, "wait": 693, "interoper": 695, "cupi": [695, 699], "arrai": [695, 699], "interweav": 695, "smooth": 695, "pydata": 695, "workflow": 695, "spars": 695, "matrix": 695, "multi": 696, "gpu": 696, "work": [696, 702], "navig": 696, "support": [697, 698, 701, 704], "A": 697, "decim": 697, "nest": 697, "summari": [698, 699], "limit": [698, 704], "calcul": [698, 702], "overview": 699, "user": [699, 700], "defin": 699, "udf": 699, "addit": 699, "scalar": 699, "argument": 699, "control": 699, "custom": 699, "numba": 699, "kernel": 699, "null": [699, 702, 704], "caveat": 699, "i": 701, "o": 701, "magnum": 701, "gpudirect": 701, "storag": 701, "integr": 701, "nvcomp": 701, "current": 701, "polici": 701, "how": 702, "detect": 702, "float": [702, 704], "nan": 702, "na": 702, "fill": 702, "axi": 702, "regular": 702, "express": 702, "comparison": 704, "result": 704, "point": 704, "No": 704, "true": 704}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}})