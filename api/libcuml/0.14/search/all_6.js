var searchData=
[
  ['fit_20functions_688',['Fit functions',['../group__DecisionTreeClassifierFit.html',1,'']]],
  ['fit_20functions_689',['Fit functions',['../group__DecisionTreeRegressorFit.html',1,'']]],
  ['f_690',['f',['../unionML_1_1fil_1_1val__t.html#ad6731a4409f82a8d896b2808bcd75133',1,'ML::fil::val_t::f()'],['../namespaceUMAPAlgo_1_1Optimize.html#ad1d8470650aa6ea82693fdf61479e708',1,'UMAPAlgo::Optimize::f()']]],
  ['f_5flog_691',['f_log',['../namespaceMLCommon_1_1Functions.html#a9e147acd0440f91990415e92cf79fcca',1,'MLCommon::Functions']]],
  ['fa_692',['fa',['../structMLCommon_1_1Sparse_1_1WeakCCState.html#af7c9b256b5a20cb95bab2593adea37af',1,'MLCommon::Sparse::WeakCCState']]],
  ['factor1_693',['FACTOR1',['../bh__kernels_8h.html#a4b50b75600a4385c7affd1c82998eef2',1,'bh_kernels.h']]],
  ['factor2_694',['FACTOR2',['../bh__kernels_8h.html#ab64e4c5074162a06e839885cba787ecc',1,'bh_kernels.h']]],
  ['factor3_695',['FACTOR3',['../bh__kernels_8h.html#a996f9a6fd15089ce39bccf4143a01a50',1,'bh_kernels.h']]],
  ['factor4_696',['FACTOR4',['../bh__kernels_8h.html#a07bf054e2784d6caf726da0080fc176b',1,'bh_kernels.h']]],
  ['factor5_697',['FACTOR5',['../bh__kernels_8h.html#a48c2c174863ddcf744426fb56be31ef6',1,'bh_kernels.h']]],
  ['factor6_698',['FACTOR6',['../bh__kernels_8h.html#a09496545d22a86a5d0293a80bb1920f7',1,'bh_kernels.h']]],
  ['factor7_699',['FACTOR7',['../bh__kernels_8h.html#aa2620e251169d063885806d9faba7cbd',1,'bh_kernels.h']]],
  ['fast_5fint_5fdiv_2ecuh_700',['fast_int_div.cuh',['../fast__int__div_8cuh.html',1,'']]],
  ['fast_5fintersection_5fkernel_701',['fast_intersection_kernel',['../namespaceUMAPAlgo_1_1Supervised.html#a88e3ef31fbd051d5d410624333631f98',1,'UMAPAlgo::Supervised']]],
  ['fil_2ecu_702',['fil.cu',['../fil_8cu.html',1,'']]],
  ['fil_2eh_703',['fil.h',['../fil_8h.html',1,'']]],
  ['fill_704',['fill',['../classMLCommon_1_1Random_1_1Rng.html#ab4bf815e495b239d65292af24e8b86d1',1,'MLCommon::Random::Rng::fill()'],['../structMLCommon_1_1TxN__t.html#a28ecd134c81be5371a6880cbbffda1e2',1,'MLCommon::TxN_t::fill()'],['../structMLCommon_1_1TxN__t_3_01math___00_010_01_4.html#aeefb3b9b509336a8f72f3982367e01d6',1,'MLCommon::TxN_t&lt; math_, 0 &gt;::fill()']]],
  ['fill_5fstrided_5fpointers_5fkernel_705',['fill_strided_pointers_kernel',['../namespaceMLCommon_1_1LinAlg_1_1Batched.html#a3be0f92cde027422394bd7370a4fe09b',1,'MLCommon::LinAlg::Batched']]],
  ['fill_5fuplo_706',['fill_uplo',['../namespaceMLCommon_1_1Random.html#afc3062e2828b727d0c2b023bdbdaee9e',1,'MLCommon::Random']]],
  ['filler_707',['Filler',['../namespaceMLCommon_1_1Random.html#a12a96d8a0b5cb96107964b21ace1fae9',1,'MLCommon::Random']]],
  ['finalize_5fforecast_708',['finalize_forecast',['../namespaceMLCommon_1_1TimeSeries.html#a8ac1aaab17a31e0354e053a35511a48a',1,'MLCommon::TimeSeries']]],
  ['find_5fab_709',['find_ab',['../namespaceML.html#afb04181b9f5bbcbf551b761927a0f24d',1,'ML::find_ab()'],['../namespaceUMAPAlgo.html#a4e0aa3b051938f38b7d0d33523dd38c7',1,'UMAPAlgo::find_ab()']]],
  ['find_5fnormalization_710',['Find_Normalization',['../namespaceML_1_1TSNE.html#ad15b73f1ef85613a669b3acb6ed86d07',1,'ML::TSNE']]],
  ['find_5fnth_5foccurrence_711',['find_nth_occurrence',['../namespaceMLCommon_1_1Cache.html#a44799650192e74e6f878e6a73e4a8c8a',1,'MLCommon::Cache']]],
  ['find_5fparams_5fab_712',['find_params_ab',['../namespaceUMAPAlgo_1_1Optimize.html#a3be5260808baccf64312cae1069e28ab',1,'UMAPAlgo::Optimize']]],
  ['findentry_713',['findEntry',['../namespaceMLCommon_1_1Stats.html#a0c13fd1cacda278478cbbfda95744b6c',1,'MLCommon::Stats']]],
  ['fit_714',['fit',['../classML_1_1UMAP__API.html#ab4f3918b7a90a91c1cc2f883cd60387b',1,'ML::UMAP_API::fit(float *X, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1UMAP__API.html#a8e30b5e7d2c78a4a71d2f6000298e2db',1,'ML::UMAP_API::fit(float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1kNN.html#aa7c545ae08dee20b43ca6acf0b7b0548',1,'ML::kNN::fit()'],['../classML_1_1SVM_1_1SVC.html#ae92426856f0c995e31312fb89607f192',1,'ML::SVM::SVC::fit()'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#ab81b1298dd287982334d7f4f5e1702bf',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#a4ad1d922a8062c07de111c33d66389e7',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a953b5619e6c1971ea66b3f2b489302b5',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a5d825bcbee6657c3b71f00f8e9ae2c07',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem)'],['../classML_1_1rfClassifier.html#a8fefbdc8ed9276f5fd57310e7970d0c6',1,'ML::rfClassifier::fit()'],['../classML_1_1rfRegressor.html#a6b44dffa92f684a658f0dd8479853c1b',1,'ML::rfRegressor::fit()'],['../namespaceML_1_1kmeans.html#a0f7cb085709ff1e1919a2444054ab864',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#ac21ba59e473844151f10fe689a1ed992',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML.html#a3178043c2fb0711c827614649cd6028f',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierF *&amp;forest, float *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#af46cf0ee6ea9c998146d3102ccd01868',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierD *&amp;forest, double *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#ad45e1013123ee57f6547a791b7cb40c6',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorF *&amp;forest, float *input, int n_rows, int n_cols, float *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#aa31ee6fbdebd3e6d899e8de88b304473',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorD *&amp;forest, double *input, int n_rows, int n_cols, double *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#ad764fd7aacaefdae4073c077e4ad636a',1,'ML::fit(const cumlHandle &amp;handle, float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML.html#a96e08b2209718522d472238b3792cfb8',1,'ML::fit(const cumlHandle &amp;handle, float *X, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML_1_1HoltWinters.html#a0a558949affcb44658c2cc9b7a3ff5d5',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, float epsilon, float *data, float *level_d, float *trend_d, float *season_d, float *error_d)'],['../namespaceML_1_1HoltWinters.html#ae0a6fce4d413310d8caff01e1c89c746',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, double epsilon, double *data, double *level_d, double *trend_d, double *season_d, double *error_d)']]],
  ['fit_5fclusters_715',['fit_clusters',['../namespaceML_1_1Spectral.html#a3664770137e36d37faf2e41caa99dbdd',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, int *rows, int *cols, float *vals, int nnz, int n, int n_clusters, float eigen_tol, int *out)'],['../namespaceML_1_1Spectral.html#a34fc5e633cb7f15bca19f881b9003f52',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, long *knn_indices, float *knn_dists, int m, int n_neighbors, int n_clusters, float eigen_tol, int *out)'],['../namespaceML_1_1Spectral.html#a51218c9f85632815aba197fbfc980e48',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, float *X, int m, int n, int n_neighbors, int n_clusters, float eigen_tol, int *out)'],['../namespaceMLCommon_1_1Spectral.html#aefbb735c11cea100d3852212f1bb5b1d',1,'MLCommon::Spectral::fit_clusters(cusparseHandle_t handle, int *rows, int *cols, T *vals, int nnz, int n, int n_clusters, float eigen_tol, int *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)'],['../namespaceMLCommon_1_1Spectral.html#af1d901d412c54148bed260297ebb1826',1,'MLCommon::Spectral::fit_clusters(cusparseHandle_t handle, long *knn_indices, T *knn_dists, int m, int n_neighbors, int n_clusters, float eigen_tol, int *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)'],['../namespaceMLCommon_1_1Spectral.html#aad79b7d80cacb74169e483b398dcb545',1,'MLCommon::Spectral::fit_clusters(cusparseHandle_t handle, T *X, int m, int n, int n_neighbors, int n_clusters, float eigen_tol, int *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)']]],
  ['fit_5fembedding_716',['fit_embedding',['../namespaceML_1_1Spectral.html#a6491cb1b6ec51b8b6751853eca20ab3f',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, int *rows, int *cols, float *vals, int nnz, int n, int n_components, float *out)'],['../namespaceML_1_1Spectral.html#a8468e536b6b38f8c329051e2f6f11b4a',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, long *knn_indices, float *knn_dists, int m, int n_neighbors, int n_components, float *out)'],['../namespaceML_1_1Spectral.html#ad6ebee13f8168d8325a993168175d03f',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, float *X, int m, int n, int n_neighbors, int n_components, float *out)'],['../namespaceMLCommon_1_1Spectral.html#a83d5e3a72aa8ea99fb699bd9f446bfca',1,'MLCommon::Spectral::fit_embedding(cusparseHandle_t handle, int *rows, int *cols, T *vals, int nnz, int n, int n_components, T *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)'],['../namespaceMLCommon_1_1Spectral.html#a92413c3ba5925c6973fa5d6e89b4fb4e',1,'MLCommon::Spectral::fit_embedding(cusparseHandle_t handle, long *knn_indices, float *knn_dists, int m, int n_neighbors, int n_components, T *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)'],['../namespaceMLCommon_1_1Spectral.html#a3856e041c179226757024c5d951b769b',1,'MLCommon::Spectral::fit_embedding(cusparseHandle_t handle, T *X, int m, int n, int n_neighbors, int n_components, T *out, std::shared_ptr&lt; deviceAllocator &gt; d_alloc, cudaStream_t stream)']]],
  ['fit_5fpredict_717',['fit_predict',['../namespaceML_1_1kmeans.html#ae4ae8f0f61449ca590804e619ae7109a',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, float *centroids, int *labels, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#a035eec5377477f72d47d5ac3f74dbd86',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, double *centroids, int *labels, double &amp;inertia, int &amp;n_iter)']]],
  ['fix_5fstep_718',['fix_step',['../hw__optim_8h.html#aa7e45ba40a24079dbd7f35f8f4db48c2',1,'hw_optim.h']]],
  ['flatnode_2eh_719',['flatnode.h',['../flatnode_8h.html',1,'']]],
  ['float_720',['FLOAT',['../classMLCommon_1_1cumlCommunicator.html#a7ecf440424f1294d7ec4d5100239c254a3a89b943e32fd9e66b1d0916814036ec',1,'MLCommon::cumlCommunicator']]],
  ['float_5fscalar_721',['FLOAT_SCALAR',['../namespaceML_1_1fil.html#acce64cbc31458627350a7939f913d8dea79d2a76a5affa183d91304401423e1a5',1,'ML::fil']]],
  ['flushhashtable_722',['flushHashTable',['../namespaceMLCommon_1_1Stats.html#ac6990842a1e7d7f7e91d1b13d8ba99f5',1,'MLCommon::Stats']]],
  ['for_723',['for',['../namespaceML_1_1TSNE.html#ade251d9108c2e6c34695f53f591907a2',1,'ML::TSNE::for(int j=i+blockIdx.x *THREADS1;j&lt; N;j+=inc)'],['../namespaceML_1_1TSNE.html#afa7ff633885b71e8a5630ca7bbc596fe',1,'ML::TSNE::for(int j=THREADS1/2;j &gt; i;j/=2)'],['../namespaceMLCommon_1_1LinAlg.html#a1816f8bceb2b52d79599d2a30c9f8f11',1,'MLCommon::LinAlg::for()']]],
  ['foreach_724',['forEach',['../namespaceMLCommon.html#aaa7d77b43d0df2c33adc492161c560cd',1,'MLCommon']]],
  ['forecast_725',['forecast',['../namespaceML_1_1HoltWinters.html#ab5ddd5680db72f23bbebfd8ec1f9b7b1',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, float *level_d, float *trend_d, float *season_d, float *forecast_d)'],['../namespaceML_1_1HoltWinters.html#a9b8c74b50cfc82d1b861aaffd3ad0734',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, double *level_d, double *trend_d, double *season_d, double *forecast_d)']]],
  ['forest_5fparams_5ft_726',['forest_params_t',['../structML_1_1fil_1_1forest__params__t.html',1,'ML::fil']]],
  ['forest_5ft_727',['forest_t',['../namespaceML_1_1fil.html#a71195542fb2df9fa46374176402fb4fa',1,'ML::fil']]],
  ['format_728',['format',['../group__CStringFormat.html#gabb9694969393f0288a606c9184435ef9',1,'ML::format(const char *fmt, va_list &amp;vl)'],['../group__CStringFormat.html#gad55df9da3c66646eee88f92620cef30a',1,'ML::format(const char *fmt,...)']]],
  ['four_5fn_729',['FOUR_N',['../namespaceML_1_1TSNE.html#abf75b02e7b11bdbcffd20d6895d97090',1,'ML::TSNE']]],
  ['four_5fnnodes_730',['FOUR_NNODES',['../namespaceML_1_1TSNE.html#ad506ff98589c53814844d9f8663a127d',1,'ML::TSNE']]],
  ['fragment_5fsqrt_2eh_731',['fragment_sqrt.h',['../fragment__sqrt_8h.html',1,'']]],
  ['fragmenta_732',['FragmentA',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#af352fe5e0476bd7b85a991dc5944fb22',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentA()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a0a3a86fde537db8245b1e04b24130800',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentA()']]],
  ['fragmentb_733',['FragmentB',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#a4876355754f7be69de55693f6e898920',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentB()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a529f28e1e35fc231617c572707c54c03',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentB()']]],
  ['fragmentmultiplyadd_734',['FragmentMultiplyAdd',['../structMLCommon_1_1Distance_1_1DistanceEpilogueFunctor.html#a9b47ee7bfa6950eb88b78f89ed8d52d8',1,'MLCommon::Distance::DistanceEpilogueFunctor::FragmentMultiplyAdd()'],['../structMLCommon_1_1Distance_1_1LinearScalingSqrt.html#ac08556475070e99f368896967e9abb3d',1,'MLCommon::Distance::LinearScalingSqrt::FragmentMultiplyAdd()']]],
  ['fragmentsqrt_735',['FragmentSqrt',['../structMLCommon_1_1Distance_1_1FragmentSqrt.html',1,'MLCommon::Distance::FragmentSqrt&lt; Scalar_ &gt;'],['../structMLCommon_1_1Distance_1_1FragmentSqrt.html#a6e1c0976576c01bbcb067401e07209aa',1,'MLCommon::Distance::FragmentSqrt::FragmentSqrt()']]],
  ['francis_5fqr_5falgorithm_5fkernel_736',['francis_qr_algorithm_kernel',['../namespaceMLCommon_1_1LinAlg_1_1Batched.html#a061a8fe688e5980e4f3a1b9ad10bf3d0',1,'MLCommon::LinAlg::Batched']]],
  ['free_737',['free',['../namespaceML_1_1fil.html#aa7cd2f618d901fe4268ab05758cfb56e',1,'ML::fil']]],
  ['free_5fucp_5frequest_738',['free_ucp_request',['../classcomms__ucp__handler.html#a9a675aa6d798d00e976ab1690c79a815',1,'comms_ucp_handler']]],
  ['from_5fdense_739',['from_dense',['../classMLCommon_1_1Sparse_1_1Batched_1_1CSR.html#a46327e714f5b3259b6f5413faf6c9fce',1,'MLCommon::Sparse::Batched::CSR']]],
  ['from_5fknn_740',['from_knn',['../namespaceMLCommon_1_1Sparse.html#a542a1baa2c05158f7a2d6f397df499f1',1,'MLCommon::Sparse::from_knn(const long *knn_indices, const T *knn_dists, int m, int k, int *rows, int *cols, T *vals)'],['../namespaceMLCommon_1_1Sparse.html#a968738ea73cf60044280275e326ca31b',1,'MLCommon::Sparse::from_knn(const long *knn_indices, const T *knn_dists, int m, int k, COO&lt; T &gt; *out, cudaStream_t stream)']]],
  ['from_5fknn_5fgraph_5fkernel_741',['from_knn_graph_kernel',['../namespaceMLCommon_1_1Sparse.html#a91ee6a347c886f8a43fbae0b9449de9e',1,'MLCommon::Sparse']]],
  ['from_5fknn_5fsymmetrize_5fmatrix_742',['from_knn_symmetrize_matrix',['../namespaceMLCommon_1_1Sparse.html#af994f66d6ed0b132022ea0ccaacd884e',1,'MLCommon::Sparse']]],
  ['from_5ftreelite_743',['from_treelite',['../namespaceML_1_1fil.html#a63e0c1e662ac33d26a7523374ff7e34b',1,'ML::fil']]],
  ['functor_744',['Functor',['../structMLCommon_1_1Distance_1_1DistanceGemmEpilogue.html#aa95e3be68cfb0be14673c67f31e86ba0',1,'MLCommon::Distance::DistanceGemmEpilogue::Functor()'],['../structMLCommon_1_1Distance_1_1BoolEpilogueTraitsHelper.html#a21757e06ac52a0ecb9bbdf6db0fda713',1,'MLCommon::Distance::BoolEpilogueTraitsHelper::Functor()']]],
  ['fused_5fdistance_745',['fused_distance',['../structMLCommon_1_1Distance_1_1L2FusedDistance.html#ac38e910fa9de6bb5f368b9b491516234',1,'MLCommon::Distance::L2FusedDistance::fused_distance()'],['../structMLCommon_1_1Distance_1_1CosFusedDistance.html#aca6e989b1bdc8b2d674d978736e62aff',1,'MLCommon::Distance::CosFusedDistance::fused_distance()']]],
  ['fused_5fl2_5fnn_2eh_746',['fused_l2_nn.h',['../fused__l2__nn_8h.html',1,'']]],
  ['fusedl2nn_747',['FusedL2NN',['../structMLCommon_1_1Distance_1_1FusedL2NN.html',1,'MLCommon::Distance::FusedL2NN&lt; DataT, OutT, IdxT, Sqrt, Policy, ReduceOpT, BaseClass &gt;'],['../structMLCommon_1_1Distance_1_1FusedL2NN.html#a86c221493d4ea34e86e9590de84332de',1,'MLCommon::Distance::FusedL2NN::FusedL2NN()'],['../namespaceMLCommon_1_1Distance.html#ad150c512a26f40732f0fd3dc431a32aa',1,'MLCommon::Distance::fusedL2NN()']]],
  ['fusedl2nnimpl_748',['fusedL2NNImpl',['../namespaceMLCommon_1_1Distance.html#ad291cbe4d34f2590ebcc152700db37dd',1,'MLCommon::Distance']]],
  ['forecast_20methods_749',['Forecast methods',['../group__HoltWinterForecast.html',1,'']]],
  ['fit_20an_20ordinary_20least_20squares_20model_750',['fit an ordinary least squares model',['../group__olsFit.html',1,'']]],
  ['function_20for_20eig_20decomp_20with_20jacobi_20method_20for_20the_751',['function for eig decomp with Jacobi method for the',['../group__overloaded.html',1,'']]],
  ['fit_20a_20ridge_20regression_20model_20_28l2_20regularized_20least_20squares_29_752',['fit a ridge regression model (l2 regularized least squares)',['../group__ridgeFit.html',1,'']]],
  ['flip_20for_20pca_20and_20tsvd_2e_20this_20is_20used_20to_20stabilize_20the_20sign_20of_20column_20major_20eigen_20vectors_753',['flip for PCA and tSVD. This is used to stabilize the sign of column major eigen vectors',['../group__sign.html',1,'']]]
];
