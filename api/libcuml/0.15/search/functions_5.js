var searchData=
[
  ['find_5fab_1809',['find_ab',['../namespaceML.html#afb04181b9f5bbcbf551b761927a0f24d',1,'ML']]],
  ['fit_1810',['fit',['../classML_1_1UMAP__API.html#ab4f3918b7a90a91c1cc2f883cd60387b',1,'ML::UMAP_API::fit(float *X, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1UMAP__API.html#a8e30b5e7d2c78a4a71d2f6000298e2db',1,'ML::UMAP_API::fit(float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1kNN.html#aa7c545ae08dee20b43ca6acf0b7b0548',1,'ML::kNN::fit()'],['../classML_1_1SVM_1_1SVC.html#ae92426856f0c995e31312fb89607f192',1,'ML::SVM::SVC::fit()'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#ab81b1298dd287982334d7f4f5e1702bf',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#a4ad1d922a8062c07de111c33d66389e7',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a953b5619e6c1971ea66b3f2b489302b5',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a5d825bcbee6657c3b71f00f8e9ae2c07',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem)'],['../classML_1_1rfClassifier.html#a8fefbdc8ed9276f5fd57310e7970d0c6',1,'ML::rfClassifier::fit()'],['../classML_1_1rfRegressor.html#a6b44dffa92f684a658f0dd8479853c1b',1,'ML::rfRegressor::fit()'],['../namespaceML_1_1kmeans.html#a8b7019455f027b3b72592fcf1d89081d',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#aa133dc0ad95314df1d90b04ae86cc82e',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML.html#a3178043c2fb0711c827614649cd6028f',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierF *&amp;forest, float *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#af46cf0ee6ea9c998146d3102ccd01868',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierD *&amp;forest, double *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#ad45e1013123ee57f6547a791b7cb40c6',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorF *&amp;forest, float *input, int n_rows, int n_cols, float *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#aa31ee6fbdebd3e6d899e8de88b304473',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorD *&amp;forest, double *input, int n_rows, int n_cols, double *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#ad764fd7aacaefdae4073c077e4ad636a',1,'ML::fit(const cumlHandle &amp;handle, float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML.html#a96e08b2209718522d472238b3792cfb8',1,'ML::fit(const cumlHandle &amp;handle, float *X, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML_1_1HoltWinters.html#a0a558949affcb44658c2cc9b7a3ff5d5',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, float epsilon, float *data, float *level_d, float *trend_d, float *season_d, float *error_d)'],['../namespaceML_1_1HoltWinters.html#ae0a6fce4d413310d8caff01e1c89c746',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, double epsilon, double *data, double *level_d, double *trend_d, double *season_d, double *error_d)']]],
  ['fit_5fclusters_1811',['fit_clusters',['../namespaceML_1_1Spectral.html#a3664770137e36d37faf2e41caa99dbdd',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, int *rows, int *cols, float *vals, int nnz, int n, int n_clusters, float eigen_tol, int *out)'],['../namespaceML_1_1Spectral.html#a34fc5e633cb7f15bca19f881b9003f52',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, long *knn_indices, float *knn_dists, int m, int n_neighbors, int n_clusters, float eigen_tol, int *out)'],['../namespaceML_1_1Spectral.html#a51218c9f85632815aba197fbfc980e48',1,'ML::Spectral::fit_clusters(const cumlHandle &amp;handle, float *X, int m, int n, int n_neighbors, int n_clusters, float eigen_tol, int *out)']]],
  ['fit_5fembedding_1812',['fit_embedding',['../namespaceML_1_1Spectral.html#a6491cb1b6ec51b8b6751853eca20ab3f',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, int *rows, int *cols, float *vals, int nnz, int n, int n_components, float *out)'],['../namespaceML_1_1Spectral.html#a8468e536b6b38f8c329051e2f6f11b4a',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, long *knn_indices, float *knn_dists, int m, int n_neighbors, int n_components, float *out)'],['../namespaceML_1_1Spectral.html#ad6ebee13f8168d8325a993168175d03f',1,'ML::Spectral::fit_embedding(const cumlHandle &amp;handle, float *X, int m, int n, int n_neighbors, int n_components, float *out)']]],
  ['fit_5fpredict_1813',['fit_predict',['../namespaceML_1_1kmeans.html#a6784952b17070cf0770225a744a247c7',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, int *labels, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#a6fa2bb7469f01280da6440aaabdf7201',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, int *labels, double &amp;inertia, int &amp;n_iter)']]],
  ['forecast_1814',['forecast',['../namespaceML_1_1HoltWinters.html#ab5ddd5680db72f23bbebfd8ec1f9b7b1',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, float *level_d, float *trend_d, float *season_d, float *forecast_d)'],['../namespaceML_1_1HoltWinters.html#a9b8c74b50cfc82d1b861aaffd3ad0734',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, double *level_d, double *trend_d, double *season_d, double *forecast_d)']]],
  ['format_1815',['format',['../group__CStringFormat.html#gabb9694969393f0288a606c9184435ef9',1,'ML::format(const char *fmt, va_list &amp;vl)'],['../group__CStringFormat.html#gad55df9da3c66646eee88f92620cef30a',1,'ML::format(const char *fmt,...)']]],
  ['free_1816',['free',['../namespaceML_1_1fil.html#aa7cd2f618d901fe4268ab05758cfb56e',1,'ML::fil']]],
  ['free_5fucp_5frequest_1817',['free_ucp_request',['../classcomms__ucp__handler.html#a9a675aa6d798d00e976ab1690c79a815',1,'comms_ucp_handler']]],
  ['from_5ftreelite_1818',['from_treelite',['../namespaceML_1_1fil.html#a63e0c1e662ac33d26a7523374ff7e34b',1,'ML::fil']]]
];
