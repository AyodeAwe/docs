var searchData=
[
  ['data_1903',['data',['../classML_1_1Tensor.html#a67d266dc0a974283640f369e0953aff3',1,'ML::Tensor::data()'],['../classML_1_1Tensor.html#a07caa0b94f8c1e3b480efca629810753',1,'ML::Tensor::data() const'],['../classMLCommon_1_1buffer__base.html#a6cfb419e0cdf871abec33416711ae8ec',1,'MLCommon::buffer_base::data()'],['../classMLCommon_1_1buffer__base.html#acc378b9a4407057b7bcd62bfded37eed',1,'MLCommon::buffer_base::data() const']]],
  ['dbscanfit_1904',['dbscanFit',['../group__DbscanCpp.html#ga7fe49b204a9037ab4ee8f88a9cb10a61',1,'ML::dbscanFit(const cumlHandle &amp;handle, float *input, int n_rows, int n_cols, float eps, int min_pts, int *labels, int *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO)'],['../group__DbscanCpp.html#gae8bf7ed6ccad43945a871db0e0d9b9c9',1,'ML::dbscanFit(const cumlHandle &amp;handle, double *input, int n_rows, int n_cols, double eps, int min_pts, int *labels, int *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO)'],['../group__DbscanCpp.html#gaae33c568620c1c126d14bf92d1ecd2c1',1,'ML::dbscanFit(const cumlHandle &amp;handle, float *input, int64_t n_rows, int64_t n_cols, float eps, int min_pts, int64_t *labels, int64_t *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO)'],['../group__DbscanCpp.html#ga92a0c83336e5f5c1dbc9edb431fa2756',1,'ML::dbscanFit(const cumlHandle &amp;handle, double *input, int64_t n_rows, int64_t n_cols, double eps, int min_pts, int64_t *labels, int64_t *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO)']]],
  ['deallocate_1905',['deallocate',['../classML_1_1cachingDeviceAllocator.html#aeb494ff86d2aa49ec5b7e612deec0435',1,'ML::cachingDeviceAllocator::deallocate()'],['../classMLCommon_1_1deviceAllocator.html#ab9c300aa174d58cdf4f6063a3351392f',1,'MLCommon::deviceAllocator::deallocate()'],['../classMLCommon_1_1hostAllocator.html#af0b78d3f31294f8a183f9debfb107d19',1,'MLCommon::hostAllocator::deallocate()'],['../classMLCommon_1_1defaultDeviceAllocator.html#af0e5082214bd462607125ef4abe07a4b',1,'MLCommon::defaultDeviceAllocator::deallocate()'],['../classMLCommon_1_1defaultHostAllocator.html#a6665444f15c2436d7bd3a330bef7ac25',1,'MLCommon::defaultHostAllocator::deallocate()'],['../classML_1_1rmmAllocatorAdapter.html#a956f8d85e476420366330e4b013557c3',1,'ML::rmmAllocatorAdapter::deallocate()'],['../structML_1_1ARIMAParams.html#acde931c8a1aca5a2c69c57847808f324',1,'ML::ARIMAParams::deallocate()'],['../classML_1_1stdAllocatorAdapter.html#aacbcb42289e7facfe6a3cbc9512b2574',1,'ML::stdAllocatorAdapter::deallocate()'],['../classML_1_1thrustAllocatorAdapter.html#a2b488fbeb7ba661d82117ab8c3b05207',1,'ML::thrustAllocatorAdapter::deallocate()']]],
  ['decisionfunction_1906',['decisionFunction',['../classML_1_1SVM_1_1SVC.html#ad41eef19705c2dd64c151d5a57a14ffe',1,'ML::SVM::SVC']]],
  ['decisiontreeclassifierfit_1907',['decisionTreeClassifierFit',['../group__DecisionTreeClassifierFit.html#gad45c4af2d59d17610895f72930341ace',1,'ML::DecisionTree::decisionTreeClassifierFit(const ML::cumlHandle &amp;handle, TreeClassifierF *&amp;tree, float *data, const int ncols, const int nrows, int *labels, unsigned int *rowids, const int n_sampled_rows, int unique_labels, DecisionTree::DecisionTreeParams tree_params)'],['../group__DecisionTreeClassifierFit.html#ga3af159ae8744d278a4e7200656b6d6c4',1,'ML::DecisionTree::decisionTreeClassifierFit(const ML::cumlHandle &amp;handle, TreeClassifierD *&amp;tree, double *data, const int ncols, const int nrows, int *labels, unsigned int *rowids, const int n_sampled_rows, int unique_labels, DecisionTree::DecisionTreeParams tree_params)']]],
  ['decisiontreeclassifierpredict_1908',['decisionTreeClassifierPredict',['../group__DecisionTreeClassifierPredict.html#ga88341aabdf4e151c10a3e26025b3449c',1,'ML::DecisionTree::decisionTreeClassifierPredict(const ML::cumlHandle &amp;handle, const TreeClassifierF *tree, const float *rows, const int n_rows, const int n_cols, int *predictions, int verbosity=-1)'],['../group__DecisionTreeClassifierPredict.html#gaec98ef048259cb652b35ceb9fe1b8ad4',1,'ML::DecisionTree::decisionTreeClassifierPredict(const ML::cumlHandle &amp;handle, const TreeClassifierD *tree, const double *rows, const int n_rows, const int n_cols, int *predictions, int verbosity=-1)']]],
  ['decisiontreeregressorfit_1909',['decisionTreeRegressorFit',['../group__DecisionTreeRegressorFit.html#gaf340b87f20a45b1c5633c88f5cd4e98f',1,'ML::DecisionTree::decisionTreeRegressorFit(const ML::cumlHandle &amp;handle, TreeRegressorF *&amp;tree, float *data, const int ncols, const int nrows, float *labels, unsigned int *rowids, const int n_sampled_rows, DecisionTree::DecisionTreeParams tree_params)'],['../group__DecisionTreeRegressorFit.html#ga75445b3534c53f1cb797a3c522f54570',1,'ML::DecisionTree::decisionTreeRegressorFit(const ML::cumlHandle &amp;handle, TreeRegressorD *&amp;tree, double *data, const int ncols, const int nrows, double *labels, unsigned int *rowids, const int n_sampled_rows, DecisionTree::DecisionTreeParams tree_params)']]],
  ['decisiontreeregressorpredict_1910',['decisionTreeRegressorPredict',['../group__DecisionTreeRegressorPredict.html#gac5c76ba3358fe2daa5f1c5f4627e51ff',1,'ML::DecisionTree::decisionTreeRegressorPredict(const ML::cumlHandle &amp;handle, const TreeRegressorF *tree, const float *rows, const int n_rows, const int n_cols, float *predictions, int verbosity=-1)'],['../group__DecisionTreeRegressorPredict.html#gad850c970f1c8523b4d9b8d433be67b6d',1,'ML::DecisionTree::decisionTreeRegressorPredict(const ML::cumlHandle &amp;handle, const TreeRegressorD *tree, const double *rows, const int n_rows, const int n_cols, double *predictions, int verbosity=-1)']]],
  ['delete_5frf_5fmetadata_1911',['delete_rf_metadata',['../namespaceML.html#a47bd45d133f5b3bb3748a6e5d1c61c91',1,'ML']]],
  ['dense_5fnode_5fdecode_1912',['dense_node_decode',['../namespaceML_1_1fil.html#aea6c334ab4fd87775ed9ca62ca60719d',1,'ML::fil']]],
  ['dense_5fnode_5finit_1913',['dense_node_init',['../namespaceML_1_1fil.html#a4e261533a89e6bab52fd11a4dc654ffd',1,'ML::fil']]],
  ['destroy_1914',['destroy',['../classML_1_1stdAllocatorAdapter.html#a72cba7aa003c3b21bd158000f3fb3ca4',1,'ML::stdAllocatorAdapter']]],
  ['divide_5fby_5fmask_5fbuild_5findex_1915',['divide_by_mask_build_index',['../namespaceML.html#a9b405e6f9f3db9cac8aaae19d7e5d248',1,'ML']]],
  ['divide_5fby_5fmask_5fexecute_1916',['divide_by_mask_execute',['../namespaceML.html#ad1c435c216faa448659b1cde7d1986e3',1,'ML::divide_by_mask_execute(const cumlHandle &amp;handle, const float *d_in, const bool *d_mask, const int *d_index, float *d_out0, float *d_out1, int batch_size, int n_obs)'],['../namespaceML.html#afc1cabfc9ff74ab0bdc95cb06e4ab960',1,'ML::divide_by_mask_execute(const cumlHandle &amp;handle, const double *d_in, const bool *d_mask, const int *d_index, double *d_out0, double *d_out1, int batch_size, int n_obs)'],['../namespaceML.html#afc659b41b156e8e42ba3c2122e8f8a3e',1,'ML::divide_by_mask_execute(const cumlHandle &amp;handle, const int *d_in, const bool *d_mask, const int *d_index, int *d_out0, int *d_out1, int batch_size, int n_obs)']]],
  ['divide_5fby_5fmin_5fbuild_5findex_1917',['divide_by_min_build_index',['../namespaceML.html#ae27f776eb7d7e86a6992d250fa419ceb',1,'ML::divide_by_min_build_index(const cumlHandle &amp;handle, const float *d_matrix, int *d_batch, int *d_index, int *h_size, int batch_size, int n_sub)'],['../namespaceML.html#a007f3e1843a6acc2dc8b3c960bdc2952',1,'ML::divide_by_min_build_index(const cumlHandle &amp;handle, const double *d_matrix, int *d_batch, int *d_index, int *h_size, int batch_size, int n_sub)']]],
  ['divide_5fby_5fmin_5fexecute_1918',['divide_by_min_execute',['../namespaceML.html#aa8733698ab26995e79d1ecb81f4e39ac',1,'ML::divide_by_min_execute(const cumlHandle &amp;handle, const float *d_in, const int *d_batch, const int *d_index, float **hd_out, int batch_size, int n_sub, int n_obs)'],['../namespaceML.html#a8048a419d2955fb918a5a92948264307',1,'ML::divide_by_min_execute(const cumlHandle &amp;handle, const double *d_in, const int *d_batch, const int *d_index, double **hd_out, int batch_size, int n_sub, int n_obs)'],['../namespaceML.html#aa4e79bd6946fc93392f259e37d24a989',1,'ML::divide_by_min_execute(const cumlHandle &amp;handle, const int *d_in, const int *d_batch, const int *d_index, int **hd_out, int batch_size, int n_sub, int n_obs)']]]
];
