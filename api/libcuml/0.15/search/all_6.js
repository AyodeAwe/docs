var searchData=
[
  ['fit_20functions_455',['Fit functions',['../group__DecisionTreeClassifierFit.html',1,'']]],
  ['fit_20functions_456',['Fit functions',['../group__DecisionTreeRegressorFit.html',1,'']]],
  ['f_457',['f',['../unionML_1_1fil_1_1val__t.html#ad6731a4409f82a8d896b2808bcd75133',1,'ML::fil::val_t']]],
  ['fast_5fint_5fdiv_2ecuh_458',['fast_int_div.cuh',['../fast__int__div_8cuh.html',1,'']]],
  ['fil_2ecu_459',['fil.cu',['../fil_8cu.html',1,'']]],
  ['fil_2eh_460',['fil.h',['../fil_8h.html',1,'']]],
  ['find_5fab_461',['find_ab',['../namespaceML.html#afb04181b9f5bbcbf551b761927a0f24d',1,'ML']]],
  ['fit_462',['fit',['../classML_1_1UMAP__API.html#ab4f3918b7a90a91c1cc2f883cd60387b',1,'ML::UMAP_API::fit(float *X, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1UMAP__API.html#a8e30b5e7d2c78a4a71d2f6000298e2db',1,'ML::UMAP_API::fit(float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, float *embeddings)'],['../classML_1_1SVM_1_1SVC.html#ae92426856f0c995e31312fb89607f192',1,'ML::SVM::SVC::fit()'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#ab81b1298dd287982334d7f4f5e1702bf',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#a4ad1d922a8062c07de111c33d66389e7',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a953b5619e6c1971ea66b3f2b489302b5',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const ML::cumlHandle &amp;handle, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a5d825bcbee6657c3b71f00f8e9ae2c07',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem)'],['../classML_1_1rfClassifier.html#a8fefbdc8ed9276f5fd57310e7970d0c6',1,'ML::rfClassifier::fit()'],['../classML_1_1rfRegressor.html#a6b44dffa92f684a658f0dd8479853c1b',1,'ML::rfRegressor::fit()'],['../namespaceML_1_1kmeans.html#a8b7019455f027b3b72592fcf1d89081d',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#aa133dc0ad95314df1d90b04ae86cc82e',1,'ML::kmeans::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#a0275037c12eee9414607b1c130534f12',1,'ML::kmeans::opg::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#a250af5cd40577b98c0f1b696c84492d3',1,'ML::kmeans::opg::fit(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1PCA_1_1opg.html#a64661d506298320497865b07117c3560',1,'ML::PCA::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1PCA_1_1opg.html#a59a977a5ffbd0706f74bb90aee41c262',1,'ML::PCA::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#ad87cec65735c72f0f00bc37f85ac765f',1,'ML::TSVD::opg::fit(cumlHandle &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, float *components, float *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#aa0f3545aac57236e7b312b60245e0e38',1,'ML::TSVD::opg::fit(cumlHandle &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, double *components, double *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML.html#a3178043c2fb0711c827614649cd6028f',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierF *&amp;forest, float *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#af46cf0ee6ea9c998146d3102ccd01868',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestClassifierD *&amp;forest, double *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#ad45e1013123ee57f6547a791b7cb40c6',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorF *&amp;forest, float *input, int n_rows, int n_cols, float *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#aa31ee6fbdebd3e6d899e8de88b304473',1,'ML::fit(const cumlHandle &amp;user_handle, RandomForestRegressorD *&amp;forest, double *input, int n_rows, int n_cols, double *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML_1_1OLS_1_1opg.html#a4d513234ffb559fa9773b63fd6413b40',1,'ML::OLS::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1OLS_1_1opg.html#af6e43066d30f4243d2589a632c7e8a18',1,'ML::OLS::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#aef5b542e24baa7ac42959c3ed57579a1',1,'ML::Ridge::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *alpha, int n_alpha, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#ab1b4a698ace746bcbe426a9544891206',1,'ML::Ridge::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *alpha, int n_alpha, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML.html#ad764fd7aacaefdae4073c077e4ad636a',1,'ML::fit(const cumlHandle &amp;handle, float *X, float *y, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML.html#a96e08b2209718522d472238b3792cfb8',1,'ML::fit(const cumlHandle &amp;handle, float *X, int n, int d, int64_t *knn_indices, float *knn_dists, UMAPParams *params, float *embeddings)'],['../namespaceML_1_1CD_1_1opg.html#a7d27bf34c037053810c3582bb54232db',1,'ML::CD::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int epochs, float alpha, float l1_ratio, bool shuffle, float tol, bool verbose)'],['../namespaceML_1_1CD_1_1opg.html#a6e165cadc68b5ad168c65470f4297a89',1,'ML::CD::opg::fit(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int epochs, double alpha, double l1_ratio, bool shuffle, double tol, bool verbose)'],['../namespaceML_1_1HoltWinters.html#a0a558949affcb44658c2cc9b7a3ff5d5',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, float epsilon, float *data, float *level_d, float *trend_d, float *season_d, float *error_d)'],['../namespaceML_1_1HoltWinters.html#ae0a6fce4d413310d8caff01e1c89c746',1,'ML::HoltWinters::fit(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, double epsilon, double *data, double *level_d, double *trend_d, double *season_d, double *error_d)']]],
  ['fit_5fembedding_463',['fit_embedding',['../namespaceML_1_1Spectral.html#a6491cb1b6ec51b8b6751853eca20ab3f',1,'ML::Spectral']]],
  ['fit_5fpredict_464',['fit_predict',['../namespaceML_1_1kmeans.html#a6784952b17070cf0770225a744a247c7',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, int *labels, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#a6fa2bb7469f01280da6440aaabdf7201',1,'ML::kmeans::fit_predict(const ML::cumlHandle &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, int *labels, double &amp;inertia, int &amp;n_iter)']]],
  ['fit_5ftransform_465',['fit_transform',['../namespaceML_1_1PCA_1_1opg.html#af747dab3070cae5980c9c1aeb16b3bd3',1,'ML::PCA::opg::fit_transform(cumlHandle &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, MLCommon::Matrix::floatData_t **trans_input, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1PCA_1_1opg.html#addfae94fbeca7d82e21ddfe39eda99fe',1,'ML::PCA::opg::fit_transform(cumlHandle &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, MLCommon::Matrix::doubleData_t **trans_input, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#a9801f09f17580325887c6c06f921e1c6',1,'ML::TSVD::opg::fit_transform(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, paramsTSVD prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#a71001669c35ce266b9e9c27252cb5176',1,'ML::TSVD::opg::fit_transform(cumlHandle &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, paramsTSVD prms, bool verbose)']]],
  ['flatnode_2eh_466',['flatnode.h',['../flatnode_8h.html',1,'']]],
  ['float_467',['FLOAT',['../classMLCommon_1_1cumlCommunicator.html#a7ecf440424f1294d7ec4d5100239c254a3a89b943e32fd9e66b1d0916814036ec',1,'MLCommon::cumlCommunicator']]],
  ['float_5fscalar_468',['FLOAT_SCALAR',['../namespaceML_1_1fil.html#acce64cbc31458627350a7939f913d8dea79d2a76a5affa183d91304401423e1a5',1,'ML::fil']]],
  ['forecast_469',['forecast',['../namespaceML_1_1HoltWinters.html#ab5ddd5680db72f23bbebfd8ec1f9b7b1',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, float *level_d, float *trend_d, float *season_d, float *forecast_d)'],['../namespaceML_1_1HoltWinters.html#a9b8c74b50cfc82d1b861aaffd3ad0734',1,'ML::HoltWinters::forecast(const ML::cumlHandle &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, double *level_d, double *trend_d, double *season_d, double *forecast_d)']]],
  ['forest_5fparams_5ft_470',['forest_params_t',['../structML_1_1fil_1_1forest__params__t.html',1,'ML::fil']]],
  ['forest_5ft_471',['forest_t',['../namespaceML_1_1fil.html#a71195542fb2df9fa46374176402fb4fa',1,'ML::fil']]],
  ['format_472',['format',['../group__CStringFormat.html#gabb9694969393f0288a606c9184435ef9',1,'ML::format(const char *fmt, va_list &amp;vl)'],['../group__CStringFormat.html#gad55df9da3c66646eee88f92620cef30a',1,'ML::format(const char *fmt,...)']]],
  ['fragment_5fsqrt_2ecuh_473',['fragment_sqrt.cuh',['../fragment__sqrt_8cuh.html',1,'']]],
  ['fragmenta_474',['FragmentA',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#af352fe5e0476bd7b85a991dc5944fb22',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentA()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a0a3a86fde537db8245b1e04b24130800',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentA()']]],
  ['fragmentb_475',['FragmentB',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#a4876355754f7be69de55693f6e898920',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentB()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a529f28e1e35fc231617c572707c54c03',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentB()']]],
  ['free_476',['free',['../namespaceML_1_1fil.html#aa7cd2f618d901fe4268ab05758cfb56e',1,'ML::fil']]],
  ['free_5fucp_5frequest_477',['free_ucp_request',['../classcomms__ucp__handler.html#a9a675aa6d798d00e976ab1690c79a815',1,'comms_ucp_handler']]],
  ['from_5ftreelite_478',['from_treelite',['../namespaceML_1_1fil.html#a63e0c1e662ac33d26a7523374ff7e34b',1,'ML::fil']]],
  ['functor_479',['Functor',['../structMLCommon_1_1Distance_1_1BoolEpilogueTraitsHelper.html#a21757e06ac52a0ecb9bbdf6db0fda713',1,'MLCommon::Distance::BoolEpilogueTraitsHelper']]],
  ['fused_5fl2_5fnn_2ecuh_480',['fused_l2_nn.cuh',['../fused__l2__nn_8cuh.html',1,'']]],
  ['forecast_20methods_481',['Forecast methods',['../group__HoltWinterForecast.html',1,'']]],
  ['fit_20an_20ordinary_20least_20squares_20model_482',['fit an ordinary least squares model',['../group__olsFit.html',1,'']]],
  ['fit_20a_20ridge_20regression_20model_20_28l2_20regularized_20least_20squares_29_483',['fit a ridge regression model (l2 regularized least squares)',['../group__ridgeFit.html',1,'']]]
];
